Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\CampaignModule_AllFileDump.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\CampaignModule_AllFileDump.txt 
====================================================== 
 
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\ExtrackAllFiles.bat 
====================================================== 
 
@echo off
REM This script will find all files and output their name and content into one file.
REM The output file will be named [FolderName]_AllFileDump.txt.

REM Get the current folder's name and set it as the output file name with the custom suffix
for %%I in ("%cd%") do set "outputFile=%%~nI_AllFileDump.txt"

REM Clear the output file to start fresh
> "%outputFile%" (echo Folder and File Content Report)
echo. >> "%outputFile%"

REM Loop through all files in the current directory and subdirectories
for /R . %%F in (*.*) do (
    echo ====================================================== >> "%outputFile%"
    echo FILE: %%F >> "%outputFile%"
    echo ====================================================== >> "%outputFile%"
    echo. >> "%outputFile%"
    type "%%F" >> "%outputFile%" 2>nul
    echo. >> "%outputFile%"
    echo. >> "%outputFile%"
)

echo Finished! All content has been extracted to %outputFile% 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignController.cs 
====================================================== 
 
Ôªøusing Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Serilog;
using System;
using System.Security.Claims;
using System.Threading.Tasks;
using xbytechat.api.AuthModule.Models;
using xbytechat.api.Features.BusinessModule.Services;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat.api.Helpers;
using xbytechat.api.Shared;
using static xbytechat.api.Features.MessagesEngine.Controllers.MessageEngineController;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CampaignController : ControllerBase
    {
        private readonly ICampaignService _campaignService;
        private readonly IBusinessService _businessService;
        private readonly IMessageEngineService _messageService;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public CampaignController(
            ICampaignService campaignService,
            IBusinessService businessService,
            IMessageEngineService messageEngineService,
            IHttpContextAccessor httpContextAccessor)
        {
            _campaignService = campaignService;
            _businessService = businessService;
            _messageService = messageEngineService;
            _httpContextAccessor = httpContextAccessor;
        }


        [HttpGet("get-image-campaign")]
        public async Task<IActionResult> GetAll([FromQuery] string? type)
        {
            var businessId = GetBusinessIdOrThrow();
            var items = await _campaignService.GetAllCampaignsAsync(businessId, type);
            return Ok(items);
        }
        [HttpGet("paginated")]
        public async Task<IActionResult> GetPaginatedCampaigns([FromQuery] PaginatedRequest request)
        {
            var user = HttpContext.User;
            var businessIdClaim = user.FindFirst("businessId");

            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))
                return Unauthorized(new { message = "üö´ Invalid or missing BusinessId claim." });

            var result = await _campaignService.GetPaginatedCampaignsAsync(businessId, request);
            return Ok(result);
        }

        [HttpGet("debug-claims")]
        public IActionResult DebugClaims()
        {
            var user = HttpContext.User;
            var businessId = user.FindFirst("businessId")?.Value;

            return Ok(new
            {
                name = user.Identity?.Name,
                businessId
            });
        }

        [HttpPost("create-text-campaign")]
        public async Task<IActionResult> CreateTextCampaign([FromBody] CampaignCreateDto dto)
        {
            try
            {
                var businessIdClaim = User.FindFirst("businessId")?.Value;
                if (!Guid.TryParse(businessIdClaim, out var businessId))
                    return Unauthorized(new { message = "üö´ Invalid or missing BusinessId claim." });

                var createdBy = User.Identity?.Name ?? "system";

                if (string.IsNullOrWhiteSpace(dto.Name))
                    return BadRequest(new { message = "üö´ Campaign name is required." });

                if (string.IsNullOrWhiteSpace(dto.TemplateId))
                    return BadRequest(new { message = "üö´ TemplateId is required for template campaigns." });

                if (string.IsNullOrWhiteSpace(dto.MessageTemplate))
                    return BadRequest(new { message = "üö´ Message template content is required." });

                var campaignId = await _campaignService.CreateTextCampaignAsync(dto, businessId, createdBy);

                return campaignId != null
                    ? Ok(new
                    {
                        success = true,
                        message = "‚úÖ Campaign created successfully",
                        campaignId = campaignId.Value
                    })
                    : BadRequest(new { success = false, message = "‚ùå Failed to create campaign" });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception in CreateTextCampaign");
                return StatusCode(500, new { message = "üö® Internal server error", error = ex.Message });
            }
        }

        [HttpPost("create-image-campaign")]
        public async Task<IActionResult> CreateImageCampaign([FromBody] CampaignCreateDto dto)
        {
            try
            {
                var user = HttpContext.User;
                var businessIdClaim = user.FindFirst("businessId");

                if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))
                    return Unauthorized(new { message = "üö´ Invalid or missing BusinessId claim." });

                if (dto.MultiButtons != null && dto.MultiButtons.Any())
                {
                    var allowedTypes = new[] { "url", "copy_code", "flow", "phone_number", "quick_reply" };
                    foreach (var button in dto.MultiButtons)
                    {
                        var type = button.ButtonType?.Trim().ToLower();

                        if (!allowedTypes.Contains(type))
                            return BadRequest(new { message = $"‚ùå Invalid ButtonType: '{type}' is not supported." });

                        var needsValue = new[] { "url", "flow", "copy_code", "phone_number" };
                        if (needsValue.Contains(type) && string.IsNullOrWhiteSpace(button.TargetUrl))
                            return BadRequest(new { message = $"‚ùå Button '{button.ButtonText}' requires a valid TargetUrl or Value for type '{type}'." });

                        if (button.TargetUrl?.ToLower() == "unknown")
                            return BadRequest(new { message = $"‚ùå Invalid value 'unknown' found in button '{button.ButtonText}'." });
                    }
                }

                var createdBy = user.Identity?.Name ?? "system";
                var campaignId = await _campaignService.CreateImageCampaignAsync(businessId, dto, createdBy);

                return Ok(new
                {
                    success = true,
                    message = "‚úÖ Campaign created successfully",
                    campaignId
                });
            }
            catch (UnauthorizedAccessException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception in CreateImageCampaign");
                return StatusCode(500, new { message = "üö® Internal server error", error = ex.Message });
            }
        }

        // ‚úÖ Moved above {id} routes
        [HttpPost("{id}/assign-contacts")]
        public async Task<IActionResult> AssignContactsToCampaign(Guid id, [FromBody] AssignContactsDto request)
        {
            try
            {
                var businessId = GetBusinessId();
                var success = await _campaignService.AssignContactsToCampaignAsync(id, businessId, request.ContactIds);

                return success
                    ? Ok(new { message = "‚úÖ Contacts assigned" })
                    : BadRequest(new { message = "‚ùå Failed to assign contacts" });
            }
            catch (Exception ex)
            {
                Console.WriteLine("‚ùå Error assigning contacts: " + ex.Message);
                return StatusCode(500, new { message = "Internal error", error = ex.Message });
            }
        }

        [HttpDelete("{campaignId}/recipients/{contactId}")]
        public async Task<IActionResult> RemoveCampaignRecipient(Guid campaignId, Guid contactId)
        {
            try
            {
                var businessId = GetBusinessId();
                var success = await _campaignService.RemoveRecipientAsync(businessId, campaignId, contactId);

                if (!success)
                    return NotFound(new { message = "Recipient not found or not assigned" });

                return NoContent();
            }
            catch (Exception ex)
            {
                Console.WriteLine("‚ùå Remove recipient failed: " + ex.Message);
                return StatusCode(500, new { message = "Error removing recipient", detail = ex.Message });
            }
        }

        // Put this inside CampaignService (same class as SendTemplateCampaignWithTypeDetectionAsync)
        private static string? ResolveRecipientPhone(CampaignRecipient r)
        {
            // Try Contact first, then AudienceMember fallbacks
            return r?.Contact?.PhoneNumber
                ?? r?.AudienceMember?.PhoneE164
                ?? r?.AudienceMember?.PhoneRaw;
        }

        // Send All Type of campaign method 
        [HttpPost("send-campaign/{campaignId}")] // use to send free text and Template campaigns
        public async Task<IActionResult> SendTemplateCampaign(Guid campaignId)
        {
            try
            {
                var result = await _campaignService.SendTemplateCampaignWithTypeDetectionAsync(campaignId);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while sending image template campaign");
                return StatusCode(500, ResponseResult.ErrorInfo("üö® Server error while sending campaign", ex.ToString()));
            }
        }

        [HttpPost("send-template-campaign/{id}")]
        public async Task<IActionResult> SendImageCampaign(Guid id)
        {
            var result = await _campaignService.SendTemplateCampaignAsync(id);
            return result.Success ? Ok(result) : BadRequest(result);
        }

        [HttpPost("send/{campaignId}")]
        public async Task<IActionResult> SendCampaign(Guid campaignId)
        {
            try
            {
                var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
                var userAgent = Request.Headers["User-Agent"].ToString() ?? "unknown";

                var success = await _campaignService.SendCampaignAsync(campaignId, ipAddress, userAgent);

                return success
                    ? Ok(new { success = true, message = "‚úÖ Campaign sent successfully" })
                    : BadRequest(new { success = false, message = "‚ùå Campaign sending failed" });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception in SendCampaign");
                return StatusCode(500, new { success = false, message = "üö® Internal Server Error", error = ex.Message });
            }
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateCampaign(Guid id, [FromBody] CampaignCreateDto dto)
        {
            var result = await _campaignService.UpdateCampaignAsync(id, dto);
            return result
                ? Ok(new { message = "‚úèÔ∏è Campaign updated successfully" })
                : BadRequest(new { message = "‚ùå Update failed ‚Äî only draft campaigns can be edited" });
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteCampaign(Guid id)
        {
            var result = await _campaignService.DeleteCampaignAsync(id);
            return result
                ? Ok(new { message = "üóëÔ∏è Campaign deleted successfully" })
                : BadRequest(new { message = "‚ùå Delete failed ‚Äî only draft campaigns can be deleted" });
        }
        private Guid GetBusinessIdOrThrow()
        {
            string? raw =
                User?.FindFirst("business_id")?.Value ??
                User?.FindFirst("BusinessId")?.Value ??
                User?.FindFirst("businessId")?.Value ??
                Request.Headers["X-Business-Id"].FirstOrDefault();

            if (!Guid.TryParse(raw, out var id))
                throw new UnauthorizedAccessException("Business context missing.");
            return id;
        }
        [HttpGet("recipients/{id}")]
        public async Task<IActionResult> GetCampaignRecipients(Guid id)
        {
            try
            {
                var businessId = GetBusinessId();
                var recipients = await _campaignService.GetRecipientsByCampaignIdAsync(id, businessId);
                return Ok(recipients);
            }
            catch (Exception ex)
            {
                Console.WriteLine("‚ùå Error fetching campaign recipients: " + ex.Message);
                return StatusCode(500, new { message = "Error fetching recipients", detail = ex.Message });
            }
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<CampaignDto>> GetCampaignById(Guid id)
        {
            var businessId = GetBusinessId();
            var campaign = await _campaignService.GetCampaignByIdAsync(id, businessId);

            if (campaign == null)
                return NotFound();

            return Ok(campaign);
        }

        private Guid GetBusinessId()
        {
            var claim = HttpContext.User.FindFirst("businessId")?.Value;
            if (string.IsNullOrEmpty(claim))
                throw new UnauthorizedAccessException("BusinessId not found in token claims.");

            return Guid.Parse(claim);
        }
    
        [HttpGet("list/{businessId:guid}")]
        public async Task<IActionResult> GetAvailableFlows(Guid businessId, [FromQuery] bool onlyPublished = true)
        {
            var items = await _campaignService.GetAvailableFlowsAsync(businessId, onlyPublished);
            return Ok(new { success = true, items });
        }


    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignCsvSampleController.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using xbytechat.api;
using xbytechat.api.AuthModule.Models;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Shared;
using xbytechat_api.WhatsAppSettings.Services; // User.GetBusinessId()

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/csv-sample")]
    [Authorize]
    public sealed class CampaignCsvSampleController : ControllerBase
    {
        private readonly AppDbContext _db;
        private readonly ICampaignPreviewService _preview;
        private readonly IWhatsAppTemplateFetcherService _tpl;

        public CampaignCsvSampleController(AppDbContext db, ICampaignPreviewService preview, IWhatsAppTemplateFetcherService tpl)
        {
            _db = db;
            _preview = preview;
            _tpl = tpl;
        }

        private sealed class SchemaResult
        {
            public bool Found { get; set; }
            public List<string> Headers { get; set; } = new(); // dynamic per-row CSV columns (no phone, no media url)
            public int PlaceholderCount { get; set; }           // body placeholders count
            public string HeaderType { get; set; } = "none";     // "none" | "image" | "video" | "document" | "text"
            public bool HeaderNeedsUrl { get; set; }             // true for image/video/document
        }

        // GET /api/campaigns/{campaignId}/csv-sample/schema
        // GET /api/campaigns/{campaignId}/csv-sample/schema
        [HttpGet("schema")]
        public async Task<IActionResult> GetSchema([FromRoute] Guid campaignId, CancellationToken ct = default)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized();

            var schema = await BuildSchemaAsync(businessId, campaignId, ct);
            if (!schema.Found) return NotFound();

            // Flatten so FE can read sc.headers / sc.placeholderCount
            return Ok(new
            {
                headers = schema.Headers,                   // e.g. ["parameter1","headerpara1","buttonpara1"]
                placeholderCount = schema.PlaceholderCount, // body placeholders count
                header = new
                {
                    type = schema.HeaderType,               // "none" | "image" | "video" | "document" | "text"
                    needsUrl = schema.HeaderNeedsUrl        // true for image/video/document
                }
            });
        }

        // GET /api/campaigns/{campaignId}/csv-sample
        // -> returns ONLY the header row (no sample values)
        [HttpGet]
        public async Task<IActionResult> Download([FromRoute] Guid campaignId, CancellationToken ct = default)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized();

            var schema = await BuildSchemaAsync(businessId, campaignId, ct);
            if (!schema.Found) return NotFound();

            // phone is always first; then our dynamic columns (already lowercased)
            var headers = new List<string> { "phone" };
            headers.AddRange(schema.Headers);

            var line = string.Join(",", headers.Select(EscapeCsv));
            var bytes = Encoding.UTF8.GetBytes(line + "\n");
            var fileName = $"campaign-{campaignId:N}-sample.csv";
            return File(bytes, "text/csv; charset=utf-8", fileName);
        }

        // -------- schema builder (creates lowercase column names) --------
        private async Task<SchemaResult> BuildSchemaAsync(Guid businessId, Guid campaignId, CancellationToken ct)
        {
            var campaign = await _db.Campaigns
                .AsNoTracking()
                .Where(c => c.Id == campaignId && c.BusinessId == businessId && !c.IsDeleted)
                .Select(c => new { c.Id, c.BusinessId, c.TemplateId, c.MessageTemplate, c.Provider })
                .FirstOrDefaultAsync(ct);

            if (campaign == null)
                return new SchemaResult { Found = false };

            var templateName =
                !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :
                !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :
                string.Empty;

            if (string.IsNullOrWhiteSpace(templateName))
            {
                return new SchemaResult
                {
                    Found = true,
                    Headers = new List<string>(), // dynamic columns only; "phone" is added by the downloader
                    PlaceholderCount = 0,
                    HeaderType = "none",
                    HeaderNeedsUrl = false
                };
            }

            var provider = (campaign.Provider ?? "META_CLOUD").ToUpperInvariant();

            // 1) Normalized meta from service
            var meta = await _tpl.GetTemplateMetaAsync(
                campaign.BusinessId,
                templateName,
                language: null,
                provider: provider
            );

            // 2) DB row fallback ‚Äî NOTE: provider filter REMOVED to avoid mismatches
            var tplRow = await _db.WhatsAppTemplates
                .AsNoTracking()
                .Where(w => w.BusinessId == businessId
                            && w.IsActive
                            && w.Name == templateName)
                .OrderByDescending(w => w.UpdatedAt > w.CreatedAt ? w.UpdatedAt : w.CreatedAt)
                .FirstOrDefaultAsync(ct);

            var headers = new List<string>();

            // BODY placeholders -> parameter1..N
            int bodyCount = 0;
            if (meta?.BodyPlaceholders is { Count: > 0 })
            {
                bodyCount = meta.BodyPlaceholders.Count;
            }
            else if (tplRow?.PlaceholderCount is int pc && pc > 0)
            {
                bodyCount = pc;
            }
            else
            {
                var bodyText = meta?.GetType().GetProperty("Body")?.GetValue(meta) as string;
                if (!string.IsNullOrWhiteSpace(bodyText))
                {
                    var m = Regex.Matches(bodyText, @"\{\{\s*(\d+)\s*\}\}");
                    if (m.Count > 0)
                        bodyCount = m.Select(x => int.Parse(x.Groups[1].Value)).DefaultIfEmpty(0).Max();
                }
            }
            for (int i = 1; i <= bodyCount; i++) headers.Add($"parameter{i}");

            // HEADER detection (media is campaign-level; text header may have params)
            string headerTypeNorm = (meta?.HeaderType ?? "").Trim().ToUpperInvariant();
            if (string.IsNullOrEmpty(headerTypeNorm) && tplRow?.HasImageHeader == true)
                headerTypeNorm = "IMAGE";

            string respHeaderType = "none";
            bool needsUrl = false;
            switch (headerTypeNorm)
            {
                case "IMAGE": respHeaderType = "image"; needsUrl = true; break;
                case "VIDEO": respHeaderType = "video"; needsUrl = true; break;
                case "DOCUMENT":
                case "PDF": respHeaderType = "document"; needsUrl = true; break;
                case "TEXT": respHeaderType = "text"; needsUrl = false; break;
                default: respHeaderType = "none"; needsUrl = false; break;
            }

            // Text header placeholders -> headerpara1..M
            if (respHeaderType == "text")
            {
                int headerVarCount = 0;
                var hpProp = meta?.GetType().GetProperty("HeaderPlaceholders");
                if (hpProp?.GetValue(meta) is IEnumerable<object> hpEnum)
                {
                    headerVarCount = hpEnum.Cast<object>().Count();
                }
                else
                {
                    var headerText =
                        meta?.GetType().GetProperty("Header")?.GetValue(meta) as string ??
                        meta?.GetType().GetProperty("HeaderText")?.GetValue(meta) as string ?? "";
                    if (!string.IsNullOrWhiteSpace(headerText))
                    {
                        var m = Regex.Matches(headerText, @"\{\{\s*(\d+)\s*\}\}");
                        if (m.Count > 0)
                            headerVarCount = m.Select(x => int.Parse(x.Groups[1].Value)).DefaultIfEmpty(0).Max();
                    }
                }
                for (int i = 1; i <= headerVarCount; i++)
                    headers.Add($"headerpara{i}");
            }

            // Dynamic URL buttons -> buttonpara1..3
            bool LooksDynamic(string? val) => !string.IsNullOrEmpty(val) && val.Contains("{{");
            bool IsUrlish(string? type, string? subType)
            {
                type = (type ?? "").ToLowerInvariant();
                subType = (subType ?? "").ToLowerInvariant();
                return type == "url" || subType == "url";
            }
            int GetPos(object b, int fallbackOneBased)
            {
                var t = b.GetType();
                if (t.GetProperty("Index")?.GetValue(b) is int idx && idx > 0) return idx;
                if (t.GetProperty("Order")?.GetValue(b) is int ord && ord >= 0) return ord + 1;
                if (t.GetProperty("Position")?.GetValue(b) is int pos && pos > 0) return pos;
                return fallbackOneBased;
            }

            var positions = new SortedSet<int>();

            // A) normalized meta.Buttons
            if (meta?.Buttons is { Count: > 0 })
            {
                var urlBtns = meta.Buttons
                    .Where(b => IsUrlish(b.GetType().GetProperty("Type")?.GetValue(b) as string,
                                         b.GetType().GetProperty("SubType")?.GetValue(b) as string))
                    .ToList();

                for (int i = 0; i < urlBtns.Count && positions.Count < 3; i++)
                {
                    var b = urlBtns[i];
                    var val = b.GetType().GetProperty("Value")?.GetValue(b) as string;
                    var subType = b.GetType().GetProperty("SubType")?.GetValue(b) as string;
                    var urlType = b.GetType().GetProperty("UrlType")?.GetValue(b) as string;
                    var hasPh = b.GetType().GetProperty("HasPlaceholder")?.GetValue(b) as bool?;

                    var dynamicByProps =
                        LooksDynamic(val) ||
                        string.Equals(subType, "DYNAMIC", StringComparison.OrdinalIgnoreCase) ||
                        string.Equals(urlType, "DYNAMIC", StringComparison.OrdinalIgnoreCase) ||
                        hasPh == true;

                    if (dynamicByProps)
                    {
                        var pos = GetPos(b, i + 1);
                        if (pos >= 1 && pos <= 3) positions.Add(pos);
                    }
                }
            }

            // B) ButtonsJson fallback
            if (positions.Count < 3 && !string.IsNullOrWhiteSpace(tplRow?.ButtonsJson))
            {
                try
                {
                    var root = JsonDocument.Parse(tplRow.ButtonsJson).RootElement;
                    if (root.ValueKind == JsonValueKind.Array)
                    {
                        foreach (var el in root.EnumerateArray())
                        {
                            if (positions.Count >= 3) break;

                            var type = el.TryGetProperty("type", out var tkn) ? tkn.GetString() : null;
                            if (!IsUrlish(type, null)) continue;

                            int pos = 0;
                            if (el.TryGetProperty("index", out var iTok) && iTok.TryGetInt32(out var idx) && idx > 0) pos = idx;
                            else if (el.TryGetProperty("order", out var oTok) && oTok.TryGetInt32(out var ord) && ord >= 0) pos = ord + 1;

                            string? value = null;
                            if (el.TryGetProperty("value", out var vTok) && vTok.ValueKind == JsonValueKind.String)
                                value = vTok.GetString();

                            bool hasParam = false;
                            if (el.TryGetProperty("parameters", out var pTok) && pTok.ValueKind == JsonValueKind.Array)
                            {
                                foreach (var p in pTok.EnumerateArray())
                                {
                                    if (p.TryGetProperty("text", out var txt) && txt.ValueKind == JsonValueKind.String)
                                    {
                                        var s = txt.GetString();
                                        if (!string.IsNullOrEmpty(s) && s.Contains("{{")) { hasParam = true; break; }
                                    }
                                }
                            }

                            if (LooksDynamic(value) || hasParam)
                            {
                                if (pos <= 0) pos = positions.Count + 1;
                                if (pos >= 1 && pos <= 3) positions.Add(pos);
                            }
                        }
                    }
                }
                catch { /* ignore bad JSON */ }
            }

            foreach (var pos in positions)
            {
                var key = $"buttonpara{pos}";
                if (!headers.Contains(key, StringComparer.OrdinalIgnoreCase))
                    headers.Add(key);
            }

            // ensure lowercase
            headers = headers.Select(h => h.ToLowerInvariant()).ToList();

            return new SchemaResult
            {
                Found = true,
                Headers = headers,
                PlaceholderCount = bodyCount,
                HeaderType = respHeaderType,
                HeaderNeedsUrl = needsUrl
            };
        }

        private static string EscapeCsv(string input)
        {
            if (input == null) return "";
            var needsQuotes = input.Contains(',') || input.Contains('"') || input.Contains('\n') || input.Contains('\r');
            var s = input.Replace("\"", "\"\"");
            return needsQuotes ? $"\"{s}\"" : s;
        }
    }
}

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Text.Json;
//using System.Text.RegularExpressions;
//using System.Threading;
//using System.Threading.Tasks;
//using Microsoft.AspNetCore.Authorization;
//using Microsoft.AspNetCore.Mvc;
//using Microsoft.EntityFrameworkCore;
//using xbytechat.api;
//using xbytechat.api.AuthModule.Models;
//using xbytechat.api.Features.CampaignModule.Services;
//using xbytechat.api.Shared;
//using xbytechat_api.WhatsAppSettings.Services; // User.GetBusinessId()

//namespace xbytechat.api.Features.CampaignModule.Controllers
//{
//    [ApiController]
//    [Route("api/campaigns/{campaignId:guid}/csv-sample")]
//    [Authorize]
//    public sealed class CampaignCsvSampleController : ControllerBase
//    {
//        private readonly AppDbContext _db;
//        private readonly ICampaignPreviewService _preview;
//        private readonly IWhatsAppTemplateFetcherService _tpl;
//        public CampaignCsvSampleController(AppDbContext db, ICampaignPreviewService preview, IWhatsAppTemplateFetcherService tpl)
//        {
//            _db = db;
//            _preview = preview;
//            _tpl = tpl;
//        }

//        // Add at top of file if missing:


//        // -----------------------------------------------
//        // DTO used internally for building the schema
//        // -----------------------------------------------
//        private sealed class SchemaResult
//        {
//            public bool Found { get; set; }
//            public List<string> Headers { get; set; } = new();
//            public int PlaceholderCount { get; set; } // body placeholders count
//            public string HeaderType { get; set; } = "none"; // "none" | "image" | "video" | "document" | "text"
//            public bool HeaderNeedsUrl { get; set; } // true for image/video/document header
//        }

//        // -----------------------------------------------
//        // GET /campaigns/{campaignId}/csv-sample/schema
//        // -----------------------------------------------
//        [HttpGet("schema")]
//        public async Task<IActionResult> GetSchema([FromRoute] Guid campaignId, CancellationToken ct = default)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized();

//            var schema = await BuildSchemaAsync(businessId, campaignId, ct);
//            if (!schema.Found) return NotFound();

//            return Ok(new
//            {
//                success = true,
//                data = new
//                {
//                    headers = schema.Headers,                     // ONLY per-row CSV fields (no phone, no media URL)
//                    placeholderCount = schema.PlaceholderCount,   // body placeholders count
//                    header = new
//                    {
//                        type = schema.HeaderType,                 // "none" | "image" | "video" | "document" | "text"
//                        needsUrl = schema.HeaderNeedsUrl          // true iff header is image/video/document
//                    }
//                }
//            });
//        }

//        // -----------------------------------------------
//        // Builder
//        // -----------------------------------------------
//        private async Task<SchemaResult> BuildSchemaAsync(Guid businessId, Guid campaignId, CancellationToken ct)
//        {
//            var campaign = await _db.Campaigns
//                .AsNoTracking()
//                .Where(c => c.Id == campaignId && c.BusinessId == businessId && !c.IsDeleted)
//                .Select(c => new { c.Id, c.BusinessId, c.TemplateId, c.MessageTemplate, c.Provider })
//                .FirstOrDefaultAsync(ct);

//            if (campaign == null)
//                return new SchemaResult { Found = false };

//            var templateName =
//                !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :
//                !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :
//                string.Empty;

//            // If no template selected, we still return a valid, empty schema (FE will just ask for phone).
//            if (string.IsNullOrWhiteSpace(templateName))
//            {
//                return new SchemaResult
//                {
//                    Found = true,
//                    Headers = new List<string>(),     // do NOT inject "phone" here
//                    PlaceholderCount = 0,
//                    HeaderType = "none",
//                    HeaderNeedsUrl = false
//                };
//            }

//            var provider = (campaign.Provider ?? "META_CLOUD").ToUpperInvariant();

//            // 1) Normalized meta from your template service
//            var meta = await _tpl.GetTemplateMetaAsync(
//                campaign.BusinessId,
//                templateName,
//                language: null,
//                provider: provider
//            );

//            // 2) Fallback to raw WhatsAppTemplates row
//            var tplRow = await _db.WhatsAppTemplates
//                .AsNoTracking()
//                .Where(w => w.BusinessId == businessId
//                         && w.IsActive
//                         && w.Name == templateName
//                         && w.Provider == provider)
//                .OrderByDescending(w => w.UpdatedAt > w.CreatedAt ? w.UpdatedAt : w.CreatedAt)
//                .FirstOrDefaultAsync(ct);

//            var headers = new List<string>(); // <- per-row CSV columns only (NO "phone", NO media URL constant)

//            // ---------------- BODY placeholders ----------------
//            int bodyCount = 0;

//            if (meta?.BodyPlaceholders is { Count: > 0 })
//            {
//                bodyCount = meta.BodyPlaceholders.Count;
//            }
//            else if (tplRow?.PlaceholderCount is int pc && pc > 0)
//            {
//                bodyCount = pc;
//            }
//            else
//            {
//                // Last resort: parse {{n}} from a 'Body' text if present
//                var bodyText = meta?.GetType().GetProperty("Body")?.GetValue(meta) as string;
//                if (!string.IsNullOrWhiteSpace(bodyText))
//                {
//                    var m = Regex.Matches(bodyText, @"\{\{\s*(\d+)\s*\}\}");
//                    if (m.Count > 0)
//                        bodyCount = m.Select(x => int.Parse(x.Groups[1].Value)).DefaultIfEmpty(0).Max();
//                }
//            }
//            for (int i = 1; i <= bodyCount; i++) headers.Add($"body.{i}");

//            // ---------------- HEADER type + header text placeholders ----------------
//            // Normalize header type
//            string headerTypeNorm = (meta?.HeaderType ?? "").Trim().ToUpperInvariant();
//            if (string.IsNullOrEmpty(headerTypeNorm) && tplRow?.HasImageHeader == true)
//                headerTypeNorm = "IMAGE"; // legacy fallback

//            // Map to response type + needsUrl
//            string respHeaderType = "none";
//            bool needsUrl = false;

//            switch (headerTypeNorm)
//            {
//                case "IMAGE":
//                    respHeaderType = "image";
//                    needsUrl = true;
//                    break;
//                case "VIDEO":
//                    respHeaderType = "video";
//                    needsUrl = true;
//                    break;
//                case "DOCUMENT":
//                case "PDF":
//                    respHeaderType = "document";
//                    needsUrl = true;
//                    break;
//                case "TEXT":
//                    respHeaderType = "text";
//                    needsUrl = false;
//                    break;
//                default:
//                    respHeaderType = "none";
//                    needsUrl = false;
//                    break;
//            }

//            // If header is TEXT, include its own placeholders as header.1, header.2, ...
//            if (respHeaderType == "text")
//            {
//                int headerVarCount = 0;

//                // Prefer an explicit placeholder list if your meta has it
//                var headerPlaceholdersProp = meta?.GetType().GetProperty("HeaderPlaceholders");
//                if (headerPlaceholdersProp?.GetValue(meta) is IEnumerable<object> hpEnum)
//                {
//                    headerVarCount = hpEnum.Cast<object>().Count();
//                }
//                else
//                {
//                    // Fallback: parse {{n}} from header text
//                    var headerText =
//                        meta?.GetType().GetProperty("Header")?.GetValue(meta) as string ??
//                        meta?.GetType().GetProperty("HeaderText")?.GetValue(meta) as string ??
//                        string.Empty;

//                    if (!string.IsNullOrWhiteSpace(headerText))
//                    {
//                        var m = Regex.Matches(headerText, @"\{\{\s*(\d+)\s*\}\}");
//                        if (m.Count > 0)
//                            headerVarCount = m.Select(x => int.Parse(x.Groups[1].Value)).DefaultIfEmpty(0).Max();
//                    }
//                }

//                for (int i = 1; i <= headerVarCount; i++)
//                    headers.Add($"header.{i}");
//            }

//            // ---------------- DYNAMIC URL BUTTONS -> button{i}.url_param ----------------
//            bool LooksDynamic(string? val) => !string.IsNullOrEmpty(val) && val.Contains("{{");

//            bool IsUrlish(string? type, string? subType)
//            {
//                type = (type ?? "").ToLowerInvariant();
//                subType = (subType ?? "").ToLowerInvariant();
//                return type == "url" || subType == "url";
//            }

//            int GetPos(object b, int fallbackOneBased)
//            {
//                var t = b.GetType();
//                if (t.GetProperty("Index")?.GetValue(b) is int idx && idx > 0) return idx;
//                if (t.GetProperty("Order")?.GetValue(b) is int ord && ord >= 0) return ord + 1;
//                if (t.GetProperty("Position")?.GetValue(b) is int pos && pos > 0) return pos;
//                return fallbackOneBased;
//            }

//            var positions = new SortedSet<int>();

//            // A) meta.Buttons (normalized)
//            if (meta?.Buttons is { Count: > 0 })
//            {
//                var urlBtns = meta.Buttons
//                    .Where(b => IsUrlish(b.GetType().GetProperty("Type")?.GetValue(b) as string,
//                                         b.GetType().GetProperty("SubType")?.GetValue(b) as string))
//                    .ToList();

//                for (int i = 0; i < urlBtns.Count && positions.Count < 3; i++)
//                {
//                    var b = urlBtns[i];
//                    var val = b.GetType().GetProperty("Value")?.GetValue(b) as string;
//                    var subType = b.GetType().GetProperty("SubType")?.GetValue(b) as string;
//                    var urlType = b.GetType().GetProperty("UrlType")?.GetValue(b) as string;
//                    var hasPh = b.GetType().GetProperty("HasPlaceholder")?.GetValue(b) as bool?;

//                    var dynamicByProps =
//                        LooksDynamic(val) ||
//                        string.Equals(subType, "DYNAMIC", StringComparison.OrdinalIgnoreCase) ||
//                        string.Equals(urlType, "DYNAMIC", StringComparison.OrdinalIgnoreCase) ||
//                        hasPh == true;

//                    if (dynamicByProps)
//                    {
//                        var pos = GetPos(b, i + 1);
//                        if (pos >= 1 && pos <= 3) positions.Add(pos);
//                    }
//                }
//            }

//            // B) raw ButtonsJson fallback (from DB row)
//            if (positions.Count < 3 && !string.IsNullOrWhiteSpace(tplRow?.ButtonsJson))
//            {
//                try
//                {
//                    var root = System.Text.Json.JsonDocument.Parse(tplRow.ButtonsJson).RootElement;
//                    if (root.ValueKind == System.Text.Json.JsonValueKind.Array)
//                    {
//                        foreach (var el in root.EnumerateArray())
//                        {
//                            if (positions.Count >= 3) break;

//                            var type = el.TryGetProperty("type", out var tkn) ? tkn.GetString() : null;
//                            if (!IsUrlish(type, null)) continue;

//                            int pos = 0;
//                            if (el.TryGetProperty("index", out var iTok) && iTok.TryGetInt32(out var idx) && idx > 0) pos = idx;
//                            else if (el.TryGetProperty("order", out var oTok) && oTok.TryGetInt32(out var ord) && ord >= 0) pos = ord + 1;

//                            string? value = null;
//                            if (el.TryGetProperty("value", out var vTok) && vTok.ValueKind == System.Text.Json.JsonValueKind.String)
//                                value = vTok.GetString();

//                            bool hasParam = false;
//                            if (el.TryGetProperty("parameters", out var pTok) && pTok.ValueKind == System.Text.Json.JsonValueKind.Array)
//                            {
//                                foreach (var p in pTok.EnumerateArray())
//                                {
//                                    if (p.TryGetProperty("text", out var txt) && txt.ValueKind == System.Text.Json.JsonValueKind.String)
//                                    {
//                                        var s = txt.GetString();
//                                        if (!string.IsNullOrEmpty(s) && s.Contains("{{")) { hasParam = true; break; }
//                                    }
//                                }
//                            }

//                            if (LooksDynamic(value) || hasParam)
//                            {
//                                if (pos <= 0) pos = positions.Count + 1;
//                                if (pos >= 1 && pos <= 3) positions.Add(pos);
//                            }
//                        }
//                    }
//                }
//                catch { /* ignore bad JSON */ }
//            }

//            foreach (var pos in positions)
//            {
//                var key = $"button{pos}.url_param";
//                if (!headers.Contains(key, StringComparer.OrdinalIgnoreCase))
//                    headers.Add(key);
//            }

//            // DONE
//            return new SchemaResult
//            {
//                Found = true,
//                Headers = headers,
//                PlaceholderCount = bodyCount,
//                HeaderType = respHeaderType,
//                HeaderNeedsUrl = needsUrl
//            };
//        }





//        [HttpGet]
//        // [HttpGet("download-sample/{campaignId:guid}")]
//        public async Task<IActionResult> Download(Guid campaignId, CancellationToken ct = default)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized();

//            var schema = await BuildSchemaAsync(businessId, campaignId, ct);
//            if (!schema.Found) return NotFound();

//            // First row only: the header names the FE expects to see
//            var sb = new StringBuilder();
//            sb.AppendLine(string.Join(",", schema.Headers.Select(h =>
//                h.Contains(',') ? $"\"{h.Replace("\"", "\"\"")}\"" : h)));

//            var bytes = Encoding.UTF8.GetBytes(sb.ToString());
//            var fileName = $"sample_{campaignId:N}.csv";
//            return File(bytes, "text/csv; charset=utf-8", fileName);
//        }

//        // -----------------------
//        // Helpers
//        // -----------------------



//        //private async Task<SchemaResult> BuildSchemaAsync(Guid businessId, Guid campaignId, CancellationToken ct)
//        //{
//        //    var campaign = await _db.Campaigns
//        //        .AsNoTracking()
//        //        .Where(c => c.Id == campaignId && c.BusinessId == businessId && !c.IsDeleted)
//        //        .Select(c => new
//        //        {
//        //            c.Id,
//        //            c.BusinessId,
//        //            c.TemplateId,
//        //            c.MessageTemplate,
//        //            c.Provider
//        //        })
//        //        .FirstOrDefaultAsync(ct);

//        //    if (campaign == null)
//        //        return new SchemaResult { Found = false };

//        //    var templateName =
//        //        !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :
//        //        !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :
//        //        string.Empty;

//        //    if (string.IsNullOrWhiteSpace(templateName))
//        //        return new SchemaResult { Found = true, Headers = new List<string> { "phone" }, PlaceholderCount = 0 };

//        //    var provider = (campaign.Provider ?? "META").ToUpperInvariant();

//        //    // 1) Normalized meta (may be sparse on some branches)
//        //    var meta = await _tpl.GetTemplateMetaAsync(
//        //        campaign.BusinessId,
//        //        templateName,
//        //        language: null,
//        //        provider: provider
//        //    );

//        //    // 2) Raw DB row fallback (has ButtonsJson / HasImageHeader / PlaceholderCount)
//        //    var tplRow = await _db.WhatsAppTemplates
//        //        .AsNoTracking()
//        //        .Where(w => w.BusinessId == businessId
//        //                    && w.IsActive
//        //                    && w.Name == templateName
//        //                    && w.Provider == provider)
//        //        .OrderByDescending(w => (w.UpdatedAt > w.CreatedAt ? w.UpdatedAt : w.CreatedAt))
//        //        .FirstOrDefaultAsync(ct);

//        //    var headers = new List<string> { "phone" };
//        //    int bodyCount = 0;

//        //    // ---------- BODY PLACEHOLDERS ----------
//        //    if (meta?.BodyPlaceholders != null && meta.BodyPlaceholders.Count > 0)
//        //    {
//        //        bodyCount = meta.BodyPlaceholders.Count;
//        //    }
//        //    else if (tplRow?.PlaceholderCount is int pc && pc > 0)
//        //    {
//        //        bodyCount = pc;
//        //    }
//        //    else
//        //    {
//        //        // try to infer from body text if available in meta
//        //        var bodyText = meta?.GetType()?.GetProperty("Body")?.GetValue(meta) as string;
//        //        if (!string.IsNullOrWhiteSpace(bodyText))
//        //        {
//        //            var m = System.Text.RegularExpressions.Regex.Matches(bodyText, @"\{\{\s*(\d+)\s*\}\}");
//        //            if (m.Count > 0)
//        //                bodyCount = m.Select(x => int.Parse(x.Groups[1].Value)).DefaultIfEmpty(0).Max();
//        //        }
//        //    }
//        //    for (int i = 1; i <= bodyCount; i++)
//        //        headers.Add($"body.{i}");

//        //    // ---------- HEADER MEDIA ----------
//        //    string headerType = (meta?.HeaderType ?? string.Empty).ToUpperInvariant();
//        //    if (string.IsNullOrEmpty(headerType))
//        //    {
//        //        // legacy bool
//        //        var hasImg = meta?.GetType()?.GetProperty("HasHeaderMedia")?.GetValue(meta) as bool?
//        //                     ?? meta?.GetType()?.GetProperty("HasImageHeader")?.GetValue(meta) as bool?;
//        //        if (hasImg == true) headerType = "IMAGE";
//        //        // row fallback?
//        //        if (string.IsNullOrEmpty(headerType) && tplRow?.HasImageHeader == true) headerType = "IMAGE";
//        //    }

//        //    if (headerType == "IMAGE") headers.Add("header.image_url");
//        //    if (headerType == "VIDEO") headers.Add("header.video_url");
//        //    if (headerType == "DOCUMENT" || headerType == "PDF") headers.Add("header.document_url");

//        //    // ---------- DYNAMIC URL BUTTONS ----------
//        //    // Match FE logic: a button needs a CSV value if:
//        //    //  - it's a URL-like button (type/subType says url) AND
//        //    //  - the URL contains a {{‚Ä¶}} placeholder OR parameters array contains a {{‚Ä¶}} text
//        //    var dynamicPositions = new SortedSet<int>();

//        //    bool LooksDynamic(string? val) =>
//        //    !string.IsNullOrEmpty(val) && val.Contains("{{", StringComparison.Ordinal);

//        //    bool IsUrlish(string? type, string? subType)
//        //    {
//        //        type = (type ?? string.Empty).ToLowerInvariant();
//        //        subType = (subType ?? string.Empty).ToLowerInvariant();
//        //        return type == "url" || subType == "url";
//        //    }


//        //    int GetPos(object b, int fallbackOneBased)
//        //    {
//        //        var t = b.GetType();
//        //        if (t.GetProperty("Index")?.GetValue(b) is int idx && idx > 0) return idx;
//        //        if (t.GetProperty("Order")?.GetValue(b) is int ord && ord >= 0) return ord + 1;
//        //        if (t.GetProperty("Position")?.GetValue(b) is int pos && pos > 0) return pos;
//        //        return fallbackOneBased;
//        //    }

//        //    // A) meta.Buttons
//        //    if (meta?.Buttons != null && meta.Buttons.Count > 0)
//        //    {
//        //        for (int i = 0; i < meta.Buttons.Count && dynamicPositions.Count < 3; i++)
//        //        {
//        //            var b = meta.Buttons[i];
//        //            var type = b.Type;
//        //            var subType = b.GetType().GetProperty("SubType")?.GetValue(b) as string; // if present
//        //            var value = b.Value;

//        //            if (IsUrlish(type, subType) && LooksDynamic(value))
//        //            {
//        //                var pos = GetPos(b, i + 1);
//        //                if (pos >= 1 && pos <= 3) dynamicPositions.Add(pos);
//        //            }
//        //        }
//        //    }

 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignDispatchController.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Services;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/dispatch")]
    [Authorize]
    public class CampaignDispatchController : ControllerBase
    {
        private readonly ICampaignDispatcher _dispatcher;

        public CampaignDispatchController(ICampaignDispatcher dispatcher)
        {
            _dispatcher = dispatcher;
        }

        /// <summary>
        /// Dispatch materialized recipients to the outbound queue.
        /// Query: mode=canary|full, count=25 (used when mode=canary).
        /// </summary>
        [HttpPost]
        public async Task<ActionResult<CampaignDispatchResponseDto>> Dispatch(
            [FromRoute] Guid campaignId,
            [FromQuery] string mode = "canary",
            [FromQuery] int count = 25,
            CancellationToken ct = default)
        {
            try
            {
                var businessId = ResolveBusinessId();
                var resp = await _dispatcher.DispatchAsync(businessId, campaignId, mode, count, ct);
                return Ok(resp);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Dispatch failed for Campaign {CampaignId}", campaignId);
                return Problem(title: "Dispatch failed", detail: ex.Message, statusCode: 400);
            }
        }

        private Guid ResolveBusinessId()
        {
            var bidStr = User.FindFirst("BusinessId")?.Value
                         ?? Request.Headers["X-Business-Id"].ToString();
            return Guid.TryParse(bidStr, out var bid) ? bid : Guid.Empty;
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignDispatchPlanController.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Shared;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/dispatch-plan")]
    [Authorize]
    public class CampaignDispatchPlanController : ControllerBase
    {
        private readonly ICampaignDispatchPlannerService _planner;

        public CampaignDispatchPlanController(ICampaignDispatchPlannerService planner)
        {
            _planner = planner;
        }

        /// <summary>
        /// Returns a read-only dispatch plan: batches, offsets, and throttle summary.
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> Get(Guid campaignId, [FromQuery] int limit = 2000, CancellationToken ct = default)
        {
            var businessId = User.GetBusinessId();
            Log.Information("Dispatch plan requested {@Ctx}", new { businessId, campaignId, limit });

            var data = await _planner.PlanAsync(businessId, campaignId, limit, ct);
            return Ok(new { success = true, data });
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignDispatchPlanExportController.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Shared;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/dispatch-plan.csv")]
    [Authorize]
    public class CampaignDispatchPlanExportController : ControllerBase
    {
        private readonly ICsvExportService _csv;

        public CampaignDispatchPlanExportController(ICsvExportService csv)
        {
            _csv = csv;
        }

        /// <summary>
        /// Streams a CSV of the dispatch plan (batches, offsets, recipients).
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> Get(Guid campaignId, [FromQuery] int limit = 2000, CancellationToken ct = default)
        {
            var businessId = User.GetBusinessId();
            Log.Information("Dispatch Plan CSV requested {@Ctx}", new { businessId, campaignId, limit });

            var bytes = await _csv.BuildDispatchPlanCsvAsync(businessId, campaignId, limit, ct);
            var fileName = $"dispatch_plan_{campaignId:N}.csv";
            return File(bytes, "text/csv; charset=utf-8", fileName);
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignDryRunController.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Services;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns")]
    [Authorize]
    public sealed class CampaignDryRunController : ControllerBase
    {
        private readonly ICampaignService _campaigns;
        public CampaignDryRunController(ICampaignService campaigns) => _campaigns = campaigns;

        // GET /api/campaigns/{campaignId}/dry-run?limit=20
        [HttpGet("{campaignId:guid}/dry-run")]
        public async Task<IActionResult> DryRun([FromRoute] Guid campaignId, [FromQuery] int limit = 20)
        {
            if (campaignId == Guid.Empty) return BadRequest(new { message = "Invalid campaignId" });
            if (limit <= 0) limit = 20;
            if (limit > 200) limit = 200; // guardrails

            var resp = await _campaigns.DryRunTemplateCampaignAsync(campaignId, limit);
            return Ok(resp);
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignMappingsController.cs 
====================================================== 
 
Ôªøusing System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using xbytechat.api.Features.CampaignModule.Services;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/mappings")]
    [Authorize] // adjust to your auth
    public sealed class CampaignMappingsController : ControllerBase
    {
        private readonly IVariableMappingService _svc;
        private readonly IMappingSuggestionService _suggest;

        public CampaignMappingsController(IVariableMappingService svc, IMappingSuggestionService suggest)
        {
            _svc = svc;
            _suggest = suggest;
        }

        /// <summary>
        /// Returns saved variable mappings for a campaign.
        /// Shape: dictionary of token -> source (e.g., "first_name" -> "csv:First Name")
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> GetAsync(
            [FromRoute] Guid campaignId,
            CancellationToken ct = default)
        {
            var businessId = GetBusinessIdOrThrow();
            var map = await _svc.GetForCampaignAsync(businessId, campaignId, ct);
            return Ok(map ?? new System.Collections.Generic.Dictionary<string, string>());
        }

        /// <summary>
        /// Saves variable mappings for a campaign.
        /// Body: { "tokenA": "csv:HeaderA", "tokenB": "static:Hello", ... }
        /// </summary>
        [HttpPost]
        public async Task<IActionResult> SaveAsync(
            [FromRoute] Guid campaignId,
            [FromBody] System.Collections.Generic.Dictionary<string, string> mappings,
            CancellationToken ct = default)
        {
            if (mappings is null)
                return BadRequest("Body cannot be null; send a mapping dictionary.");

            var businessId = GetBusinessIdOrThrow();
            await _svc.SaveAsync(businessId, campaignId, mappings, ct);
            return NoContent();
        }

        /// <summary>
        /// Suggest default mappings from CSV headers and campaign tokens.
        /// GET /api/campaigns/{campaignId}/mappings/suggest?batchId=...
        /// </summary>
        [HttpGet("suggest")]
        public async Task<IActionResult> SuggestAsync(
            [FromRoute] Guid campaignId,
            [FromQuery] Guid batchId,
            CancellationToken ct = default)
        {
            if (batchId == Guid.Empty)
                return BadRequest("batchId is required.");

            var businessId = GetBusinessIdOrThrow();
            var map = await _suggest.SuggestAsync(businessId, campaignId, batchId, ct);
            return Ok(map);
        }

        // -- helpers --

        private Guid GetBusinessIdOrThrow()
        {
            string? raw =
                User?.FindFirst("business_id")?.Value ??
                User?.FindFirst("BusinessId")?.Value ??
                Request.Headers["X-Business-Id"].FirstOrDefault();

            if (!Guid.TryParse(raw, out var id))
                throw new UnauthorizedAccessException(
                    "Business context missing. Pass X-Business-Id header or ensure the business_id claim is present.");

            return id;
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignMaterializationController.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Shared;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/materialize")]
    [Authorize]
    public class CampaignMaterializationController : ControllerBase
    {
        private readonly ICampaignMaterializationService _materializer;

        public CampaignMaterializationController(ICampaignMaterializationService materializer)
        {
            _materializer = materializer;
        }

        /// <summary>
        /// Returns a page (limit) of fully materialized recipients: placeholder values and resolved button URLs.
        /// No send, read-only.
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> Get(Guid campaignId, [FromQuery] int limit = 200, CancellationToken ct = default)
        {
            var businessId = User.GetBusinessId();
            Log.Information("Materialize GET requested {@Ctx}", new { businessId, campaignId, limit });

            var data = await _materializer.MaterializeAsync(businessId, campaignId, limit, ct);
            return Ok(new { success = true, data });
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignMaterializationExportController.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Shared;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/materialize.csv")]
    [Authorize]
    public class CampaignMaterializationExportController : ControllerBase
    {
        private readonly ICsvExportService _csv;

        public CampaignMaterializationExportController(ICsvExportService csv)
        {
            _csv = csv;
        }

        /// <summary>
        /// Streams a CSV of materialized recipients (params + button URLs).
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> Get(Guid campaignId, [FromQuery] int limit = 200, CancellationToken ct = default)
        {
            var businessId = User.GetBusinessId();
            Log.Information("Materialize CSV requested {@Ctx}", new { businessId, campaignId, limit });

            var bytes = await _csv.BuildMaterializedCsvAsync(businessId, campaignId, limit, ct);
            var fileName = $"materialized_{campaignId:N}.csv";
            return File(bytes, "text/csv; charset=utf-8", fileName);
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignMaterializeController.cs 
====================================================== 
 
Ôªø// File: Features/CampaignModule/Controllers/CampaignMaterializeController.cs
using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Services;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/materialize")]
    [Authorize]
    public class CampaignMaterializeController : ControllerBase
    {
        private readonly ICampaignMaterializer _csvMaterializer;
        private readonly ICampaignMaterializationService _recipientPreview;

        public CampaignMaterializeController(
            ICampaignMaterializer csvMaterializer,
            ICampaignMaterializationService recipientPreview)
        {
            _csvMaterializer = csvMaterializer;
            _recipientPreview = recipientPreview;
        }

        /// <summary>
        /// CSV-based materialization. Use Persist=false for dry-run preview; Persist=true to commit Audience + Recipients.
        /// </summary>
        [HttpPost]
        public async Task<ActionResult<CampaignCsvMaterializeResponseDto>> CsvCreate(
            [FromRoute] Guid campaignId,
            [FromBody] CampaignCsvMaterializeRequestDto dto,
            CancellationToken ct)
        {
            try
            {
                if (dto is null) return BadRequest("Body required.");

                var businessId = ResolveBusinessId();
                Log.Information("üì¶ Materialize request: campaign={CampaignId} persist={Persist} batch={BatchId} audience='{Audience}'",
                    campaignId, dto.Persist, dto.CsvBatchId, dto.AudienceName);

                var result = await _csvMaterializer.CreateAsync(businessId, campaignId, dto, ct);

                Log.Information("üì¶ Materialize result: campaign={CampaignId} materialized={Count} skipped={Skipped} audienceId={AudienceId}",
                    campaignId, result.MaterializedCount, result.SkippedCount, result.AudienceId);

                return Ok(result);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "CSV materialize failed for Campaign {CampaignId}", campaignId);
                return Problem(title: "CSV materialize failed", detail: ex.Message, statusCode: 400);
            }
        }

        /// <summary>
        /// Recipient-based preview (read-only), using existing recipients + contacts.
        /// </summary>
        [HttpGet("recipients")]
        public async Task<ActionResult<CampaignMaterializeResultDto>> RecipientPreview(
            [FromRoute] Guid campaignId,
            [FromQuery] int limit = 200,
            CancellationToken ct = default)
        {
            try
            {
                var businessId = ResolveBusinessId();
                var result = await _recipientPreview.MaterializeAsync(businessId, campaignId, limit, ct);
                return Ok(result);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Recipient preview failed for Campaign {CampaignId}", campaignId);
                return Problem(title: "Recipient preview failed", detail: ex.Message, statusCode: 400);
            }
        }

        private Guid ResolveBusinessId()
        {
            var bidStr = User.FindFirst("BusinessId")?.Value
                         ?? Request.Headers["X-Business-Id"].ToString();
            return Guid.TryParse(bidStr, out var bid) ? bid : Guid.Empty;
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignPreviewController.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Shared; // User.GetBusinessId()

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/preview")]
    [Authorize]
    public class CampaignPreviewController : ControllerBase
    {
        private readonly AppDbContext _db;
        private readonly ICampaignPreviewService _preview;

        public CampaignPreviewController(AppDbContext db, ICampaignPreviewService preview)
        {
            _db = db; _preview = preview;
        }

        [HttpPost]
        public async Task<ActionResult<CampaignPreviewResponseDto>> Preview(Guid campaignId, [FromBody] CampaignPreviewRequestDto req)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized();

            var exists = await _db.Campaigns.AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId);
            if (!exists) return NotFound();

            var data = await _preview.PreviewAsync(businessId, campaignId, req?.ContactId);
            return Ok(data);
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignRecipientController.cs 
====================================================== 
 
Ôªøusing Microsoft.AspNetCore.Mvc;
using Serilog;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Services;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CampaignRecipientController : ControllerBase
    {
        private readonly ICampaignRecipientService _recipientService;

        public CampaignRecipientController(ICampaignRecipientService recipientService)
        {
            _recipientService = recipientService;
        }

        // ‚úÖ Get a single recipient by ID
        [HttpGet("{id}")]
        public async Task<ActionResult<CampaignRecipientDto>> GetRecipientById(Guid id)
        {
            var recipient = await _recipientService.GetByIdAsync(id);
            if (recipient == null)
                return NotFound(new { message = "Recipient not found" });

            return Ok(recipient);
        }

        // ‚úÖ Get all recipients for a specific campaign
        [HttpGet("/api/campaigns/{campaignId}/recipients")]
        public async Task<ActionResult> GetRecipientsForCampaign(Guid campaignId)
        {
            var recipients = await _recipientService.GetByCampaignIdAsync(campaignId);
            return Ok(recipients);
        }

        // ‚úÖ Update recipient status (e.g., from Pending ‚Üí Sent)
        [HttpPut("{recipientId}/status")]
        public async Task<ActionResult> UpdateStatus(Guid recipientId, [FromQuery] string newStatus)
        {
            var success = await _recipientService.UpdateStatusAsync(recipientId, newStatus);
            if (!success)
                return NotFound(new { message = "Recipient not found or update failed" });

            return Ok(new { message = "Status updated" });
        }

        // ‚úÖ Track a reply from customer
        [HttpPut("{recipientId}/reply")]
        public async Task<ActionResult> TrackReply(Guid recipientId, [FromQuery] string replyText)
        {
            var success = await _recipientService.TrackReplyAsync(recipientId, replyText);
            if (!success)
                return NotFound(new { message = "Recipient not found or tracking failed" });

            return Ok(new { message = "Reply tracked" });
        }

        // üîç Search recipients by optional filters (status, keyword)
        [HttpGet("search")]
        public async Task<ActionResult<List<CampaignRecipientDto>>> SearchRecipients([FromQuery] string? status, [FromQuery] string? keyword)
        {
            var results = await _recipientService.SearchRecipientsAsync(status, keyword);
            return Ok(results);
        }

        [HttpPost("{id}/assign-contacts")]
        public async Task<IActionResult> AssignContacts(Guid id, [FromBody] AssignContactsDto dto)
        {
            try
            {
                await _recipientService.AssignContactsToCampaignAsync(id, dto.ContactIds);
                return Ok(new { message = "Contacts assigned successfully" });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error assigning contacts to campaign");
                return StatusCode(500, new { message = "Failed to assign contacts" });
            }
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignRetryController.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using xbytechat.api.Shared;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns")]
    [Authorize]
    public sealed class CampaignRetryController : ControllerBase
    {
        private readonly Services.ICampaignRetryService _retry;

        public CampaignRetryController(Services.ICampaignRetryService retry)
        {
            _retry = retry;
        }

        // POST /api/campaigns/{campaignId}/retry-failed?limit=200
        [HttpPost("{campaignId:guid}/retry-failed")]
        public async Task<IActionResult> RetryFailed([FromRoute] Guid campaignId, [FromQuery] int limit = 200)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty)
                return Unauthorized(new { success = false, error = "Invalid business context." });

            try
            {
                var data = await _retry.RetryFailedAsync(businessId, campaignId, limit);
                return Ok(new { success = true, data });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "RetryFailed error for Campaign {CampaignId}", campaignId);
                return BadRequest(new { success = false, error = ex.Message });
            }
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignVariableMapController.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Shared; // User.GetBusinessId()

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/variables")]
    [Authorize]
    public class CampaignVariableMapController : ControllerBase
    {
        private readonly AppDbContext _db;
        private readonly ICampaignVariableMapService _svc;

        public CampaignVariableMapController(AppDbContext db, ICampaignVariableMapService svc)
        { _db = db; _svc = svc; }

        [HttpGet]
        public async Task<IActionResult> Get(Guid campaignId)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized();

            var exists = await _db.Campaigns.AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId);
            if (!exists) return NotFound(new { success = false, message = "Campaign not found" });

            var data = await _svc.GetAsync(businessId, campaignId);
            return Ok(new { success = true, data });
        }

        [HttpPost]
        public async Task<IActionResult> Save(Guid campaignId, [FromBody] CampaignVariableMapDto body)
        {
            var businessId = User.GetBusinessId();
            var userName = User.Identity?.Name ?? "system";
            if (businessId == Guid.Empty) return Unauthorized();

            if (body == null) return BadRequest(new { success = false, message = "Body required" });
            body.CampaignId = campaignId;

            var ok = await _svc.SaveAsync(businessId, body, userName);
            return Ok(new { success = ok });
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CsvBatchController.cs 
====================================================== 
 
Ôªøusing System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Shared;   // User.GetBusinessId()
using xbytechat.api.Helpers;
using xbytechat.api.Features.CampaignModule.DTOs.Requests;  // ResponseResult

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/csv/batch")]
    [Authorize]
    public class CsvBatchController : ControllerBase
    {
        private readonly ICsvBatchService _service;

        public CsvBatchController(ICsvBatchService service)
        {
            _service = service;
        }

        /// <summary>Upload a CSV, create a batch, and ingest rows.</summary>
        [HttpPost]
        [RequestSizeLimit(1024L * 1024L * 200L)] // 200 MB
        public async Task<IActionResult> Upload(
            [FromForm] CsvBatchUploadForm form,
            CancellationToken ct)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty)
                return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

            if (form.File is null || form.File.Length == 0)
                return BadRequest(ResponseResult.ErrorInfo("CSV file is required"));

            // soft sanity (many browsers use text/csv; don't block others)
            var allowed = new[] { "text/csv", "application/vnd.ms-excel", "application/octet-stream" };
            if (!allowed.Contains(form.File.ContentType, StringComparer.OrdinalIgnoreCase))
                Log.Warning("Unusual CSV content type: {ContentType}", form.File.ContentType);

            await using var stream = form.File.OpenReadStream();

            var result = await _service.CreateAndIngestAsync(
                businessId: businessId,
                fileName: form.File.FileName,
                stream: stream,
                audienceId: form.AudienceId,
                ct: ct);

            return Ok(new { success = true, data = result });
        }


        [HttpGet("{batchId:guid}")]
        public async Task<IActionResult> Get(Guid batchId, CancellationToken ct)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

            var result = await _service.GetBatchAsync(businessId, batchId, ct);
            if (result == null) return NotFound(ResponseResult.ErrorInfo("Batch not found"));
            return Ok(new { success = true, data = result });
        }

        [HttpGet("{batchId:guid}/sample")]
        public async Task<IActionResult> Sample(Guid batchId, [FromQuery] int take = 20, CancellationToken ct = default)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

            var rows = await _service.GetSamplesAsync(businessId, batchId, take, ct);
            return Ok(new { success = true, data = rows });
        }

        [HttpGet]
        public async Task<IActionResult> List([FromQuery] int limit = 20, CancellationToken ct = default)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

            var list = await _service.ListBatchesAsync(businessId, limit, ct);
            return Ok(new { success = true, data = list });
        }

        [HttpGet("{batchId:guid}/rows")]
        public async Task<IActionResult> RowsPage(Guid batchId, [FromQuery] int skip = 0, [FromQuery] int take = 50, CancellationToken ct = default)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

            var page = await _service.GetRowsPageAsync(businessId, batchId, skip, take, ct);
            return Ok(new { success = true, data = page });
        }

        //[HttpPost("{batchId:guid}/validate")]
        //public async Task<IActionResult> Validate(Guid batchId, [FromBody] CsvBatchValidationRequestDto request, CancellationToken ct = default)
        //{
        //    var businessId = User.GetBusinessId();
        //    if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

        //    var result = await _service.ValidateAsync(businessId, batchId, request, ct);
        //    return Ok(new { success = true, data = result });
        //}

        [HttpDelete("{batchId:guid}")]
        public async Task<IActionResult> Delete(Guid batchId, CancellationToken ct = default)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

            var ok = await _service.DeleteBatchAsync(businessId, batchId, ct);
            return ok ? Ok(new { success = true }) : NotFound(ResponseResult.ErrorInfo("Batch not found"));
        }
    }
}


//using System;
//using System.Linq;
//using System.Threading;
//using System.Threading.Tasks;
//using Microsoft.AspNetCore.Authorization;
//using Microsoft.AspNetCore.Http;
//using Microsoft.AspNetCore.Mvc;
//using Serilog;
//using xbytechat.api.Features.CampaignModule.DTOs;
//using xbytechat.api.Features.CampaignModule.Services;
//using xbytechat.api.Helpers; // User.GetBusinessId()
//using xbytechat.api.Shared;  // ResponseResult

//namespace xbytechat.api.Features.CampaignModule.Controllers
//{
//    [ApiController]
//    [Route("api/csv/batch")]
//    [Authorize]
//    public class CsvBatchController : ControllerBase
//    {
//        private readonly ICsvBatchService _service;

//        public CsvBatchController(ICsvBatchService service)
//        {
//            _service = service;
//        }

//        /// <summary>Upload a CSV, create a batch, and ingest rows.</summary>
//        [HttpPost]
//        [RequestSizeLimit(1024L * 1024L * 200L)] // 200 MB cap; adjust as needed
//        public async Task<IActionResult> Upload(
//            [FromQuery] Guid? audienceId,
//            [FromForm] IFormFile file,
//            CancellationToken ct)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty)
//                return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

//            if (file is null || file.Length == 0)
//                return BadRequest(ResponseResult.ErrorInfo("CSV file is required"));

//            // soft sanity (many browsers use text/csv; don't block others)
//            var allowed = new[] { "text/csv", "application/vnd.ms-excel", "application/octet-stream" };
//            if (!allowed.Contains(file.ContentType, StringComparer.OrdinalIgnoreCase))
//                Log.Warning("Unusual CSV content type: {ContentType}", file.ContentType);

//            await using var stream = file.OpenReadStream();

//            // All validation (incl. optional audience check) happens inside the service.
//            var result = await _service.CreateAndIngestAsync(
//                businessId: businessId,
//                fileName: file.FileName,
//                stream: stream,
//                audienceId: audienceId,
//                ct: ct);

//            return Ok(new { success = true, data = result });
//        }

//        /// <summary>Get batch info (headers, counts)</summary>
//        [HttpGet("{batchId:guid}")]
//        public async Task<IActionResult> Get(Guid batchId, CancellationToken ct)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

//            var result = await _service.GetBatchAsync(businessId, batchId, ct);
//            if (result == null) return NotFound(ResponseResult.ErrorInfo("Batch not found"));

//            return Ok(new { success = true, data = result });
//        }

//        /// <summary>Get first N sample rows to help build mappings.</summary>
//        [HttpGet("{batchId:guid}/sample")]
//        public async Task<IActionResult> Sample(Guid batchId, [FromQuery] int take = 20, CancellationToken ct = default)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

//            var rows = await _service.GetSamplesAsync(businessId, batchId, take, ct);
//            return Ok(new { success = true, data = rows });
//        }

//        // ---------------- NEW endpoints below ----------------

//        /// <summary>List recent CSV batches (default 20, cap 100).</summary>
//        [HttpGet]
//        public async Task<IActionResult> List([FromQuery] int limit = 20, CancellationToken ct = default)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

//            var list = await _service.ListBatchesAsync(businessId, limit, ct);
//            return Ok(new { success = true, data = list });
//        }

//        /// <summary>Get a paged slice of rows for a batch.</summary>
//        [HttpGet("{batchId:guid}/rows")]
//        public async Task<IActionResult> RowsPage(
//            Guid batchId,
//            [FromQuery] int skip = 0,
//            [FromQuery] int take = 50,
//            CancellationToken ct = default)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

//            var page = await _service.GetRowsPageAsync(businessId, batchId, skip, take, ct);
//            return Ok(new { success = true, data = page });
//        }

//        /// <summary>Validate a batch (phone presence, duplicates, missing required headers).</summary>
//        [HttpPost("{batchId:guid}/validate")]
//        public async Task<IActionResult> Validate(
//            Guid batchId,
//            [FromBody] CsvBatchValidationRequestDto request,
//            CancellationToken ct = default)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

//            var result = await _service.ValidateAsync(businessId, batchId, request, ct);
//            return Ok(new { success = true, data = result });
//        }

//        /// <summary>Delete a CSV batch and all its rows (transactional).</summary>
//        [HttpDelete("{batchId:guid}")]
//        public async Task<IActionResult> Delete(Guid batchId, CancellationToken ct = default)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

//            var ok = await _service.DeleteBatchAsync(businessId, batchId, ct);
//            return ok ? Ok(new { success = true }) : NotFound(ResponseResult.ErrorInfo("Batch not found"));
//        }
//    }
//}


//using System;
//using System.Linq;
//using System.Threading;
//using System.Threading.Tasks;
//using Microsoft.AspNetCore.Authorization;
//using Microsoft.AspNetCore.Http;
//using Microsoft.AspNetCore.Mvc;
//using Serilog;
//using xbytechat.api;
//using xbytechat.api.Features.CampaignModule.DTOs;
//using xbytechat.api.Features.CampaignModule.Services;
//using xbytechat.api.Helpers;
//using xbytechat.api.Shared;

//namespace xbytechat.api.Features.CampaignModule.Controllers
//{
//    [ApiController]
//    [Route("api/csv/batch")]
//    [Authorize]
//    public class CsvBatchController : ControllerBase
//    {
//        private readonly ICsvBatchService _service;

//        public CsvBatchController(ICsvBatchService service)
//        {
//            _service = service;
//        }

//        /// <summary>
//        /// Upload a CSV, create a batch, and ingest rows.
//        /// </summary>
//        [HttpPost]
//        [RequestSizeLimit(1024L * 1024L * 200L)] // 200 MB cap; adjust as needed
//        public async Task<IActionResult> Upload([FromQuery] Guid audienceId, IFormFile file, CancellationToken ct)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

//            if (audienceId == Guid.Empty)
//                return BadRequest(ResponseResult.ErrorInfo("audienceId is required"));

//            if (file == null || file.Length == 0)
//                return BadRequest(ResponseResult.ErrorInfo("CSV file is required"));

//            // quick mime sanity (optional, many browsers send text/csv)
//            var allowed = new[] { "text/csv", "application/vnd.ms-excel", "application/octet-stream" };
//            if (!allowed.Contains(file.ContentType, StringComparer.OrdinalIgnoreCase))
//                Log.Warning("Unusual CSV content type: {ContentType}", file.ContentType);

//            using var stream = file.OpenReadStream();
//            var result = await _service.CreateAndIngestAsync(businessId, audienceId, file.FileName, stream, ct);

//            return Ok(new { success = true, data = result });
//        }

//        /// <summary>
//        /// Get batch info (headers, counts)
//        /// </summary>
//        [HttpGet("{batchId:guid}")]
//        public async Task<IActionResult> Get(Guid batchId, CancellationToken ct)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

//            var result = await _service.GetBatchAsync(businessId, batchId, ct);
//            if (result == null) return NotFound(ResponseResult.ErrorInfo("Batch not found"));

//            return Ok(new { success = true, data = result });
//        }

//        /// <summary>
//        /// Get first N sample rows to help build mappings.
//        /// </summary>
//        [HttpGet("{batchId:guid}/sample")]
//        public async Task<IActionResult> Sample(Guid batchId, [FromQuery] int take = 20, CancellationToken ct = default)
//        {
//            var businessId = User.GetBusinessId();
//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo("Invalid business"));

//            var rows = await _service.GetSamplesAsync(businessId, batchId, take, ct);
//            return Ok(new { success = true, data = rows });
//        }
//    }
//}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\OutboundCampaignQueueController.cs 
====================================================== 
 
Ôªøusing System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Shared; // for User.GetBusinessId()

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/campaigns/{campaignId:guid}/queue")]
    [Authorize]
    public class OutboundCampaignQueueController : ControllerBase
    {
        private readonly AppDbContext _db;
        private readonly IOutboundCampaignQueueService _queue;

        public OutboundCampaignQueueController(AppDbContext db, IOutboundCampaignQueueService queue)
        {
            _db = db; _queue = queue;
        }

        // GET: /api/campaigns/{id}/queue/jobs
        [HttpGet("jobs")]
        public async Task<ActionResult<IEnumerable<OutboundCampaignJobDto>>> ListJobs(Guid campaignId)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized();

            // ownership check
            var exists = await _db.Campaigns.AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId);
            if (!exists) return NotFound();

            var jobs = await _queue.GetJobsForCampaignAsync(businessId, campaignId);
            return Ok(jobs.Select(Map));
        }

        // POST: /api/campaigns/{id}/queue/enqueue?forceDuplicate=false
        [HttpPost("enqueue")]
        public async Task<ActionResult<object>> Enqueue(Guid campaignId, [FromQuery] bool forceDuplicate = false)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized();

            var exists = await _db.Campaigns.AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId);
            if (!exists) return NotFound();

            var jobId = await _queue.EnqueueAsync(businessId, campaignId, forceDuplicate);
            return Ok(new { success = true, jobId });
        }

        // POST: /api/campaigns/{id}/queue/{jobId}/retry
        [HttpPost("{jobId:guid}/retry")]
        public async Task<ActionResult<object>> Retry(Guid campaignId, Guid jobId)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized();

            // Optional: ensure job belongs to this campaign & business
            var job = await _db.OutboundCampaignJobs
                .AsNoTracking()
                .FirstOrDefaultAsync(j => j.Id == jobId && j.BusinessId == businessId && j.CampaignId == campaignId);

            if (job == null) return NotFound();

            var ok = await _queue.ForceRetryNowAsync(businessId, jobId);
            return Ok(new { success = ok });
        }

        // POST: /api/campaigns/{id}/queue/{jobId}/cancel
        [HttpPost("{jobId:guid}/cancel")]
        public async Task<ActionResult<object>> Cancel(Guid campaignId, Guid jobId)
        {
            var businessId = User.GetBusinessId();
            if (businessId == Guid.Empty) return Unauthorized();

            var job = await _db.OutboundCampaignJobs
                .AsNoTracking()
                .FirstOrDefaultAsync(j => j.Id == jobId && j.BusinessId == businessId && j.CampaignId == campaignId);

            if (job == null) return NotFound();

            var ok = await _queue.CancelAsync(businessId, jobId);
            return Ok(new { success = ok });
        }

        private static OutboundCampaignJobDto Map(OutboundCampaignJob j) => new OutboundCampaignJobDto
        {
            Id = j.Id,
            BusinessId = j.BusinessId,
            CampaignId = j.CampaignId,
            Status = j.Status,
            Attempt = j.Attempt,
            MaxAttempts = j.MaxAttempts,
            NextAttemptAt = j.NextAttemptAt,
            LastError = j.LastError,
            CreatedAt = j.CreatedAt,
            UpdatedAt = j.UpdatedAt
        };
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\AssignContactsDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class AssignContactsDto
    {
        public List<Guid> ContactIds { get; set; }
    }

}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignButtonDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignButtonDto
    {
        public string ButtonText { get; set; } = string.Empty; // üìç e.g., "Buy Now"
        public string ButtonType { get; set; } = "url";         // üîò url | quick_reply | call
        public string TargetUrl { get; set; } = string.Empty;  // üåê or phone/call param
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignButtonParamFromMetaDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignButtonParamFromMetaDto
    {
        public string Text { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string SubType { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
        public int Position { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignCreateDto.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using xbytechat.api.Features.CTAManagement.DTOs;
using xbytechat.api.Features.MessagesEngine.DTOs; // Required to reference CTAButtonDto

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignCreateDto
    {
        public string Name { get; set; }

        [Column(TypeName = "text")]
        public string MessageTemplate { get; set; }

        public string? TemplateId { get; set; } // ‚úÖ Optional Meta template ID

        public string? FollowUpTemplateId { get; set; } // üîÅ Auto-reply template after interest

        public string? CampaignType { get; set; } //= "template"; // "text", "template", "cta"

        public Guid? CtaId { get; set; } // üîò For legacy CTA support (optional)

        public Guid? CTAFlowConfigId { get; set; }
        public List<CampaignButtonDto> MultiButtons { get; set; } = new(); // ‚úÖ New multi-button support
        public DateTime? ScheduledAt { get; set; } // üìÖ Optional future scheduling

        //public List<Guid>? ContactIds { get; set; } // üë• Target contact list

        public string? ImageUrl { get; set; } // üñºÔ∏è Optional image field

        public string? ImageCaption { get; set; } // üìù Optional caption

        public List<Guid> ContactIds { get; set; } = new();

        public List<string>? TemplateParameters { get; set; }
        public List<CampaignButtonParamFromMetaDto>? ButtonParams { get; set; }

        // Sender fields (REQUIRED for reliability)
        public string Provider { get; set; }            // "PINNACLE" | "META_CLOUD" (UPPERCASE)
        public string PhoneNumberId { get; set; }

        public string? HeaderKind { get; set; }        // "image" | "video" | "document" | "text" | "none"
        public string? HeaderMediaUrl { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignCsvMaterializeDtos.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public sealed class CampaignCsvMaterializeRequestDto
    {
        [Required] public Guid CsvBatchId { get; set; }
        public Dictionary<string, string>? Mappings { get; set; } // token -> header or "constant:Value"
        public string? PhoneField { get; set; }
        public bool NormalizePhones { get; set; } = true;
        public bool Deduplicate { get; set; } = true;
        public int? Limit { get; set; } = 200;

        public bool Persist { get; set; } = false;
        public string? AudienceName { get; set; } // required when Persist=true
    }

    public sealed class CsvMaterializedRowDto
    {
        public int RowIndex { get; set; }
        public string? Phone { get; set; }
        public Dictionary<string, string> Variables { get; set; } = new();
        public List<string> Errors { get; set; } = new();
    }

    public sealed class CampaignCsvMaterializeResponseDto
    {
        public Guid CampaignId { get; set; }
        public Guid CsvBatchId { get; set; }
        public int TotalRows { get; set; }
        public int MaterializedCount { get; set; }
        public int SkippedCount { get; set; }
        public Guid? AudienceId { get; set; }          // if persisted
        public List<CsvMaterializedRowDto> Preview { get; set; } = new();
        public List<string> Warnings { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignDispatchDtos.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public sealed class CampaignDispatchResponseDto
    {
        public Guid CampaignId { get; set; }
        public string Mode { get; set; } = "canary"; // canary|full
        public int RequestedCount { get; set; }
        public int SelectedCount { get; set; }
        public int EnqueuedCount { get; set; }
        public List<DispatchedRecipientDto> Sample { get; set; } = new(); // small sample for debug
        public List<string> Warnings { get; set; } = new();
    }

    public sealed class DispatchedRecipientDto
    {
        public Guid RecipientId { get; set; }
        public string? Phone { get; set; }
        public string? Status { get; set; }
        public DateTime? MaterializedAt { get; set; }
        public string? IdempotencyKey { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignDispatchPlanDtos.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class DispatchBatchDto
    {
        public int BatchNumber { get; set; }
        public int StartIndex { get; set; }
        public int Count { get; set; }

        /// <summary>Total approximate payload size for this batch in bytes (text + buttons, naive estimate).</summary>
        public int ApproxBytes { get; set; }

        /// <summary>Seconds since plan start when this batch is allowed to start (based on throttling).</summary>
        public int OffsetSeconds { get; set; }

        public List<Guid?> RecipientIds { get; set; } = new();   // when using CampaignRecipients
        public List<string?> Phones { get; set; } = new();
        public List<string> Notes { get; set; } = new();
    }

    public class DispatchThrottleDto
    {
        public string Plan { get; set; } = "Unknown";
        public string Provider { get; set; } = "Auto";
        public int MaxBatchSize { get; set; } = 50;
        public int MaxPerMinute { get; set; } = 300;
        public int ComputedBatches { get; set; }
        public int EstimatedMinutes { get; set; }
        public List<string> Warnings { get; set; } = new();
    }

    public class CampaignDispatchPlanResultDto
    {
        public Guid CampaignId { get; set; }
        public string TemplateName { get; set; } = string.Empty;
        public string Language { get; set; } = "en";
        public int PlaceholderCount { get; set; }

        public int TotalRecipients { get; set; }
        public int TotalApproxBytes { get; set; }

        public DispatchThrottleDto Throttle { get; set; } = new();
        public List<DispatchBatchDto> Batches { get; set; } = new();

        public int WarningCount { get; set; }
        public List<string> GlobalWarnings { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignDryRunDto.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public sealed class CampaignDryRunRecipientResultDto
    {
        public Guid? ContactId { get; set; }
        public string? ContactName { get; set; }
        public string PhoneNumber { get; set; } = "";
        public bool WouldSend { get; set; }
        public List<string> Errors { get; set; } = new();
        public List<string> Warnings { get; set; } = new();

        // Provider-shaped components (Meta/Pinnacle compatible)
        public List<object> ProviderComponents { get; set; } = new();
    }

    public sealed class CampaignDryRunResponseDto
    {
        public Guid CampaignId { get; set; }
        public string CampaignType { get; set; } = "";
        public string TemplateName { get; set; } = "";
        public string? Language { get; set; }
        public bool HasHeaderMedia { get; set; }
        public int RequiredPlaceholders { get; set; }
        public int ProvidedPlaceholders { get; set; }

        public int RecipientsConsidered { get; set; }
        public int WouldSendCount { get; set; }
        public int ErrorCount { get; set; }

        // Billability (best-effort estimate)
        public bool EstimatedChargeable { get; set; } = true;
        public string EstimatedConversationCategory { get; set; } = "template_outbound";
        public List<string> Notes { get; set; } = new();

        public List<CampaignDryRunRecipientResultDto> Results { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignDryRunDtos.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignDryRunIssueDto
    {
        public Guid? RecipientId { get; set; }
        public Guid? ContactId { get; set; }
        public string Phone { get; set; } = string.Empty;

        /// <summary>
        /// error | warn
        /// </summary>
        public string Severity { get; set; } = "error";

        public string Message { get; set; } = string.Empty;
    }

    public class CampaignDryRunResultDto
    {
        public Guid CampaignId { get; set; }
        public string TemplateName { get; set; } = string.Empty;
        public string Language { get; set; } = string.Empty;

        /// <summary>
        /// Placeholder count detected in the template (e.g., {{1}}, {{2}}, ...).
        /// </summary>
        public int PlaceholderCount { get; set; }

        public int CheckedRecipients { get; set; }
        public int ErrorCount { get; set; }
        public int WarningCount { get; set; }

        public List<CampaignDryRunIssueDto> Issues { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignDto.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignDto
    {
        public Guid Id { get; set; }

        public string Name { get; set; }

        public string MessageTemplate { get; set; }

        public string? TemplateId { get; set; }
        public string? MessageBody { get; set; }
        public string? CampaignType { get; set; }

        public string? Status { get; set; }

        public string? ImageUrl { get; set; }

        public string? ImageCaption { get; set; }

        public DateTime CreatedAt { get; set; }

        public DateTime? ScheduledAt { get; set; }

        public Guid? CtaId { get; set; }

        public CtaPreviewDto? Cta { get; set; }

        public List<CampaignButtonDto> MultiButtons { get; set; } = new();

        public Guid? CTAFlowConfigId { get; set; }
        public string? CTAFlowName { get; set; }
    }

    // üì¶ Embedded DTO for CTA preview (title + button text only)
    public class CtaPreviewDto
    {
        public string Title { get; set; } = string.Empty;

        public string ButtonText { get; set; } = string.Empty;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignMaterializationDtos.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class ButtonResolutionDto
    {
        public string ButtonText { get; set; } = string.Empty;
        public string? RawTemplateValue { get; set; } // e.g. "https://x.com/{{1}}?q={{2}}"
        public string? ResolvedUrl { get; set; }
        public List<string> UsedPlaceholders { get; set; } = new(); // e.g. ["{{1}}","{{2}}"]
        public List<string> MissingArguments { get; set; } = new(); // e.g. ["{{2}}"]
        public List<string> Notes { get; set; } = new();
    }

    public class TemplateParamResolutionDto
    {
        public int Index { get; set; } // 1-based placeholder index from template ({{1}}, {{2}}, ...)
        public string? Value { get; set; }
        public string SourceType { get; set; } = string.Empty; // AudienceColumn | Static | Expression
        public string? SourceKey { get; set; } // column name when SourceType = AudienceColumn
        public bool IsMissing { get; set; }
        public string? Note { get; set; }
    }

    public class MaterializedRecipientDto
    {
        public Guid? RecipientId { get; set; }      // when using CampaignRecipients
        public Guid? ContactId { get; set; }
        public string? Phone { get; set; }

        public List<TemplateParamResolutionDto> Parameters { get; set; } = new();
        public List<ButtonResolutionDto> Buttons { get; set; } = new();

        public List<string> Warnings { get; set; } = new();
        public List<string> Errors { get; set; } = new();
    }

    public class CampaignMaterializeResultDto
    {
        public Guid CampaignId { get; set; }
        public string TemplateName { get; set; } = string.Empty;
        public string Language { get; set; } = string.Empty;
        public int PlaceholderCount { get; set; }

        public int ReturnedCount { get; set; }
        public int ErrorCount { get; set; }
        public int WarningCount { get; set; }

        public List<MaterializedRecipientDto> Rows { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignMaterializeDtos.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public sealed class CampaignMaterializeRequestDto
    {
        [Required] public Guid CsvBatchId { get; set; }

        /// <summary>
        /// Optional explicit mapping: token -> CSV header name or "constant:Value".
        /// If null/empty, we‚Äôll try loading saved mappings; if none exist, we fall back to header==token.
        /// </summary>
        public Dictionary<string, string>? Mappings { get; set; }

        /// <summary>
        /// If not provided, we will try common headers like phone, mobile, whatsapp, msisdn.
        /// </summary>
        public string? PhoneField { get; set; }

        public bool NormalizePhones { get; set; } = true;
        public bool Deduplicate { get; set; } = true;

        /// <summary>Preview only first N rows; 0 or null means all.</summary>
        public int? Limit { get; set; } = 200;

        /// <summary>When true, materialized rows are persisted to Audience + CampaignRecipients.</summary>
        public bool Persist { get; set; } = false;

        /// <summary>Required when Persist = true.</summary>
        public string? AudienceName { get; set; }
    }

    public sealed class MaterializedRowDto
    {
        public int RowIndex { get; set; }
        public string? Phone { get; set; }
        public Dictionary<string, string> Variables { get; set; } = new();
        public List<string> Errors { get; set; } = new();
    }

    public sealed class CampaignMaterializeResponseDto
    {
        public Guid CampaignId { get; set; }
        public Guid CsvBatchId { get; set; }
        public int TotalRows { get; set; }
        public int MaterializedCount { get; set; }
        public int SkippedCount { get; set; }
        public Guid? AudienceId { get; set; } // when persisted
        public List<MaterializedRowDto> Preview { get; set; } = new();
        public List<string> Warnings { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignPreviewDto.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignPreviewRequestDto
    {
        // Optional: preview using a specific recipient‚Äôs contact info
        public Guid? ContactId { get; set; }
    }

    public class CampaignPreviewResponseDto
    {
        public Guid CampaignId { get; set; }
        public string TemplateName { get; set; } = "";
        public string Language { get; set; } = "en_US";
        public int PlaceholderCount { get; set; }

        public string BodyPreview { get; set; } = "";
        public List<string> MissingParams { get; set; } = new();  // e.g. ["{{2}} required but not supplied"]

        public bool HasHeaderMedia { get; set; }
        public string? HeaderType { get; set; } // IMAGE/VIDEO/DOCUMENT (if you later persist)

        public List<ButtonPreviewDto> Buttons { get; set; } = new();
    }

    public class ButtonPreviewDto
    {
        public int Index { get; set; }            // 0..2
        public string Text { get; set; } = "";
        public string Type { get; set; } = "URL"; // Meta types
        public bool IsDynamic { get; set; }       // needs parameter
        public string? TemplateParamBase { get; set; } // e.g. "/r/{{1}}"
        public string? CampaignValue { get; set; } // what user set in campaign (for dynamic)
        public string? TokenParam { get; set; }    // what we‚Äôd send when base has {{1}}
        public string? FinalUrlPreview { get; set; } // full tracked URL preview
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignRecipientDto.cs 
====================================================== 
 
Ôªøusing System;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignRecipientDto
    {
        public Guid Id { get; set; }

        public Guid? ContactId { get; set; }
        public string ContactName { get; set; }
        public string ContactPhone { get; set; }

        public string Status { get; set; }
        public DateTime? SentAt { get; set; }

        // üîÅ Advanced Fields (for analytics & future automation)
        public string? BotId { get; set; }
        public string? MessagePreview { get; set; }
        public string? ClickedCTA { get; set; }
        public string? CategoryBrowsed { get; set; }
        public string? ProductBrowsed { get; set; }
        public bool IsAutoTagged { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignRetryDtos.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignRetryResultDto
    {
        public Guid CampaignId { get; set; }
        public int ConsideredFailed { get; set; }
        public int Retried { get; set; }
        public int Skipped { get; set; }  // e.g., duplicates, already succeeded, or filtered out
        public List<Guid> RecipientIdsSample { get; set; } = new(); // up to 20 IDs for quick inspection
        public string? Note { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignSummaryDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignSummaryDto
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public string? Status { get; set; }
        public DateTime? ScheduledAt { get; set; }
        public DateTime CreatedAt { get; set; }
        public int Delivered { get; set; }
        public int Read { get; set; }

        public string? ImageUrl { get; set; } // ‚úÖ Add this
        public string? ImageCaption { get; set; } // ‚úÖ Add this
        public string? CtaTitle { get; set; } // Optional: For CTA info
        public int RecipientCount { get; set; } // Optional: To show 0/10 etc
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignVariableMapDto.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignVariableMapDto
    {
        public Guid CampaignId { get; set; }
        public List<CampaignVariableMapItemDto> Items { get; set; } = new();
    }

    public class CampaignVariableMapItemDto
    {
        // Matches your normalized model fields
        public string Component { get; set; } = "";   // "body", "header", "button:url:1"
        public int Index { get; set; }                // 1..N

        public string SourceType { get; set; } = "Static"; // ContactField | CsvColumn | Static | Expression
        public string? SourceKey { get; set; }             // "name" / CSV header, etc.
        public string? StaticValue { get; set; }
        public string? Expression { get; set; }
        public string? DefaultValue { get; set; }
        public bool IsRequired { get; set; } = false;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CsvBatchListItemDto.cs 
====================================================== 
 
Ôªøusing System;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    /// <summary>
    /// Lightweight projection for listing recent CSV batches.
    /// </summary>
    public sealed class CsvBatchListItemDto
    {
        public Guid BatchId { get; set; }
        public string? FileName { get; set; }
        public int RowCount { get; set; }
        public string Status { get; set; } = "ready"; // ready | ingesting | failed | complete
        public DateTime CreatedAt { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CsvBatchRowsPageDto.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    /// <summary>
    /// Paged slice of CSV rows for previewing a batch.
    /// </summary>
    public sealed class CsvBatchRowsPageDto
    {
        public Guid BatchId { get; set; }
        public int TotalRows { get; set; }
        public int Skip { get; set; }
        public int Take { get; set; }
        public List<CsvRowSampleDto> Rows { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CsvBatchValidationDtos.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public sealed class CsvBatchValidationRequestDto
    {
        /// <summary>Explicit phone column to use; if null we'll try to auto-detect.</summary>
        public string? PhoneField { get; set; }

        /// <summary>Normalize phones (strip punctuation/leading zeros; add 91 for 10-digit local).</summary>
        public bool NormalizePhones { get; set; } = true;

        /// <summary>Report duplicates after normalization.</summary>
        public bool Deduplicate { get; set; } = true;

        /// <summary>Headers that must exist in the CSV.</summary>
        public List<string>? RequiredHeaders { get; set; }

        /// <summary>How many problematic rows to include in the response samples.</summary>
        public int SampleSize { get; set; } = 20;
    }

    public sealed class CsvBatchValidationResultDto
    {
        public Guid BatchId { get; set; }
        public int TotalRows { get; set; }

        public string? PhoneField { get; set; }

        public int MissingPhoneCount { get; set; }
        public int DuplicatePhoneCount { get; set; }

        public List<string> MissingRequiredHeaders { get; set; } = new();
        public List<string> Warnings { get; set; } = new();
        public List<string> Errors { get; set; } = new();

        /// <summary>Sample of problematic rows (missing phone / dup / other).</summary>
        public List<CsvRowSampleDto> ProblemSamples { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\FlowListItemDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class FlowListItemDto
    {
        public Guid Id { get; set; }
        public string FlowName { get; set; } = string.Empty;
        public bool IsPublished { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\OutboundCampaignJobCreateDto.cs 
====================================================== 
 
Ôªøusing System;

namespace xbytechat.api.Features.Queueing.DTOs
{
    /// <summary>
    /// Minimal job creation payload for outbound campaign sends.
    /// The worker will hydrate the template parameters from CampaignRecipient.
    /// </summary>
    public sealed class OutboundCampaignJobCreateDto
    {
        public Guid BusinessId { get; set; }
        public Guid CampaignId { get; set; }
        public Guid CampaignRecipientId { get; set; }

        /// <summary>Deduplication key. The queue should drop duplicates with the same key.</summary>
        public string? IdempotencyKey { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\OutboundCampaignJobDto.cs 
====================================================== 
 
Ôªøusing System;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class OutboundCampaignJobDto
    {
        public Guid Id { get; set; }
        public Guid BusinessId { get; set; }
        public Guid CampaignId { get; set; }

        public string Status { get; set; } = "queued"; // queued | running | succeeded | failed | canceled
        public int Attempt { get; set; }
        public int MaxAttempts { get; set; }

        public DateTimeOffset? NextAttemptAt { get; set; }
        public string? LastError { get; set; }

        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\SendJobDtos.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public enum SendJobState
    {
        Pending = 0,
        Running = 1,
        Succeeded = 2,
        Failed = 3,
        Canceled = 4,
        Partial = 5
    }

    public class SendJobStartRequestDto
    {
        public bool Force { get; set; } = false;     // allow send even if dry-run has errors (logged loudly)
        public int Limit { get; set; } = 2000;       // cap on planned recipients
    }

    public class SendJobStartResponseDto
    {
        public Guid JobId { get; set; }
        public Guid CampaignId { get; set; }
        public string Message { get; set; } = "Send job queued.";
    }

    public class SendJobBatchResultDto
    {
        public int BatchNumber { get; set; }
        public int Count { get; set; }
        public int Success { get; set; }
        public int Failed { get; set; }
        public int Skipped { get; set; }
        public string Notes { get; set; } = string.Empty;
        public int OffsetSeconds { get; set; }
    }

    public class SendJobStatusDto
    {
        public Guid JobId { get; set; }
        public Guid CampaignId { get; set; }
        public SendJobState State { get; set; }
        public DateTimeOffset CreatedAt { get; set; }
        public DateTimeOffset? StartedAt { get; set; }
        public DateTimeOffset? CompletedAt { get; set; }

        public int PlannedBatches { get; set; }
        public int CompletedBatches { get; set; }

        public int PlannedRecipients { get; set; }
        public int SentSuccess { get; set; }
        public int SentFailed { get; set; }
        public int Skipped { get; set; }

        public List<SendJobBatchResultDto> Batches { get; set; } = new();
        public List<string> Warnings { get; set; } = new();
        public List<string> Errors { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\VideoTemplateMessageDto.cs 
====================================================== 
 
Ôªø// Features/CampaignModule/DTOs/VideoTemplateMessageDto.cs
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public sealed class VideoTemplateMessageDto
    {
        public string RecipientNumber { get; set; } = "";
        public string TemplateName { get; set; } = "";
        public string LanguageCode { get; set; } = "en_US";

        // URL for the video header (HTTPS)
        public string? HeaderVideoUrl { get; set; }

        public List<string> TemplateParameters { get; set; } = new();
        public List<CampaignButtonDto> ButtonParameters { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\Requests\CsvBatchUploadForm.cs 
====================================================== 
 
Ôªøusing System;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;

namespace xbytechat.api.Features.CampaignModule.DTOs.Requests
{
    // Swagger-safe wrapper for multipart upload
    public sealed class CsvBatchUploadForm
    {
        public Guid? AudienceId { get; set; }

        [Required]
        public IFormFile File { get; set; } = default!;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Helpers\IVariableResolver.cs 
====================================================== 
 
Ôªøusing System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.Helpers
{
    public interface IVariableResolver
    {
        Dictionary<string, string> ResolveVariables(
            IReadOnlyDictionary<string, string> rowData,
            IReadOnlyDictionary<string, string>? mappings);
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Helpers\VariableResolver.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.Helpers
{
    public sealed class VariableResolver : IVariableResolver
    {
        public Dictionary<string, string> ResolveVariables(
            IReadOnlyDictionary<string, string> rowData,
            IReadOnlyDictionary<string, string>? mappings)
        {
            var result = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            if (mappings == null || mappings.Count == 0)
            {
                foreach (var kv in rowData)
                    result[kv.Key.Trim()] = kv.Value?.Trim() ?? string.Empty;
                return result;
            }

            foreach (var (token, srcRaw) in mappings)
            {
                if (string.IsNullOrWhiteSpace(token)) continue;

                var src = srcRaw?.Trim() ?? string.Empty;
                if (src.StartsWith("constant:", StringComparison.OrdinalIgnoreCase))
                {
                    result[token] = src.Substring("constant:".Length).Trim();
                    continue;
                }

                if (rowData.TryGetValue(src, out var v) && v != null)
                    result[token] = v.Trim();
                else
                    result[token] = string.Empty;
            }

            return result;
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\Audience.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace xbytechat.api.Features.CampaignModule.Models
{
    /// <summary>
    /// Logical grouping of recipients (often tied to a CsvBatch).
    /// A campaign can materialize recipients from one Audience.
    /// </summary>
    public class Audience
    {
        [Key] public Guid Id { get; set; }

        [Required] public Guid BusinessId { get; set; }

        [Required, MaxLength(160)]
        public string Name { get; set; } = "Untitled Audience";

        [MaxLength(512)]
        public string? Description { get; set; }  // useful in UI
               
        public Guid? CampaignId { get; set; }
        public Campaign? Campaign { get; set; }

        public Guid? CsvBatchId { get; set; }
        public CsvBatch? CsvBatch { get; set; }

        public bool IsDeleted { get; set; } = false;

        public Guid? CreatedByUserId { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public DateTime? UpdatedAt { get; set; }   // audit

        public ICollection<AudienceMember> Members { get; set; } = new List<AudienceMember>();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\AudienceMember.cs 
====================================================== 
 
Ôªøusing System;
using System.ComponentModel.DataAnnotations;

namespace xbytechat.api.Features.CampaignModule.Models
{
    /// <summary>
    /// A single member of an Audience. May or may not be linked to a Contact.
    /// </summary>
    public class AudienceMember
    {
        [Key] public Guid Id { get; set; }

        [Required] public Guid AudienceId { get; set; }
        public Audience Audience { get; set; } = null!;

        // üÜï explicit tenant for fast filtering & safety
        [Required] public Guid BusinessId { get; set; }

        /// <summary>Optional CRM link; null for non-CRM rows until promotion</summary>
        public Guid? ContactId { get; set; }

        [MaxLength(64)]
        public string? PhoneRaw { get; set; }

        [MaxLength(32)]
        public string? PhoneE164 { get; set; }

        [MaxLength(160)]
        public string? Name { get; set; }

        [MaxLength(256)]
        public string? Email { get; set; }   // üÜï

        /// <summary>Additional attributes from CSV row (json)</summary>
        public string? AttributesJson { get; set; } // keep name as-is

        /// <summary>True if an ‚Äúauto-created‚Äù CRM contact; subject to retention</summary>
        public bool IsTransientContact { get; set; } = false;

        public bool IsDeleted { get; set; } = false;  // üÜï

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime? UpdatedAt { get; set; }      // üÜï
        public DateTime? PromotedAt { get; set; }     // when transient ‚Üí durable Contact
        public Guid? CreatedByUserId { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\Campaign.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CampaignTracking.Models;
using xbytechat.api.Features.CTAManagement.Models;
using System.ComponentModel.DataAnnotations.Schema;
using xbytechat.api.Features.MessageManagement.DTOs;
using xbytechat.api.Features.BusinessModule.Models;
using xbytechat.api.Features.CTAFlowBuilder.Models; // üÜï Import for CTAFlowConfig

namespace xbytechat.api.Features.CampaignModule.Models
{
    public class Campaign
    {
        public Guid Id { get; set; }

        // üîó Business info
        public Guid BusinessId { get; set; }
        public Business Business { get; set; }
        public Guid? CampaignId { get; set; }
        public Campaign? SourceCampaign { get; set; }

        // üìã Core campaign details
        public string Name { get; set; }
        public string MessageTemplate { get; set; }
        public string? TemplateId { get; set; } // ‚úÖ Meta-approved template ID

        [Column(TypeName = "text")]
        public string? MessageBody { get; set; } // ‚úÖ Final resolved WhatsApp message body

        public string? FollowUpTemplateId { get; set; }
        public string? CampaignType { get; set; } // text, template, cta

        // üîò CTA tracking (optional)
        public Guid? CtaId { get; set; }
        public CTADefinition? Cta { get; set; }

        // üÜï Link to Flow Config (optional)
        public Guid? CTAFlowConfigId { get; set; }
       // [ForeignKey(nameof(CTAFlowConfigId))]
        public CTAFlowConfig? CTAFlowConfig { get; set; }

        public DateTime? ScheduledAt { get; set; }
        public string Status { get; set; } = "Draft"; // Draft, Scheduled, Sent

        // üë§ Metadata
        public string? CreatedBy { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        // üóëÔ∏è Soft delete support
        public bool IsDeleted { get; set; } = false;
        public DateTime? DeletedAt { get; set; }
        public string? DeletedBy { get; set; }

        // üë• Recipient relationship
        public ICollection<CampaignRecipient> Recipients { get; set; }

        // üìä Logs
        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();
        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }

        public string? ImageUrl { get; set; }
        public string? ImageCaption { get; set; }
        public string? TemplateParameters { get; set; }

        public ICollection<CampaignButton> MultiButtons { get; set; } = new List<CampaignButton>();

        public ICollection<MessageLog> MessageLogs { get; set; } = new List<MessageLog>();

        public string? Provider { get; set; }            // UPPERCASE only
        public string? PhoneNumberId { get; set; }

        public string? TemplateSchemaSnapshot { get; set; }

        public ICollection<CampaignVariableMap> VariableMaps { get; set; } = new List<CampaignVariableMap>();

        public Guid? AudienceId { get; set; }
        public ICollection<Audience> Audiences { get; set; } = new List<Audience>();

        public string? VideoUrl { get; set; }
        public string? DocumentUrl { get; set; }
    }
}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\CampaignButton.cs 
====================================================== 
 
Ôªøusing System;

namespace xbytechat.api.Features.CampaignModule.Models
{
    public class CampaignButton
    {
        public Guid Id { get; set; }

        public Guid CampaignId { get; set; } // üîó Foreign key
        public Campaign Campaign { get; set; }

        public string Title { get; set; } = string.Empty; // Button Text (e.g. Buy Now)
        public string Type { get; set; } = "url"; // Type: url, quick_reply, call, etc.
        public string Value { get; set; } = string.Empty; // Target URL or payload

        public int Position { get; set; } // Button order (1‚Äì3)
        public bool IsFromTemplate { get; set; } = false;

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\CampaignFlowOverride.cs 
====================================================== 
 
Ôªøusing System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;

namespace xbytechat.api.Features.CampaignModule.Models
{
    public class CampaignFlowOverride
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        public Guid CampaignId { get; set; }

        [Required]
        [MaxLength(100)]
        public string TemplateName { get; set; } = string.Empty;

        [Required]
        [MaxLength(50)]
        public string ButtonText { get; set; } = string.Empty;

        public string? OverrideNextTemplate { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public string? CreatedBy { get; set; }

        [ForeignKey("CampaignId")]
        public Campaign? Campaign { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\CampaignRecipient.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.BusinessModule.Models;
using xbytechat.api.Features.CampaignTracking.Models;

namespace xbytechat.api.Features.CampaignModule.Models
{
    public class CampaignRecipient
    {
        public Guid Id { get; set; }

        public Guid CampaignId { get; set; }
        public Campaign? Campaign { get; set; }   // nav is optional at runtime

        public Guid? ContactId { get; set; }      // ‚Üê optional FK
        public Contact? Contact { get; set; }

        public string Status { get; set; } = "Pending"; // Pending, Sent, Delivered, Failed, Replied
        public DateTime? SentAt { get; set; }

        public string? BotId { get; set; }
        public string? MessagePreview { get; set; }
        public string? ClickedCTA { get; set; }
        public string? CategoryBrowsed { get; set; }
        public string? ProductBrowsed { get; set; }
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        public bool IsAutoTagged { get; set; } = false;

        // Logs
        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();

        public Guid BusinessId { get; set; }
        public Business? Business { get; set; }

        public Guid? AudienceMemberId { get; set; }
        public AudienceMember? AudienceMember { get; set; } = null!;

        [Column(TypeName = "jsonb")]
        public string? ResolvedParametersJson { get; set; }

        [Column(TypeName = "jsonb")]
        public string? ResolvedButtonUrlsJson { get; set; }

        public string? IdempotencyKey { get; set; }
        public DateTime? MaterializedAt { get; set; }
    }
}


//using System;
//using System.Collections.Generic;
//using xbytechat.api.CRM.Models;
//using xbytechat.api.Features.BusinessModule.Models;
//using xbytechat.api.Features.CampaignTracking.Models;

//namespace xbytechat.api.Features.CampaignModule.Models
//{
//    public class CampaignRecipient
//    {
//        public Guid Id { get; set; }

//        public Guid CampaignId { get; set; }
//        public Campaign Campaign { get; set; }

//        public Guid? ContactId { get; set; }
//        public Contact Contact { get; set; }

//        public string Status { get; set; } = "Pending"; // Pending, Sent, Delivered, Failed, Replied
//        public DateTime? SentAt { get; set; }

//        public string? BotId { get; set; } // Multi-bot support
//        public string? MessagePreview { get; set; } // Final message sent
//        public string? ClickedCTA { get; set; } // Track CTA clicked like "BuyNow"
//        public string? CategoryBrowsed { get; set; } // e.g., Ads
//        public string? ProductBrowsed { get; set; } // e.g., Product name
//        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

//        public bool IsAutoTagged { get; set; } = false; // Flag for automation-based tagging

//        // ‚úÖ NEW: One-to-many link to detailed logs (message attempts, delivery tracking)
//        public ICollection<CampaignSendLog> SendLogs { get; set; }

//        public Guid BusinessId { get; set; }  // ‚úÖ Add this line
//        public Business Business { get; set; } = null!; // if navigation is needed

//        // If this recipient originated from an Audience upload (CSV), link it here
//        public Guid? AudienceMemberId { get; set; }
//        // Resolved template parameters for this recipient (body/header placeholders)
//        // Example: ["Nicola","500OFF"]
//        public string? ResolvedParametersJson { get; set; }

//        // Resolved final URLs for buttons (index-aligned: 0,1,2)
//        // Example: ["https://lnk.xbyte/r/abc", "https://lnk.xbyte/r/def"]
//        public string? ResolvedButtonUrlsJson { get; set; }

//        // An idempotency fingerprint for the specific send to this recipient
//        // (e.g., SHA256(CampaignId|PhoneE164|TemplateName|ResolvedParametersJson|ResolvedButtonUrlsJson))
//        public string? IdempotencyKey { get; set; }

//        // When this recipient was materialized (frozen) and ready to dispatch
//        public DateTime? MaterializedAt { get; set; }

//    }
//}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\CampaignVariableMap.cs 
====================================================== 
 
Ôªøusing System;
using System.ComponentModel.DataAnnotations;

namespace xbytechat.api.Features.CampaignModule.Models
{
    /// <summary>
    /// Maps a template placeholder to a data source for a specific campaign.
    /// Examples of Component:
    ///   "body", "header", "button:url:1"
    /// Index is 1-based ({{1}}, {{2}}, ...).
    /// </summary>
    public class CampaignVariableMap
    {
        [Key] public Guid Id { get; set; }

        [Required] public Guid CampaignId { get; set; }
        public Campaign Campaign { get; set; } = null!;

        /// <summary> "body" | "header" | "button:url:1" </summary>
        [Required, MaxLength(64)]
        public string Component { get; set; } = null!;

        /// <summary> 1..N (corresponds to {{index}}) </summary>
        [Required]
        public int Index { get; set; }

        /// <summary>
        /// ContactField | CsvColumn | Static | Expression
        /// </summary>
        [Required, MaxLength(32)]
        public string SourceType { get; set; } = null!;

        /// <summary>
        /// If SourceType == ContactField ‚Üí "name","phone","email",...
        /// If SourceType == CsvColumn ‚Üí CSV header name.
        /// Otherwise null.
        /// </summary>
        [MaxLength(128)]
        public string? SourceKey { get; set; }

        /// <summary>Used when SourceType == Static</summary>
        public string? StaticValue { get; set; }

        /// <summary>Optional expression (mini DSL) for computed values</summary>
        public string? Expression { get; set; }

        /// <summary>Fallback when source is empty/invalid</summary>
        public string? DefaultValue { get; set; }

        /// <summary>If true, missing value = validation error in dry-run</summary>
        public bool IsRequired { get; set; } = false;

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public Guid? CreatedByUserId { get; set; }
        public Guid BusinessId { get; set; }  // denormalized for ownership checks
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\CsvBatch.cs 
====================================================== 
 
Ôªøusing System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace xbytechat.api.Features.CampaignModule.Models
{
    /// <summary>
    /// Represents a single CSV upload (file) for a business.
    /// Stores headers and basic metadata; rows live in CsvRow.
    /// </summary>
    public class CsvBatch
    {
        [Key] public Guid Id { get; set; }

        [Required] public Guid BusinessId { get; set; }

        public Guid? AudienceId { get; set; }
        /// <summary>Original filename, if available</summary>
        [MaxLength(256)]
        public string? FileName { get; set; }

      
        /// <summary>Comma-separated or JSON array of headers (we‚Äôll map to jsonb via DbContext)</summary>
        public string? HeadersJson { get; set; }

        /// <summary>SHA256 (or similar) of file contents for dedupe</summary>
        [MaxLength(128)]
        public string? Checksum { get; set; }

        /// <summary>Total rows parsed (including headerless lines after validation)</summary>
        public int RowCount { get; set; }

        /// <summary>Total rows skipped due to validation</summary>
        public int SkippedCount { get; set; }

        [MaxLength(32)]
        public string Status { get; set; } = "ready"; // ready | ingesting | failed | complete

        public string? ErrorMessage { get; set; }

        public Guid? CreatedByUserId { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\CsvBatchDtos.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CsvBatchUploadResultDto
    {
        public Guid BatchId { get; set; }
        public Guid? AudienceId { get; set; }           // <-- nullable: matches CsvBatch.AudienceId (Guid?)
        public int RowCount { get; set; }
        public List<string> Headers { get; set; } = new();
        public string Message { get; set; } = "CSV batch created.";
        public string FileName { get; set; } = string.Empty;
    }

    public class CsvBatchInfoDto
    {
        public Guid BatchId { get; set; }
        public Guid? AudienceId { get; set; }           // <-- nullable
        public int RowCount { get; set; }
        public List<string> Headers { get; set; } = new();
        public DateTime CreatedAt { get; set; }
    }

    public class CsvRowSampleDto
    {
        public int RowIndex { get; set; }
        public Dictionary<string, string?> Data { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\CsvRow.cs 
====================================================== 
 
Ôªøusing System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace xbytechat.api.Features.CampaignModule.Models
{
    /// <summary>
    /// One parsed CSV row. Data stored as JSON (key = header, value = cell).
    /// RowIndex is 0-based (first data row = 0) to match streaming ingest.
    /// </summary>
    public class CsvRow
    {
        [Key] public Guid Id { get; set; }

        /// <summary>Tenant scoping for fast filters</summary>
        [Required] public Guid BusinessId { get; set; }

        /// <summary>FK to CsvBatch.Id</summary>
        [Required] public Guid BatchId { get; set; }
        public CsvBatch Batch { get; set; } = null!;

        /// <summary>0-based row number within the batch</summary>
        [Required]
        public int RowIndex { get; set; }

        /// <summary>Raw phone, exactly as uploaded (optional convenience)</summary>
        [MaxLength(64)]
        public string? PhoneRaw { get; set; }

        /// <summary>Normalized phone in E.164 (+&lt;country&gt;&lt;number&gt;)</summary>
        [MaxLength(32)]
        public string? PhoneE164 { get; set; }

        /// <summary>JSON of the row: {"header":"value", ...}</summary>
        public string RowJson { get; set; } = "{}";

        /// <summary>
        /// Back-compat shim for code that uses DataJson.
        /// Not mapped to its own column; simply forwards to RowJson.
        /// </summary>
        [NotMapped]
        public string? DataJson
        {
            get => RowJson;
            set => RowJson = value ?? "{}";
        }

        /// <summary>If invalid at ingest/validation time, store reason here</summary>
        public string? ValidationError { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\OutboundCampaignJob.cs 
====================================================== 
 
Ôªøusing System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace xbytechat.api.Features.CampaignModule.Models
{
    /// <summary>
    /// Queue item to send a whole campaign. Worker will call CampaignService to send.
    /// </summary>
    public class OutboundCampaignJob
    {
        [Key]
        public Guid Id { get; set; } = Guid.NewGuid();

        [Required]
        public Guid BusinessId { get; set; }

        [Required]
        public Guid CampaignId { get; set; }

        /// <summary>
        /// queued | running | succeeded | failed
        /// </summary>
        [MaxLength(32)]
        public string Status { get; set; } = "queued";

        /// <summary>
        /// Number of send attempts performed.
        /// </summary>
        public int Attempt { get; set; } = 0;

        /// <summary>
        /// Max attempts before we mark failed.
        /// </summary>
        public int MaxAttempts { get; set; } = 5;

        /// <summary>
        /// When this job becomes eligible for pickup (for backoff).
        /// </summary>
        public DateTimeOffset NextAttemptAt { get; set; } = DateTimeOffset.UtcNow;

        /// <summary>
        /// Last error string (truncated in service).
        /// </summary>
        [MaxLength(4000)]
        public string? LastError { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignDispatcher.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;
// DO NOT import a different interface namespace; the interface is in this same namespace.
using xbytechat.api.Features.Queueing.DTOs;     // OutboundCampaignJobCreateDto

namespace xbytechat.api.Features.CampaignModule.Services
{
    /// <summary>
    /// Picks materialized recipients (MaterializedAt != null) in a stable order,
    /// filters to "ready" statuses, and enqueues send jobs via your outbound queue.
    /// </summary>
    public sealed class CampaignDispatcher : ICampaignDispatcher
    {
        private readonly AppDbContext _db;
        private readonly IOutboundCampaignQueueService _queue; // interface is in this same namespace

        // If you use enums, map these accordingly.
        private static readonly string[] ReadyStatuses = { "Pending", "Ready" };

        public CampaignDispatcher(AppDbContext db, IOutboundCampaignQueueService queue)
        {
            _db = db;
            _queue = queue;
        }

        //public async Task<CampaignDispatchResponseDto> DispatchAsync(
        //    Guid businessId,
        //    Guid campaignId,
        //    string mode,
        //    int count,
        //    CancellationToken ct = default)
        //{
        //    if (businessId == Guid.Empty) throw new UnauthorizedAccessException("Invalid business id.");
        //    if (campaignId == Guid.Empty) throw new ArgumentException("campaignId is required.");

        //    mode = (mode ?? "canary").Trim().ToLowerInvariant();
        //    if (mode != "canary" && mode != "full") mode = "canary";
        //    if (count <= 0) count = 25;

        //    // 1) Sanity: ownership
        //    var owns = await _db.Campaigns.AsNoTracking()
        //        .AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct);
        //    if (!owns) throw new UnauthorizedAccessException("Campaign not found or not owned by this business.");

        //    // 2) Base recipients query (materialized + ready)
        //    var baseQuery = _db.CampaignRecipients.AsNoTracking()
        //        .Where(r => r.BusinessId == businessId
        //                 && r.CampaignId == campaignId
        //                 && r.MaterializedAt != null
        //                 && ReadyStatuses.Contains(r.Status));

        //    // 3) Stable order: oldest materialized first; then Id as tiebreaker
        //    baseQuery = baseQuery.OrderBy(r => r.MaterializedAt).ThenBy(r => r.Id);

        //    // 4) Select candidates (slightly over-select; queue dedupes)
        //    var desired = mode == "canary" ? count : int.MaxValue;
        //    var take = Math.Min(desired * 2, 5000);
        //    var candidates = await baseQuery.Take(take).ToListAsync(ct);

        //    // --- Build queue jobs ---
        //    var jobs = new List<OutboundCampaignJobCreateDto>(candidates.Count);
        //    foreach (var r in candidates)
        //    {
        //        jobs.Add(new OutboundCampaignJobCreateDto
        //        {
        //            BusinessId = businessId,
        //            CampaignId = campaignId,
        //            CampaignRecipientId = r.Id,
        //            IdempotencyKey = r.IdempotencyKey
        //        });
        //    }

        //    // 5) Enqueue (no-op adapter will just count)
        //    var enqueued = await _queue.EnqueueBulkAsync(jobs, ct);

        //    // --- Prepare response ---

        //    // Fetch phones for the sample (phone is on AudienceMember, not CampaignRecipient)
        //    var memberIds = candidates
        //        .Where(r => r.AudienceMemberId.HasValue)
        //        .Select(r => r.AudienceMemberId!.Value)
        //        .Distinct()
        //        .ToList();

        //    var phoneByMemberId = await _db.AudiencesMembers.AsNoTracking()
        //        .Where(m => m.BusinessId == businessId && memberIds.Contains(m.Id))
        //        .Select(m => new { m.Id, m.PhoneE164 })
        //        .ToDictionaryAsync(x => x.Id, x => x.PhoneE164, ct);

        //    var resp = new CampaignDispatchResponseDto
        //    {
        //        CampaignId = campaignId,
        //        Mode = mode,
        //        RequestedCount = count,
        //        SelectedCount = candidates.Count,
        //        EnqueuedCount = enqueued,
        //        Sample = candidates
        //            .Take(10)
        //            .Select(r => new DispatchedRecipientDto
        //            {
        //                RecipientId = r.Id,
        //                Phone = (r.AudienceMemberId.HasValue &&
        //                         phoneByMemberId.TryGetValue(r.AudienceMemberId.Value, out var p))
        //                            ? p
        //                            : null,
        //                Status = r.Status,
        //                MaterializedAt = r.MaterializedAt,
        //                IdempotencyKey = r.IdempotencyKey
        //            })
        //            .ToList()
        //    };

        //    if (mode == "full")
        //    {
        //        resp.Warnings.Add("Full dispatch requested; rate limiting/backoff is enforced by the worker/queue.");
        //    }

        //    Log.Information("Dispatch queued {@Summary}", new
        //    {
        //        businessId,
        //        campaignId,
        //        mode,
        //        requested = count,
        //        selected = candidates.Count,
        //        enqueued
        //    });

        //    return resp;
        //}

        public async Task<CampaignDispatchResponseDto> DispatchAsync(
    Guid businessId,
    Guid campaignId,
    string mode,
    int count,
    CancellationToken ct = default)
        {
            if (businessId == Guid.Empty) throw new UnauthorizedAccessException("Invalid business id.");
            if (campaignId == Guid.Empty) throw new ArgumentException("campaignId is required.");

            mode = (mode ?? "canary").Trim().ToLowerInvariant();
            if (mode != "canary" && mode != "full") mode = "canary";
            if (count <= 0) count = 25;

            var owns = await _db.Campaigns.AsNoTracking()
                .AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct);
            if (!owns) throw new UnauthorizedAccessException("Campaign not found or not owned by this business.");

            var baseQuery = _db.CampaignRecipients.AsNoTracking()
                .Where(r => r.BusinessId == businessId
                         && r.CampaignId == campaignId
                         && r.MaterializedAt != null
                         && ReadyStatuses.Contains(r.Status))
                .OrderBy(r => r.MaterializedAt).ThenBy(r => r.Id);

            var desired = mode == "canary" ? count : int.MaxValue;
            var take = Math.Min(desired * 2, 5000);
            var candidates = await baseQuery.Take(take).ToListAsync(ct);

            var jobs = new List<OutboundCampaignJobCreateDto>(candidates.Count);
            foreach (var r in candidates)
            {
                jobs.Add(new OutboundCampaignJobCreateDto
                {
                    BusinessId = businessId,
                    CampaignId = campaignId,
                    CampaignRecipientId = r.Id,
                    IdempotencyKey = r.IdempotencyKey
                });
            }
            var enqueued = await _queue.EnqueueBulkAsync(jobs, ct);

            // ---- CHANGED: AudienceMemberId is Guid (non-nullable)
            //var memberIds = candidates
            //    .Select(r => r.AudienceMemberId)
            //    .Distinct()
            //    .ToHashSet(); // perf for Contains

            var memberIds = candidates
    .Where(r => r.AudienceMemberId.HasValue)
    .Select(r => r.AudienceMemberId!.Value)
    .Distinct()
    .ToHashSet();

            var phoneByMemberId = await _db.AudiencesMembers   // or _db.AudiencesMembers if that's your DbSet
      .AsNoTracking()
      .Where(m => m.BusinessId == businessId && memberIds.Contains(m.Id))
      .Select(m => new { m.Id, m.PhoneE164 })
      .ToDictionaryAsync(x => x.Id, x => x.PhoneE164, ct);

            var resp = new CampaignDispatchResponseDto
            {
                CampaignId = campaignId,
                Mode = mode,
                RequestedCount = count,
                SelectedCount = candidates.Count,
                EnqueuedCount = enqueued,
                Sample = candidates
                .Take(10)
                .Select(r => new DispatchedRecipientDto
                {
                    RecipientId = r.Id,
                    Phone = (r.AudienceMemberId.HasValue &&
                             phoneByMemberId.TryGetValue(r.AudienceMemberId.Value, out var p))
                                ? p
                                : null,
                    Status = r.Status,
                    MaterializedAt = r.MaterializedAt,
                    IdempotencyKey = r.IdempotencyKey
                })
                .ToList()
            };

            if (mode == "full")
                resp.Warnings.Add("Full dispatch requested; rate limiting/backoff is enforced by the worker/queue.");

            Log.Information("Dispatch queued {@Summary}", new { businessId, campaignId, mode, requested = count, selected = candidates.Count, enqueued });
            return resp;
        }

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignDispatchPlannerService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Services;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICampaignDispatchPlannerService
    {
        /// <summary>
        /// Build a read-only dispatch plan: batches, offsets, size estimates, and throttle summary.
        /// No messages are sent and no DB writes are performed.
        /// </summary>
        Task<CampaignDispatchPlanResultDto> PlanAsync(Guid businessId, Guid campaignId, int limit = 2000, CancellationToken ct = default);
    }

    /// <summary>
    /// Computes batch plan from materialized rows with simple throttling:
    /// - Derives batch size and per-minute cap from Business.Plan (fallback defaults).
    /// - Slices rows into batches and schedules offsets (seconds) so per-minute cap is respected.
    /// - Approximates payload size per row/batch for sanity checks.
    /// </summary>
    public class CampaignDispatchPlannerService : ICampaignDispatchPlannerService
    {
        private readonly AppDbContext _db;
        private readonly ICampaignMaterializationService _materializer;

        public CampaignDispatchPlannerService(AppDbContext db, ICampaignMaterializationService materializer)
        {
            _db = db;
            _materializer = materializer;
        }

        public async Task<CampaignDispatchPlanResultDto> PlanAsync(Guid businessId, Guid campaignId, int limit = 2000, CancellationToken ct = default)
        {
            if (businessId == Guid.Empty) throw new UnauthorizedAccessException("Invalid business id.");
            if (campaignId == Guid.Empty) throw new ArgumentException("CampaignId is required.");

            // Load campaign shell for meta
            var campaign = await _db.Campaigns
                .AsNoTracking()
                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct)
                ?? throw new KeyNotFoundException("Campaign not found.");

            // Materialize (reuses Step 2.11) ‚Äî read-only
            var mat = await _materializer.MaterializeAsync(businessId, campaignId, limit, ct);

            // Business plan & provider heuristics (non-fatal if missing)
            var biz = await _db.Businesses
                .AsNoTracking()
                .FirstOrDefaultAsync(b => b.Id == businessId, ct);

            // var planName = (biz?.Plan ?? "Basic").Trim();
            var planName = (biz == null
     ? "Basic"
     : (biz.Plan?.ToString() ?? "Basic")
 ).Trim();
            var provider = (campaign.Provider ?? "Auto").Trim(); // if you snapshot provider on Campaign; otherwise "Auto"

            // Throttle rules (sane defaults; adjust to your real plan matrix if available)
            var (maxBatch, perMinute) = GetThrottleForPlan(planName);

            var result = new CampaignDispatchPlanResultDto
            {
                CampaignId = campaignId,
                TemplateName = mat.TemplateName,
                Language = mat.Language,
                PlaceholderCount = mat.PlaceholderCount,
                TotalRecipients = mat.Rows.Count,
                Throttle = new DispatchThrottleDto
                {
                    Plan = planName,
                    Provider = provider,
                    MaxBatchSize = maxBatch,
                    MaxPerMinute = perMinute
                }
            };

            if (mat.Rows.Count == 0)
            {
                result.GlobalWarnings.Add("No recipients available to plan. Ensure audience or campaign recipients exist.");
                result.WarningCount = result.GlobalWarnings.Count;
                return result;
            }

            // Approx size per row (naive): sum of parameter lengths + resolved button urls + a small fixed header cost
            var approxBytesPerRow = new List<int>(mat.Rows.Count);
            foreach (var row in mat.Rows)
            {
                var paramBytes = row.Parameters.Sum(p => (p.Value?.Length ?? 0));
                var btnBytes = row.Buttons.Sum(b => (b.ResolvedUrl?.Length ?? 0) + (b.ButtonText?.Length ?? 0));
                // add a tiny constant for template envelope; tweak if you maintain captions/text
                var approx = (paramBytes + btnBytes + 64);
                approxBytesPerRow.Add(approx);
            }

            result.TotalApproxBytes = approxBytesPerRow.Sum();

            // Build batches by MaxBatchSize
            var batches = new List<DispatchBatchDto>();
            var total = mat.Rows.Count;
            var batchCount = (int)Math.Ceiling(total / (double)maxBatch);

            // Schedule offsets constrained by MaxPerMinute:
            // At most 'perMinute' messages may start within any 60-second window.
            // Strategy: bucket batches into "minutes", each minute can hold floor(perMinute / maxBatch) full batches.
            var batchesPerMinute = Math.Max(1, perMinute / Math.Max(1, maxBatch));
            if (batchesPerMinute == 0) batchesPerMinute = 1; // guard

            var offsetMinutes = 0;
            var slotInMinute = 0;
            int globalIdx = 0;

            for (int b = 0; b < batchCount; b++)
            {
                var startIndex = b * maxBatch;
                var take = Math.Min(maxBatch, total - startIndex);

                var slicePhones = new List<string?>(take);
                var sliceRecipientIds = new List<Guid?>(take);
                var sliceApprox = 0;

                for (int i = 0; i < take; i++)
                {
                    var row = mat.Rows[startIndex + i];
                    slicePhones.Add(row.Phone);
                    sliceRecipientIds.Add(row.RecipientId);
                    sliceApprox += approxBytesPerRow[startIndex + i];
                }

                var batch = new DispatchBatchDto
                {
                    BatchNumber = b + 1,
                    StartIndex = startIndex,
                    Count = take,
                    ApproxBytes = sliceApprox,
                    RecipientIds = sliceRecipientIds,
                    Phones = slicePhones,
                    OffsetSeconds = offsetMinutes * 60
                };

                // Notes for the curious
                if (slicePhones.Any(p => string.IsNullOrWhiteSpace(p)))
                    batch.Notes.Add("Some rows missing phone; those will fail at send-time unless corrected.");
                if (sliceApprox / Math.Max(1, take) > 2000)
                    batch.Notes.Add("Average payload per row is large; provider truncation risk.");

                batches.Add(batch);

                // advance slot & minute window
                slotInMinute++;
                if (slotInMinute >= batchesPerMinute)
                {
                    slotInMinute = 0;
                    offsetMinutes++;
                }

                globalIdx += take;
            }

            result.Batches = batches;
            result.Throttle.ComputedBatches = batches.Count;
            // Estimated minutes: ceil(total recipients / perMinute)
            result.Throttle.EstimatedMinutes = (int)Math.Ceiling(total / (double)Math.Max(1, perMinute));

            // Warnings
            if (perMinute < 30) result.Throttle.Warnings.Add("Low per-minute limit; delivery may be slow for large audiences.");
            if (result.TotalApproxBytes > 5_000_000) result.GlobalWarnings.Add("Plan size is large (>5MB). Consider splitting the audience.");

            result.WarningCount =
                result.GlobalWarnings.Count +
                result.Throttle.Warnings.Count +
                result.Batches.Sum(bh => bh.Notes.Count);

            Log.Information("Dispatch plan computed {@PlanSummary}",
                new
                {
                    campaignId,
                    businessId,
                    mat.TemplateName,
                    mat.Language,
                    totalRecipients = result.TotalRecipients,
                    batches = result.Batches.Count,
                    perMinute,
                    maxBatch,
                    estMinutes = result.Throttle.EstimatedMinutes
                });

            return result;
        }

        private static (int maxBatch, int perMinute) GetThrottleForPlan(string planName)
        {
            // Conservative defaults; align with your real billing/plan matrix when available.
            switch ((planName ?? "").Trim().ToLowerInvariant())
            {
                case "advanced":
                    return (100, 600);
                case "smart":
                    return (50, 300);
                case "basic":
                default:
                    return (25, 120);
            }
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignDryRunService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.Shared.utility;
using xbytechat.api.WhatsAppSettings.Services;
using xbytechat_api.WhatsAppSettings.Services;

namespace xbytechat.api.Features.CampaignModule.Services
{
    /// <summary>
    /// Dry-run validator for campaigns. Checks template existence, parameter counts,
    /// dynamic button placeholders, and recipient phone presence/shape.
    /// </summary>
    public class CampaignDryRunService : ICampaignDryRunService
    {
        private readonly AppDbContext _db;
        private readonly IWhatsAppTemplateFetcherService _templateFetcher;

        private static readonly Regex PlaceholderRe = new(@"\{\{\s*(\d+)\s*\}\}", RegexOptions.Compiled);

        public CampaignDryRunService(AppDbContext db, IWhatsAppTemplateFetcherService templateFetcher)
        {
            _db = db;
            _templateFetcher = templateFetcher;
        }

        public async Task<CampaignDryRunResultDto> ValidateAsync(
            Guid businessId,
            Guid campaignId,
            int limit = 200,
            CancellationToken ct = default)
        {
            if (businessId == Guid.Empty) throw new UnauthorizedAccessException("Invalid business id.");
            if (campaignId == Guid.Empty) throw new ArgumentException("campaignId is required.");

            // Load campaign + recipients(+contacts) + variable maps + buttons (read-only)
            var campaign = await _db.Campaigns
                .AsNoTracking()
                .Include(c => c.MultiButtons)
                .Include(c => c.VariableMaps)
                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct);

            if (campaign == null)
                throw new KeyNotFoundException("Campaign not found.");

            // Recipients (contact needed for phone)
            var recipients = await _db.CampaignRecipients
                .AsNoTracking()
                .Include(r => r.Contact)
                .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)
                .OrderBy(r => r.UpdatedAt)
                .Take(limit)
                .ToListAsync(ct);

            // Determine template name (prefer TemplateId ‚Üí MessageTemplate) and fetch metadata
            var templateName = (campaign.TemplateId ?? campaign.MessageTemplate ?? "").Trim();
            if (string.IsNullOrWhiteSpace(templateName))
            {
                // No template at all ‚Äî return result with a single global error across all recipients
                return BuildResult(
                    campaignId,
                    templateName: "",
                    language: "en_US",
                    placeholderCount: 0,
                    recipients: recipients,
                    globalError: "Template name is missing on campaign."
                );
            }

            var meta = await _templateFetcher.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);
            if (meta == null)
            {
                return BuildResult(
                    campaignId,
                    templateName,
                    language: "en_US",
                    placeholderCount: 0,
                    recipients: recipients,
                    globalError: $"Template '{templateName}' not found for business."
                );
            }

            var language = (meta.Language ?? "en_US").Trim();
            var placeholderCount = Math.Max(0, meta.PlaceholderCount);

            // Campaign-stored parameters: if supplied, compare counts
            var storedParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);
            bool paramCountMismatch = storedParams.Count > 0 && storedParams.Count != placeholderCount;

            // Validate buttons for dynamic placeholders ({{n}})
            var dynamicButtonIssues = new List<string>();
            var buttonPlaceholdersNeeded = new HashSet<int>();

            foreach (var b in (campaign.MultiButtons ?? Enumerable.Empty<CampaignButton>()))
            {
                var value = b.Value ?? "";
                foreach (Match m in PlaceholderRe.Matches(value))
                {
                    if (int.TryParse(m.Groups[1].Value, out var n))
                    {
                        buttonPlaceholdersNeeded.Add(n);
                    }
                }
            }

            foreach (var n in buttonPlaceholdersNeeded)
            {
                if (storedParams.Count > 0 && (n < 1 || n > storedParams.Count))
                {
                    dynamicButtonIssues.Add($"Button needs placeholder {{%{n}%}} but campaign parameters only provide {storedParams.Count} value(s).");
                }
                if (placeholderCount > 0 && (n < 1 || n > placeholderCount))
                {
                    dynamicButtonIssues.Add($"Button needs placeholder {{%{n}%}} but template defines only {placeholderCount} placeholder(s).");
                }
            }

            // Build per-recipient issues
            var issues = new List<CampaignDryRunIssueDto>();
            foreach (var r in recipients)
            {
                var phone = r.Contact?.PhoneNumber?.Trim();

                if (string.IsNullOrWhiteSpace(phone))
                {
                    issues.Add(new CampaignDryRunIssueDto
                    {
                        RecipientId = r.Id,
                        ContactId = r.ContactId,
                        Phone = phone,
                        Severity = "error",
                        Message = "Phone is missing."
                    });
                }
                else if (!IsLikelyPhone(phone))
                {
                    issues.Add(new CampaignDryRunIssueDto
                    {
                        RecipientId = r.Id,
                        ContactId = r.ContactId,
                        Phone = phone,
                        Severity = "warning",
                        Message = "Phone format looks unusual."
                    });
                }
            }

            // Add global-ish issues once (we‚Äôll attribute them to a null recipient)
            if (paramCountMismatch)
            {
                issues.Add(new CampaignDryRunIssueDto
                {
                    Severity = "warning",
                    Message = $"Placeholder count mismatch: template expects {placeholderCount}, campaign provided {storedParams.Count}.",
                });
            }

            foreach (var bi in dynamicButtonIssues.Distinct())
            {
                issues.Add(new CampaignDryRunIssueDto
                {
                    Severity = "error",
                    Message = bi
                });
            }

            var result = new CampaignDryRunResultDto
            {
                CampaignId = campaignId,
                TemplateName = templateName,
                Language = language,
                PlaceholderCount = placeholderCount,
                CheckedRecipients = recipients.Count,
                Issues = issues,
                ErrorCount = issues.Count(i => string.Equals(i.Severity, "error", StringComparison.OrdinalIgnoreCase)),
                WarningCount = issues.Count(i => string.Equals(i.Severity, "warning", StringComparison.OrdinalIgnoreCase)),
            };

            Log.Information("Dry-run completed for Campaign {CampaignId} (biz {BusinessId}) ‚Üí {Errors} errors, {Warnings} warnings over {Checked} recipients",
                campaignId, businessId, result.ErrorCount, result.WarningCount, result.CheckedRecipients);

            return result;
        }

        private static CampaignDryRunResultDto BuildResult(
            Guid campaignId,
            string templateName,
            string language,
            int placeholderCount,
            List<CampaignRecipient> recipients,
            string globalError)
        {
            var issues = new List<CampaignDryRunIssueDto>
            {
                new CampaignDryRunIssueDto
                {
                    Severity = "error",
                    Message = globalError
                }
            };

            return new CampaignDryRunResultDto
            {
                CampaignId = campaignId,
                TemplateName = templateName,
                Language = language,
                PlaceholderCount = placeholderCount,
                CheckedRecipients = recipients.Count,
                Issues = issues,
                ErrorCount = issues.Count,
                WarningCount = 0
            };
        }

        private static bool IsLikelyPhone(string? s)
        {
            if (string.IsNullOrWhiteSpace(s)) return false;
            var digits = s.Count(char.IsDigit);
            return digits >= 10 && digits <= 15;
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignMaterializationService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.WhatsAppSettings.Services; // ensure namespace matches your project
using xbytechat.api.Features.MessageManagement.Services;
using xbytechat_api.WhatsAppSettings.Services;
using xbytechat.api.Features.Tracking.Services;
using xbytechat.api.WhatsAppSettings.DTOs; // IUrlBuilderService

namespace xbytechat.api.Features.CampaignModule.Services
{
    

    /// <summary>
    /// Read-only ‚Äúcompiler‚Äù that materializes template params and button URLs per recipient.
    /// Mirrors the live send behavior (no dispatch, no DB writes).
    /// </summary>
    public sealed class CampaignMaterializationService : ICampaignMaterializationService
    {
        private readonly AppDbContext _db;
        private readonly IWhatsAppTemplateFetcherService _templateFetcher;
        private readonly IUrlBuilderService _urlBuilderService;

        private static readonly Regex PlaceholderRe = new(@"\{\{\s*(\d+)\s*\}\}", RegexOptions.Compiled);

        public CampaignMaterializationService(
            AppDbContext db,
            IWhatsAppTemplateFetcherService templateFetcher,
            IUrlBuilderService urlBuilderService)
        {
            _db = db;
            _templateFetcher = templateFetcher;
            _urlBuilderService = urlBuilderService;
        }

        public async Task<CampaignMaterializeResultDto> MaterializeAsync(
            Guid businessId,
            Guid campaignId,
            int limit = 200,
            CancellationToken ct = default)
        {
            if (businessId == Guid.Empty) throw new UnauthorizedAccessException("Invalid business id.");
            if (campaignId == Guid.Empty) throw new ArgumentException("campaignId is required");
            if (limit <= 0) limit = 200;

            // Load campaign + variable maps + buttons + recipients (+ contacts)
            var campaign = await _db.Campaigns
                .AsNoTracking()
                .Include(c => c.VariableMaps)
                .Include(c => c.MultiButtons)
                .Include(c => c.Recipients).ThenInclude(r => r.Contact)
                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct);

            if (campaign == null)
                throw new KeyNotFoundException("Campaign not found.");

            // Resolve template meta from snapshot/params; fallback to live
            var meta = await ResolveTemplateMetaAsync(campaign, businessId, ct);
            var templateName = meta.TemplateName;
            var language = meta.Language;
            var placeholderCount = meta.PlaceholderCount;

            if (string.IsNullOrWhiteSpace(templateName))
                throw new InvalidOperationException("Campaign does not have a resolvable template name.");

            // Try to fetch provider button meta (for dynamic URL detection & alignment)
            TemplateMetadataDto? liveMeta = null;
            try
            {
                liveMeta = await _templateFetcher.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);
            }
            catch (Exception ex)
            {
                Log.Warning(ex, "Template fetch failed during materialization for {Template}", templateName);
            }

            var result = new CampaignMaterializeResultDto
            {
                CampaignId = campaignId,
                TemplateName = templateName,
                Language = language,
                PlaceholderCount = placeholderCount
            };

            var varMaps = (campaign.VariableMaps ?? new List<CampaignVariableMap>())
                .Where(m => m.CampaignId == campaignId)
                .ToList();

            var recipients = (campaign.Recipients ?? new List<CampaignRecipient>())
                .OrderBy(r => r.UpdatedAt)
                .Take(limit)
                .ToList();

            // order buttons by Position (then by their original index) to align with template button index
            var orderedButtons = (campaign.MultiButtons ?? new List<CampaignButton>())
                .Select((b, idx) => new { Btn = b, idx })
                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)
                .ThenBy(x => x.idx)
                .Select(x => x.Btn)
                .ToList();

            foreach (var r in recipients)
            {
                var row = new MaterializedRecipientDto
                {
                    RecipientId = r.Id,
                    ContactId = r.ContactId,
                    Phone = NormalizePhone(r?.Contact?.PhoneNumber)
                };

                // Parameters 1..N via variable maps (Static/Default/Expression placeholder)
                for (int idx = 1; idx <= placeholderCount; idx++)
                {
                    var map = varMaps.FirstOrDefault(m => m.Index == idx);
                    if (map == null)
                    {
                        row.Parameters.Add(new TemplateParamResolutionDto
                        {
                            Index = idx,
                            Value = null,
                            IsMissing = true,
                            SourceType = "Unmapped",
                            Note = "No variable map for this placeholder."
                        });
                        continue;
                    }

                    var (value, isMissing, note) = ResolveValue(map, r);
                    row.Parameters.Add(new TemplateParamResolutionDto
                    {
                        Index = idx,
                        Value = value,
                        IsMissing = isMissing,
                        SourceType = map.SourceType ?? string.Empty,
                        SourceKey = map.SourceKey
                    });

                    if (!string.IsNullOrWhiteSpace(note))
                        row.Warnings.Add($"{{{{{idx}}}}}: {note}");
                }

                // Buttons: mirror live send behavior for dynamic URL buttons (index 0..2)
                if (liveMeta?.ButtonParams != null && liveMeta.ButtonParams.Count > 0 && orderedButtons.Count > 0)
                {
                    var total = Math.Min(3, Math.Min(orderedButtons.Count, liveMeta.ButtonParams.Count));

                    for (int i = 0; i < total; i++)
                    {
                        var metaBtn = liveMeta.ButtonParams[i];
                        var subType = (metaBtn.SubType ?? "url").ToLowerInvariant();
                        var metaParam = metaBtn.ParameterValue?.Trim();

                        var br = new ButtonResolutionDto
                        {
                            ButtonText = orderedButtons[i]?.Title ?? string.Empty,
                            RawTemplateValue = orderedButtons[i]?.Value
                        };

                        // We only handle dynamic URL buttons here (consistent with send logic)
                        if (!string.Equals(subType, "url", StringComparison.OrdinalIgnoreCase))
                        {
                            br.Notes.Add("Non-URL button (no dynamic resolution).");
                            row.Buttons.Add(br);
                            continue;
                        }

                        var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains("{{");
                        if (!isDynamic)
                        {
                            br.Notes.Add("Static URL button (no parameters required by template).");
                            row.Buttons.Add(br);
                            continue;
                        }

                        var btn = orderedButtons[i];
                        var btnType = (btn?.Type ?? "URL").ToUpperInvariant();
                        if (!string.Equals(btnType, "URL", StringComparison.OrdinalIgnoreCase))
                        {
                            br.Notes.Add($"Template expects a dynamic URL at index {i}, but campaign button type is '{btn?.Type}'.");
                            row.Buttons.Add(br);
                            continue;
                        }

                        var valueRaw = btn?.Value?.Trim();
                        if (string.IsNullOrWhiteSpace(valueRaw))
                        {
                            br.Notes.Add($"Template requires a dynamic URL at index {i}, but campaign button value is empty.");
                            br.MissingArguments.Add("{{1}}");
                            row.Buttons.Add(br);
                            continue;
                        }

                        // optional phone substitution into destination
                        var phone = row.Phone ?? "";
                        var encodedPhone = Uri.EscapeDataString(phone);

                        var resolvedDestination = valueRaw.Contains("{{1}}")
                            ? valueRaw.Replace("{{1}}", encodedPhone)
                            : valueRaw;

                        // normalize/validate URL (allow tel:, wa:, wa.me links)
                        try
                        {
                            resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn!.Title ?? $"Button {i + 1}", i);
                        }
                        catch (Exception ex)
                        {
                            br.Notes.Add($"Destination invalid: {ex.Message}");
                            row.Buttons.Add(br);
                            continue;
                        }

                        // Build both styles and pick based on template absolute base rule
                        var fakeSendLogId = Guid.NewGuid(); // preview-only tokenization
                        var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(
                            fakeSendLogId, i, btn!.Title, resolvedDestination);

                        var tokenParam = BuildTokenParam(fakeSendLogId, i, btn.Title, resolvedDestination);

                        var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);
                        var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;

                        br.UsedPlaceholders.Add("{{1}}"); // meta indicates dynamic
                        br.ResolvedUrl = valueToSend;
                        row.Buttons.Add(br);
                    }
                }
                else
                {
                    // no dynamic buttons in template
                }

                // Basic phone sanity
                if (string.IsNullOrWhiteSpace(row.Phone))
                    row.Errors.Add("Phone is missing.");
                else if (!IsLikelyPhone(row.Phone))
                    row.Warnings.Add("Phone format looks unusual.");

                result.Rows.Add(row);
            }

            result.ReturnedCount = result.Rows.Count;
            result.ErrorCount = result.Rows.Sum(r => r.Errors.Count);
            result.WarningCount = result.Rows.Sum(r => r.Warnings.Count)
                                  + result.Rows.Sum(r => r.Parameters.Count(p => p.IsMissing));

            Log.Information("Campaign materialization computed {@Summary}",
                new
                {
                    campaignId,
                    businessId,
                    result.ReturnedCount,
                    result.ErrorCount,
                    result.WarningCount,
                    result.PlaceholderCount,
                    result.TemplateName,
                    result.Language
                });

            return result;
        }

        // --- Helpers (mirror your send logic where relevant) ---

        private static (string? value, bool isMissing, string? note) ResolveValue(
            CampaignVariableMap map,
            CampaignRecipient recipient)
        {
            var source = (map.SourceType ?? "").Trim();

            switch (source)
            {
                case "Static":
                    {
                        var v = map.StaticValue;
                        var missing = string.IsNullOrWhiteSpace(v) && map.IsRequired;
                        return (v, missing, missing ? "Required static value missing." : null);
                    }

                case "Expression":
                    {
                        // no eval engine; use DefaultValue if provided
                        var v = map.DefaultValue;
                        var note = "Expression present; no evaluation engine configured. Used DefaultValue.";
                        var missing = string.IsNullOrWhiteSpace(v) && map.IsRequired;
                        return (v, missing, missing ? "Required expression result missing (no default provided)." : note);
                    }

                case "AudienceColumn":
                    {
                        // Current CampaignRecipient shape doesn't carry Audience/CSV row data.
                        // If you later link AudienceMember.AttributesJson here, resolve from it.
                        var v = map.DefaultValue;
                        var missing = string.IsNullOrWhiteSpace(v) && map.IsRequired;
                        return (v, missing, "Audience/CSV source not available on CampaignRecipient; used DefaultValue.");
                    }

                default:
                    {
                        var v = map.DefaultValue;
                        var missing = string.IsNullOrWhiteSpace(v) && map.IsRequired;
                        return (v, missing, missing ? "Unrecognized mapping type and no default." : "Unrecognized mapping type; used DefaultValue.");
                    }
            }
        }

        private static string NormalizePhone(string? raw)
        {
            if (string.IsNullOrWhiteSpace(raw)) return "";
            var p = raw.Trim();
            if (!p.StartsWith("+")) p = "+" + new string(p.Where(char.IsDigit).ToArray());
            return p;
        }

        private static bool IsLikelyPhone(string? s)
        {
            if (string.IsNullOrWhiteSpace(s)) return false;
            var digits = s.Count(char.IsDigit);
            return digits >= 10 && digits <= 15;
        }

        private static string NormalizeAbsoluteUrlOrThrowForButton(string input, string buttonTitle, int buttonIndex)
        {
            if (string.IsNullOrWhiteSpace(input))
                throw new ArgumentException($"Destination is required for button '{buttonTitle}' (index {buttonIndex}).");

            var cleaned = new string(input.Trim().Where(c => !char.IsControl(c)).ToArray());
            if (cleaned.Length == 0)
                throw new ArgumentException($"Destination is required for button '{buttonTitle}' (index {buttonIndex}).");

            // Accept tel: / wa: / wa.me deep links
            if (cleaned.StartsWith("tel:", StringComparison.OrdinalIgnoreCase) ||
                cleaned.StartsWith("wa:", StringComparison.OrdinalIgnoreCase) ||
                cleaned.StartsWith("https://wa.me/", StringComparison.OrdinalIgnoreCase))
            {
                return cleaned;
            }

            if (Uri.TryCreate(cleaned, UriKind.Absolute, out var uri) &&
                (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||
                 uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase)))
            {
                return uri.ToString();
            }

            throw new ArgumentException(
                $"Destination must be an absolute http/https/tel/wa URL for button '{buttonTitle}' (index {buttonIndex}). Got: '{input}'");
        }

        private static bool LooksLikeAbsoluteBaseUrlWithPlaceholder(string? templateUrl)
        {
            if (string.IsNullOrWhiteSpace(templateUrl)) return false;
            var s = templateUrl.Trim();
            if (!s.Contains("{{")) return false;
            var probe = s.Replace("{{1}}", "x").Replace("{{0}}", "x");
            return Uri.TryCreate(probe, UriKind.Absolute, out var abs) &&
                   (abs.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||
                    abs.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase));
        }

        private string BuildTokenParam(Guid campaignSendLogId, int buttonIndex, string? buttonTitle, string destinationUrlAbsolute)
        {
            var full = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, buttonIndex, buttonTitle, destinationUrlAbsolute);
            var pos = full.LastIndexOf("/r/", StringComparison.OrdinalIgnoreCase);
            return (pos >= 0) ? full[(pos + 3)..] : full;
        }

        private sealed record ResolvedTemplateMeta(string TemplateName, string Language, int PlaceholderCount);

        // ...inside CampaignMaterializationService class

        private static int CountPlaceholders(string? text)
        {
            if (string.IsNullOrWhiteSpace(text)) return 0;
            // matches {{1}}, {{ 2 }}, etc.
            return Regex.Matches(text, @"\{\{\s*\d+\s*\}\}").Count;
        }

        private async Task<ResolvedTemplateMeta> ResolveTemplateMetaAsync(
            Campaign campaign,
            Guid businessId,
            CancellationToken ct)
        {
            string templateName = string.Empty;
            string language = "en";
            int placeholderCount = 0;

            // 1) Snapshot first (if stored)
            if (!string.IsNullOrWhiteSpace(campaign.TemplateSchemaSnapshot))
            {
                try
                {
                    using var doc = JsonDocument.Parse(campaign.TemplateSchemaSnapshot);
                    var root = doc.RootElement;

                    if (root.TryGetProperty("name", out var n) && n.ValueKind == JsonValueKind.String)
                        templateName = n.GetString() ?? string.Empty;

                    if (root.TryGetProperty("language", out var l) && l.ValueKind == JsonValueKind.String)
                        language = l.GetString() ?? "en";

                    if (root.TryGetProperty("placeholderCount", out var pc) && pc.TryGetInt32(out var snapCount))
                        placeholderCount = snapCount;
                }
                catch { /* non-fatal */ }
            }

            // 2) Prefer stored TemplateParameters count if present
            if (!string.IsNullOrWhiteSpace(campaign.TemplateParameters))
            {
                try
                {
                    var arr = JsonSerializer.Deserialize<List<string>>(campaign.TemplateParameters) ?? new();
                    placeholderCount = Math.Max(placeholderCount, arr.Count);
                }
                catch { /* ignore bad param JSON */ }
            }

            // 3) If name still missing, use MessageTemplate as canonical name (fall back to TemplateId)
            if (string.IsNullOrWhiteSpace(templateName))
                templateName = campaign.MessageTemplate ?? campaign.TemplateId ?? string.Empty;

            // 4) Fallback to live metadata if essentials missing
            if (placeholderCount <= 0 || string.IsNullOrWhiteSpace(templateName))
            {
                try
                {
                    var live = await _templateFetcher.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);
                    if (live != null)
                    {
                        if (string.IsNullOrWhiteSpace(templateName) && !string.IsNullOrWhiteSpace(live.Name))
                            templateName = live.Name!;
                        if (!string.IsNullOrWhiteSpace(live.Language))
                            language = live.Language!;

                        // Your TemplateMetadataDto exposes PlaceholderCount and Body (no .Parameters)
                        var liveCount = live.PlaceholderCount > 0
                            ? live.PlaceholderCount
                            : CountPlaceholders(live.Body);

                        placeholderCount = Math.Max(placeholderCount, liveCount);
                    }
                }
                catch (Exception ex)
                {
                    Log.Warning(ex, "Live template meta fetch failed for {Template}/{Lang}", templateName, language);
                }
            }

            if (string.IsNullOrWhiteSpace(language)) language = "en";
            if (placeholderCount < 0) placeholderCount = 0;

            return new ResolvedTemplateMeta(templateName, language, placeholderCount);
        }

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignMaterializer.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Helpers;
using xbytechat.api.Features.CampaignModule.Models;

namespace xbytechat.api.Features.CampaignModule.Services
{
    /// <summary>
    /// CSV-based materializer:
    /// - Dry-run: validates + resolves variables/phones (no writes)
    /// - Persist: creates Audience + AudienceMembers + CampaignRecipients with
    ///   ResolvedParametersJson, ResolvedButtonUrlsJson, IdempotencyKey, MaterializedAt.
    /// </summary>
    public sealed class CampaignMaterializer : ICampaignMaterializer
    {
        private readonly AppDbContext _db;
        private readonly IVariableResolver _resolver;

        // Common phone header candidates (case-insensitive)
        private static readonly string[] PhoneHeaderCandidates =
        {
            "phone", "mobile", "whatsapp", "msisdn", "whatsapp_number", "contact", "contact_number"
        };

        public CampaignMaterializer(AppDbContext db, IVariableResolver resolver)
        {
            _db = db;
            _resolver = resolver;
        }
        // === NEW: infer mappings when FE did not send or sent partial mappings =========
        private static Dictionary<string, string> BuildAutoMappingsFromRow(
            IDictionary<string, string> rowDict,
            int requiredBodySlots // 0 if unknown
        )
        {
            // We will map to the variable keys your IVariableResolver expects:
            //  - "{{1}}" -> CSV column name
            //  - "header.text_paramN" -> CSV column
            //  - "buttonN.url_param"  -> CSV column
            var map = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            // 1) body: parameter1..N  -> {{1}}..{{N}}
            // If N unknown, infer by scanning parameter\d+ in row headers
            int n = requiredBodySlots > 0
                ? requiredBodySlots
                : rowDict.Keys.Select(k =>
                {
                    var m = System.Text.RegularExpressions.Regex.Match(k, @"^parameter(\d+)$", RegexOptions.IgnoreCase);
                    return m.Success ? int.Parse(m.Groups[1].Value) : 0;
                }).DefaultIfEmpty(0).Max();

            for (int i = 1; i <= n; i++)
            {
                var csvHeader = rowDict.Keys.FirstOrDefault(k => string.Equals(k, $"parameter{i}", StringComparison.OrdinalIgnoreCase));
                if (!string.IsNullOrWhiteSpace(csvHeader))
                    map[$"{{{{{i}}}}}"] = csvHeader; // -> {{i}}
            }

            // 2) header text variables: headerparaN -> header.text_paramN
            foreach (var kv in rowDict)
            {
                var m = System.Text.RegularExpressions.Regex.Match(kv.Key, @"^headerpara(\d+)$", RegexOptions.IgnoreCase);
                if (m.Success)
                {
                    var slot = int.Parse(m.Groups[1].Value);
                    map[$"header.text_param{slot}"] = kv.Key;
                }
            }

            // 3) dynamic URL buttons: buttonparaN -> buttonN.url_param
            foreach (var kv in rowDict)
            {
                var m = System.Text.RegularExpressions.Regex.Match(kv.Key, @"^buttonpara(\d+)$", RegexOptions.IgnoreCase);
                if (m.Success)
                {
                    var pos = int.Parse(m.Groups[1].Value);
                    if (pos >= 1 && pos <= 3)
                        map[$"button{pos}.url_param"] = kv.Key;
                }
            }

            return map;
        }

        // === NEW: read the template‚Äôs body placeholder count for strict enforcement ====
        private async Task<int> GetRequiredBodySlotsAsync(Guid businessId, Guid campaignId, CancellationToken ct)
        {
            // Try reading campaign -> template name and then WhatsAppTemplates.PlaceholderCount
            var data = await _db.Campaigns
                .AsNoTracking()
                .Where(c => c.Id == campaignId && c.BusinessId == businessId)
                .Select(c => new { c.MessageTemplate, c.TemplateId })
                .FirstOrDefaultAsync(ct);

            var templateName = !string.IsNullOrWhiteSpace(data?.TemplateId)
                ? data!.TemplateId!
                : (data?.MessageTemplate ?? string.Empty);

            if (string.IsNullOrWhiteSpace(templateName))
                return 0;

            // Use the most recent active row
            var tpl = await _db.WhatsAppTemplates
                .AsNoTracking()
                .Where(t => t.BusinessId == businessId && t.IsActive && t.Name == templateName)
                .OrderByDescending(t => t.UpdatedAt > t.CreatedAt ? t.UpdatedAt : t.CreatedAt)
                .FirstOrDefaultAsync(ct);

            return tpl?.PlaceholderCount ?? 0;
        }

        // === NEW: ensure body params are complete; return null when missing ============
        private static string[]? EnsureBodyParamsComplete(string[] bodyParams, int requiredSlots, out List<string> missing)
        {
            missing = new List<string>();
            if (requiredSlots <= 0) return bodyParams; // nothing to enforce

            // Resize to requiredSlots
            var arr = new string[requiredSlots];
            for (int i = 0; i < requiredSlots; i++)
            {
                var v = (i < bodyParams.Length ? bodyParams[i] : string.Empty) ?? string.Empty;
                arr[i] = v;
                if (string.IsNullOrWhiteSpace(v))
                    missing.Add($"{{{{{i + 1}}}}}");
            }

            if (missing.Count > 0)
                return null;

            return arr;
        }

        // File: Features/CampaignModule/Services/CampaignMaterializer.cs
        // Method: CreateAsync(...)
        // NOTE: This version is identical to yours except we pull `requiredBodySlots` ONCE before the foreach.
        //       Everything else remains the same (including the enforcement you added).

        public async Task<CampaignCsvMaterializeResponseDto> CreateAsync(
            Guid businessId,
            Guid campaignId,
            CampaignCsvMaterializeRequestDto request,
            CancellationToken ct = default)
        {
            if (businessId == Guid.Empty) throw new UnauthorizedAccessException("Invalid business id.");
            if (campaignId == Guid.Empty) throw new ArgumentException("Invalid campaign id.");
            if (request is null) throw new ArgumentNullException(nameof(request));
            if (request.CsvBatchId == Guid.Empty) throw new ArgumentException("CsvBatchId is required.");
            if (request.Persist && string.IsNullOrWhiteSpace(request.AudienceName))
                throw new ArgumentException("AudienceName is required when Persist=true.");

            // Campaign ownership check
            var owns = await _db.Campaigns
                .AsNoTracking()
                .AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct);
            if (!owns) throw new UnauthorizedAccessException("Campaign not found or not owned by this business.");

            // Load CSV rows for the batch
            var rowsQuery = _db.CsvRows
                .AsNoTracking()
                .Where(r => r.BusinessId == businessId && r.BatchId == request.CsvBatchId)
                .OrderBy(r => r.RowIndex);

            var totalRows = await rowsQuery.CountAsync(ct);
            var csvRows = (request.Limit.HasValue && request.Limit.Value > 0)
                ? await rowsQuery.Take(request.Limit.Value).ToListAsync(ct)
                : await rowsQuery.ToListAsync(ct);

            var resp = new CampaignCsvMaterializeResponseDto
            {
                CampaignId = campaignId,
                CsvBatchId = request.CsvBatchId,
                TotalRows = totalRows
            };

            // Build header set to help autodetect phone field
            var headerSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            foreach (var r in csvRows)
            {
                foreach (var k in JsonToDict(r.DataJson).Keys)
                    headerSet.Add(k);
            }

            // Mapping precedence: request ‚Üí fallback header==token
            var effectiveMappings = request.Mappings ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            // Determine phone field
            var phoneField = request.PhoneField;
            if (string.IsNullOrWhiteSpace(phoneField))
                phoneField = PhoneHeaderCandidates.FirstOrDefault(headerSet.Contains);

            if (string.IsNullOrWhiteSpace(phoneField))
                resp.Warnings.Add("No phone field provided or detected; rows without phone will be skipped.");

            // üîé Pull required body slots ONCE (avoid N queries)
            var requiredBodySlots = await GetRequiredBodySlotsAsync(businessId, campaignId, ct);

            var seenPhones = new HashSet<string>(StringComparer.Ordinal);
            var preview = resp.Preview; // alias

            foreach (var row in csvRows)
            {
                ct.ThrowIfCancellationRequested();

                var rowDict = JsonToDict(row.DataJson);
                var m = new CsvMaterializedRowDto { RowIndex = row.RowIndex };

                // üß≠ effective mappings: request.Mappings OR auto-infer from row
                var mappingsToUse =
                    (effectiveMappings != null && effectiveMappings.Count > 0)
                        ? new Dictionary<string, string>(effectiveMappings, StringComparer.OrdinalIgnoreCase)
                        : BuildAutoMappingsFromRow(rowDict, requiredBodySlots);

                // Variables for template (canonicalized by resolver)
                m.Variables = _resolver.ResolveVariables(rowDict, mappingsToUse);

                // Phone selection
                string? phone = null;
                if (!string.IsNullOrWhiteSpace(phoneField))
                {
                    rowDict.TryGetValue(phoneField, out phone);
                }
                else
                {
                    foreach (var cand in PhoneHeaderCandidates)
                        if (rowDict.TryGetValue(cand, out phone) && !string.IsNullOrWhiteSpace(phone))
                            break;
                }

                phone = NormalizePhoneMaybe(phone, request.NormalizePhones);
                m.Phone = phone;

                if (string.IsNullOrWhiteSpace(m.Phone))
                {
                    m.Errors.Add("Missing phone");
                    resp.SkippedCount++;
                    continue;
                }

                if (request.Deduplicate && !seenPhones.Add(m.Phone))
                {
                    m.Errors.Add("Duplicate phone (deduped)");
                    resp.SkippedCount++;
                    continue;
                }

                // üîí Enforce required body placeholders BEFORE adding to preview
                var prelimBodyParams = BuildBodyParamArrayFromVariables(
                    m.Variables ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase));

                var enforced = EnsureBodyParamsComplete(prelimBodyParams, requiredBodySlots, out var missingSlots);
                if (enforced == null)
                {
                    // at least one required slot missing ‚Üí skip this row
                    m.Errors.Add($"Missing body parameters: {string.Join(", ", missingSlots)}");
                    resp.SkippedCount++;
                    continue;
                }

                // (Optional) keep for troubleshooting:
                // m.DebugBodyParams = enforced;

                preview.Add(m);
            }

            resp.MaterializedCount = preview.Count;

            // Persist if requested
            if (request.Persist && resp.MaterializedCount > 0)
            {
                var audienceId = await PersistAudienceAndRecipientsAsync(
                    businessId, campaignId, request.AudienceName!, preview, ct);

                resp.AudienceId = audienceId;
            }

            return resp;
        }



        // ---------- Persistence ----------
        // NEW: reusable helper (body {{n}} ‚Üí string[])
        // NEW: reusable helper (body {{n}} / parameterN / body.N ‚Üí string[])
        private static string[] BuildBodyParamArrayFromVariables(IDictionary<string, string> vars)
        {
            var pairs = new List<(int idx, string val)>();

            foreach (var kv in vars)
            {
                var k = kv.Key ?? string.Empty;
                var v = kv.Value ?? string.Empty;

                // 1) body.N
                if (k.StartsWith("body.", StringComparison.OrdinalIgnoreCase))
                {
                    if (int.TryParse(k.AsSpan("body.".Length), out var n) && n > 0)
                        pairs.Add((n, v));
                    continue;
                }

                // 2) parameterN (FE mapping keys)
                if (k.StartsWith("parameter", StringComparison.OrdinalIgnoreCase))
                {
                    if (int.TryParse(k.AsSpan("parameter".Length), out var n) && n > 0)
                        pairs.Add((n, v));
                    continue;
                }

                // 3) {{N}} (auto-mapper tokens)
                // match exactly {{  number  }}
                var m = System.Text.RegularExpressions.Regex.Match(k, @"^\{\{\s*(\d+)\s*\}\}$");
                if (m.Success && int.TryParse(m.Groups[1].Value, out var t) && t > 0)
                {
                    pairs.Add((t, v));
                    continue;
                }
            }

            if (pairs.Count == 0) return Array.Empty<string>();

            var max = pairs.Max(p => p.idx);
            var arr = new string[max];
            for (int i = 0; i < max; i++) arr[i] = string.Empty;
            foreach (var (idx, val) in pairs) arr[idx - 1] = val ?? string.Empty;
            return arr;
        }

        // CampaignMaterializer.cs  ‚Äî replace the whole method
        private async Task<Guid> PersistAudienceAndRecipientsAsync(
            Guid businessId,
            Guid campaignId,
            string audienceName,
            List<CsvMaterializedRowDto> rows,
            CancellationToken ct)
        {
            await using var tx = await _db.Database.BeginTransactionAsync(ct);
            try
            {
                var now = DateTime.UtcNow;

                var audience = new Audience
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    Name = audienceName,
                    CreatedAt = now,
                    UpdatedAt = now
                };
                _db.Audiences.Add(audience);

                // --- local helpers --------------------------------------------------
                static string[] BuildBodyParamArray(IDictionary<string, string> vars)
                {
                    // Accept both "body.N" and "parameterN"
                    var pairs = new List<(int idx, string val)>();

                    foreach (var kv in vars)
                    {
                        var k = kv.Key;

                        // body.N
                        if (k.StartsWith("body.", StringComparison.OrdinalIgnoreCase))
                        {
                            if (int.TryParse(k.AsSpan("body.".Length), out var n) && n > 0)
                                pairs.Add((n, kv.Value ?? string.Empty));
                            continue;
                        }

                        // parameterN (compat)
                        if (k.StartsWith("parameter", StringComparison.OrdinalIgnoreCase))
                        {
                            if (int.TryParse(k.AsSpan("parameter".Length), out var n) && n > 0)
                                pairs.Add((n, kv.Value ?? string.Empty));
                        }
                    }

                    if (pairs.Count == 0) return Array.Empty<string>();

                    var max = pairs.Max(p => p.idx);
                    var arr = new string[max];
                    for (int i = 0; i < max; i++) arr[i] = string.Empty;
                    foreach (var (idx, val) in pairs) arr[idx - 1] = val ?? string.Empty;
                    return arr;
                }

                static Dictionary<string, string> BuildHeaderAndButtonVars(IDictionary<string, string> vars)
                {
                    // We store non-body keys in ResolvedButtonUrlsJson (generic bag):
                    // - header.image_url / header.video_url / header.document_url
                    // - header.text.N
                    // - button{1..3}.url_param
                    var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

                    foreach (var kv in vars)
                    {
                        var k = kv.Key;
                        var v = kv.Value ?? string.Empty;

                        // header media urls
                        if (k.StartsWith("header.", StringComparison.OrdinalIgnoreCase) &&
                           (k.EndsWith("_url", StringComparison.OrdinalIgnoreCase) ||
                            k.EndsWith(".url", StringComparison.OrdinalIgnoreCase)))
                        {
                            dict[k] = v;
                            continue;
                        }

                        // header text placeholders: header.text.N
                        if (k.StartsWith("header.text.", StringComparison.OrdinalIgnoreCase))
                        {
                            var tail = k.Substring("header.text.".Length);
                            if (int.TryParse(tail, out var n) && n > 0)
                                dict[k] = v;
                            continue;
                        }

                        // URL button param variants ‚Üí normalize to .url_param
                        if (k.StartsWith("button", StringComparison.OrdinalIgnoreCase))
                        {
                            var normKey = k
                                .Replace(".url.param", ".url_param", StringComparison.OrdinalIgnoreCase)
                                .Replace(".urlparam", ".url_param", StringComparison.OrdinalIgnoreCase);

                            if (normKey.EndsWith(".url_param", StringComparison.OrdinalIgnoreCase))
                                dict[normKey] = v;
                        }
                    }

                    return dict;
                }
                // --------------------------------------------------------------------

                foreach (var r in rows)
                {
                    if (string.IsNullOrWhiteSpace(r.Phone))
                        continue; // safety; missing phone rows were already filtered

                    // Try to link to an existing Contact by normalized phone
                    Guid? contactId = await _db.Contacts
                        .Where(c => c.BusinessId == businessId && c.PhoneNumber == r.Phone)
                        .Select(c => (Guid?)c.Id)
                        .FirstOrDefaultAsync(ct);

                    var variables = r.Variables ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

                    // Keep full variable map on AudienceMember for export/debug
                    var attributesJson = JsonSerializer.Serialize(variables);

                    // Shapes expected by sender:
                    var bodyParams = BuildBodyParamArray(variables);            // string[] for {{1}}..{{N}}
                    var headerAndButtons = BuildHeaderAndButtonVars(variables); // dict for header.* + button*.url_param

                    var resolvedParamsJson = JsonSerializer.Serialize(bodyParams);
                    var resolvedButtonsJson = JsonSerializer.Serialize(headerAndButtons);

                    // Idempotency: include both body params and header/button vars
                    var idemPayload = JsonSerializer.Serialize(new { p = bodyParams, b = headerAndButtons });
                    var idempotencyKey = ComputeIdempotencyKey(campaignId, r.Phone, idemPayload);

                    var member = new AudienceMember
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = businessId,
                        AudienceId = audience.Id,
                        ContactId = contactId,                 // stays null if no match
                        PhoneE164 = r.Phone,                   // normalized earlier
                        AttributesJson = attributesJson,
                        IsTransientContact = !contactId.HasValue,
                        CreatedAt = now,
                        UpdatedAt = now
                    };
                    _db.AudiencesMembers.Add(member);

                    var recipient = new CampaignRecipient
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = businessId,
                        CampaignId = campaignId,
                        AudienceMemberId = member.Id,
                        IdempotencyKey = idempotencyKey,
                        ResolvedParametersJson = resolvedParamsJson,   // string[] (body)
                        ResolvedButtonUrlsJson = resolvedButtonsJson,  // dict (header + buttons)
                        MaterializedAt = now,
                        Status = "Pending",
                        UpdatedAt = now
                    };

                    if (contactId.HasValue)
                        recipient.ContactId = contactId.Value;

                    _db.CampaignRecipients.Add(recipient);
                }

                await _db.SaveChangesAsync(ct);
                await tx.CommitAsync(ct);
                return audience.Id;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Materialize persist failed");
                await tx.RollbackAsync(ct);
                throw;
            }
        }


        // ---------- Utils ----------
        private static Dictionary<string, string> JsonToDict(string? json)
        {
            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            if (string.IsNullOrWhiteSpace(json)) return dict;

            using var doc = JsonDocument.Parse(json);
            if (doc.RootElement.ValueKind != JsonValueKind.Object) return dict;
            foreach (var p in doc.RootElement.EnumerateObject())
                dict[p.Name] = p.Value.ValueKind == JsonValueKind.Null ? "" : p.Value.ToString();

            return dict;
        }

        private static string? NormalizePhoneMaybe(string? raw, bool normalize)
        {
            if (string.IsNullOrWhiteSpace(raw)) return null;
            var trimmed = raw.Trim();
            if (!normalize) return trimmed;

            // naive E.164-lite cleanup; swap for your real normalizer later
            var digits = Regex.Replace(trimmed, "[^0-9]", "");
            digits = digits.TrimStart('0');

            // Heuristic for India: add 91 if 10-digit local
            if (digits.Length == 10) digits = "91" + digits;

            return digits.Length >= 10 ? digits : trimmed;
        }

        private static string ComputeIdempotencyKey(Guid campaignId, string phone, string parametersJson)
        {
            var raw = $"{campaignId}|{phone}|{parametersJson}";
            using var sha = SHA256.Create();
            var bytes = sha.ComputeHash(Encoding.UTF8.GetBytes(raw));
            return Convert.ToHexString(bytes);
        }
    }
}



 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignPreviewService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Serilog; // ‚úÖ use Serilog like the rest of your services
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.Helpers;
using xbytechat.api.WhatsAppSettings.DTOs;
using xbytechat_api.WhatsAppSettings.Services;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.Tracking.Services;
using xbytechat.api.Shared.utility;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICampaignPreviewService
    {
        Task<CampaignPreviewResponseDto> PreviewAsync(Guid businessId, Guid campaignId, Guid? contactId);
    }

    public class CampaignPreviewService : ICampaignPreviewService
    {
        private readonly AppDbContext _db;
        private readonly IWhatsAppTemplateFetcherService _templateFetcher;
        private readonly IUrlBuilderService _urlBuilder;

        public CampaignPreviewService(
            AppDbContext db,
            IWhatsAppTemplateFetcherService templateFetcher,
            IUrlBuilderService urlBuilder)
        {
            _db = db;
            _templateFetcher = templateFetcher;
            _urlBuilder = urlBuilder;
        }

        public async Task<CampaignPreviewResponseDto> PreviewAsync(Guid businessId, Guid campaignId, Guid? contactId)
        {
            try
            {
                Log.Information("üß™ Preview start | biz={BusinessId} campaign={CampaignId} contactId={ContactId}",
                    businessId, campaignId, contactId);

                var campaign = await _db.Campaigns
                    .Include(c => c.MultiButtons)
                    .Include(c => c.Recipients).ThenInclude(r => r.Contact)
                    .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);

                if (campaign == null)
                {
                    Log.Warning("‚ùå Preview aborted: campaign not found | biz={BusinessId} campaign={CampaignId}",
                        businessId, campaignId);
                    throw new InvalidOperationException("Campaign not found.");
                }

                // Resolve template name (respect flow entry if any)
                var templateName = await ResolveStartTemplateName(businessId, campaign);
                Log.Information("üîé Preview resolved template | campaign={CampaignId} template={TemplateName}",
                    campaign.Id, templateName);

                // Fetch template meta (body/buttons/lang/header)
                var meta = await _templateFetcher.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);
                if (meta == null)
                {
                    Log.Warning("‚ùå Preview aborted: template metadata not found | biz={BusinessId} template={TemplateName}",
                        businessId, templateName);
                    throw new InvalidOperationException("Template metadata not found.");
                }

                // Prepare parameters/body
                var parsedParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);
                var body = meta.Body ?? campaign.MessageTemplate ?? string.Empty;
                var bodyPreview = TemplateParameterHelper.FillPlaceholders(body, parsedParams);

                // Compute missing params (simple check: count vs supplied)
                var missing = new List<string>();
                if (meta.PlaceholderCount > 0)
                {
                    var supplied = parsedParams?.Count ?? 0;
                    if (supplied < meta.PlaceholderCount)
                    {
                        for (int i = supplied + 1; i <= meta.PlaceholderCount; i++)
                            missing.Add($"{{{{{i}}}}} parameter is missing");

                        Log.Warning("‚ö†Ô∏è Preview found missing params | campaign={CampaignId} required={Required} supplied={Supplied}",
                            campaign.Id, meta.PlaceholderCount, supplied);
                    }
                }

                // Choose contact for dynamic phone substitutions
                var contact = await PickContactAsync(campaign, contactId);

                // Buttons preview
                var buttons = BuildButtonsPreview(campaign, meta, contact);

                var result = new CampaignPreviewResponseDto
                {
                    CampaignId = campaign.Id,
                    TemplateName = templateName,
                    Language = meta.Language ?? "en_US",
                    PlaceholderCount = meta.PlaceholderCount,
                    BodyPreview = bodyPreview,
                    MissingParams = missing,
                    HasHeaderMedia = meta.HasImageHeader,
                    HeaderType = meta.HasImageHeader ? "IMAGE" : null,
                    Buttons = buttons
                };

                Log.Information("‚úÖ Preview ready | campaign={CampaignId} template={TemplateName} placeholders={Count}",
                    campaign.Id, templateName, meta.PlaceholderCount);

                return result;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "üö® Preview failed | biz={BusinessId} campaign={CampaignId}", businessId, campaignId);
                throw; // let controller shape the HTTP response (keeps consistency with your pattern)
            }
        }

        // ---------- helpers ----------

        private async Task<string> ResolveStartTemplateName(Guid businessId, Campaign campaign)
        {
            string selected = campaign.TemplateId ?? campaign.MessageTemplate ?? string.Empty;
            if (!campaign.CTAFlowConfigId.HasValue || campaign.CTAFlowConfigId.Value == Guid.Empty)
                return selected;

            var flow = await _db.CTAFlowConfigs
                .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)
                .FirstOrDefaultAsync(f => f.Id == campaign.CTAFlowConfigId.Value
                                        && f.BusinessId == businessId
                                        && f.IsActive);

            if (flow == null || flow.Steps == null || flow.Steps.Count == 0)
                return selected;

            var incoming = new HashSet<Guid>(flow.Steps
                .SelectMany(s => s.ButtonLinks)
                .Where(l => l.NextStepId.HasValue)
                .Select(l => l.NextStepId!.Value));

            var entry = flow.Steps.OrderBy(s => s.StepOrder)
                                  .FirstOrDefault(s => !incoming.Contains(s.Id));

            return string.IsNullOrWhiteSpace(entry?.TemplateToSend) ? selected : entry!.TemplateToSend!;
        }

        private async Task<Contact?> PickContactAsync(Campaign campaign, Guid? requestedContactId)
        {
            if (requestedContactId.HasValue)
            {
                var specific = campaign.Recipients?.FirstOrDefault(r => r.ContactId == requestedContactId)?.Contact;
                if (specific != null) return specific;

                // allow direct lookup if not in recipients yet
                return await _db.Contacts.FirstOrDefaultAsync(c =>
                    c.Id == requestedContactId.Value && c.BusinessId == campaign.BusinessId);
            }

            // fallback: first recipient‚Äôs contact
            return campaign.Recipients?.FirstOrDefault()?.Contact;
        }

        private List<ButtonPreviewDto> BuildButtonsPreview(Campaign campaign, TemplateMetadataDto meta, Contact? contact)
        {
            var result = new List<ButtonPreviewDto>();
            var campaignButtons = campaign.MultiButtons?
                .OrderBy(b => b.Position)
                .Take(3)
                .ToList() ?? new List<CampaignButton>();

            var templateButtons = meta.ButtonParams ?? new List<ButtonMetadataDto>();
            var total = Math.Min(3, Math.Min(campaignButtons.Count, templateButtons.Count));

            for (int i = 0; i < total; i++)
            {
                var tplBtn = templateButtons[i];
                var campBtn = campaignButtons[i];

                var subType = (tplBtn.SubType ?? "url").ToLowerInvariant();
                var baseParam = tplBtn.ParameterValue?.Trim();
                var isDynamic = subType == "url" && !string.IsNullOrWhiteSpace(baseParam) && baseParam.Contains("{{");

                string? token = null;
                string? previewUrl = null;
                string? campaignValue = campBtn.Value?.Trim();

                if (isDynamic && string.IsNullOrWhiteSpace(campaignValue))
                {
                    Log.Warning("‚ö†Ô∏è Preview: dynamic URL button without campaign value | campaign={CampaignId} idx={Index} label={Label}",
                        campaign.Id, i, tplBtn.Text ?? campBtn.Title ?? "");
                }

                if (isDynamic && !string.IsNullOrWhiteSpace(campaignValue))
                {
                    // optional phone substitution
                    var phone = NormalizePhone(contact?.PhoneNumber);
                    var replaced = campaignValue.Contains("{{1}}")
                        ? campaignValue.Replace("{{1}}", Uri.EscapeDataString(phone ?? ""))
                        : campaignValue;

                    // Build tracked URL using a synthetic id (only for preview)
                    var fakeLogId = Guid.NewGuid();
                    var tracked = _urlBuilder.BuildTrackedButtonUrl(fakeLogId, i, campBtn.Title, NormalizeAbsoluteUrl(replaced));
                    previewUrl = tracked;

                    // extract token after "/r/"
                    token = ExtractToken(tracked);
                }

                result.Add(new ButtonPreviewDto
                {
                    Index = i,
                    Text = tplBtn.Text ?? campBtn.Title ?? "",
                    Type = tplBtn.Type ?? "URL",
                    IsDynamic = isDynamic,
                    TemplateParamBase = baseParam,
                    CampaignValue = campaignValue,
                    TokenParam = token,
                    FinalUrlPreview = previewUrl
                });
            }

            return result;
        }

        private static string? NormalizePhone(string? raw)
        {
            if (string.IsNullOrWhiteSpace(raw)) return null;
            var s = raw.Trim();
            if (!s.StartsWith("+")) s = "+" + new string(s.Where(char.IsDigit).ToArray());
            return s;
        }

        private static string NormalizeAbsoluteUrl(string input)
        {
            // allow tel:/wa: for preview, but tracking expects http(s); if not absolute http(s), keep as-is.
            if (Uri.TryCreate(input, UriKind.Absolute, out var uri) &&
                (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||
                 uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase)))
            {
                return uri.ToString();
            }
            return input;
        }

        private static string? ExtractToken(string fullTrackedUrl)
        {
            var pos = fullTrackedUrl.LastIndexOf("/r/", StringComparison.OrdinalIgnoreCase);
            if (pos < 0) return null;
            var token = fullTrackedUrl[(pos + 3)..];
            return string.IsNullOrWhiteSpace(token) ? null : token;
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignRecipientService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public class CampaignRecipientService : ICampaignRecipientService
    {
        private readonly AppDbContext _context;

        public CampaignRecipientService(AppDbContext context)
        {
            _context = context;
        }

        // üîç Get a single recipient by ID
        public async Task<CampaignRecipientDto?> GetByIdAsync(Guid id)
        {
            return await _context.CampaignRecipients
                .Include(r => r.Contact)
                .Where(r => r.Id == id)
                .Select(r => new CampaignRecipientDto
                {
                    Id = r.Id,
                    ContactId = r.ContactId,
                    ContactName = r.Contact.Name,
                    ContactPhone = r.Contact.PhoneNumber,
                    Status = r.Status,
                    SentAt = r.SentAt
                })
                .FirstOrDefaultAsync();
        }

        // üì¶ Get all recipients of a specific campaign
        public async Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId)
        {
            return await _context.CampaignRecipients
                .Include(r => r.Contact)
                .Where(r => r.CampaignId == campaignId)
                .Select(r => new CampaignRecipientDto
                {
                    Id = r.Id,
                    ContactId = r.ContactId,
                    ContactName = r.Contact.Name,
                    ContactPhone = r.Contact.PhoneNumber,
                    Status = r.Status,
                    SentAt = r.SentAt
                })
                .ToListAsync();
        }

        // ‚úèÔ∏è Update status of a specific recipient
        public async Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus)
        {
            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);
            if (recipient == null) return false;

            recipient.Status = newStatus;
            recipient.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();
            return true;
        }

        // üí¨ Track customer reply or CTA
        // üó£Ô∏è Track customer reply on a recipient
        public async Task<bool> TrackReplyAsync(Guid recipientId, string replyText)
        {
            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);
            if (recipient == null) return false;

            recipient.ClickedCTA = replyText;
            recipient.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();
            return true;
        }


        // üîé Global recipient search across all campaigns
        // üîç Search recipients by optional status or keyword
        public async Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null)
        {
            var query = _context.CampaignRecipients
                .Include(r => r.Contact)
                .AsQueryable();

            if (!string.IsNullOrEmpty(status))
                query = query.Where(r => r.Status == status);

            if (!string.IsNullOrEmpty(keyword))
                query = query.Where(r =>
                    r.Contact.Name.Contains(keyword) ||
                    r.Contact.PhoneNumber.Contains(keyword)
                );

            return await query
                .Select(r => new CampaignRecipientDto
                {
                    Id = r.Id,
                    ContactId = r.ContactId,
                    ContactName = r.Contact.Name,
                    ContactPhone = r.Contact.PhoneNumber,
                    Status = r.Status,
                    SentAt = r.SentAt
                })
                .ToListAsync();
        }

        //public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)
        //{
        //    var campaign = await _context.Campaigns
        //        .AsNoTracking()
        //        .FirstOrDefaultAsync(c => c.Id == campaignId);

        //    if (campaign == null)
        //        throw new Exception("Campaign not found.");

        //    var businessId = campaign.BusinessId;

        //    var existing = await _context.CampaignRecipients
        //        .Where(r => r.CampaignId == campaignId && contactIds.Contains(r.ContactId))
        //        .Select(r => r.ContactId)
        //        .ToListAsync();

        //    var newRecipients = contactIds
        //        .Where(id => !existing.Contains(id))
        //        .Select(contactId => new CampaignRecipient
        //        {
        //            Id = Guid.NewGuid(),
        //            CampaignId = campaignId,
        //            ContactId = contactId,
        //            BusinessId = businessId, // ‚úÖ required
        //            Status = "Pending",
        //            SentAt = DateTime.UtcNow,
        //            UpdatedAt = DateTime.UtcNow,
        //            IsAutoTagged = false
        //        }).ToList();

        //    if (newRecipients.Any())
        //    {
        //        await _context.CampaignRecipients.AddRangeAsync(newRecipients);
        //        await _context.SaveChangesAsync();
        //    }
        //}

        public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)
        {
            var campaign = await _context.Campaigns
                .AsNoTracking()
                .FirstOrDefaultAsync(c => c.Id == campaignId);

            if (campaign == null)
                throw new Exception("Campaign not found.");

            var businessId = campaign.BusinessId;
            var now = DateTime.UtcNow;

            // 1) Sanitize inputs (no duplicates, no Guid.Empty)
            var contactIdsClean = (contactIds ?? new List<Guid>())
                .Where(id => id != Guid.Empty)
                .Distinct()
                .ToList();

            if (contactIdsClean.Count == 0)
                return;

            // 2) Ensure all contacts belong to the same business (tenant safety)
            var validContactIds = await _context.Contacts
                .Where(c => c.BusinessId == businessId && contactIdsClean.Contains(c.Id))
                .Select(c => c.Id)
                .ToListAsync();

            if (validContactIds.Count == 0)
                return;

            // 3) Find existing recipients for this campaign (ContactId is Guid?)
            var existingContactIds = await _context.CampaignRecipients
                .Where(r => r.CampaignId == campaignId
                            && r.ContactId.HasValue
                            && validContactIds.Contains(r.ContactId.Value))
                .Select(r => r.ContactId!.Value) // project to non-nullable Guid
                .ToListAsync();

            // 4) Create recipients only for truly new contacts
            var newContactIds = validContactIds.Except(existingContactIds).ToList();
            if (newContactIds.Count == 0)
                return;

            var newRecipients = newContactIds.Select(contactId => new CampaignRecipient
            {
                Id = Guid.NewGuid(),
                CampaignId = campaignId,
                BusinessId = businessId,
                ContactId = contactId,         // non-null Guid
                Status = "Pending",
                // This is *assignment/materialization*, not send:
                MaterializedAt = now,
                SentAt = null,                 // leave null until actually sent
                UpdatedAt = now,
                IsAutoTagged = false
                // AudienceMemberId/IdempotencyKey/etc. if your flow sets them here
            }).ToList();

            await _context.CampaignRecipients.AddRangeAsync(newRecipients);
            await _context.SaveChangesAsync();
        }


    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignRetryService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;

namespace xbytechat.api.Features.CampaignModule.Services
{
 
    public sealed class CampaignRetryService : ICampaignRetryService
    {
        private readonly AppDbContext _db;
        private readonly CampaignService _campaignService; // use concrete to reach batch method

        public CampaignRetryService(AppDbContext db, ICampaignService campaignService)
        {
            _db = db;
            // We know our concrete implementation exposes the batch entry.
            _campaignService = (CampaignService)campaignService;
        }

        public async Task<CampaignRetryResultDto> RetryFailedAsync(Guid businessId, Guid campaignId, int limit = 200)
        {
            if (businessId == Guid.Empty) throw new UnauthorizedAccessException("Invalid business id.");
            if (campaignId == Guid.Empty) throw new ArgumentException("campaignId is required");
            if (limit <= 0) limit = 200;

            var exists = await _db.Campaigns
                .AsNoTracking()
                .AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId && !c.IsDeleted);
            if (!exists) throw new KeyNotFoundException("Campaign not found.");

            // Most recent log per recipient, keep only those whose latest is Failed
            var failedQuery =
                from log in _db.CampaignSendLogs.AsNoTracking()
                where log.BusinessId == businessId && log.CampaignId == campaignId
                group log by log.RecipientId into g
                let last = g.OrderByDescending(x => x.CreatedAt).First()
                where last.SendStatus == "Failed"
                select new { RecipientId = last.RecipientId }; // <-- Guid (non-nullable)

            var failed = await failedQuery
                .Select(x => x.RecipientId)   // <-- no .Value
                .Distinct()
                .Take(limit)
                .ToListAsync();

            var result = new CampaignRetryResultDto
            {
                CampaignId = campaignId,
                ConsideredFailed = failed.Count
            };

            if (failed.Count == 0)
            {
                result.Note = "No failed recipients found to retry.";
                return result;
            }

            // Filter out recipients whose latest log is Sent (paranoia/safety)
            var latestOkQuery =
                from log in _db.CampaignSendLogs.AsNoTracking()
                where log.BusinessId == businessId && log.CampaignId == campaignId
                group log by log.RecipientId into g
                let last = g.OrderByDescending(x => x.CreatedAt).First()
                where last.SendStatus == "Sent"
                select new { RecipientId = last.RecipientId }; // Guid

            var alreadyOk = await latestOkQuery
                .Select(x => x.RecipientId)
                .ToListAsync();

            var toRetry = failed.Except(alreadyOk).ToList();
            result.Skipped = failed.Count - toRetry.Count;

            if (toRetry.Count == 0)
            {
                result.Note = "All failed recipients appear to have a later successful send.";
                return result;
            }

            // Send the batch via canonical pipeline (freezing + idempotency safeguard)
            var resp = await _campaignService.SendTemplateCampaignBatchAsync(campaignId, toRetry);

            result.Retried = resp.Success ? toRetry.Count : 0;
            result.Note = resp.Success ? "Retry dispatched." : ("Retry failed: " + (resp.Message ?? "Unknown error."));
            result.RecipientIdsSample = toRetry.Take(20).ToList();

            Log.Information("Campaign retry executed {@Retry}", new
            {
                businessId,
                campaignId,
                consideredFailed = result.ConsideredFailed,
                skipped = result.Skipped,
                retried = result.Retried
            });

            return result;
        }

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignService.BatchSend.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.Helpers;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public partial class CampaignService
    {
        /// <summary>
        /// Sends a text/template campaign to a given subset of recipient IDs (batch).
        /// Leverages the same pipeline & idempotency you just implemented.
        /// </summary>
        public async Task<ResponseResult> SendTemplateCampaignBatchAsync(Guid campaignId, IEnumerable<Guid> recipientIds)
        {
            if (campaignId == Guid.Empty) return ResponseResult.ErrorInfo("Invalid campaign id.");
            var ids = recipientIds?.Where(id => id != Guid.Empty).Distinct().ToList() ?? new List<Guid>();
            if (ids.Count == 0) return ResponseResult.ErrorInfo("No recipients to send in this batch.");

            var campaign = await _context.Campaigns
                .Include(c => c.Recipients.Where(r => ids.Contains(r.Id))).ThenInclude(r => r.Contact)
                .Include(c => c.MultiButtons)
                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);

            if (campaign == null) return ResponseResult.ErrorInfo("Campaign not found.");
            if (campaign.Recipients == null || campaign.Recipients.Count == 0)
                return ResponseResult.ErrorInfo("No batch recipients matched this campaign.");

            // Reuse your existing method that sends a single campaign object with its recipients loaded.
            // It already handles: provider resolution, template meta, freezing params/URLs,
            // idempotency key, logs, and billing ingest.
            return await SendTextTemplateCampaignAsync(campaign);
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignService.cs 
====================================================== 
 
Ôªøusing System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.Shared;
using xbytechat.api.Features.CampaignTracking.Models;
using xbytechat.api.Services.Messages.Interfaces;
using xbytechat.api.Features.xbTimeline.Services;
using xbytechat.api.Features.MessagesEngine.DTOs;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat.api.CRM.Dtos;
using xbytechat.api.Helpers;
using xbytechat_api.WhatsAppSettings.Services;
using xbytechat.api.Shared.utility;
using xbytechat.api.WhatsAppSettings.DTOs;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.Tracking.Services;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using Newtonsoft.Json;
using xbytechat.api.WhatsAppSettings.Services;
using xbytechat_api.Features.Billing.Services;
using System.Text.RegularExpressions;
using xbytechat.api.Common.Utils;
using xbytechat.api.Features.TemplateModule.Services;
using System.Linq;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public partial class CampaignService : ICampaignService
    {
        private readonly AppDbContext _context;
        private readonly IMessageService _messageService;
        private readonly IServiceProvider _serviceProvider;
        private readonly ILeadTimelineService _timelineService;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;
        private readonly IUrlBuilderService _urlBuilderService;
        private readonly IWhatsAppSenderService _whisatsAppSenderService;
        private readonly IBillingIngestService _billingIngest;
        // private readonly Serilog.ILogger _logger = Log.ForContext<CampaignService>();

        private readonly ILogger<WhatsAppTemplateService> _logger;
        public CampaignService(AppDbContext context, IMessageService messageService,
                               IServiceProvider serviceProvider,
                               ILeadTimelineService timelineService,
                               IMessageEngineService messageEngineService,
                               IWhatsAppTemplateFetcherService templateFetcherService,
                               IUrlBuilderService urlBuilderService,
                               IWhatsAppSenderService whatsAppSenderService, IBillingIngestService billingIngest,
                               ILogger<WhatsAppTemplateService> logger
                               )
        {
            _context = context;
            _messageService = messageService;
            _serviceProvider = serviceProvider;
            _timelineService = timelineService; // ‚úÖ new
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
            _urlBuilderService = urlBuilderService;
            _whisatsAppSenderService = whatsAppSenderService;
            _billingIngest = billingIngest;
            _logger = logger;

        }


        #region Get All Types of Get and Update and Delete Methods
        // Reads per-recipient variables (header/button canonical keys)
        private static string? ResolvePerRecipientValue(CampaignRecipient r, string key)
        {
            if (string.IsNullOrWhiteSpace(r.ResolvedButtonUrlsJson)) return null;
            try
            {
                var dict = JsonConvert.DeserializeObject<Dictionary<string, string>>(r.ResolvedButtonUrlsJson)
                           ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                return dict.TryGetValue(key, out var v) ? v : null;
            }
            catch { return null; }
        }

        // Returns ordered {{1}}..{{N}} values for a recipient; falls back to campaign snapshot
        private static List<string> BuildBodyParametersForRecipient(Campaign campaign, CampaignRecipient r)
        {
            // Preferred: frozen params on recipient (string[])
            if (!string.IsNullOrWhiteSpace(r.ResolvedParametersJson))
            {
                try
                {
                    var arr = JsonConvert.DeserializeObject<string[]>(r.ResolvedParametersJson);
                    if (arr != null) return arr.ToList();
                }
                catch { /* ignore */ }
            }

            // Fallback: campaign.TemplateParameters (stored as JSON array of strings)
            try
            {
                return TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters).ToList();
            }
            catch
            {
                return new List<string>();
            }
        }

        // Builds canonical dict for header.* and buttonN.url_param with safe fallbacks
        // ‚úÖ Works with your current Campaign model (ImageUrl only). No migration needed.
        private static Dictionary<string, string> BuildButtonParametersForRecipient(Campaign campaign, CampaignRecipient r)
        {
            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            // 1) Recipient-specific vars (from CSV materialization)
            if (!string.IsNullOrWhiteSpace(r.ResolvedButtonUrlsJson))
            {
                try
                {
                    var d = JsonConvert.DeserializeObject<Dictionary<string, string>>(r.ResolvedButtonUrlsJson);
                    if (d != null)
                    {
                        foreach (var kv in d)
                            dict[kv.Key] = kv.Value ?? string.Empty;
                    }
                }
                catch { /* ignore */ }
            }

            // 2) Header fallbacks from campaign (only ImageUrl exists in this branch)
            if (!dict.ContainsKey("header.image_url") && !string.IsNullOrWhiteSpace(campaign.ImageUrl))
                dict["header.image_url"] = campaign.ImageUrl!;

            // NOTE:
            // We do NOT touch header.video_url/header.document_url here,
            // because Campaign.VideoUrl/DocumentUrl do not exist in this branch.

            // 3) Button URL fallbacks from campaign buttons
            if (campaign.MultiButtons != null)
            {
                foreach (var b in campaign.MultiButtons.OrderBy(b => b.Position).Take(3))
                {
                    var key = $"button{b.Position}.url_param";
                    if (!dict.ContainsKey(key) && !string.IsNullOrWhiteSpace(b.Value))
                        dict[key] = b.Value!;
                }
            }

            return dict;
        }

        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId)
        {
            return await _context.Campaigns
                .Where(c => c.BusinessId == businessId)
                .OrderByDescending(c => c.CreatedAt)
                .Select(c => new CampaignSummaryDto
                {
                    Id = c.Id,
                    Name = c.Name,
                    Status = c.Status,
                    ScheduledAt = c.ScheduledAt,
                    CreatedAt = c.CreatedAt,

                })
                .ToListAsync();
        }
        public async Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId)
        {
            var campaign = await _context.Campaigns
                .Include(c => c.Cta)
                .Include(c => c.MultiButtons)
                .Include(c => c.CTAFlowConfig)
                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);

            if (campaign == null) return null;

            return new CampaignDto
            {
                Id = campaign.Id,
                Name = campaign.Name,
                MessageTemplate = campaign.MessageTemplate,
                MessageBody = campaign.MessageBody,
                TemplateId = campaign.TemplateId,
                CampaignType = campaign.CampaignType,
                Status = campaign.Status,
                ImageUrl = campaign.ImageUrl,
                ImageCaption = campaign.ImageCaption,
                CreatedAt = campaign.CreatedAt,
                ScheduledAt = campaign.ScheduledAt,
                CtaId = campaign.CtaId,
                Cta = campaign.Cta == null ? null : new CtaPreviewDto
                {
                    Title = campaign.Cta.Title,
                    ButtonText = campaign.Cta.ButtonText
                },
                MultiButtons = campaign.MultiButtons?
                    .Select(b => new CampaignButtonDto
                    {
                        ButtonText = b.Title,
                        ButtonType = b.Type,
                        TargetUrl = b.Value
                    }).ToList() ?? new List<CampaignButtonDto>(),
                // ‚úÖ Flow surface to UI
                CTAFlowConfigId = campaign.CTAFlowConfigId,
                CTAFlowName = campaign.CTAFlowConfig?.FlowName
            };
        }
        // Returns the entry step (no incoming links) and its template name.
        // If flow is missing/invalid, returns (null, null) and caller should ignore.
        private async Task<(Guid? entryStepId, string? entryTemplate)> ResolveFlowEntryAsync(Guid businessId, Guid? flowId)
        {
            if (!flowId.HasValue || flowId.Value == Guid.Empty) return (null, null);

            var flow = await _context.CTAFlowConfigs
                .Include(f => f.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .FirstOrDefaultAsync(f => f.Id == flowId.Value && f.BusinessId == businessId && f.IsActive);

            if (flow == null || flow.Steps == null || flow.Steps.Count == 0) return (null, null);

            var incoming = new HashSet<Guid>(
                flow.Steps.SelectMany(s => s.ButtonLinks)
                          .Where(l => l.NextStepId.HasValue)
                          .Select(l => l.NextStepId!.Value)
            );

            var entry = flow.Steps
                .OrderBy(s => s.StepOrder)
                .FirstOrDefault(s => !incoming.Contains(s.Id));

            return entry == null ? (null, null) : (entry.Id, entry.TemplateToSend);
        }

        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null)
        {
            var query = _context.Campaigns
                .Where(c => c.BusinessId == businessId)
                .AsQueryable();

            if (!string.IsNullOrEmpty(type))
                query = query.Where(c => c.CampaignType == type);

            return await query
                .OrderByDescending(c => c.CreatedAt)
                .Select(c => new CampaignSummaryDto
                {
                    Id = c.Id,
                    Name = c.Name,
                    Status = c.Status,
                    ScheduledAt = c.ScheduledAt,
                    CreatedAt = c.CreatedAt,
                    ImageUrl = c.ImageUrl,            // ‚úÖ Now mapped
                    ImageCaption = c.ImageCaption,    // ‚úÖ Now mapped
                    CtaTitle = c.Cta != null ? c.Cta.Title : null,  // optional
                    RecipientCount = c.Recipients.Count()
                })
                .ToListAsync();
        }

        public async Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId)
        {
            var recipients = await _context.CampaignRecipients
                .Include(r => r.Contact)
                .Where(r => r.CampaignId == campaignId && r.Contact.BusinessId == businessId)
                .Select(r => new ContactDto
                {
                    Id = r.Contact.Id,
                    Name = r.Contact.Name,
                    PhoneNumber = r.Contact.PhoneNumber,
                    Email = r.Contact.Email,
                    LeadSource = r.Contact.LeadSource,
                    CreatedAt = r.Contact.CreatedAt
                })
                .ToListAsync();

            return recipients;
        }

        public async Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request)
        {
            var query = _context.Campaigns
                .Where(c => c.BusinessId == businessId)
                .OrderByDescending(c => c.CreatedAt);

            var total = await query.CountAsync();

            var items = await query
                .Skip((request.Page - 1) * request.PageSize)
                .Take(request.PageSize)
                .Select(c => new CampaignSummaryDto
                {
                    Id = c.Id,
                    Name = c.Name,
                    Status = c.Status,
                    ScheduledAt = c.ScheduledAt,
                    CreatedAt = c.CreatedAt
                })
                .ToListAsync();

            return new PaginatedResponse<CampaignSummaryDto>
            {
                Items = items,
                TotalCount = total,
                Page = request.Page,
                PageSize = request.PageSize
            };
        }
        public async Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto)
        {
            var campaign = await _context.Campaigns.FindAsync(id);
            if (campaign == null || campaign.Status != "Draft")
                return false;

            // ‚úÖ Extract BusinessId from current campaign
            var businessId = campaign.BusinessId;

            // ‚úÖ Optional CTA ownership validation
            if (dto.CtaId.HasValue)
            {
                var cta = await _context.CTADefinitions
                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);

                if (cta == null)
                    throw new UnauthorizedAccessException("‚ùå The selected CTA does not belong to your business or is inactive.");
            }

            // ‚úèÔ∏è Update campaign fields
            campaign.Name = dto.Name;
            campaign.MessageTemplate = dto.MessageTemplate;
            campaign.TemplateId = dto.TemplateId;
            campaign.FollowUpTemplateId = dto.FollowUpTemplateId;
            campaign.CampaignType = dto.CampaignType;
            campaign.CtaId = dto.CtaId;
            campaign.ImageUrl = dto.ImageUrl;
            campaign.ImageCaption = dto.ImageCaption;
            campaign.UpdatedAt = DateTime.UtcNow;
            // üîí Step 2.1: Refresh snapshot on update when template may have changed
            try
            {
                var effectiveTemplateName = !string.IsNullOrWhiteSpace(campaign.TemplateId)
                    ? campaign.TemplateId!
                    : (campaign.MessageTemplate ?? "");

                if (!string.IsNullOrWhiteSpace(effectiveTemplateName))
                {
                    var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(
                        businessId,
                        effectiveTemplateName,
                        language: null,
                        provider: campaign.Provider
                    );

                    campaign.TemplateSchemaSnapshot = snapshotMeta != null
                        ? JsonConvert.SerializeObject(snapshotMeta)
                        : JsonConvert.SerializeObject(new
                        {
                            Provider = campaign.Provider ?? "",
                            TemplateName = effectiveTemplateName,
                            Language = "" // unknown if not in provider meta
                        });
                }
            }
            catch (Exception ex)
            {
                Log.Warning(ex, "‚ö†Ô∏è Template schema snapshot (update) failed for campaign {CampaignId}", id);
            }

            await _context.SaveChangesAsync();
            return true;
        }

        public async Task<bool> DeleteCampaignAsync(Guid id)
        {
            var campaign = await _context.Campaigns
                .Include(c => c.Recipients)
                .FirstOrDefaultAsync(c => c.Id == id);

            if (campaign == null || campaign.Status != "Draft")
                return false;

            _context.CampaignRecipients.RemoveRange(campaign.Recipients);
            _context.Campaigns.Remove(campaign);

            await _context.SaveChangesAsync();
            Log.Information("üóëÔ∏è Campaign deleted: {Id}", id);
            return true;
        }

        #endregion

        #region // üÜï CreateCampaignAsync(Text/Image)


        //public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)
        //{
        //    try
        //    {
        //        var campaignId = Guid.NewGuid();

        //        // üîÅ Parse/normalize template parameters once
        //        var parsedParams = TemplateParameterHelper.ParseTemplateParams(
        //            JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())
        //        );

        //        // üîí Validate + resolve sender (optional but recommended)
        //        string? providerNorm = null;
        //        if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId))
        //        {
        //            // ask WhatsAppSenderService to validate ownership
        //            var pair = await _whisatsAppSenderService.ResolveSenderPairAsync(businessId, dto.PhoneNumberId);
        //            if (pair == null)
        //                throw new InvalidOperationException("‚ùå Selected sender is invalid or does not belong to this business.");
        //            providerNorm = pair.Value.Provider; // already normalized to UPPER
        //        }

        //        // üîÑ Flow id from UI (null/empty => no flow). We will persist this as-is.
        //        Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)
        //            ? dto.CTAFlowConfigId.Value
        //            : (Guid?)null;

        //        Guid? savedFlowId = incomingFlowId;

        //        // üß© FLOW VALIDATION (only to align the starting template)
        //        string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;

        //        CTAFlowConfig? flow = null;
        //        CTAFlowStep? entryStep = null;

        //        if (incomingFlowId.HasValue)
        //        {
        //            flow = await _context.CTAFlowConfigs
        //                .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)
        //                .FirstOrDefaultAsync(f =>
        //                    f.Id == incomingFlowId.Value &&
        //                    f.BusinessId == businessId &&
        //                    f.IsActive);

        //            if (flow != null)
        //            {
        //                var allIncoming = new HashSet<Guid>(flow.Steps
        //                    .SelectMany(s => s.ButtonLinks)
        //                    .Where(l => l.NextStepId.HasValue)
        //                    .Select(l => l.NextStepId!.Value));

        //                entryStep = flow.Steps
        //                    .OrderBy(s => s.StepOrder)
        //                    .FirstOrDefault(s => !allIncoming.Contains(s.Id));

        //                if (entryStep != null &&
        //                    !string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))
        //                {
        //                    selectedTemplateName = entryStep.TemplateToSend;
        //                }
        //            }
        //        }

        //        var template = await _templateFetcherService.GetTemplateByNameAsync(
        //            businessId,
        //            selectedTemplateName,
        //            includeButtons: true
        //        );

        //        var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;
        //        var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);

        //        var campaign = new Campaign
        //        {
        //            Id = campaignId,
        //            BusinessId = businessId,
        //            Name = dto.Name,

        //            MessageTemplate = dto.MessageTemplate,
        //            TemplateId = selectedTemplateName,

        //            FollowUpTemplateId = dto.FollowUpTemplateId,
        //            CampaignType = dto.CampaignType ?? "text",
        //            CtaId = dto.CtaId,
        //            CTAFlowConfigId = savedFlowId,

        //            ScheduledAt = dto.ScheduledAt,
        //            CreatedBy = createdBy,
        //            CreatedAt = DateTime.UtcNow,
        //            UpdatedAt = DateTime.UtcNow,
        //            Status = "Draft",
        //            ImageUrl = dto.ImageUrl,
        //            ImageCaption = dto.ImageCaption,
        //            TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),
        //            MessageBody = resolvedBody,

        //            // üü¢ Persist sender choice (nullable if not selected)
        //            Provider = providerNorm,
        //            PhoneNumberId = dto.PhoneNumberId
        //        };
        //        // üîí Step 2.1: Snapshot template schema (text path)
        //        try
        //        {
        //            var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(
        //                businessId,
        //                selectedTemplateName,
        //                language: null,
        //                provider: providerNorm
        //            );

        //            campaign.TemplateSchemaSnapshot = snapshotMeta != null
        //                ? JsonConvert.SerializeObject(snapshotMeta)
        //                : JsonConvert.SerializeObject(new
        //                {
        //                    Provider = providerNorm ?? "",
        //                    TemplateName = selectedTemplateName,
        //                    Language = template?.Language ?? ""
        //                });
        //        }
        //        catch (Exception ex)
        //        {
        //            Log.Warning(ex, "‚ö†Ô∏è Template schema snapshot failed for campaign {CampaignId}", campaignId);
        //        }

        //        await _context.Campaigns.AddAsync(campaign);

        //        if (dto.ContactIds != null && dto.ContactIds.Any())
        //        {
        //            var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient
        //            {
        //                Id = Guid.NewGuid(),
        //                CampaignId = campaignId,
        //                ContactId = contactId,
        //                BusinessId = businessId,
        //                Status = "Pending",
        //                SentAt = null,
        //                UpdatedAt = DateTime.UtcNow
        //            });

        //            await _context.CampaignRecipients.AddRangeAsync(recipients);
        //        }

        //        if (dto.MultiButtons != null && dto.MultiButtons.Any())
        //        {
        //            var buttons = dto.MultiButtons
        //                .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))
        //                .Take(3)
        //                .Select((btn, index) => new CampaignButton
        //                {
        //                    Id = Guid.NewGuid(),
        //                    CampaignId = campaignId,
        //                    Title = btn.ButtonText,
        //                    Type = btn.ButtonType ?? "url",
        //                    Value = btn.TargetUrl,
        //                    Position = index + 1,
        //                    IsFromTemplate = false
        //                });

        //            await _context.CampaignButtons.AddRangeAsync(buttons);
        //        }

        //        if (template != null && template.ButtonParams?.Count > 0)
        //        {
        //            var buttonsToSave = new List<CampaignButton>();
        //            var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();

        //            var total = Math.Min(3, template.ButtonParams.Count);
        //            for (int i = 0; i < total; i++)
        //            {
        //                var tplBtn = template.ButtonParams[i];
        //                var isDynamic = (tplBtn.ParameterValue?.Contains("{{1}}") ?? false);

        //                var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);
        //                var valueToSave = (isDynamic && userBtn != null)
        //                    ? userBtn.Value?.Trim()
        //                    : tplBtn.ParameterValue;

        //                buttonsToSave.Add(new CampaignButton
        //                {
        //                    Id = Guid.NewGuid(),
        //                    CampaignId = campaignId,
        //                    Title = tplBtn.Text,
        //                    Type = tplBtn.Type,
        //                    Value = valueToSave,
        //                    Position = i + 1,
        //                    IsFromTemplate = true
        //                });
        //            }

        //            await _context.CampaignButtons.AddRangeAsync(buttonsToSave);
        //        }

        //        await _context.SaveChangesAsync();

        //        Log.Information("‚úÖ Campaign '{Name}' created | FlowId: {Flow} | EntryTemplate: {Entry} | Sender: {Provider}/{PhoneId} | Recipients: {Contacts}",
        //            dto.Name,
        //            savedFlowId,
        //            entryStep?.TemplateToSend ?? selectedTemplateName,
        //            providerNorm,
        //            dto.PhoneNumberId,
        //            dto.ContactIds?.Count ?? 0);

        //        return campaignId;
        //    }
        //    catch (Exception ex)
        //    {
        //        Log.Error(ex, "‚ùå Failed to create campaign");
        //        return null;
        //    }
        //}

        public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)
        {
            try
            {
                var campaignId = Guid.NewGuid();

                // üîÅ Parse/normalize template parameters once
                var parsedParams = TemplateParameterHelper.ParseTemplateParams(
                    JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())
                );

                // üîí Validate + resolve sender (optional but recommended)
                string? providerNorm = null;
                if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId))
                {
                    var pair = await _whisatsAppSenderService.ResolveSenderPairAsync(businessId, dto.PhoneNumberId);
                    if (pair == null)
                        throw new InvalidOperationException("‚ùå Selected sender is invalid or does not belong to this business.");
                    providerNorm = pair.Value.Provider; // already normalized to UPPER
                }

                // üîÑ Flow id from UI (null/empty => no flow)
                Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)
                    ? dto.CTAFlowConfigId.Value
                    : (Guid?)null;

                Guid? savedFlowId = incomingFlowId;

                // üß© FLOW VALIDATION (only to align the starting template)
                string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;

                CTAFlowConfig? flow = null;
                CTAFlowStep? entryStep = null;

                if (incomingFlowId.HasValue)
                {
                    flow = await _context.CTAFlowConfigs
                        .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)
                        .FirstOrDefaultAsync(f =>
                            f.Id == incomingFlowId.Value &&
                            f.BusinessId == businessId &&
                            f.IsActive);

                    if (flow != null)
                    {
                        var allIncoming = new HashSet<Guid>(flow.Steps
                            .SelectMany(s => s.ButtonLinks)
                            .Where(l => l.NextStepId.HasValue)
                            .Select(l => l.NextStepId!.Value));

                        entryStep = flow.Steps
                            .OrderBy(s => s.StepOrder)
                            .FirstOrDefault(s => !allIncoming.Contains(s.Id));

                        if (entryStep != null &&
                            !string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))
                        {
                            selectedTemplateName = entryStep.TemplateToSend;
                        }
                    }
                }

                var template = await _templateFetcherService.GetTemplateByNameAsync(
                    businessId,
                    selectedTemplateName,
                    includeButtons: true
                );

                var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;
                var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);

                // =========================
                // üÜï Header kind + URL logic
                // =========================
                string headerKind = (dto.HeaderKind ?? "").Trim().ToLowerInvariant(); // "image" | "video" | "document" | "text" | "none"
                bool isMediaHeader = headerKind == "image" || headerKind == "video" || headerKind == "document";

                // Prefer new unified HeaderMediaUrl; fall back to ImageUrl for legacy image campaigns
                string? headerUrl = string.IsNullOrWhiteSpace(dto.HeaderMediaUrl)
                    ? (headerKind == "image" ? dto.ImageUrl : null)
                    : dto.HeaderMediaUrl;

                // ‚úÖ Campaign type: headerKind ALWAYS wins (FE may still send "text")
                string finalCampaignType = isMediaHeader
                    ? headerKind                               // "image" | "video" | "document"
                    : (dto.CampaignType ?? "text").Trim().ToLowerInvariant();

                // clamp to known values
                if (finalCampaignType != "image" &&
                    finalCampaignType != "video" &&
                    finalCampaignType != "document")
                {
                    finalCampaignType = "text";
                }

                // Validate media header needs URL
                if (isMediaHeader && string.IsNullOrWhiteSpace(headerUrl))
                    throw new InvalidOperationException("‚ùå Header media URL is required for this template.");

                // =========================================
                // Create entity with correct media fields set
                // =========================================
                var campaign = new Campaign
                {
                    Id = campaignId,
                    BusinessId = businessId,
                    Name = dto.Name,

                    MessageTemplate = dto.MessageTemplate,
                    TemplateId = selectedTemplateName,

                    FollowUpTemplateId = dto.FollowUpTemplateId,
                    CampaignType = finalCampaignType,
                    CtaId = dto.CtaId,
                    CTAFlowConfigId = savedFlowId,

                    ScheduledAt = dto.ScheduledAt,
                    CreatedBy = createdBy,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow,
                    Status = "Draft",

                    // Media fields (set exactly one depending on header kind)
                    ImageUrl = headerKind == "image" ? headerUrl : null,
                    ImageCaption = dto.ImageCaption,
                    VideoUrl = headerKind == "video" ? headerUrl : null,
                    DocumentUrl = headerKind == "document" ? headerUrl : null,

                    TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),
                    MessageBody = resolvedBody,

                    // üü¢ Persist sender choice (nullable if not selected)
                    Provider = providerNorm,
                    PhoneNumberId = dto.PhoneNumberId
                };

                // üîí Step 2.1: Snapshot template schema (text path)
                try
                {
                    var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(
                        businessId,
                        selectedTemplateName,
                        language: null,
                        provider: providerNorm?.ToLowerInvariant() // normalize to match DB ("meta_cloud"/"pinnacle")
                    );

                    campaign.TemplateSchemaSnapshot = snapshotMeta != null
                        ? JsonConvert.SerializeObject(snapshotMeta)
                        : JsonConvert.SerializeObject(new
                        {
                            Provider = providerNorm ?? "",
                            TemplateName = selectedTemplateName,
                            Language = template?.Language ?? ""
                        });
                }
                catch (Exception ex)
                {
                    Log.Warning(ex, "‚ö†Ô∏è Template schema snapshot failed for campaign {CampaignId}", campaignId);
                }

                await _context.Campaigns.AddAsync(campaign);

                if (dto.ContactIds != null && dto.ContactIds.Any())
                {
                    var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient
                    {
                        Id = Guid.NewGuid(),
                        CampaignId = campaignId,
                        ContactId = contactId,
                        BusinessId = businessId,
                        Status = "Pending",
                        SentAt = null,
                        UpdatedAt = DateTime.UtcNow
                    });

                    await _context.CampaignRecipients.AddRangeAsync(recipients);
                }

                if (dto.MultiButtons != null && dto.MultiButtons.Any())
                {
                    var buttons = dto.MultiButtons
                        .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))
                        .Take(3)
                        .Select((btn, index) => new CampaignButton
                        {
                            Id = Guid.NewGuid(),
                            CampaignId = campaignId,
                            Title = btn.ButtonText,
                            Type = btn.ButtonType ?? "url",
                            Value = btn.TargetUrl,
                            Position = index + 1,
                            IsFromTemplate = false
                        });

                    await _context.CampaignButtons.AddRangeAsync(buttons);
                }

                if (template != null && template.ButtonParams?.Count > 0)
                {
                    var buttonsToSave = new List<CampaignButton>();
                    var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();

                    var total = Math.Min(3, template.ButtonParams.Count);
                    for (int i = 0; i < total; i++)
                    {
                        var tplBtn = template.ButtonParams[i];
                        var isDynamic = (tplBtn.ParameterValue?.Contains("{{1}}") ?? false);

                        var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);
                        var valueToSave = (isDynamic && userBtn != null)
                            ? userBtn.Value?.Trim()
                            : tplBtn.ParameterValue;

                        buttonsToSave.Add(new CampaignButton
                        {
                            Id = Guid.NewGuid(),
                            CampaignId = campaignId,
                            Title = tplBtn.Text,
                            Type = tplBtn.Type,
                            Value = valueToSave,
                            Position = i + 1,
                            IsFromTemplate = true
                        });
                    }

                    await _context.CampaignButtons.AddRangeAsync(buttonsToSave);
                }

                await _context.SaveChangesAsync();

                Log.Information("‚úÖ Campaign '{Name}' created | Type:{Type} | Header:{HeaderKind} | FlowId:{Flow} | EntryTemplate:{Entry} | Sender:{Provider}/{PhoneId} | Recipients:{Contacts}",
                    dto.Name, finalCampaignType, headerKind,
                    savedFlowId,
                    entryStep?.TemplateToSend ?? selectedTemplateName,
                    providerNorm,
                    dto.PhoneNumberId,
                    dto.ContactIds?.Count ?? 0);

                return campaignId;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Failed to create campaign");
                return null;
            }
        }

        public async Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy)
        {
            var campaignId = Guid.NewGuid();

            // üîÅ Parse/normalize template parameters once
            var parsedParams = TemplateParameterHelper.ParseTemplateParams(
                JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())
            );

            // üîÑ Flow id from UI (null/empty => no flow). We will persist this as-is.
            Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)
                ? dto.CTAFlowConfigId.Value
                : (Guid?)null;

            // We will save this value regardless of validation outcome
            Guid? savedFlowId = incomingFlowId;

            // ============================================================
            // üß© FLOW VALIDATION (only to align the starting template)
            // ============================================================
            string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;

            CTAFlowConfig? flow = null;
            CTAFlowStep? entryStep = null;

            if (incomingFlowId.HasValue)
            {
                // load flow with steps+links and verify ownership
                flow = await _context.CTAFlowConfigs
                    .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)
                    .FirstOrDefaultAsync(f =>
                        f.Id == incomingFlowId.Value &&
                        f.BusinessId == businessId &&
                        f.IsActive);

                if (flow == null)
                {
                    Log.Warning("‚ùå Flow {FlowId} not found/active for business {Biz}. Will persist FlowId but not align template.",
                        incomingFlowId, businessId);
                }
                else
                {
                    // compute entry step: step with NO incoming links
                    var allIncoming = new HashSet<Guid>(flow.Steps
                        .SelectMany(s => s.ButtonLinks)
                        .Where(l => l.NextStepId.HasValue)
                        .Select(l => l.NextStepId!.Value));

                    entryStep = flow.Steps
                        .OrderBy(s => s.StepOrder)
                        .FirstOrDefault(s => !allIncoming.Contains(s.Id));

                    if (entryStep == null)
                    {
                        Log.Warning("‚ùå Flow {FlowId} has no entry step. Persisting FlowId but not aligning template.", flow.Id);
                    }
                    else if (!string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))
                    {
                        Log.Information("‚ÑπÔ∏è Aligning selected template '{Sel}' to flow entry '{Entry}'.",
                            selectedTemplateName, entryStep.TemplateToSend);
                        selectedTemplateName = entryStep.TemplateToSend;
                    }
                }
            }
            else
            {
                Log.Information("‚ÑπÔ∏è No flow attached to image campaign '{Name}'. Proceeding as plain template campaign.", dto.Name);
            }

            // üß† Fetch template (for body + buttons) using the aligned/selected template name
            var template = await _templateFetcherService.GetTemplateByNameAsync(
                businessId,
                selectedTemplateName,
                includeButtons: true
            );

            // üß† Resolve message body using template body (if available) else dto.MessageTemplate
            var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;
            var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);

            // üéØ Step 1: Create campaign (CTAFlowConfigId now always = savedFlowId)
            var campaign = new Campaign
            {
                Id = campaignId,
                BusinessId = businessId,
                Name = dto.Name,

                // store the (possibly aligned) template name
                MessageTemplate = dto.MessageTemplate,      // keep original text for UI if you use it
                TemplateId = selectedTemplateName,          // ensure start template matches flow entry when available

                FollowUpTemplateId = dto.FollowUpTemplateId,
                CampaignType = "image",
                CtaId = dto.CtaId,
                CTAFlowConfigId = savedFlowId,              // üëà persist what UI sent (or null if no flow)

                ScheduledAt = dto.ScheduledAt,
                CreatedBy = createdBy,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                Status = "Draft",

                // image-specific fields
                ImageUrl = dto.ImageUrl,
                ImageCaption = dto.ImageCaption,

                // params/body snapshot (useful for previews & auditing)
                TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),
                MessageBody = resolvedBody
            };
            // üîí Step 2.1: Snapshot template schema (image path)
            try
            {
                var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(
                    businessId,
                    selectedTemplateName,
                    language: null,
                    provider: null
                );

                campaign.TemplateSchemaSnapshot = snapshotMeta != null
                    ? JsonConvert.SerializeObject(snapshotMeta)
                    : JsonConvert.SerializeObject(new
                    {
                        Provider = "",
                        TemplateName = selectedTemplateName,
                        Language = template?.Language ?? ""
                    });
            }
            catch (Exception ex)
            {
                Log.Warning(ex, "‚ö†Ô∏è Template schema snapshot failed for (image) campaign {CampaignId}", campaignId);
            }

            await _context.Campaigns.AddAsync(campaign);

            // ‚úÖ Step 2: Assign contacts (leave SentAt null until send)
            if (dto.ContactIds != null && dto.ContactIds.Any())
            {
                var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient
                {
                    Id = Guid.NewGuid(),
                    CampaignId = campaignId,
                    ContactId = contactId,
                    BusinessId = businessId,
                    Status = "Pending",
                    SentAt = null,
                    UpdatedAt = DateTime.UtcNow
                });

                await _context.CampaignRecipients.AddRangeAsync(recipients);
            }

            // ‚úÖ Step 3a: Save manual buttons from frontend
            if (dto.MultiButtons != null && dto.MultiButtons.Any())
            {
                var buttons = dto.MultiButtons
                    .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))
                    .Take(3)
                    .Select((btn, index) => new CampaignButton
                    {
                        Id = Guid.NewGuid(),
                        CampaignId = campaignId,
                        Title = btn.ButtonText,
                        Type = btn.ButtonType ?? "url",
                        Value = btn.TargetUrl,
                        Position = index + 1,
                        IsFromTemplate = false
                    });

                await _context.CampaignButtons.AddRangeAsync(buttons);
            }

            // ======================== Dynamic buttons merge ========================
            // EXACTLY mirrors your text-creator pattern to avoid type issues with ButtonMetadataDto
            if (template != null && template.ButtonParams?.Count > 0)
            {
                var buttonsToSave = new List<CampaignButton>();
                var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();

                var total = Math.Min(3, template.ButtonParams.Count);
                for (int i = 0; i < total; i++)
                {
                    var tplBtn = template.ButtonParams[i];                         // ButtonMetadataDto: Text, Type, SubType, Index, ParameterValue
                    var isDynamic = (tplBtn.ParameterValue?.Contains("{{1}}") ?? false);

                    var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);
                    var valueToSave = (isDynamic && userBtn != null)
                        ? userBtn.Value?.Trim()                                    // user override for dynamic URL
                        : tplBtn.ParameterValue;                                   // pattern or static value from meta

                    buttonsToSave.Add(new CampaignButton
                    {
                        Id = Guid.NewGuid(),
                        CampaignId = campaignId,
                        Title = tplBtn.Text,                                       // from ButtonMetadataDto
                        Type = tplBtn.Type,                                        // from ButtonMetadataDto
                        Value = valueToSave,
                        Position = i + 1,
                        IsFromTemplate = true
                    });
                }

                await _context.CampaignButtons.AddRangeAsync(buttonsToSave);
            }
            // ======================================================================

            await _context.SaveChangesAsync();

            Log.Information("‚úÖ Image campaign '{Name}' created | FlowId: {Flow} | EntryTemplate: {Entry} | Recipients: {Contacts} | UserButtons: {ManualButtons} | TemplateButtons: {TemplateButtons} | Params: {Params}",
                dto.Name,
                savedFlowId,
                entryStep?.TemplateToSend ?? selectedTemplateName,
                dto.ContactIds?.Count ?? 0,
                dto.MultiButtons?.Count ?? 0,
                template?.ButtonParams?.Count ?? 0,
                dto.TemplateParameters?.Count ?? 0
            );

            return campaignId;
        }
        #endregion

        //public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)
        //{
        //    // 1) Load campaign (no tracking)
        //    var campaign = await _context.Campaigns
        //        .Where(c => c.Id == campaignId)
        //        .Select(c => new { c.Id, c.BusinessId, c.TemplateId, MessageTemplate = c.MessageTemplate })
        //        .AsNoTracking()
        //        .FirstOrDefaultAsync();

        //    if (campaign == null)
        //    {
        //        Log.Warning("üö´ Campaign {CampaignId} not found", campaignId);
        //        return false;
        //    }

        //    // 1.1) Resolve active WA settings ‚Üí Provider + sender (optional)
        //    var wa = await _context.WhatsAppSettings
        //        .AsNoTracking()
        //        .Where(w => w.BusinessId == campaign.BusinessId && w.IsActive)
        //        .FirstOrDefaultAsync();

        //    var provider = wa?.Provider ?? "META_CLOUD";     // must be "PINNACLE" or "META_CLOUD"
        //    var phoneNumberId = wa?.PhoneNumberId;           // optional

        //    // 2) Load recipients with explicit LEFT JOINs to Contact and AudienceMember
        //    var recipients = await (
        //        from r in _context.CampaignRecipients.AsNoTracking()
        //        where r.CampaignId == campaignId

        //        // LEFT JOIN Contact
        //        join c in _context.Contacts.AsNoTracking()
        //            on r.ContactId equals c.Id into cg
        //        from c in cg.DefaultIfEmpty()

        //            // LEFT JOIN AudienceMember
        //        join am in _context.AudiencesMembers.AsNoTracking()
        //            on r.AudienceMemberId equals am.Id into amg
        //        from am in amg.DefaultIfEmpty()

        //        select new
        //        {
        //            r.Id,
        //            r.ContactId,
        //            Phone = c != null && c.PhoneNumber != null ? c.PhoneNumber : am!.PhoneE164,
        //            Name = c != null && c.Name != null ? c.Name : am!.Name,
        //            ParamsJson = r.ResolvedParametersJson
        //        })
        //        .Where(x => !string.IsNullOrWhiteSpace(x.Phone))
        //        .ToListAsync();

        //    if (recipients.Count == 0)
        //    {
        //        Log.Warning("üö´ Campaign {CampaignId} has no recipients", campaignId);
        //        return false;
        //    }

        //    // 3) Mark Sending
        //    var campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaign.Id);
        //    campaignRow.Status = "Sending";
        //    campaignRow.UpdatedAt = DateTime.UtcNow;
        //    await _context.SaveChangesAsync();

        //    // 4) Parallel send
        //    var throttleLimit = 5;
        //    var total = recipients.Count;
        //    var sent = 0;
        //    var failed = 0;

        //    await Parallel.ForEachAsync(
        //        recipients,
        //        new ParallelOptions { MaxDegreeOfParallelism = throttleLimit },
        //        async (r, ct) =>
        //        {
        //            try
        //            {
        //                var phone = r.Phone!;
        //                var name = string.IsNullOrWhiteSpace(r.Name) ? "Customer" : r.Name;

        //                using var scope = _serviceProvider.CreateScope();
        //                var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();

        //                // If you froze parameters at materialization, you can parse r.ParamsJson here.
        //                var dto = new SimpleTemplateMessageDto
        //                {
        //                    Provider = provider,                 // ‚úÖ REQUIRED by your send method
        //                    PhoneNumberId = phoneNumberId,       // optional
        //                    RecipientNumber = phone,
        //                    TemplateName = campaign.TemplateId ?? campaign.MessageTemplate,
        //                    TemplateParameters = new List<string> { name },
        //                    TemplateParameters = args,
        //                };

        //                var result = await _messageEngineService
        //                    .SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);

        //                var sendLog = new CampaignSendLog
        //                {
        //                    Id = Guid.NewGuid(),
        //                    BusinessId = campaign.BusinessId,
        //                    CampaignId = campaign.Id,
        //                    ContactId = r.ContactId,            // Guid? OK to be null
        //                    RecipientId = r.Id,
        //                    TemplateId = campaign.TemplateId,
        //                    MessageBody = campaign.MessageTemplate,
        //                    MessageId = null,
        //                    SendStatus = result.Success ? "Sent" : "Failed",
        //                    ErrorMessage = result.Message,
        //                    SentAt = DateTime.UtcNow,
        //                    CreatedAt = DateTime.UtcNow,
        //                    SourceChannel = "whatsapp",
        //                    IpAddress = ipAddress,
        //                    DeviceInfo = userAgent
        //                };

        //                await scopedDb.CampaignSendLogs.AddAsync(sendLog, ct);

        //                var rec = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(x => x.Id == r.Id, ct);
        //                if (rec != null)
        //                {
        //                    rec.Status = result.Success ? "Sent" : "Failed";
        //                    rec.MessagePreview = campaign.MessageTemplate;
        //                    rec.SentAt = DateTime.UtcNow;
        //                    rec.UpdatedAt = DateTime.UtcNow;
        //                }

        //                await scopedDb.SaveChangesAsync(ct);

        //                if (result.Success) Interlocked.Increment(ref sent);
        //                else Interlocked.Increment(ref failed);
        //            }
        //            catch (Exception ex)
        //            {
        //                Interlocked.Increment(ref failed);
        //                Log.Error(ex, "‚ùå Send failed for recipient: {RecipientId}", r.Id);
        //            }
        //        });

        //    // 5) Finalize
        //    campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaignId);
        //    campaignRow.Status = "Sent";
        //    campaignRow.UpdatedAt = DateTime.UtcNow;
        //    await _context.SaveChangesAsync();

        //    Log.Information("üì§ Campaign {CampaignId} sent via template to {Count} recipients (‚úÖ {Sent}, ‚ùå {Failed})",
        //        campaignId, total, sent, failed);

        //    return sent > 0;
        //}


        //public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)
        //    {
        //        // 1) Load campaign (no tracking)
        //        var campaign = await _context.Campaigns
        //            .Where(c => c.Id == campaignId)
        //            .Select(c => new { c.Id, c.BusinessId, c.TemplateId, MessageTemplate = c.MessageTemplate })
        //            .AsNoTracking()
        //            .FirstOrDefaultAsync();

        //        if (campaign == null)
        //        {
        //            Log.Warning("üö´ Campaign {CampaignId} not found", campaignId);
        //            return false;
        //        }

        //        // 1.1) Resolve active WA settings ‚Üí Provider + sender (optional)
        //        var wa = await _context.WhatsAppSettings
        //            .AsNoTracking()
        //            .Where(w => w.BusinessId == campaign.BusinessId && w.IsActive)
        //            .FirstOrDefaultAsync();

        //        var provider = wa?.Provider ?? "META_CLOUD";   // must be "PINNACLE" or "META_CLOUD"
        //        var phoneNumberId = wa?.PhoneNumberId;         // optional

        //        // 2) Load recipients with explicit LEFT JOINs to Contact and AudienceMember
        //        var recipients = await (
        //            from r in _context.CampaignRecipients.AsNoTracking()
        //            where r.CampaignId == campaignId

        //            join c in _context.Contacts.AsNoTracking()
        //                on r.ContactId equals c.Id into cg
        //            from c in cg.DefaultIfEmpty()

        //            join am in _context.AudiencesMembers.AsNoTracking()
        //                on r.AudienceMemberId equals am.Id into amg
        //            from am in amg.DefaultIfEmpty()

        //            select new
        //            {
        //                r.Id,
        //                r.ContactId,
        //                Phone = c != null && c.PhoneNumber != null ? c.PhoneNumber : am!.PhoneE164,
        //                Name = c != null && c.Name != null ? c.Name : am!.Name,
        //                ParamsJson = r.ResolvedParametersJson
        //            })
        //            .Where(x => !string.IsNullOrWhiteSpace(x.Phone))
        //            .ToListAsync();

        //        if (recipients.Count == 0)
        //        {
        //            Log.Warning("üö´ Campaign {CampaignId} has no recipients", campaignId);
        //            return false;
        //        }

        //        // 3) Mark Sending
        //        var campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaign.Id);
        //        campaignRow.Status = "Sending";
        //        campaignRow.UpdatedAt = DateTime.UtcNow;
        //        await _context.SaveChangesAsync();

        //        // 4) Parallel send
        //        var throttleLimit = 5;
        //        var total = recipients.Count;
        //        var sent = 0;
        //        var failed = 0;

        //        await Parallel.ForEachAsync(
        //            recipients,
        //            new ParallelOptions { MaxDegreeOfParallelism = throttleLimit },
        //            async (r, ct) =>
        //            {
        //                try
        //                {
        //                    var phone = r.Phone!;
        //                    // NOTE: we intentionally do NOT inject profile name here.
        //                    // Parameters come from frozen ResolvedParametersJson (if any).
        //                    var parameters = ParseParams(r.ParamsJson);

        //                    using var scope = _serviceProvider.CreateScope();
        //                    var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();

        //                    var dto = new SimpleTemplateMessageDto
        //                    {
        //                        Provider = provider,                 // ‚úÖ REQUIRED by send method
        //                        PhoneNumberId = phoneNumberId,       // optional sender override
        //                        RecipientNumber = phone,
        //                        TemplateName = campaign.TemplateId ?? campaign.MessageTemplate,
        //                        TemplateParameters = parameters      // ‚úÖ use frozen params (or empty list)
        //                    };

        //                    var result = await _messageEngineService
        //                        .SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);

        //                    var sendLog = new CampaignSendLog
        //                    {
        //                        Id = Guid.NewGuid(),
        //                        BusinessId = campaign.BusinessId,
        //                        CampaignId = campaign.Id,
        //                        ContactId = r.ContactId,            // Guid? OK to be null
        //                        RecipientId = r.Id,
        //                        TemplateId = campaign.TemplateId,
        //                        MessageBody = campaign.MessageTemplate,
        //                        MessageId = result.MessageId,       // ‚úÖ capture WAMID
        //                        SendStatus = result.Success ? "Sent" : "Failed",
        //                        ErrorMessage = result.Message,
        //                        SentAt = DateTime.UtcNow,
        //                        CreatedAt = DateTime.UtcNow,
        //                        SourceChannel = "whatsapp",
        //                        IpAddress = ipAddress,
        //                        DeviceInfo = userAgent
        //                        // (Optional) ButtonBundleJson = SnapshotTemplateButtons(...);
        //                    };

        //                    await scopedDb.CampaignSendLogs.AddAsync(sendLog, ct);

        //                    var rec = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(x => x.Id == r.Id, ct);
        //                    if (rec != null)
        //                    {
        //                        rec.Status = result.Success ? "Sent" : "Failed";
        //                        rec.MessagePreview = campaign.MessageTemplate;
        //                        rec.SentAt = DateTime.UtcNow;
        //                        rec.UpdatedAt = DateTime.UtcNow;
        //                    }

        //                    await scopedDb.SaveChangesAsync(ct);

        //                    if (result.Success) Interlocked.Increment(ref sent);
        //                    else Interlocked.Increment(ref failed);
        //                }
        //                catch (Exception ex)
        //                {
        //                    Interlocked.Increment(ref failed);
        //                    Log.Error(ex, "‚ùå Send failed for recipient: {RecipientId}", r.Id);
        //                }
        //            });

        //        // 5) Finalize
        //        campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaignId);
        //        campaignRow.Status = "Sent";
        //        campaignRow.UpdatedAt = DateTime.UtcNow;
        //        await _context.SaveChangesAsync();

        //        Log.Information("üì§ Campaign {CampaignId} sent via template to {Count} recipients (‚úÖ {Sent}, ‚ùå {Failed})",
        //            campaignId, total, sent, failed);

        //        return sent > 0;

        //        // ---- local helpers ----
        //        static List<string> ParseParams(string? json)
        //        {
        //            if (string.IsNullOrWhiteSpace(json)) return new List<string>();
        //            try
        //            {
        //                var arr = JsonSerializer.Deserialize<List<string>>(json);
        //                return arr ?? new List<string>();
        //            }
        //            catch
        //            {
        //                return new List<string>();
        //            }
        //        }
        //    }

        public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)
        {
            // 1) Load campaign (no tracking)
            var campaign = await _context.Campaigns
                .Where(c => c.Id == campaignId)
                .Select(c => new { c.Id, c.BusinessId, c.TemplateId, MessageTemplate = c.MessageTemplate })
                .AsNoTracking()
                .FirstOrDefaultAsync();

            if (campaign == null)
            {
                Log.Warning("üö´ Campaign {CampaignId} not found", campaignId);
                return false;
            }

            // 1.1) Resolve active WA settings ‚Üí Provider + sender (optional)
            var wa = await _context.WhatsAppSettings
                .AsNoTracking()
                .Where(w => w.BusinessId == campaign.BusinessId && w.IsActive)
                .FirstOrDefaultAsync();

            var provider = wa?.Provider ?? "META_CLOUD";   // must be "PINNACLE" or "META_CLOUD"
            var phoneNumberId = wa?.PhoneNumberId;         // optional

            // 2) Load recipients with explicit LEFT JOINs to Contact and AudienceMember
            var recipients = await (
                from r in _context.CampaignRecipients.AsNoTracking()
                where r.CampaignId == campaignId

                join c in _context.Contacts.AsNoTracking()
                    on r.ContactId equals c.Id into cg
                from c in cg.DefaultIfEmpty()

                join am in _context.AudiencesMembers.AsNoTracking()
                    on r.AudienceMemberId equals am.Id into amg
                from am in amg.DefaultIfEmpty()

                select new
                {
                    r.Id,
                    r.ContactId,
                    Phone = c != null && c.PhoneNumber != null ? c.PhoneNumber : am!.PhoneE164,
                    Name = c != null && c.Name != null ? c.Name : am!.Name,
                    ParamsJson = r.ResolvedParametersJson
                })
                .Where(x => !string.IsNullOrWhiteSpace(x.Phone))
                .ToListAsync();

            if (recipients.Count == 0)
            {
                Log.Warning("üö´ Campaign {CampaignId} has no recipients", campaignId);
                return false;
            }

            // 3) Mark Sending
            var campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaign.Id);
            campaignRow.Status = "Sending";
            campaignRow.UpdatedAt = DateTime.UtcNow;
            await _context.SaveChangesAsync();

            // 4) Parallel send
            var throttleLimit = 5;
            var total = recipients.Count;
            var sent = 0;
            var failed = 0;

            await Parallel.ForEachAsync(
                recipients,
                new ParallelOptions { MaxDegreeOfParallelism = throttleLimit },
                async (r, ct) =>
                {
                    try
                    {
                        var phone = r.Phone!;
                        // NOTE: we intentionally do NOT inject profile name here.
                        // Parameters come from frozen ResolvedParametersJson (if any).
                        var parameters = ParseParams(r.ParamsJson);

                        using var scope = _serviceProvider.CreateScope();
                        var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();

                        var dto = new SimpleTemplateMessageDto
                        {
                            Provider = provider,                 // ‚úÖ REQUIRED by send method
                            PhoneNumberId = phoneNumberId,       // optional sender override
                            RecipientNumber = phone,
                            TemplateName = campaign.TemplateId ?? campaign.MessageTemplate,
                            TemplateParameters = parameters      // ‚úÖ use frozen params (or empty list)
                        };

                        var result = await _messageEngineService
                            .SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);

                        var sendLog = new CampaignSendLog
                        {
                            Id = Guid.NewGuid(),
                            BusinessId = campaign.BusinessId,
                            CampaignId = campaign.Id,
                            ContactId = r.ContactId,            // Guid? OK to be null
                            RecipientId = r.Id,
                            TemplateId = campaign.TemplateId,
                            MessageBody = campaign.MessageTemplate,
                            MessageId = result.MessageId,       // ‚úÖ capture WAMID
                            SendStatus = result.Success ? "Sent" : "Failed",
                            ErrorMessage = result.Message,
                            SentAt = DateTime.UtcNow,
                            CreatedAt = DateTime.UtcNow,
                            SourceChannel = "whatsapp",
                            IpAddress = ipAddress,
                            DeviceInfo = userAgent
                            // (Optional) ButtonBundleJson = SnapshotTemplateButtons(...);
                        };

                        await scopedDb.CampaignSendLogs.AddAsync(sendLog, ct);

                        var rec = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(x => x.Id == r.Id, ct);
                        if (rec != null)
                        {
                            rec.Status = result.Success ? "Sent" : "Failed";
                            rec.MessagePreview = campaign.MessageTemplate;
                            rec.SentAt = DateTime.UtcNow;
                            rec.UpdatedAt = DateTime.UtcNow;
                        }

                        await scopedDb.SaveChangesAsync(ct);

                        if (result.Success) Interlocked.Increment(ref sent);
                        else Interlocked.Increment(ref failed);
                    }
                    catch (Exception ex)
                    {
                        Interlocked.Increment(ref failed);
                        Log.Error(ex, "‚ùå Send failed for recipient: {RecipientId}", r.Id);
                    }
                });

            // 5) Finalize
            campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaignId);
            campaignRow.Status = "Sent";
            campaignRow.UpdatedAt = DateTime.UtcNow;
            await _context.SaveChangesAsync();

            Log.Information("üì§ Campaign {CampaignId} sent via template to {Count} recipients (‚úÖ {Sent}, ‚ùå {Failed})",
                campaignId, total, sent, failed);

            return sent > 0;

            // ---- local helpers ----
            static List<string> ParseParams(string? json)
            {
                if (string.IsNullOrWhiteSpace(json)) return new List<string>();
                try
                {
                    var arr = System.Text.Json.JsonSerializer.Deserialize<List<string>>(json);
                    return arr ?? new List<string>();
                }
                catch
                {
                    return new List<string>();
                }
            }
        }



        public async Task<bool> SendCampaignInParallelAsync(Guid campaignId, string ipAddress, string userAgent)
        {
            var campaign = await _context.Campaigns
                .Include(c => c.Recipients)
                .ThenInclude(r => r.Contact)
                .FirstOrDefaultAsync(c => c.Id == campaignId);

            if (campaign == null || campaign.Recipients.Count == 0)
            {
                Log.Warning("üö´ Campaign not found or has no recipients");
                return false;
            }

            campaign.Status = "Sending";
            campaign.UpdatedAt = DateTime.UtcNow;
            await _context.SaveChangesAsync();

            int maxParallelism = 5;

#if NET6_0_OR_GREATER
            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions
            {
                MaxDegreeOfParallelism = maxParallelism
            },
            async (recipient, cancellationToken) =>
            {
                await SendToRecipientAsync(campaign, recipient, ipAddress, userAgent);
            });
#else
    var tasks = campaign.Recipients.Select(recipient =>
        SendToRecipientAsync(campaign, recipient, ipAddress, userAgent)
    );
    await Task.WhenAll(tasks);
#endif

            campaign.Status = "Sent";
            campaign.UpdatedAt = DateTime.UtcNow;
            await _context.SaveChangesAsync();

            Log.Information("üì§ Campaign {CampaignId} sent in parallel to {Count} recipients", campaign.Id, campaign.Recipients.Count);
            return true;
        }
        private async Task SendToRecipientAsync(Campaign campaign, CampaignRecipient recipient, string ip, string ua)
        {
            try
            {
                var dto = new SimpleTemplateMessageDto
                {
                    RecipientNumber = recipient.Contact.PhoneNumber,
                    TemplateName = campaign.MessageTemplate,
                    TemplateParameters = new List<string> { recipient.Contact.Name ?? "Customer" }
                };

                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);


                var log = new CampaignSendLog
                {
                    Id = Guid.NewGuid(),
                    CampaignId = campaign.Id,
                    ContactId = recipient.ContactId,
                    RecipientId = recipient.Id,
                    TemplateId = campaign.TemplateId,
                    MessageBody = campaign.MessageTemplate,
                    MessageId = null,
                    SendStatus = result.Success ? "Sent" : "Failed",
                    ErrorMessage = result.Message,
                    SentAt = DateTime.UtcNow,
                    CreatedAt = DateTime.UtcNow,
                    SourceChannel = "whatsapp",
                    IpAddress = ip,
                    DeviceInfo = ua
                };

                lock (_context)
                {
                    _context.CampaignSendLogs.Add(log);
                    recipient.Status = result.Success ? "Sent" : "Failed";
                    recipient.MessagePreview = campaign.MessageTemplate;
                    recipient.SentAt = DateTime.UtcNow;
                    recipient.UpdatedAt = DateTime.UtcNow;
                }

                await _context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Failed to send template to recipient: {RecipientId}", recipient.Id);
            }
        }

        public async Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId)
        {
            var entry = await _context.CampaignRecipients
                .FirstOrDefaultAsync(r =>
                    r.CampaignId == campaignId &&
                    r.ContactId == contactId &&
                    r.Campaign.BusinessId == businessId); // ‚úÖ Filter by related Campaign.BusinessId

            if (entry == null)
                return false;

            _context.CampaignRecipients.Remove(entry);
            await _context.SaveChangesAsync();
            return true;
        }

        public async Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds)
        {
            var campaign = await _context.Campaigns
                .Include(c => c.Recipients)
                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);

            if (campaign == null)
                return false;

            var newRecipients = contactIds.Select(id => new CampaignRecipient
            {
                Id = Guid.NewGuid(),
                CampaignId = campaignId,
                ContactId = id,
                BusinessId = businessId,
                Status = "Pending",
                SentAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            });

            _context.CampaignRecipients.AddRange(newRecipients);
            await _context.SaveChangesAsync();
            return true;
        }

        // This is the Entry point to send Temaplte (Text Based and Image Based)
        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId)
        {
            try
            {
                var campaign = await _context.Campaigns
                    .Include(c => c.Recipients)
                        .ThenInclude(r => r.Contact) // üß† include contact details
                    .Include(c => c.MultiButtons)
                    .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);

                if (campaign == null)
                    return ResponseResult.ErrorInfo("‚ùå Campaign not found.");

                if (campaign.Recipients == null || !campaign.Recipients.Any())
                    return ResponseResult.ErrorInfo("‚ùå No recipients assigned to this campaign.");

                var templateName = campaign.MessageTemplate;
                var templateId = campaign.TemplateId;
                var language = "en_US"; // Optional: make dynamic later
                var isImageTemplate = !string.IsNullOrEmpty(campaign.ImageUrl);

                var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? "[]");

                int success = 0, failed = 0;

                foreach (var recipient in campaign.Recipients)
                {
                    var messageDto = new ImageTemplateMessageDto
                    {
                        // BusinessId = campaign.BusinessId,
                        RecipientNumber = recipient.Contact.PhoneNumber,
                        TemplateName = templateName,
                        LanguageCode = language,
                        HeaderImageUrl = isImageTemplate ? campaign.ImageUrl : null,
                        TemplateParameters = templateParams,
                        ButtonParameters = campaign.MultiButtons
                            .OrderBy(b => b.Position)
                            .Take(3)
                            .Select(btn => new CampaignButtonDto
                            {
                                ButtonText = btn.Title,
                                ButtonType = btn.Type,
                                TargetUrl = btn.Value
                            }).ToList()
                    };

                    // ‚úÖ Call the image/template sender
                    var sendResult = await _messageEngineService.SendImageTemplateMessageAsync(messageDto, campaign.BusinessId);
                    var isSuccess = sendResult.ToString().ToLower().Contains("messages");

                    var log = new MessageLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = campaign.BusinessId,
                        RecipientNumber = recipient.Contact.PhoneNumber,
                        MessageContent = templateName,
                        MediaUrl = campaign.ImageUrl,
                        Status = isSuccess ? "Sent" : "Failed",
                        ErrorMessage = isSuccess ? null : "API Failure",
                        RawResponse = JsonConvert.SerializeObject(sendResult),
                        CreatedAt = DateTime.UtcNow,
                        SentAt = DateTime.UtcNow
                    };

                    await _context.MessageLogs.AddAsync(log);

                    if (isSuccess) success++;
                    else failed++;
                }

                await _context.SaveChangesAsync();
                return ResponseResult.SuccessInfo($"‚úÖ Sent: {success}, ‚ùå Failed: {failed}");
            }
            catch (Exception ex)
            {
                return ResponseResult.ErrorInfo("‚ùå Unexpected error during campaign send.", ex.ToString());
            }
        }

        #region  This region include all the code related to sending text and image based

        public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)
        {
            string? GetPhone(CampaignRecipient r)
                => r?.Contact?.PhoneNumber
                ?? r?.AudienceMember?.PhoneE164
                ?? r?.AudienceMember?.PhoneRaw;

            var campaign = await _context.Campaigns
                .AsNoTracking()
                .AsSplitQuery()
                .Include(c => c.Recipients).ThenInclude(r => r.Contact)
                .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)
                .Include(c => c.MultiButtons)
                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);

            if (campaign == null)
                return ResponseResult.ErrorInfo("‚ùå Campaign not found.");

            var recipients = campaign.Recipients ?? new List<CampaignRecipient>();
            var total = recipients.Count;
            var recipientsWithPhone = recipients.Where(r => !string.IsNullOrWhiteSpace(GetPhone(r))).ToList();
            if (recipientsWithPhone.Count == 0)
            {
                _logger.LogWarning("[SendDetect] No valid recipients with phone. total={Total}", total);
                return ResponseResult.ErrorInfo(
                    "‚ö†Ô∏è No valid recipients with phone numbers (checked Contact.PhoneNumber and AudienceMember.PhoneE164/PhoneRaw).");
            }

            // normalize incoming type
            var type = (campaign.CampaignType ?? string.Empty).Trim().ToLowerInvariant();

            // === Infer type from template meta when empty/auto ===
            if (string.IsNullOrEmpty(type) || type == "auto")
            {
                var tplName =
                    !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :
                    !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :
                    string.Empty;

                if (string.IsNullOrWhiteSpace(tplName))
                    return ResponseResult.ErrorInfo("‚ùå Campaign has no template name (TemplateId/MessageTemplate is empty).");

                // IMPORTANT: do NOT over-filter by provider here; your templates table stores "meta_cloud"/"pinnacle"
                // while Campaign.Provider is UPPER ("META_CLOUD"). Passing provider can cause a miss.
                var meta = await _templateFetcherService.GetTemplateMetaAsync(
                    campaign.BusinessId, tplName, language: null, provider: null); // üëà provider=null on purpose

                var headerType = (meta?.HeaderType ?? string.Empty).ToUpperInvariant();
                type = headerType switch
                {
                    "IMAGE" => "image",
                    "VIDEO" => "video",
                    "DOCUMENT" => "document",
                    "PDF" => "document",
                    _ => "text"
                };

                _logger.LogInformation("[SendDetect] Inferred type. campaignId={CampaignId} template={Template} header={Header} -> type={Type}",
                    campaign.Id, tplName, headerType, type);
            }

            // === Validate required media URL for media types ===
            if (type == "image" && string.IsNullOrWhiteSpace(campaign.ImageUrl))
                return ResponseResult.ErrorInfo("üö´ Image template requires ImageUrl on the campaign.");
            if (type == "video" && string.IsNullOrWhiteSpace(campaign.VideoUrl))
                return ResponseResult.ErrorInfo("üö´ Video template requires VideoUrl on the campaign.");
            if (type == "document" && string.IsNullOrWhiteSpace(campaign.DocumentUrl))
                return ResponseResult.ErrorInfo("üö´ Document template requires DocumentUrl on the campaign.");

            // === Dispatch ===
            return type switch
            {
                "image" => await SendImageTemplateCampaignAsync(campaign),
                "video" => await SendVideoTemplateCampaignAsync(campaign),
                "document" => await SendDocumentTemplateCampaignAsync(campaign),
                "text" => await SendTextTemplateCampaignAsync(campaign),
                _ => ResponseResult.ErrorInfo($"‚ùå Unsupported campaign type '{campaign.CampaignType}'.")
            };
        }


        //public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)
        //{
        //    string? GetPhone(CampaignRecipient r)
        //        => r?.Contact?.PhoneNumber
        //        ?? r?.AudienceMember?.PhoneE164
        //        ?? r?.AudienceMember?.PhoneRaw;

        //    var campaign = await _context.Campaigns
        //        .AsNoTracking()
        //        .AsSplitQuery()
        //        .Include(c => c.Recipients).ThenInclude(r => r.Contact)
        //        .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)
        //        .Include(c => c.MultiButtons)
        //        .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);

        //    if (campaign == null)
        //        return ResponseResult.ErrorInfo("‚ùå Campaign not found.");

        //    var recipients = campaign.Recipients ?? new List<CampaignRecipient>();
        //    var total = recipients.Count;
        //    var recipientsWithPhone = recipients
        //        .Where(r => !string.IsNullOrWhiteSpace(GetPhone(r)))
        //        .ToList();

        //    if (recipientsWithPhone.Count == 0)
        //    {
        //        _logger.LogWarning("[SendDetect] No valid recipients with phone. total={Total}", total);
        //        return ResponseResult.ErrorInfo(
        //            "‚ö†Ô∏è No valid recipients with phone numbers (checked Contact.PhoneNumber and AudienceMember.PhoneE164/PhoneRaw).");
        //    }

        //    var type = (campaign.CampaignType ?? string.Empty).Trim().ToLowerInvariant();

        //    if (string.IsNullOrEmpty(type) || type == "auto")
        //    {
        //        var tplName =
        //            !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :
        //            !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :
        //            string.Empty;

        //        if (string.IsNullOrWhiteSpace(tplName))
        //            return ResponseResult.ErrorInfo("‚ùå Campaign has no template name (TemplateId/MessageTemplate is empty).");

        //        var provider = (campaign.Provider ?? "META").ToUpperInvariant();

        //        var meta = await _templateFetcherService.GetTemplateMetaAsync(
        //            campaign.BusinessId, tplName, language: null, provider: provider);

        //        var headerType = (meta?.HeaderType ?? string.Empty).ToUpperInvariant();

        //        type = headerType switch
        //        {
        //            "IMAGE" => "image",
        //            "VIDEO" => "video",
        //            "DOCUMENT" => "document",
        //            "PDF" => "document",
        //            _ => "text"
        //        };

        //        _logger.LogInformation("[SendDetect] Inferred type. campaignId={CampaignId} template={Template} header={Header} -> type={Type}",
        //            campaign.Id, tplName, headerType, type);
        //    }

        //    return type switch
        //    {
        //        "image" => await SendImageTemplateCampaignAsync(campaign),
        //        "video" => await SendVideoTemplateCampaignAsync(campaign),
        //        "document" => await SendDocumentTemplateCampaignAsync(campaign),
        //        "text" => await SendTextTemplateCampaignAsync(campaign),
        //        _ => ResponseResult.ErrorInfo($"‚ùå Unsupported campaign type '{campaign.CampaignType}'.")
        //    };
        //}

        // Uses the per-recipient frozen params if present; otherwise falls back to campaign-level params.
        // Ensures the list length == placeholderCount (pads/truncates).
        private static List<string> GetRecipientBodyParams(
            CampaignRecipient recipient,
            int placeholderCount,
            string? campaignTemplateParameters)
        {
            // Try recipient-specific params first
            try
            {
                if (!string.IsNullOrWhiteSpace(recipient.ResolvedParametersJson))
                {
                    var fromRecipient = JsonConvert.DeserializeObject<List<string>>(recipient.ResolvedParametersJson)
                                        ?? new List<string>();
                    while (fromRecipient.Count < placeholderCount) fromRecipient.Add("");
                    if (fromRecipient.Count > placeholderCount) fromRecipient = fromRecipient.Take(placeholderCount).ToList();
                    return fromRecipient;
                }
            }
            catch { /* ignore and fall back */ }

            // Fallback: campaign-level params (old behavior), padded
            var fromCampaign = TemplateParameterHelper.ParseTemplateParams(campaignTemplateParameters).ToList();
            while (fromCampaign.Count < placeholderCount) fromCampaign.Add("");
            if (fromCampaign.Count > placeholderCount) fromCampaign = fromCampaign.Take(placeholderCount).ToList();
            return fromCampaign;
        }
        public async Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign)
        {
            try
            {
                if (campaign == null || campaign.IsDeleted)
                    return ResponseResult.ErrorInfo("‚ùå Invalid campaign.");
                if (campaign.Recipients == null || campaign.Recipients.Count == 0)
                    return ResponseResult.ErrorInfo("‚ùå No recipients to send.");

                var businessId = campaign.BusinessId;

                // 0) Build a concrete list of recipients that actually have a phone
                static string? ResolveRecipientPhone(CampaignRecipient r) =>
                    r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;

                var recipients = campaign.Recipients
                    .Where(r => !string.IsNullOrWhiteSpace(ResolveRecipientPhone(r)))
                    .ToList();

                if (!recipients.Any())
                    return ResponseResult.ErrorInfo("‚ö†Ô∏è No valid recipients with phone numbers (Contact/AudienceMember).");

                // 1) Flow/template selection
                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);
                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)
                    ? entryTemplate!
                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? "");
                if (string.IsNullOrWhiteSpace(templateName))
                    return ResponseResult.ErrorInfo("‚ùå No template selected.");

                // 2) Provider template meta
                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);
                if (templateMeta == null)
                    return ResponseResult.ErrorInfo("‚ùå Template metadata not found.");

                var languageCode = (templateMeta.Language ?? "").Trim();
                if (string.IsNullOrWhiteSpace(languageCode))
                    return ResponseResult.ErrorInfo("‚ùå Template language not resolved from provider meta.");

                // 3) Buttons only (body params are built per-recipient below)
                var buttons = campaign.MultiButtons?.OrderBy(b => b.Position).ToList()
                              ?? new List<CampaignButton>();

                // 4) Resolve provider (normalize + default)
                string provider;
                if (!string.IsNullOrWhiteSpace(campaign.Provider))
                {
                    if (campaign.Provider != "PINNACLE" && campaign.Provider != "META_CLOUD")
                        return ResponseResult.ErrorInfo("‚ùå Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.");
                    provider = campaign.Provider;
                }
                else
                {
                    var settings = await _context.WhatsAppSettings.AsNoTracking()
                        .Where(s => s.BusinessId == businessId && s.IsActive)
                        .OrderByDescending(s => s.PhoneNumberId != null)
                        .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)
                        .ToListAsync();

                    if (settings.Count == 0)
                        return ResponseResult.ErrorInfo("‚ùå WhatsApp settings not found.");
                    if (settings.Count > 1 && settings[0].PhoneNumberId == null)
                        return ResponseResult.ErrorInfo("‚ùå Multiple providers are active but no default sender is set.");

                    provider = settings[0].Provider;
                    if (provider != "PINNACLE" && provider != "META_CLOUD")
                        return ResponseResult.ErrorInfo($"‚ùå Unsupported provider configured: {provider}");
                }

                // Sender override; if missing, try to pull from active settings for this provider
                string? phoneNumberIdOverride = campaign.PhoneNumberId;
                if (string.IsNullOrWhiteSpace(phoneNumberIdOverride))
                {
                    phoneNumberIdOverride = await _context.WhatsAppSettings.AsNoTracking()
                        .Where(s => s.BusinessId == businessId && s.IsActive && s.Provider == provider && s.PhoneNumberId != null)
                        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)
                        .Select(s => s.PhoneNumberId)
                        .FirstOrDefaultAsync();
                }

                // 5) Optional flow entry step id
                Guid? entryStepId = null;
                if (campaign.CTAFlowConfigId.HasValue)
                {
                    entryStepId = await _context.CTAFlowSteps
                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)
                        .OrderBy(s => s.StepOrder)
                        .Select(s => (Guid?)s.Id)
                        .FirstOrDefaultAsync();
                }

                // 6) Freeze button bundle for click-tracking
                string? buttonBundleJson = null;
                if (templateMeta.ButtonParams is { Count: > 0 })
                {
                    var bundle = templateMeta.ButtonParams.Take(3)
                        .Select((b, i) => new { i, position = i + 1, text = (b.Text ?? "").Trim(), type = b.Type, subType = b.SubType })
                        .ToList();
                    buttonBundleJson = JsonConvert.SerializeObject(bundle);
                }

                // 7) Preload AudienceMember phone/name for recipients that don‚Äôt have a Contact
                var neededMemberIds = recipients
                    .Where(x => x.ContactId == null && x.AudienceMemberId != null)
                    .Select(x => x.AudienceMemberId!.Value)
                    .Distinct()
                    .ToList();

                var audienceLookup = neededMemberIds.Count == 0
                    ? new Dictionary<Guid, (string Phone, string? Name)>()
                    : await _context.AudiencesMembers.AsNoTracking()
                        .Where(m => m.BusinessId == businessId && neededMemberIds.Contains(m.Id))
                        .Select(m => new { m.Id, m.PhoneE164, m.PhoneRaw, m.Name })
                        .ToDictionaryAsync(
                            x => x.Id,
                            x => (Phone: string.IsNullOrWhiteSpace(x.PhoneE164) ? (x.PhoneRaw ?? "") : x.PhoneE164,
                                  Name: x.Name)
                        );

                int successCount = 0, failureCount = 0;
                var now = DateTime.UtcNow;

                foreach (var r in recipients)
                {
                    // Resolve actual phone + fallback name
                    var phone = ResolveRecipientPhone(r);
                    string? name = r.Contact?.Name;

                    if (string.IsNullOrWhiteSpace(phone) && r.AudienceMemberId != null &&
                        audienceLookup.TryGetValue(r.AudienceMemberId.Value, out var a) &&
                        !string.IsNullOrWhiteSpace(a.Phone))
                    {
                        phone = a.Phone;
                        name ??= a.Name ?? "Customer";
                    }

                    if (string.IsNullOrWhiteSpace(phone))
                    {
                        failureCount++;
                        continue; // nothing to send to
                    }

                    var contactForTemplating = r.Contact ?? new Contact
                    {
                        Id = Guid.Empty,
                        BusinessId = businessId,
                        PhoneNumber = phone,
                        Name = name ?? "Customer"
                    };

                    var runId = Guid.NewGuid();
                    var campaignSendLogId = Guid.NewGuid();

                    // ‚úÖ Build BODY params per recipient (never clobber with campaign-level when CSV/recipient values exist)
                    var resolvedParams = GetRecipientBodyParams(r, templateMeta.PlaceholderCount, campaign.TemplateParameters);

                    // If template expects body placeholders, prevent a Meta 131008 by refusing to send when any required value is blank
                    if (templateMeta.PlaceholderCount > 0 && resolvedParams.Any(string.IsNullOrWhiteSpace))
                    {
                        failureCount++;
                        var why = $"Missing body parameter(s): expected {templateMeta.PlaceholderCount}, got " +
                                  $"{resolvedParams.Count(x => !string.IsNullOrWhiteSpace(x))} filled.";
                        if (_context.Entry(r).State == EntityState.Detached) _context.Attach(r);
                        r.MaterializedAt = now;
                        r.UpdatedAt = now;
                        r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams);

                        // Log locally as a failed send without calling provider
                        var logIdLocal = Guid.NewGuid();
                        _context.MessageLogs.Add(new MessageLog
                        {
                            Id = logIdLocal,
                            BusinessId = businessId,
                            CampaignId = campaign.Id,
                            ContactId = r.ContactId, // may be null
                            RecipientNumber = phone,
                            MessageContent = templateName,
                            Status = "Failed",
                            ErrorMessage = why,
                            RawResponse = "{\"local_error\":\"missing_template_body_params\"}",
                            CreatedAt = now,
                            Source = "campaign",
                            CTAFlowConfigId = campaign.CTAFlowConfigId,
                            CTAFlowStepId = entryStepId,
                            ButtonBundleJson = buttonBundleJson,
                            RunId = runId
                        });

                        await _context.CampaignSendLogs.AddAsync(new CampaignSendLog
                        {
                            Id = campaignSendLogId,
                            CampaignId = campaign.Id,
                            BusinessId = businessId,
                            ContactId = r.ContactId,  // may be null
                            RecipientId = r.Id,
                            MessageBody = campaign.MessageBody ?? templateName,
                            TemplateId = templateName,
                            SendStatus = "Failed",
                            MessageLogId = logIdLocal,
                            ErrorMessage = why,
                            CreatedAt = now,
                            CreatedBy = campaign.CreatedBy,
                            CTAFlowConfigId = campaign.CTAFlowConfigId,
                            CTAFlowStepId = entryStepId,
                            ButtonBundleJson = buttonBundleJson,
                            RunId = runId
                        });

                        continue; // skip provider call
                    }

                    // ‚úÖ Build components using the per-recipient params
                    List<string> resolvedButtonUrls;
                    object components = provider == "PINNACLE"
                        ? BuildTextTemplateComponents_Pinnacle(resolvedParams, buttons, templateMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls)
                        : BuildTextTemplateComponents_Meta(resolvedParams, buttons, templateMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls);

                    var payload = new
                    {
                        messaging_product = "whatsapp",
                        to = phone,
                        type = "template",
                        template = new
                        {
                            name = templateName,
                            language = new { code = languageCode },
                            components
                        }
                    };

                    // Freeze recipient materialization BEFORE send (ensure entity is tracked)
                    if (_context.Entry(r).State == EntityState.Detached)
                        _context.Attach(r);

                    r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams); // ‚úÖ save what we actually sent
                    r.ResolvedButtonUrlsJson = JsonConvert.SerializeObject(resolvedButtonUrls);
                    r.MaterializedAt = now;
                    r.UpdatedAt = now;
                    // deterministic idempotency fingerprint
                    r.IdempotencyKey = Idempotency.Sha256($"{campaign.Id}|{phone}|{templateName}|{r.ResolvedParametersJson}|{r.ResolvedButtonUrlsJson}");

                    var result = await _messageEngineService.SendPayloadAsync(businessId, provider, payload, phoneNumberIdOverride);

                    var logId = Guid.NewGuid();
                    _context.MessageLogs.Add(new MessageLog
                    {
                        Id = logId,
                        BusinessId = businessId,
                        CampaignId = campaign.Id,
                        ContactId = r.ContactId, // may be null
                        RecipientNumber = phone,
                        MessageContent = templateName,
                        Status = result.Success ? "Sent" : "Failed",
                        MessageId = result.MessageId,
                        ErrorMessage = result.ErrorMessage,
                        RawResponse = result.RawResponse,
                        CreatedAt = now,
                        SentAt = result.Success ? now : (DateTime?)null,
                        Source = "campaign",
                        CTAFlowConfigId = campaign.CTAFlowConfigId,
                        CTAFlowStepId = entryStepId,
                        ButtonBundleJson = buttonBundleJson,
                        RunId = runId
                    });

                    await _billingIngest.IngestFromSendResponseAsync(
                        businessId: businessId,
                        messageLogId: logId,
                        provider: provider,
                        rawResponseJson: result.RawResponse ?? "{}"
                    );

                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog
                    {
                        Id = campaignSendLogId,
                        CampaignId = campaign.Id,
                        BusinessId = businessId,
                        ContactId = r.ContactId,  // may be null
                        RecipientId = r.Id,
                        MessageBody = campaign.MessageBody ?? templateName,
                        TemplateId = templateName,
                        SendStatus = result.Success ? "Sent" : "Failed",
                        MessageLogId = logId,
                        MessageId = result.MessageId,
                        ErrorMessage = result.ErrorMessage,
                        CreatedAt = now,
                        SentAt = result.Success ? now : (DateTime?)null,
                        CreatedBy = campaign.CreatedBy,
                        CTAFlowConfigId = campaign.CTAFlowConfigId,
                        CTAFlowStepId = entryStepId,
                        ButtonBundleJson = buttonBundleJson,
                        RunId = runId
                    });

                    if (result.Success) successCount++; else failureCount++;
                }

                await _context.SaveChangesAsync();
                return ResponseResult.SuccessInfo($"üì§ Sent to {successCount} recipients. ‚ùå Failed for {failureCount}.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error while sending text template campaign");
                return ResponseResult.ErrorInfo("üö® Unexpected error while sending campaign.", ex.ToString());
            }
        }


        private static bool IsHttpsMp4Url(string? url, out string? normalizedError)
        {
            normalizedError = null;
            if (string.IsNullOrWhiteSpace(url))
            {
                normalizedError = "Missing VideoUrl.";
                return false;
            }

            if (!Uri.TryCreate(url.Trim(), UriKind.Absolute, out var uri))
            {
                normalizedError = "VideoUrl is not a valid absolute URL.";
                return false;
            }

            if (!uri.Scheme.Equals("https", StringComparison.OrdinalIgnoreCase))
            {
                normalizedError = "VideoUrl must use HTTPS.";
                return false;
            }

            var ext = Path.GetExtension(uri.AbsolutePath);
            if (!ext.Equals(".mp4", StringComparison.OrdinalIgnoreCase))
            {
                normalizedError = "VideoUrl must point to an .mp4 file.";
                return false;
            }

            return true;
        }



        public async Task<ResponseResult> SendVideoTemplateCampaignAsync(Campaign campaign)
        {
            try
            {
                if (campaign == null || campaign.IsDeleted)
                    return ResponseResult.ErrorInfo("‚ùå Invalid campaign.");
                if (campaign.Recipients == null || campaign.Recipients.Count == 0)
                    return ResponseResult.ErrorInfo("‚ùå No recipients to send.");

                var businessId = campaign.BusinessId;

                static string? PhoneOf(CampaignRecipient r) =>
                    r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;

                var recipients = campaign.Recipients.Where(r => !string.IsNullOrWhiteSpace(PhoneOf(r))).ToList();
                if (recipients.Count == 0)
                    return ResponseResult.ErrorInfo("‚ö†Ô∏è No valid recipients with phone numbers.");

                // Flow/template selection
                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);
                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)
                    ? entryTemplate!
                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? "");
                if (string.IsNullOrWhiteSpace(templateName))
                    return ResponseResult.ErrorInfo("‚ùå No template selected.");

                // Validate header media URL (direct https mp4)
                var videoUrl = (campaign.VideoUrl ?? campaign.ImageUrl ?? "").Trim();
                if (!IsHttpsMp4Url(videoUrl, out var vErr))
                    return ResponseResult.ErrorInfo("üö´ Invalid VideoUrl", vErr);

                // Template meta
                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);
                if (templateMeta == null)
                    return ResponseResult.ErrorInfo("‚ùå Template metadata not found.");
                var languageCode = (templateMeta.Language ?? "").Trim();
                if (string.IsNullOrWhiteSpace(languageCode))
                    return ResponseResult.ErrorInfo("‚ùå Template language not resolved from provider meta.");

                // Resolve provider
                string provider;
                if (!string.IsNullOrWhiteSpace(campaign.Provider))
                {
                    if (campaign.Provider != "PINNACLE" && campaign.Provider != "META_CLOUD")
                        return ResponseResult.ErrorInfo("‚ùå Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.");
                    provider = campaign.Provider;
                }
                else
                {
                    var settings = await _context.WhatsAppSettings.AsNoTracking()
                        .Where(s => s.BusinessId == businessId && s.IsActive)
                        .OrderByDescending(s => s.PhoneNumberId != null)
                        .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)
                        .ToListAsync();

                    if (settings.Count == 0)
                        return ResponseResult.ErrorInfo("‚ùå WhatsApp settings not found.");
                    if (settings.Count > 1 && settings[0].PhoneNumberId == null)
                        return ResponseResult.ErrorInfo("‚ùå Multiple providers are active but no default sender is set.");

                    provider = settings[0].Provider;
                    if (provider != "PINNACLE" && provider != "META_CLOUD")
                        return ResponseResult.ErrorInfo($"‚ùå Unsupported provider configured: {provider}");
                }

                // Sender override
                string? phoneNumberIdOverride = campaign.PhoneNumberId;
                if (string.IsNullOrWhiteSpace(phoneNumberIdOverride))
                {
                    phoneNumberIdOverride = await _context.WhatsAppSettings.AsNoTracking()
                        .Where(s => s.BusinessId == businessId && s.IsActive && s.Provider == provider && s.PhoneNumberId != null)
                        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)
                        .Select(s => s.PhoneNumberId)
                        .FirstOrDefaultAsync();
                }

                // Optional flow entry step id
                Guid? entryStepId = null;
                if (campaign.CTAFlowConfigId.HasValue)
                {
                    entryStepId = await _context.CTAFlowSteps
                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)
                        .OrderBy(s => s.StepOrder)
                        .Select(s => (Guid?)s.Id)
                        .FirstOrDefaultAsync();
                }

                // Freeze button bundle for UI click tracking
                string? buttonBundleJson = null;
                if (templateMeta.ButtonParams is { Count: > 0 })
                {
                    var bundle = templateMeta.ButtonParams.Take(3)
                        .Select((b, i) => new { i, position = i + 1, text = (b.Text ?? "").Trim(), type = b.Type, subType = b.SubType })
                        .ToList();
                    buttonBundleJson = JsonConvert.SerializeObject(bundle);
                }

                // Audience lookup for missing contacts
                var neededMemberIds = recipients
                    .Where(x => x.ContactId == null && x.AudienceMemberId != null)
                    .Select(x => x.AudienceMemberId!.Value)
                    .Distinct()
                    .ToList();

                var audienceLookup = neededMemberIds.Count == 0
                    ? new Dictionary<Guid, (string Phone, string? Name)>()
                    : await _context.AudiencesMembers.AsNoTracking()
                        .Where(m => m.BusinessId == businessId && neededMemberIds.Contains(m.Id))
                        .Select(m => new { m.Id, m.PhoneE164, m.PhoneRaw, m.Name })
                        .ToDictionaryAsync(
                            x => x.Id,
                            x => (Phone: string.IsNullOrWhiteSpace(x.PhoneE164) ? (x.PhoneRaw ?? "") : x.PhoneE164, Name: x.Name)
                        );

                int successCount = 0, failureCount = 0;
                var now = DateTime.UtcNow;

                foreach (var r in recipients)
                {
                    var phone = PhoneOf(r);
                    string? name = r.Contact?.Name;

                    if (string.IsNullOrWhiteSpace(phone) && r.AudienceMemberId != null &&
                        audienceLookup.TryGetValue(r.AudienceMemberId.Value, out var a) &&
                        !string.IsNullOrWhiteSpace(a.Phone))
                    {
                        phone = a.Phone;
                        name ??= a.Name ?? "Customer";
                    }
                    if (string.IsNullOrWhiteSpace(phone))
                    {
                        failureCount++;
                        continue;
                    }

                    var contactForTemplating = r.Contact ?? new Contact
                    {
                        Id = Guid.Empty,
                        BusinessId = businessId,
                        PhoneNumber = phone,
                        Name = name ?? "Customer"
                    };

                    var runId = Guid.NewGuid();
                    var campaignSendLogId = Guid.NewGuid();

                    // ‚úÖ Provider-specific component builder (uses recipient-resolved shapes)
                    bool built;
                    List<object> components;
                    string? buildErr;

                    if (provider == "META_CLOUD")
                        built = TryBuildVideoTemplateComponents_Meta(videoUrl, templateMeta, r, out components, out buildErr);
                    else
                        built = TryBuildVideoTemplateComponents_Pinnacle(videoUrl, templateMeta, r, out components, out buildErr);

                    if (!built)
                    {
                        failureCount++;
                        _logger.LogWarning("[VideoTpl] Component build failed campaign={CampaignId} phone={Phone}: {Err}",
                            campaign.Id, phone, buildErr);
                        _context.CampaignSendLogs.Add(new CampaignSendLog
                        {
                            Id = campaignSendLogId,
                            CampaignId = campaign.Id,
                            BusinessId = businessId,
                            ContactId = r.ContactId,
                            RecipientId = r.Id,
                            MessageBody = campaign.MessageBody ?? templateName,
                            TemplateId = templateName,
                            SendStatus = "Failed",
                            ErrorMessage = $"component-build: {buildErr}",
                            CreatedAt = now,
                            CreatedBy = campaign.CreatedBy,
                            CTAFlowConfigId = campaign.CTAFlowConfigId,
                            CTAFlowStepId = entryStepId,
                            ButtonBundleJson = buttonBundleJson,
                            RunId = runId,
                            SourceChannel = "video_template"
                        });
                        continue;
                    }

                    var payload = new
                    {
                        messaging_product = "whatsapp",
                        to = phone,
                        type = "template",
                        template = new
                        {
                            name = templateName,
                            language = new { code = languageCode },
                            components
                        }
                    };

                    // Snapshot (keep truthful; materializer should already have set these)
                    if (_context.Entry(r).State == EntityState.Detached)
                        _context.Attach(r);
                    r.MaterializedAt = r.MaterializedAt ?? now;
                    r.UpdatedAt = now;
                    r.IdempotencyKey = Idempotency.Sha256(
                        $"{campaign.Id}|{phone}|{templateName}|{videoUrl}|{r.ResolvedParametersJson}|{r.ResolvedButtonUrlsJson}");

                    var result = await _messageEngineService.SendPayloadAsync(businessId, provider, payload, phoneNumberIdOverride);

                    var logId = Guid.NewGuid();
                    _context.MessageLogs.Add(new MessageLog
                    {
                        Id = logId,
                        BusinessId = businessId,
                        CampaignId = campaign.Id,
                        ContactId = r.ContactId,
                        RecipientNumber = phone,
                        MessageContent = templateName,
                        MediaUrl = videoUrl,
                        Status = result.Success ? "Sent" : "Failed",
                        MessageId = result.MessageId,
                        ErrorMessage = result.ErrorMessage,
                        RawResponse = result.RawResponse,
                        CreatedAt = now,
                        SentAt = result.Success ? now : (DateTime?)null,
                        Source = "campaign",
                        CTAFlowConfigId = campaign.CTAFlowConfigId,
                        CTAFlowStepId = entryStepId,
                        ButtonBundleJson = buttonBundleJson,
                        RunId = runId,
                        Provider = provider,
                        ProviderMessageId = result.MessageId
                    });

                    await _billingIngest.IngestFromSendResponseAsync(
                        businessId: businessId,
                        messageLogId: logId,
                        provider: provider,
                        rawResponseJson: result.RawResponse ?? "{}"
                    );

                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog
                    {
                        Id = campaignSendLogId,
                        CampaignId = campaign.Id,
                        BusinessId = businessId,
                        ContactId = r.ContactId,
                        RecipientId = r.Id,
                        MessageBody = campaign.MessageBody ?? templateName,
                        TemplateId = templateName,
                        SendStatus = result.Success ? "Sent" : "Failed",
                        MessageLogId = logId,
                        MessageId = result.MessageId,
                        ErrorMessage = result.ErrorMessage,
                        CreatedAt = now,
                        SentAt = result.Success ? now : (DateTime?)null,
                        CreatedBy = campaign.CreatedBy,
                        CTAFlowConfigId = campaign.CTAFlowConfigId,
                        CTAFlowStepId = entryStepId,
                        ButtonBundleJson = buttonBundleJson,
                        RunId = runId,
                        SourceChannel = "video_template"
                    });

                    if (result.Success) successCount++; else failureCount++;
                }

                await _context.SaveChangesAsync();
                return ResponseResult.SuccessInfo($"üé¨ Video template sent to {successCount} recipients. ‚ùå Failed for {failureCount}.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error while sending video template campaign");
                return ResponseResult.ErrorInfo("üö® Unexpected error while sending video campaign.", ex.ToString());
            }
        }

        private List<object> BuildVideoTemplateComponents(
            string provider,
            string headerVideoUrl,
            List<string> templateParams,
            List<CampaignButton>? buttonList,
            TemplateMetadataDto templateMeta,
            Guid campaignSendLogId,
            Contact contact,
            out List<string> resolvedButtonUrls)
        {
            // Reuse your current builders to get BODY + BUTTONS
            List<object> nonHeaderComponents;
            if (string.Equals(provider, "PINNACLE", StringComparison.Ordinal))
                nonHeaderComponents = BuildTextTemplateComponents_Pinnacle(
                    templateParams, buttonList, templateMeta, campaignSendLogId, contact, out resolvedButtonUrls);
            else // META_CLOUD
                nonHeaderComponents = BuildTextTemplateComponents_Meta(
                    templateParams, buttonList, templateMeta, campaignSendLogId, contact, out resolvedButtonUrls);

            // Prepend the HEADER/VIDEO piece (WhatsApp shape for both providers)
            var components = new List<object>
    {
        new
        {
            type = "header",
            parameters = new object[] {
                new { type = "video", video = new { link = headerVideoUrl } }
            }
        }
    };

            components.AddRange(nonHeaderComponents);
            return components;
        }
        private bool TryBuildVideoTemplateComponents_Meta(
    string videoUrl,
    TemplateMetadataDto templateMeta,
    CampaignRecipient r,
    out List<object> components,
    out string? error)
        {
            components = new List<object>();
            error = null;

            if (string.IsNullOrWhiteSpace(videoUrl))
            {
                error = "required header VIDEO url is missing";
                return false;
            }

            // HEADER (video)
            components.Add(new Dictionary<string, object>
            {
                ["type"] = "header",
                ["parameters"] = new object[]
                {
            new Dictionary<string, object>
            {
                ["type"] = "video",
                ["video"] = new Dictionary<string, object>
                {
                    ["link"] = videoUrl
                }
            }
                }
            });

            // BODY {{1..N}}
            var count = Math.Max(0, templateMeta.PlaceholderCount);
            var bodyParams = DeserializeBodyParams(r.ResolvedParametersJson, count);
            if (count > 0)
            {
                // If template expects text params, enforce presence
                var missing = MissingIndices(bodyParams, count);
                if (missing.Count > 0)
                {
                    error = $"missing body params at {{ {string.Join(",", missing)} }}";
                    return false;
                }

                components.Add(new
                {
                    type = "body",
                    parameters = bodyParams.Select(p => new Dictionary<string, object>
                    {
                        ["type"] = "text",
                        ["text"] = p ?? string.Empty
                    }).ToList()
                });
            }

            // URL BUTTON parameters (only when template declares dynamic pieces)
            if (templateMeta.ButtonParams != null && templateMeta.ButtonParams.Count > 0)
            {
                var urlDict = DeserializeButtonDict(r.ResolvedButtonUrlsJson);
                var total = Math.Min(3, templateMeta.ButtonParams.Count);

                for (int i = 0; i < total; i++)
                {
                    var bp = templateMeta.ButtonParams[i];
                    var subType = (bp.SubType ?? "url").ToLowerInvariant();
                    var paramMask = bp.ParameterValue?.Trim();

                    // Only dynamic URL buttons need a "text" parameter
                    if (!string.Equals(subType, "url", StringComparison.OrdinalIgnoreCase))
                        continue;

                    var isDynamic = !string.IsNullOrWhiteSpace(paramMask) && paramMask.Contains("{{");
                    if (!isDynamic) continue;

                    // materializer persisted: button{1..3}.url_param
                    var key = $"button{i + 1}.url_param";
                    if (!urlDict.TryGetValue(key, out var dyn) || string.IsNullOrWhiteSpace(dyn))
                    {
                        error = $"missing dynamic URL param for {key}";
                        return false;
                    }

                    components.Add(new Dictionary<string, object>
                    {
                        ["type"] = "button",
                        ["sub_type"] = "url",
                        ["index"] = i.ToString(), // "0","1","2"
                        ["parameters"] = new object[]
                        {
                    new Dictionary<string, object> { ["type"] = "text", ["text"] = dyn }
                        }
                    });
                }
            }

            return true;
        }

        private bool TryBuildVideoTemplateComponents_Pinnacle(
    string videoUrl,
    TemplateMetadataDto templateMeta,
    CampaignRecipient r,
    out List<object> components,
    out string? error)
        {
            // If Pinnacle uses same structure as Meta for templates, we can reuse Meta logic.
            // If they require a different header/media envelope, adapt here.
            return TryBuildVideoTemplateComponents_Meta(videoUrl, templateMeta, r, out components, out error);
        }
        private static Dictionary<string, string> DeserializeButtonDict(string? json)
        {
            try
            {
                return string.IsNullOrWhiteSpace(json)
                    ? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
                    : JsonConvert.DeserializeObject<Dictionary<string, string>>(json!)
                      ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            }
            catch
            {
                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            }
        }
        private static List<int> MissingIndices(List<string> bodyParams, int count)
        {
            var miss = new List<int>();
            for (int i = 0; i < count; i++)
            {
                if (string.IsNullOrWhiteSpace(i < bodyParams.Count ? bodyParams[i] : null))
                    miss.Add(i + 1); // 1-based for readability
            }
            return miss;
        }
        // ---------- helpers ----------
        private static List<string> DeserializeBodyParams(string? json, int expectedCount)
        {
            try
            {
                var arr = string.IsNullOrWhiteSpace(json)
                    ? Array.Empty<string>()
                    : JsonConvert.DeserializeObject<string[]>(json!) ?? Array.Empty<string>();

                // pad/trim to template placeholder count
                var list = new List<string>(Enumerable.Repeat(string.Empty, Math.Max(expectedCount, 0)));
                for (int i = 0; i < Math.Min(expectedCount, arr.Length); i++)
                    list[i] = arr[i] ?? string.Empty;
                return list;
            }
            catch
            {
                return new List<string>(Enumerable.Repeat(string.Empty, Math.Max(expectedCount, 0)));
            }
        }
        private static readonly Regex PlaceholderRe = new(@"\{\{\s*(\d+)\s*\}\}", RegexOptions.Compiled);

        private string BuildTokenParam(Guid campaignSendLogId, int buttonIndex, string? buttonTitle, string destinationUrlAbsolute)
        {
            var full = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, buttonIndex, buttonTitle, destinationUrlAbsolute);
            var pos = full.LastIndexOf("/r/", StringComparison.OrdinalIgnoreCase);
            return (pos >= 0) ? full[(pos + 3)..] : full; // fallback: if not found, return full (rare)
        }

        private static string NormalizeAbsoluteUrlOrThrowForButton(string input, string buttonTitle, int buttonIndex)
        {
            if (string.IsNullOrWhiteSpace(input))
                throw new ArgumentException($"Destination is required for button '{buttonTitle}' (index {buttonIndex}).");

            // Trim + strip control chars
            var cleaned = new string(input.Trim().Where(c => !char.IsControl(c)).ToArray());
            if (cleaned.Length == 0)
                throw new ArgumentException($"Destination is required for button '{buttonTitle}' (index {buttonIndex}).");

            // Allow tel: and WhatsApp deep links
            if (cleaned.StartsWith("tel:", StringComparison.OrdinalIgnoreCase) ||
                cleaned.StartsWith("wa:", StringComparison.OrdinalIgnoreCase) ||
                cleaned.StartsWith("https://wa.me/", StringComparison.OrdinalIgnoreCase))
            {
                return cleaned; // Accept as-is
            }

            // Normal web links
            if (Uri.TryCreate(cleaned, UriKind.Absolute, out var uri) &&
                (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||
                 uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase)))
            {
                return uri.ToString();
            }

            // Reject everything else
            throw new ArgumentException(
                $"Destination must be an absolute http/https/tel/wa URL for button '{buttonTitle}' (index {buttonIndex}). Got: '{input}'");
        }

        private static bool LooksLikeAbsoluteBaseUrlWithPlaceholder(string? templateUrl)
        {
            if (string.IsNullOrWhiteSpace(templateUrl)) return false;
            var s = templateUrl.Trim();
            if (!s.Contains("{{")) return false;

            // Probe by replacing common placeholders with a char
            var probe = PlaceholderRe.Replace(s, "x");
            return Uri.TryCreate(probe, UriKind.Absolute, out var abs) &&
                   (abs.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||
                    abs.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase));
        }

        private static object[] BuildBodyParameters(List<string>? templateParams, int requiredCount)
        {
            if (requiredCount <= 0) return Array.Empty<object>();

            var src = templateParams ?? new List<string>();
            if (src.Count > requiredCount) src = src.Take(requiredCount).ToList();
            while (src.Count < requiredCount) src.Add(string.Empty);

            return src.Select(p => (object)new { type = "text", text = p ?? string.Empty }).ToArray();
        }

        private static string NormalizePhoneForTel(string? raw)
        {
            if (string.IsNullOrWhiteSpace(raw)) return "";
            var p = raw.Trim();
            var digits = new string(p.Where(char.IsDigit).ToArray());
            // keep leading + if present initially; always output +<digits>
            return "+" + digits;
        }

        private static string ReplaceAllPlaceholdersWith(string template, string replacement)
        {
            if (string.IsNullOrWhiteSpace(template)) return string.Empty;
            return PlaceholderRe.Replace(template, _ => replacement ?? string.Empty);
        }

        // ======================================================
        // META ‚Äî TEXT TEMPLATE COMPONENTS
        // ======================================================

        // Back-compat wrapper (old signature)
        private List<object> BuildTextTemplateComponents_Meta(
            List<string> templateParams,
            List<CampaignButton>? buttonList,
            TemplateMetadataDto templateMeta,
            Guid campaignSendLogId,
            Contact contact)
        {
            return BuildTextTemplateComponents_Meta(
                templateParams, buttonList, templateMeta, campaignSendLogId, contact, out _);
        }

        // New overload with resolvedButtonUrls
        private List<object> BuildTextTemplateComponents_Meta(
            List<string> templateParams,
            List<CampaignButton>? buttonList,
            TemplateMetadataDto templateMeta,
            Guid campaignSendLogId,
            Contact contact,
            out List<string> resolvedButtonUrls)
        {
            var components = new List<object>();
            resolvedButtonUrls = new List<string>();

            // BODY: send exactly PlaceholderCount
            if (templateMeta.PlaceholderCount > 0)
            {
                var bodyParams = BuildBodyParameters(templateParams, templateMeta.PlaceholderCount);
                components.Add(new { type = "body", parameters = bodyParams });
            }

            // No buttons or template has no button params
            if (buttonList == null || buttonList.Count == 0 ||
                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)
                return components;

            // Ensure index alignment with the template by ordering by Position (then original index)
            var orderedButtons = buttonList
                .Select((b, idx) => new { Btn = b, idx })
                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)
                .ThenBy(x => x.idx)
                .Select(x => x.Btn)
                .ToList();

            var total = Math.Min(3, Math.Min(orderedButtons.Count, templateMeta.ButtonParams.Count));

            // Phone normalization (for optional {{1}} substitution on campaign button value)
            var phone = NormalizePhoneForTel(contact?.PhoneNumber);
            var encodedPhone = Uri.EscapeDataString(phone);

            for (int i = 0; i < total; i++)
            {
                var meta = templateMeta.ButtonParams[i];
                var subType = (meta.SubType ?? "url").ToLowerInvariant();
                var metaParam = meta.ParameterValue?.Trim();

                // Meta needs parameters ONLY for dynamic URL buttons
                if (!string.Equals(subType, "url", StringComparison.OrdinalIgnoreCase))
                    continue;

                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains("{{");
                if (!isDynamic)
                    continue;

                var btn = orderedButtons[i];
                var btnType = (btn?.Type ?? "URL").ToUpperInvariant();
                if (!string.Equals(btnType, "URL", StringComparison.OrdinalIgnoreCase))
                {
                    // If template expects dynamic URL at this index and your campaign button isn't URL, skip to avoid provider error
                    continue;
                }

                var valueRaw = btn.Value?.Trim();
                if (string.IsNullOrWhiteSpace(valueRaw))
                {
                    throw new InvalidOperationException(
                        $"Template requires a dynamic URL at button index {i}, but campaign button value is empty.");
                }

                // Optional phone substitution in destination (support any {{n}})
                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>
                {
                    if (!int.TryParse(m.Groups[1].Value, out var n)) return "";
                    if (n == 1) return encodedPhone; // convention: {{1}} can be phone
                    var idx = n - 1;
                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? "") : "";
                });

                resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn.Title ?? "", i);

                // Build both; choose which to send based on template base style
                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);
                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);

                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);
                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;

                components.Add(new Dictionary<string, object>
                {
                    ["type"] = "button",
                    ["sub_type"] = "url",
                    ["index"] = i.ToString(), // "0"/"1"/"2"
                    ["parameters"] = new[] {
                new Dictionary<string, object> { ["type"] = "text", ["text"] = valueToSend }
            }
                });

                // Provider-resolved URL (what the client actually clicks):
                // replace all placeholders in provider template with the parameter we sent.
                var providerResolved = ReplaceAllPlaceholdersWith(metaParam ?? "", valueToSend);
                resolvedButtonUrls.Add(providerResolved);
            }

            return components;
        }

        // ======================================================
        // PINNACLE ‚Äî TEXT TEMPLATE COMPONENTS
        // ======================================================

        // Back-compat wrapper (old signature)
        private List<object> BuildTextTemplateComponents_Pinnacle(
            List<string> templateParams,
            List<CampaignButton>? buttonList,
            TemplateMetadataDto templateMeta,
            Guid campaignSendLogId,
            Contact contact)
        {
            return BuildTextTemplateComponents_Pinnacle(
                templateParams, buttonList, templateMeta, campaignSendLogId, contact, out _);
        }

        // New overload with resolvedButtonUrls
        private List<object> BuildTextTemplateComponents_Pinnacle(
            List<string> templateParams,
            List<CampaignButton>? buttonList,
            TemplateMetadataDto templateMeta,
            Guid campaignSendLogId,
            Contact contact,
            out List<string> resolvedButtonUrls)
        {
            var components = new List<object>();
            resolvedButtonUrls = new List<string>();

            // BODY: Pinnacle is strict ‚Üí always send exactly PlaceholderCount
            if (templateMeta.PlaceholderCount > 0)
            {
                var bodyParams = BuildBodyParameters(templateParams, templateMeta.PlaceholderCount);
                components.Add(new { type = "body", parameters = bodyParams });
            }

            // No buttons to map ‚Üí return body-only
            if (buttonList == null || buttonList.Count == 0 ||
                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)
                return components;

            // Ensure index alignment with the template by ordering by Position (then original index)
            var orderedButtons = buttonList
                .Select((b, idx) => new { Btn = b, idx })
                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)
                .ThenBy(x => x.idx)
                .Select(x => x.Btn)
                .ToList();

            var total = Math.Min(3, Math.Min(orderedButtons.Count, templateMeta.ButtonParams.Count));

            // Phone normalization (for optional {{1}} substitution on campaign button value)
            var phone = NormalizePhoneForTel(contact?.PhoneNumber);
            var encodedPhone = Uri.EscapeDataString(phone);

            for (int i = 0; i < total; i++)
            {
                var meta = templateMeta.ButtonParams[i];
                var subType = (meta.SubType ?? "url").ToLowerInvariant();
                var metaParam = meta.ParameterValue?.Trim();

                // This path supports dynamic URL params only
                if (!string.Equals(subType, "url", StringComparison.OrdinalIgnoreCase))
                    continue;

                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains("{{");
                if (!isDynamic)
                    continue;

                var btn = orderedButtons[i];
                var btnType = (btn?.Type ?? "URL").ToUpperInvariant();
                if (!string.Equals(btnType, "URL", StringComparison.OrdinalIgnoreCase))
                {
                    throw new InvalidOperationException(
                        $"Template expects a dynamic URL at button index {i}, but campaign button type is '{btn?.Type}'.");
                }

                var valueRaw = btn?.Value?.Trim();
                if (string.IsNullOrWhiteSpace(valueRaw))
                {
                    throw new InvalidOperationException(
                        $"Template requires a dynamic URL at button index {i}, but campaign button value is empty.");
                }

                // Optional phone + param substitution (support any {{n}})
                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>
                {
                    if (!int.TryParse(m.Groups[1].Value, out var n)) return "";
                    if (n == 1) return encodedPhone;
                    var idx = n - 1;
                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? "") : "";
                });

                // Validate + normalize absolute URL
                resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn!.Title ?? "", i);

                // Build both options: full tracked URL vs token param (for absolute-base placeholders)
                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);
                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);

                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);
                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;

                // Pinnacle payload shape (kept aligned with Meta)
                components.Add(new Dictionary<string, object>
                {
                    ["type"] = "button",
                    ["sub_type"] = "url",
                    ["index"] = i.ToString(),
                    ["parameters"] = new[] {
                new Dictionary<string, object> { ["type"] = "text", ["text"] = valueToSend }
            }
                });

                // Provider-resolved URL (what the user will open)
                var providerResolved = ReplaceAllPlaceholdersWith(metaParam ?? "", valueToSend);
                resolvedButtonUrls.Add(providerResolved);
            }

            return components;
        }


        #region SendImagetemplate

        //public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)
        //{
        //    try
        //    {
        //        if (campaign == null || campaign.IsDeleted)
        //            return ResponseResult.ErrorInfo("‚ùå Invalid campaign.");
        //        if (campaign.Recipients == null || !campaign.Recipients.Any())
        //            return ResponseResult.ErrorInfo("‚ùå No recipients to send.");

        //        var businessId = campaign.BusinessId;

        //        // üîß Resolve provider for billing (prefer campaign.Provider, else active setting)
        //        string? provider = !string.IsNullOrWhiteSpace(campaign.Provider)
        //            ? campaign.Provider
        //            : await _context.WhatsAppSettings
        //                .AsNoTracking()
        //                .Where(s => s.BusinessId == businessId && s.IsActive)
        //                .OrderByDescending(s => s.PhoneNumberId != null)          // prefer default sender
        //                .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)
        //                .Select(s => s.Provider)
        //                .FirstOrDefaultAsync();

        //        if (string.IsNullOrWhiteSpace(provider)) provider = "META_CLOUD";


        //        // üîë Flow entry ‚Üí template name
        //        var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);
        //        var templateName = !string.IsNullOrWhiteSpace(entryTemplate)
        //            ? entryTemplate!
        //            : (campaign.TemplateId ?? campaign.MessageTemplate ?? "");

        //        var language = "en_US";
        //        var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? "[]");

        //        int success = 0, failed = 0;

        //        foreach (var r in campaign.Recipients)
        //        {
        //            var dto = new ImageTemplateMessageDto
        //            {
        //                RecipientNumber = r.Contact.PhoneNumber,
        //                TemplateName = templateName,
        //                LanguageCode = language,
        //                HeaderImageUrl = campaign.ImageUrl,
        //                TemplateParameters = templateParams,
        //                ButtonParameters = campaign.MultiButtons
        //                    .OrderBy(b => b.Position)
        //                    .Take(3)
        //                    .Select(b => new CampaignButtonDto
        //                    {
        //                        ButtonText = b.Title,
        //                        ButtonType = b.Type,
        //                        TargetUrl = b.Value
        //                    }).ToList()
        //            };

        //            var res = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);
        //            var ok = res.ToString().ToLower().Contains("messages");

        //            // keep ids + raw json for billing
        //            var payloadJson = JsonConvert.SerializeObject(res);
        //            var messageLogId = Guid.NewGuid();

        //            _context.MessageLogs.Add(new MessageLog
        //            {
        //                Id = messageLogId,
        //                BusinessId = businessId,
        //                CampaignId = campaign.Id,
        //                ContactId = r.ContactId,
        //                RecipientNumber = r.Contact.PhoneNumber,
        //                MessageContent = templateName,
        //                MediaUrl = campaign.ImageUrl,
        //                Status = ok ? "Sent" : "Failed",
        //                ErrorMessage = ok ? null : "API Failure",
        //                RawResponse = payloadJson,
        //                CreatedAt = DateTime.UtcNow,
        //                SentAt = DateTime.UtcNow,
        //                Source = "campaign"
        //            });

        //            // üîé Billing capture (send response)
        //            await _billingIngest.IngestFromSendResponseAsync(
        //                businessId: businessId,
        //                messageLogId: messageLogId,
        //                provider: provider!,
        //                rawResponseJson: payloadJson
        //            );


        //            //var res = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);
        //            //var ok = res.ToString().ToLower().Contains("messages");

        //            //_context.MessageLogs.Add(new MessageLog
        //            //{
        //            //    Id = Guid.NewGuid(),
        //            //    BusinessId = businessId,
        //            //    CampaignId = campaign.Id,
        //            //    ContactId = r.ContactId,
        //            //    RecipientNumber = r.Contact.PhoneNumber,
        //            //    MessageContent = templateName,
        //            //    MediaUrl = campaign.ImageUrl,
        //            //    Status = ok ? "Sent" : "Failed",
        //            //    ErrorMessage = ok ? null : "API Failure",
        //            //    RawResponse = JsonConvert.SerializeObject(res),
        //            //    CreatedAt = DateTime.UtcNow,
        //            //    SentAt = DateTime.UtcNow,
        //            //    Source = "campaign"
        //            //});

        //            if (ok) success++; else failed++;
        //        }

        //        await _context.SaveChangesAsync();
        //        return ResponseResult.SuccessInfo($"‚úÖ Sent: {success}, ‚ùå Failed: {failed}");
        //    }
        //    catch (Exception ex)
        //    {
        //        return ResponseResult.ErrorInfo("‚ùå Unexpected error during campaign send.", ex.ToString());
        //    }
        //}

        public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)
        {
            try
            {
                if (campaign == null || campaign.IsDeleted)
                    return ResponseResult.ErrorInfo("‚ùå Invalid campaign.");
                if (campaign.Recipients == null || campaign.Recipients.Count == 0)
                    return ResponseResult.ErrorInfo("‚ùå No recipients to send.");

                var businessId = campaign.BusinessId;

                // --- helper identical to text flow ---
                static string? ResolveRecipientPhone(CampaignRecipient r) =>
                    r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;

                // Keep only recipients that actually have a phone
                var recipients = campaign.Recipients
                    .Where(r => !string.IsNullOrWhiteSpace(ResolveRecipientPhone(r)))
                    .ToList();

                if (!recipients.Any())
                    return ResponseResult.ErrorInfo("‚ö†Ô∏è No valid recipients with phone numbers (Contact/AudienceMember).");

                // --- Flow/template selection (same as text flow) ---
                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);
                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)
                    ? entryTemplate!
                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? "");
                if (string.IsNullOrWhiteSpace(templateName))
                    return ResponseResult.ErrorInfo("‚ùå No template selected.");

                // --- Provider template meta (language, placeholder count, buttons) ---
                var tmplMeta = await _templateFetcherService.GetTemplateByNameAsync(
                    businessId, templateName, includeButtons: true);
                if (tmplMeta == null)
                    return ResponseResult.ErrorInfo("‚ùå Template metadata not found.");

                var languageCode = (tmplMeta.Language ?? "").Trim();
                if (string.IsNullOrWhiteSpace(languageCode))
                    return ResponseResult.ErrorInfo("‚ùå Template language not resolved from provider meta.");

                // --- Provider normalize (strict) ---
                string provider;
                if (!string.IsNullOrWhiteSpace(campaign.Provider))
                {
                    var p = campaign.Provider.Trim().ToUpperInvariant();
                    if (p != "PINNACLE" && p != "META_CLOUD")
                        return ResponseResult.ErrorInfo("‚ùå Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.");
                    provider = p;
                }
                else
                {
                    var settings = await _context.WhatsAppSettings.AsNoTracking()
                        .Where(s => s.BusinessId == businessId && s.IsActive)
                        .OrderByDescending(s => s.PhoneNumberId != null)               // prefer default sender
                        .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)
                        .ToListAsync();

                    if (settings.Count == 0)
                        return ResponseResult.ErrorInfo("‚ùå WhatsApp settings not found.");
                    if (settings.Count > 1 && settings[0].PhoneNumberId == null)
                        return ResponseResult.ErrorInfo("‚ùå Multiple providers are active but no default sender is set.");

                    var p = settings[0].Provider?.Trim().ToUpperInvariant();
                    if (p != "PINNACLE" && p != "META_CLOUD")
                        return ResponseResult.ErrorInfo($"‚ùå Unsupported provider configured: {settings[0].Provider}");
                    provider = p!;
                }

                // --- Sender override (PNI): campaign override ‚Üí else latest active for this provider ---
                string? phoneNumberIdOverride = campaign.PhoneNumberId;
                if (string.IsNullOrWhiteSpace(phoneNumberIdOverride))
                {
                    phoneNumberIdOverride = await _context.WhatsAppSettings.AsNoTracking()
                        .Where(s => s.BusinessId == businessId && s.IsActive && s.Provider == provider && s.PhoneNumberId != null)
                        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)
                        .Select(s => s.PhoneNumberId)
                        .FirstOrDefaultAsync();
                }

                // --- Flow entry step id (for logs) ---
                Guid? entryStepId = null;
                if (campaign.CTAFlowConfigId.HasValue)
                {
                    entryStepId = await _context.CTAFlowSteps
                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)
                        .OrderBy(s => s.StepOrder)
                        .Select(s => (Guid?)s.Id)
                        .FirstOrDefaultAsync();
                }

                // --- Freeze button bundle (provider meta) for analytics ---
                string? buttonBundleJson = null;
                if (tmplMeta.ButtonParams is { Count: > 0 })
                {
                    var bundle = tmplMeta.ButtonParams.Take(3)
                        .Select((b, i) => new { i, position = i + 1, text = (b.Text ?? "").Trim(), type = b.Type, subType = b.SubType })
                        .ToList();
                    buttonBundleJson = JsonConvert.SerializeObject(bundle);
                }

                // --- Prefetch AudienceMembers for recipients without Contact ---
                var neededMemberIds = recipients
                    .Where(x => x.ContactId == null && x.AudienceMemberId != null)
                    .Select(x => x.AudienceMemberId!.Value)
                    .Distinct()
                    .ToList();

                var audienceLookup = neededMemberIds.Count == 0
                    ? new Dictionary<Guid, (string Phone, string? Name)>()
                    : await _context.AudiencesMembers.AsNoTracking()
                        .Where(m => m.BusinessId == businessId && neededMemberIds.Contains(m.Id))
                        .Select(m => new { m.Id, m.PhoneE164, m.PhoneRaw, m.Name })
                        .ToDictionaryAsync(
                            x => x.Id,
                            x => (Phone: string.IsNullOrWhiteSpace(x.PhoneE164) ? (x.PhoneRaw ?? "") : x.PhoneE164,
                                  Name: x.Name)
                        );

                // --- Ordered campaign buttons (align with template) ---
                var buttons = campaign.MultiButtons?
                    .Select((b, idx) => new { Btn = b, idx })
                    .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)
                    .ThenBy(x => x.idx)
                    .Select(x => x.Btn)
                    .ToList() ?? new List<CampaignButton>();

                int successCount = 0, failureCount = 0;
                var now = DateTime.UtcNow;

                foreach (var r in recipients)
                {
                    // Resolve phone + friendly name with Audience fallback
                    var phone = ResolveRecipientPhone(r);
                    string? name = r.Contact?.Name;

                    if (string.IsNullOrWhiteSpace(phone) && r.AudienceMemberId != null &&
                        audienceLookup.TryGetValue(r.AudienceMemberId.Value, out var a) &&
                        !string.IsNullOrWhiteSpace(a.Phone))
                    {
                        phone = a.Phone;
                        name ??= a.Name ?? "Customer";
                    }

                    if (string.IsNullOrWhiteSpace(phone))
                    {
                        failureCount++;
                        continue; // no destination
                    }

                    // Synthetic contact to avoid any null derefs downstream
                    var contactForTemplating = r.Contact ?? new Contact
                    {
                        Id = Guid.Empty,
                        BusinessId = businessId,
                        PhoneNumber = phone,
                        Name = name ?? "Customer"
                    };

                    // Per-recipient params (keep CSV/recipient overrides)
                    var resolvedParams = GetRecipientBodyParams(r, tmplMeta.PlaceholderCount, campaign.TemplateParameters);

                    // Hard guard: if template expects placeholders, refuse to send if any blank (prevents Meta 131008)
                    if (tmplMeta.PlaceholderCount > 0 && resolvedParams.Any(string.IsNullOrWhiteSpace))
                    {
                        failureCount++;

                        var why = $"Missing body parameter(s): expected {tmplMeta.PlaceholderCount}, got " +
                                  $"{resolvedParams.Count(x => !string.IsNullOrWhiteSpace(x))} filled.";

                        if (_context.Entry(r).State == EntityState.Detached) _context.Attach(r);
                        r.MaterializedAt = now;
                        r.UpdatedAt = now;
                        r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams);

                        var logIdLocal = Guid.NewGuid();
                        _context.MessageLogs.Add(new MessageLog
                        {
                            Id = logIdLocal,
                            BusinessId = businessId,
                            CampaignId = campaign.Id,
                            ContactId = r.ContactId,
                            RecipientNumber = phone,
                            MessageContent = templateName,
                            MediaUrl = campaign.ImageUrl,
                            Status = "Failed",
                            ErrorMessage = why,
                            RawResponse = "{\"local_error\":\"missing_template_body_params\"}",
                            CreatedAt = now,
                            Source = "campaign",
                            CTAFlowConfigId = campaign.CTAFlowConfigId,
                            CTAFlowStepId = entryStepId,
                            ButtonBundleJson = buttonBundleJson
                        });

                        await _context.CampaignSendLogs.AddAsync(new CampaignSendLog
                        {
                            Id = Guid.NewGuid(),
                            CampaignId = campaign.Id,
                            BusinessId = businessId,
                            ContactId = r.ContactId,
                            RecipientId = r.Id,
                            MessageBody = campaign.MessageBody ?? templateName,
                            TemplateId = templateName,
                            SendStatus = "Failed",
                            MessageLogId = logIdLocal,
                            ErrorMessage = why,
                            CreatedAt = now,
                            CTAFlowConfigId = campaign.CTAFlowConfigId,
                            CTAFlowStepId = entryStepId,
                            ButtonBundleJson = buttonBundleJson
                        });

                        continue;
                    }

                    // Build provider-style button components to freeze provider-resolved URLs
                    var runId = Guid.NewGuid();
                    var campaignSendLogId = Guid.NewGuid();
                    List<string> resolvedButtonUrls;

                    _ = (provider == "PINNACLE")
                        ? BuildImageTemplateComponents_Pinnacle(
                            campaign.ImageUrl, resolvedParams, buttons, tmplMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls)
                        : BuildImageTemplateComponents_Meta(
                            campaign.ImageUrl, resolvedParams, buttons, tmplMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls);

                    // Freeze recipient materialization BEFORE send
                    if (_context.Entry(r).State == EntityState.Detached) _context.Attach(r);
                    r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams);
                    r.ResolvedButtonUrlsJson = JsonConvert.SerializeObject(resolvedButtonUrls);
                    r.MaterializedAt = now;
                    r.UpdatedAt = now;
                    r.IdempotencyKey = Idempotency.Sha256(
                        $"{campaign.Id}|{phone}|{templateName}|{r.ResolvedParametersJson}|{r.ResolvedButtonUrlsJson}|{campaign.ImageUrl}|{campaign.ImageCaption}");

                    // Build DTO for engine (engine composes components from dto fields)
                    var dto = new ImageTemplateMessageDto
                    {
                        BusinessId = businessId,
                        Provider = provider,                 // <<< REQUIRED
                        PhoneNumberId = phoneNumberIdOverride,    // may be null ‚Üí provider default sender
                        RecipientNumber = phone,
                        TemplateName = templateName,
                        LanguageCode = languageCode,
                        HeaderImageUrl = campaign.ImageUrl,
                        TemplateBody = campaign.MessageBody,     // for RenderedBody
                        TemplateParameters = resolvedParams,
                        ButtonParameters = buttons.Take(3).Select(b => new CampaignButtonDto
                        {
                            ButtonText = b.Title,
                            ButtonType = b.Type,
                            TargetUrl = b.Value
                        }).ToList(),
                        CTAFlowConfigId = campaign.CTAFlowConfigId,
                        CTAFlowStepId = entryStepId
                    };

                    // Send via message engine
                    var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);

                    // Persist logs
                    var logId = Guid.NewGuid();
                    _context.MessageLogs.Add(new MessageLog
                    {
                        Id = logId,
                        BusinessId = businessId,
                        CampaignId = campaign.Id,
                        ContactId = r.ContactId,
                        RecipientNumber = phone,
                        MessageContent = templateName,
                        MediaUrl = campaign.ImageUrl,
                        Status = result.Success ? "Sent" : "Failed",
                        MessageId = result.MessageId,
                        ErrorMessage = result.ErrorMessage,
                        RawResponse = result.RawResponse,
                        CreatedAt = now,
                        SentAt = result.Success ? now : (DateTime?)null,
                        Source = "campaign",
                        CTAFlowConfigId = campaign.CTAFlowConfigId,
                        CTAFlowStepId = entryStepId,
                        ButtonBundleJson = buttonBundleJson,
                        RunId = runId
                    });

                    await _billingIngest.IngestFromSendResponseAsync(
                        businessId: businessId,
                        messageLogId: logId,
                        provider: provider,
                        rawResponseJson: result.RawResponse ?? "{}"
                    );

                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog
                    {
                        Id = campaignSendLogId,
                        CampaignId = campaign.Id,
                        BusinessId = businessId,
                        ContactId = r.ContactId,
                        RecipientId = r.Id,
                        MessageBody = campaign.MessageBody ?? templateName,
                        TemplateId = templateName,
                        SendStatus = result.Success ? "Sent" : "Failed",
                        MessageLogId = logId,
                        MessageId = result.MessageId,
                        ErrorMessage = result.ErrorMessage,
                        CreatedAt = now,
                        SentAt = result.Success ? now : (DateTime?)null,
                        CTAFlowConfigId = campaign.CTAFlowConfigId,
                        CTAFlowStepId = entryStepId,
                        ButtonBundleJson = buttonBundleJson,
                        RunId = runId
                    });

                    if (result.Success) successCount++; else failureCount++;
                }

                await _context.SaveChangesAsync();
                return ResponseResult.SuccessInfo($"üì§ Sent to {successCount} recipients. ‚ùå Failed for {failureCount}.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error while sending image template campaign");
                return ResponseResult.ErrorInfo("üö® Unexpected error while sending campaign.", ex.ToString());
            }
        }

        private List<object> BuildImageTemplateComponents_Pinnacle(
       string? imageUrl,
       List<string> templateParams,
       List<CampaignButton>? buttonList,
       TemplateMetadataDto templateMeta,
       Guid campaignSendLogId,
       Contact contact,
       out List<string> resolvedButtonUrls)
        {
            var components = new List<object>();
            resolvedButtonUrls = new List<string>();

            // Header
            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)
            {
                components.Add(new
                {
                    type = "header",
                    parameters = new object[]
                    {
                new { type = "image", image = new { link = imageUrl } }
                    }
                });
            }

            // Body
            if (templateMeta.PlaceholderCount > 0 && templateParams?.Count > 0)
            {
                components.Add(new
                {
                    type = "body",
                    parameters = templateParams.Select(p => new { type = "text", text = p }).ToArray()
                });
            }

            // Buttons
            if (buttonList == null || buttonList.Count == 0 ||
                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)
                return components;

            var total = Math.Min(3, Math.Min(buttonList.Count, templateMeta.ButtonParams.Count));

            // phone for optional {{1}}
            var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber) ? "" :
                        (contact.PhoneNumber.StartsWith("+") ? contact.PhoneNumber : "+" + contact.PhoneNumber);
            var encodedPhone = Uri.EscapeDataString(phone);

            for (int i = 0; i < total; i++)
            {
                var btn = buttonList[i];
                var meta = templateMeta.ButtonParams[i];
                var subtype = (meta.SubType ?? "url").ToLowerInvariant();
                var metaParam = meta.ParameterValue?.Trim() ?? string.Empty; // e.g. "/r/{{1}}"
                var isDynamic = metaParam.Contains("{{");

                if (!isDynamic)
                {
                    // static provider button at this index ‚Äî no parameters to send
                    components.Add(new Dictionary<string, object>
                    {
                        ["type"] = "button",
                        ["sub_type"] = subtype,
                        ["index"] = i
                    });
                    continue;
                }

                var valueRaw = btn?.Value?.Trim();
                if (string.IsNullOrWhiteSpace(valueRaw)) continue;

                // Optional phone substitution + body params {{n}}
                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>
                {
                    if (!int.TryParse(m.Groups[1].Value, out var n)) return "";
                    if (n == 1) return encodedPhone;
                    var idx = n - 1;
                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? "") : "";
                });

                // Track + token (same pattern as text path)
                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);
                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);

                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);
                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;

                components.Add(new Dictionary<string, object>
                {
                    ["type"] = "button",
                    ["sub_type"] = subtype,
                    ["index"] = i,
                    ["parameters"] = new[] { new Dictionary<string, object> { ["type"] = "text", ["text"] = valueToSend } }
                });

                // what the client will actually open once provider composes the URL
                var providerResolved = ReplaceAllPlaceholdersWith(metaParam, valueToSend);
                resolvedButtonUrls.Add(providerResolved);
            }

            return components;
        }


        private List<object> BuildImageTemplateComponents_Meta(
       string? imageUrl,
       List<string> templateParams,
       List<CampaignButton>? buttonList,
       TemplateMetadataDto templateMeta,
       Guid campaignSendLogId,
       Contact contact,
       out List<string> resolvedButtonUrls)
        {
            var components = new List<object>();
            resolvedButtonUrls = new List<string>();

            // Header
            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)
            {
                components.Add(new
                {
                    type = "header",
                    parameters = new[]
                    {
                new { type = "image", image = new { link = imageUrl } }
            }
                });
            }

            // Body
            if (templateMeta.PlaceholderCount > 0 && templateParams?.Count > 0)
            {
                components.Add(new
                {
                    type = "body",
                    parameters = templateParams.Select(p => new { type = "text", text = p }).ToArray()
                });
            }

            // Dynamic URL buttons only
            if (buttonList == null || buttonList.Count == 0 ||
                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)
                return components;

            var total = Math.Min(3, Math.Min(buttonList.Count, (templateMeta.ButtonParams?.Count() ?? 0)));
            var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber) ? "" :
                        (contact.PhoneNumber.StartsWith("+") ? contact.PhoneNumber : "+" + contact.PhoneNumber);
            var encodedPhone = Uri.EscapeDataString(phone);

            for (int i = 0; i < total; i++)
            {
                var meta = templateMeta.ButtonParams[i];
                var metaParam = meta.ParameterValue?.Trim();
                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains("{{");
                if (!isDynamic) continue;

                var btn = buttonList[i];
                var valueRaw = btn.Value?.Trim();
                if (string.IsNullOrWhiteSpace(valueRaw)) continue;

                var subtype = (meta.SubType ?? "url").ToLowerInvariant();

                // {{n}} substitution ({{1}} := phone)
                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>
                {
                    if (!int.TryParse(m.Groups[1].Value, out var n)) return "";
                    if (n == 1) return encodedPhone;
                    var idx = n - 1;
                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? "") : "";
                });

                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);
                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);

                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);
                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;

                components.Add(new Dictionary<string, object>
                {
                    ["type"] = "button",
                    ["sub_type"] = subtype,      // "url"
                    ["index"] = i.ToString(), // "0"/"1"/"2" for Meta
                    ["parameters"] = new[] { new Dictionary<string, object> { ["type"] = "text", ["text"] = valueToSend } }
                });

                var providerResolved = ReplaceAllPlaceholdersWith(metaParam ?? "", valueToSend);
                resolvedButtonUrls.Add(providerResolved);
            }

            return components;
        }







        #endregion

        #endregion

        // Features/CampaignModule/Services/CampaignsService.cs


        private List<object> BuildVideoTemplateComponents_Pinnacle(
            string? videoUrl,
            List<string> templateParams,
            List<CampaignButton>? buttonList,
            TemplateMetadataDto templateMeta,
            Guid campaignSendLogId,
            Contact contact)
        {
            var components = new List<object>();

            // --- Header (VIDEO) ---
            // TemplateMetadataDto has no HeaderType/HasVideoHeader ‚Üí emit header when URL is present.
            if (!string.IsNullOrWhiteSpace(videoUrl))
            {
                components.Add(new
                {
                    type = "header",
                    parameters = new object[]
                    {
                new { type = "video", video = new { link = videoUrl } }
                    }
                });
            }

            // --- Body ---
            var bodyCount = templateMeta?.PlaceholderCount ?? 0;
            if (templateParams != null && templateParams.Count > 0 && bodyCount > 0)
            {
                components.Add(new
                {
                    type = "body",
                    parameters = templateParams.Select(p => new { type = "text", text = p ?? string.Empty }).ToArray()
                });
            }

            // --- Buttons (URL buttons only; indexes 0..2) ---
            if (buttonList != null && buttonList.Count > 0)
            {
                components.AddRange(BuildPinnacleUrlButtons(buttonList));
            }

            return components;
        }

        // Works with either CampaignButton (Type/Value) or CampaignButtonDto (ButtonType/TargetUrl).
        private static IEnumerable<object> BuildPinnacleUrlButtons(IEnumerable<object> rawButtons)
        {
            // keep incoming order; cap at 3
            var ordered = (rawButtons ?? Enumerable.Empty<object>()).Take(3).ToList();
            var n = ordered is ICollection<object> col ? col.Count : ordered.Count();

            for (int i = 0; i < n; i++)
            {
                var b = ordered[i];

                // Try to read "Type" or "ButtonType"
                var typeProp = b.GetType().GetProperty("Type") ?? b.GetType().GetProperty("ButtonType");
                var typeVal = (typeProp?.GetValue(b) as string)?.Trim().ToLowerInvariant() ?? "url";
                if (typeVal != "url") continue;

                // Try to read "Value" (CampaignButton) or "TargetUrl" (CampaignButtonDto)
                var valueProp = b.GetType().GetProperty("Value") ?? b.GetType().GetProperty("TargetUrl");
                var paramText = (valueProp?.GetValue(b) as string) ?? string.Empty;

                // If there is a per-recipient URL param, include it; otherwise emit static URL button (no parameters).
                if (!string.IsNullOrWhiteSpace(paramText))
                {
                    yield return new
                    {
                        type = "button",
                        sub_type = "url",
                        index = i, // 0-based
                        parameters = new object[]
                        {
                    new { type = "text", text = paramText }
                        }
                    };
                }
                else
                {
                    yield return new
                    {
                        type = "button",
                        sub_type = "url",
                        index = i
                    };
                }
            }
        }

        private static List<object> BuildVideoTemplateComponents_Meta(
                string? videoUrl,
                List<string>? templateParams,
                List<CampaignButtonDto>? buttonParams,
                TemplateMetadataDto? templateMeta)
        {
            var components = new List<object>();

            // We‚Äôre in the VIDEO sender path, so add header only if a URL is present.
            if (!string.IsNullOrWhiteSpace(videoUrl))
            {
                components.Add(new
                {
                    type = "header",
                    parameters = new object[]
                    {
                new { type = "video", video = new { link = videoUrl } }
                    }
                });
            }

            // Body placeholders: use meta.PlaceholderCount if available, otherwise list length.
            var bodyCount = templateMeta?.PlaceholderCount ?? templateParams?.Count ?? 0;
            if (bodyCount > 0 && (templateParams?.Count ?? 0) > 0)
            {
                components.Add(new
                {
                    type = "body",
                    parameters = templateParams!.Select(p => new { type = "text", text = p ?? string.Empty }).ToArray()
                });
            }

            // Buttons (URL buttons only). See helper below.
            if (buttonParams != null && buttonParams.Count > 0)
            {
                components.AddRange(BuildMetaTemplateButtons(buttonParams, templateMeta));
            }

            return components;
        }


        // CampaignButtonDto (your real one)

        private static IEnumerable<object> BuildMetaTemplateButtons(
            List<CampaignButtonDto> buttons,
            TemplateMetadataDto? templateMeta)   // meta unused here; kept for future expansion
        {
            // Keep incoming order; cap at 3
            var ordered = (buttons ?? new List<CampaignButtonDto>())
                .Take(3)
                .ToList();

            // Avoid Count ambiguity by caching n
            int n = ordered is ICollection<CampaignButtonDto> col ? col.Count : ordered.Count();

            for (int i = 0; i < n; i++)
            {
                var b = ordered[i];

                // Only URL buttons are supported for parameterized Meta buttons
                var isUrl = string.Equals(b?.ButtonType, "url", StringComparison.OrdinalIgnoreCase);
                if (!isUrl) continue;

                // If we have a per-recipient param (TargetUrl), include a parameter; else emit static button
                var paramText = b?.TargetUrl ?? string.Empty;
                var needsParam = !string.IsNullOrWhiteSpace(paramText);

                if (needsParam)
                {
                    yield return new
                    {
                        type = "button",
                        sub_type = "url",
                        index = i, // Meta uses 0-based indexes
                        parameters = new object[]
                        {
                    new { type = "text", text = paramText }
                        }
                    };
                }
                else
                {
                    yield return new
                    {
                        type = "button",
                        sub_type = "url",
                        index = i
                    };
                }
            }
        }




        public async Task<List<FlowListItemDto>> GetAvailableFlowsAsync(Guid businessId, bool onlyPublished = true)
        {
            return await _context.CTAFlowConfigs
                .AsNoTracking()
                .Where(f => f.BusinessId == businessId && f.IsActive && (!onlyPublished || f.IsPublished))
                .OrderByDescending(f => f.UpdatedAt)
                .Select(f => new FlowListItemDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    IsPublished = f.IsPublished
                })
                .ToListAsync();
        }
        // ===================== DRY RUN (Step 2.3) =====================

        public async Task<CampaignDryRunResponseDto> DryRunTemplateCampaignAsync(Guid campaignId, int maxRecipients = 20)
        {
            var resp = new CampaignDryRunResponseDto { CampaignId = campaignId };

            // Load campaign + recipients (+Contact +AudienceMember) + buttons
            var campaign = await _context.Campaigns
                .Include(c => c.Recipients).ThenInclude(r => r.Contact)
                .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)
                .Include(c => c.MultiButtons)
                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);

            if (campaign == null)
            {
                resp.Notes.Add("Campaign not found.");
                return resp;
            }

            resp.CampaignType = campaign.CampaignType ?? "text";

            // Resolve entry template name from flow if present, else fall back
            var (_, entryTemplate) = await ResolveFlowEntryAsync(campaign.BusinessId, campaign.CTAFlowConfigId);
            var templateName = !string.IsNullOrWhiteSpace(entryTemplate)
                ? entryTemplate!
                : (campaign.TemplateId ?? campaign.MessageTemplate ?? "");

            if (string.IsNullOrWhiteSpace(templateName))
            {
                resp.Notes.Add("Template name is missing.");
                return resp;
            }

            // Fetch provider template metadata once (language, placeholders, button schema)
            var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(
                campaign.BusinessId, templateName, includeButtons: true);

            resp.TemplateName = templateName;

            if (templateMeta == null)
            {
                resp.Notes.Add($"Template metadata not found for business. Name='{templateName}'.");
                return resp;
            }

            resp.Language = (templateMeta.Language ?? "").Trim();
            resp.HasHeaderMedia = templateMeta.HasImageHeader;

            if (string.IsNullOrWhiteSpace(resp.Language))
                resp.Notes.Add("Template language is not specified on metadata.");

            // Ensure non-null param list for builders (snapshot provided params)
            var providedParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters)
                                 ?? new List<string>();

            resp.RequiredPlaceholders = Math.Max(0, templateMeta.PlaceholderCount);
            resp.ProvidedPlaceholders = providedParams.Count;

            if (resp.RequiredPlaceholders != resp.ProvidedPlaceholders)
                resp.Notes.Add($"Placeholder mismatch: template requires {resp.RequiredPlaceholders}, provided {resp.ProvidedPlaceholders}. Consider re-snapshotting parameters.");

            // Dynamic URL button check (template expects params) vs campaign button values
            var templButtons = templateMeta.ButtonParams ?? new List<ButtonMetadataDto>();
            bool templateHasDynamicUrl = templButtons.Any(b =>
                string.Equals(b.SubType ?? "url", "url", StringComparison.OrdinalIgnoreCase) &&
                !string.IsNullOrWhiteSpace(b.ParameterValue) &&
                b.ParameterValue!.Contains("{{"));

            if (templateHasDynamicUrl)
            {
                var hasCampaignUrlValues = (campaign.MultiButtons ?? new List<CampaignButton>())
                    .Any(cb => !string.IsNullOrWhiteSpace(cb.Value));
                if (!hasCampaignUrlValues)
                    resp.Notes.Add("Template defines dynamic URL button(s) with placeholders, but campaign has no URL button values configured.");
            }

            // Provider normalization for preview
            var provider = (campaign.Provider ?? "META_CLOUD").Trim().ToUpperInvariant();
            if (provider != "PINNACLE" && provider != "META_CLOUD")
            {
                resp.Notes.Add($"Invalid provider on campaign: '{campaign.Provider}'. Dry run will assume META_CLOUD.");
                provider = "META_CLOUD";
            }

            // Slice some recipients (prefer latest activity; CreatedAt is not on CampaignRecipient)
            var recipients = (campaign.Recipients ?? new List<CampaignRecipient>())
     .OrderByDescending(r => (DateTime?)r.UpdatedAt
                              ?? r.MaterializedAt
                              ?? r.SentAt
                              ?? DateTime.MinValue)
     .Take(Math.Clamp(maxRecipients, 1, 200))
     .ToList();

            resp.RecipientsConsidered = recipients.Count;

            // Helper: resolve a phone for a recipient
            static string? ResolveRecipientPhone(CampaignRecipient r) =>
                r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;

            int okCount = 0, errCount = 0;

            foreach (var r in recipients)
            {
                var phoneResolved = ResolveRecipientPhone(r) ?? "";
                var contactName = r.Contact?.Name ?? r.AudienceMember?.Name;

                var one = new CampaignDryRunRecipientResultDto
                {
                    ContactId = r.ContactId,
                    ContactName = contactName,
                    PhoneNumber = phoneResolved
                };

                // Phone checks (presence + basic shape)
                var phone = (one.PhoneNumber ?? string.Empty).Trim();
                if (string.IsNullOrEmpty(phone))
                {
                    one.Errors.Add("Recipient phone missing (no Contact and no AudienceMember phone).");
                }
                else if (!Regex.IsMatch(phone, @"^\+?\d{8,15}$"))
                {
                    one.Warnings.Add("Recipient phone may be invalid (basic format check failed).");
                }

                try
                {
                    // Always synthesize a contact to avoid null derefs in builders
                    var contactForTemplating = r.Contact ?? new Contact
                    {
                        Id = Guid.Empty,
                        BusinessId = campaign.BusinessId,
                        PhoneNumber = phoneResolved,
                        Name = contactName ?? "Customer"
                    };

                    // Buttons ordered like send path: by Position then original index; limit 3
                    var buttons = (campaign.MultiButtons ?? new List<CampaignButton>())
                        .Select((b, idx) => new { Btn = b, idx })
                        .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)
                        .ThenBy(x => x.idx)
                        .Select(x => x.Btn)
                        .Take(3)
                        .ToList();

                    // Build components for preview (match send path) ‚Äî single call, discard out URLs
                    List<object> components;
                    var isImage = (campaign.CampaignType ?? "text")
                        .Equals("image", StringComparison.OrdinalIgnoreCase);

                    if (isImage)
                    {
                        components = (provider == "PINNACLE")
                            ? BuildImageTemplateComponents_Pinnacle(
                                campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _)
                            : BuildImageTemplateComponents_Meta(
                                campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _);
                    }
                    else
                    {
                        components = (provider == "PINNACLE")
                            ? BuildTextTemplateComponents_Pinnacle(
                                providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _)
                            : BuildTextTemplateComponents_Meta(
                                providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _);
                    }

                    // Additional validations like the send path: blank required params
                    if (templateMeta.PlaceholderCount > 0 &&
                        (providedParams.Count < templateMeta.PlaceholderCount ||
                         providedParams.Take(templateMeta.PlaceholderCount).Any(string.IsNullOrWhiteSpace)))
                    {
                        one.Errors.Add($"Missing body parameter(s): template requires {templateMeta.PlaceholderCount}, provided {providedParams.Count} (or some blank).");
                    }

                    one.ProviderComponents = components;
                    one.WouldSend = one.Errors.Count == 0;
                    if (one.WouldSend) okCount++; else errCount++;
                }
                catch (Exception ex)
                {
                    one.Errors.Add(ex.Message);
                    one.WouldSend = false;
                    errCount++;
                }

                resp.Results.Add(one);
            }

            resp.WouldSendCount = okCount;
            resp.ErrorCount = errCount;

            // Billability (best-effort)
            resp.EstimatedChargeable = true;
            resp.EstimatedConversationCategory = "template_outbound";
            if (!resp.Notes.Any(n => n.Contains("Template messages are typically chargeable")))
                resp.Notes.Add("Estimation: Template messages are typically chargeable and start a new conversation unless covered by free-entry flows.");

            return resp;
        }

        //public async Task<CampaignDryRunResponseDto> DryRunTemplateCampaignAsync(Guid campaignId, int maxRecipients = 20)
        //{
        //    var resp = new CampaignDryRunResponseDto { CampaignId = campaignId };

        //    // Load campaign + recipients (+Contact +AudienceMember) + buttons
        //    var campaign = await _context.Campaigns
        //        .Include(c => c.Recipients).ThenInclude(r => r.Contact)
        //        .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)
        //        .Include(c => c.MultiButtons)
        //        .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);

        //    if (campaign == null)
        //    {
        //        resp.Notes.Add("Campaign not found.");
        //        return resp;
        //    }

        //    resp.CampaignType = campaign.CampaignType ?? "text";

        //    // Resolve entry template name from flow if present, else fall back
        //    var (_, entryTemplate) = await ResolveFlowEntryAsync(campaign.BusinessId, campaign.CTAFlowConfigId);
        //    var templateName = !string.IsNullOrWhiteSpace(entryTemplate)
        //        ? entryTemplate!
        //        : (campaign.TemplateId ?? campaign.MessageTemplate ?? "");

        //    if (string.IsNullOrWhiteSpace(templateName))
        //    {
        //        resp.Notes.Add("Template name is missing.");
        //        return resp;
        //    }

        //    // Fetch provider template metadata once (language, placeholders, button schema)
        //    var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(
        //        campaign.BusinessId, templateName, includeButtons: true);

        //    resp.TemplateName = templateName;

        //    if (templateMeta == null)
        //    {
        //        resp.Notes.Add($"Template metadata not found for business. Name='{templateName}'.");
        //        return resp;
        //    }

        //    resp.Language = (templateMeta.Language ?? "").Trim();
        //    resp.HasHeaderMedia = templateMeta.HasImageHeader;

        //    if (string.IsNullOrWhiteSpace(resp.Language))
        //        resp.Notes.Add("Template language is not specified on metadata.");

        //    // Ensure non-null param list for builders (snapshot provided params)
        //    var providedParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters)
        //                         ?? new List<string>();

        //    resp.RequiredPlaceholders = Math.Max(0, templateMeta.PlaceholderCount);
        //    resp.ProvidedPlaceholders = providedParams.Count;

        //    if (resp.RequiredPlaceholders != resp.ProvidedPlaceholders)
        //        resp.Notes.Add($"Placeholder mismatch: template requires {resp.RequiredPlaceholders}, provided {resp.ProvidedPlaceholders}. Consider re-snapshotting parameters.");

        //    // Dynamic URL button check (template expects params) vs campaign button values
        //    var templButtons = templateMeta.ButtonParams ?? new List<ButtonMetadataDto>();
        //    bool templateHasDynamicUrl = templButtons.Any(b =>
        //        string.Equals(b.SubType ?? "url", "url", StringComparison.OrdinalIgnoreCase) &&
        //        !string.IsNullOrWhiteSpace(b.ParameterValue) &&
        //        b.ParameterValue!.Contains("{{"));

        //    if (templateHasDynamicUrl)
        //    {
        //        var hasCampaignUrlValues = (campaign.MultiButtons ?? new List<CampaignButton>())
        //            .Any(cb => !string.IsNullOrWhiteSpace(cb.Value));
        //        if (!hasCampaignUrlValues)
        //            resp.Notes.Add("Template defines dynamic URL button(s) with placeholders, but campaign has no URL button values configured.");
        //    }

        //    // Provider normalization for preview
        //    var provider = (campaign.Provider ?? "META_CLOUD").Trim().ToUpperInvariant();
        //    if (provider != "PINNACLE" && provider != "META_CLOUD")
        //    {
        //        resp.Notes.Add($"Invalid provider on campaign: '{campaign.Provider}'. Dry run will assume META_CLOUD.");
        //        provider = "META_CLOUD";
        //    }

        //    // Slice some recipients (prefer most recently updated)
        //    var recipients = (campaign.Recipients ?? new List<CampaignRecipient>())
        //        .OrderByDescending(r => r.UpdatedAt ?? r.CreatedAt)
        //        .Take(Math.Clamp(maxRecipients, 1, 200))
        //        .ToList();

        //    resp.RecipientsConsidered = recipients.Count;

        //    // Helper: resolve a phone for a recipient
        //    static string? ResolveRecipientPhone(CampaignRecipient r) =>
        //        r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;

        //    int okCount = 0, errCount = 0;

        //    foreach (var r in recipients)
        //    {
        //        var phoneResolved = ResolveRecipientPhone(r) ?? "";
        //        var contactName = r.Contact?.Name ?? r.AudienceMember?.Name;

        //        var one = new CampaignDryRunRecipientResultDto
        //        {
        //            ContactId = r.ContactId,
        //            ContactName = contactName,
        //            PhoneNumber = phoneResolved
        //        };

        //        // Phone checks (presence + basic shape)
        //        var phone = (one.PhoneNumber ?? string.Empty).Trim();
        //        if (string.IsNullOrEmpty(phone))
        //        {
        //            one.Errors.Add("Recipient phone missing (no Contact and no AudienceMember phone).");
        //        }
        //        else if (!Regex.IsMatch(phone, @"^\+?\d{8,15}$"))
        //        {
        //            one.Warnings.Add("Recipient phone may be invalid (basic format check failed).");
        //        }

        //        try
        //        {
        //            // Always synthesize a contact to avoid null derefs in builders
        //            var contactForTemplating = r.Contact ?? new Contact
        //            {
        //                Id = Guid.Empty,
        //                BusinessId = campaign.BusinessId,
        //                PhoneNumber = phoneResolved,
        //                Name = contactName ?? "Customer"
        //            };

        //            // Buttons ordered like send path: by Position then original index; limit 3
        //            var buttons = (campaign.MultiButtons ?? new List<CampaignButton>())
        //                .Select((b, idx) => new { Btn = b, idx })
        //                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)
        //                .ThenBy(x => x.idx)
        //                .Select(x => x.Btn)
        //                .Take(3)
        //                .ToList();

        //            // Build components for preview (match send path)
        //            List<object> components;
        //            var isImage = (campaign.CampaignType ?? "text")
        //                .Equals("image", StringComparison.OrdinalIgnoreCase);

        //            if (isImage)
        //            {
        //                // use the image builders; discard resolvedButtonUrls for dry run
        //                _ = (provider == "PINNACLE")
        //                    ? BuildImageTemplateComponents_Pinnacle(
        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _)
        //                    : BuildImageTemplateComponents_Meta(
        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _);

        //                // We need the components object; the builders return it
        //                components = (provider == "PINNACLE")
        //                    ? BuildImageTemplateComponents_Pinnacle(
        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var __)
        //                    : BuildImageTemplateComponents_Meta(
        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var ___);
        //            }
        //            else
        //            {
        //                components = (provider == "PINNACLE")
        //                    ? BuildTextTemplateComponents_Pinnacle(
        //                        providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _)
        //                    : BuildTextTemplateComponents_Meta(
        //                        providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _);
        //            }

        //            // Additional validations like the send path: blank required params
        //            if (templateMeta.PlaceholderCount > 0 &&
        //                (providedParams.Count < templateMeta.PlaceholderCount ||
        //                 providedParams.Take(templateMeta.PlaceholderCount).Any(string.IsNullOrWhiteSpace)))
        //            {
        //                one.Errors.Add($"Missing body parameter(s): template requires {templateMeta.PlaceholderCount}, provided {providedParams.Count} (or some blank).");
        //            }

        //            one.ProviderComponents = components;
        //            one.WouldSend = one.Errors.Count == 0;
        //            if (one.WouldSend) okCount++; else errCount++;
        //        }
        //        catch (Exception ex)
        //        {
        //            one.Errors.Add(ex.Message);
        //            one.WouldSend = false;
        //            errCount++;
        //        }

        //        resp.Results.Add(one);
        //    }

        //    resp.WouldSendCount = okCount;
        //    resp.ErrorCount = errCount;

        //    // Billability (best-effort)
        //    resp.EstimatedChargeable = true;
        //    resp.EstimatedConversationCategory = "template_outbound";
        //    if (!resp.Notes.Any(n => n.Contains("Template messages are typically chargeable")))
        //        resp.Notes.Add("Estimation: Template messages are typically chargeable and start a new conversation unless covered by free-entry flows.");

        //    return resp;
        //}

        // in your CampaignService (same file as SendVideoTemplateCampaignAsync)
        private static List<CampaignButtonDto> MapButtonVarsToButtonDtos(Dictionary<string, string>? vars)
        {
            var list = new List<CampaignButtonDto>();
            if (vars == null || vars.Count == 0) return list;

            // We only care about URL buttons 1..3; take the param text
            for (var i = 1; i <= 3; i++)
            {
                if (vars.TryGetValue($"button{i}.url_param", out var param) && !string.IsNullOrWhiteSpace(param))
                {
                    list.Add(new CampaignButtonDto
                    {
                        ButtonText = $"Button {i}",   // optional; purely cosmetic
                        ButtonType = "url",
                        TargetUrl = param
                    });
                }
            }
            return list;
        }
        private async Task<ResponseResult> SendDocumentTemplateCampaignAsync(Campaign campaign)
        {
            var sw = System.Diagnostics.Stopwatch.StartNew();
            _logger.LogInformation("[DocSend] Begin. campaignId={CampaignId}", campaign.Id);

            // force an IEnumerable ‚Üí List and use a distinct name to avoid symbol collisions
            var recipientsList = (campaign.Recipients ?? Enumerable.Empty<CampaignRecipient>())
                    .Where(r =>
                    !string.IsNullOrWhiteSpace(r.Contact?.PhoneNumber) ||
                    !string.IsNullOrWhiteSpace(r.AudienceMember?.PhoneE164))
                         .ToList();

            // Use Any() (robust even if someone shadows Count somewhere)
            if (!recipientsList.Any())
                return ResponseResult.ErrorInfo("‚ö†Ô∏è No valid recipients with phone numbers.");

            var templateName = campaign.MessageTemplate;
            var languageCode = "en_US"; // keep consistent with your image/video path
            var provider = (campaign.Provider ?? "META").ToUpperInvariant();
            var phoneNumberId = campaign.PhoneNumberId;

            // optional static fallback (we don't have Campaign.DocumentUrl in this branch)
            var staticDocUrl = campaign.ImageUrl;

            var ok = 0; var fail = 0;

            foreach (var r in recipientsList)
            {
                var to = r.Contact?.PhoneNumber ?? r.AudienceMember?.PhoneE164 ?? "";
                if (string.IsNullOrWhiteSpace(to)) continue;

                try
                {
                    // These helpers were added earlier:
                    var templateParams = BuildBodyParametersForRecipient(campaign, r);
                    var buttonVars = BuildButtonParametersForRecipient(campaign, r);
                    var buttonsDto = MapButtonVarsToButtonDtos(buttonVars);
                    // Per-recipient doc header; no campaign-level DocumentUrl in this branch
                    var headerDocUrl = ResolvePerRecipientValue(r, "header.document_url") ?? staticDocUrl;

                    var dto = new DocumentTemplateMessageDto
                    {
                        BusinessId = campaign.BusinessId,
                        RecipientNumber = to,
                        TemplateName = templateName,
                        LanguageCode = languageCode,
                        HeaderDocumentUrl = headerDocUrl,
                        // match your DTO property names exactly ‚Äî use the ones your MessageEngine expects:
                        Parameters = templateParams,   // or TemplateParameters if that's your DTO
                        Buttons = buttonsDto,      // or ButtonParameters if that's your DTO
                        Provider = provider,
                        PhoneNumberId = phoneNumberId,
                        CTAFlowConfigId = campaign.CTAFlowConfigId,
                        TemplateBody = campaign.MessageBody
                    };

                    var sent = await _messageEngineService.SendDocumentTemplateMessageAsync(dto, campaign.BusinessId);
                    var success = sent.Success;

                    if (success) ok++; else fail++;

                    await LogSendAsync(campaign, r, to, provider, success, headerDocUrl, "document");
                    _logger.LogInformation("[DocSend] to={To} success={Success}", to, success);
                }
                catch (Exception ex)
                {
                    fail++;
                    _logger.LogError(ex, "[DocSend] failed to={To}", to);
                    await LogSendAsync(campaign, r, to, provider, false, staticDocUrl, "document", ex.Message);
                }
            }

            sw.Stop();
            var msg = $"Document campaign finished. Success={ok}, Failed={fail}";
            _logger.LogInformation("[DocSend] Done. campaignId={CampaignId} {Msg}", campaign.Id, msg);

            return fail == 0 ? ResponseResult.SuccessInfo(msg) : ResponseResult.ErrorInfo(msg);
        }
        private Task LogSendAsync(
                    Campaign campaign,
                    CampaignRecipient recipient,
                    string to,
                    string provider,
                    bool success,
                    string? headerUrl,
                    string channel,
                    string? error = null)
        {
            _logger.LogInformation(
                "[SendLog] campaignId={CampaignId} to={To} provider={Provider} channel={Channel} success={Success} headerUrl={HeaderUrl} error={Error}",
                campaign.Id, to, provider, channel, success, headerUrl, error);

            // If/when you have a CampaignSendLogs table, insert there instead.
            return Task.CompletedTask;
        }



        private static string[] ReadResolvedParams(CampaignRecipient r)
        {
            var s = r?.ResolvedParametersJson;
            if (string.IsNullOrWhiteSpace(s)) return Array.Empty<string>();
            try
            {
                return JsonConvert.DeserializeObject<string[]>(s) ?? Array.Empty<string>();
            }
            catch
            {
                return Array.Empty<string>();
            }
        }

        private static Dictionary<string, string> ReadResolvedButtonVars(CampaignRecipient r)
        {
            var s = r?.ResolvedButtonUrlsJson;
            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            if (string.IsNullOrWhiteSpace(s)) return dict;
            try
            {
                return JsonConvert.DeserializeObject<Dictionary<string, string>>(s)
                       ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            }
            catch
            {
                return dict;
            }
        }

        // Optional: unified accessor for header media (image/video/document) if your materializer
        // saved canonical keys like "header.image_url" / "header.video_url" / "header.document_url".
        private static string? TryGetHeaderMedia(Dictionary<string, string> vars, params string[] keys)
        {
            foreach (var k in keys)
                if (!string.IsNullOrWhiteSpace(k) && vars.TryGetValue(k, out var v) && !string.IsNullOrWhiteSpace(v))
                    return v;
            return null;
        }

        public Task<object> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId)
        {
            throw new NotImplementedException();
        }
    }


}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CsvBatchService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public class CsvBatchService : ICsvBatchService
    {
        private readonly AppDbContext _db;

        public CsvBatchService(AppDbContext db)
        {
            _db = db;
        }

        // ----------------------------
        // Upload + ingest
        // ----------------------------
        public async Task<CsvBatchUploadResultDto> CreateAndIngestAsync(
            Guid businessId,
            string fileName,
            Stream stream,
            Guid? audienceId = null,
            CancellationToken ct = default)
        {
            // 1) Create batch shell
            var batch = new CsvBatch
            {
                Id = Guid.NewGuid(),
                BusinessId = businessId,
                AudienceId = audienceId,          // nullable by design (ok if null)
                FileName = fileName,
                CreatedAt = DateTime.UtcNow,
                Status = "ingesting",
                RowCount = 0,
                SkippedCount = 0,
                HeadersJson = null
            };

            _db.CsvBatches.Add(batch);
            await _db.SaveChangesAsync(ct);

            try
            {
                // 2) Parse headers + rows (robust CSV parsing)
                stream.Position = 0;
                using var reader = new StreamReader(stream, Encoding.UTF8, detectEncodingFromByteOrderMarks: true, bufferSize: 1024, leaveOpen: true);

                string? headerLine = await reader.ReadLineAsync();
                if (string.IsNullOrWhiteSpace(headerLine))
                {
                    // No header line ‚Üí fall back to single "phone" column
                    var headers = new List<string> { "phone" };
                    batch.HeadersJson = JsonSerializer.Serialize(headers);
                    batch.Status = "ready";
                    await _db.SaveChangesAsync(ct);

                    Log.Warning("CSV had no header line. Created batch {BatchId} with fallback 'phone' header.", batch.Id);

                    return new CsvBatchUploadResultDto
                    {
                        BatchId = batch.Id,
                        AudienceId = batch.AudienceId,
                        FileName = batch.FileName ?? string.Empty,
                        RowCount = 0,
                        Headers = headers
                    };
                }

                var delim = DetectDelimiter(headerLine);
                var headersParsed = ParseCsvLine(headerLine, delim)
                    .Select(h => h.Trim())
                    .Where(h => !string.IsNullOrEmpty(h))
                    .ToList();

                if (headersParsed.Count == 0)
                    headersParsed = new List<string> { "phone" };

                batch.HeadersJson = JsonSerializer.Serialize(headersParsed);
                await _db.SaveChangesAsync(ct);

                // 3) Stream rows into CsvRows
                var rowsBuffer = new List<CsvRow>(capacity: 1024);
                int rowIndex = 0;

                while (!reader.EndOfStream)
                {
                    var line = await reader.ReadLineAsync();
                    if (line is null) break;
                    if (string.IsNullOrWhiteSpace(line)) continue;

                    var cols = ParseCsvLine(line, delim);

                    var dict = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);
                    for (int i = 0; i < headersParsed.Count; i++)
                    {
                        var key = headersParsed[i];
                        var val = i < cols.Count ? cols[i]?.Trim() : null;
                        dict[key] = val;
                    }

                    rowsBuffer.Add(new CsvRow
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = businessId,           // IMPORTANT for later queries
                        BatchId = batch.Id,
                        RowIndex = rowIndex++,
                        DataJson = JsonSerializer.Serialize(dict)
                    });

                    if (rowsBuffer.Count >= 1000)
                    {
                        _db.CsvRows.AddRange(rowsBuffer);
                        await _db.SaveChangesAsync(ct);
                        rowsBuffer.Clear();
                    }
                }

                if (rowsBuffer.Count > 0)
                {
                    _db.CsvRows.AddRange(rowsBuffer);
                    await _db.SaveChangesAsync(ct);
                    rowsBuffer.Clear();
                }

                batch.RowCount = rowIndex;
                batch.Status = "ready";
                await _db.SaveChangesAsync(ct);

                Log.Information("CsvBatch {BatchId} ingested: {Rows} rows; headers={HeaderCount}", batch.Id, batch.RowCount, headersParsed.Count);

                return new CsvBatchUploadResultDto
                {
                    BatchId = batch.Id,
                    AudienceId = batch.AudienceId,
                    FileName = batch.FileName ?? string.Empty,
                    RowCount = batch.RowCount,
                    Headers = headersParsed
                };
            }
            catch (Exception ex)
            {
                batch.Status = "failed";
                batch.ErrorMessage = ex.Message;
                await _db.SaveChangesAsync(ct);
                Log.Error(ex, "CSV ingest failed for batch {BatchId}", batch.Id);
                throw;
            }
        }

        // ----------------------------
        // Batch info
        // ----------------------------
        private async Task<CsvBatchUploadResultDto> IngestCoreAsync(
            Guid businessId,
            string fileName,
            Stream stream,
            CancellationToken ct)
        {
            // Minimal ‚Äústage only‚Äù helper (kept in case other code calls it)
            var batch = new CsvBatch
            {
                Id = Guid.NewGuid(),
                BusinessId = businessId,
                FileName = fileName,
                CreatedAt = DateTime.UtcNow,
                Status = "ready",
                HeadersJson = null,
                RowCount = 0,
                SkippedCount = 0,
                ErrorMessage = null
            };
            _db.CsvBatches.Add(batch);
            await _db.SaveChangesAsync(ct);

            Log.Information("CsvBatch {BatchId} staged for business {Biz}", batch.Id, businessId);

            return new CsvBatchUploadResultDto
            {
                BatchId = batch.Id,
                AudienceId = null,
                FileName = fileName,
                RowCount = 0,
                Headers = new List<string>(),
                Message = "CSV batch created."
            };
        }

        public async Task<CsvBatchInfoDto?> GetBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)
        {
            var batch = await _db.CsvBatches
                .AsNoTracking()
                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);

            if (batch == null) return null;

            var headers = SafeParseHeaderArray(batch.HeadersJson);

            return new CsvBatchInfoDto
            {
                BatchId = batch.Id,
                AudienceId = batch.AudienceId,
                RowCount = batch.RowCount,
                Headers = headers,
                CreatedAt = batch.CreatedAt
            };
        }

        // ----------------------------
        // Samples (single implementation)
        // ----------------------------
        public async Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(
            Guid businessId,
            Guid batchId,
            int take = 20,
            CancellationToken ct = default)
        {
            if (take <= 0) take = 20;
            if (take > 100) take = 100;

            var batch = await _db.CsvBatches
                .AsNoTracking()
                .Where(b => b.Id == batchId && b.BusinessId == businessId)
                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })
                .FirstOrDefaultAsync(ct);

            if (batch is null)
                throw new KeyNotFoundException("Batch not found.");

            // If no rows yet, return empty samples gracefully
            if (batch.RowCount <= 0)
                return Array.Empty<CsvRowSampleDto>();

            var headerList = SafeParseHeaderArray(batch.HeadersJson);

            var rows = await _db.CsvRows
                .AsNoTracking()
                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)
                .OrderBy(r => r.RowIndex)
                .Take(take)
                .Select(r => new { r.RowIndex, r.DataJson })
                .ToListAsync(ct);

            var result = new List<CsvRowSampleDto>(rows.Count);
            foreach (var r in rows)
            {
                var dict = SafeParseDict(r.DataJson);

                // Ensure consistent header order (fill missing with null)
                var ordered = new Dictionary<string, string?>(headerList.Count, StringComparer.OrdinalIgnoreCase);
                foreach (var h in headerList)
                {
                    dict.TryGetValue(h, out var v);
                    ordered[h] = v;
                }

                result.Add(new CsvRowSampleDto
                {
                    RowIndex = r.RowIndex,
                    Data = ordered
                });
            }

            return result;
        }

        // ----------------------------
        // List / Page / Delete / Validate
        // ----------------------------
        public async Task<List<CsvBatchListItemDto>> ListBatchesAsync(Guid businessId, int limit = 20, CancellationToken ct = default)
        {
            if (limit <= 0) limit = 20;
            if (limit > 100) limit = 100;

            return await _db.CsvBatches
                .AsNoTracking()
                .Where(b => b.BusinessId == businessId)
                .OrderByDescending(b => b.CreatedAt)
                .Take(limit)
                .Select(b => new CsvBatchListItemDto
                {
                    BatchId = b.Id,
                    FileName = b.FileName,
                    RowCount = b.RowCount,
                    Status = b.Status,
                    CreatedAt = b.CreatedAt
                })
                .ToListAsync(ct);
        }

        public async Task<CsvBatchRowsPageDto> GetRowsPageAsync(Guid businessId, Guid batchId, int skip, int take, CancellationToken ct = default)
        {
            if (take <= 0) take = 50;
            if (take > 200) take = 200;
            if (skip < 0) skip = 0;

            var exists = await _db.CsvBatches.AsNoTracking()
                .AnyAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);
            if (!exists) throw new KeyNotFoundException("CSV batch not found.");

            var total = await _db.CsvRows.AsNoTracking()
                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)
                .CountAsync(ct);

            var rows = await _db.CsvRows.AsNoTracking()
                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)
                .OrderBy(r => r.RowIndex)
                .Skip(skip)
                .Take(take)
                .Select(r => new CsvRowSampleDto
                {
                    RowIndex = r.RowIndex,
                    Data = SafeParseDict(r.DataJson)
                })
                .ToListAsync(ct);

            return new CsvBatchRowsPageDto
            {
                BatchId = batchId,
                TotalRows = total,
                Skip = skip,
                Take = take,
                Rows = rows
            };
        }

        public async Task<bool> DeleteBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)
        {
            var batch = await _db.CsvBatches
                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);

            if (batch == null) return false;

            using var tx = await _db.Database.BeginTransactionAsync(ct);
            try
            {
                var rows = _db.CsvRows.Where(r => r.BusinessId == businessId && r.BatchId == batchId);
                _db.CsvRows.RemoveRange(rows);

                _db.CsvBatches.Remove(batch);

                await _db.SaveChangesAsync(ct);
                await tx.CommitAsync(ct);
                return true;
            }
            catch
            {
                await tx.RollbackAsync(ct);
                throw;
            }
        }

        private static readonly string[] PhoneHeaderCandidates =
        { "phone", "mobile", "whatsapp", "msisdn", "whatsapp_number", "contact", "contact_number" };

        public async Task<CsvBatchValidationResultDto> ValidateAsync(
            Guid businessId,
            Guid batchId,
            CsvBatchValidationRequestDto request,
            CancellationToken ct = default)
        {
            if (request is null) throw new ArgumentNullException(nameof(request));
            if (request.SampleSize <= 0) request.SampleSize = 20;
            if (request.SampleSize > 100) request.SampleSize = 100;

            var batch = await _db.CsvBatches.AsNoTracking()
                .Where(b => b.BusinessId == businessId && b.Id == batchId)
                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })
                .FirstOrDefaultAsync(ct);

            if (batch == null) throw new KeyNotFoundException("CSV batch not found.");

            var headers = SafeParseHeaderArray(batch.HeadersJson);
            var headerSet = new HashSet<string>(headers, StringComparer.OrdinalIgnoreCase);

            var result = new CsvBatchValidationResultDto
            {
                BatchId = batchId,
                TotalRows = batch.RowCount
            };

            // Required headers check
            if (request.RequiredHeaders != null && request.RequiredHeaders.Count > 0)
            {
                foreach (var req in request.RequiredHeaders)
                {
                    if (!headerSet.Contains(req))
                        result.MissingRequiredHeaders.Add(req);
                }

                if (result.MissingRequiredHeaders.Count > 0)
                    result.Errors.Add("Required headers are missing.");
            }

            // Determine phone field
            var phoneField = request.PhoneField;
            if (string.IsNullOrWhiteSpace(phoneField))
                phoneField = PhoneHeaderCandidates.FirstOrDefault(headerSet.Contains);

            result.PhoneField = phoneField;

            if (string.IsNullOrWhiteSpace(phoneField))
            {
                result.Errors.Add("No phone field provided or detected.");
                return result; // cannot scan rows without a phone column
            }

            // Scan rows for phone presence & duplicates
            var seenPhones = new HashSet<string>(StringComparer.Ordinal);
            var problemSamples = new List<CsvRowSampleDto>();

            var rowsQuery = _db.CsvRows.AsNoTracking()
                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)
                .OrderBy(r => r.RowIndex)
                .Select(r => new { r.RowIndex, r.DataJson });

            await foreach (var row in rowsQuery.AsAsyncEnumerable().WithCancellation(ct))
            {
                var dict = SafeParseDict(row.DataJson);
                dict.TryGetValue(phoneField, out var rawPhone);

                var normalized = NormalizePhoneMaybe(rawPhone, request.NormalizePhones);

                var isProblem = false;

                if (string.IsNullOrWhiteSpace(normalized))
                {
                    result.MissingPhoneCount++;
                    isProblem = true;
                }
                else if (request.Deduplicate && !seenPhones.Add(normalized))
                {
                    result.DuplicatePhoneCount++;
                    isProblem = true;
                }

                if (isProblem && problemSamples.Count < request.SampleSize)
                {
                    problemSamples.Add(new CsvRowSampleDto
                    {
                        RowIndex = row.RowIndex,
                        Data = dict
                    });
                }
            }

            result.ProblemSamples = problemSamples;

            if (result.MissingPhoneCount > 0)
                result.Errors.Add("Some rows are missing phone numbers.");
            if (result.DuplicatePhoneCount > 0)
                result.Warnings.Add("Duplicate phone numbers detected (after normalization).");

            return result;
        }

        // ----------------------------
        // helpers
        // ----------------------------
        private static List<string> SafeParseHeaderArray(string? json)
        {
            try
            {
                return string.IsNullOrWhiteSpace(json)
                    ? new List<string>()
                    : (JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>());
            }
            catch { return new List<string>(); }
        }

        private static Dictionary<string, string?> SafeParseDict(string? json)
        {
            try
            {
                return string.IsNullOrWhiteSpace(json)
                    ? new Dictionary<string, string?>()
                    : (JsonSerializer.Deserialize<Dictionary<string, string?>>(json) ??
                       new Dictionary<string, string?>());
            }
            catch { return new Dictionary<string, string?>(); }
        }

        private static char DetectDelimiter(string headerLine)
        {
            var candidates = new[] { ',', ';', '\t' };
            var counts = candidates.Select(c => (c, count: headerLine.Count(ch => ch == c))).ToList();
            var best = counts.OrderByDescending(x => x.count).First();
            return best.count > 0 ? best.c : ',';
        }

        /// <summary>
        /// CSV parser with delimiter support: handles commas/semicolons/tabs, double quotes,
        /// and escaped quotes (""). It does NOT support embedded newlines inside quoted fields.
        /// </summary>
        private static List<string> ParseCsvLine(string line, char delimiter)
        {
            var result = new List<string>();
            if (line == null) return result;

            var sb = new StringBuilder();
            bool inQuotes = false;

            for (int i = 0; i < line.Length; i++)
            {
                var c = line[i];

                if (inQuotes)
                {
                    if (c == '"')
                    {
                        // Handle escaped quote ""
                        if (i + 1 < line.Length && line[i + 1] == '"')
                        {
                            sb.Append('"');
                            i++;
                        }
                        else
                        {
                            inQuotes = false;
                        }
                    }
                    else
                    {
                        sb.Append(c);
                    }
                }
                else
                {
                    if (c == delimiter)
                    {
                        result.Add(sb.ToString());
                        sb.Clear();
                    }
                    else if (c == '"')
                    {
                        inQuotes = true;
                    }
                    else
                    {
                        sb.Append(c);
                    }
                }
            }

            result.Add(sb.ToString());
            return result;
        }

        private static string? NormalizePhoneMaybe(string? raw, bool normalize)
        {
            if (string.IsNullOrWhiteSpace(raw)) return null;
            var trimmed = raw.Trim();
            if (!normalize) return trimmed;

            var digits = Regex.Replace(trimmed, "[^0-9]", "");
            digits = digits.TrimStart('0');

            // Heuristic for India: add 91 for 10-digit local numbers
            if (digits.Length == 10) digits = "91" + digits;

            return digits.Length >= 10 ? digits : trimmed;
        }
    }
}


//using System;
//using System.Collections.Generic;
//using System.IO;
//using System.Linq;
//using System.Text;
//using System.Text.Json;
//using System.Text.RegularExpressions;
//using System.Threading;
//using System.Threading.Tasks;
//using Microsoft.EntityFrameworkCore;
//using Serilog;
//using xbytechat.api;
//using xbytechat.api.Features.CampaignModule.DTOs;
//using xbytechat.api.Features.CampaignModule.Models;

//namespace xbytechat.api.Features.CampaignModule.Services
//{
//    public class CsvBatchService : ICsvBatchService
//    {
//        private readonly AppDbContext _db;

//        public CsvBatchService(AppDbContext db)
//        {
//            _db = db;
//        }

//        // ----------------------------
//        // Upload + ingest
//        // ----------------------------
//        public async Task<CsvBatchUploadResultDto> CreateAndIngestAsync(
//             Guid businessId,
//             string fileName,
//             Stream stream,
//             Guid? audienceId = null,
//             CancellationToken ct = default)
//        {
//            // 1) Create batch shell
//            var batch = new CsvBatch
//            {
//                Id = Guid.NewGuid(),
//                BusinessId = businessId,
//                AudienceId = audienceId,          // nullable by design (ok if null)
//                FileName = fileName,
//                CreatedAt = DateTime.UtcNow,
//                Status = "ingesting",
//                RowCount = 0,
//                SkippedCount = 0,
//                HeadersJson = null
//            };

//            _db.CsvBatches.Add(batch);
//            await _db.SaveChangesAsync(ct);

//            try
//            {
//                // 2) Parse headers + rows (minimal robust ingest; replace with your existing parser if present)
//                //    Detect delimiter (very simple: try ',', then ';', then '\t')
//                stream.Position = 0;
//                using var reader = new StreamReader(stream, Encoding.UTF8, detectEncodingFromByteOrderMarks: true, bufferSize: 1024, leaveOpen: true);

//                string? headerLine = await reader.ReadLineAsync();
//                if (string.IsNullOrWhiteSpace(headerLine))
//                {
//                    // No header line ‚Üí write a single phone column as fallback so UI won‚Äôt explode
//                    var headers = new List<string> { "phone" };
//                    batch.HeadersJson = JsonSerializer.Serialize(headers);
//                    batch.Status = "ready";
//                    await _db.SaveChangesAsync(ct);

//                    Log.Warning("CSV had no header line. Created batch {BatchId} with fallback 'phone' header.", batch.Id);

//                    return new CsvBatchUploadResultDto
//                    {
//                        BatchId = batch.Id,
//                        AudienceId = batch.AudienceId,
//                        FileName = batch.FileName ?? string.Empty,
//                        RowCount = 0,
//                        Headers = headers
//                    };
//                }

//                char[] candidates = new[] { ',', ';', '\t' };
//                char delim = candidates.OrderByDescending(d => headerLine.Count(ch => ch == d)).First();

//                var headersParsed = headerLine.Split(delim).Select(h => h.Trim()).Where(h => !string.IsNullOrEmpty(h)).ToList();
//                if (headersParsed.Count == 0)
//                {
//                    headersParsed = new List<string> { "phone" };
//                }

//                batch.HeadersJson = JsonSerializer.Serialize(headersParsed);

//                // 3) Stream rows into CsvRows (first 5k for now; adapt to your chunking if needed)
//                //    If you already have a chunked/efficient parser in this class, call it instead.
//                var rowsBuffer = new List<CsvRow>(capacity: 1024);
//                int rowIndex = 0;

//                while (!reader.EndOfStream)
//                {
//                    var line = await reader.ReadLineAsync();
//                    if (line is null) break;
//                    if (string.IsNullOrWhiteSpace(line)) continue;

//                    var cols = line.Split(delim);

//                    var dict = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);
//                    for (int i = 0; i < headersParsed.Count; i++)
//                    {
//                        var key = headersParsed[i];
//                        var val = i < cols.Length ? cols[i]?.Trim() : null;
//                        dict[key] = val;
//                    }

//                    rowsBuffer.Add(new CsvRow
//                    {
//                        Id = Guid.NewGuid(),
//                        BatchId = batch.Id,
//                        RowIndex = rowIndex++,
//                        DataJson = JsonSerializer.Serialize(dict)
//                    });

//                    // bulk flush in chunks
//                    if (rowsBuffer.Count >= 1000)
//                    {
//                        _db.CsvRows.AddRange(rowsBuffer);
//                        await _db.SaveChangesAsync(ct);
//                        rowsBuffer.Clear();
//                    }
//                }

//                if (rowsBuffer.Count > 0)
//                {
//                    _db.CsvRows.AddRange(rowsBuffer);
//                    await _db.SaveChangesAsync(ct);
//                    rowsBuffer.Clear();
//                }

//                batch.RowCount = rowIndex;
//                batch.Status = "ready";
//                await _db.SaveChangesAsync(ct);

//                Log.Information("CsvBatch {BatchId} ingested: {Rows} rows; headers={HeaderCount}", batch.Id, batch.RowCount, headersParsed.Count);

//                return new CsvBatchUploadResultDto
//                {
//                    BatchId = batch.Id,
//                    AudienceId = batch.AudienceId,
//                    FileName = batch.FileName ?? string.Empty,
//                    RowCount = batch.RowCount,
//                    Headers = headersParsed
//                };
//            }
//            catch (Exception ex)
//            {
//                batch.Status = "failed";
//                batch.ErrorMessage = ex.Message;
//                await _db.SaveChangesAsync(ct);
//                Log.Error(ex, "CSV ingest failed for batch {BatchId}", batch.Id);
//                throw;
//            }
//        }

//        // ===========================================================================================

//        // Your existing methods below‚Ä¶
//        public async Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(
//            Guid businessId,
//            Guid batchId,
//            int take = 20,
//            CancellationToken ct = default)
//        {
//            // First ensure the batch exists and belongs to the tenant
//            var batch = await _db.CsvBatches
//                .AsNoTracking()
//                .Where(b => b.Id == batchId && b.BusinessId == businessId)
//                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })
//                .FirstOrDefaultAsync(ct);

//            if (batch is null)
//                throw new KeyNotFoundException("Batch not found."); // 404 semantics in your middleware

//            // If no rows yet, return empty samples gracefully (do NOT throw)
//            if (batch.RowCount <= 0)
//                return Array.Empty<CsvRowSampleDto>();

//            var headers = (string[])(JsonSerializer.Deserialize<string[]>(batch.HeadersJson ?? "[]") ?? Array.Empty<string>());

//            var rows = await _db.CsvRows
//                .AsNoTracking()
//                .Where(r => r.BatchId == batchId)
//                .OrderBy(r => r.RowIndex)
//                .Take(Math.Max(1, take))
//                .Select(r => new { r.RowIndex, r.DataJson })
//                .ToListAsync(ct);

//            var result = new List<CsvRowSampleDto>(rows.Count);
//            foreach (var r in rows)
//            {
//                var dict = JsonSerializer.Deserialize<Dictionary<string, string?>>(r.DataJson ?? "{}")
//                           ?? new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);

//                // Ensure all header keys exist
//                foreach (var h in headers)
//                    if (!dict.ContainsKey(h)) dict[h] = null;

//                result.Add(new CsvRowSampleDto
//                {
//                    RowIndex = r.RowIndex,
//                    Data = dict
//                });
//            }

//            return result;
//        }

//        //private async Task<CsvBatchUploadResultDto> IngestCoreAsync(
//        //    Guid businessId,
//        //    string fileName,
//        //    Stream stream,
//        //    CancellationToken ct)
//        //{
//        //    // This method should match what you already implemented previously.
//        //    // Below is a minimal skeleton to indicate intent.

//        //    // 1) Create CsvBatch (BusinessId only)
//        //    var batch = new CsvBatch
//        //    {
//        //        Id = Guid.NewGuid(),
//        //        BusinessId = businessId,
//        //        FileName = fileName,
//        //        CreatedAt = DateTime.UtcNow,
//        //        HeaderJson = null, // set after parsing
//        //    };
//        //    _db.CsvBatches.Add(batch);
//        //    await _db.SaveChangesAsync(ct);

//        //    // 2) Parse & store (re-use your existing parser util)
//        //    // var (headers, rows) = await _yourParser.ParseAsync(stream, ct);
//        //    // batch.HeaderJson = JsonSerializer.Serialize(headers);
//        //    // await _db.SaveChangesAsync(ct);
//        //    // await BulkInsertRowsAsync(batch.Id, rows, ct);

//        //    // -- placeholder; call your real implementation here --
//        //    Log.Information("CsvBatch {BatchId} ingested for business {Biz}", batch.Id, businessId);

//        //    // 3) Build DTO (AudienceId intentionally null)
//        //    return new CsvBatchUploadResultDto
//        //    {
//        //        BatchId = batch.Id,
//        //        AudienceId = null,
//        //        FileName = fileName,
//        //        // Headers = headers, Sample = first few rows, etc.
//        //    };
//        //}

//        // ----------------------------
//        // Batch info
//        // ----------------------------

//        private async Task<CsvBatchUploadResultDto> IngestCoreAsync(
//            Guid businessId,
//            string fileName,
//            Stream stream,
//            CancellationToken ct)
//        {
//            // 1) Create CsvBatch (BusinessId only) ‚Äî audience-agnostic by design
//            var batch = new CsvBatch
//            {
//                Id = Guid.NewGuid(),
//                BusinessId = businessId,
//                FileName = fileName,
//                CreatedAt = DateTime.UtcNow,
//                Status = "ingesting",     // optional: mark while parsing
//                HeadersJson = null,       // <-- correct property name (plural)
//                RowCount = 0,
//                SkippedCount = 0,
//                ErrorMessage = null
//            };
//            _db.CsvBatches.Add(batch);
//            await _db.SaveChangesAsync(ct);

//            // 2) Parse & store (re-use your existing parser / chunking logic)
//            //    NOTE: Keep your existing implementation that detects delimiter,
//            //    streams rows, and writes CsvRow(DataJson) in chunks.
//            //
//            // var (headers, rowsWritten, skipped) = await _yourParser.ParseAsync(batch.Id, stream, ct);
//            // batch.HeadersJson = JsonSerializer.Serialize(headers);
//            // batch.RowCount = rowsWritten;
//            // batch.SkippedCount = skipped;

//            // -- placeholder; call your real implementation above --
//            Log.Information("CsvBatch {BatchId} staged for business {Biz}", batch.Id, businessId);

//            // Mark ready once parsing completes successfully
//            batch.Status = "ready";
//            await _db.SaveChangesAsync(ct);

//            // 3) Build DTO (AudienceId intentionally null)
//            return new CsvBatchUploadResultDto
//            {
//                BatchId = batch.Id,
//                AudienceId = null,                 // by design
//                RowCount = batch.RowCount,         // or rowsWritten if you have it
//                Headers = /* headers != null ? headers.ToList() : */ new List<string>(),
//                Message = "CSV batch created."
//            };
//        }

//        public async Task<CsvBatchInfoDto?> GetBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)
//        {
//            var batch = await _db.CsvBatches
//                .AsNoTracking()
//                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);

//            if (batch == null) return null;

//            var headers = SafeParseHeaderArray(batch.HeadersJson);

//            return new CsvBatchInfoDto
//            {
//                BatchId = batch.Id,
//                AudienceId = null, // see item #2 below
//                RowCount = batch.RowCount,
//                Headers = headers,
//                CreatedAt = batch.CreatedAt
//            };
//        }

//        // Kept (existing) ‚Äî quick sample helper
//        public async Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(Guid businessId, Guid batchId, int take = 20, CancellationToken ct = default)
//        {
//            if (take <= 0) take = 20;
//            if (take > 100) take = 100;

//            var headers = await _db.CsvBatches
//                .AsNoTracking()
//                .Where(b => b.Id == batchId && b.BusinessId == businessId)
//                .Select(b => b.HeadersJson)
//                .FirstOrDefaultAsync(ct);

//            if (headers == null) throw new KeyNotFoundException("Batch not found.");

//            var headerList = SafeParseHeaderArray(headers);

//            var rows = await _db.CsvRows
//                .AsNoTracking()
//                .Where(r => r.BatchId == batchId && r.BusinessId == businessId)
//                .OrderBy(r => r.RowIndex)
//                .Take(take)
//                .Select(r => new { r.RowIndex, r.DataJson })
//                .ToListAsync(ct);

//            var result = new List<CsvRowSampleDto>(rows.Count);
//            foreach (var r in rows)
//            {
//                var dict = SafeParseDict(r.DataJson);
//                // Ensure consistent header order in sample (fill missing with null)
//                var ordered = new Dictionary<string, string?>(headerList.Count, StringComparer.OrdinalIgnoreCase);
//                foreach (var h in headerList)
//                {
//                    dict.TryGetValue(h, out var v);
//                    ordered[h] = v;
//                }

//                result.Add(new CsvRowSampleDto
//                {
//                    RowIndex = r.RowIndex,
//                    Data = ordered
//                });
//            }

//            return result;
//        }

//        // ----------------------------
//        // List / Page / Delete / Validate
//        // ----------------------------
//        public async Task<List<CsvBatchListItemDto>> ListBatchesAsync(Guid businessId, int limit = 20, CancellationToken ct = default)
//        {
//            if (limit <= 0) limit = 20;
//            if (limit > 100) limit = 100;

//            return await _db.CsvBatches
//                .AsNoTracking()
//                .Where(b => b.BusinessId == businessId)
//                .OrderByDescending(b => b.CreatedAt)
//                .Take(limit)
//                .Select(b => new CsvBatchListItemDto
//                {
//                    BatchId = b.Id,
//                    FileName = b.FileName,
//                    RowCount = b.RowCount,
//                    Status = b.Status,
//                    CreatedAt = b.CreatedAt
//                })
//                .ToListAsync(ct);
//        }

//        public async Task<CsvBatchRowsPageDto> GetRowsPageAsync(Guid businessId, Guid batchId, int skip, int take, CancellationToken ct = default)
//        {
//            if (take <= 0) take = 50;
//            if (take > 200) take = 200;
//            if (skip < 0) skip = 0;

//            var exists = await _db.CsvBatches.AsNoTracking()
//                .AnyAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);
//            if (!exists) throw new KeyNotFoundException("CSV batch not found.");

//            var total = await _db.CsvRows.AsNoTracking()
//                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)
//                .CountAsync(ct);

//            var rows = await _db.CsvRows.AsNoTracking()
//                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)
//                .OrderBy(r => r.RowIndex)
//                .Skip(skip)
//                .Take(take)
//                .Select(r => new CsvRowSampleDto
//                {
//                    RowIndex = r.RowIndex,
//                    Data = SafeParseDict(r.DataJson)
//                })
//                .ToListAsync(ct);

//            return new CsvBatchRowsPageDto
//            {
//                BatchId = batchId,
//                TotalRows = total,
//                Skip = skip,
//                Take = take,
//                Rows = rows
//            };
//        }

//        public async Task<bool> DeleteBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)
//        {
//            var batch = await _db.CsvBatches
//                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);

//            if (batch == null) return false;

//            using var tx = await _db.Database.BeginTransactionAsync(ct);
//            try
//            {
//                var rows = _db.CsvRows.Where(r => r.BusinessId == businessId && r.BatchId == batchId);
//                _db.CsvRows.RemoveRange(rows);

//                _db.CsvBatches.Remove(batch);

//                await _db.SaveChangesAsync(ct);
//                await tx.CommitAsync(ct);
//                return true;
//            }
//            catch
//            {
//                await tx.RollbackAsync(ct);
//                throw;
//            }
//        }

//        private static readonly string[] PhoneHeaderCandidates =
//            { "phone", "mobile", "whatsapp", "msisdn", "whatsapp_number", "contact", "contact_number" };

//        public async Task<CsvBatchValidationResultDto> ValidateAsync(
//            Guid businessId,
//            Guid batchId,
//            CsvBatchValidationRequestDto request,
//            CancellationToken ct = default)
//        {
//            if (request is null) throw new ArgumentNullException(nameof(request));
//            if (request.SampleSize <= 0) request.SampleSize = 20;
//            if (request.SampleSize > 100) request.SampleSize = 100;

//            var batch = await _db.CsvBatches.AsNoTracking()
//                .Where(b => b.BusinessId == businessId && b.Id == batchId)
//                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })
//                .FirstOrDefaultAsync(ct);

//            if (batch == null) throw new KeyNotFoundException("CSV batch not found.");

//            var headers = SafeParseHeaderArray(batch.HeadersJson);
//            var headerSet = new HashSet<string>(headers, StringComparer.OrdinalIgnoreCase);

//            var result = new CsvBatchValidationResultDto
//            {
//                BatchId = batchId,
//                TotalRows = batch.RowCount
//            };

//            // Required headers check
//            if (request.RequiredHeaders != null && request.RequiredHeaders.Count > 0)
//            {
//                foreach (var req in request.RequiredHeaders)
//                {
//                    if (!headerSet.Contains(req))
//                        result.MissingRequiredHeaders.Add(req);
//                }

//                if (result.MissingRequiredHeaders.Count > 0)
//                    result.Errors.Add("Required headers are missing.");
//            }

//            // Determine phone field
//            var phoneField = request.PhoneField;
//            if (string.IsNullOrWhiteSpace(phoneField))
//                phoneField = PhoneHeaderCandidates.FirstOrDefault(headerSet.Contains);

//            result.PhoneField = phoneField;

//            if (string.IsNullOrWhiteSpace(phoneField))
//            {
//                result.Errors.Add("No phone field provided or detected.");
//                return result; // no row scan possible without a phone column
//            }

//            // Scan rows for phone presence & duplicates
//            var seenPhones = new HashSet<string>(StringComparer.Ordinal);
//            var problemSamples = new List<CsvRowSampleDto>();

//            var rowsQuery = _db.CsvRows.AsNoTracking()
//                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)
//                .OrderBy(r => r.RowIndex)
//                .Select(r => new { r.RowIndex, r.DataJson });

//            await foreach (var row in rowsQuery.AsAsyncEnumerable().WithCancellation(ct))
//            {
//                var dict = SafeParseDict(row.DataJson);
//                dict.TryGetValue(phoneField, out var rawPhone);

//                var normalized = NormalizePhoneMaybe(rawPhone, request.NormalizePhones);

//                var isProblem = false;

//                if (string.IsNullOrWhiteSpace(normalized))
//                {
//                    result.MissingPhoneCount++;
//                    isProblem = true;
//                }
//                else if (request.Deduplicate && !seenPhones.Add(normalized))
//                {
//                    result.DuplicatePhoneCount++;
//                    isProblem = true;
//                }

//                if (isProblem && problemSamples.Count < request.SampleSize)
//                {
//                    problemSamples.Add(new CsvRowSampleDto
//                    {
//                        RowIndex = row.RowIndex,
//                        Data = dict
//                    });
//                }
//            }

//            result.ProblemSamples = problemSamples;

//            if (result.MissingPhoneCount > 0)
//                result.Errors.Add("Some rows are missing phone numbers.");
//            if (result.DuplicatePhoneCount > 0)
//                result.Warnings.Add("Duplicate phone numbers detected (after normalization).");

//            return result;
//        }

//        // ----------------------------
//        // helpers
//        // ----------------------------
//        private static List<string> SafeParseHeaderArray(string? json)
//        {
//            try
//            {
//                return string.IsNullOrWhiteSpace(json)
//                    ? new List<string>()
//                    : (JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>());
//            }
//            catch { return new List<string>(); }
//        }

//        private static Dictionary<string, string?> SafeParseDict(string? json)
//        {
//            try
//            {
//                return string.IsNullOrWhiteSpace(json)
//                    ? new Dictionary<string, string?>()
//                    : (JsonSerializer.Deserialize<Dictionary<string, string?>>(json) ??
//                       new Dictionary<string, string?>());
//            }
//            catch { return new Dictionary<string, string?>(); }
//        }

//        private static char DetectDelimiter(string headerLine)
//        {
//            var candidates = new[] { ',', ';', '\t' };
//            var counts = candidates.Select(c => (c, count: headerLine.Count(ch => ch == c))).ToList();
//            var best = counts.OrderByDescending(x => x.count).First();
//            return best.count > 0 ? best.c : ',';
//        }

//        /// <summary>
//        /// CSV parser with delimiter support: handles commas/semicolons/tabs, double quotes,
//        /// and escaped quotes (""). It does NOT support embedded newlines inside quoted fields.
//        /// </summary>
//        private static List<string> ParseCsvLine(string line, char delimiter)
//        {
//            var result = new List<string>();
//            if (line == null) return result;

//            var sb = new StringBuilder();
//            bool inQuotes = false;

//            for (int i = 0; i < line.Length; i++)
//            {
//                var c = line[i];

//                if (inQuotes)
//                {
//                    if (c == '"')
//                    {
//                        // Handle escaped quote ""
//                        if (i + 1 < line.Length && line[i + 1] == '"')
//                        {
//                            sb.Append('"');
//                            i++;
//                        }
//                        else
//                        {
//                            inQuotes = false;
//                        }
//                    }
//                    else
//                    {
//                        sb.Append(c);
//                    }
//                }
//                else
//                {
//                    if (c == delimiter)
//                    {
//                        result.Add(sb.ToString());
//                        sb.Clear();
//                    }
//                    else if (c == '"')
//                    {
//                        inQuotes = true;
//                    }
//                    else
//                    {
//                        sb.Append(c);
//                    }
//                }
//            }

//            result.Add(sb.ToString());
//            return result;
//        }

//        private static string? NormalizePhoneMaybe(string? raw, bool normalize)
//        {
//            if (string.IsNullOrWhiteSpace(raw)) return null;
//            var trimmed = raw.Trim();
//            if (!normalize) return trimmed;

//            var digits = Regex.Replace(trimmed, "[^0-9]", "");
//            digits = digits.TrimStart('0');

//            // Heuristic for India: add 91 for 10-digit local numbers
//            if (digits.Length == 10) digits = "91" + digits;

//            return digits.Length >= 10 ? digits : trimmed;
//        }
//    }
//}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CsvExportService.cs 
====================================================== 
 
Ôªøusing System;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Serilog;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICsvExportService
    {
        Task<byte[]> BuildMaterializedCsvAsync(Guid businessId, Guid campaignId, int limit = 200, CancellationToken ct = default);
        Task<byte[]> BuildDispatchPlanCsvAsync(Guid businessId, Guid campaignId, int limit = 2000, CancellationToken ct = default);
    }

    /// <summary>
    /// Small CSV builder for exporting materialized rows and dispatch plans.
    /// Uses UTF-8 with BOM for Excel friendliness. Escapes fields per RFC4180.
    /// </summary>
    public class CsvExportService : ICsvExportService
    {
        private readonly ICampaignMaterializationService _materializer;
        private readonly ICampaignDispatchPlannerService _planner;

        public CsvExportService(
            ICampaignMaterializationService materializer,
            ICampaignDispatchPlannerService planner)
        {
            _materializer = materializer;
            _planner = planner;
        }

        public async Task<byte[]> BuildMaterializedCsvAsync(Guid businessId, Guid campaignId, int limit = 200, CancellationToken ct = default)
        {
            var data = await _materializer.MaterializeAsync(businessId, campaignId, limit, ct);

            // Header is dynamic based on placeholder count and button count.
            // Columns:
            // RecipientId,ContactId,Phone,Param1..ParamN,Btn1Text,Btn1Url,...,Warnings,Errors
            var maxParam = data.PlaceholderCount;
            var maxButtons = data.Rows.Max(r => r.Buttons.Count);

            var sb = new StringBuilder();
            using var writer = new StringWriter(sb);

            // Write header
            writer.Write("RecipientId,ContactId,Phone");
            for (int i = 1; i <= maxParam; i++) writer.Write($",Param{i}");
            for (int b = 1; b <= maxButtons; b++) writer.Write($",Btn{b}Text,Btn{b}Url");
            writer.Write(",Warnings,Errors");
            writer.WriteLine();

            foreach (var row in data.Rows)
            {
                WriteCsv(writer, row.RecipientId?.ToString());
                writer.Write(",");
                WriteCsv(writer, row.ContactId?.ToString());
                writer.Write(",");
                WriteCsv(writer, row.Phone);

                // Params 1..N (pad missing)
                for (int i = 1; i <= maxParam; i++)
                {
                    writer.Write(",");
                    var val = row.Parameters.FirstOrDefault(p => p.Index == i)?.Value;
                    WriteCsv(writer, val);
                }

                // Buttons (pad missing)
                for (int b = 0; b < maxButtons; b++)
                {
                    var btn = b < row.Buttons.Count ? row.Buttons[b] : null;
                    writer.Write(",");
                    WriteCsv(writer, btn?.ButtonText);
                    writer.Write(",");
                    WriteCsv(writer, btn?.ResolvedUrl);
                }

                writer.Write(",");
                WriteCsv(writer, string.Join(" | ", row.Warnings));
                writer.Write(",");
                WriteCsv(writer, string.Join(" | ", row.Errors));
                writer.WriteLine();
            }

            // Return as UTF-8 with BOM for Excel compatibility
            var utf8withBom = new UTF8Encoding(encoderShouldEmitUTF8Identifier: true);
            return utf8withBom.GetBytes(sb.ToString());
        }

        public async Task<byte[]> BuildDispatchPlanCsvAsync(Guid businessId, Guid campaignId, int limit = 2000, CancellationToken ct = default)
        {
            var plan = await _planner.PlanAsync(businessId, campaignId, limit, ct);

            var sb = new StringBuilder();
            using var writer = new StringWriter(sb);

            // Plan metadata preface (comment-style rows start with '#')
            writer.WriteLine($"# CampaignId,{plan.CampaignId}");
            writer.WriteLine($"# TemplateName,{Escape(plan.TemplateName)}");
            writer.WriteLine($"# Language,{Escape(plan.Language)}");
            writer.WriteLine($"# PlaceholderCount,{plan.PlaceholderCount}");
            writer.WriteLine($"# TotalRecipients,{plan.TotalRecipients}");
            writer.WriteLine($"# ProviderPlan,{Escape(plan.Throttle.Plan)}");
            writer.WriteLine($"# Provider,{Escape(plan.Throttle.Provider)}");
            writer.WriteLine($"# MaxBatchSize,{plan.Throttle.MaxBatchSize}");
            writer.WriteLine($"# MaxPerMinute,{plan.Throttle.MaxPerMinute}");
            writer.WriteLine($"# ComputedBatches,{plan.Throttle.ComputedBatches}");
            writer.WriteLine($"# EstimatedMinutes,{plan.Throttle.EstimatedMinutes}");
            if (plan.GlobalWarnings.Any())
                writer.WriteLine($"# GlobalWarnings,{Escape(string.Join(" | ", plan.GlobalWarnings))}");
            if (plan.Throttle.Warnings.Any())
                writer.WriteLine($"# ThrottleWarnings,{Escape(string.Join(" | ", plan.Throttle.Warnings))}");

            writer.WriteLine(); // blank line

            // Batches table header
            writer.WriteLine("BatchNumber,OffsetSeconds,StartIndex,Count,ApproxBytes,Phones,RecipientIds,Notes");

            foreach (var b in plan.Batches)
            {
                WriteCsv(writer, b.BatchNumber.ToString());
                writer.Write(",");
                WriteCsv(writer, b.OffsetSeconds.ToString());
                writer.Write(",");
                WriteCsv(writer, b.StartIndex.ToString());
                writer.Write(",");
                WriteCsv(writer, b.Count.ToString());
                writer.Write(",");
                WriteCsv(writer, b.ApproxBytes.ToString());
                writer.Write(",");
                WriteCsv(writer, string.Join(" ", b.Phones.Select(p => p ?? "")));
                writer.Write(",");
                WriteCsv(writer, string.Join(" ", b.RecipientIds.Select(id => id?.ToString() ?? "")));
                writer.Write(",");
                WriteCsv(writer, string.Join(" | ", b.Notes));
                writer.WriteLine();
            }

            var utf8withBom = new UTF8Encoding(encoderShouldEmitUTF8Identifier: true);
            return utf8withBom.GetBytes(sb.ToString());
        }

        private static void WriteCsv(TextWriter writer, string? value)
        {
            writer.Write(Escape(value ?? ""));
        }

        private static string Escape(string input)
        {
            // RFC4180-style: quote if contains comma, quote or newline; escape quotes by doubling
            var needsQuote = input.Contains(',') || input.Contains('"') || input.Contains('\n') || input.Contains('\r');
            if (!needsQuote) return input;
            return $"\"{input.Replace("\"", "\"\"")}\"";
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\ICampaignDispatcher.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICampaignDispatcher
    {
        /// <summary>
        /// mode: "canary" (use count) or "full" (ignore count, select all ready).
        /// count: when mode=canary, number of recipients to enqueue (default 25).
        /// </summary>
        Task<CampaignDispatchResponseDto> DispatchAsync(
            Guid businessId,
            Guid campaignId,
            string mode,
            int count,
            CancellationToken ct = default);
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\ICampaignDryRunService.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.Services
{
    /// <summary>
    /// Validates a campaign for send safety without actually sending any message.
    /// </summary>
    public interface ICampaignDryRunService
    {
        /// <summary>
        /// Run dry-run validation for a campaign. Should not mutate state.
        /// </summary>
        Task<CampaignDryRunResultDto> ValidateAsync(
            Guid businessId,
            Guid campaignId,
            int limit = 200,
            CancellationToken ct = default);
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\ICampaignMaterializationService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICampaignMaterializationService
    {
        Task<CampaignMaterializeResultDto> MaterializeAsync(
        Guid businessId,
        Guid campaignId,
        int limit = 200,
            CancellationToken ct = default);
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\ICampaignMaterializer.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICampaignMaterializer
    {
        Task<CampaignCsvMaterializeResponseDto> CreateAsync(
       Guid businessId,
       Guid campaignId,
       CampaignCsvMaterializeRequestDto request,
       CancellationToken ct = default);

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\ICampaignRecipientService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICampaignRecipientService
    {
        Task<CampaignRecipientDto> GetByIdAsync(Guid id);
        Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId);

        Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus);
        Task<bool> TrackReplyAsync(Guid recipientId, string replyText);
        Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null);

        Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds);
    }
}

 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\ICampaignRetryService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICampaignRetryService
    {
        Task<CampaignRetryResultDto> RetryFailedAsync(Guid businessId, Guid campaignId, int limit = 200);
    }
}

 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\ICampaignService.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading.Tasks;
using System.Collections.Generic;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Shared;
using xbytechat.api.CRM.Dtos;
using xbytechat.api.Helpers;
using xbytechat.api.Features.CampaignModule.Models;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICampaignService
    {
        /// üÜï Create a new campaign with recipients
        Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy);

        /// ‚úèÔ∏è Update an existing draft campaign
        Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto);

        /// üóëÔ∏è Soft-delete a draft campaign
        Task<bool> DeleteCampaignAsync(Guid id);

        /// üìã Get all campaigns for the business
        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId);

        /// üìÑ Get paginated campaigns
        Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request);
        /// üöÄ Trigger campaign send flow (template message to all recipients)
        Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent);
        Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy);
        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null);
        Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId);
        Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId);
        Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId);
        Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds);

        Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId);

        Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId);

        Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign);
        Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign);

        Task<List<FlowListItemDto>> GetAvailableFlowsAsync(Guid businessId, bool onlyPublished = true);

        Task<CampaignDryRunResponseDto> DryRunTemplateCampaignAsync(Guid campaignId, int maxRecipients = 20);
        Task<object> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId);

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\ICsvBatchService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICsvBatchService
    {
        Task<CsvBatchUploadResultDto> CreateAndIngestAsync(
            Guid businessId,
            string fileName,
            Stream stream,
            Guid? audienceId = null,
            CancellationToken ct = default
        );

        Task<CsvBatchInfoDto?> GetBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default);
        Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(Guid businessId, Guid batchId, int take = 20, CancellationToken ct = default);
        Task<CsvBatchValidationResultDto> ValidateAsync(Guid businessId, Guid batchId, CsvBatchValidationRequestDto request, CancellationToken ct = default);
        Task<List<CsvBatchListItemDto>> ListBatchesAsync(Guid businessId, int limit = 20, CancellationToken ct = default);
        Task<CsvBatchRowsPageDto> GetRowsPageAsync(Guid businessId, Guid batchId, int skip, int take, CancellationToken ct = default);
        Task<bool> DeleteBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default);
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\IMappingSuggestionService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace xbytechat.api.Features.CampaignModule.Services
{
    /// <summary>
    /// Suggests a token->source mapping ("csv:Header" or "static:") given a campaign and CSV batch.
    /// Uses Campaign.TemplateParameters if present; otherwise derives tokens from CSV headers.
    /// </summary>
    public interface IMappingSuggestionService
    {
        Task<Dictionary<string, string>> SuggestAsync(
            Guid businessId,
            Guid campaignId,
            Guid batchId,
            CancellationToken ct = default);
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\Interface.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignModule.Services
{
    public interface Interface
    {
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\IOutboundCampaignQueueService.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.Features.Queueing.DTOs;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface IOutboundCampaignQueueService
    {
        Task<Guid> EnqueueAsync(Guid businessId, Guid campaignId, bool forceDuplicate = false);
        Task<bool> MarkSucceededAsync(Guid jobId);
        Task<bool> MarkFailedAsync(Guid jobId, string error, bool scheduleRetry = true);

        Task<List<OutboundCampaignJob>> GetJobsForCampaignAsync(Guid businessId, Guid campaignId);
        Task<OutboundCampaignJob?> GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId);
        Task<bool> CancelAsync(Guid businessId, Guid jobId);     // set to "canceled" (if queued/running)
        Task<bool> ForceRetryNowAsync(Guid businessId, Guid jobId); // set to "queued", NextAttemptAt=now (no attempt++)
        Task<int> EnqueueBulkAsync(IEnumerable<OutboundCampaignJobCreateDto> jobs, CancellationToken ct = default);

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\IVariableMappingService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace xbytechat.api.Features.CampaignModule.Services
{
    /// <summary>
    /// Loads saved variable mappings for a campaign (e.g., token -> CSV header or "constant:...").
    /// Current project does not require this to complete 2.4; this is a seam for future use.
    /// </summary>
    public interface IVariableMappingService
    {
        /// <returns>
        /// Dictionary mapping variable token -> source (CSV header name or "constant:Value").
        /// Return an empty dictionary when nothing is saved.
        /// </returns>
        Task<Dictionary<string, string>> GetForCampaignAsync(
            Guid businessId,
            Guid campaignId,
            CancellationToken ct = default);
        Task SaveAsync(
           Guid businessId,
           Guid campaignId,
           Dictionary<string, string> mappings,
           CancellationToken ct = default);

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\MappingSuggestionService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.Models;

namespace xbytechat.api.Features.CampaignModule.Services
{
    /// <summary>
    /// Heuristics:
    /// - If Campaign.TemplateParameters is a JSON array of tokens, suggest for those tokens.
    /// - Else, derive tokens by normalizing CSV headers (lowercase, alnum only, '_' joined).
    /// - Match by normalized equality/contains; special-case phone names.
    /// - Unmatched tokens get "static:" so UI shows a clear placeholder.
    /// </summary>
    public sealed class MappingSuggestionService : IMappingSuggestionService
    {
        private readonly AppDbContext _db;

        private static readonly string[] PhoneHeaderCandidates =
        {
            "phone", "mobile", "whatsapp", "msisdn", "whatsapp_number", "contact", "contact_number"
        };

        public MappingSuggestionService(AppDbContext db) => _db = db;

        public async Task<Dictionary<string, string>> SuggestAsync(
            Guid businessId,
            Guid campaignId,
            Guid batchId,
            CancellationToken ct = default)
        {
            // Load campaign to read TemplateParameters (if present)
            var campaign = await _db.Campaigns.AsNoTracking()
                .Where(c => c.Id == campaignId && c.BusinessId == businessId)
                .Select(c => new { c.Id, c.BusinessId, c.TemplateParameters })
                .FirstOrDefaultAsync(ct);

            if (campaign == null) throw new KeyNotFoundException("Campaign not found.");

            // Load batch headers
            var batch = await _db.CsvBatches.AsNoTracking()
                .Where(b => b.Id == batchId && b.BusinessId == businessId)
                .Select(b => new { b.HeadersJson })
                .FirstOrDefaultAsync(ct);

            if (batch == null) throw new KeyNotFoundException("CSV batch not found.");

            var headers = ParseHeaders(batch.HeadersJson);
            var normHeaders = headers.ToDictionary(h => Normalize(h), h => h, StringComparer.OrdinalIgnoreCase);

            // Determine tokens
            var tokens = ParseTemplateTokens(campaign.TemplateParameters);
            if (tokens.Count == 0)
            {
                // Fall back: derive tokens directly from headers
                tokens = headers.Select(Normalize).Where(s => !string.IsNullOrWhiteSpace(s)).Distinct(StringComparer.OrdinalIgnoreCase).ToList();
            }

            // Suggestion: token -> source
            var suggestions = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            foreach (var token in tokens)
            {
                var normToken = Normalize(token);

                // 1) direct equality with header
                if (normHeaders.TryGetValue(normToken, out var exactHeader))
                {
                    suggestions[token] = $"csv:{exactHeader}";
                    continue;
                }

                // 2) phone special-case
                if (IsPhoneToken(normToken))
                {
                    var headerPick = headers.FirstOrDefault(h => PhoneHeaderCandidates.Contains(Normalize(h)));
                    if (!string.IsNullOrEmpty(headerPick))
                    {
                        suggestions[token] = $"csv:{headerPick}";
                        continue;
                    }
                }

                // 3) contains / fuzzy-lite
                var contains = headers.FirstOrDefault(h => Normalize(h).Contains(normToken, StringComparison.OrdinalIgnoreCase));
                if (!string.IsNullOrEmpty(contains))
                {
                    suggestions[token] = $"csv:{contains}";
                    continue;
                }

                // 4) default: static placeholder (UI can highlight to user)
                suggestions[token] = "static:";
            }

            return suggestions;
        }

        private static List<string> ParseHeaders(string? headersJson)
        {
            if (string.IsNullOrWhiteSpace(headersJson)) return new List<string>();
            try
            {
                var arr = JsonSerializer.Deserialize<List<string>>(headersJson);
                return arr?.Where(h => !string.IsNullOrWhiteSpace(h)).ToList() ?? new List<string>();
            }
            catch
            {
                // Fallback: maybe comma-separated
                return headersJson.Split(',').Select(s => s.Trim()).Where(s => s.Length > 0).ToList();
            }
        }

        private static List<string> ParseTemplateTokens(string? templateParametersJson)
        {
            if (string.IsNullOrWhiteSpace(templateParametersJson)) return new List<string>();
            try
            {
                var arr = JsonSerializer.Deserialize<List<string>>(templateParametersJson);
                return arr?.Where(t => !string.IsNullOrWhiteSpace(t)).ToList() ?? new List<string>();
            }
            catch
            {
                return new List<string>();
            }
        }

        private static bool IsPhoneToken(string normToken)
        {
            if (string.IsNullOrWhiteSpace(normToken)) return false;
            if (PhoneHeaderCandidates.Contains(normToken)) return true;
            return normToken.Contains("phone") || normToken.Contains("mobile") || normToken.Contains("whatsapp");
        }

        private static string Normalize(string s)
        {
            var lowered = (s ?? "").Trim().ToLowerInvariant();
            if (lowered.Length == 0) return lowered;
            var alnum = Regex.Replace(lowered, @"[^a-z0-9]+", "_");
            alnum = Regex.Replace(alnum, "_{2,}", "_").Trim('_');
            return alnum;
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\NoopOutboundCampaignQueueService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Serilog;
using xbytechat.api.Features.CampaignModule.DTOs;     // OutboundCampaignJobDto
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.Features.CampaignModule.Services; // IOutboundCampaignQueueService
using xbytechat.api.Features.Queueing.DTOs;           // OutboundCampaignJobCreateDto

namespace xbytechat.api.Features.Queueing.Services
{
    /// <summary>
    /// No-op queue adapter so the dispatcher compiles & runs. Swap for a real queue later.
    /// </summary>
    public sealed class NoopOutboundCampaignQueueService : IOutboundCampaignQueueService
    {
        public Task<Guid> EnqueueAsync(Guid businessId, Guid campaignId, bool forceDuplicate = false)
        {
            var id = Guid.NewGuid();
            Log.Information("Noop queue: EnqueueAsync business={BusinessId} campaign={CampaignId} forceDup={Force} -> {JobId}",
                businessId, campaignId, forceDuplicate, id);
            return Task.FromResult(id);
        }

        public Task<bool> MarkSucceededAsync(Guid jobId)
        {
            Log.Information("Noop queue: MarkSucceededAsync job={JobId}", jobId);
            return Task.FromResult(true);
        }

        public Task<bool> MarkFailedAsync(Guid jobId, string error, bool scheduleRetry = true)
        {
            Log.Warning("Noop queue: MarkFailedAsync job={JobId} retry={Retry} error={Error}",
                jobId, scheduleRetry, error);
            return Task.FromResult(true);
        }

        public Task<List<OutboundCampaignJobDto>> GetJobsForCampaignAsync(Guid businessId, Guid campaignId)
        {
            Log.Information("Noop queue: GetJobsForCampaignAsync business={BusinessId} campaign={CampaignId}",
                businessId, campaignId);
            return Task.FromResult(new List<OutboundCampaignJobDto>());
        }

        public Task<OutboundCampaignJobDto?> GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId)
        {
            Log.Information("Noop queue: GetActiveJobForCampaignAsync business={BusinessId} campaign={CampaignId}",
                businessId, campaignId);
            return Task.FromResult<OutboundCampaignJobDto?>(null);
        }

        public Task<bool> CancelAsync(Guid businessId, Guid jobId)
        {
            Log.Information("Noop queue: CancelAsync business={BusinessId} job={JobId}", businessId, jobId);
            return Task.FromResult(true);
        }

        public Task<bool> ForceRetryNowAsync(Guid businessId, Guid jobId)
        {
            Log.Information("Noop queue: ForceRetryNowAsync business={BusinessId} job={JobId}", businessId, jobId);
            return Task.FromResult(true);
        }

        public Task<int> EnqueueBulkAsync(IEnumerable<OutboundCampaignJobCreateDto> jobs, CancellationToken ct = default)
        {
            var list = jobs?.ToList() ?? new List<OutboundCampaignJobCreateDto>();
            Log.Information("Noop queue: EnqueueBulkAsync received {Count} jobs", list.Count);
            return Task.FromResult(list.Count);
        }

        Task<List<OutboundCampaignJob>> IOutboundCampaignQueueService.GetJobsForCampaignAsync(Guid businessId, Guid campaignId)
        {
            throw new NotImplementedException();
        }

        Task<OutboundCampaignJob?> IOutboundCampaignQueueService.GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId)
        {
            throw new NotImplementedException();
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\NoopVariableMappingService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace xbytechat.api.Features.CampaignModule.Services
{
    /// <summary>
    /// Default stub: returns no saved mappings.
    /// Swap this out later with a DB-backed implementation that reads CampaignVariableMap.
    /// </summary>
    public sealed class NoopVariableMappingService : IVariableMappingService
    {
        public Task<Dictionary<string, string>> GetForCampaignAsync(
            Guid businessId,
            Guid campaignId,
            CancellationToken ct = default)
        {
            return Task.FromResult(new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase));
        }

        public Task SaveAsync(
           Guid businessId,
           Guid campaignId,
           Dictionary<string, string> mappings,
           CancellationToken ct = default)
        {
            // no-op
            return Task.CompletedTask;
        }

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\OutboundCampaignQueueService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;                       // <-- add
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.Features.Queueing.DTOs;    // <-- add for OutboundCampaignJobCreateDto

namespace xbytechat.api.Features.CampaignModule.Services
{
    public class OutboundCampaignQueueService : IOutboundCampaignQueueService
    {
        private readonly AppDbContext _db;
        private readonly ILogger<OutboundCampaignQueueService> _log;

        public OutboundCampaignQueueService(AppDbContext db, ILogger<OutboundCampaignQueueService> log)
        {
            _db = db; _log = log;
        }

        public async Task<Guid> EnqueueAsync(Guid businessId, Guid campaignId, bool forceDuplicate = false)
        {
            if (!forceDuplicate)
            {
                var existing = await _db.OutboundCampaignJobs
                    .Where(j => j.CampaignId == campaignId && (j.Status == "queued" || j.Status == "running"))
                    .OrderByDescending(j => j.CreatedAt)
                    .FirstOrDefaultAsync();

                if (existing != null)
                {
                    var found = await _db.Campaigns
                        .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);

                    if (found != null && found.Status != "Queued")
                    {
                        found.Status = "Queued";
                        found.UpdatedAt = DateTime.UtcNow;
                        await _db.SaveChangesAsync();
                    }

                    _log.LogInformation("Campaign {CampaignId} already queued/running. Job={JobId}", campaignId, existing.Id);
                    return existing.Id;
                }
            }

            var job = new OutboundCampaignJob
            {
                BusinessId = businessId,
                CampaignId = campaignId,
                Status = "queued",
                Attempt = 0,
                MaxAttempts = 5,
                NextAttemptAt = DateTimeOffset.UtcNow
            };

            _db.OutboundCampaignJobs.Add(job);

            var row = await _db.Campaigns
                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);

            if (row != null)
            {
                row.Status = "Queued";
                row.UpdatedAt = DateTime.UtcNow;
            }

            await _db.SaveChangesAsync();
            return job.Id;
        }

        public async Task<bool> MarkSucceededAsync(Guid jobId)
        {
            var j = await _db.OutboundCampaignJobs.FindAsync(jobId);
            if (j == null) return false;

            j.Attempt += 1;
            j.Status = "succeeded";
            j.UpdatedAt = DateTime.UtcNow;

            await _db.SaveChangesAsync();
            return true;
        }

        public async Task<bool> MarkFailedAsync(Guid jobId, string error, bool scheduleRetry = true)
        {
            var j = await _db.OutboundCampaignJobs.FindAsync(jobId);
            if (j == null) return false;

            j.Attempt += 1;
            j.LastError = Truncate(error, 3900);
            j.UpdatedAt = DateTime.UtcNow;

            if (!scheduleRetry || j.Attempt >= j.MaxAttempts)
            {
                j.Status = "failed";
            }
            else
            {
                var backoff = j.Attempt switch
                {
                    1 => TimeSpan.FromMinutes(1),
                    2 => TimeSpan.FromMinutes(5),
                    3 => TimeSpan.FromMinutes(15),
                    4 => TimeSpan.FromMinutes(60),
                    _ => TimeSpan.FromMinutes(180)
                };
                j.Status = "queued";
                j.NextAttemptAt = DateTimeOffset.UtcNow.Add(backoff);
            }

            await _db.SaveChangesAsync();
            return true;
        }

        public async Task<List<OutboundCampaignJob>> GetJobsForCampaignAsync(Guid businessId, Guid campaignId)
        {
            return await _db.OutboundCampaignJobs
                .Where(j => j.BusinessId == businessId && j.CampaignId == campaignId)
                .OrderByDescending(j => j.CreatedAt)
                .ToListAsync();
        }

        public async Task<OutboundCampaignJob?> GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId)
        {
            return await _db.OutboundCampaignJobs
                .Where(j => j.BusinessId == businessId && j.CampaignId == campaignId &&
                            (j.Status == "queued" || j.Status == "running"))
                .OrderBy(j => j.CreatedAt)
                .FirstOrDefaultAsync();
        }

        public async Task<bool> CancelAsync(Guid businessId, Guid jobId)
        {
            var j = await _db.OutboundCampaignJobs.FirstOrDefaultAsync(x => x.Id == jobId && x.BusinessId == businessId);
            if (j == null) return false;

            if (j.Status == "queued" || j.Status == "running")
            {
                j.Status = "canceled";
                j.UpdatedAt = DateTime.UtcNow;
                await _db.SaveChangesAsync();

                var campaign = await _db.Campaigns.FirstOrDefaultAsync(c => c.Id == j.CampaignId && c.BusinessId == businessId);
                if (campaign != null)
                {
                    var hasActive = await _db.OutboundCampaignJobs.AnyAsync(x =>
                        x.CampaignId == j.CampaignId &&
                        x.BusinessId == businessId &&
                        (x.Status == "queued" || x.Status == "running"));

                    if (!hasActive && (campaign.Status == "Queued" || campaign.Status == "Sending"))
                    {
                        campaign.Status = "Draft";
                        campaign.UpdatedAt = DateTime.UtcNow;
                        await _db.SaveChangesAsync();
                    }
                }
                return true;
            }
            return false;
        }

        public async Task<bool> ForceRetryNowAsync(Guid businessId, Guid jobId)
        {
            var j = await _db.OutboundCampaignJobs.FirstOrDefaultAsync(x => x.Id == jobId && x.BusinessId == businessId);
            if (j == null) return false;

            j.Status = "queued";
            j.NextAttemptAt = DateTimeOffset.UtcNow;
            j.UpdatedAt = DateTime.UtcNow;

            var campaign = await _db.Campaigns.FirstOrDefaultAsync(c => c.Id == j.CampaignId && c.BusinessId == businessId);
            if (campaign != null && campaign.Status != "Queued")
            {
                campaign.Status = "Queued";
                campaign.UpdatedAt = DateTime.UtcNow;
            }

            await _db.SaveChangesAsync();
            return true;
        }

        // NEW: bulk enqueue used by CampaignDispatcher
        public Task<int> EnqueueBulkAsync(IEnumerable<OutboundCampaignJobCreateDto> jobs, CancellationToken ct = default)
        {
            // For now, just log & return a deduped count. Replace with real queue later.
            var list = (jobs ?? Enumerable.Empty<OutboundCampaignJobCreateDto>()).ToList();

            // Deduplicate by provided IdempotencyKey (or fallback to a stable composite)
            var enqueuedCount = list
                .GroupBy(j => string.IsNullOrWhiteSpace(j.IdempotencyKey)
                                ? $"{j.CampaignId}:{j.CampaignRecipientId}"
                                : j.IdempotencyKey)
                .Count();

            _log.LogInformation("Bulk enqueue requested: {Requested} jobs, deduped to {Enqueued}",
                list.Count, enqueuedCount);

            // TODO: push to a real queue/bus and persist queue records as needed.
            return Task.FromResult(enqueuedCount);
        }

        private static string Truncate(string s, int max) =>
            string.IsNullOrEmpty(s) ? s : (s.Length <= max ? s : s.Substring(0, max));
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\OutboundCampaignSendWorker.cs 
====================================================== 
 
Ôªøusing System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using xbytechat.api;
using xbytechat.api.Features.CampaignModule.Services;

namespace xbytechat.api.Features.CampaignModule.Services
{
    /// <summary>
    /// Background worker that claims due jobs and invokes CampaignService to send.
    /// Flips Campaign.Status for truthful UI: Queued -> Sending -> Sent / Queued / Failed
    /// </summary>
    public class OutboundCampaignSendWorker : BackgroundService
    {
        private readonly IServiceProvider _sp;
        private readonly ILogger<OutboundCampaignSendWorker> _log;

        // Simple global concurrency cap & polling cadence
        private const int MaxParallel = 3;
        private static readonly TimeSpan SweepEvery = TimeSpan.FromSeconds(10);

        public OutboundCampaignSendWorker(IServiceProvider sp, ILogger<OutboundCampaignSendWorker> log)
        {
            _sp = sp; _log = log;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            await Task.Delay(TimeSpan.FromSeconds(5), stoppingToken);

            while (!stoppingToken.IsCancellationRequested)
            {
                try
                {
                    using var scope = _sp.CreateScope();
                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();

                    var now = DateTimeOffset.UtcNow;

                    // Find up to MaxParallel due jobs
                    var due = await db.OutboundCampaignJobs
                        .Where(j => j.Status == "queued" && j.NextAttemptAt <= now)
                        .OrderBy(j => j.NextAttemptAt)
                        .ThenBy(j => j.CreatedAt)
                        .Take(MaxParallel)
                        .ToListAsync(stoppingToken);

                    // Claim jobs (do NOT increment Attempt here)
                    foreach (var job in due)
                    {
                        job.Status = "running";
                        job.UpdatedAt = DateTime.UtcNow;
                    }
                    if (due.Count > 0)
                        await db.SaveChangesAsync(stoppingToken);

                    var tasks = due.Select(job => ProcessJobAsync(job.Id, stoppingToken)).ToArray();
                    await Task.WhenAll(tasks);
                }
                catch (Exception ex)
                {
                    _log.LogWarning(ex, "Send queue sweep failed");
                }

                await Task.Delay(SweepEvery, stoppingToken);
            }
        }

        private async Task ProcessJobAsync(Guid jobId, CancellationToken ct)
        {
            using var scope = _sp.CreateScope();
            var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();
            var queue = scope.ServiceProvider.GetRequiredService<IOutboundCampaignQueueService>();
            var campaignService = scope.ServiceProvider.GetRequiredService<ICampaignService>();
            var log = scope.ServiceProvider.GetRequiredService<ILogger<OutboundCampaignSendWorker>>();

            var job = await db.OutboundCampaignJobs.FirstOrDefaultAsync(j => j.Id == jobId, ct);
            if (job == null) return;

            // Mark Campaign -> Sending
            var campaign = await db.Campaigns
                .FirstOrDefaultAsync(c => c.Id == job.CampaignId && c.BusinessId == job.BusinessId, ct);

            if (campaign != null && campaign.Status != "Sending")
            {
                campaign.Status = "Sending";
                campaign.UpdatedAt = DateTime.UtcNow;
                await db.SaveChangesAsync(ct);
            }

            try
            {
                var result = await campaignService.SendTemplateCampaignWithTypeDetectionAsync(job.CampaignId);

                if (result.Success)
                {
                    if (campaign != null)
                    {
                        campaign.Status = "Sent";
                        campaign.UpdatedAt = DateTime.UtcNow;
                        await db.SaveChangesAsync(ct);
                    }

                    await queue.MarkSucceededAsync(job.Id);
                    log.LogInformation("Job {Job} succeeded for campaign {Campaign}", jobId, job.CampaignId);
                }
                else
                {
                    // Compute whether we will retry BEFORE calling MarkFailed (Attempt not yet incremented)
                    var willRetry = job.Attempt + 1 < job.MaxAttempts;

                    if (campaign != null)
                    {
                        campaign.Status = willRetry ? "Queued" : "Failed";
                        campaign.UpdatedAt = DateTime.UtcNow;
                        await db.SaveChangesAsync(ct);
                    }

                    await queue.MarkFailedAsync(job.Id, result.Message ?? "Unknown send error", scheduleRetry: true);
                    log.LogWarning("Job {Job} failed for campaign {Campaign}: {Msg}", jobId, job.CampaignId, result.Message);
                }
            }
            catch (Exception ex)
            {
                var willRetry = job.Attempt + 1 < job.MaxAttempts;

                if (campaign != null)
                {
                    campaign.Status = willRetry ? "Queued" : "Failed";
                    campaign.UpdatedAt = DateTime.UtcNow;
                    await db.SaveChangesAsync(ct);
                }

                await queue.MarkFailedAsync(job.Id, ex.ToString(), scheduleRetry: true);
                log.LogWarning(ex, "Job {Job} exception for campaign {Campaign}", jobId, job.CampaignId);
            }
        }
    }
}
 
 
