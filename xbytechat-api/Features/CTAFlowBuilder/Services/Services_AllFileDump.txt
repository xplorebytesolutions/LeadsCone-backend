Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\CTAFlowService.cs 
====================================================== 
 
Ôªø// üìÑ File: Features/CTAFlowBuilder/Services/CTAFlowService.cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api.AuthModule.Models;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.MessagesEngine.DTOs;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat.api.Features.Tracking.Models;
using xbytechat.api.Helpers;
using xbytechat.api.WhatsAppSettings.DTOs;
using xbytechat_api.WhatsAppSettings.Services;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public class CTAFlowService : ICTAFlowService
    {
        private readonly AppDbContext _context;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;

        public CTAFlowService(AppDbContext context, IMessageEngineService messageEngineService,
            IWhatsAppTemplateFetcherService templateFetcherService
            )
        {
            _context = context;
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
        }

        public async Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy)
        {
            var flow = new CTAFlowConfig
            {
                Id = Guid.NewGuid(),
                FlowName = dto.FlowName,
                BusinessId = businessId,
                CreatedAt = DateTime.UtcNow,
                CreatedBy = createdBy,
                IsPublished = dto.IsPublished
            };

            foreach (var stepDto in dto.Steps)
            {
                var step = new CTAFlowStep
                {
                    Id = Guid.NewGuid(),
                    CTAFlowConfigId = flow.Id,
                    TriggerButtonText = stepDto.TriggerButtonText,
                    TriggerButtonType = stepDto.TriggerButtonType,
                    TemplateToSend = stepDto.TemplateToSend,
                    StepOrder = stepDto.StepOrder,
                    ButtonLinks = stepDto.ButtonLinks?.Select(link => new FlowButtonLink
                    {
                        ButtonText = link.ButtonText,
                        NextStepId = link.NextStepId
                    }).ToList() ?? new List<FlowButtonLink>()
                };

                flow.Steps.Add(step);
            }

            _context.CTAFlowConfigs.Add(flow);
            await _context.SaveChangesAsync();

            return flow.Id;
        }

        public async Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Include(f => f.Steps.OrderBy(s => s.StepOrder))
                .Where(f => f.BusinessId == businessId && f.IsActive && f.IsPublished)
                .FirstOrDefaultAsync();
        }

        public async Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Include(f => f.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .Where(f => f.BusinessId == businessId && f.IsPublished == false)
                .OrderByDescending(f => f.CreatedAt)
                .FirstOrDefaultAsync();
        }



        public async Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId)
        {
            return await _context.CTAFlowSteps
                .Where(s => s.CTAFlowConfigId == flowId)
                .OrderBy(s => s.StepOrder)
                .ToListAsync();
        }

        public async Task<CTAFlowStep?> MatchStepByButtonAsync(
            Guid businessId,
            string buttonText,
            string buttonType,
            string TemplateName,
            Guid? campaignId = null)
        {
            var normalizedButtonText = buttonText?.Trim().ToLower() ?? "";
            var normalizedButtonType = buttonType?.Trim().ToLower() ?? "";
            var normalizedTemplateName = TemplateName?.Trim().ToLower() ?? "";

            // 1Ô∏è‚É£ Try campaign-specific override
            if (campaignId.HasValue)
            {
                var overrideStep = await _context.CampaignFlowOverrides
                    .Where(o =>
                        o.CampaignId == campaignId &&
                        o.ButtonText.ToLower() == normalizedButtonText &&
                        o.TemplateName.ToLower() == normalizedTemplateName)
                    .FirstOrDefaultAsync();

                if (overrideStep != null)
                {
                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();

                    var matched = await _context.CTAFlowSteps
                        .Include(s => s.Flow)
                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);

                    if (matched != null)
                    {
                        Log.Information("üîÅ Override matched: Template '{Template}' ‚Üí Step '{StepId}'", overrideStep.OverrideNextTemplate, matched.Id);
                        return matched;
                    }

                    Log.Warning("‚ö†Ô∏è Override found for button '{Button}' but no matching step for template '{Template}'", normalizedButtonText, overrideStep.OverrideNextTemplate);
                }

                else
                {
                    Log.Information("üü° No campaign override found for button '{Button}' on template '{Template}'", normalizedButtonText, normalizedTemplateName);
                }
            }

            // 2Ô∏è‚É£ Fallback to standard flow logic
            var fallbackStep = await _context.CTAFlowSteps
                .Include(s => s.Flow)
                .Where(s =>
                    s.Flow.BusinessId == businessId &&
                    s.Flow.IsActive &&
                    s.Flow.IsPublished &&
                    s.TriggerButtonText.ToLower() == normalizedButtonText &&
                    s.TriggerButtonType.ToLower() == normalizedButtonType)
                .FirstOrDefaultAsync();

            if (fallbackStep != null)
            {
                Log.Information("‚úÖ Fallback flow step matched: StepId = {StepId}, Flow = {FlowName}", fallbackStep.Id, fallbackStep.Flow?.FlowName);
            }
            else
            {
                Log.Warning("‚ùå No fallback step matched for button '{ButtonText}' of type '{ButtonType}' in BusinessId: {BusinessId}", normalizedButtonText, normalizedButtonType, businessId);
            }

            return fallbackStep;
        }



        public async Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy)
        {
            try
            {
                // üî• 1. Remove existing published flow for this business
                var existingFlows = await _context.CTAFlowConfigs
                    .Where(f => f.BusinessId == businessId && f.IsPublished)
                    .ToListAsync();

                if (existingFlows.Any())
                {
                    _context.CTAFlowConfigs.RemoveRange(existingFlows);
                }

                // üå± 2. Create new flow config
                var flowConfig = new CTAFlowConfig
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    FlowName = "Published Flow - " + DateTime.UtcNow.ToString("yyyyMMdd-HHmm"),
                    IsPublished = true,
                    IsActive = true,
                    CreatedBy = createdBy,
                    CreatedAt = DateTime.UtcNow,
                    Steps = new List<CTAFlowStep>()
                };

                // üîÅ 3. Convert each step DTO to model
                foreach (var stepDto in steps)
                {
                    var step = new CTAFlowStep
                    {
                        Id = Guid.NewGuid(),
                        CTAFlowConfigId = flowConfig.Id,
                        TriggerButtonText = stepDto.TriggerButtonText,
                        TriggerButtonType = stepDto.TriggerButtonType,
                        TemplateToSend = stepDto.TemplateToSend,
                        StepOrder = stepDto.StepOrder,
                        ButtonLinks = stepDto.ButtonLinks.Select(bl => new FlowButtonLink
                        {
                            Id = Guid.NewGuid(),
                            ButtonText = bl.ButtonText,
                            NextStepId = bl.NextStepId,
                        }).ToList()
                    };

                    flowConfig.Steps.Add(step);
                }

                // üíæ 4. Save to DB
                await _context.CTAFlowConfigs.AddAsync(flowConfig);
                await _context.SaveChangesAsync();

                return ResponseResult.SuccessInfo("‚úÖ Flow published successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Error while publishing CTA flow.");
                return ResponseResult.ErrorInfo("‚ùå Could not publish flow.");
            }
        }

        public async Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy)
        {
            try
            {
                Log.Information("üß† SaveVisualFlow started | FlowName: {FlowName} | BusinessId: {BusinessId}", dto.FlowName, businessId);

                if (dto.Nodes == null || !dto.Nodes.Any())
                {
                    Log.Warning("‚ùå No nodes found in flow. Aborting save.");
                    return ResponseResult.ErrorInfo("‚ùå Cannot save an empty flow. Please add at least one step.");
                }

                // 1) Upsert FlowConfig
                var flow = await _context.CTAFlowConfigs
                    .FirstOrDefaultAsync(f => f.FlowName == dto.FlowName && f.BusinessId == businessId);

                if (flow == null)
                {
                    flow = new CTAFlowConfig
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = businessId,
                        FlowName = dto.FlowName,
                        CreatedBy = createdBy,
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow,
                        IsActive = true,
                        IsPublished = dto.IsPublished
                    };
                    _context.CTAFlowConfigs.Add(flow);
                    Log.Information("‚úÖ New FlowConfig created with ID: {Id}", flow.Id);
                }
                else
                {
                    // wipe old steps+links for a clean replace
                    var oldSteps = await _context.CTAFlowSteps
                        .Where(s => s.CTAFlowConfigId == flow.Id)
                        .Include(s => s.ButtonLinks)
                        .ToListAsync();

                    foreach (var step in oldSteps)
                        _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);

                    _context.CTAFlowSteps.RemoveRange(oldSteps);

                    flow.IsPublished = dto.IsPublished;
                    flow.UpdatedAt = DateTime.UtcNow;
                }

                // 2) Build Steps (map by incoming node.Id string)
                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);

                foreach (var (node, index) in dto.Nodes.Select((n, i) => (n, i)))
                {
                    if (string.IsNullOrWhiteSpace(node.Id))
                        continue;

                    var step = new CTAFlowStep
                    {
                        Id = Guid.NewGuid(),
                        CTAFlowConfigId = flow.Id,
                        StepOrder = index,
                        TemplateToSend = node.TemplateName,
                        TemplateType = node.TemplateType ?? "UNKNOWN",
                        TriggerButtonText = node.TriggerButtonText ?? "",
                        TriggerButtonType = node.TriggerButtonType ?? "cta",
                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,
                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,
                        UseProfileName = node.UseProfileName,
                        ProfileNameSlot = node.ProfileNameSlot ?? 1,
                        ButtonLinks = new List<FlowButtonLink>()
                    };

                    stepMap[node.Id] = step;
                    //if (step.UseProfileName && (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot < 1))
                    //    step.ProfileNameSlot = 1;
                    _context.CTAFlowSteps.Add(step);
                }

                // 3) Build Links PER NODE using buttons order (with Index), not per-edge blindly
                foreach (var node in dto.Nodes)
                {
                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))
                        continue;

                    // outgoing edges from this node
                    var outEdges = dto.Edges?.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList()
                                   ?? new List<FlowEdgeDto>();

                    // dedupe by button text to avoid ambiguous routing
                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

                    // stable ordering: by provided Index (0..N), then by Text
                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())
                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)
                        .ThenBy(b => b.Text ?? string.Empty)
                        .ToList();

                    short nextIdx = 0;

                    foreach (var btn in orderedButtons)
                    {
                        var text = (btn.Text ?? string.Empty).Trim();
                        if (string.IsNullOrEmpty(text))
                            continue;

                        if (!seenTexts.Add(text))
                        {
                            Log.Warning("‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; keeping first, skipping duplicates.", text, node.Id);
                            continue;
                        }

                        // match edge by SourceHandle == button text (how ReactFlow wires handles)
                        var edge = outEdges.FirstOrDefault(e =>
                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));
                        if (edge == null)
                        {
                            // no wire from this button ‚Üí skip link creation but keep button metadata in UI on reload
                            continue;
                        }

                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep))
                            continue;

                        // final index: prefer incoming payload Index; else fallback to a sequential counter
                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;
                        nextIdx = (short)(finalIndex + 1);

                        var link = new FlowButtonLink
                        {
                            Id = Guid.NewGuid(),
                            CTAFlowStepId = fromStep.Id,
                            NextStepId = toStep.Id,
                            ButtonText = text,
                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? "QUICK_REPLY" : btn.Type,
                            ButtonSubType = btn.SubType ?? string.Empty,
                            ButtonValue = btn.Value ?? string.Empty,
                            ButtonIndex = (short)finalIndex // üîë persist the index
                        };

                        _context.FlowButtonLinks.Add(link);
                        fromStep.ButtonLinks.Add(link);

                        // propagate trigger info on the target step for convenience
                        toStep.TriggerButtonText = text;
                        toStep.TriggerButtonType = (btn.Type ?? "QUICK_REPLY").ToLowerInvariant();
                    }
                }

                await _context.SaveChangesAsync();

                Log.Information("‚úÖ Flow '{Flow}' saved | Steps: {StepCount} | Links: {LinkCount}",
                    dto.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));

                return ResponseResult.SuccessInfo("‚úÖ Flow saved successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while saving flow");
                return ResponseResult.ErrorInfo("‚ùå Internal error while saving flow.");
            }
        }

        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId)
        {
            var flow = await _context.CTAFlowConfigs
                .Include(c => c.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .FirstOrDefaultAsync(c => c.Id == flowId && c.IsActive);

            if (flow == null) return null;

            var businessId = flow.BusinessId;

            // ‚úÖ Pre-fetch templates from Meta
            var templateMap = new Dictionary<string, TemplateMetadataDto>();

            foreach (var step in flow.Steps)
            {
                if (!string.IsNullOrWhiteSpace(step.TemplateToSend) && !templateMap.ContainsKey(step.TemplateToSend))
                {
                    try
                    {
                        var template = await _templateFetcherService.GetTemplateByNameAsync(
                            businessId,
                            step.TemplateToSend,
                            includeButtons: true
                        );

                        if (template != null)
                            templateMap[step.TemplateToSend] = template;
                    }
                    catch (Exception ex)
                    {
                        Log.Warning(ex, "‚ö†Ô∏è Failed to fetch template from Meta for {Template}", step.TemplateToSend);
                    }
                }
            }

            // ‚úÖ Map into ReactFlow-compatible structure
            var nodes = flow.Steps.Select(step =>
            {
                var template = templateMap.GetValueOrDefault(step.TemplateToSend);

                return new FlowNodeDto
                {
                    Id = step.Id.ToString(),
                    TemplateName = step.TemplateToSend,
                    MessageBody = template?.Body ?? "Message body preview...",
                    TriggerButtonText = step.TriggerButtonText,
                    TriggerButtonType = step.TriggerButtonType,
                    PositionX = step.PositionX ?? 100,
                    PositionY = step.PositionY ?? 100,

                    // ‚úÖ NEW: Include conditional logic
                    RequiredTag = step.RequiredTag,
                    RequiredSource = step.RequiredSource,

                    //Buttons = step.ButtonLinks.Select(link => new LinkButtonDto
                    //{
                    //    Text = link.ButtonText,
                    //    TargetNodeId = link.NextStepId.ToString()
                    //}).ToList()

                    UseProfileName = step.UseProfileName,
                    ProfileNameSlot = step.ProfileNameSlot,

                    Buttons = step.ButtonLinks.Select(link => new LinkButtonDto
                    {
                        Text = link.ButtonText,
                        Type = link.ButtonType,
                        SubType = link.ButtonSubType,
                        Value = link.ButtonValue,
                        TargetNodeId = link.NextStepId?.ToString()
                    }).ToList()

                             .Concat((template?.ButtonParams ?? new List<ButtonMetadataDto>())
                                 .Where(btn => !step.ButtonLinks.Any(bl => bl.ButtonText == btn.Text))
                                 .Select(btn => new LinkButtonDto
                                 {
                                     Text = btn.Text,
                                     TargetNodeId = null
                                 })).ToList()
                };

            }).ToList();

            return new SaveVisualFlowDto
            {
                FlowName = flow.FlowName,
                IsPublished = flow.IsPublished,
                Nodes = nodes,
                Edges = flow.Steps
                        .SelectMany(step =>
                            step.ButtonLinks.Select(link => new FlowEdgeDto
                            {
                                FromNodeId = step.Id.ToString(),
                                ToNodeId = link.NextStepId.ToString(),
                                SourceHandle = link.ButtonText // ‚úÖ important
                            })
                        ).ToList()

            };
        }


        public async Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId)
        {
            var flow = await _context.CTAFlowConfigs
                .Where(f => f.Id == id && f.BusinessId == businessId)
                .FirstOrDefaultAsync();

            if (flow == null)
                return ResponseResult.ErrorInfo("‚ùå Flow not found or does not belong to you.");

            _context.CTAFlowConfigs.Remove(flow);
            await _context.SaveChangesAsync();

            return ResponseResult.SuccessInfo("‚úÖ Flow deleted successfully.");
        }
        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Where(f => f.BusinessId == businessId && f.IsPublished)
                .OrderByDescending(f => f.CreatedAt)
                .Select(f => new VisualFlowSummaryDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    IsPublished = f.IsPublished,
                    CreatedAt = f.CreatedAt
                })
                .ToListAsync();
        }

        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)
                .OrderByDescending(f => f.CreatedAt)
                .Select(f => new VisualFlowSummaryDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    CreatedAt = f.CreatedAt,
                    IsPublished = f.IsPublished
                })
                .ToListAsync();
        }

        public async Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber)
        {
            // Log.Information("üöÄ Executing follow-up for BusinessId: {BusinessId}, CurrentStepId: {StepId}", businessId);
            if (currentStep == null)
            {
                Log.Warning("‚ö†Ô∏è Cannot execute follow-up. Current step is null.");
                return ResponseResult.ErrorInfo("Current step not found.");
            }

            // üß† Step: Look through all button links for a valid NextStepId
            var nextLink = currentStep.ButtonLinks.FirstOrDefault(link => link.NextStepId != null);

            if (nextLink == null)
            {
                Log.Information("‚ÑπÔ∏è No NextStepId defined in any ButtonLinks for StepId: {StepId}", currentStep.Id);
                return ResponseResult.SuccessInfo("No follow-up step to execute.");
            }

            // üîç Fetch the next step using new logic (via CTAFlowConfig + Steps)
            // 1Ô∏è‚É£ Try to resolve with smart condition check
            var followUpStep = await GetChainedStepAsync(businessId, nextLink.NextStepId, null, null);

            if (followUpStep == null)
            {
                Log.Warning("‚ùå Follow-up step skipped due to condition mismatch ‚Üí StepId: {StepId}", nextLink.NextStepId);

                // 2Ô∏è‚É£ Optional fallback: Try same flow ‚Üí Any step without conditions
                var flow = await _context.CTAFlowConfigs
                    .Include(f => f.Steps)
                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.IsPublished);

                followUpStep = flow?.Steps
                    .Where(s => string.IsNullOrEmpty(s.RequiredTag) && string.IsNullOrEmpty(s.RequiredSource))
                    .OrderBy(s => s.StepOrder)
                    .FirstOrDefault();

                if (followUpStep != null)
                {
                    Log.Information("üîÅ Fallback step selected ‚Üí StepId: {StepId}, Template: {Template}",
                        followUpStep.Id, followUpStep.TemplateToSend);
                }
                else
                {
                    Log.Warning("üö´ No suitable fallback found in flow. Skipping follow-up.");
                    return ResponseResult.SuccessInfo("No matching follow-up step based on user context.");
                }
            }


            // üì® Send the follow-up message using the TemplateToSend field
            try
            {
                var template = followUpStep.TemplateToSend;

                Log.Information("üì§ Sending follow-up message ‚Üí Template: {Template}, To: {Recipient}", template, recipientNumber);

                // üß™ Replace this with actual message engine call
                var sendDto = new SimpleTemplateMessageDto
                {
                    RecipientNumber = recipientNumber,
                    TemplateName = template,
                    TemplateParameters = new List<string>() // Add dynamic params later if needed
                };

                var sendResult = await _messageEngineService
     .SendTemplateMessageSimpleAsync(businessId, sendDto);

                if (!sendResult.Success)
                {
                    Log.Warning("‚ùå Follow-up message send failed ‚Üí {Template}", template);
                    return ResponseResult.ErrorInfo("Follow-up send failed.", sendResult.ErrorMessage);
                }


                return ResponseResult.SuccessInfo($"Follow-up message sent using template: {template}", null, sendResult.RawResponse);

            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Error sending follow-up message for StepId: {StepId}", followUpStep.Id);
                return ResponseResult.ErrorInfo("Failed to send follow-up.");
            }
        }
        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)
        {
            return GetChainedStepAsync(businessId, nextStepId, null, null); // Forward to full logic
        }

        // ‚úÖ Extended logic with condition check (Tag + Source)
        public async Task<CTAFlowStep?> GetChainedStepAsync(
            Guid businessId,
            Guid? nextStepId,
            TrackingLog? trackingLog = null,
            Contact? contact = null)
        {
            if (nextStepId == null)
            {
                Log.Information("‚ÑπÔ∏è No NextStepId provided ‚Äî skipping follow-up.");
                return null;
            }

            try
            {
                var flow = await _context.CTAFlowConfigs
                    .Include(f => f.Steps)
                    .FirstOrDefaultAsync(f =>
                        f.BusinessId == businessId &&
                        f.Steps.Any(s => s.Id == nextStepId));

                if (flow == null)
                {
                    Log.Warning("‚ö†Ô∏è No flow found containing NextStepId: {NextStepId} for business: {BusinessId}", nextStepId, businessId);
                    return null;
                }

                var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);

                if (followUpStep == null)
                {
                    Log.Warning("‚ùå Step matched in flow but not found in step list: {NextStepId}", nextStepId);
                    return null;
                }

                // ‚úÖ Check RequiredTag / Source match
                if (trackingLog != null)
                {
                    var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);

                    if (!isMatch)
                    {
                        Log.Information("üö´ Step {StepId} skipped due to condition mismatch [Tag: {Tag}, Source: {Source}]",
                            followUpStep.Id, followUpStep.RequiredTag, followUpStep.RequiredSource);
                        return null;
                    }
                }

                Log.Information("‚úÖ Follow-up step found and matched ‚Üí StepId: {StepId}, Template: {Template}",
                    followUpStep.Id, followUpStep.TemplateToSend);

                return followUpStep;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while fetching chained step for NextStepId: {NextStepId}", nextStepId);
                throw;
            }
        }

        // ‚úÖ Optional helper for resolving from TrackingLogId
        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(
            Guid businessId,
            Guid? nextStepId,
            Guid? trackingLogId)
        {
            var log = await _context.TrackingLogs
                .Include(l => l.Contact)
                    .ThenInclude(c => c.ContactTags)
                        .ThenInclude(ct => ct.Tag)
                .FirstOrDefaultAsync(l => l.Id == trackingLogId);

            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);
        }
       
        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)
        {
            try
            {
                Log.Information("üö¶ Executing Visual Flow ‚Üí StepId: {StepId} | TrackingLogId: {TrackingLogId}", startStepId, trackingLogId);

                var log = await _context.TrackingLogs
                    .Include(l => l.Contact)
                        .ThenInclude(c => c.ContactTags)
                            .ThenInclude(ct => ct.Tag)
                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);

                if (log == null)
                {
                    Log.Warning("‚ùå TrackingLog not found for ID: {TrackingLogId}", trackingLogId);
                    return ResponseResult.ErrorInfo("Tracking log not found.");
                }

                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);

                if (step == null)
                {
                    Log.Warning("‚ùå No flow step matched or conditions failed ‚Üí StepId: {StepId}", startStepId);
                    return ResponseResult.ErrorInfo("Step conditions not satisfied.");
                }

                ResponseResult sendResult;

                // This switch block remains unchanged
                switch (step.TemplateType?.ToLower())
                {
                    case "image_template":
                        var imageDto = new ImageTemplateMessageDto
                        {
                            BusinessId = businessId,
                            RecipientNumber = log.ContactPhone ?? "",
                            TemplateName = step.TemplateToSend,
                            LanguageCode = "en_US"
                        };
                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);
                        break;

                    case "text_template":
                    default:
                        var textDto = new SimpleTemplateMessageDto
                        {
                            RecipientNumber = log.ContactPhone ?? "",
                            TemplateName = step.TemplateToSend,
                            TemplateParameters = new()
                        };
                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);
                        break;
                }

                // ‚úÖ 2. SAVE the new ID to the log
                var executionLog = new FlowExecutionLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    StepId = step.Id,
                    FlowId = step.CTAFlowConfigId,
                    CampaignSendLogId = campaignSendLogId, // <-- THE NEW VALUE IS SAVED HERE
                    TrackingLogId = trackingLogId,
                    ContactPhone = log.ContactPhone,
                    TriggeredByButton = step.TriggerButtonText,
                    TemplateName = step.TemplateToSend,
                    TemplateType = step.TemplateType,
                    Success = sendResult.Success,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ExecutedAt = DateTime.UtcNow
                };

                _context.FlowExecutionLogs.Add(executionLog);
                await _context.SaveChangesAsync();

                if (sendResult.Success)
                {
                    Log.Information("‚úÖ Flow step executed ‚Üí Template: {Template} sent to {To}", step.TemplateToSend, log.ContactPhone);
                }
                else
                {
                    Log.Warning("‚ùå Failed to send template from flow ‚Üí {Reason}", sendResult.ErrorMessage);
                }

                return ResponseResult.SuccessInfo($"Flow step executed. Sent: {sendResult.Success}", null, sendResult.RawResponse);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception during ExecuteVisualFlowAsync()");
                return ResponseResult.ErrorInfo("Internal error during flow execution.");
            }
        }

        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)
        {
            return await _context.FlowButtonLinks
     .Where(l => l.CTAFlowStepId == sourceStepId
              && l.NextStepId != null
              && l.Step.CTAFlowConfigId == flowId
              && l.ButtonIndex == buttonIndex)
     .SingleOrDefaultAsync();

        }

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\ExtrackAllFiles.bat 
====================================================== 
 
@echo off
REM This script will find all files and output their name and content into one file.
REM The output file will be named [FolderName]_AllFileDump.txt.

REM Get the current folder's name and set it as the output file name with the custom suffix
for %%I in ("%cd%") do set "outputFile=%%~nI_AllFileDump.txt"

REM Clear the output file to start fresh
> "%outputFile%" (echo Folder and File Content Report)
echo. >> "%outputFile%"

REM Loop through all files in the current directory and subdirectories
for /R . %%F in (*.*) do (
    echo ====================================================== >> "%outputFile%"
    echo FILE: %%F >> "%outputFile%"
    echo ====================================================== >> "%outputFile%"
    echo. >> "%outputFile%"
    type "%%F" >> "%outputFile%" 2>nul
    echo. >> "%outputFile%"
    echo. >> "%outputFile%"
)

echo Finished! All content has been extracted to %outputFile% 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\FlowRuntimeService.cs 
====================================================== 
 
Ôªøusing Microsoft.EntityFrameworkCore;
using System.Text.Json;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat_api.WhatsAppSettings.Services; 

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public class FlowRuntimeService : IFlowRuntimeService
    {
        private readonly AppDbContext _dbContext;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;

        
        public FlowRuntimeService(
            AppDbContext dbContext,
            IMessageEngineService messageEngineService,
            IWhatsAppTemplateFetcherService templateFetcherService)
        {
            _dbContext = dbContext;
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
        }

        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult
        //            {
        //                Success = true,
        //                RedirectUrl = context.ClickedButton.ButtonValue
        //            };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);

        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template to pick the correct language and catch 132001 early
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            // log a failed flow execution (no WA call attempted)
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult
        //            {
        //                Success = false,
        //                Error = $"Template '{templateName}' not found or not approved."
        //            };
        //        }

        //        // prefer the template‚Äôs actual language over hard-coding "en_US"
        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // (Optional) build body/button components here if your step needs params.
        //        // Quick-reply buttons require NO components; dynamic URL buttons would.
        //        var components = new List<object>();

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        var sendResult = await _messageEngineService.SendPayloadAsync(context.BusinessId, payload);

        //        // 4) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 5) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId, // correlate to the parent WA msg (if any)
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,

        //            // üî¥ This was missing before ‚Üí caused NOT NULL violation
        //            MessageContent = templateName,

        //            // good hygiene: stamp SentAt on success
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null,
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 6) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId,

        //            // Optional (only if your entity has these columns):
        //            // TemplateName = templateName,
        //            // TemplateType = targetStep.TemplateType,
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}

        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);

        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
        //        }

        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // 3.1) üîé Resolve provider deterministically from settings
        //        //     prefer a provider that already mirrors a Default sender (PhoneNumberId != null)
        //        var settings = await _dbContext.WhatsAppSettings
        //            .AsNoTracking()
        //            .Where(s => s.BusinessId == context.BusinessId && s.IsActive)
        //            .OrderByDescending(s => s.PhoneNumberId != null)
        //            .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)
        //            .ToListAsync();

        //        if (settings.Count == 0)
        //            return new NextStepResult { Success = false, Error = "WhatsApp settings not found for this business." };

        //        if (settings.Count > 1 && settings[0].PhoneNumberId == null)
        //            return new NextStepResult
        //            {
        //                Success = false,
        //                Error = "Multiple WhatsApp providers are active but no Default sender is set. Set a Default number or specify provider for flows."
        //            };

        //        var provider = settings[0].Provider; // must already be UPPERCASE: PINNACLE or META_CLOUD
        //        if (provider != "PINNACLE" && provider != "META_CLOUD")
        //            return new NextStepResult { Success = false, Error = $"Unsupported provider configured: {provider}" };

        //        // (Optional) if you ever want to pin a sender for flows, you can use settings[0].PhoneNumberId.
        //        string? phoneNumberId = null;

        //        // (Optional) build body/button components here if your step needs params.
        //        var components = new List<object>();

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        // 4) Send via explicit provider (deterministic signature)
        //        var sendResult = await _messageEngineService.SendPayloadAsync(
        //            context.BusinessId,
        //            provider,
        //            payload,
        //            phoneNumberId
        //        );

        //        // 5) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId,
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,
        //            MessageContent = templateName,                      // NOT NULL
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 7) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}
        public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        {
            try
            {
                // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
                if (context.ClickedButton != null &&
                    context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
                {
                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = context.BusinessId,
                        FlowId = context.FlowId,
                        StepId = context.SourceStepId,
                        StepName = "URL_REDIRECT",
                        MessageLogId = context.MessageLogId,
                        ButtonIndex = context.ButtonIndex,
                        ContactPhone = context.ContactPhone,
                        Success = true,
                        ExecutedAt = DateTime.UtcNow,
                        RequestId = context.RequestId
                    });
                    await _dbContext.SaveChangesAsync();

                    return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
                }

                // 2) Load next step in the same flow
                var targetStep = await _dbContext.CTAFlowSteps
                    .Include(s => s.ButtonLinks)
                    .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
                                              s.CTAFlowConfigId == context.FlowId);

                if (targetStep == null)
                    return new NextStepResult { Success = false, Error = "Target step not found." };

                if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
                    return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

                var templateName = targetStep.TemplateToSend.Trim();

                // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)
                var meta = await _templateFetcherService.GetTemplateByNameAsync(
                    context.BusinessId, templateName, includeButtons: true);

                if (meta == null)
                {
                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = context.BusinessId,
                        FlowId = context.FlowId,
                        StepId = targetStep.Id,
                        StepName = templateName,
                        MessageLogId = null,
                        ButtonIndex = context.ButtonIndex,
                        ContactPhone = context.ContactPhone,
                        Success = false,
                        ErrorMessage = $"Template '{templateName}' not found for this WABA.",
                        RawResponse = null,
                        ExecutedAt = DateTime.UtcNow,
                        RequestId = context.RequestId
                    });
                    await _dbContext.SaveChangesAsync();

                    return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
                }

                var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

                // 3.1) üß≠ Determine sender (provider + phoneNumberId) from context (source of truth)
                //      Fall back once to default active number for this business+provider if PhoneNumberId is missing.
                var provider = (context.Provider ?? string.Empty).Trim().ToUpperInvariant();
                if (provider != "PINNACLE" && provider != "META_CLOUD")
                    return new NextStepResult { Success = false, Error = "Provider is required for flow sends (PINNACLE or META_CLOUD)." };

                string? phoneNumberId = context.PhoneNumberId;

                if (string.IsNullOrWhiteSpace(phoneNumberId))
                {
                    // Fallback: pick the default/active number for this business + provider
                    phoneNumberId = await _dbContext.WhatsAppPhoneNumbers
                        .AsNoTracking()
                        .Where(n => n.BusinessId == context.BusinessId
                                    && n.IsActive
                                    && n.Provider.ToUpper() == provider)
                        .OrderByDescending(n => n.IsDefault)
                        .ThenBy(n => n.WhatsAppBusinessNumber)
                        .Select(n => n.PhoneNumberId)
                        .FirstOrDefaultAsync();

                    if (string.IsNullOrWhiteSpace(phoneNumberId))
                        return new NextStepResult { Success = false, Error = "Missing PhoneNumberId (no default sender configured for this provider)." };
                }

                // (Optional) build body/button components here if your step needs params.
                var components = new List<object>();

                var payload = new
                {
                    messaging_product = "whatsapp",
                    to = context.ContactPhone,
                    type = "template",
                    template = new
                    {
                        name = templateName,
                        language = new { code = languageCode },
                        components
                    }
                };

                // 4) Send via explicit provider (deterministic signature)
                var sendResult = await _messageEngineService.SendPayloadAsync(
                    context.BusinessId,
                    provider,               // explicit
                    payload,
                    phoneNumberId           // explicit
                );

                // 5) Snapshot buttons for robust click mapping later
                string? buttonBundleJson = null;
                if (targetStep.ButtonLinks?.Count > 0)
                {
                    var bundle = targetStep.ButtonLinks
                        .OrderBy(b => b.ButtonIndex)
                        .Select(b => new
                        {
                            i = b.ButtonIndex,
                            t = b.ButtonText ?? "",
                            ty = b.ButtonType ?? "QUICK_REPLY",
                            v = b.ButtonValue ?? "",
                            ns = b.NextStepId
                        })
                        .ToList();

                    buttonBundleJson = JsonSerializer.Serialize(bundle);
                }

                // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
                var messageLog = new MessageLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = context.BusinessId,
                    RecipientNumber = context.ContactPhone,
                    CTAFlowConfigId = context.FlowId,
                    CTAFlowStepId = targetStep.Id,
                    FlowVersion = context.Version,
                    Source = "flow",
                    RefMessageId = context.MessageLogId,
                    CreatedAt = DateTime.UtcNow,
                    Status = sendResult.Success ? "Sent" : "Failed",
                    MessageId = sendResult.MessageId,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ButtonBundleJson = buttonBundleJson,
                    MessageContent = templateName,                      // NOT NULL
                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
                };

                _dbContext.MessageLogs.Add(messageLog);

                // 7) Flow execution audit row
                _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = context.BusinessId,
                    FlowId = context.FlowId,
                    StepId = targetStep.Id,
                    StepName = templateName,
                    MessageLogId = messageLog.Id,
                    ButtonIndex = context.ButtonIndex,
                    ContactPhone = context.ContactPhone,
                    Success = sendResult.Success,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ExecutedAt = DateTime.UtcNow,
                    RequestId = context.RequestId
                });

                await _dbContext.SaveChangesAsync();

                return new NextStepResult
                {
                    Success = sendResult.Success,
                    Error = sendResult.ErrorMessage,
                    RedirectUrl = null
                };
            }
            catch (Exception ex)
            {
                return new NextStepResult { Success = false, Error = ex.Message };
            }
        }

    }
}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\ICTAFlowService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Helpers;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public interface ICTAFlowService
    {
        // ‚úÖ Used for flow creation and saving
        Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy);
        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);

        // ‚úÖ Load flows
        Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId);
        Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId);
        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);
        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);

        // ‚úÖ Load and manage flow steps
        Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId);

      
        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText,string buttonType,string currentTemplateName,Guid? campaignId = null);


        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);
        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);
        // ‚úÖ Runtime logic
        Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber);

        // ‚úÖ Flow management
        Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy);
        Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId);

        // ‚úÖ Editor loading (visual builder)
        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid id);

      
        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);
        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);

        public interface IFlowRuntimeService
        {
            Task<NextStepResult> ExecuteNextAsync(NextStepContext context);
        }
    }
}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\IFlowRuntimeService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CTAFlowBuilder.Models;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public interface IFlowRuntimeService
    {
        Task<NextStepResult> ExecuteNextAsync(NextStepContext context);

    }
    public record NextStepContext
    {
        public Guid BusinessId { get; set; }
        public Guid FlowId { get; set; }
        public int Version { get; set; }
        public Guid SourceStepId { get; set; }
        public Guid? TargetStepId { get; set; }
        public short ButtonIndex { get; set; }
        public Guid MessageLogId { get; set; }
        public string ContactPhone { get; set; } = string.Empty;
        public Guid RequestId { get; set; }
        public FlowButtonLink? ClickedButton { get; set; }
        public string? Provider { get; set; }          // "META_CLOUD" | "PINNACLE"
        public string? PhoneNumberId { get; set; }
    }

    public record NextStepResult
    {
        public bool Success { get; set; }
        public string? Error { get; set; }
        public string? RedirectUrl { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\Services_AllFileDump.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\CTAFlowService.cs 
====================================================== 
 
Ôªø// üìÑ File: Features/CTAFlowBuilder/Services/CTAFlowService.cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api.AuthModule.Models;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.MessagesEngine.DTOs;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat.api.Features.Tracking.Models;
using xbytechat.api.Helpers;
using xbytechat.api.WhatsAppSettings.DTOs;
using xbytechat_api.WhatsAppSettings.Services;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public class CTAFlowService : ICTAFlowService
    {
        private readonly AppDbContext _context;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;

        public CTAFlowService(AppDbContext context, IMessageEngineService messageEngineService,
            IWhatsAppTemplateFetcherService templateFetcherService
            )
        {
            _context = context;
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
        }

        public async Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy)
        {
            var flow = new CTAFlowConfig
            {
                Id = Guid.NewGuid(),
                FlowName = dto.FlowName,
                BusinessId = businessId,
                CreatedAt = DateTime.UtcNow,
                CreatedBy = createdBy,
                IsPublished = dto.IsPublished
            };

            foreach (var stepDto in dto.Steps)
            {
                var step = new CTAFlowStep
                {
                    Id = Guid.NewGuid(),
                    CTAFlowConfigId = flow.Id,
                    TriggerButtonText = stepDto.TriggerButtonText,
                    TriggerButtonType = stepDto.TriggerButtonType,
                    TemplateToSend = stepDto.TemplateToSend,
                    StepOrder = stepDto.StepOrder,
                    ButtonLinks = stepDto.ButtonLinks?.Select(link => new FlowButtonLink
                    {
                        ButtonText = link.ButtonText,
                        NextStepId = link.NextStepId
                    }).ToList() ?? new List<FlowButtonLink>()
                };

                flow.Steps.Add(step);
            }

            _context.CTAFlowConfigs.Add(flow);
            await _context.SaveChangesAsync();

            return flow.Id;
        }

        public async Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Include(f => f.Steps.OrderBy(s => s.StepOrder))
                .Where(f => f.BusinessId == businessId && f.IsActive && f.IsPublished)
                .FirstOrDefaultAsync();
        }

        public async Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Include(f => f.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .Where(f => f.BusinessId == businessId && f.IsPublished == false)
                .OrderByDescending(f => f.CreatedAt)
                .FirstOrDefaultAsync();
        }



        public async Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId)
        {
            return await _context.CTAFlowSteps
                .Where(s => s.CTAFlowConfigId == flowId)
                .OrderBy(s => s.StepOrder)
                .ToListAsync();
        }

        public async Task<CTAFlowStep?> MatchStepByButtonAsync(
            Guid businessId,
            string buttonText,
            string buttonType,
            string TemplateName,
            Guid? campaignId = null)
        {
            var normalizedButtonText = buttonText?.Trim().ToLower() ?? "";
            var normalizedButtonType = buttonType?.Trim().ToLower() ?? "";
            var normalizedTemplateName = TemplateName?.Trim().ToLower() ?? "";

            // 1Ô∏è‚É£ Try campaign-specific override
            if (campaignId.HasValue)
            {
                var overrideStep = await _context.CampaignFlowOverrides
                    .Where(o =>
                        o.CampaignId == campaignId &&
                        o.ButtonText.ToLower() == normalizedButtonText &&
                        o.TemplateName.ToLower() == normalizedTemplateName)
                    .FirstOrDefaultAsync();

                if (overrideStep != null)
                {
                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();

                    var matched = await _context.CTAFlowSteps
                        .Include(s => s.Flow)
                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);

                    if (matched != null)
                    {
                        Log.Information("üîÅ Override matched: Template '{Template}' ‚Üí Step '{StepId}'", overrideStep.OverrideNextTemplate, matched.Id);
                        return matched;
                    }

                    Log.Warning("‚ö†Ô∏è Override found for button '{Button}' but no matching step for template '{Template}'", normalizedButtonText, overrideStep.OverrideNextTemplate);
                }

                else
                {
                    Log.Information("üü° No campaign override found for button '{Button}' on template '{Template}'", normalizedButtonText, normalizedTemplateName);
                }
            }

            // 2Ô∏è‚É£ Fallback to standard flow logic
            var fallbackStep = await _context.CTAFlowSteps
                .Include(s => s.Flow)
                .Where(s =>
                    s.Flow.BusinessId == businessId &&
                    s.Flow.IsActive &&
                    s.Flow.IsPublished &&
                    s.TriggerButtonText.ToLower() == normalizedButtonText &&
                    s.TriggerButtonType.ToLower() == normalizedButtonType)
                .FirstOrDefaultAsync();

            if (fallbackStep != null)
            {
                Log.Information("‚úÖ Fallback flow step matched: StepId = {StepId}, Flow = {FlowName}", fallbackStep.Id, fallbackStep.Flow?.FlowName);
            }
            else
            {
                Log.Warning("‚ùå No fallback step matched for button '{ButtonText}' of type '{ButtonType}' in BusinessId: {BusinessId}", normalizedButtonText, normalizedButtonType, businessId);
            }

            return fallbackStep;
        }



        public async Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy)
        {
            try
            {
                // üî• 1. Remove existing published flow for this business
                var existingFlows = await _context.CTAFlowConfigs
                    .Where(f => f.BusinessId == businessId && f.IsPublished)
                    .ToListAsync();

                if (existingFlows.Any())
                {
                    _context.CTAFlowConfigs.RemoveRange(existingFlows);
                }

                // üå± 2. Create new flow config
                var flowConfig = new CTAFlowConfig
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    FlowName = "Published Flow - " + DateTime.UtcNow.ToString("yyyyMMdd-HHmm"),
                    IsPublished = true,
                    IsActive = true,
                    CreatedBy = createdBy,
                    CreatedAt = DateTime.UtcNow,
                    Steps = new List<CTAFlowStep>()
                };

                // üîÅ 3. Convert each step DTO to model
                foreach (var stepDto in steps)
                {
                    var step = new CTAFlowStep
                    {
                        Id = Guid.NewGuid(),
                        CTAFlowConfigId = flowConfig.Id,
                        TriggerButtonText = stepDto.TriggerButtonText,
                        TriggerButtonType = stepDto.TriggerButtonType,
                        TemplateToSend = stepDto.TemplateToSend,
                        StepOrder = stepDto.StepOrder,
                        ButtonLinks = stepDto.ButtonLinks.Select(bl => new FlowButtonLink
                        {
                            Id = Guid.NewGuid(),
                            ButtonText = bl.ButtonText,
                            NextStepId = bl.NextStepId,
                        }).ToList()
                    };

                    flowConfig.Steps.Add(step);
                }

                // üíæ 4. Save to DB
                await _context.CTAFlowConfigs.AddAsync(flowConfig);
                await _context.SaveChangesAsync();

                return ResponseResult.SuccessInfo("‚úÖ Flow published successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Error while publishing CTA flow.");
                return ResponseResult.ErrorInfo("‚ùå Could not publish flow.");
            }
        }

        public async Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy)
        {
            try
            {
                Log.Information("üß† SaveVisualFlow started | FlowName: {FlowName} | BusinessId: {BusinessId}", dto.FlowName, businessId);

                if (dto.Nodes == null || !dto.Nodes.Any())
                {
                    Log.Warning("‚ùå No nodes found in flow. Aborting save.");
                    return ResponseResult.ErrorInfo("‚ùå Cannot save an empty flow. Please add at least one step.");
                }

                // 1) Upsert FlowConfig
                var flow = await _context.CTAFlowConfigs
                    .FirstOrDefaultAsync(f => f.FlowName == dto.FlowName && f.BusinessId == businessId);

                if (flow == null)
                {
                    flow = new CTAFlowConfig
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = businessId,
                        FlowName = dto.FlowName,
                        CreatedBy = createdBy,
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow,
                        IsActive = true,
                        IsPublished = dto.IsPublished
                    };
                    _context.CTAFlowConfigs.Add(flow);
                    Log.Information("‚úÖ New FlowConfig created with ID: {Id}", flow.Id);
                }
                else
                {
                    // wipe old steps+links for a clean replace
                    var oldSteps = await _context.CTAFlowSteps
                        .Where(s => s.CTAFlowConfigId == flow.Id)
                        .Include(s => s.ButtonLinks)
                        .ToListAsync();

                    foreach (var step in oldSteps)
                        _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);

                    _context.CTAFlowSteps.RemoveRange(oldSteps);

                    flow.IsPublished = dto.IsPublished;
                    flow.UpdatedAt = DateTime.UtcNow;
                }

                // 2) Build Steps (map by incoming node.Id string)
                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);

                foreach (var (node, index) in dto.Nodes.Select((n, i) => (n, i)))
                {
                    if (string.IsNullOrWhiteSpace(node.Id))
                        continue;

                    var step = new CTAFlowStep
                    {
                        Id = Guid.NewGuid(),
                        CTAFlowConfigId = flow.Id,
                        StepOrder = index,
                        TemplateToSend = node.TemplateName,
                        TemplateType = node.TemplateType ?? "UNKNOWN",
                        TriggerButtonText = node.TriggerButtonText ?? "",
                        TriggerButtonType = node.TriggerButtonType ?? "cta",
                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,
                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,
                        UseProfileName = node.UseProfileName,
                        ProfileNameSlot = node.ProfileNameSlot ?? 1,
                        ButtonLinks = new List<FlowButtonLink>()
                    };

                    stepMap[node.Id] = step;
                    //if (step.UseProfileName && (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot < 1))
                    //    step.ProfileNameSlot = 1;
                    _context.CTAFlowSteps.Add(step);
                }

                // 3) Build Links PER NODE using buttons order (with Index), not per-edge blindly
                foreach (var node in dto.Nodes)
                {
                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))
                        continue;

                    // outgoing edges from this node
                    var outEdges = dto.Edges?.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList()
                                   ?? new List<FlowEdgeDto>();

                    // dedupe by button text to avoid ambiguous routing
                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

                    // stable ordering: by provided Index (0..N), then by Text
                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())
                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)
                        .ThenBy(b => b.Text ?? string.Empty)
                        .ToList();

                    short nextIdx = 0;

                    foreach (var btn in orderedButtons)
                    {
                        var text = (btn.Text ?? string.Empty).Trim();
                        if (string.IsNullOrEmpty(text))
                            continue;

                        if (!seenTexts.Add(text))
                        {
                            Log.Warning("‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; keeping first, skipping duplicates.", text, node.Id);
                            continue;
                        }

                        // match edge by SourceHandle == button text (how ReactFlow wires handles)
                        var edge = outEdges.FirstOrDefault(e =>
                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));
                        if (edge == null)
                        {
                            // no wire from this button ‚Üí skip link creation but keep button metadata in UI on reload
                            continue;
                        }

                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep))
                            continue;

                        // final index: prefer incoming payload Index; else fallback to a sequential counter
                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;
                        nextIdx = (short)(finalIndex + 1);

                        var link = new FlowButtonLink
                        {
                            Id = Guid.NewGuid(),
                            CTAFlowStepId = fromStep.Id,
                            NextStepId = toStep.Id,
                            ButtonText = text,
                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? "QUICK_REPLY" : btn.Type,
                            ButtonSubType = btn.SubType ?? string.Empty,
                            ButtonValue = btn.Value ?? string.Empty,
                            ButtonIndex = (short)finalIndex // üîë persist the index
                        };

                        _context.FlowButtonLinks.Add(link);
                        fromStep.ButtonLinks.Add(link);

                        // propagate trigger info on the target step for convenience
                        toStep.TriggerButtonText = text;
                        toStep.TriggerButtonType = (btn.Type ?? "QUICK_REPLY").ToLowerInvariant();
                    }
                }

                await _context.SaveChangesAsync();

                Log.Information("‚úÖ Flow '{Flow}' saved | Steps: {StepCount} | Links: {LinkCount}",
                    dto.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));

                return ResponseResult.SuccessInfo("‚úÖ Flow saved successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while saving flow");
                return ResponseResult.ErrorInfo("‚ùå Internal error while saving flow.");
            }
        }

        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId)
        {
            var flow = await _context.CTAFlowConfigs
                .Include(c => c.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .FirstOrDefaultAsync(c => c.Id == flowId && c.IsActive);

            if (flow == null) return null;

            var businessId = flow.BusinessId;

            // ‚úÖ Pre-fetch templates from Meta
            var templateMap = new Dictionary<string, TemplateMetadataDto>();

            foreach (var step in flow.Steps)
            {
                if (!string.IsNullOrWhiteSpace(step.TemplateToSend) && !templateMap.ContainsKey(step.TemplateToSend))
                {
                    try
                    {
                        var template = await _templateFetcherService.GetTemplateByNameAsync(
                            businessId,
                            step.TemplateToSend,
                            includeButtons: true
                        );

                        if (template != null)
                            templateMap[step.TemplateToSend] = template;
                    }
                    catch (Exception ex)
                    {
                        Log.Warning(ex, "‚ö†Ô∏è Failed to fetch template from Meta for {Template}", step.TemplateToSend);
                    }
                }
            }

            // ‚úÖ Map into ReactFlow-compatible structure
            var nodes = flow.Steps.Select(step =>
            {
                var template = templateMap.GetValueOrDefault(step.TemplateToSend);

                return new FlowNodeDto
                {
                    Id = step.Id.ToString(),
                    TemplateName = step.TemplateToSend,
                    MessageBody = template?.Body ?? "Message body preview...",
                    TriggerButtonText = step.TriggerButtonText,
                    TriggerButtonType = step.TriggerButtonType,
                    PositionX = step.PositionX ?? 100,
                    PositionY = step.PositionY ?? 100,

                    // ‚úÖ NEW: Include conditional logic
                    RequiredTag = step.RequiredTag,
                    RequiredSource = step.RequiredSource,

                    //Buttons = step.ButtonLinks.Select(link => new LinkButtonDto
                    //{
                    //    Text = link.ButtonText,
                    //    TargetNodeId = link.NextStepId.ToString()
                    //}).ToList()

                    UseProfileName = step.UseProfileName,
                    ProfileNameSlot = step.ProfileNameSlot,

                    Buttons = step.ButtonLinks.Select(link => new LinkButtonDto
                    {
                        Text = link.ButtonText,
                        Type = link.ButtonType,
                        SubType = link.ButtonSubType,
                        Value = link.ButtonValue,
                        TargetNodeId = link.NextStepId?.ToString()
                    }).ToList()

                             .Concat((template?.ButtonParams ?? new List<ButtonMetadataDto>())
                                 .Where(btn => !step.ButtonLinks.Any(bl => bl.ButtonText == btn.Text))
                                 .Select(btn => new LinkButtonDto
                                 {
                                     Text = btn.Text,
                                     TargetNodeId = null
                                 })).ToList()
                };

            }).ToList();

            return new SaveVisualFlowDto
            {
                FlowName = flow.FlowName,
                IsPublished = flow.IsPublished,
                Nodes = nodes,
                Edges = flow.Steps
                        .SelectMany(step =>
                            step.ButtonLinks.Select(link => new FlowEdgeDto
                            {
                                FromNodeId = step.Id.ToString(),
                                ToNodeId = link.NextStepId.ToString(),
                                SourceHandle = link.ButtonText // ‚úÖ important
                            })
                        ).ToList()

            };
        }


        public async Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId)
        {
            var flow = await _context.CTAFlowConfigs
                .Where(f => f.Id == id && f.BusinessId == businessId)
                .FirstOrDefaultAsync();

            if (flow == null)
                return ResponseResult.ErrorInfo("‚ùå Flow not found or does not belong to you.");

            _context.CTAFlowConfigs.Remove(flow);
            await _context.SaveChangesAsync();

            return ResponseResult.SuccessInfo("‚úÖ Flow deleted successfully.");
        }
        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Where(f => f.BusinessId == businessId && f.IsPublished)
                .OrderByDescending(f => f.CreatedAt)
                .Select(f => new VisualFlowSummaryDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    IsPublished = f.IsPublished,
                    CreatedAt = f.CreatedAt
                })
                .ToListAsync();
        }

        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)
                .OrderByDescending(f => f.CreatedAt)
                .Select(f => new VisualFlowSummaryDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    CreatedAt = f.CreatedAt,
                    IsPublished = f.IsPublished
                })
                .ToListAsync();
        }

        public async Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber)
        {
            // Log.Information("üöÄ Executing follow-up for BusinessId: {BusinessId}, CurrentStepId: {StepId}", businessId);
            if (currentStep == null)
            {
                Log.Warning("‚ö†Ô∏è Cannot execute follow-up. Current step is null.");
                return ResponseResult.ErrorInfo("Current step not found.");
            }

            // üß† Step: Look through all button links for a valid NextStepId
            var nextLink = currentStep.ButtonLinks.FirstOrDefault(link => link.NextStepId != null);

            if (nextLink == null)
            {
                Log.Information("‚ÑπÔ∏è No NextStepId defined in any ButtonLinks for StepId: {StepId}", currentStep.Id);
                return ResponseResult.SuccessInfo("No follow-up step to execute.");
            }

            // üîç Fetch the next step using new logic (via CTAFlowConfig + Steps)
            // 1Ô∏è‚É£ Try to resolve with smart condition check
            var followUpStep = await GetChainedStepAsync(businessId, nextLink.NextStepId, null, null);

            if (followUpStep == null)
            {
                Log.Warning("‚ùå Follow-up step skipped due to condition mismatch ‚Üí StepId: {StepId}", nextLink.NextStepId);

                // 2Ô∏è‚É£ Optional fallback: Try same flow ‚Üí Any step without conditions
                var flow = await _context.CTAFlowConfigs
                    .Include(f => f.Steps)
                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.IsPublished);

                followUpStep = flow?.Steps
                    .Where(s => string.IsNullOrEmpty(s.RequiredTag) && string.IsNullOrEmpty(s.RequiredSource))
                    .OrderBy(s => s.StepOrder)
                    .FirstOrDefault();

                if (followUpStep != null)
                {
                    Log.Information("üîÅ Fallback step selected ‚Üí StepId: {StepId}, Template: {Template}",
                        followUpStep.Id, followUpStep.TemplateToSend);
                }
                else
                {
                    Log.Warning("üö´ No suitable fallback found in flow. Skipping follow-up.");
                    return ResponseResult.SuccessInfo("No matching follow-up step based on user context.");
                }
            }


            // üì® Send the follow-up message using the TemplateToSend field
            try
            {
                var template = followUpStep.TemplateToSend;

                Log.Information("üì§ Sending follow-up message ‚Üí Template: {Template}, To: {Recipient}", template, recipientNumber);

                // üß™ Replace this with actual message engine call
                var sendDto = new SimpleTemplateMessageDto
                {
                    RecipientNumber = recipientNumber,
                    TemplateName = template,
                    TemplateParameters = new List<string>() // Add dynamic params later if needed
                };

                var sendResult = await _messageEngineService
     .SendTemplateMessageSimpleAsync(businessId, sendDto);

                if (!sendResult.Success)
                {
                    Log.Warning("‚ùå Follow-up message send failed ‚Üí {Template}", template);
                    return ResponseResult.ErrorInfo("Follow-up send failed.", sendResult.ErrorMessage);
                }


                return ResponseResult.SuccessInfo($"Follow-up message sent using template: {template}", null, sendResult.RawResponse);

            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Error sending follow-up message for StepId: {StepId}", followUpStep.Id);
                return ResponseResult.ErrorInfo("Failed to send follow-up.");
            }
        }
        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)
        {
            return GetChainedStepAsync(businessId, nextStepId, null, null); // Forward to full logic
        }

        // ‚úÖ Extended logic with condition check (Tag + Source)
        public async Task<CTAFlowStep?> GetChainedStepAsync(
            Guid businessId,
            Guid? nextStepId,
            TrackingLog? trackingLog = null,
            Contact? contact = null)
        {
            if (nextStepId == null)
            {
                Log.Information("‚ÑπÔ∏è No NextStepId provided ‚Äî skipping follow-up.");
                return null;
            }

            try
            {
                var flow = await _context.CTAFlowConfigs
                    .Include(f => f.Steps)
                    .FirstOrDefaultAsync(f =>
                        f.BusinessId == businessId &&
                        f.Steps.Any(s => s.Id == nextStepId));

                if (flow == null)
                {
                    Log.Warning("‚ö†Ô∏è No flow found containing NextStepId: {NextStepId} for business: {BusinessId}", nextStepId, businessId);
                    return null;
                }

                var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);

                if (followUpStep == null)
                {
                    Log.Warning("‚ùå Step matched in flow but not found in step list: {NextStepId}", nextStepId);
                    return null;
                }

                // ‚úÖ Check RequiredTag / Source match
                if (trackingLog != null)
                {
                    var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);

                    if (!isMatch)
                    {
                        Log.Information("üö´ Step {StepId} skipped due to condition mismatch [Tag: {Tag}, Source: {Source}]",
                            followUpStep.Id, followUpStep.RequiredTag, followUpStep.RequiredSource);
                        return null;
                    }
                }

                Log.Information("‚úÖ Follow-up step found and matched ‚Üí StepId: {StepId}, Template: {Template}",
                    followUpStep.Id, followUpStep.TemplateToSend);

                return followUpStep;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while fetching chained step for NextStepId: {NextStepId}", nextStepId);
                throw;
            }
        }

        // ‚úÖ Optional helper for resolving from TrackingLogId
        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(
            Guid businessId,
            Guid? nextStepId,
            Guid? trackingLogId)
        {
            var log = await _context.TrackingLogs
                .Include(l => l.Contact)
                    .ThenInclude(c => c.ContactTags)
                        .ThenInclude(ct => ct.Tag)
                .FirstOrDefaultAsync(l => l.Id == trackingLogId);

            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);
        }
       
        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)
        {
            try
            {
                Log.Information("üö¶ Executing Visual Flow ‚Üí StepId: {StepId} | TrackingLogId: {TrackingLogId}", startStepId, trackingLogId);

                var log = await _context.TrackingLogs
                    .Include(l => l.Contact)
                        .ThenInclude(c => c.ContactTags)
                            .ThenInclude(ct => ct.Tag)
                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);

                if (log == null)
                {
                    Log.Warning("‚ùå TrackingLog not found for ID: {TrackingLogId}", trackingLogId);
                    return ResponseResult.ErrorInfo("Tracking log not found.");
                }

                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);

                if (step == null)
                {
                    Log.Warning("‚ùå No flow step matched or conditions failed ‚Üí StepId: {StepId}", startStepId);
                    return ResponseResult.ErrorInfo("Step conditions not satisfied.");
                }

                ResponseResult sendResult;

                // This switch block remains unchanged
                switch (step.TemplateType?.ToLower())
                {
                    case "image_template":
                        var imageDto = new ImageTemplateMessageDto
                        {
                            BusinessId = businessId,
                            RecipientNumber = log.ContactPhone ?? "",
                            TemplateName = step.TemplateToSend,
                            LanguageCode = "en_US"
                        };
                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);
                        break;

                    case "text_template":
                    default:
                        var textDto = new SimpleTemplateMessageDto
                        {
                            RecipientNumber = log.ContactPhone ?? "",
                            TemplateName = step.TemplateToSend,
                            TemplateParameters = new()
                        };
                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);
                        break;
                }

                // ‚úÖ 2. SAVE the new ID to the log
                var executionLog = new FlowExecutionLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    StepId = step.Id,
                    FlowId = step.CTAFlowConfigId,
                    CampaignSendLogId = campaignSendLogId, // <-- THE NEW VALUE IS SAVED HERE
                    TrackingLogId = trackingLogId,
                    ContactPhone = log.ContactPhone,
                    TriggeredByButton = step.TriggerButtonText,
                    TemplateName = step.TemplateToSend,
                    TemplateType = step.TemplateType,
                    Success = sendResult.Success,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ExecutedAt = DateTime.UtcNow
                };

                _context.FlowExecutionLogs.Add(executionLog);
                await _context.SaveChangesAsync();

                if (sendResult.Success)
                {
                    Log.Information("‚úÖ Flow step executed ‚Üí Template: {Template} sent to {To}", step.TemplateToSend, log.ContactPhone);
                }
                else
                {
                    Log.Warning("‚ùå Failed to send template from flow ‚Üí {Reason}", sendResult.ErrorMessage);
                }

                return ResponseResult.SuccessInfo($"Flow step executed. Sent: {sendResult.Success}", null, sendResult.RawResponse);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception during ExecuteVisualFlowAsync()");
                return ResponseResult.ErrorInfo("Internal error during flow execution.");
            }
        }

        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)
        {
            return await _context.FlowButtonLinks
     .Where(l => l.CTAFlowStepId == sourceStepId
              && l.NextStepId != null
              && l.Step.CTAFlowConfigId == flowId
              && l.ButtonIndex == buttonIndex)
     .SingleOrDefaultAsync();

        }

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\ExtrackAllFiles.bat 
====================================================== 
 
@echo off
REM This script will find all files and output their name and content into one file.
REM The output file will be named [FolderName]_AllFileDump.txt.

REM Get the current folder's name and set it as the output file name with the custom suffix
for %%I in ("%cd%") do set "outputFile=%%~nI_AllFileDump.txt"

REM Clear the output file to start fresh
> "%outputFile%" (echo Folder and File Content Report)
echo. >> "%outputFile%"

REM Loop through all files in the current directory and subdirectories
for /R . %%F in (*.*) do (
    echo ====================================================== >> "%outputFile%"
    echo FILE: %%F >> "%outputFile%"
    echo ====================================================== >> "%outputFile%"
    echo. >> "%outputFile%"
    type "%%F" >> "%outputFile%" 2>nul
    echo. >> "%outputFile%"
    echo. >> "%outputFile%"
)

echo Finished! All content has been extracted to %outputFile% 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\FlowRuntimeService.cs 
====================================================== 
 
Ôªøusing Microsoft.EntityFrameworkCore;
using System.Text.Json;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat_api.WhatsAppSettings.Services; 

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public class FlowRuntimeService : IFlowRuntimeService
    {
        private readonly AppDbContext _dbContext;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;

        
        public FlowRuntimeService(
            AppDbContext dbContext,
            IMessageEngineService messageEngineService,
            IWhatsAppTemplateFetcherService templateFetcherService)
        {
            _dbContext = dbContext;
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
        }

        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult
        //            {
        //                Success = true,
        //                RedirectUrl = context.ClickedButton.ButtonValue
        //            };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);

        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template to pick the correct language and catch 132001 early
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            // log a failed flow execution (no WA call attempted)
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult
        //            {
        //                Success = false,
        //                Error = $"Template '{templateName}' not found or not approved."
        //            };
        //        }

        //        // prefer the template‚Äôs actual language over hard-coding "en_US"
        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // (Optional) build body/button components here if your step needs params.
        //        // Quick-reply buttons require NO components; dynamic URL buttons would.
        //        var components = new List<object>();

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        var sendResult = await _messageEngineService.SendPayloadAsync(context.BusinessId, payload);

        //        // 4) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 5) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId, // correlate to the parent WA msg (if any)
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,

        //            // üî¥ This was missing before ‚Üí caused NOT NULL violation
        //            MessageContent = templateName,

        //            // good hygiene: stamp SentAt on success
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null,
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 6) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId,

        //            // Optional (only if your entity has these columns):
        //            // TemplateName = templateName,
        //            // TemplateType = targetStep.TemplateType,
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}

        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);

        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
        //        }

        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // 3.1) üîé Resolve provider deterministically from settings
        //        //     prefer a provider that already mirrors a Default sender (PhoneNumberId != null)
        //        var settings = await _dbContext.WhatsAppSettings
        //            .AsNoTracking()
        //            .Where(s => s.BusinessId == context.BusinessId && s.IsActive)
        //            .OrderByDescending(s => s.PhoneNumberId != null)
        //            .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)
        //            .ToListAsync();

        //        if (settings.Count == 0)
        //            return new NextStepResult { Success = false, Error = "WhatsApp settings not found for this business." };

        //        if (settings.Count > 1 && settings[0].PhoneNumberId == null)
        //            return new NextStepResult
        //            {
        //                Success = false,
        //                Error = "Multiple WhatsApp providers are active but no Default sender is set. Set a Default number or specify provider for flows."
        //            };

        //        var provider = settings[0].Provider; // must already be UPPERCASE: PINNACLE or META_CLOUD
        //        if (provider != "PINNACLE" && provider != "META_CLOUD")
        //            return new NextStepResult { Success = false, Error = $"Unsupported provider configured: {provider}" };

        //        // (Optional) if you ever want to pin a sender for flows, you can use settings[0].PhoneNumberId.
        //        string? phoneNumberId = null;

        //        // (Optional) build body/button components here if your step needs params.
        //        var components = new List<object>();

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        // 4) Send via explicit provider (deterministic signature)
        //        var sendResult = await _messageEngineService.SendPayloadAsync(
        //            context.BusinessId,
        //            provider,
        //            payload,
        //            phoneNumberId
        //        );

        //        // 5) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId,
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,
        //            MessageContent = templateName,                      // NOT NULL
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 7) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}
        public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        {
            try
            {
                // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
                if (context.ClickedButton != null &&
                    context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
                {
                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = context.BusinessId,
                        FlowId = context.FlowId,
                        StepId = context.SourceStepId,
                        StepName = "URL_REDIRECT",
                        MessageLogId = context.MessageLogId,
                        ButtonIndex = context.ButtonIndex,
                        ContactPhone = context.ContactPhone,
                        Success = true,
                        ExecutedAt = DateTime.UtcNow,
                        RequestId = context.RequestId
                    });
                    await _dbContext.SaveChangesAsync();

                    return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
                }

                // 2) Load next step in the same flow
                var targetStep = await _dbContext.CTAFlowSteps
                    .Include(s => s.ButtonLinks)
                    .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
                                              s.CTAFlowConfigId == context.FlowId);

                if (targetStep == null)
                    return new NextStepResult { Success = false, Error = "Target step not found." };

                if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
                    return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

                var templateName = targetStep.TemplateToSend.Trim();

                // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)
                var meta = await _templateFetcherService.GetTemplateByNameAsync(
                    context.BusinessId, templateName, includeButtons: true);

                if (meta == null)
                {
                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = context.BusinessId,
                        FlowId = context.FlowId,
                        StepId = targetStep.Id,
                        StepName = templateName,
                        MessageLogId = null,
                        ButtonIndex = context.ButtonIndex,
                        ContactPhone = context.ContactPhone,
                        Success = false,
                        ErrorMessage = $"Template '{templateName}' not found for this WABA.",
                        RawResponse = null,
                        ExecutedAt = DateTime.UtcNow,
                        RequestId = context.RequestId
                    });
                    await _dbContext.SaveChangesAsync();

                    return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
                }

                var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

                // 3.1) üß≠ Determine sender (provider + phoneNumberId) from context (source of truth)
                //      Fall back once to default active number for this business+provider if PhoneNumberId is missing.
                var provider = (context.Provider ?? string.Empty).Trim().ToUpperInvariant();
                if (provider != "PINNACLE" && provider != "META_CLOUD")
                    return new NextStepResult { Success = false, Error = "Provider is required for flow sends (PINNACLE or META_CLOUD)." };

                string? phoneNumberId = context.PhoneNumberId;

                if (string.IsNullOrWhiteSpace(phoneNumberId))
                {
                    // Fallback: pick the default/active number for this business + provider
                    phoneNumberId = await _dbContext.WhatsAppPhoneNumbers
                        .AsNoTracking()
                        .Where(n => n.BusinessId == context.BusinessId
                                    && n.IsActive
                                    && n.Provider.ToUpper() == provider)
                        .OrderByDescending(n => n.IsDefault)
                        .ThenBy(n => n.WhatsAppBusinessNumber)
                        .Select(n => n.PhoneNumberId)
                        .FirstOrDefaultAsync();

                    if (string.IsNullOrWhiteSpace(phoneNumberId))
                        return new NextStepResult { Success = false, Error = "Missing PhoneNumberId (no default sender configured for this provider)." };
                }

                // (Optional) build body/button components here if your step needs params.
                var components = new List<object>();

                var payload = new
                {
                    messaging_product = "whatsapp",
                    to = context.ContactPhone,
                    type = "template",
                    template = new
                    {
                        name = templateName,
                        language = new { code = languageCode },
                        components
                    }
                };

                // 4) Send via explicit provider (deterministic signature)
                var sendResult = await _messageEngineService.SendPayloadAsync(
                    context.BusinessId,
                    provider,               // explicit
                    payload,
                    phoneNumberId           // explicit
                );

                // 5) Snapshot buttons for robust click mapping later
                string? buttonBundleJson = null;
                if (targetStep.ButtonLinks?.Count > 0)
                {
                    var bundle = targetStep.ButtonLinks
                        .OrderBy(b => b.ButtonIndex)
                        .Select(b => new
                        {
                            i = b.ButtonIndex,
                            t = b.ButtonText ?? "",
                            ty = b.ButtonType ?? "QUICK_REPLY",
                            v = b.ButtonValue ?? "",
                            ns = b.NextStepId
                        })
                        .ToList();

                    buttonBundleJson = JsonSerializer.Serialize(bundle);
                }

                // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
                var messageLog = new MessageLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = context.BusinessId,
                    RecipientNumber = context.ContactPhone,
                    CTAFlowConfigId = context.FlowId,
                    CTAFlowStepId = targetStep.Id,
                    FlowVersion = context.Version,
                    Source = "flow",
                    RefMessageId = context.MessageLogId,
                    CreatedAt = DateTime.UtcNow,
                    Status = sendResult.Success ? "Sent" : "Failed",
                    MessageId = sendResult.MessageId,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ButtonBundleJson = buttonBundleJson,
                    MessageContent = templateName,                      // NOT NULL
                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
                };

                _dbContext.MessageLogs.Add(messageLog);

                // 7) Flow execution audit row
                _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = context.BusinessId,
                    FlowId = context.FlowId,
                    StepId = targetStep.Id,
                    StepName = templateName,
                    MessageLogId = messageLog.Id,
                    ButtonIndex = context.ButtonIndex,
                    ContactPhone = context.ContactPhone,
                    Success = sendResult.Success,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ExecutedAt = DateTime.UtcNow,
                    RequestId = context.RequestId
                });

                await _dbContext.SaveChangesAsync();

                return new NextStepResult
                {
                    Success = sendResult.Success,
                    Error = sendResult.ErrorMessage,
                    RedirectUrl = null
                };
            }
            catch (Exception ex)
            {
                return new NextStepResult { Success = false, Error = ex.Message };
            }
        }

    }
}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\ICTAFlowService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Helpers;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public interface ICTAFlowService
    {
        // ‚úÖ Used for flow creation and saving
        Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy);
        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);

        // ‚úÖ Load flows
        Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId);
        Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId);
        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);
        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);

        // ‚úÖ Load and manage flow steps
        Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId);

      
        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText,string buttonType,string currentTemplateName,Guid? campaignId = null);


        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);
        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);
        // ‚úÖ Runtime logic
        Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber);

        // ‚úÖ Flow management
        Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy);
        Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId);

        // ‚úÖ Editor loading (visual builder)
        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid id);

      
        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);
        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);

        public interface IFlowRuntimeService
        {
            Task<NextStepResult> ExecuteNextAsync(NextStepContext context);
        }
    }
}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\IFlowRuntimeService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CTAFlowBuilder.Models;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public interface IFlowRuntimeService
    {
        Task<NextStepResult> ExecuteNextAsync(NextStepContext context);

    }
    public record NextStepContext
    {
        public Guid BusinessId { get; set; }
        public Guid FlowId { get; set; }
        public int Version { get; set; }
        public Guid SourceStepId { get; set; }
        public Guid? TargetStepId { get; set; }
        public short ButtonIndex { get; set; }
        public Guid MessageLogId { get; set; }
        public string ContactPhone { get; set; } = string.Empty;
        public Guid RequestId { get; set; }
        public FlowButtonLink? ClickedButton { get; set; }
        public string? Provider { get; set; }          // "META_CLOUD" | "PINNACLE"
        public string? PhoneNumberId { get; set; }
    }

    public record NextStepResult
    {
        public bool Success { get; set; }
        public string? Error { get; set; }
        public string? RedirectUrl { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\Services_AllFileDump.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\CTAFlowService.cs 
======= 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\StepMatchingHelper.cs 
====================================================== 
 
Ôªøusing Serilog;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.Tracking.Models;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public static class StepMatchingHelper
    {
        public static bool IsStepMatched(CTAFlowStep step, TrackingLog log, Contact? contact)
        {
            if (!string.IsNullOrWhiteSpace(step.RequiredSource) &&
                !string.Equals(step.RequiredSource, log.SourceType, StringComparison.OrdinalIgnoreCase))
            {
                Log.Information("üö´ Step [{StepId}] skipped: RequiredSource '{Required}' ‚â† ClickedSource '{Actual}'",
                    step.Id, step.RequiredSource, log.SourceType);
                return false;
            }

            if (!string.IsNullOrWhiteSpace(step.RequiredTag))
            {
                if (contact == null || contact.ContactTags == null || !contact.ContactTags.Any())
                {
                    Log.Information("üö´ Step [{StepId}] skipped: Contact or Tags missing (RequiredTag: {RequiredTag})",
                        step.Id, step.RequiredTag);
                    return false;
                }

                var hasTag = contact.ContactTags.Any(ct =>
                    string.Equals(ct.Tag.Name, step.RequiredTag, StringComparison.OrdinalIgnoreCase));

                if (!hasTag)
                {
                    var contactTags = string.Join(", ", contact.ContactTags.Select(ct => ct.Tag.Name));
                    Log.Information("üö´ Step [{StepId}] skipped: Contact tags [{Tags}] do not include RequiredTag '{Required}'",
                        step.Id, contactTags, step.RequiredTag);
                    return false;
                }
            }

            return true;
        }

    }
}
 
 
