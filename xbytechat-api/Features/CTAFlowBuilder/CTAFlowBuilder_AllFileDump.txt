Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\CTAFlowBuilder_AllFileDump.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\CTAFlowBuilder_AllFileDump.txt 
====================================================== 
 
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\ExtrackAllFiles.bat 
====================================================== 
 
@echo off
REM This script will find all files and output their name and content into one file.
REM The output file will be named [FolderName]_AllFileDump.txt.

REM Get the current folder's name and set it as the output file name with the custom suffix
for %%I in ("%cd%") do set "outputFile=%%~nI_AllFileDump.txt"

REM Clear the output file to start fresh
> "%outputFile%" (echo Folder and File Content Report)
echo. >> "%outputFile%"

REM Loop through all files in the current directory and subdirectories
for /R . %%F in (*.*) do (
    echo ====================================================== >> "%outputFile%"
    echo FILE: %%F >> "%outputFile%"
    echo ====================================================== >> "%outputFile%"
    echo. >> "%outputFile%"
    type "%%F" >> "%outputFile%" 2>nul
    echo. >> "%outputFile%"
    echo. >> "%outputFile%"
)

echo Finished! All content has been extracted to %outputFile% 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Controllers\CTAFlowController.cs 
====================================================== 
 
Ôªøusing Microsoft.AspNetCore.Mvc;
using Serilog;
using xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Services;

namespace xbytechat.api.Features.CTAFlowBuilder.Controllers
{
    [ApiController]
    [Route("api/cta-flow")]
    public class CTAFlowController : ControllerBase
    {
        private readonly ICTAFlowService _flowService;

        public CTAFlowController(ICTAFlowService flowService)
        {
            _flowService = flowService;
        }

        // CREATE (draft-only)
        [HttpPost("save-visual")]
        public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)
        {
            var businessIdClaim = User.FindFirst("businessId")?.Value;
            var createdBy = User.FindFirst("name")?.Value ?? "system";
            if (!Guid.TryParse(businessIdClaim, out var businessId))
                return BadRequest(new { message = "‚ùå Invalid business ID" });

            Log.Information("üì¶ Saving CTA Flow: {FlowName} by {User}", dto.FlowName, createdBy);

            var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);
            if (!result.Success)
            {
                var m = (result.ErrorMessage ?? "").Trim();

                // map common validation/conflict by message text (no result.Code available)
                if (m.Contains("already exists", StringComparison.OrdinalIgnoreCase))
                    return Conflict(new { message = "‚ùå Duplicate flow name", error = m });

                if (m.Contains("required", StringComparison.OrdinalIgnoreCase) ||
                    m.Contains("empty flow", StringComparison.OrdinalIgnoreCase) ||
                    m.Contains("invalid", StringComparison.OrdinalIgnoreCase))
                    return BadRequest(new { message = "‚ùå Failed to save flow", error = m });

                return StatusCode(StatusCodes.Status500InternalServerError,
                    new { message = "‚ùå Failed to save flow", error = string.IsNullOrWhiteSpace(m) ? "Unknown error" : m });
            }

            Guid? flowId = null;
            if (result.Data is not null)
            {
                try { dynamic d = result.Data; flowId = (Guid?)d.flowId; } catch { }
            }

            return Ok(new { message = "‚úÖ Flow saved successfully", flowId });
        }

        // PUBLISH (by id)
        [HttpPost("{id:guid}/publish")]
        public async Task<IActionResult> Publish(Guid id)
        {
            var biz = User.FindFirst("businessId")?.Value;
            var user = User.FindFirst("name")?.Value ?? "system";
            if (!Guid.TryParse(biz, out var businessId))
                return BadRequest(new { message = "‚ùå Invalid business." });

            var ok = await _flowService.PublishFlowAsync(id, businessId, user);
            return ok ? Ok(new { message = "‚úÖ Flow published." }) : NotFound(new { message = "‚ùå Flow not found." });
        }

        // DELETE (only if not attached)
        [HttpDelete("{id:guid}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            var biz = User.FindFirst("businessId")?.Value;
            if (!Guid.TryParse(biz, out var businessId))
                return BadRequest(new { message = "‚ùå Invalid business." });

            var deletedBy = User.FindFirst("name")?.Value
                          ?? User.FindFirst("email")?.Value
                          ?? User.FindFirst("sub")?.Value
                          ?? "system";

            var result = await _flowService.DeleteFlowAsync(id, businessId, deletedBy);

            if (!result.Success)
            {
                var msg = (result.ErrorMessage ?? result.Message ?? string.Empty).Trim();

                // If message says it's attached, return 409 and include campaigns for the modal
                if (msg.Contains("attached", StringComparison.OrdinalIgnoreCase) ||
                    msg.Contains("Cannot delete", StringComparison.OrdinalIgnoreCase))
                {
                    var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);
                    return Conflict(new { message = msg, campaigns });
                }

                if (msg.Contains("not found", StringComparison.OrdinalIgnoreCase))
                    return NotFound(new { message = msg });

                return BadRequest(new { message = string.IsNullOrWhiteSpace(msg) ? "Delete failed." : msg });
            }

            return Ok(new { message = result.Message ?? "‚úÖ Flow deleted." });
        }

        // LISTS
        [HttpGet("all-published")]
        public async Task<IActionResult> GetPublishedFlows()
        {
            var businessIdClaim = User.FindFirst("businessId")?.Value;
            if (!Guid.TryParse(businessIdClaim, out var businessId))
                return BadRequest(new { message = "‚ùå Invalid business ID" });

            var flows = await _flowService.GetAllPublishedFlowsAsync(businessId);
            return Ok(flows);
        }

        [HttpGet("all-draft")]
        public async Task<IActionResult> GetAllDraftFlows()
        {
            var businessIdClaim = User.FindFirst("businessId")?.Value;
            if (!Guid.TryParse(businessIdClaim, out var businessId))
                return BadRequest(new { message = "‚ùå Invalid business ID" });

            var flows = await _flowService.GetAllDraftFlowsAsync(businessId);
            return Ok(flows);
        }

        // DETAIL
        [HttpGet("by-id/{id:guid}")]
        public async Task<IActionResult> GetById(Guid id)
        {
            var businessIdClaim = User.FindFirst("businessId")?.Value;
            if (!Guid.TryParse(businessIdClaim, out var businessId))
                return BadRequest(new { message = "‚ùå Invalid business ID" });

            var dto = await _flowService.GetVisualFlowByIdAsync(id, businessId);
            if (dto is null) return NotFound(new { message = "‚ùå Flow not found." });

            return Ok(dto);
        }

        [HttpGet("visual/{id:guid}")]
        public async Task<IActionResult> GetVisualFlow(Guid id)
        {
            var businessIdClaim = User.FindFirst("businessId")?.Value;
            if (!Guid.TryParse(businessIdClaim, out var businessId))
                return BadRequest(new { message = "‚ùå Invalid business ID" });

            var result = await _flowService.GetVisualFlowAsync(id, businessId);
            if (!result.Success)
            {
                var m = (result.ErrorMessage ?? string.Empty).Trim();
                if (m.Contains("not found", StringComparison.OrdinalIgnoreCase))
                    return NotFound(new { message = "‚ùå Failed to load flow", error = m });

                return StatusCode(StatusCodes.Status500InternalServerError,
                    new { message = "‚ùå Failed to load flow", error = string.IsNullOrWhiteSpace(m) ? "Unknown error" : m });
            }

            return Ok(result.Data);
        }

        // USAGE (for delete guard)
        [HttpGet("{id:guid}/usage")]
        public async Task<IActionResult> GetUsage(Guid id)
        {
            var biz = User.FindFirst("businessId")?.Value;
            if (!Guid.TryParse(biz, out var businessId))
                return BadRequest(new { message = "Invalid business." });

            var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);
            return Ok(new
            {
                canDelete = campaigns.Count == 0,
                count = campaigns.Count,
                campaigns
            });
        }
    }
}


//// üìÑ File: Features/CTAFlowBuilder/Controllers/CTAFlowController.cs
//using Microsoft.AspNetCore.Authorization;
//using Microsoft.AspNetCore.Mvc;
//using Microsoft.EntityFrameworkCore;
//using Serilog;
//using xbytechat.api.Features.CTAFlowBuilder.DTOs;
//using xbytechat.api.Features.CTAFlowBuilder.Models;
//using xbytechat.api.Features.CTAFlowBuilder.Services;
//using xbytechat.api.Features.MessagesEngine.DTOs;
//using xbytechat.api.Features.MessagesEngine.Services;
//using xbytechat.api.Features.Tracking.Models;
//using xbytechat.api.Features.Tracking.Services;
//using xbytechat.api.Helpers;
//using xbytechat.api.Shared;


//namespace xbytechat.api.Features.CTAFlowBuilder.Controllers
//{
//    [ApiController]
//    [Route("api/cta-flow")]
//    public class CTAFlowController : ControllerBase
//    {
//        private readonly ICTAFlowService _flowService;
//        private readonly IMessageEngineService _messageEngineService;
//        private readonly ITrackingService _trackingService;
//        public CTAFlowController(ICTAFlowService flowService, IMessageEngineService messageEngineService, ITrackingService trackingService)
//        {
//            _flowService = flowService;
//            _messageEngineService = messageEngineService;
//            _trackingService = trackingService;
//        }

//        [HttpPost("create")]
//        public async Task<IActionResult> CreateFlow([FromBody] CreateFlowDto dto)
//        {
//            var businessIdClaim = User.FindFirst("businessId")?.Value;
//            var createdBy = User.FindFirst("name")?.Value ?? "system";

//            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))
//                return BadRequest("‚ùå Invalid or missing businessId claim.");

//            var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);
//            return Ok(new { flowId = id });
//        }

//        //[HttpPost("publish")]
//        //public async Task<IActionResult> PublishFlow([FromBody] List<FlowStepDto> steps)
//        //{
//        //    var businessIdClaim = User.FindFirst("businessId")?.Value;
//        //    var createdBy = User.FindFirst("name")?.Value ?? "system";

//        //    if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))
//        //        return BadRequest("‚ùå Invalid or missing businessId claim.");

//        //    var result = await _flowService.PublishFlowAsync(businessId, steps, createdBy);
//        //    if (!result.Success)
//        //        return BadRequest(result.Message);

//        //    return Ok("‚úÖ Flow published successfully.");
//        //}

//        [HttpGet("current")]
//        public async Task<IActionResult> GetFlow()
//        {
//            var businessIdHeader = User.FindFirst("businessId")?.Value;
//            if (!Guid.TryParse(businessIdHeader, out var businessId))
//                return BadRequest("‚ùå Invalid or missing BusinessId header.");

//            var flow = await _flowService.GetFlowByBusinessAsync(businessId);

//            // ‚úÖ Always return 200 even if flow is null
//            return Ok(flow);
//        }

//        [HttpGet("draft")]
//        public async Task<IActionResult> GetDraftFlow()
//        {
//            var businessIdHeader = User.FindFirst("businessId")?.Value;
//            if (!Guid.TryParse(businessIdHeader, out var businessId))
//                return BadRequest("‚ùå Invalid or missing BusinessId header.");

//            var draft = await _flowService.GetDraftFlowByBusinessAsync(businessId);
//            if (draft == null)
//                return NotFound("‚ùå No draft flow found.");

//            return Ok(draft);
//        }

//        [HttpGet("match")]
//        public async Task<IActionResult> MatchButton(
//            [FromQuery] string text,
//            [FromQuery] string type,
//            [FromQuery] string currentTemplateName,
//            [FromQuery] Guid? campaignId) // Optional
//        {
//            var businessId = Guid.Parse(User.FindFirst("businessId")?.Value!);

//            var step = await _flowService.MatchStepByButtonAsync(
//                businessId,
//                text,
//                type,
//                currentTemplateName,
//                campaignId
//            );

//            if (step == null)
//                return NotFound("‚ùå No matching step found.");

//            return Ok(new
//            {
//                step.TemplateToSend,
//                step.TriggerButtonText,
//                step.TriggerButtonType
//            });
//        }

//        //[HttpPost("save-visual")]
//        //public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)
//        //{
//        //    var businessIdClaim = User.FindFirst("businessId")?.Value;
//        //    var createdBy = User.FindFirst("name")?.Value ?? "system";

//        //    if (!Guid.TryParse(businessIdClaim, out var businessId))
//        //        return BadRequest("‚ùå Invalid business ID");

//        //    Log.Information("üì¶ Saving CTA Flow: {FlowName} by {User}", dto.FlowName, createdBy);

//        //    var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);
//        //    if (!result.Success)
//        //    {
//        //        Log.Error("‚ùå Failed to save flow. Error: {Error}. DTO: {@Dto}", result.ErrorMessage, dto);
//        //        return StatusCode(500, new
//        //        {
//        //            message = "‚ùå Failed to save flow",
//        //            error = result.ErrorMessage,
//        //            // skipped = result.SkippedNodes ?? 0
//        //        });
//        //    }

//        //    return Ok(new
//        //    {
//        //        message = "‚úÖ Flow saved successfully"
//        //    });
//        //}

//        //[HttpPost("save-visual")]
//        //public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)
//        //{
//        //    var businessIdClaim = User.FindFirst("businessId")?.Value;
//        //    var createdBy = User.FindFirst("name")?.Value ?? "system";

//        //    if (!Guid.TryParse(businessIdClaim, out var businessId))
//        //        return BadRequest("‚ùå Invalid business ID");

//        //    Log.Information("üì¶ Saving CTA Flow: {FlowName} by {User}", dto.FlowName, createdBy);

//        //    var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);
//        //    if (!result.Success)
//        //    {
//        //        Log.Error("‚ùå Failed to save flow. Error: {Error}. DTO: {@Dto}", result.ErrorMessage, dto);
//        //        return StatusCode(500, new
//        //        {
//        //            message = "‚ùå Failed to save flow",
//        //            error = result.ErrorMessage
//        //        });
//        //    }

//        //    // Try to extract flowId from the service result (supports several shapes).
//        //    Guid? flowId = null;
//        //    try
//        //    {
//        //        switch (result.Data)
//        //        {
//        //            case Guid g:
//        //                flowId = g;
//        //                break;

//        //            case string s when Guid.TryParse(s, out var gs):
//        //                flowId = gs;
//        //                break;

//        //            case { } obj:
//        //                // look for a property literally named "flowId"
//        //                var prop = obj.GetType().GetProperty("flowId")
//        //                           ?? obj.GetType().GetProperty("FlowId");
//        //                if (prop?.GetValue(obj) is Guid pg)
//        //                    flowId = pg;
//        //                else if (prop?.GetValue(obj) is string ps && Guid.TryParse(ps, out var pgs))
//        //                    flowId = pgs;
//        //                break;
//        //        }
//        //    }
//        //    catch
//        //    {
//        //        // non-fatal: just return without flowId if reflection fails
//        //    }

//        //    return Ok(new
//        //    {
//        //        message = "‚úÖ Flow saved successfully",
//        //        flowId
//        //    });
//        //}
//        // POST /api/cta-flow/save-visual
//        // xbytechat.api/Features/CTAFlowBuilder/Controllers/CTAFlowController.cs
//        [HttpPost("save-visual")]
//        public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)
//        {
//            var businessIdClaim = User.FindFirst("businessId")?.Value;
//            var createdBy = User.FindFirst("name")?.Value ?? "system";

//            if (!Guid.TryParse(businessIdClaim, out var businessId))
//                return BadRequest("‚ùå Invalid business ID");

//            Log.Information("üì¶ Saving CTA Flow: {FlowName} by {User}", dto.FlowName, createdBy);

//            var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);

//            // Helper: classify error message to proper HTTP status
//            IActionResult ErrorToHttp(string? msg)
//            {
//                var m = (msg ?? "").Trim();

//                // Validation problems ‚Üí 400
//                if (m.Contains("Flow name is required", StringComparison.OrdinalIgnoreCase) ||
//                    m.Contains("Cannot save an empty flow", StringComparison.OrdinalIgnoreCase) ||
//                    m.Contains("invalid", StringComparison.OrdinalIgnoreCase))
//                {
//                    Log.Warning("‚ö†Ô∏è Validation error while saving flow: {Error}", m);
//                    return BadRequest(new { message = "‚ùå Failed to save flow", error = m });
//                }

//                // Duplicate name on create ‚Üí 409 (frontend will open rename modal)
//                if (m.Contains("already exists", StringComparison.OrdinalIgnoreCase))
//                {
//                    Log.Warning("‚ö†Ô∏è Duplicate flow name when creating: {Error}", m);
//                    return StatusCode(StatusCodes.Status409Conflict, new
//                    {
//                        message = "‚ùå Duplicate flow name",
//                        error = m
//                        // intentionally no 'campaigns' array here (FE uses presence of it to show fork modal)
//                    });
//                }

//                // Unknown ‚Üí 500
//                Log.Error("‚ùå Failed to save flow. Error: {Error}. DTO: {@Dto}", m, dto);
//                return StatusCode(StatusCodes.Status500InternalServerError, new
//                {
//                    message = "‚ùå Failed to save flow",
//                    error = string.IsNullOrWhiteSpace(m) ? "Unknown error" : m
//                });
//            }

//            if (!result.Success)
//                return ErrorToHttp(result.ErrorMessage);

//            // Expect service to put { flowId = <Guid> } into result.Data
//            Guid? flowId = null;
//            if (result.Data is not null)
//            {
//                try
//                {
//                    if (result.Data is IDictionary<string, object> dict
//                        && dict.TryGetValue("flowId", out var obj) && obj is Guid g1)
//                    {
//                        flowId = g1;
//                    }
//                    else
//                    {
//                        // dynamic fallback
//                        dynamic d = result.Data;
//                        flowId = (Guid?)d.flowId;
//                    }
//                }
//                catch
//                {
//                    // ignore shape issues; flowId stays null
//                }
//            }

//            return Ok(new
//            {
//                message = "‚úÖ Flow saved successfully",
//                flowId
//            });
//        }


//        //[HttpPost("save-visual")]
//        //public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)
//        //{
//        //    var businessIdClaim = User.FindFirst("businessId")?.Value;
//        //    var createdBy = User.FindFirst("name")?.Value ?? "system";

//        //    if (!Guid.TryParse(businessIdClaim, out var businessId))
//        //        return BadRequest("‚ùå Invalid business ID");

//        //    Log.Information("üì¶ Saving CTA Flow: {FlowName} by {User}", dto.FlowName, createdBy);

//        //    var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);
//        //    if (!result.Success)
//        //    {
//        //        Log.Error("‚ùå Failed to save flow. Error: {Error}. DTO: {@Dto}", result.ErrorMessage, dto);
//        //        return StatusCode(500, new
//        //        {
//        //            message = "‚ùå Failed to save flow",
//        //            error = result.ErrorMessage
//        //        });
//        //    }

//        //    // Expect service to put { flowId = <Guid> } into result.Data
//        //    Guid? flowId = null;
//        //    if (result.Data is not null)
//        //    {
//        //        try
//        //        {
//        //            // Support anonymous object or dictionary
//        //            var dict = result.Data as IDictionary<string, object>;
//        //            if (dict != null && dict.TryGetValue("flowId", out var obj) && obj is Guid g1)
//        //                flowId = g1;
//        //            else
//        //            {
//        //                // dynamic fallback
//        //                dynamic d = result.Data;
//        //                flowId = (Guid?)d.flowId;
//        //            }
//        //        }
//        //        catch { /* ignore shape issues; flowId stays null */ }
//        //    }

//        //    return Ok(new
//        //    {
//        //        message = "‚úÖ Flow saved successfully",
//        //        flowId
//        //    });
//        //}

//        [HttpGet("{id:guid}/usage")]
//        public async Task<IActionResult> GetUsage(Guid id)
//        {
//            var biz = User.FindFirst("businessId")?.Value;
//            if (!Guid.TryParse(biz, out var businessId)) return BadRequest(new { message = "Invalid business." });

//            var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);
//            return Ok(new
//            {
//                canDelete = campaigns.Count == 0,
//                count = campaigns.Count,
//                campaigns
//            });
//        }

//        //[HttpDelete("{id:guid}")]
//        //public async Task<IActionResult> Delete(Guid id)
//        //{
//        //    var biz = User.FindFirst("businessId")?.Value;
//        //    if (!Guid.TryParse(biz, out var businessId)) return BadRequest(new { message = "Invalid business." });

//        //    // Try hard delete
//        //    var deleted = await _flowService.HardDeleteFlowIfUnusedAsync(id, businessId);
//        //    if (deleted) return NoContent();

//        //    // If not deleted, return 409 with who‚Äôs attached
//        //    var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);
//        //    if (campaigns.Count > 0)
//        //    {
//        //        return Conflict(new
//        //        {
//        //            message = "Flow is attached to the following campaign(s). Delete them first, then delete the flow.",
//        //            campaigns
//        //        });
//        //    }

//        //    // Not found (wrong tenant or already deleted)
//        //    return NotFound(new { message = "Flow not found." });
//        //}
//        // KEEP ONLY THIS ONE DELETE ENDPOINT

//        [HttpDelete("{id:guid}")]
//        public async Task<IActionResult> Delete(Guid id)
//        {
//            var biz = User.FindFirst("businessId")?.Value;
//            if (!Guid.TryParse(biz, out var businessId))
//                return BadRequest(new { message = "‚ùå Invalid business." });

//            // who is deleting (audit)
//            var deletedBy = User.FindFirst("name")?.Value
//                          ?? User.FindFirst("email")?.Value
//                          ?? User.FindFirst("sub")?.Value
//                          ?? "system";

//            // Use your service that understands attachment rules and returns codes
//            var result = await _flowService.DeleteFlowAsync(id, businessId, deletedBy);

//            // Frontend expects 409 to show the modal with attached campaigns
//            if (!result.Success && result.Code == 409)
//                return Conflict(new { message = result.Message, campaigns = result.Payload });

//            if (!result.Success && result.Code == 404)
//                return NotFound(new { message = result.Message });

//            if (!result.Success)
//                return BadRequest(new { message = result.Message });

//            // FE treats 200 or 204 as success ‚Äî return 200 with a message
//            return Ok(new { message = result.Message });
//        }



//        [HttpGet("all-published")]
//        public async Task<IActionResult> GetPublishedFlows()
//        {
//            var businessIdClaim = User.FindFirst("businessId")?.Value;
//            if (!Guid.TryParse(businessIdClaim, out var businessId))
//                return BadRequest("‚ùå Invalid business ID");

//            var flows = await _flowService.GetAllPublishedFlowsAsync(businessId);
//            return Ok(flows);
//        }
//        [HttpGet("all-draft")]
//        public async Task<IActionResult> GetAllDraftFlows()
//        {
//            var businessIdClaim = User.FindFirst("businessId")?.Value;
//            if (!Guid.TryParse(businessIdClaim, out var businessId))
//                return BadRequest("‚ùå Invalid business ID");

//            var flows = await _flowService.GetAllDraftFlowsAsync(businessId);
//            return Ok(flows);
//        }


//        [HttpPost("execute-visual")]
//        public async Task<IActionResult> ExecuteVisualFlowAsync(
//            [FromQuery] Guid nextStepId,
//            [FromQuery] Guid trackingLogId,
//            // ‚úÖ 1. ADD the new optional parameter to the endpoint
//            [FromQuery] Guid? campaignSendLogId = null)
//        {
//            var businessIdClaim = User.FindFirst("businessId")?.Value;
//            if (!Guid.TryParse(businessIdClaim, out var businessId))
//                return BadRequest("‚ùå Invalid business ID");

//            // ‚úÖ 2. PASS the new parameter to the service call
//            var result = await _flowService.ExecuteVisualFlowAsync(businessId, nextStepId, trackingLogId, campaignSendLogId);

//            if (result.Success)
//                return Ok(result);
//            else
//                return BadRequest(result);
//        }

//        [HttpPost("create-config")]
//        public async Task<IActionResult> CreateConfigFlow([FromBody] CreateFlowDto dto)
//        {
//            var businessIdClaim = User.FindFirst("businessId")?.Value;
//            var createdBy = User.FindFirst("name")?.Value ?? "system";

//            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))
//                return BadRequest("‚ùå Invalid or missing businessId claim.");

//            try
//            {
//                var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);

//                return Ok(new
//                {
//                    flowId = id,
//                    message = "‚úÖ Flow config created successfully."
//                });
//            }
//            catch (Exception ex)
//            {
//                return StatusCode(500, new
//                {
//                    error = "‚ùå Failed to create flow config.",
//                    details = ex.Message
//                });
//            }
//        }

//        [HttpGet("by-id/{id:guid}")]
//        public async Task<IActionResult> GetById(Guid id)
//        {
//            var businessIdClaim = User.FindFirst("businessId")?.Value;
//            if (!Guid.TryParse(businessIdClaim, out var businessId))
//                return BadRequest("‚ùå Invalid business ID");

//            // Prefer a tenant-aware service method
//            var dto = await _flowService.GetVisualFlowByIdAsync(id, businessId);
//            if (dto is null) return NotFound("‚ùå Flow not found.");

//            return Ok(dto); // { flowName, isPublished, nodes, edges } (camelCase via default JSON options)
//        }

//        // üìç Add this to your CTAFlowController
//        // CTAFlowController.cs  ‚Äî drop-in replacement for "get visual flow" endpoint
//        [HttpGet("visual/{id:guid}")]
//        public async Task<IActionResult> GetVisualFlow(Guid id)
//        {
//            // business guard
//            var businessIdClaim = User.FindFirst("businessId")?.Value;
//            if (!Guid.TryParse(businessIdClaim, out var businessId))
//                return BadRequest(new { message = "‚ùå Failed to load flow", error = "Invalid business ID" });

//            // ask the service ‚Äî this RETURNS YOUR ResponseResult, not a DTO
//            var result = await _flowService.GetVisualFlowAsync(id, businessId);

//            // Uniform error mapping (same style you use in SaveVisualFlow)
//            if (!result.Success)
//            {
//                var m = (result.ErrorMessage ?? string.Empty).Trim();

//                if (m.Contains("not found", StringComparison.OrdinalIgnoreCase))
//                {
//                    // 404 when flow id doesn‚Äôt exist / not visible for biz
//                    return NotFound(new { message = "‚ùå Failed to load flow", error = m });
//                }

//                if (m.Contains("forbidden", StringComparison.OrdinalIgnoreCase) ||
//                    m.Contains("unauthorized", StringComparison.OrdinalIgnoreCase))
//                {
//                    // 403 when biz is not allowed to see this flow
//                    return StatusCode(StatusCodes.Status403Forbidden,
//                        new { message = "‚ùå Failed to load flow", error = m });
//                }

//                // default ‚Üí 500
//                return StatusCode(StatusCodes.Status500InternalServerError,
//                    new { message = "‚ùå Failed to load flow", error = string.IsNullOrWhiteSpace(m) ? "Unknown error" : m });
//            }

//            // SUCCESS: your service already builds the payload (FlowName, IsPublished, Nodes, Edges, etc.)
//            // Just return it as-is so the FE can consume it.
//            // Example shape expected by FE:
//            // { flowName, isPublished, nodes: [...], edges: [...] }
//            return Ok(result.Data);
//        }


//        //[HttpPut("{id:guid}")]
//        //public async Task<IActionResult> Update(Guid id, [FromBody] SaveVisualFlowDto dto)
//        //{
//        //    var biz = User.FindFirst("businessId")?.Value;
//        //    var user = User.FindFirst("name")?.Value ?? "system";
//        //    if (!Guid.TryParse(biz, out var businessId)) return BadRequest("‚ùå Invalid business.");

//        //    var result = await _flowService.UpdateVisualFlowAsync(id, dto, businessId, user);
//        //    return result.Status switch
//        //    {
//        //        "ok" => Ok(new { message = "Flow updated.", needsRepublish = result.NeedsRepublish }),
//        //        "requiresFork" => Conflict(new { message = result.Message, campaigns = result.Campaigns, requiresFork = true }),
//        //        "notFound" => NotFound("‚ùå Flow not found."),
//        //        _ => BadRequest(new { message = result.Message ?? "Unknown error" })
//        //    };
//        //}


//        [HttpPost("{id:guid}/publish")]
//        public async Task<IActionResult> Publish(Guid id)
//        {
//            var biz = User.FindFirst("businessId")?.Value;
//            var user = User.FindFirst("name")?.Value ?? "system";
//            if (!Guid.TryParse(biz, out var businessId)) return BadRequest("‚ùå Invalid business.");

//            var ok = await _flowService.PublishFlowAsync(id, businessId, user);
//            return ok ? Ok(new { message = "‚úÖ Flow published." }) : NotFound("‚ùå Flow not found.");
//        }


//        //// üëá NEW: publish
//        //[HttpPost("{id:guid}/publish")]
//        //public async Task<IActionResult> Publish(Guid id)
//        //{
//        //    var biz = User.FindFirst("businessId")?.Value;
//        //    var user = User.FindFirst("name")?.Value ?? "system";
//        //    if (!Guid.TryParse(biz, out var businessId)) return BadRequest("‚ùå Invalid business.");

//        //    var ok = await _flowService.PublishFlowAsync(id, businessId, user);
//        //    return ok ? Ok(new { message = "‚úÖ Flow published." }) : NotFound("‚ùå Flow not found.");
//        //}



//        // üëá NEW: fork (create new draft from live-locked flow)
//        [HttpPost("{id:guid}/fork")]
//        public async Task<IActionResult> Fork(Guid id)
//        {
//            var biz = User.FindFirst("businessId")?.Value;
//            var user = User.FindFirst("name")?.Value ?? "system";
//            if (!Guid.TryParse(biz, out var businessId)) return BadRequest("‚ùå Invalid business.");

//            var forkId = await _flowService.ForkFlowAsync(id, businessId, user);
//            if (forkId == Guid.Empty) return NotFound("‚ùå Flow not found.");
//            return Ok(new { flowId = forkId });
//        }

//        // üëá BACK-COMPAT: keep existing delete route AND add /{id}
//       // [HttpDelete("{id:guid}")]
//        //public async Task<IActionResult> DeletePlain(Guid id)
//        //{
//        //    var biz = User.FindFirst("businessId")?.Value;
//        //    if (!Guid.TryParse(biz, out var businessId))
//        //        return BadRequest("‚ùå Invalid business ID");

//        //    // Capture the user performing the delete
//        //    var deletedBy = User.FindFirst("name")?.Value
//        //                 ?? User.FindFirst("email")?.Value
//        //                 ?? User.FindFirst("sub")?.Value
//        //                 ?? "system";

//        //    var result = await _flowService.DeleteFlowAsync(id, businessId, deletedBy);

//        //    if (!result.Success && result.Code == 409)
//        //        return Conflict(new { message = result.Message, campaigns = result.Payload });

//        //    if (!result.Success && result.Code == 404)
//        //        return NotFound(new { message = result.Message });

//        //    if (!result.Success)
//        //        return BadRequest(new { message = result.Message });

//        //    return Ok(new { message = result.Message });
//        //}

//    }

//}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Controllers\FlowRedirectController.cs 
====================================================== 
 
Ôªø// üìÑ Features/CTAFlowBuilder/Controllers/FlowRedirectController.cs
using Microsoft.AspNetCore.Mvc;
using xbytechat.api.Infrastructure.Flows;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.CTAFlowBuilder.Services;
using Microsoft.AspNetCore.Authorization;

namespace xbytechat.api.Features.CTAFlowBuilder.Controllers
{
    [ApiController]
    [Route("r/flow")]
    public class FlowRedirectController : ControllerBase
    {
        private readonly IFlowClickTokenService _tokens;
        private readonly ICTAFlowService _flows;           // service to read flow steps/links
        private readonly IFlowRuntimeService _runtime;     // service to execute next step

        public FlowRedirectController(
            IFlowClickTokenService tokens,
            ICTAFlowService flows,
            IFlowRuntimeService runtime)
        {
            _tokens = tokens;
            _flows = flows;
            _runtime = runtime;
        }

        [HttpGet("{token}")]
        [AllowAnonymous] // secure by token, tenant checks inside
        public async Task<IActionResult> RedirectByToken(string token)
        {
            FlowClickPayload p;
            try
            {
                p = _tokens.Validate(token);
            }
            catch (Exception ex)
            {
                return BadRequest($"Invalid or expired token: {ex.Message}");
            }

            // üîí Tenant isolation: make sure the business in the token matches the current request context
            // (if you have multi-tenant enforcement middleware, call it here)

            // 1) Resolve the button link
            var link = await _flows.GetLinkAsync(p.fid, p.sid, p.bi);
            if (link is null)
                return NotFound("Link not found for this flow step");

            var requestId = Guid.NewGuid(); // for idempotency
            var exec = await _runtime.ExecuteNextAsync(new NextStepContext
            {
                BusinessId = p.biz,
                FlowId = p.fid,
                Version = p.ver,
                SourceStepId = p.sid,
                TargetStepId = link.NextStepId, // may be null ‚Üí terminal
                ButtonIndex = p.bi,
                MessageLogId = p.mlid,
                ContactPhone = p.cp,
                RequestId = requestId,

                // üÜï Pass the clicked button for runtime decision
                ClickedButton = link
            });


            // 3) Redirect the user
            // If button was a URL, use that; else go to a generic "thank you" page
            var dest = exec.RedirectUrl ?? "/thank-you";
            return Redirect(dest);
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\AttachedCampaignDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public sealed record AttachedCampaignDto(
        Guid Id,
        string Name,
        string Status,
        DateTime? ScheduledAt,
        DateTime CreatedAt,
        string? CreatedBy,
        DateTime? FirstSentAt   // earliest non-null SentAt from CampaignSendLogs
    );


}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\CreateFlowDto.cs 
====================================================== 
 
Ôªø// üìÑ File: xbytechat.api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs
namespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public class CreateFlowDto
    {
        public string FlowName { get; set; } = string.Empty;
        public List<FlowStepDto> Steps { get; set; } = new();
        public bool IsPublished { get; set; } = false; // ‚úÖ NEW: Draft vs Published
    }

    public class FlowStepDto
    {
        public string TriggerButtonText { get; set; } = string.Empty;
        public string TriggerButtonType { get; set; } = string.Empty;
        public string TemplateToSend { get; set; } = string.Empty;
        public int StepOrder { get; set; }
        public List<ButtonLinkDto> ButtonLinks { get; set; } = new();
    }

    public class ButtonLinkDto
    {
        public string ButtonText { get; set; } = string.Empty;
        public Guid NextStepId { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\CTAButtonClickDto.cs 
====================================================== 
 
Ôªøusing System.ComponentModel.DataAnnotations;

namespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public class CTAButtonClickDto
    {
        [Required]
        public string ButtonText { get; set; } = string.Empty;

        [Required]
        public string ButtonType { get; set; } = "cta"; // e.g., "quick_reply", "url", etc.

        [Required]
        public string RecipientNumber { get; set; } = string.Empty;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\CTAFlowExecutionRequest.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public class CTAFlowExecutionRequest
    {
        public string ButtonText { get; set; } = string.Empty;
        public string ButtonType { get; set; } = "cta";
        public string RecipientNumber { get; set; } = string.Empty;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\FlowEdgeDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public class FlowEdgeDto
    {
        public string FromNodeId { get; set; } = string.Empty;
        public string ToNodeId { get; set; } = string.Empty;
        public string? SourceHandle { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\FlowNodeDto.cs 
====================================================== 
 
Ôªø    namespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public class FlowNodeDto
    {
        public string Id { get; set; } = string.Empty;

        public string TemplateName { get; set; } = string.Empty;
        public string? TemplateType { get; set; } // ‚úÖ e.g., "image_template", "text_template"
        public string MessageBody { get; set; } = string.Empty;
        public string? TriggerButtonText { get; set; }
        public string? TriggerButtonType { get; set; }
        public float PositionX { get; set; }
        public float PositionY { get; set; }

        public string? RequiredTag { get; set; }         
        public string? RequiredSource { get; set; }      
        public List<LinkButtonDto> Buttons { get; set; } = new();
        public bool UseProfileName { get; set; }
        public int? ProfileNameSlot { get; set; }
        //(for flow trigger mapping)
        // ‚úÖ NEW: ReactFlow expects this structure
        public PositionDto Position => new PositionDto
        {
            x = PositionX,
            y = PositionY
        };
        public class PositionDto
        {
            public float x { get; set; }
            public float y { get; set; }
        }
    }
}

 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\FlowUpdateResult.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public sealed class FlowUpdateResult
    {
        // ok | requiresFork | notFound | error
        public string Status { get; set; } = "ok";
        public string? Message { get; set; }
        public bool NeedsRepublish { get; set; } // true when we flipped published->draft to allow editing
        public object? Campaigns { get; set; }   // list for UI when requiresFork
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\LinkButtonDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public class LinkButtonDto
    {
        public string Text { get; set; } = string.Empty;
        public int Index { get; set; } = -1;
        public string? Type { get; set; } // üî• e.g., "URL", "QUICK_REPLY"
        public string? SubType { get; set; } // üî• e.g., "STATIC", "DYNAMIC"
        public string? Value { get; set; } // üî• the parameter or url or payload

        public string? TargetNodeId { get; set; } // üîÑ used for flow linking
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\SaveVisualFlowDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public class SaveVisualFlowDto
    {
        public string FlowName { get; set; } = string.Empty;
        public bool IsPublished { get; set; }

        public List<FlowNodeDto> Nodes { get; set; } = new();
        public List<FlowEdgeDto> Edges { get; set; } = new();
        public Guid? CampaignId { get; set; } // ‚úÖ Add this line
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\VisualFlowLoadDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public class VisualFlowLoadDto
    {
        public string FlowName { get; set; } = string.Empty;
        public List<FlowNodeDto> Nodes { get; set; } = new();
        public List<FlowEdgeDto> Edges { get; set; } = new();
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\DTOs\VisualFlowSummaryDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CTAFlowBuilder.DTOs
{
    public class VisualFlowSummaryDto
    {
        public Guid Id { get; set; }
        public string FlowName { get; set; } = string.Empty;
        public bool IsPublished { get; set; }
        public DateTime CreatedAt { get; set; }
    }

}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Models\CTAFlowClickLog.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CTAFlowBuilder.Models
{
    public class CTAFlowClickLog
    {
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Models\CTAFlowConfig.cs 
====================================================== 
 
Ôªø// üìÑ File: xbytechat.api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace xbytechat.api.Features.CTAFlowBuilder.Models
{
    /// <summary>
    /// Represents a complete flow configuration for a business, such as "Interested Journey".
    /// </summary>
    public class CTAFlowConfig
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        public Guid BusinessId { get; set; }

        [Required]
        [MaxLength(100)]
        public string FlowName { get; set; } = string.Empty;

        public bool IsActive { get; set; } = true;

        public bool IsPublished { get; set; } = false; // ‚úÖ NEW: Support draft/published

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public string? CreatedBy { get; set; }
        public DateTime? UpdatedAt { get; set; }  // ‚úÖ Add this line

        // üîÅ Navigation to steps
        public ICollection<CTAFlowStep> Steps { get; set; } = new List<CTAFlowStep>();
    }
}

// üìÑ File: xbytechat.api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs
//using System.ComponentModel.DataAnnotations;
//using System.Text.Json.Serialization;
//using Microsoft.EntityFrameworkCore;

//namespace xbytechat.api.Features.CTAFlowBuilder.Models
//{
//    /// <summary>
//    /// Represents a complete flow configuration for a business, such as "Interested Journey".
//    /// </summary>
//    [Index(nameof(BusinessId), nameof(IsActive), nameof(FlowName), Name = "ix_ctaflowconfigs_biz_active_name")]
//    [Index(nameof(BusinessId), nameof(IsPublished), Name = "ix_ctaflowconfigs_biz_published")]
//    public class CTAFlowConfig
//    {
//        [Key]
//        public Guid Id { get; set; }

//        [Required]
//        public Guid BusinessId { get; set; }

//        [Required, MaxLength(100)]
//        public string FlowName { get; set; } = string.Empty;

//        /// <summary>
//        /// Soft ‚Äúenabled/disabled‚Äù flag for listing/selection. We still hard-delete unused flows on request.
//        /// </summary>
//        public bool IsActive { get; set; } = true;

//        /// <summary>
//        /// Draft vs published for the builder.
//        /// </summary>
//        public bool IsPublished { get; set; } = false;

//        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
//        public string? CreatedBy { get; set; }

//        /// <summary>
//        /// Last modification timestamp (updated in service on edits).
//        /// </summary>
//        public DateTime? UpdatedAt { get; set; }

//        /// <summary>
//        /// Optimistic concurrency token to avoid race conditions (e.g., editing while someone tries to delete).
//        /// </summary>
//        [Timestamp]
//        public byte[]? RowVersion { get; set; }

//        // üîÅ Navigation to steps
//        // Cascade delete is configured in OnModelCreating:
//        // modelBuilder.Entity<CTAFlowConfig>()
//        //   .HasMany(f => f.Steps).WithOne(s => s.Flow)
//        //   .HasForeignKey(s => s.FlowId)
//        //   .OnDelete(DeleteBehavior.Cascade);
//        [JsonIgnore] // prevent huge payloads if you serialize configs somewhere else
//        public ICollection<CTAFlowStep> Steps { get; set; } = new List<CTAFlowStep>();
//    }
//}

 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Models\CTAFlowStep.cs 
====================================================== 
 
Ôªø// üìÑ File: Features/CTAFlowBuilder/Models/CTAFlowStep.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace xbytechat.api.Features.CTAFlowBuilder.Models
{
    /// <summary>
    /// Represents a single step in a CTA flow, triggered by a button.
    /// </summary>
    public class CTAFlowStep
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        public Guid CTAFlowConfigId { get; set; }

        [ForeignKey(nameof(CTAFlowConfigId))]
        public CTAFlowConfig Flow { get; set; } = null!;

        public string TriggerButtonText { get; set; } = string.Empty;

        public string TriggerButtonType { get; set; } = "cta"; // e.g., "quick_reply"

        public string TemplateToSend { get; set; } = string.Empty;

        public int StepOrder { get; set; }

        public string? RequiredTag { get; set; }        // e.g., "interested"
        public string? RequiredSource { get; set; }     // e.g., "ads", "qr", "manual"

        // üîÄ Multiple buttons linking to different steps
        public List<FlowButtonLink> ButtonLinks { get; set; } = new();

        public float? PositionX { get; set; }
        public float? PositionY { get; set; }
        public string? TemplateType { get; set; }

        // ‚úÖ Use WhatsApp Profile Name in this step's template?
        public bool UseProfileName { get; set; } = false;

        // ‚úÖ 1-based placeholder index in the template body (e.g., {{1}})
        public int? ProfileNameSlot { get; set; } = 1;

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Models\FlowButtonLink.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CTAFlowBuilder.Models
{
    public class FlowButtonLink
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public string ButtonText { get; set; } = string.Empty;
        public Guid? NextStepId { get; set; }
        // ‚úÖ NEW FIELDS FOR FUTURE AUTOMATION
        public string ButtonType { get; set; } = "QUICK_REPLY";    // e.g., URL, QUICK_REPLY, FLOW
        public string ButtonSubType { get; set; } = "";            // Optional: e.g., "Catalog", "PricingCTA"
        public string ButtonValue { get; set; } = "";              // e.g., URL or deep link

        // Optional FK back to Step if needed
        public Guid CTAFlowStepId { get; set; }
        public CTAFlowStep? Step { get; set; }

        public short ButtonIndex { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Models\FlowExecutionLog.cs 
====================================================== 
 
Ôªøusing System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace xbytechat.api.Features.CTAFlowBuilder.Models
{
    /// <summary>
    /// Logs when a visual flow step is executed (useful for analytics, debugging, audit).
    /// </summary>
    public class FlowExecutionLog
    {
        [Key]
        public Guid Id { get; set; }

        public Guid? RunId { get; set; }
        [Required]
        public Guid BusinessId { get; set; }

        [Required]
        public Guid StepId { get; set; }
        public string StepName { get; set; } = string.Empty;

        public Guid? FlowId { get; set; }

        public Guid? CampaignSendLogId { get; set; }
        public Guid? TrackingLogId { get; set; }

        public string? ContactPhone { get; set; }

        public string? TriggeredByButton { get; set; }

        public string? TemplateName { get; set; }

        public string? TemplateType { get; set; }

        public bool Success { get; set; }

        public string? ErrorMessage { get; set; }

        public string? RawResponse { get; set; }

        public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;

        public Guid? MessageLogId { get; set; }              // tie to originating message
        public short? ButtonIndex { get; set; }              // which button was clicked (0..2)
        public Guid? RequestId { get; set; }

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\CTAFlowService.cs 
====================================================== 
 
Ôªøusing Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.MessagesEngine.DTOs;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat.api.Features.Tracking.Models;
using xbytechat.api.Helpers;
using xbytechat_api.WhatsAppSettings.Services;
using xbytechat.api.WhatsAppSettings.DTOs;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public class CTAFlowService : ICTAFlowService
    {
        private readonly AppDbContext _context;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;

        public CTAFlowService(
            AppDbContext context,
            IMessageEngineService messageEngineService,
            IWhatsAppTemplateFetcherService templateFetcherService)
        {
            _context = context;
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
        }

        // ---------------------------
        // CREATE (draft-only, no edit)
        // ---------------------------
        public async Task<ResponseResult> SaveVisualFlowAsync(
            SaveVisualFlowDto dto,
            Guid businessId,
            string createdBy)
        {
            try
            {
                Log.Information("üß† SaveVisualFlow (create-only) | FlowName: {FlowName} | Biz: {BusinessId}",
                    dto.FlowName, businessId);

                // 0) Validate
                if (dto.Nodes == null || !dto.Nodes.Any())
                    return ResponseResult.ErrorInfo("‚ùå Cannot save an empty flow. Please add at least one step.");

                var trimmedName = (dto.FlowName ?? "").Trim();
                if (trimmedName.Length == 0)
                    return ResponseResult.ErrorInfo("‚ùå Flow name is required.");

                // 1) Enforce unique active name per business (create-only)
                var nameExists = await _context.CTAFlowConfigs
                    .AnyAsync(f => f.BusinessId == businessId && f.FlowName == trimmedName && f.IsActive);
                if (nameExists)
                {
                    Log.Warning("‚ö†Ô∏è Duplicate flow name '{Name}' for business {Biz}.", trimmedName, businessId);
                    return ResponseResult.ErrorInfo("‚ùå A flow with this name already exists.");
                }

                await using var tx = await _context.Database.BeginTransactionAsync();

                // 2) Insert FlowConfig AS DRAFT (force IsPublished=false)
                var flow = new CTAFlowConfig
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    FlowName = trimmedName,
                    CreatedBy = createdBy,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow,
                    IsActive = true,
                    IsPublished = false // << always draft on create
                };
                _context.CTAFlowConfigs.Add(flow);

                // 3) Steps (map incoming node ids so we can wire links)
                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);
                var orderIndex = 0;

                foreach (var node in dto.Nodes)
                {
                    if (string.IsNullOrWhiteSpace(node.Id)) continue;

                    var step = new CTAFlowStep
                    {
                        Id = Guid.NewGuid(),
                        CTAFlowConfigId = flow.Id,
                        StepOrder = orderIndex++,
                        TemplateToSend = node.TemplateName,
                        TemplateType = node.TemplateType ?? "UNKNOWN",
                        TriggerButtonText = node.TriggerButtonText ?? "",
                        TriggerButtonType = node.TriggerButtonType ?? "cta",
                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,
                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,
                        UseProfileName = node.UseProfileName,
                        ProfileNameSlot = node.ProfileNameSlot,
                        ButtonLinks = new List<FlowButtonLink>()
                    };

                    // Only text templates may use profile name slot
                    var isTextTemplate = string.Equals(step.TemplateType, "text_template", StringComparison.OrdinalIgnoreCase);
                    if (!isTextTemplate)
                    {
                        step.UseProfileName = false;
                        step.ProfileNameSlot = null;
                    }
                    else if (!step.UseProfileName)
                    {
                        step.ProfileNameSlot = null;
                    }
                    else if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)
                    {
                        step.ProfileNameSlot = 1;
                    }

                    stepMap[node.Id] = step;
                    _context.CTAFlowSteps.Add(step);
                }

                // 4) Wire links per node via edges (SourceHandle == button text)
                var edges = dto.Edges ?? new List<FlowEdgeDto>();

                foreach (var node in dto.Nodes)
                {
                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))
                        continue;

                    var outEdges = edges
                        .Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase))
                        .ToList();

                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())
                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)
                        .ThenBy(b => b.Text ?? string.Empty)
                        .ToList();

                    short nextIdx = 0;

                    foreach (var btn in orderedButtons)
                    {
                        var text = (btn.Text ?? string.Empty).Trim();
                        if (string.IsNullOrEmpty(text)) continue;
                        if (!seenTexts.Add(text)) continue; // dedupe

                        var edge = outEdges.FirstOrDefault(e =>
                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));
                        if (edge == null) continue;

                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep)) continue;

                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;
                        nextIdx = (short)(finalIndex + 1);

                        var link = new FlowButtonLink
                        {
                            Id = Guid.NewGuid(),
                            CTAFlowStepId = fromStep.Id,
                            NextStepId = toStep.Id,
                            ButtonText = text,
                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? "QUICK_REPLY" : btn.Type,
                            ButtonSubType = btn.SubType ?? string.Empty,
                            ButtonValue = btn.Value ?? string.Empty,
                            ButtonIndex = (short)finalIndex
                        };

                        _context.FlowButtonLinks.Add(link);
                        fromStep.ButtonLinks.Add(link);

                        // convenience: populate target's trigger info
                        toStep.TriggerButtonText = text;
                        toStep.TriggerButtonType = (btn.Type ?? "QUICK_REPLY").ToLowerInvariant();
                    }
                }

                await _context.SaveChangesAsync();
                await tx.CommitAsync();

                Log.Information("‚úÖ Flow created '{Flow}' | Steps: {Steps} | Links: {Links}",
                    flow.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));

                return ResponseResult.SuccessInfo("‚úÖ Flow created.", new { flowId = flow.Id });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while saving (create) flow");
                return ResponseResult.ErrorInfo("‚ùå Internal error while saving flow.");
            }
        }

        // ---------------------------
        // LISTS
        // ---------------------------
        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Where(f => f.BusinessId == businessId && f.IsPublished)
                .OrderByDescending(f => f.CreatedAt)
                .Select(f => new VisualFlowSummaryDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    IsPublished = f.IsPublished,
                    CreatedAt = f.CreatedAt
                })
                .ToListAsync();
        }

        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)
                .OrderByDescending(f => f.CreatedAt)
                .Select(f => new VisualFlowSummaryDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    CreatedAt = f.CreatedAt,
                    IsPublished = f.IsPublished
                })
                .ToListAsync();
        }

        // ---------------------------
        // DETAIL LOADERS
        // ---------------------------
        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId)
        {
            var flow = await _context.CTAFlowConfigs
                .Include(c => c.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .FirstOrDefaultAsync(c => c.Id == flowId && c.BusinessId == businessId && c.IsActive);

            if (flow == null) return null;

            // Prefetch template metadata
            var templateMap = new Dictionary<string, TemplateMetadataDto>(StringComparer.OrdinalIgnoreCase);
            var uniqueNames = flow.Steps
                .Select(s => s.TemplateToSend)
                .Where(n => !string.IsNullOrWhiteSpace(n))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();

            foreach (var name in uniqueNames)
            {
                try
                {
                    var tpl = await _templateFetcherService.GetTemplateByNameAsync(
                        businessId, name!, includeButtons: true);
                    if (tpl != null) templateMap[name!] = tpl;
                }
                catch (Exception ex)
                {
                    Log.Warning(ex, "‚ö†Ô∏è Failed to fetch template metadata for {Template}", name);
                }
            }

            var nodes = flow.Steps.Select(step =>
            {
                templateMap.TryGetValue(step.TemplateToSend ?? "", out var tpl);

                var dbLinks = step.ButtonLinks ?? new List<FlowButtonLink>();
                var dbButtons = dbLinks
                    .OrderBy(b => b.ButtonIndex)
                    .Select(link => new LinkButtonDto
                    {
                        Text = link.ButtonText,
                        Type = link.ButtonType,
                        SubType = link.ButtonSubType,
                        Value = link.ButtonValue,
                        Index = link.ButtonIndex,
                        TargetNodeId = link.NextStepId?.ToString()
                    });

                var templateButtons = (tpl?.ButtonParams ?? new List<ButtonMetadataDto>())
                    .Where(btn => !dbLinks.Any(bl => string.Equals(bl.ButtonText, btn.Text, StringComparison.OrdinalIgnoreCase)))
                    .Select(btn => new LinkButtonDto { Text = btn.Text });

                return new FlowNodeDto
                {
                    Id = step.Id.ToString(),
                    TemplateName = step.TemplateToSend,
                    TemplateType = step.TemplateType,
                    MessageBody = string.IsNullOrWhiteSpace(tpl?.Body) ? "‚Äî no body found ‚Äî" : tpl!.Body,
                    TriggerButtonText = step.TriggerButtonText,
                    TriggerButtonType = step.TriggerButtonType,
                    PositionX = step.PositionX ?? 100,
                    PositionY = step.PositionY ?? 100,
                    RequiredTag = step.RequiredTag,
                    RequiredSource = step.RequiredSource,
                    UseProfileName = step.UseProfileName,
                    ProfileNameSlot = step.ProfileNameSlot,
                    Buttons = dbButtons.Concat(templateButtons).ToList()
                };
            }).ToList();

            var edges = flow.Steps
                .SelectMany(step =>
                    (step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>())
                    .Where(l => l.NextStepId.HasValue)
                    .Select(l => new FlowEdgeDto
                    {
                        FromNodeId = step.Id.ToString(),
                        ToNodeId = l.NextStepId!.Value.ToString(),
                        SourceHandle = l.ButtonText
                    }))
                .ToList();

            return new SaveVisualFlowDto
            {
                FlowName = flow.FlowName,
                IsPublished = flow.IsPublished,
                Nodes = nodes,
                Edges = edges
            };
        }

        public async Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId)
        {
            try
            {
                var flow = await _context.CTAFlowConfigs
                    .AsNoTracking()
                    .Where(f => f.IsActive && f.BusinessId == businessId && f.Id == flowId)
                    .Select(f => new
                    {
                        f.Id,
                        f.FlowName,
                        f.IsPublished,
                        Steps = _context.CTAFlowSteps
                            .Where(s => s.CTAFlowConfigId == f.Id)
                            .OrderBy(s => s.StepOrder)
                            .Select(s => new
                            {
                                s.Id,
                                s.StepOrder,
                                s.TemplateToSend,
                                s.TemplateType,
                                s.TriggerButtonText,
                                s.TriggerButtonType,
                                s.PositionX,
                                s.PositionY,
                                s.UseProfileName,
                                s.ProfileNameSlot,
                                Buttons = _context.FlowButtonLinks
                                    .Where(b => b.CTAFlowStepId == s.Id)
                                    .OrderBy(b => b.ButtonIndex)
                                    .Select(b => new
                                    {
                                        b.ButtonText,
                                        b.ButtonType,
                                        b.ButtonSubType,
                                        b.ButtonValue,
                                        b.ButtonIndex,
                                        b.NextStepId
                                    })
                                    .ToList()
                            })
                            .ToList()
                    })
                    .FirstOrDefaultAsync();

                if (flow == null)
                    return ResponseResult.ErrorInfo("Flow not found.");

                var nodes = flow.Steps.Select(s => new
                {
                    id = s.Id.ToString(),
                    positionX = s.PositionX ?? 0,
                    positionY = s.PositionY ?? 0,
                    templateName = s.TemplateToSend,
                    templateType = s.TemplateType,
                    triggerButtonText = s.TriggerButtonText ?? string.Empty,
                    triggerButtonType = s.TriggerButtonType ?? "cta",
                    requiredTag = string.Empty,
                    requiredSource = string.Empty,
                    useProfileName = s.UseProfileName,
                    profileNameSlot = (s.ProfileNameSlot.HasValue && s.ProfileNameSlot.Value > 0) ? s.ProfileNameSlot.Value : 1,
                    buttons = s.Buttons.Select(b => new
                    {
                        text = b.ButtonText,
                        type = b.ButtonType,
                        subType = b.ButtonSubType,
                        value = b.ButtonValue,
                        targetNodeId = b.NextStepId == Guid.Empty ? null : b.NextStepId.ToString(),
                        index = (int)(b.ButtonIndex)
                    })
                });

                var edges = flow.Steps
                    .SelectMany(s => s.Buttons
                        .Where(b => b.NextStepId != Guid.Empty)
                        .Select(b => new
                        {
                            fromNodeId = s.Id.ToString(),
                            toNodeId = b.NextStepId.ToString(),
                            sourceHandle = b.ButtonText
                        }));

                var payload = new
                {
                    flowName = flow.FlowName,
                    isPublished = flow.IsPublished,
                    nodes,
                    edges
                };

                return ResponseResult.SuccessInfo("Flow loaded.", payload);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while loading visual flow {FlowId}", flowId);
                return ResponseResult.ErrorInfo("Internal error while loading flow.");
            }
        }

        // ---------------------------
        // DELETE (only if not attached)
        // ---------------------------
        public async Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy)
        {
            var flow = await _context.CTAFlowConfigs
                .Include(f => f.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);

            if (flow == null)
                return ResponseResult.ErrorInfo("‚ùå Flow not found or does not belong to you.");

            var inUseQuery = _context.Campaigns
                .Where(c => c.BusinessId == businessId &&
                            !c.IsDeleted &&
                            c.CTAFlowConfigId == flowId);

            var inUseCount = await inUseQuery.CountAsync();
            if (inUseCount > 0)
            {
                Log.Warning("‚ùå Delete flow blocked. Flow {FlowId} is used by {Count} campaigns.", flowId, inUseCount);
                // Keep message; controller will fetch campaigns for modal
                return ResponseResult.ErrorInfo(
                    $"‚ùå Cannot delete. This flow is attached to {inUseCount} campaign(s). Delete those campaigns first.");
            }

            foreach (var step in flow.Steps)
                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);

            _context.CTAFlowSteps.RemoveRange(flow.Steps);
            _context.CTAFlowConfigs.Remove(flow);

            await _context.SaveChangesAsync();
            return ResponseResult.SuccessInfo("‚úÖ Flow deleted.");
        }

        public async Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId)
        {
            var q = _context.Campaigns
                .Where(c => c.BusinessId == businessId && !c.IsDeleted && c.CTAFlowConfigId == flowId);

            var firstSends = await _context.CampaignSendLogs
                .Where(s => s.BusinessId == businessId && s.CampaignId != Guid.Empty)
                .GroupBy(s => s.CampaignId)
                .Select(g => new { CampaignId = g.Key, FirstSentAt = (DateTime?)g.Min(s => s.CreatedAt) })
                .ToListAsync();

            var firstSendMap = firstSends.ToDictionary(x => x.CampaignId, x => x.FirstSentAt);

            var list = await q
                .OrderByDescending(c => c.CreatedAt)
                .Select(c => new
                {
                    c.Id,
                    c.Name,
                    c.Status,
                    c.ScheduledAt,
                    c.CreatedAt,
                    c.CreatedBy
                })
                .ToListAsync();

            return list.Select(x => new AttachedCampaignDto(
                x.Id,
                x.Name,
                x.Status,
                x.ScheduledAt,
                x.CreatedAt,
                x.CreatedBy,
                firstSendMap.TryGetValue(x.Id, out var ts) ? ts : null
            )).ToList();
        }

        public async Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId)
        {
            var flow = await _context.CTAFlowConfigs
                .Include(f => f.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);

            if (flow is null) return false;

            var attached = await _context.Campaigns
                .Where(c => c.BusinessId == businessId && !c.IsDeleted && c.CTAFlowConfigId == flowId)
                .AnyAsync();
            if (attached) return false;

            foreach (var step in flow.Steps)
                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);
            _context.CTAFlowSteps.RemoveRange(flow.Steps);
            _context.CTAFlowConfigs.Remove(flow);

            await _context.SaveChangesAsync();
            return true;
        }

        // ---------------------------
        // PUBLISH (by id, flip flag)
        // ---------------------------
        public async Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user)
        {
            var flow = await _context.CTAFlowConfigs
                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);

            if (flow is null) return false;

            flow.IsPublished = true;
            flow.UpdatedAt = DateTime.UtcNow;
            await _context.SaveChangesAsync();
            return true;
        }

        // ---------------------------
        // RUNTIME / Matching / Execute
        // ---------------------------
        public async Task<CTAFlowStep?> MatchStepByButtonAsync(
            Guid businessId,
            string buttonText,
            string buttonType,
            string templateName,
            Guid? campaignId = null)
        {
            var normalizedButtonText = buttonText?.Trim().ToLower() ?? "";
            var normalizedButtonType = buttonType?.Trim().ToLower() ?? "";
            var normalizedTemplateName = templateName?.Trim().ToLower() ?? "";

            if (campaignId.HasValue)
            {
                var overrideStep = await _context.CampaignFlowOverrides
                    .Where(o =>
                        o.CampaignId == campaignId &&
                        o.ButtonText.ToLower() == normalizedButtonText &&
                        o.TemplateName.ToLower() == normalizedTemplateName)
                    .FirstOrDefaultAsync();

                if (overrideStep != null)
                {
                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();
                    var matched = await _context.CTAFlowSteps
                        .Include(s => s.Flow)
                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);
                    if (matched != null) return matched;
                }
            }

            var fallbackStep = await _context.CTAFlowSteps
                .Include(s => s.Flow)
                .Where(s =>
                    s.Flow.BusinessId == businessId &&
                    s.Flow.IsActive &&
                    s.Flow.IsPublished &&
                    s.TriggerButtonText.ToLower() == normalizedButtonText &&
                    s.TriggerButtonType.ToLower() == normalizedButtonType)
                .FirstOrDefaultAsync();

            return fallbackStep;
        }

        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)
        {
            try
            {
                var log = await _context.TrackingLogs
                    .Include(l => l.Contact)
                        .ThenInclude(c => c.ContactTags)
                            .ThenInclude(ct => ct.Tag)
                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);

                if (log == null) return ResponseResult.ErrorInfo("Tracking log not found.");

                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);
                if (step == null) return ResponseResult.ErrorInfo("Step conditions not satisfied.");

                var args = new List<string>();
                if (step.UseProfileName && step.ProfileNameSlot is int slot && slot >= 1)
                {
                    var contact = log.Contact ?? await _context.Contacts
                        .AsNoTracking()
                        .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == (log.ContactPhone ?? ""));
                    var greet = (contact?.ProfileName ?? contact?.Name)?.Trim();
                    if (string.IsNullOrEmpty(greet)) greet = "there";
                    while (args.Count < slot) args.Add(string.Empty);
                    args[slot - 1] = greet;
                }

                ResponseResult sendResult;
                switch (step.TemplateType?.ToLower())
                {
                    case "image_template":
                        var imageDto = new ImageTemplateMessageDto
                        {
                            BusinessId = businessId,
                            RecipientNumber = log.ContactPhone ?? "",
                            TemplateName = step.TemplateToSend,
                            LanguageCode = "en_US"
                        };
                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);
                        break;
                    case "text_template":
                    default:
                        var textDto = new SimpleTemplateMessageDto
                        {
                            RecipientNumber = log.ContactPhone ?? "",
                            TemplateName = step.TemplateToSend,
                            TemplateParameters = args
                        };
                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);
                        break;
                }

                var executionLog = new FlowExecutionLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    StepId = step.Id,
                    FlowId = step.CTAFlowConfigId,
                    CampaignSendLogId = campaignSendLogId,
                    TrackingLogId = trackingLogId,
                    ContactPhone = log.ContactPhone,
                    TriggeredByButton = step.TriggerButtonText,
                    TemplateName = step.TemplateToSend,
                    TemplateType = step.TemplateType,
                    Success = sendResult.Success,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ExecutedAt = DateTime.UtcNow
                };

                _context.FlowExecutionLogs.Add(executionLog);
                await _context.SaveChangesAsync();

                return ResponseResult.SuccessInfo($"Flow step executed. Sent: {sendResult.Success}", null, sendResult.RawResponse);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception during ExecuteVisualFlowAsync()");
                return ResponseResult.ErrorInfo("Internal error during flow execution.");
            }
        }

        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)
            => GetChainedStepAsync(businessId, nextStepId, null, null);

        public async Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId, TrackingLog? trackingLog, Contact? contact)
        {
            if (nextStepId == null) return null;

            var flow = await _context.CTAFlowConfigs
                .Include(f => f.Steps)
                .FirstOrDefaultAsync(f =>
                    f.BusinessId == businessId &&
                    f.Steps.Any(s => s.Id == nextStepId));

            var followUpStep = flow?.Steps.FirstOrDefault(s => s.Id == nextStepId);
            if (followUpStep == null) return null;

            if (trackingLog != null)
            {
                var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);
                if (!isMatch) return null;
            }

            return followUpStep;
        }

        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId)
        {
            var log = await _context.TrackingLogs
                .Include(l => l.Contact)
                    .ThenInclude(c => c.ContactTags)
                        .ThenInclude(ct => ct.Tag)
                .FirstOrDefaultAsync(l => l.Id == trackingLogId);

            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);
        }

        // ‚úÖ MISSING IMPLEMENTATION (to satisfy the interface)
        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)
        {
            return await _context.FlowButtonLinks
                .Where(l => l.CTAFlowStepId == sourceStepId
                            && l.NextStepId != null
                            && l.Step.CTAFlowConfigId == flowId
                            && l.ButtonIndex == buttonIndex)
                .SingleOrDefaultAsync();
        }
    }
}


//using Microsoft.AspNetCore.Authorization;
//using Microsoft.AspNetCore.Mvc;
//using Microsoft.EntityFrameworkCore;
//using Serilog;
//using xbytechat.api.AuthModule.Models;
//using xbytechat.api.CRM.Models;
//using xbytechat.api.Features.CTAFlowBuilder.DTOs;
//using xbytechat.api.Features.CTAFlowBuilder.Models;
//using xbytechat.api.Features.MessagesEngine.DTOs;
//using xbytechat.api.Features.MessagesEngine.Services;
//using xbytechat.api.Features.Tracking.Models;
//using xbytechat.api.Helpers;
//using xbytechat.api.WhatsAppSettings.DTOs;
//using xbytechat_api.WhatsAppSettings.Services;

//namespace xbytechat.api.Features.CTAFlowBuilder.Services
//{
//    public class CTAFlowService : ICTAFlowService
//    {
//        private readonly AppDbContext _context;
//        private readonly IMessageEngineService _messageEngineService;
//        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;

//        public CTAFlowService(AppDbContext context, IMessageEngineService messageEngineService,
//            IWhatsAppTemplateFetcherService templateFetcherService
//            )
//        {
//            _context = context;
//            _messageEngineService = messageEngineService;
//            _templateFetcherService = templateFetcherService;
//        }

//        public async Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy)
//        {
//            var flow = new CTAFlowConfig
//            {
//                Id = Guid.NewGuid(),
//                FlowName = dto.FlowName,
//                BusinessId = businessId,
//                CreatedAt = DateTime.UtcNow,
//                CreatedBy = createdBy,
//                IsPublished = dto.IsPublished
//            };

//            foreach (var stepDto in dto.Steps)
//            {
//                var step = new CTAFlowStep
//                {
//                    Id = Guid.NewGuid(),
//                    CTAFlowConfigId = flow.Id,
//                    TriggerButtonText = stepDto.TriggerButtonText,
//                    TriggerButtonType = stepDto.TriggerButtonType,
//                    TemplateToSend = stepDto.TemplateToSend,
//                    StepOrder = stepDto.StepOrder,
//                    ButtonLinks = stepDto.ButtonLinks?.Select(link => new FlowButtonLink
//                    {
//                        ButtonText = link.ButtonText,
//                        NextStepId = link.NextStepId
//                    }).ToList() ?? new List<FlowButtonLink>()
//                };

//                flow.Steps.Add(step);
//            }

//            _context.CTAFlowConfigs.Add(flow);
//            await _context.SaveChangesAsync();

//            return flow.Id;
//        }

//        public async Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId)
//        {
//            return await _context.CTAFlowConfigs
//                .Include(f => f.Steps.OrderBy(s => s.StepOrder))
//                .Where(f => f.BusinessId == businessId && f.IsActive && f.IsPublished)
//                .FirstOrDefaultAsync();
//        }

//        public async Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId)
//        {
//            return await _context.CTAFlowConfigs
//                .Include(f => f.Steps)
//                    .ThenInclude(s => s.ButtonLinks)
//                .Where(f => f.BusinessId == businessId && f.IsPublished == false)
//                .OrderByDescending(f => f.CreatedAt)
//                .FirstOrDefaultAsync();
//        }



//        public async Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId)
//        {
//            return await _context.CTAFlowSteps
//                .Where(s => s.CTAFlowConfigId == flowId)
//                .OrderBy(s => s.StepOrder)
//                .ToListAsync();
//        }

//        public async Task<CTAFlowStep?> MatchStepByButtonAsync(
//            Guid businessId,
//            string buttonText,
//            string buttonType,
//            string TemplateName,
//            Guid? campaignId = null)
//        {
//            var normalizedButtonText = buttonText?.Trim().ToLower() ?? "";
//            var normalizedButtonType = buttonType?.Trim().ToLower() ?? "";
//            var normalizedTemplateName = TemplateName?.Trim().ToLower() ?? "";

//            // 1Ô∏è‚É£ Try campaign-specific override
//            if (campaignId.HasValue)
//            {
//                var overrideStep = await _context.CampaignFlowOverrides
//                    .Where(o =>
//                        o.CampaignId == campaignId &&
//                        o.ButtonText.ToLower() == normalizedButtonText &&
//                        o.TemplateName.ToLower() == normalizedTemplateName)
//                    .FirstOrDefaultAsync();

//                if (overrideStep != null)
//                {
//                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();

//                    var matched = await _context.CTAFlowSteps
//                        .Include(s => s.Flow)
//                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);

//                    if (matched != null)
//                    {
//                        Log.Information("üîÅ Override matched: Template '{Template}' ‚Üí Step '{StepId}'", overrideStep.OverrideNextTemplate, matched.Id);
//                        return matched;
//                    }

//                    Log.Warning("‚ö†Ô∏è Override found for button '{Button}' but no matching step for template '{Template}'", normalizedButtonText, overrideStep.OverrideNextTemplate);
//                }

//                else
//                {
//                    Log.Information("üü° No campaign override found for button '{Button}' on template '{Template}'", normalizedButtonText, normalizedTemplateName);
//                }
//            }

//            // 2Ô∏è‚É£ Fallback to standard flow logic
//            var fallbackStep = await _context.CTAFlowSteps
//                .Include(s => s.Flow)
//                .Where(s =>
//                    s.Flow.BusinessId == businessId &&
//                    s.Flow.IsActive &&
//                    s.Flow.IsPublished &&
//                    s.TriggerButtonText.ToLower() == normalizedButtonText &&
//                    s.TriggerButtonType.ToLower() == normalizedButtonType)
//                .FirstOrDefaultAsync();

//            if (fallbackStep != null)
//            {
//                Log.Information("‚úÖ Fallback flow step matched: StepId = {StepId}, Flow = {FlowName}", fallbackStep.Id, fallbackStep.Flow?.FlowName);
//            }
//            else
//            {
//                Log.Warning("‚ùå No fallback step matched for button '{ButtonText}' of type '{ButtonType}' in BusinessId: {BusinessId}", normalizedButtonText, normalizedButtonType, businessId);
//            }

//            return fallbackStep;
//        }


//        public async Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user)
//        {
//            var flow = await _context.CTAFlowConfigs
//                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);

//            if (flow is null) return false;

//            // Optional validation: ensure it has at least 1 step, etc.
//            flow.IsPublished = true;
//            flow.UpdatedAt = DateTime.UtcNow;
//            await _context.SaveChangesAsync();
//            return true;
//        }

//        //public async Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy)
//        //{
//        //    try
//        //    {
//        //        // üî• 1. Remove existing published flow for this business
//        //        var existingFlows = await _context.CTAFlowConfigs
//        //            .Where(f => f.BusinessId == businessId && f.IsPublished)
//        //            .ToListAsync();

//        //        if (existingFlows.Any())
//        //        {
//        //            _context.CTAFlowConfigs.RemoveRange(existingFlows);
//        //        }

//        //        // üå± 2. Create new flow config
//        //        var flowConfig = new CTAFlowConfig
//        //        {
//        //            Id = Guid.NewGuid(),
//        //            BusinessId = businessId,
//        //            FlowName = "Published Flow - " + DateTime.UtcNow.ToString("yyyyMMdd-HHmm"),
//        //            IsPublished = true,
//        //            IsActive = true,
//        //            CreatedBy = createdBy,
//        //            CreatedAt = DateTime.UtcNow,
//        //            Steps = new List<CTAFlowStep>()
//        //        };

//        //        // üîÅ 3. Convert each step DTO to model
//        //        foreach (var stepDto in steps)
//        //        {
//        //            var step = new CTAFlowStep
//        //            {
//        //                Id = Guid.NewGuid(),
//        //                CTAFlowConfigId = flowConfig.Id,
//        //                TriggerButtonText = stepDto.TriggerButtonText,
//        //                TriggerButtonType = stepDto.TriggerButtonType,
//        //                TemplateToSend = stepDto.TemplateToSend,
//        //                StepOrder = stepDto.StepOrder,
//        //                ButtonLinks = stepDto.ButtonLinks.Select(bl => new FlowButtonLink
//        //                {
//        //                    Id = Guid.NewGuid(),
//        //                    ButtonText = bl.ButtonText,
//        //                    NextStepId = bl.NextStepId,
//        //                }).ToList()
//        //            };

//        //            flowConfig.Steps.Add(step);
//        //        }

//        //        // üíæ 4. Save to DB
//        //        await _context.CTAFlowConfigs.AddAsync(flowConfig);
//        //        await _context.SaveChangesAsync();

//        //        return ResponseResult.SuccessInfo("‚úÖ Flow published successfully.");
//        //    }
//        //    catch (Exception ex)
//        //    {
//        //        Log.Error(ex, "‚ùå Error while publishing CTA flow.");
//        //        return ResponseResult.ErrorInfo("‚ùå Could not publish flow.");
//        //    }
//        //}


//        private static int CountBodyPlaceholders(string? body)
//        {
//            if (string.IsNullOrWhiteSpace(body)) return 0;
//            // counts {{1}}, {{2}}, ... ; ignores any non-numeric moustaches
//            var m = System.Text.RegularExpressions.Regex.Matches(body, @"\{\{\s*\d+\s*\}\}");
//            return m.Count;
//        }
//        public async Task<ResponseResult> SaveVisualFlowAsync(
//    SaveVisualFlowDto dto,
//    Guid businessId,
//    string createdBy)
//        {
//            try
//            {
//                Log.Information("üß† SaveVisualFlow (create-only) | FlowName: {FlowName} | Biz: {BusinessId}",
//                    dto.FlowName, businessId);

//                // 0) Basic validation
//                if (dto.Nodes == null || !dto.Nodes.Any())
//                    return ResponseResult.ErrorInfo("‚ùå Cannot save an empty flow. Please add at least one step.");

//                var trimmedName = (dto.FlowName ?? "").Trim();
//                if (trimmedName.Length == 0)
//                    return ResponseResult.ErrorInfo("‚ùå Flow name is required.");

//                // 1) CREATE-ONLY: refuse duplicate name for this business
//                var nameExists = await _context.CTAFlowConfigs
//                    .AnyAsync(f => f.BusinessId == businessId && f.FlowName == trimmedName && f.IsActive);

//                if (nameExists)
//                {
//                    // IMPORTANT: this method is only for *new* flows.
//                    // If the user is editing an existing flow, the UI should call PUT /cta-flow/{id}.
//                    Log.Warning("‚ö†Ô∏è Duplicate flow name '{Name}' for business {Biz}.", trimmedName, businessId);
//                    return ResponseResult.ErrorInfo(
//                        "‚ùå A flow with this name already exists. Open that flow and edit it, or choose a different name.");
//                }

//                await using var tx = await _context.Database.BeginTransactionAsync();

//                // 2) Insert FlowConfig
//                var flow = new CTAFlowConfig
//                {
//                    Id = Guid.NewGuid(),
//                    BusinessId = businessId,
//                    FlowName = trimmedName,
//                    CreatedBy = createdBy,
//                    CreatedAt = DateTime.UtcNow,
//                    UpdatedAt = DateTime.UtcNow,
//                    IsActive = true,
//                    // You *can* allow creating as published, but most teams prefer create-as-draft:
//                    IsPublished = dto.IsPublished
//                };
//                _context.CTAFlowConfigs.Add(flow);

//                // 3) Build Steps
//                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);
//                var orderIndex = 0;

//                foreach (var node in dto.Nodes)
//                {
//                    if (string.IsNullOrWhiteSpace(node.Id)) continue;

//                    var step = new CTAFlowStep
//                    {
//                        Id = Guid.NewGuid(),
//                        CTAFlowConfigId = flow.Id,
//                        StepOrder = orderIndex++,
//                        TemplateToSend = node.TemplateName,
//                        TemplateType = node.TemplateType ?? "UNKNOWN",
//                        TriggerButtonText = node.TriggerButtonText ?? "",
//                        TriggerButtonType = node.TriggerButtonType ?? "cta",
//                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,
//                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,
//                        UseProfileName = node.UseProfileName,
//                        ProfileNameSlot = node.ProfileNameSlot,
//                        ButtonLinks = new List<FlowButtonLink>()
//                    };

//                    // Harden profile-name config per template type
//                    var isTextTemplate = string.Equals(step.TemplateType, "text_template", StringComparison.OrdinalIgnoreCase);
//                    if (!isTextTemplate)
//                    {
//                        step.UseProfileName = false;
//                        step.ProfileNameSlot = null;
//                    }
//                    else
//                    {
//                        if (!step.UseProfileName)
//                        {
//                            step.ProfileNameSlot = null;
//                        }
//                        else
//                        {
//                            if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)
//                                step.ProfileNameSlot = 1;
//                        }
//                    }

//                    stepMap[node.Id] = step;
//                    _context.CTAFlowSteps.Add(step);
//                }

//                // 4) Build Links (per-node buttons, matched by SourceHandle == button text)
//                var edges = dto.Edges ?? new List<FlowEdgeDto>();

//                foreach (var node in dto.Nodes)
//                {
//                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))
//                        continue;

//                    var outEdges = edges.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList();
//                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

//                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())
//                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)
//                        .ThenBy(b => b.Text ?? string.Empty)
//                        .ToList();

//                    short nextIdx = 0;

//                    foreach (var btn in orderedButtons)
//                    {
//                        var text = (btn.Text ?? string.Empty).Trim();
//                        if (string.IsNullOrEmpty(text)) continue;

//                        if (!seenTexts.Add(text))
//                        {
//                            Log.Warning("‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; first wins.", text, node.Id);
//                            continue;
//                        }

//                        var edge = outEdges.FirstOrDefault(e =>
//                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));
//                        if (edge == null) continue;

//                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep)) continue;

//                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;
//                        nextIdx = (short)(finalIndex + 1);

//                        var link = new FlowButtonLink
//                        {
//                            Id = Guid.NewGuid(),
//                            CTAFlowStepId = fromStep.Id,
//                            NextStepId = toStep.Id,
//                            ButtonText = text,
//                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? "QUICK_REPLY" : btn.Type,
//                            ButtonSubType = btn.SubType ?? string.Empty,
//                            ButtonValue = btn.Value ?? string.Empty,
//                            ButtonIndex = (short)finalIndex
//                        };

//                        _context.FlowButtonLinks.Add(link);
//                        fromStep.ButtonLinks.Add(link);

//                        // convenience: target step "entry trigger"
//                        toStep.TriggerButtonText = text;
//                        toStep.TriggerButtonType = (btn.Type ?? "QUICK_REPLY").ToLowerInvariant();
//                    }
//                }

//                await _context.SaveChangesAsync();
//                await tx.CommitAsync();

//                Log.Information("‚úÖ Flow created '{Flow}' | Steps: {Steps} | Links: {Links}",
//                    flow.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));

//                // Return new flowId so the FE can redirect/open it if desired
//                return ResponseResult.SuccessInfo("‚úÖ Flow created.", new { flowId = flow.Id });
//            }
//            catch (Exception ex)
//            {
//                Log.Error(ex, "‚ùå Exception while saving (create) flow");
//                return ResponseResult.ErrorInfo("‚ùå Internal error while saving flow.");
//            }
//        }

//        //public async Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy)
//        //{
//        //    try
//        //    {
//        //        Log.Information("üß† SaveVisualFlow started | FlowName: {FlowName} | BusinessId: {BusinessId}", dto.FlowName, businessId);

//        //        if (dto.Nodes == null || !dto.Nodes.Any())
//        //        {
//        //            Log.Warning("‚ùå No nodes found in flow. Aborting save.");
//        //            return ResponseResult.ErrorInfo("‚ùå Cannot save an empty flow. Please add at least one step.");
//        //        }

//        //        // 1) Upsert FlowConfig
//        //        var flow = await _context.CTAFlowConfigs
//        //            .FirstOrDefaultAsync(f => f.FlowName == dto.FlowName && f.BusinessId == businessId);

//        //        if (flow == null)
//        //        {
//        //            flow = new CTAFlowConfig
//        //            {
//        //                Id = Guid.NewGuid(),
//        //                BusinessId = businessId,
//        //                FlowName = dto.FlowName,
//        //                CreatedBy = createdBy,
//        //                CreatedAt = DateTime.UtcNow,
//        //                UpdatedAt = DateTime.UtcNow,
//        //                IsActive = true,
//        //                IsPublished = dto.IsPublished
//        //            };
//        //            _context.CTAFlowConfigs.Add(flow);
//        //            Log.Information("‚úÖ New FlowConfig created with ID: {Id}", flow.Id);
//        //        }
//        //        else
//        //        {
//        //            // wipe old steps+links for a clean replace
//        //            var oldSteps = await _context.CTAFlowSteps
//        //                .Where(s => s.CTAFlowConfigId == flow.Id)
//        //                .Include(s => s.ButtonLinks)
//        //                .ToListAsync();

//        //            foreach (var step in oldSteps)
//        //                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);

//        //            _context.CTAFlowSteps.RemoveRange(oldSteps);

//        //            flow.IsPublished = dto.IsPublished;
//        //            flow.UpdatedAt = DateTime.UtcNow;
//        //        }

//        //        // 2) Build Steps (map by incoming node.Id string)
//        //        var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);

//        //        foreach (var (node, index) in dto.Nodes.Select((n, i) => (n, i)))
//        //        {
//        //            if (string.IsNullOrWhiteSpace(node.Id))
//        //                continue;

//        //            var step = new CTAFlowStep
//        //            {
//        //                Id = Guid.NewGuid(),
//        //                CTAFlowConfigId = flow.Id,
//        //                StepOrder = index,
//        //                TemplateToSend = node.TemplateName,
//        //                TemplateType = node.TemplateType ?? "UNKNOWN",
//        //                TriggerButtonText = node.TriggerButtonText ?? "",
//        //                TriggerButtonType = node.TriggerButtonType ?? "cta",
//        //                PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,
//        //                PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,
//        //                UseProfileName = node.UseProfileName,
//        //                ProfileNameSlot = node.ProfileNameSlot,
//        //                //ProfileNameSlot = node.ProfileNameSlot ?? 1,
//        //                ButtonLinks = new List<FlowButtonLink>()
//        //            };

//        //            // ‚úÖ Harden profile-name config per step
//        //            var isTextTemplate = string.Equals(step.TemplateType, "text_template", StringComparison.OrdinalIgnoreCase);
//        //            if (!isTextTemplate)
//        //            {
//        //                // Only text templates support body placeholders; disable on others
//        //                step.UseProfileName = false;
//        //                step.ProfileNameSlot = null;
//        //            }
//        //            //else if (step.UseProfileName)
//        //            //{
//        //            //    // Clamp to minimum valid slot
//        //            //    if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)
//        //            //        step.ProfileNameSlot = 1;
//        //            //}
//        //            else
//        //            {
//        //                // Text template:
//        //                if (!step.UseProfileName)
//        //                {
//        //                    // Toggle OFF ‚Üí always null the slot
//        //                    step.ProfileNameSlot = null;
//        //                }
//        //                else
//        //                {
//        //                    // Toggle ON ‚Üí clamp to minimum valid
//        //                    if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)
//        //                        step.ProfileNameSlot = 1;
//        //                    // (Optional) upper clamp if you want: e.g., step.ProfileNameSlot = Math.Min(step.ProfileNameSlot.Value, 50);
//        //                }
//        //            }
//        //            stepMap[node.Id] = step;
//        //            _context.CTAFlowSteps.Add(step);
//        //        }

//        //        // 3) Build Links PER NODE using buttons order (with Index), not per-edge blindly
//        //        foreach (var node in dto.Nodes)
//        //        {
//        //            if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))
//        //                continue;

//        //            // outgoing edges from this node
//        //            var outEdges = dto.Edges?.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList()
//        //                           ?? new List<FlowEdgeDto>();

//        //            // dedupe by button text to avoid ambiguous routing
//        //            var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

//        //            // stable ordering: by provided Index (0..N), then by Text
//        //            var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())
//        //                .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)
//        //                .ThenBy(b => b.Text ?? string.Empty)
//        //                .ToList();

//        //            short nextIdx = 0;

//        //            foreach (var btn in orderedButtons)
//        //            {
//        //                var text = (btn.Text ?? string.Empty).Trim();
//        //                if (string.IsNullOrEmpty(text))
//        //                    continue;

//        //                if (!seenTexts.Add(text))
//        //                {
//        //                    Log.Warning("‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; keeping first, skipping duplicates.", text, node.Id);
//        //                    continue;
//        //                }

//        //                // match edge by SourceHandle == button text (how ReactFlow wires handles)
//        //                var edge = outEdges.FirstOrDefault(e =>
//        //                    string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));
//        //                if (edge == null)
//        //                {
//        //                    // no wire from this button ‚Üí skip link creation but keep button metadata in UI on reload
//        //                    continue;
//        //                }

//        //                if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep))
//        //                    continue;

//        //                // final index: prefer incoming payload Index; else fallback to a sequential counter
//        //                var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;
//        //                nextIdx = (short)(finalIndex + 1);

//        //                var link = new FlowButtonLink
//        //                {
//        //                    Id = Guid.NewGuid(),
//        //                    CTAFlowStepId = fromStep.Id,
//        //                    NextStepId = toStep.Id,
//        //                    ButtonText = text,
//        //                    ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? "QUICK_REPLY" : btn.Type,
//        //                    ButtonSubType = btn.SubType ?? string.Empty,
//        //                    ButtonValue = btn.Value ?? string.Empty,
//        //                    ButtonIndex = (short)finalIndex // üîë persist the index
//        //                };

//        //                _context.FlowButtonLinks.Add(link);
//        //                fromStep.ButtonLinks.Add(link);

//        //                // propagate trigger info on the target step for convenience
//        //                toStep.TriggerButtonText = text;
//        //                toStep.TriggerButtonType = (btn.Type ?? "QUICK_REPLY").ToLowerInvariant();
//        //            }
//        //        }

//        //        await _context.SaveChangesAsync();

//        //        Log.Information("‚úÖ Flow '{Flow}' saved | Steps: {StepCount} | Links: {LinkCount}",
//        //            dto.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));

//        //        return ResponseResult.SuccessInfo("‚úÖ Flow saved successfully.");
//        //    }
//        //    catch (Exception ex)
//        //    {
//        //        Log.Error(ex, "‚ùå Exception while saving flow");
//        //        return ResponseResult.ErrorInfo("‚ùå Internal error while saving flow.");
//        //    }
//        //}


//        //public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId)
//        //{
//        //    var flow = await _context.CTAFlowConfigs
//        //        .Include(c => c.Steps)
//        //            .ThenInclude(s => s.ButtonLinks)
//        //        .FirstOrDefaultAsync(c =>
//        //            c.Id == flowId &&
//        //            c.BusinessId == businessId &&   // üëà tenant scoping
//        //            c.IsActive);

//        //    if (flow == null) return null;

//        //    // ---- Pre-fetch unique template names (defensive) ----
//        //    var templateMap = new Dictionary<string, TemplateMetadataDto>(StringComparer.OrdinalIgnoreCase);
//        //    foreach (var name in flow.Steps
//        //                             .Select(s => s.TemplateToSend)
//        //                             .Where(n => !string.IsNullOrWhiteSpace(n))
//        //                             .Distinct(StringComparer.OrdinalIgnoreCase))
//        //    {
//        //        try
//        //        {
//        //            var tpl = await _templateFetcherService.GetTemplateByNameAsync(
//        //                businessId, name!, includeButtons: true);
//        //            if (tpl != null) templateMap[name!] = tpl;
//        //        }
//        //        catch (Exception ex)
//        //        {
//        //            Log.Warning(ex, "‚ö†Ô∏è Failed to fetch template from Meta for {Template}", name);
//        //        }
//        //    }

//        //    // ---- Nodes ----
//        //    var nodes = flow.Steps.Select(step =>
//        //    {
//        //        templateMap.TryGetValue(step.TemplateToSend ?? "", out var template);

//        //        IEnumerable<FlowButtonLink> links =
//        //            step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>();

//        //        var dbButtons = links.Select(link => new LinkButtonDto
//        //        {
//        //            Text = link.ButtonText,
//        //            Type = link.ButtonType,
//        //            SubType = link.ButtonSubType,
//        //            Value = link.ButtonValue,
//        //            TargetNodeId = link.NextStepId?.ToString() // null-safe
//        //        });

//        //        var templateButtons = (template?.ButtonParams ?? new List<ButtonMetadataDto>())
//        //            .Where(btn => !links.Any(bl =>
//        //                        string.Equals(bl.ButtonText, btn.Text, StringComparison.OrdinalIgnoreCase)))
//        //            .Select(btn => new LinkButtonDto
//        //            {
//        //                Text = btn.Text,
//        //                TargetNodeId = null
//        //            });

//        //        return new FlowNodeDto
//        //        {
//        //            Id = step.Id.ToString(),
//        //            TemplateName = step.TemplateToSend,
//        //            TemplateType = step.TemplateType,
//        //            MessageBody = template?.Body ?? "Message body preview...",
//        //            TriggerButtonText = step.TriggerButtonText,
//        //            TriggerButtonType = step.TriggerButtonType,
//        //            PositionX = step.PositionX ?? 100,
//        //            PositionY = step.PositionY ?? 100,

//        //            // Conditional logic
//        //            RequiredTag = step.RequiredTag,
//        //            RequiredSource = step.RequiredSource,

//        //            UseProfileName = step.UseProfileName,
//        //            ProfileNameSlot = step.ProfileNameSlot,

//        //            Buttons = dbButtons.Concat(templateButtons).ToList()
//        //        };
//        //    }).ToList();

//        //    // ---- Edges (skip links without a target) ----
//        //    var edges = flow.Steps
//        //        .SelectMany(step =>
//        //            (step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>())
//        //            .Where(link => link.NextStepId.HasValue)
//        //            .Select(link => new FlowEdgeDto
//        //            {
//        //                FromNodeId = step.Id.ToString(),
//        //                ToNodeId = link.NextStepId!.Value.ToString(),
//        //                SourceHandle = link.ButtonText
//        //            }))
//        //        .ToList();

//        //    return new SaveVisualFlowDto
//        //    {
//        //        FlowName = flow.FlowName,
//        //        IsPublished = flow.IsPublished,
//        //        Nodes = nodes,
//        //        Edges = edges
//        //    };
//        //}

//        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId)
//        {
//            var flow = await _context.CTAFlowConfigs
//                .Include(c => c.Steps)
//                    .ThenInclude(s => s.ButtonLinks)
//                .FirstOrDefaultAsync(c => c.Id == flowId && c.BusinessId == businessId && c.IsActive);

//            if (flow == null) return null;

//            // 1) Prefetch template metadata for all unique names (defensive, fast)
//            var templateMap = new Dictionary<string, TemplateMetadataDto>(StringComparer.OrdinalIgnoreCase);
//            var uniqueNames = flow.Steps
//                .Select(s => s.TemplateToSend)
//                .Where(n => !string.IsNullOrWhiteSpace(n))
//                .Distinct(StringComparer.OrdinalIgnoreCase)
//                .ToList();

//            foreach (var name in uniqueNames)
//            {
//                try
//                {
//                    var tpl = await _templateFetcherService.GetTemplateByNameAsync(
//                        businessId, name!, includeButtons: true);
//                    if (tpl != null) templateMap[name!] = tpl;
//                }
//                catch (Exception ex)
//                {
//                    Log.Warning(ex, "‚ö†Ô∏è Failed to fetch template from provider for {Template}", name);
//                }
//            }

//            // 2) Build nodes with real body + merged buttons (DB links first, then any unlinked template buttons)
//            var nodes = flow.Steps.Select(step =>
//            {
//                templateMap.TryGetValue(step.TemplateToSend ?? "", out var tpl);

//                var dbLinks = step.ButtonLinks ?? new List<FlowButtonLink>();

//                var dbButtons = dbLinks
//                    .OrderBy(b => b.ButtonIndex)
//                    .Select(link => new LinkButtonDto
//                    {
//                        Text = link.ButtonText,
//                        Type = link.ButtonType,
//                        SubType = link.ButtonSubType,
//                        Value = link.ButtonValue,
//                        Index = link.ButtonIndex,
//                        TargetNodeId = link.NextStepId?.ToString()
//                    });

//                var templateButtons = (tpl?.ButtonParams ?? new List<ButtonMetadataDto>())
//                    .Where(btn => !dbLinks.Any(bl => string.Equals(bl.ButtonText, btn.Text, StringComparison.OrdinalIgnoreCase)))
//                    .Select(btn => new LinkButtonDto
//                    {
//                        Text = btn.Text,
//                        // no TargetNodeId: not wired
//                    });

//                return new FlowNodeDto
//                {
//                    Id = step.Id.ToString(),
//                    TemplateName = step.TemplateToSend,
//                    TemplateType = step.TemplateType,
//                    MessageBody = string.IsNullOrWhiteSpace(tpl?.Body) ? "‚Äî no body found ‚Äî" : tpl!.Body, // ‚Üê REAL BODY
//                    TriggerButtonText = step.TriggerButtonText,
//                    TriggerButtonType = step.TriggerButtonType,
//                    PositionX = step.PositionX ?? 100,
//                    PositionY = step.PositionY ?? 100,
//                    RequiredTag = step.RequiredTag,
//                    RequiredSource = step.RequiredSource,
//                    UseProfileName = step.UseProfileName,
//                    ProfileNameSlot = step.ProfileNameSlot,
//                    Buttons = dbButtons.Concat(templateButtons).ToList()
//                };
//            }).ToList();

//            // 3) Build edges
//            var edges = flow.Steps
//                .SelectMany(step => (step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>())
//                    .Where(l => l.NextStepId.HasValue)
//                    .Select(l => new FlowEdgeDto
//                    {
//                        FromNodeId = step.Id.ToString(),
//                        ToNodeId = l.NextStepId!.Value.ToString(),
//                        SourceHandle = l.ButtonText
//                    }))
//                .ToList();

//            return new SaveVisualFlowDto
//            {
//                FlowName = flow.FlowName,
//                IsPublished = flow.IsPublished,
//                Nodes = nodes,
//                Edges = edges
//            };
//        }

//        public async Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy)
//        {
//            // Load flow with children so we can remove in the right order
//            var flow = await _context.CTAFlowConfigs
//                .Include(f => f.Steps)
//                    .ThenInclude(s => s.ButtonLinks)
//                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);

//            if (flow == null)
//                return ResponseResult.ErrorInfo("‚ùå Flow not found or does not belong to you.");

//            // Is this flow used by any active campaign?
//            var inUseQuery = _context.Campaigns
//                .Where(c => c.BusinessId == businessId &&
//                            !c.IsDeleted &&
//                            c.CTAFlowConfigId == flowId);

//            var inUseCount = await inUseQuery.CountAsync();
//            if (inUseCount > 0)
//            {
//                // Optional: show a few campaign names in the error for the UI
//                var sample = await inUseQuery
//                    .OrderByDescending(c => c.CreatedAt)
//                    .Select(c => new { c.Id, c.Name, c.Status })
//                    .Take(5)
//                    .ToListAsync();

//                Log.Warning("‚ùå Delete flow blocked. Flow {FlowId} is used by {Count} campaigns: {@Sample}",
//                    flowId, inUseCount, sample);

//                return ResponseResult.ErrorInfo(
//                    $"‚ùå Cannot delete. This flow is attached to {inUseCount} campaign(s). " +
//                    $"Delete those campaigns first."
//                );
//            }

//            // Safe to remove: delete children first, then the flow
//            foreach (var step in flow.Steps)
//                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);

//            _context.CTAFlowSteps.RemoveRange(flow.Steps);
//            _context.CTAFlowConfigs.Remove(flow);

//            await _context.SaveChangesAsync();
//            return ResponseResult.SuccessInfo("‚úÖ Flow deleted.");
//        }


//        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)
//        {
//            return await _context.CTAFlowConfigs
//                .Where(f => f.BusinessId == businessId && f.IsPublished)
//                .OrderByDescending(f => f.CreatedAt)
//                .Select(f => new VisualFlowSummaryDto
//                {
//                    Id = f.Id,
//                    FlowName = f.FlowName,
//                    IsPublished = f.IsPublished,
//                    CreatedAt = f.CreatedAt
//                })
//                .ToListAsync();
//        }

//        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)
//        {
//            return await _context.CTAFlowConfigs
//                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)
//                .OrderByDescending(f => f.CreatedAt)
//                .Select(f => new VisualFlowSummaryDto
//                {
//                    Id = f.Id,
//                    FlowName = f.FlowName,
//                    CreatedAt = f.CreatedAt,
//                    IsPublished = f.IsPublished
//                })
//                .ToListAsync();
//        }

//        public async Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber)
//        {
//            // Log.Information("üöÄ Executing follow-up for BusinessId: {BusinessId}, CurrentStepId: {StepId}", businessId);
//            if (currentStep == null)
//            {
//                Log.Warning("‚ö†Ô∏è Cannot execute follow-up. Current step is null.");
//                return ResponseResult.ErrorInfo("Current step not found.");
//            }

//            // üß† Step: Look through all button links for a valid NextStepId
//            var nextLink = currentStep.ButtonLinks.FirstOrDefault(link => link.NextStepId != null);

//            if (nextLink == null)
//            {
//                Log.Information("‚ÑπÔ∏è No NextStepId defined in any ButtonLinks for StepId: {StepId}", currentStep.Id);
//                return ResponseResult.SuccessInfo("No follow-up step to execute.");
//            }

//            // üîç Fetch the next step using new logic (via CTAFlowConfig + Steps)
//            // 1Ô∏è‚É£ Try to resolve with smart condition check
//            var followUpStep = await GetChainedStepAsync(businessId, nextLink.NextStepId, null, null);

//            if (followUpStep == null)
//            {
//                Log.Warning("‚ùå Follow-up step skipped due to condition mismatch ‚Üí StepId: {StepId}", nextLink.NextStepId);

//                // 2Ô∏è‚É£ Optional fallback: Try same flow ‚Üí Any step without conditions
//                var flow = await _context.CTAFlowConfigs
//                    .Include(f => f.Steps)
//                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.IsPublished);

//                followUpStep = flow?.Steps
//                    .Where(s => string.IsNullOrEmpty(s.RequiredTag) && string.IsNullOrEmpty(s.RequiredSource))
//                    .OrderBy(s => s.StepOrder)
//                    .FirstOrDefault();

//                if (followUpStep != null)
//                {
//                    Log.Information("üîÅ Fallback step selected ‚Üí StepId: {StepId}, Template: {Template}",
//                        followUpStep.Id, followUpStep.TemplateToSend);
//                }
//                else
//                {
//                    Log.Warning("üö´ No suitable fallback found in flow. Skipping follow-up.");
//                    return ResponseResult.SuccessInfo("No matching follow-up step based on user context.");
//                }
//            }


//            // üì® Send the follow-up message using the TemplateToSend field
//            try
//            {
//                var template = followUpStep.TemplateToSend;

//                Log.Information("üì§ Sending follow-up message ‚Üí Template: {Template}, To: {Recipient}", template, recipientNumber);

//                // üß™ Replace this with actual message engine call
//                var sendDto = new SimpleTemplateMessageDto
//                {
//                    RecipientNumber = recipientNumber,
//                    TemplateName = template,
//                    TemplateParameters = new List<string>() // Add dynamic params later if needed
//                };

//                var sendResult = await _messageEngineService
//     .SendTemplateMessageSimpleAsync(businessId, sendDto);

//                if (!sendResult.Success)
//                {
//                    Log.Warning("‚ùå Follow-up message send failed ‚Üí {Template}", template);
//                    return ResponseResult.ErrorInfo("Follow-up send failed.", sendResult.ErrorMessage);
//                }


//                return ResponseResult.SuccessInfo($"Follow-up message sent using template: {template}", null, sendResult.RawResponse);

//            }
//            catch (Exception ex)
//            {
//                Log.Error(ex, "‚ùå Error sending follow-up message for StepId: {StepId}", followUpStep.Id);
//                return ResponseResult.ErrorInfo("Failed to send follow-up.");
//            }
//        }
//        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)
//        {
//            return GetChainedStepAsync(businessId, nextStepId, null, null); // Forward to full logic
//        }

//        // ‚úÖ Extended logic with condition check (Tag + Source)
//        public async Task<CTAFlowStep?> GetChainedStepAsync(
//            Guid businessId,
//            Guid? nextStepId,
//            TrackingLog? trackingLog = null,
//            Contact? contact = null)
//        {
//            if (nextStepId == null)
//            {
//                Log.Information("‚ÑπÔ∏è No NextStepId provided ‚Äî skipping follow-up.");
//                return null;
//            }

//            try
//            {
//                var flow = await _context.CTAFlowConfigs
//                    .Include(f => f.Steps)
//                    .FirstOrDefaultAsync(f =>
//                        f.BusinessId == businessId &&
//                        f.Steps.Any(s => s.Id == nextStepId));

//                if (flow == null)
//                {
//                    Log.Warning("‚ö†Ô∏è No flow found containing NextStepId: {NextStepId} for business: {BusinessId}", nextStepId, businessId);
//                    return null;
//                }

//                var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);

//                if (followUpStep == null)
//                {
//                    Log.Warning("‚ùå Step matched in flow but not found in step list: {NextStepId}", nextStepId);
//                    return null;
//                }

//                // ‚úÖ Check RequiredTag / Source match
//                if (trackingLog != null)
//                {
//                    var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);

//                    if (!isMatch)
//                    {
//                        Log.Information("üö´ Step {StepId} skipped due to condition mismatch [Tag: {Tag}, Source: {Source}]",
//                            followUpStep.Id, followUpStep.RequiredTag, followUpStep.RequiredSource);
//                        return null;
//                    }
//                }

//                Log.Information("‚úÖ Follow-up step found and matched ‚Üí StepId: {StepId}, Template: {Template}",
//                    followUpStep.Id, followUpStep.TemplateToSend);

//                return followUpStep;
//            }
//            catch (Exception ex)
//            {
//                Log.Error(ex, "‚ùå Exception while fetching chained step for NextStepId: {NextStepId}", nextStepId);
//                throw;
//            }
//        }

//        // ‚úÖ Optional helper for resolving from TrackingLogId
//        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(
//            Guid businessId,
//            Guid? nextStepId,
//            Guid? trackingLogId)
//        {
//            var log = await _context.TrackingLogs
//                .Include(l => l.Contact)
//                    .ThenInclude(c => c.ContactTags)
//                        .ThenInclude(ct => ct.Tag)
//                .FirstOrDefaultAsync(l => l.Id == trackingLogId);

//            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);
//        }


//        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)
//        {
//            try
//            {
//                Log.Information("üö¶ Executing Visual Flow ‚Üí StepId: {StepId} | TrackingLogId: {TrackingLogId}", startStepId, trackingLogId);

//                // ‚îÄ‚îÄ local helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//                static string ResolveGreeting(string? profileName, string? contactName)
//                {
//                    var s = (profileName ?? contactName)?.Trim();
//                    return string.IsNullOrEmpty(s) ? "there" : s;
//                }
//                static void EnsureArgsLength(List<string> args, int slot1Based)
//                {
//                    while (args.Count < slot1Based) args.Add(string.Empty);
//                }
//                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

//                var log = await _context.TrackingLogs
//                    .Include(l => l.Contact)
//                        .ThenInclude(c => c.ContactTags)
//                            .ThenInclude(ct => ct.Tag)
//                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);

//                if (log == null)
//                {
//                    Log.Warning("‚ùå TrackingLog not found for ID: {TrackingLogId}", trackingLogId);
//                    return ResponseResult.ErrorInfo("Tracking log not found.");
//                }

//                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);

//                if (step == null)
//                {
//                    Log.Warning("‚ùå No flow step matched or conditions failed ‚Üí StepId: {StepId}", startStepId);
//                    return ResponseResult.ErrorInfo("Step conditions not satisfied.");
//                }

//                // ‚úÖ Build profile-aware args for this step (used for text templates)
//                var args = new List<string>();
//                if (step.UseProfileName && step.ProfileNameSlot is int slot && slot >= 1)
//                {
//                    // Prefer the already-loaded contact on the tracking log; fallback to DB lookup
//                    var contact = log.Contact ?? await _context.Contacts
//                        .AsNoTracking()
//                        .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == (log.ContactPhone ?? ""));

//                    var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);
//                    EnsureArgsLength(args, slot);
//                    args[slot - 1] = greet; // 1-based slot -> 0-based index
//                }

//                ResponseResult sendResult;

//                // This switch block remains unchanged, except we pass args for text templates
//                switch (step.TemplateType?.ToLower())
//                {
//                    case "image_template":
//                        var imageDto = new ImageTemplateMessageDto
//                        {
//                            BusinessId = businessId,
//                            RecipientNumber = log.ContactPhone ?? "",
//                            TemplateName = step.TemplateToSend,
//                            LanguageCode = "en_US"
//                            // If your image templates support body params, you can also pass args here.
//                        };
//                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);
//                        break;

//                    case "text_template":
//                    default:
//                        var textDto = new SimpleTemplateMessageDto
//                        {
//                            RecipientNumber = log.ContactPhone ?? "",
//                            TemplateName = step.TemplateToSend,
//                            TemplateParameters = args // ‚úÖ inject ProfileName here when configured
//                        };
//                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);
//                        break;
//                }

//                // ‚úÖ 2. SAVE the new ID to the log
//                var executionLog = new FlowExecutionLog
//                {
//                    Id = Guid.NewGuid(),
//                    BusinessId = businessId,
//                    StepId = step.Id,
//                    FlowId = step.CTAFlowConfigId,
//                    CampaignSendLogId = campaignSendLogId, // <-- THE NEW VALUE IS SAVED HERE
//                    TrackingLogId = trackingLogId,
//                    ContactPhone = log.ContactPhone,
//                    TriggeredByButton = step.TriggerButtonText,
//                    TemplateName = step.TemplateToSend,
//                    TemplateType = step.TemplateType,
//                    Success = sendResult.Success,
//                    ErrorMessage = sendResult.ErrorMessage,
//                    RawResponse = sendResult.RawResponse,
//                    ExecutedAt = DateTime.UtcNow
//                };

//                _context.FlowExecutionLogs.Add(executionLog);
//                await _context.SaveChangesAsync();

//                if (sendResult.Success)
//                {
//                    Log.Information("‚úÖ Flow step executed ‚Üí Template: {Template} sent to {To}", step.TemplateToSend, log.ContactPhone);
//                }
//                else
//                {
//                    Log.Warning("‚ùå Failed to send template from flow ‚Üí {Reason}", sendResult.ErrorMessage);
//                }

//                return ResponseResult.SuccessInfo($"Flow step executed. Sent: {sendResult.Success}", null, sendResult.RawResponse);
//            }
//            catch (Exception ex)
//            {
//                Log.Error(ex, "‚ùå Exception during ExecuteVisualFlowAsync()");
//                return ResponseResult.ErrorInfo("Internal error during flow execution.");
//            }
//        }

//        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)
//        {
//            return await _context.FlowButtonLinks
//                 .Where(l => l.CTAFlowStepId == sourceStepId
//              && l.NextStepId != null
//              && l.Step.CTAFlowConfigId == flowId
//              && l.ButtonIndex == buttonIndex)
//                .SingleOrDefaultAsync();

//        }
//        //public async Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId)
//        //{
//        //    return await _context.Campaigns
//        //        .Where(c => c.BusinessId == businessId
//        //                    && !c.IsDeleted
//        //                    && c.CTAFlowConfigId == flowId)
//        //        .OrderByDescending(c => c.CreatedAt)
//        //        .Select(c => new AttachedCampaignDto(c.Id, c.Name, c.Status, c.ScheduledAt))
//        //        .ToListAsync();
//        //}

//        public async Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId)
//        {
//            try
//            {
//                // Load the flow + steps + button links (no tracking for view)
//                var flow = await _context.CTAFlowConfigs
//                    .AsNoTracking()
//                    .Where(f => f.IsActive && f.BusinessId == businessId && f.Id == flowId)
//                    .Select(f => new
//                    {
//                        f.Id,
//                        f.FlowName,
//                        f.IsPublished,
//                        Steps = _context.CTAFlowSteps
//                            .Where(s => s.CTAFlowConfigId == f.Id)
//                            .OrderBy(s => s.StepOrder)
//                            .Select(s => new
//                            {
//                                s.Id,
//                                s.StepOrder,
//                                s.TemplateToSend,
//                                s.TemplateType,
//                                s.TriggerButtonText,
//                                s.TriggerButtonType,
//                                s.PositionX,
//                                s.PositionY,
//                                s.UseProfileName,
//                                s.ProfileNameSlot,
//                                Buttons = _context.FlowButtonLinks
//                                    .Where(b => b.CTAFlowStepId == s.Id)
//                                    .OrderBy(b => b.ButtonIndex)
//                                    .Select(b => new
//                                    {
//                                        b.ButtonText,
//                                        b.ButtonType,
//                                        b.ButtonSubType,
//                                        b.ButtonValue,
//                                        b.ButtonIndex,
//                                        b.NextStepId
//                                    })
//                                    .ToList()
//                            })
//                            .ToList()
//                    })
//                    .FirstOrDefaultAsync();

//                if (flow == null)
//                {
//                    return ResponseResult.ErrorInfo("Flow not found.");
//                }

//                // Map to FE shape
//                var nodes = flow.Steps.Select(s => new
//                {
//                    id = s.Id.ToString(), // node id = step id
//                    positionX = s.PositionX ?? 0,
//                    positionY = s.PositionY ?? 0,
//                    templateName = s.TemplateToSend,
//                    templateType = s.TemplateType,
//                    triggerButtonText = s.TriggerButtonText ?? string.Empty,
//                    triggerButtonType = s.TriggerButtonType ?? "cta",
//                    requiredTag = string.Empty,       // not used in your model; keep empty
//                    requiredSource = string.Empty,    // not used; keep empty
//                    useProfileName = s.UseProfileName,
//                    profileNameSlot = (s.ProfileNameSlot.HasValue && s.ProfileNameSlot.Value > 0) ? s.ProfileNameSlot.Value : 1,
//                    buttons = s.Buttons.Select(b => new
//                    {
//                        text = b.ButtonText,
//                        type = b.ButtonType,
//                        subType = b.ButtonSubType,
//                        value = b.ButtonValue,
//                        targetNodeId = b.NextStepId == Guid.Empty ? null : b.NextStepId.ToString(),
//                        index = (int)(b.ButtonIndex)
//                    })
//                });

//                // Build edges from button links
//                var edges = flow.Steps
//                    .SelectMany(s => s.Buttons
//                        .Where(b => b.NextStepId != Guid.Empty)
//                        .Select(b => new
//                        {
//                            fromNodeId = s.Id.ToString(),
//                            toNodeId = b.NextStepId.ToString(),
//                            sourceHandle = b.ButtonText // label/handle = button text
//                        }));

//                var payload = new
//                {
//                    flowName = flow.FlowName,
//                    isPublished = flow.IsPublished,
//                    nodes,
//                    edges
//                };

//                return ResponseResult.SuccessInfo("Flow loaded.", payload);
//            }
//            catch (Exception ex)
//            {
//                Log.Error(ex, "‚ùå Exception while loading visual flow {FlowId}", flowId);
//                return ResponseResult.ErrorInfo("Internal error while loading flow.");
//            }
//        }
//        public async Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId)
//        {
//            // base query: attached, non-deleted
//            var q = _context.Campaigns
//                .Where(c => c.BusinessId == businessId && !c.IsDeleted && c.CTAFlowConfigId == flowId);

//            // earliest send per campaign
//            var firstSends = await _context.CampaignSendLogs
//                .Where(s => s.BusinessId == businessId && s.CampaignId != Guid.Empty)
//                .GroupBy(s => s.CampaignId)
//                .Select(g => new { CampaignId = g.Key, FirstSentAt = (DateTime?)g.Min(s => s.CreatedAt) })
//                .ToListAsync();

//            var firstSendMap = firstSends.ToDictionary(x => x.CampaignId, x => x.FirstSentAt);

//            var list = await q
//                .OrderByDescending(c => c.CreatedAt)
//                .Select(c => new
//                {
//                    c.Id,
//                    c.Name,
//                    c.Status,
//                    c.ScheduledAt,
//                    c.CreatedAt,
//                    c.CreatedBy
//                })
//                .ToListAsync();

//            return list.Select(x => new AttachedCampaignDto(
//                x.Id,
//                x.Name,
//                x.Status,
//                x.ScheduledAt,
//                x.CreatedAt,
//                x.CreatedBy,
//                firstSendMap.TryGetValue(x.Id, out var ts) ? ts : null
//            )).ToList();
//        }
//        public async Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId)
//        {
//            // Load flow + children
//            var flow = await _context.CTAFlowConfigs
//                .Include(f => f.Steps)
//                    .ThenInclude(s => s.ButtonLinks)
//                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);

//            if (flow is null) return false;

//            // Guard: any active campaign still attached?
//            var attached = await _context.Campaigns
//                .Where(c => c.BusinessId == businessId
//                            && !c.IsDeleted
//                            && c.CTAFlowConfigId == flowId)
//                .Select(c => c.Id)
//                .Take(1)
//                .AnyAsync();

//            if (attached) return false;

//            // Hard delete (children first; FK-safe)
//            foreach (var step in flow.Steps)
//                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);

//            _context.CTAFlowSteps.RemoveRange(flow.Steps);
//            _context.CTAFlowConfigs.Remove(flow);

//            await _context.SaveChangesAsync();
//            return true;
//        }

//        //public async Task<FlowUpdateResult> UpdateVisualFlowAsync(Guid flowId, SaveVisualFlowDto dto, Guid businessId, string user)
//        //{
//        //    var flow = await _context.CTAFlowConfigs
//        //        .Include(f => f.Steps)
//        //            .ThenInclude(s => s.ButtonLinks)
//        //        .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);

//        //    if (flow is null)
//        //        return new FlowUpdateResult { Status = "notFound", Message = "Flow not found." };

//        //    var attached = await _context.Campaigns
//        //        .Where(c => !c.IsDeleted && c.BusinessId == businessId && c.CTAFlowConfigId == flowId)
//        //        .Select(c => new { c.Id, c.Name, c.Status, c.ScheduledAt, c.CreatedAt, c.CreatedBy })
//        //        .ToListAsync();

//        //    if (flow.IsPublished && attached.Count > 0)
//        //    {
//        //        return new FlowUpdateResult
//        //        {
//        //            Status = "requiresFork",
//        //            Message = "This flow is published and attached to campaign(s). Create a new draft version.",
//        //            Campaigns = attached
//        //        };
//        //    }

//        //    var needsRepublish = flow.IsPublished && attached.Count == 0;
//        //    if (needsRepublish) flow.IsPublished = false; // flip to draft during edit

//        //    // wipe & rebuild steps (simplest and consistent with your builder payload)
//        //    _context.FlowButtonLinks.RemoveRange(flow.Steps.SelectMany(s => s.ButtonLinks));
//        //    _context.CTAFlowSteps.RemoveRange(flow.Steps);
//        //    await _context.SaveChangesAsync();

//        //    flow.FlowName = string.IsNullOrWhiteSpace(dto.FlowName) ? flow.FlowName : dto.FlowName.Trim();
//        //    flow.UpdatedAt = DateTime.UtcNow;

//        //    var newSteps = new List<CTAFlowStep>();
//        //    var nodeIdToNewGuid = new Dictionary<string, Guid>();

//        //    // 1) create steps with new IDs but keep mapping from incoming node.Id
//        //    foreach (var n in dto.Nodes)
//        //    {
//        //        var stepId = Guid.TryParse(n.Id, out var parsed) ? parsed : Guid.NewGuid();
//        //        nodeIdToNewGuid[n.Id] = stepId;

//        //        var s = new CTAFlowStep
//        //        {
//        //            Id = stepId,
//        //            CTAFlowConfigId = flow.Id,
//        //            TemplateToSend = n.TemplateName ?? string.Empty,
//        //            TemplateType = n.TemplateType,
//        //            TriggerButtonText = n.TriggerButtonText ?? "",
//        //            TriggerButtonType = n.TriggerButtonType ?? "",
//        //            StepOrder = 0,
//        //            RequiredTag = n.RequiredTag,
//        //            RequiredSource = n.RequiredSource,
//        //            PositionX = n.PositionX,
//        //            PositionY = n.PositionY,
//        //            UseProfileName = n.UseProfileName,
//        //            ProfileNameSlot = n.ProfileNameSlot
//        //        };

//        //        s.ButtonLinks = (n.Buttons ?? new List<LinkButtonDto>())
//        //            .Select((b, idx) => new FlowButtonLink
//        //            {
//        //                Id = Guid.NewGuid(),
//        //                CTAFlowStepId = s.Id,
//        //                Step = s,
//        //                ButtonText = b.Text ?? "",
//        //                ButtonType = b.Type ?? "QUICK_REPLY",
//        //                ButtonSubType = b.SubType ?? "",
//        //                ButtonValue = b.Value ?? "",
//        //                ButtonIndex = (short)(b.Index >= 0 ? b.Index : idx),
//        //                NextStepId = string.IsNullOrWhiteSpace(b.TargetNodeId) ? null :
//        //                             (Guid.TryParse(b.TargetNodeId, out var t) ? t : null)
//        //            }).ToList();

//        //        newSteps.Add(s);
//        //    }

//        //    flow.Steps = newSteps;
//        //    await _context.SaveChangesAsync();

//        //    return new FlowUpdateResult { Status = "ok", NeedsRepublish = needsRepublish };
//        //}

//        //public async Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user)
//        //{
//        //    var flow = await _context.CTAFlowConfigs
//        //        .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);

//        //    if (flow is null) return false;

//        //    // sanity: basic validation can be added here (has steps, etc.)
//        //    flow.IsPublished = true;
//        //    flow.UpdatedAt = DateTime.UtcNow;
//        //    await _context.SaveChangesAsync();
//        //    return true;
//        //}

//        // ---------- FORK (create draft copy) ----------
//        //public async Task<Guid> ForkFlowAsync(Guid flowId, Guid businessId, string user)
//        //{
//        //    var src = await _context.CTAFlowConfigs
//        //        .Include(f => f.Steps)
//        //            .ThenInclude(s => s.ButtonLinks)
//        //        .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);

//        //    if (src is null) return Guid.Empty;

//        //    var dst = new CTAFlowConfig
//        //    {
//        //        Id = Guid.NewGuid(),
//        //        BusinessId = src.BusinessId,
//        //        FlowName = src.FlowName + " (copy)",
//        //        IsActive = true,
//        //        IsPublished = false, // new draft
//        //        CreatedAt = DateTime.UtcNow,
//        //        CreatedBy = user,
//        //        UpdatedAt = DateTime.UtcNow
//        //    };

//        //    var oldToNew = new Dictionary<Guid, Guid>();

//        //    // Clone steps first
//        //    foreach (var s in src.Steps)
//        //    {
//        //        var nsId = Guid.NewGuid();
//        //        oldToNew[s.Id] = nsId;

//        //        var ns = new CTAFlowStep
//        //        {
//        //            Id = nsId,
//        //            CTAFlowConfigId = dst.Id,
//        //            TriggerButtonText = s.TriggerButtonText,
//        //            TriggerButtonType = s.TriggerButtonType,
//        //            TemplateToSend = s.TemplateToSend,
//        //            TemplateType = s.TemplateType,
//        //            StepOrder = s.StepOrder,
//        //            RequiredTag = s.RequiredTag,
//        //            RequiredSource = s.RequiredSource,
//        //            PositionX = s.PositionX,
//        //            PositionY = s.PositionY,
//        //            UseProfileName = s.UseProfileName,
//        //            ProfileNameSlot = s.ProfileNameSlot,
//        //            ButtonLinks = new List<FlowButtonLink>()
//        //        };

//        //        dst.Steps.Add(ns);
//        //    }

//        //    // Clone links and rewire targets if possible
//        //    foreach (var s in src.Steps)
//        //    {
//        //        var ns = dst.Steps.First(x => x.Id == oldToNew[s.Id]);
//        //        foreach (var b in s.ButtonLinks.OrderBy(x => x.ButtonIndex))
//        //        {
//        //            ns.ButtonLinks.Add(new FlowButtonLink
//        //            {
//        //                Id = Guid.NewGuid(),
//        //                CTAFlowStepId = ns.Id,
//        //                Step = ns,
//        //                ButtonText = b.ButtonText,
//        //                ButtonType = b.ButtonType,
//        //                ButtonSubType = b.ButtonSubType,
//        //                ButtonValue = b.ButtonValue,
//        //                ButtonIndex = b.ButtonIndex,
//        //                NextStepId = b.NextStepId.HasValue && oldToNew.ContainsKey(b.NextStepId.Value)
//        //                    ? oldToNew[b.NextStepId.Value]
//        //                    : null
//        //            });
//        //        }
//        //    }

//        //    _context.CTAFlowConfigs.Add(dst);
//        //    await _context.SaveChangesAsync();
//        //    return dst.Id;
//        //}


//    }
//}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\ExtrackAllFiles.bat 
====================================================== 
 
@echo off
REM This script will find all files and output their name and content into one file.
REM The output file will be named [FolderName]_AllFileDump.txt.

REM Get the current folder's name and set it as the output file name with the custom suffix
for %%I in ("%cd%") do set "outputFile=%%~nI_AllFileDump.txt"

REM Clear the output file to start fresh
> "%outputFile%" (echo Folder and File Content Report)
echo. >> "%outputFile%"

REM Loop through all files in the current directory and subdirectories
for /R . %%F in (*.*) do (
    echo ====================================================== >> "%outputFile%"
    echo FILE: %%F >> "%outputFile%"
    echo ====================================================== >> "%outputFile%"
    echo. >> "%outputFile%"
    type "%%F" >> "%outputFile%" 2>nul
    echo. >> "%outputFile%"
    echo. >> "%outputFile%"
)

echo Finished! All content has been extracted to %outputFile% 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\FlowRuntimeService.cs 
====================================================== 
 
Ôªøusing Microsoft.EntityFrameworkCore;
using System.Text.Json;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat.api.Features.Webhooks.Services.Processors;
using xbytechat_api.WhatsAppSettings.Services; 

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public class FlowRuntimeService : IFlowRuntimeService
    {
        private readonly AppDbContext _dbContext;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;
        private readonly ILogger<FlowRuntimeService> _logger;

        public FlowRuntimeService(
            AppDbContext dbContext,
            IMessageEngineService messageEngineService,
            IWhatsAppTemplateFetcherService templateFetcherService,  ILogger<FlowRuntimeService> logger)
        {
            _dbContext = dbContext;
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
            _logger = logger;
        }

        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult
        //            {
        //                Success = true,
        //                RedirectUrl = context.ClickedButton.ButtonValue
        //            };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);

        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template to pick the correct language and catch 132001 early
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            // log a failed flow execution (no WA call attempted)
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult
        //            {
        //                Success = false,
        //                Error = $"Template '{templateName}' not found or not approved."
        //            };
        //        }

        //        // prefer the template‚Äôs actual language over hard-coding "en_US"
        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // (Optional) build body/button components here if your step needs params.
        //        // Quick-reply buttons require NO components; dynamic URL buttons would.
        //        var components = new List<object>();

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        var sendResult = await _messageEngineService.SendPayloadAsync(context.BusinessId, payload);

        //        // 4) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 5) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId, // correlate to the parent WA msg (if any)
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,

        //            // üî¥ This was missing before ‚Üí caused NOT NULL violation
        //            MessageContent = templateName,

        //            // good hygiene: stamp SentAt on success
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null,
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 6) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId,

        //            // Optional (only if your entity has these columns):
        //            // TemplateName = templateName,
        //            // TemplateType = targetStep.TemplateType,
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}

        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);

        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
        //        }

        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // 3.1) üîé Resolve provider deterministically from settings
        //        //     prefer a provider that already mirrors a Default sender (PhoneNumberId != null)
        //        var settings = await _dbContext.WhatsAppSettings
        //            .AsNoTracking()
        //            .Where(s => s.BusinessId == context.BusinessId && s.IsActive)
        //            .OrderByDescending(s => s.PhoneNumberId != null)
        //            .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)
        //            .ToListAsync();

        //        if (settings.Count == 0)
        //            return new NextStepResult { Success = false, Error = "WhatsApp settings not found for this business." };

        //        if (settings.Count > 1 && settings[0].PhoneNumberId == null)
        //            return new NextStepResult
        //            {
        //                Success = false,
        //                Error = "Multiple WhatsApp providers are active but no Default sender is set. Set a Default number or specify provider for flows."
        //            };

        //        var provider = settings[0].Provider; // must already be UPPERCASE: PINNACLE or META_CLOUD
        //        if (provider != "PINNACLE" && provider != "META_CLOUD")
        //            return new NextStepResult { Success = false, Error = $"Unsupported provider configured: {provider}" };

        //        // (Optional) if you ever want to pin a sender for flows, you can use settings[0].PhoneNumberId.
        //        string? phoneNumberId = null;

        //        // (Optional) build body/button components here if your step needs params.
        //        var components = new List<object>();

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        // 4) Send via explicit provider (deterministic signature)
        //        var sendResult = await _messageEngineService.SendPayloadAsync(
        //            context.BusinessId,
        //            provider,
        //            payload,
        //            phoneNumberId
        //        );

        //        // 5) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId,
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,
        //            MessageContent = templateName,                      // NOT NULL
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 7) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}
        private static string ResolveGreeting(string? profileName, string? contactName)
        {
            var s = (profileName ?? contactName)?.Trim();
            return string.IsNullOrEmpty(s) ? "there" : s;
        }
        private static void EnsureArgsLength(List<string> args, int slot1Based)
        {
            while (args.Count < slot1Based) args.Add(string.Empty);
        }


        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // ‚îÄ‚îÄ local helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        //        string ResolveGreeting(string? profileName, string? contactName)
        //        {
        //            var s = (profileName ?? contactName)?.Trim();
        //            return string.IsNullOrEmpty(s) ? "there" : s;
        //        }
        //        void EnsureArgsLength(List<string> args, int slot1Based)
        //        {
        //            while (args.Count < slot1Based) args.Add(string.Empty);
        //        }
        //        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);



        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
        //        }

        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // 3.1) üß≠ Determine sender (provider + phoneNumberId) from context (source of truth)
        //        var provider = (context.Provider ?? string.Empty).Trim().ToUpperInvariant();
        //        if (provider != "PINNACLE" && provider != "META_CLOUD")
        //            return new NextStepResult { Success = false, Error = "Provider is required for flow sends (PINNACLE or META_CLOUD)." };

        //        string? phoneNumberId = context.PhoneNumberId;

        //        if (string.IsNullOrWhiteSpace(phoneNumberId))
        //        {
        //            // Fallback: pick the default/active number for this business + provider
        //            phoneNumberId = await _dbContext.WhatsAppPhoneNumbers
        //                .AsNoTracking()
        //                .Where(n => n.BusinessId == context.BusinessId
        //                            && n.IsActive
        //                            && n.Provider.ToUpper() == provider)
        //                .OrderByDescending(n => n.IsDefault)
        //                .ThenBy(n => n.WhatsAppBusinessNumber)
        //                .Select(n => n.PhoneNumberId)
        //                .FirstOrDefaultAsync();

        //            if (string.IsNullOrWhiteSpace(phoneNumberId))
        //                return new NextStepResult { Success = false, Error = "Missing PhoneNumberId (no default sender configured for this provider)." };
        //        }

        //        // ‚îÄ‚îÄ ‚¨áÔ∏è PROFILE NAME INJECTION: build body args only if requested ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        //        var args = new List<string>();
        //        if (targetStep.UseProfileName && targetStep.ProfileNameSlot is int slot && slot >= 1)
        //        {
        //            // Load contact to get ProfileName/Name
        //            var contact = await _dbContext.Contacts
        //                .AsNoTracking()
        //                .FirstOrDefaultAsync(c => c.BusinessId == context.BusinessId
        //                                          && c.PhoneNumber == context.ContactPhone);

        //            var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);
        //            EnsureArgsLength(args, slot);
        //            args[slot - 1] = greet; // 1-based slot -> 0-based index
        //        }

        //        // Build WA components only if we have body args
        //        var components = new List<object>();
        //        if (args.Count > 0)
        //        {
        //            components.Add(new
        //            {
        //                type = "body",
        //                parameters = args.Select(a => new { type = "text", text = a ?? string.Empty }).ToList()
        //            });
        //        }
        //        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        // 4) Send via explicit provider (deterministic signature)
        //        var sendResult = await _messageEngineService.SendPayloadAsync(
        //            context.BusinessId,
        //            provider,               // explicit
        //            payload,
        //            phoneNumberId           // explicit
        //        );

        //        // 5) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId,
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,
        //            MessageContent = templateName,                      // NOT NULL
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 7) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}

        public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        {
            try
            {
                // ‚îÄ‚îÄ local helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                string ResolveGreeting(string? profileName, string? contactName)
                {
                    var s = (profileName ?? contactName)?.Trim();
                    return string.IsNullOrEmpty(s) ? "there" : s;
                }
                void EnsureArgsLength(List<string> args, int slot1Based)
                {
                    while (args.Count < slot1Based) args.Add(string.Empty);
                }
                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

                // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
                if (context.ClickedButton != null &&
                    context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
                {
                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = context.BusinessId,
                        FlowId = context.FlowId,
                        StepId = context.SourceStepId,
                        StepName = "URL_REDIRECT",
                        MessageLogId = context.MessageLogId,
                        ButtonIndex = context.ButtonIndex,
                        ContactPhone = context.ContactPhone,
                        Success = true,
                        ExecutedAt = DateTime.UtcNow,
                        RequestId = context.RequestId
                    });
                    await _dbContext.SaveChangesAsync();

                    return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
                }

                // 2) Load next step in the same flow (no dedupe/loop guard ‚Äî always proceed)
                var targetStep = await _dbContext.CTAFlowSteps
                    .Include(s => s.ButtonLinks)
                    .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
                                              s.CTAFlowConfigId == context.FlowId);

                if (targetStep == null)
                    return new NextStepResult { Success = false, Error = "Target step not found." };

                if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
                    return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

                var templateName = targetStep.TemplateToSend.Trim();

                // 3) Preflight the template (resolve language and catch 132001 early)
                var meta = await _templateFetcherService.GetTemplateByNameAsync(
                    context.BusinessId, templateName, includeButtons: true);

                if (meta == null)
                {
                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = context.BusinessId,
                        FlowId = context.FlowId,
                        StepId = targetStep.Id,
                        StepName = templateName,
                        MessageLogId = null,
                        ButtonIndex = context.ButtonIndex,
                        ContactPhone = context.ContactPhone,
                        Success = false,
                        ErrorMessage = $"Template '{templateName}' not found for this WABA.",
                        RawResponse = null,
                        ExecutedAt = DateTime.UtcNow,
                        RequestId = context.RequestId
                    });
                    await _dbContext.SaveChangesAsync();

                    return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
                }

                var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

                // 3.1) üî• Determine sender with failsafes (NO early return for missing context)
                var provider = (context.Provider ?? string.Empty).Trim().ToUpperInvariant();
                var phoneNumberId = context.PhoneNumberId;

                // If provider missing/invalid ‚Üí try active WhatsAppSettings (fast path)
                if (provider != "PINNACLE" && provider != "META_CLOUD")
                {
                    var w = await _dbContext.WhatsAppSettings
                        .AsNoTracking()
                        .Where(x => x.BusinessId == context.BusinessId && x.IsActive)
                        .OrderByDescending(x => x.UpdatedAt ?? x.CreatedAt)
                        .FirstOrDefaultAsync();

                    if (w != null)
                    {
                        provider = (w.Provider ?? "").Trim().ToUpperInvariant();
                        if (string.IsNullOrWhiteSpace(phoneNumberId))
                            phoneNumberId = w.PhoneNumberId;
                    }
                }

                // If still missing provider ‚Üí hard resolve via numbers table
                if (provider != "PINNACLE" && provider != "META_CLOUD")
                {
                    var pn = await _dbContext.WhatsAppPhoneNumbers
                        .AsNoTracking()
                        .Where(n => n.BusinessId == context.BusinessId && n.IsActive)
                        .OrderByDescending(n => n.IsDefault)
                        .ThenBy(n => n.WhatsAppBusinessNumber)
                        .Select(n => new { n.Provider, n.PhoneNumberId })
                        .FirstOrDefaultAsync();

                    if (pn != null)
                    {
                        provider = (pn.Provider ?? "").Trim().ToUpperInvariant();
                        if (string.IsNullOrWhiteSpace(phoneNumberId))
                            phoneNumberId = pn.PhoneNumberId;
                    }
                }

                if (provider != "PINNACLE" && provider != "META_CLOUD")
                    return new NextStepResult { Success = false, Error = "No active WhatsApp sender configured (provider could not be resolved)." };

                // Ensure we have a sender id
                if (string.IsNullOrWhiteSpace(phoneNumberId))
                {
                    phoneNumberId = await _dbContext.WhatsAppPhoneNumbers
                        .AsNoTracking()
                        .Where(n => n.BusinessId == context.BusinessId
                                    && n.IsActive
                                    && n.Provider.ToUpper() == provider)
                        .OrderByDescending(n => n.IsDefault)
                        .ThenBy(n => n.WhatsAppBusinessNumber)
                        .Select(n => n.PhoneNumberId)
                        .FirstOrDefaultAsync();

                    if (string.IsNullOrWhiteSpace(phoneNumberId))
                        return new NextStepResult { Success = false, Error = "Missing PhoneNumberId (no default sender configured for this provider)." };
                }

                // ‚îÄ‚îÄ Profile-name injection into body params (optional) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                var args = new List<string>();
                if (targetStep.UseProfileName && targetStep.ProfileNameSlot is int slot && slot >= 1)
                {
                    var contact = await _dbContext.Contacts
                        .AsNoTracking()
                        .FirstOrDefaultAsync(c => c.BusinessId == context.BusinessId
                                                  && c.PhoneNumber == context.ContactPhone);

                    var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);
                    EnsureArgsLength(args, slot);
                    args[slot - 1] = greet;
                }

                var components = new List<object>();
                if (args.Count > 0)
                {
                    components.Add(new
                    {
                        type = "body",
                        parameters = args.Select(a => new { type = "text", text = a ?? string.Empty }).ToList()
                    });
                }
                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

                var payload = new
                {
                    messaging_product = "whatsapp",
                    to = context.ContactPhone,
                    type = "template",
                    template = new
                    {
                        name = templateName,
                        language = new { code = languageCode },
                        components
                    }
                };

                // 4) SEND (explicit provider + sender) ‚Äî always attempt the POST
                _logger.LogInformation("‚û°Ô∏è SEND-INTENT flow={Flow} step={Step} tmpl={T} to={To} provider={Prov}/{Pnid}",
                    context.FlowId, targetStep.Id, templateName, context.ContactPhone, provider, phoneNumberId);

                var sendResult = await _messageEngineService.SendPayloadAsync(
                    context.BusinessId,
                    provider,               // explicit
                    payload,
                    phoneNumberId           // explicit
                );

                // 5) Snapshot buttons for robust click mapping later
                string? buttonBundleJson = null;
                if (targetStep.ButtonLinks?.Count > 0)
                {
                    var bundle = targetStep.ButtonLinks
                        .OrderBy(b => b.ButtonIndex)
                        .Select(b => new
                        {
                            i = b.ButtonIndex,
                            t = b.ButtonText ?? "",
                            ty = b.ButtonType ?? "QUICK_REPLY",
                            v = b.ButtonValue ?? "",
                            ns = b.NextStepId
                        })
                        .ToList();

                    buttonBundleJson = JsonSerializer.Serialize(bundle);
                }

                // 6) Write MessageLog
                var messageLog = new MessageLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = context.BusinessId,
                    RecipientNumber = context.ContactPhone,
                    CTAFlowConfigId = context.FlowId,
                    CTAFlowStepId = targetStep.Id,
                    FlowVersion = context.Version,
                    Source = "flow",
                    RefMessageId = context.MessageLogId,
                    CreatedAt = DateTime.UtcNow,
                    Status = sendResult.Success ? "Sent" : "Failed",
                    MessageId = sendResult.MessageId,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ButtonBundleJson = buttonBundleJson,
                    MessageContent = templateName,
                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
                };

                _dbContext.MessageLogs.Add(messageLog);

                // 7) Flow execution audit row
                _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = context.BusinessId,
                    FlowId = context.FlowId,
                    StepId = targetStep.Id,
                    StepName = templateName,
                    MessageLogId = messageLog.Id,
                    ButtonIndex = context.ButtonIndex,
                    ContactPhone = context.ContactPhone,
                    Success = sendResult.Success,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ExecutedAt = DateTime.UtcNow,
                    RequestId = context.RequestId
                });

                await _dbContext.SaveChangesAsync();

                return new NextStepResult
                {
                    Success = sendResult.Success,
                    Error = sendResult.ErrorMessage,
                    RedirectUrl = null
                };
            }
            catch (Exception ex)
            {
                return new NextStepResult { Success = false, Error = ex.Message };
            }
        }

    }
}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\ICTAFlowService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Helpers;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public interface ICTAFlowService
    {
        // Create-only (draft)
        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);

        // Load flows (lists)
        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);
        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);

        // Load flow (detail)
        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId);  // for editor/view
        Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId);          // alt payload

        // Runtime
        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText, string buttonType, string currentTemplateName, Guid? campaignId = null);
        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);
        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);
        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);
        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);

        // Delete (only if not attached)
        Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy);

        // Publish
        Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user);

        // Attached campaigns (for usage checks / modal)
        Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId);

        // (Optional utility)
        Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId);
    }
}


//using xbytechat.api.Features.CTAFlowBuilder.DTOs;
//using xbytechat.api.Features.CTAFlowBuilder.Models;
//using xbytechat.api.Helpers;

//namespace xbytechat.api.Features.CTAFlowBuilder.Services
//{
//    public interface ICTAFlowService
//    {
//        // ‚úÖ Used for flow creation and saving
//        Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy);
//        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);

//        // ‚úÖ Load flows
//        Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId);
//        Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId);
//        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);
//        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);

//        // ‚úÖ Load and manage flow steps
//        Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId);


//        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText,string buttonType,string currentTemplateName,Guid? campaignId = null);


//        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);
//        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);
//        // ‚úÖ Runtime logic
//        Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber);

//        // ‚úÖ Flow management
//        Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy);

//        Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy);

//        // ‚úÖ Editor loading (visual builder)
//       // Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid id, Guid businessId);
//        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId);
//        Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId);
//        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);
//        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);

//        public interface IFlowRuntimeService
//        {
//            Task<NextStepResult> ExecuteNextAsync(NextStepContext context);
//        }
//        Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId);
//        Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId);
//        //Task<FlowUpdateResult> UpdateVisualFlowAsync(Guid flowId, SaveVisualFlowDto dto, Guid businessId, string user);

//        // Explicit publish after edits
//        Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user);

//        // Create a new draft copy when live flow is attached
//        Task<Guid> ForkFlowAsync(Guid flowId, Guid businessId, string user);
//    }
//}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\IFlowRuntimeService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CTAFlowBuilder.Models;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public interface IFlowRuntimeService
    {
        Task<NextStepResult> ExecuteNextAsync(NextStepContext context);

    }
    public record NextStepContext
    {
        public Guid BusinessId { get; set; }
        public Guid FlowId { get; set; }
        public int Version { get; set; }
        public Guid SourceStepId { get; set; }
        public Guid? TargetStepId { get; set; }
        public short ButtonIndex { get; set; }
        public Guid MessageLogId { get; set; }
        public string ContactPhone { get; set; } = string.Empty;
        public Guid RequestId { get; set; }
        public FlowButtonLink? ClickedButton { get; set; }
        public string? Provider { get; set; }          // "META_CLOUD" | "PINNACLE"
        public string? PhoneNumberId { get; set; }
            public bool AlwaysSend { get; set; } = true;
    }

    public record NextStepResult
    {
        public bool Success { get; set; }
        public string? Error { get; set; }
        public string? RedirectUrl { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\Services_AllFileDump.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\CTAFlowService.cs 
====================================================== 
 
Ôªø// üìÑ File: Features/CTAFlowBuilder/Services/CTAFlowService.cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api.AuthModule.Models;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.MessagesEngine.DTOs;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat.api.Features.Tracking.Models;
using xbytechat.api.Helpers;
using xbytechat.api.WhatsAppSettings.DTOs;
using xbytechat_api.WhatsAppSettings.Services;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public class CTAFlowService : ICTAFlowService
    {
        private readonly AppDbContext _context;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;

        public CTAFlowService(AppDbContext context, IMessageEngineService messageEngineService,
            IWhatsAppTemplateFetcherService templateFetcherService
            )
        {
            _context = context;
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
        }

        public async Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy)
        {
            var flow = new CTAFlowConfig
            {
                Id = Guid.NewGuid(),
                FlowName = dto.FlowName,
                BusinessId = businessId,
                CreatedAt = DateTime.UtcNow,
                CreatedBy = createdBy,
                IsPublished = dto.IsPublished
            };

            foreach (var stepDto in dto.Steps)
            {
                var step = new CTAFlowStep
                {
                    Id = Guid.NewGuid(),
                    CTAFlowConfigId = flow.Id,
                    TriggerButtonText = stepDto.TriggerButtonText,
                    TriggerButtonType = stepDto.TriggerButtonType,
                    TemplateToSend = stepDto.TemplateToSend,
                    StepOrder = stepDto.StepOrder,
                    ButtonLinks = stepDto.ButtonLinks?.Select(link => new FlowButtonLink
                    {
                        ButtonText = link.ButtonText,
                        NextStepId = link.NextStepId
                    }).ToList() ?? new List<FlowButtonLink>()
                };

                flow.Steps.Add(step);
            }

            _context.CTAFlowConfigs.Add(flow);
            await _context.SaveChangesAsync();

            return flow.Id;
        }

        public async Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Include(f => f.Steps.OrderBy(s => s.StepOrder))
                .Where(f => f.BusinessId == businessId && f.IsActive && f.IsPublished)
                .FirstOrDefaultAsync();
        }

        public async Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Include(f => f.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .Where(f => f.BusinessId == businessId && f.IsPublished == false)
                .OrderByDescending(f => f.CreatedAt)
                .FirstOrDefaultAsync();
        }



        public async Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId)
        {
            return await _context.CTAFlowSteps
                .Where(s => s.CTAFlowConfigId == flowId)
                .OrderBy(s => s.StepOrder)
                .ToListAsync();
        }

        public async Task<CTAFlowStep?> MatchStepByButtonAsync(
            Guid businessId,
            string buttonText,
            string buttonType,
            string TemplateName,
            Guid? campaignId = null)
        {
            var normalizedButtonText = buttonText?.Trim().ToLower() ?? "";
            var normalizedButtonType = buttonType?.Trim().ToLower() ?? "";
            var normalizedTemplateName = TemplateName?.Trim().ToLower() ?? "";

            // 1Ô∏è‚É£ Try campaign-specific override
            if (campaignId.HasValue)
            {
                var overrideStep = await _context.CampaignFlowOverrides
                    .Where(o =>
                        o.CampaignId == campaignId &&
                        o.ButtonText.ToLower() == normalizedButtonText &&
                        o.TemplateName.ToLower() == normalizedTemplateName)
                    .FirstOrDefaultAsync();

                if (overrideStep != null)
                {
                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();

                    var matched = await _context.CTAFlowSteps
                        .Include(s => s.Flow)
                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);

                    if (matched != null)
                    {
                        Log.Information("üîÅ Override matched: Template '{Template}' ‚Üí Step '{StepId}'", overrideStep.OverrideNextTemplate, matched.Id);
                        return matched;
                    }

                    Log.Warning("‚ö†Ô∏è Override found for button '{Button}' but no matching step for template '{Template}'", normalizedButtonText, overrideStep.OverrideNextTemplate);
                }

                else
                {
                    Log.Information("üü° No campaign override found for button '{Button}' on template '{Template}'", normalizedButtonText, normalizedTemplateName);
                }
            }

            // 2Ô∏è‚É£ Fallback to standard flow logic
            var fallbackStep = await _context.CTAFlowSteps
                .Include(s => s.Flow)
                .Where(s =>
                    s.Flow.BusinessId == businessId &&
                    s.Flow.IsActive &&
                    s.Flow.IsPublished &&
                    s.TriggerButtonText.ToLower() == normalizedButtonText &&
                    s.TriggerButtonType.ToLower() == normalizedButtonType)
                .FirstOrDefaultAsync();

            if (fallbackStep != null)
            {
                Log.Information("‚úÖ Fallback flow step matched: StepId = {StepId}, Flow = {FlowName}", fallbackStep.Id, fallbackStep.Flow?.FlowName);
            }
            else
            {
                Log.Warning("‚ùå No fallback step matched for button '{ButtonText}' of type '{ButtonType}' in BusinessId: {BusinessId}", normalizedButtonText, normalizedButtonType, businessId);
            }

            return fallbackStep;
        }



        public async Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy)
        {
            try
            {
                // üî• 1. Remove existing published flow for this business
                var existingFlows = await _context.CTAFlowConfigs
                    .Where(f => f.BusinessId == businessId && f.IsPublished)
                    .ToListAsync();

                if (existingFlows.Any())
                {
                    _context.CTAFlowConfigs.RemoveRange(existingFlows);
                }

                // üå± 2. Create new flow config
                var flowConfig = new CTAFlowConfig
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    FlowName = "Published Flow - " + DateTime.UtcNow.ToString("yyyyMMdd-HHmm"),
                    IsPublished = true,
                    IsActive = true,
                    CreatedBy = createdBy,
                    CreatedAt = DateTime.UtcNow,
                    Steps = new List<CTAFlowStep>()
                };

                // üîÅ 3. Convert each step DTO to model
                foreach (var stepDto in steps)
                {
                    var step = new CTAFlowStep
                    {
                        Id = Guid.NewGuid(),
                        CTAFlowConfigId = flowConfig.Id,
                        TriggerButtonText = stepDto.TriggerButtonText,
                        TriggerButtonType = stepDto.TriggerButtonType,
                        TemplateToSend = stepDto.TemplateToSend,
                        StepOrder = stepDto.StepOrder,
                        ButtonLinks = stepDto.ButtonLinks.Select(bl => new FlowButtonLink
                        {
                            Id = Guid.NewGuid(),
                            ButtonText = bl.ButtonText,
                            NextStepId = bl.NextStepId,
                        }).ToList()
                    };

                    flowConfig.Steps.Add(step);
                }

                // üíæ 4. Save to DB
                await _context.CTAFlowConfigs.AddAsync(flowConfig);
                await _context.SaveChangesAsync();

                return ResponseResult.SuccessInfo("‚úÖ Flow published successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Error while publishing CTA flow.");
                return ResponseResult.ErrorInfo("‚ùå Could not publish flow.");
            }
        }

        public async Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy)
        {
            try
            {
                Log.Information("üß† SaveVisualFlow started | FlowName: {FlowName} | BusinessId: {BusinessId}", dto.FlowName, businessId);

                if (dto.Nodes == null || !dto.Nodes.Any())
                {
                    Log.Warning("‚ùå No nodes found in flow. Aborting save.");
                    return ResponseResult.ErrorInfo("‚ùå Cannot save an empty flow. Please add at least one step.");
                }

                // 1) Upsert FlowConfig
                var flow = await _context.CTAFlowConfigs
                    .FirstOrDefaultAsync(f => f.FlowName == dto.FlowName && f.BusinessId == businessId);

                if (flow == null)
                {
                    flow = new CTAFlowConfig
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = businessId,
                        FlowName = dto.FlowName,
                        CreatedBy = createdBy,
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow,
                        IsActive = true,
                        IsPublished = dto.IsPublished
                    };
                    _context.CTAFlowConfigs.Add(flow);
                    Log.Information("‚úÖ New FlowConfig created with ID: {Id}", flow.Id);
                }
                else
                {
                    // wipe old steps+links for a clean replace
                    var oldSteps = await _context.CTAFlowSteps
                        .Where(s => s.CTAFlowConfigId == flow.Id)
                        .Include(s => s.ButtonLinks)
                        .ToListAsync();

                    foreach (var step in oldSteps)
                        _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);

                    _context.CTAFlowSteps.RemoveRange(oldSteps);

                    flow.IsPublished = dto.IsPublished;
                    flow.UpdatedAt = DateTime.UtcNow;
                }

                // 2) Build Steps (map by incoming node.Id string)
                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);

                foreach (var (node, index) in dto.Nodes.Select((n, i) => (n, i)))
                {
                    if (string.IsNullOrWhiteSpace(node.Id))
                        continue;

                    var step = new CTAFlowStep
                    {
                        Id = Guid.NewGuid(),
                        CTAFlowConfigId = flow.Id,
                        StepOrder = index,
                        TemplateToSend = node.TemplateName,
                        TemplateType = node.TemplateType ?? "UNKNOWN",
                        TriggerButtonText = node.TriggerButtonText ?? "",
                        TriggerButtonType = node.TriggerButtonType ?? "cta",
                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,
                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,
                        UseProfileName = node.UseProfileName,
                        ProfileNameSlot = node.ProfileNameSlot ?? 1,
                        ButtonLinks = new List<FlowButtonLink>()
                    };

                    stepMap[node.Id] = step;
                    //if (step.UseProfileName && (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot < 1))
                    //    step.ProfileNameSlot = 1;
                    _context.CTAFlowSteps.Add(step);
                }

                // 3) Build Links PER NODE using buttons order (with Index), not per-edge blindly
                foreach (var node in dto.Nodes)
                {
                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))
                        continue;

                    // outgoing edges from this node
                    var outEdges = dto.Edges?.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList()
                                   ?? new List<FlowEdgeDto>();

                    // dedupe by button text to avoid ambiguous routing
                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

                    // stable ordering: by provided Index (0..N), then by Text
                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())
                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)
                        .ThenBy(b => b.Text ?? string.Empty)
                        .ToList();

                    short nextIdx = 0;

                    foreach (var btn in orderedButtons)
                    {
                        var text = (btn.Text ?? string.Empty).Trim();
                        if (string.IsNullOrEmpty(text))
                            continue;

                        if (!seenTexts.Add(text))
                        {
                            Log.Warning("‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; keeping first, skipping duplicates.", text, node.Id);
                            continue;
                        }

                        // match edge by SourceHandle == button text (how ReactFlow wires handles)
                        var edge = outEdges.FirstOrDefault(e =>
                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));
                        if (edge == null)
                        {
                            // no wire from this button ‚Üí skip link creation but keep button metadata in UI on reload
                            continue;
                        }

                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep))
                            continue;

                        // final index: prefer incoming payload Index; else fallback to a sequential counter
                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;
                        nextIdx = (short)(finalIndex + 1);

                        var link = new FlowButtonLink
                        {
                            Id = Guid.NewGuid(),
                            CTAFlowStepId = fromStep.Id,
                            NextStepId = toStep.Id,
                            ButtonText = text,
                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? "QUICK_REPLY" : btn.Type,
                            ButtonSubType = btn.SubType ?? string.Empty,
                            ButtonValue = btn.Value ?? string.Empty,
                            ButtonIndex = (short)finalIndex // üîë persist the index
                        };

                        _context.FlowButtonLinks.Add(link);
                        fromStep.ButtonLinks.Add(link);

                        // propagate trigger info on the target step for convenience
                        toStep.TriggerButtonText = text;
                        toStep.TriggerButtonType = (btn.Type ?? "QUICK_REPLY").ToLowerInvariant();
                    }
                }

                await _context.SaveChangesAsync();

                Log.Information("‚úÖ Flow '{Flow}' saved | Steps: {StepCount} | Links: {LinkCount}",
                    dto.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));

                return ResponseResult.SuccessInfo("‚úÖ Flow saved successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while saving flow");
                return ResponseResult.ErrorInfo("‚ùå Internal error while saving flow.");
            }
        }

        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId)
        {
            var flow = await _context.CTAFlowConfigs
                .Include(c => c.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .FirstOrDefaultAsync(c => c.Id == flowId && c.IsActive);

            if (flow == null) return null;

            var businessId = flow.BusinessId;

            // ‚úÖ Pre-fetch templates from Meta
            var templateMap = new Dictionary<string, TemplateMetadataDto>();

            foreach (var step in flow.Steps)
            {
                if (!string.IsNullOrWhiteSpace(step.TemplateToSend) && !templateMap.ContainsKey(step.TemplateToSend))
                {
                    try
                    {
                        var template = await _templateFetcherService.GetTemplateByNameAsync(
                            businessId,
                            step.TemplateToSend,
                            includeButtons: true
                        );

                        if (template != null)
                            templateMap[step.TemplateToSend] = template;
                    }
                    catch (Exception ex)
                    {
                        Log.Warning(ex, "‚ö†Ô∏è Failed to fetch template from Meta for {Template}", step.TemplateToSend);
                    }
                }
            }

            // ‚úÖ Map into ReactFlow-compatible structure
            var nodes = flow.Steps.Select(step =>
            {
                var template = templateMap.GetValueOrDefault(step.TemplateToSend);

                return new FlowNodeDto
                {
                    Id = step.Id.ToString(),
                    TemplateName = step.TemplateToSend,
                    MessageBody = template?.Body ?? "Message body preview...",
                    TriggerButtonText = step.TriggerButtonText,
                    TriggerButtonType = step.TriggerButtonType,
                    PositionX = step.PositionX ?? 100,
                    PositionY = step.PositionY ?? 100,

                    // ‚úÖ NEW: Include conditional logic
                    RequiredTag = step.RequiredTag,
                    RequiredSource = step.RequiredSource,

                    //Buttons = step.ButtonLinks.Select(link => new LinkButtonDto
                    //{
                    //    Text = link.ButtonText,
                    //    TargetNodeId = link.NextStepId.ToString()
                    //}).ToList()

                    UseProfileName = step.UseProfileName,
                    ProfileNameSlot = step.ProfileNameSlot,

                    Buttons = step.ButtonLinks.Select(link => new LinkButtonDto
                    {
                        Text = link.ButtonText,
                        Type = link.ButtonType,
                        SubType = link.ButtonSubType,
                        Value = link.ButtonValue,
                        TargetNodeId = link.NextStepId?.ToString()
                    }).ToList()

                             .Concat((template?.ButtonParams ?? new List<ButtonMetadataDto>())
                                 .Where(btn => !step.ButtonLinks.Any(bl => bl.ButtonText == btn.Text))
                                 .Select(btn => new LinkButtonDto
                                 {
                                     Text = btn.Text,
                                     TargetNodeId = null
                                 })).ToList()
                };

            }).ToList();

            return new SaveVisualFlowDto
            {
                FlowName = flow.FlowName,
                IsPublished = flow.IsPublished,
                Nodes = nodes,
                Edges = flow.Steps
                        .SelectMany(step =>
                            step.ButtonLinks.Select(link => new FlowEdgeDto
                            {
                                FromNodeId = step.Id.ToString(),
                                ToNodeId = link.NextStepId.ToString(),
                                SourceHandle = link.ButtonText // ‚úÖ important
                            })
                        ).ToList()

            };
        }


        public async Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId)
        {
            var flow = await _context.CTAFlowConfigs
                .Where(f => f.Id == id && f.BusinessId == businessId)
                .FirstOrDefaultAsync();

            if (flow == null)
                return ResponseResult.ErrorInfo("‚ùå Flow not found or does not belong to you.");

            _context.CTAFlowConfigs.Remove(flow);
            await _context.SaveChangesAsync();

            return ResponseResult.SuccessInfo("‚úÖ Flow deleted successfully.");
        }
        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Where(f => f.BusinessId == businessId && f.IsPublished)
                .OrderByDescending(f => f.CreatedAt)
                .Select(f => new VisualFlowSummaryDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    IsPublished = f.IsPublished,
                    CreatedAt = f.CreatedAt
                })
                .ToListAsync();
        }

        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)
                .OrderByDescending(f => f.CreatedAt)
                .Select(f => new VisualFlowSummaryDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    CreatedAt = f.CreatedAt,
                    IsPublished = f.IsPublished
                })
                .ToListAsync();
        }

        public async Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber)
        {
            // Log.Information("üöÄ Executing follow-up for BusinessId: {BusinessId}, CurrentStepId: {StepId}", businessId);
            if (currentStep == null)
            {
                Log.Warning("‚ö†Ô∏è Cannot execute follow-up. Current step is null.");
                return ResponseResult.ErrorInfo("Current step not found.");
            }

            // üß† Step: Look through all button links for a valid NextStepId
            var nextLink = currentStep.ButtonLinks.FirstOrDefault(link => link.NextStepId != null);

            if (nextLink == null)
            {
                Log.Information("‚ÑπÔ∏è No NextStepId defined in any ButtonLinks for StepId: {StepId}", currentStep.Id);
                return ResponseResult.SuccessInfo("No follow-up step to execute.");
            }

            // üîç Fetch the next step using new logic (via CTAFlowConfig + Steps)
            // 1Ô∏è‚É£ Try to resolve with smart condition check
            var followUpStep = await GetChainedStepAsync(businessId, nextLink.NextStepId, null, null);

            if (followUpStep == null)
            {
                Log.Warning("‚ùå Follow-up step skipped due to condition mismatch ‚Üí StepId: {StepId}", nextLink.NextStepId);

                // 2Ô∏è‚É£ Optional fallback: Try same flow ‚Üí Any step without conditions
                var flow = await _context.CTAFlowConfigs
                    .Include(f => f.Steps)
                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.IsPublished);

                followUpStep = flow?.Steps
                    .Where(s => string.IsNullOrEmpty(s.RequiredTag) && string.IsNullOrEmpty(s.RequiredSource))
                    .OrderBy(s => s.StepOrder)
                    .FirstOrDefault();

                if (followUpStep != null)
                {
                    Log.Information("üîÅ Fallback step selected ‚Üí StepId: {StepId}, Template: {Template}",
                        followUpStep.Id, followUpStep.TemplateToSend);
                }
                else
                {
                    Log.Warning("üö´ No suitable fallback found in flow. Skipping follow-up.");
                    return ResponseResult.SuccessInfo("No matching follow-up step based on user context.");
                }
            }


            // üì® Send the follow-up message using the TemplateToSend field
            try
            {
                var template = followUpStep.TemplateToSend;

                Log.Information("üì§ Sending follow-up message ‚Üí Template: {Template}, To: {Recipient}", template, recipientNumber);

                // üß™ Replace this with actual message engine call
                var sendDto = new SimpleTemplateMessageDto
                {
                    RecipientNumber = recipientNumber,
                    TemplateName = template,
                    TemplateParameters = new List<string>() // Add dynamic params later if needed
                };

                var sendResult = await _messageEngineService
     .SendTemplateMessageSimpleAsync(businessId, sendDto);

                if (!sendResult.Success)
                {
                    Log.Warning("‚ùå Follow-up message send failed ‚Üí {Template}", template);
                    return ResponseResult.ErrorInfo("Follow-up send failed.", sendResult.ErrorMessage);
                }


                return ResponseResult.SuccessInfo($"Follow-up message sent using template: {template}", null, sendResult.RawResponse);

            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Error sending follow-up message for StepId: {StepId}", followUpStep.Id);
                return ResponseResult.ErrorInfo("Failed to send follow-up.");
            }
        }
        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)
        {
            return GetChainedStepAsync(businessId, nextStepId, null, null); // Forward to full logic
        }

        // ‚úÖ Extended logic with condition check (Tag + Source)
        public async Task<CTAFlowStep?> GetChainedStepAsync(
            Guid businessId,
            Guid? nextStepId,
            TrackingLog? trackingLog = null,
            Contact? contact = null)
        {
            if (nextStepId == null)
            {
                Log.Information("‚ÑπÔ∏è No NextStepId provided ‚Äî skipping follow-up.");
                return null;
            }

            try
            {
                var flow = await _context.CTAFlowConfigs
                    .Include(f => f.Steps)
                    .FirstOrDefaultAsync(f =>
                        f.BusinessId == businessId &&
                        f.Steps.Any(s => s.Id == nextStepId));

                if (flow == null)
                {
                    Log.Warning("‚ö†Ô∏è No flow found containing NextStepId: {NextStepId} for business: {BusinessId}", nextStepId, businessId);
                    return null;
                }

                var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);

                if (followUpStep == null)
                {
                    Log.Warning("‚ùå Step matched in flow but not found in step list: {NextStepId}", nextStepId);
                    return null;
                }

                // ‚úÖ Check RequiredTag / Source match
                if (trackingLog != null)
                {
                    var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);

                    if (!isMatch)
                    {
                        Log.Information("üö´ Step {StepId} skipped due to condition mismatch [Tag: {Tag}, Source: {Source}]",
                            followUpStep.Id, followUpStep.RequiredTag, followUpStep.RequiredSource);
                        return null;
                    }
                }

                Log.Information("‚úÖ Follow-up step found and matched ‚Üí StepId: {StepId}, Template: {Template}",
                    followUpStep.Id, followUpStep.TemplateToSend);

                return followUpStep;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while fetching chained step for NextStepId: {NextStepId}", nextStepId);
                throw;
            }
        }

        // ‚úÖ Optional helper for resolving from TrackingLogId
        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(
            Guid businessId,
            Guid? nextStepId,
            Guid? trackingLogId)
        {
            var log = await _context.TrackingLogs
                .Include(l => l.Contact)
                    .ThenInclude(c => c.ContactTags)
                        .ThenInclude(ct => ct.Tag)
                .FirstOrDefaultAsync(l => l.Id == trackingLogId);

            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);
        }
       
        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)
        {
            try
            {
                Log.Information("üö¶ Executing Visual Flow ‚Üí StepId: {StepId} | TrackingLogId: {TrackingLogId}", startStepId, trackingLogId);

                var log = await _context.TrackingLogs
                    .Include(l => l.Contact)
                        .ThenInclude(c => c.ContactTags)
                            .ThenInclude(ct => ct.Tag)
                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);

                if (log == null)
                {
                    Log.Warning("‚ùå TrackingLog not found for ID: {TrackingLogId}", trackingLogId);
                    return ResponseResult.ErrorInfo("Tracking log not found.");
                }

                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);

                if (step == null)
                {
                    Log.Warning("‚ùå No flow step matched or conditions failed ‚Üí StepId: {StepId}", startStepId);
                    return ResponseResult.ErrorInfo("Step conditions not satisfied.");
                }

                ResponseResult sendResult;

                // This switch block remains unchanged
                switch (step.TemplateType?.ToLower())
                {
                    case "image_template":
                        var imageDto = new ImageTemplateMessageDto
                        {
                            BusinessId = businessId,
                            RecipientNumber = log.ContactPhone ?? "",
                            TemplateName = step.TemplateToSend,
                            LanguageCode = "en_US"
                        };
                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);
                        break;

                    case "text_template":
                    default:
                        var textDto = new SimpleTemplateMessageDto
                        {
                            RecipientNumber = log.ContactPhone ?? "",
                            TemplateName = step.TemplateToSend,
                            TemplateParameters = new()
                        };
                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);
                        break;
                }

                // ‚úÖ 2. SAVE the new ID to the log
                var executionLog = new FlowExecutionLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    StepId = step.Id,
                    FlowId = step.CTAFlowConfigId,
                    CampaignSendLogId = campaignSendLogId, // <-- THE NEW VALUE IS SAVED HERE
                    TrackingLogId = trackingLogId,
                    ContactPhone = log.ContactPhone,
                    TriggeredByButton = step.TriggerButtonText,
                    TemplateName = step.TemplateToSend,
                    TemplateType = step.TemplateType,
                    Success = sendResult.Success,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ExecutedAt = DateTime.UtcNow
                };

                _context.FlowExecutionLogs.Add(executionLog);
                await _context.SaveChangesAsync();

                if (sendResult.Success)
                {
                    Log.Information("‚úÖ Flow step executed ‚Üí Template: {Template} sent to {To}", step.TemplateToSend, log.ContactPhone);
                }
                else
                {
                    Log.Warning("‚ùå Failed to send template from flow ‚Üí {Reason}", sendResult.ErrorMessage);
                }

                return ResponseResult.SuccessInfo($"Flow step executed. Sent: {sendResult.Success}", null, sendResult.RawResponse);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception during ExecuteVisualFlowAsync()");
                return ResponseResult.ErrorInfo("Internal error during flow execution.");
            }
        }

        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)
        {
            return await _context.FlowButtonLinks
     .Where(l => l.CTAFlowStepId == sourceStepId
              && l.NextStepId != null
              && l.Step.CTAFlowConfigId == flowId
              && l.ButtonIndex == buttonIndex)
     .SingleOrDefaultAsync();

        }

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\ExtrackAllFiles.bat 
====================================================== 
 
@echo off
REM This script will find all files and output their name and content into one file.
REM The output file will be named [FolderName]_AllFileDump.txt.

REM Get the current folder's name and set it as the output file name with the custom suffix
for %%I in ("%cd%") do set "outputFile=%%~nI_AllFileDump.txt"

REM Clear the output file to start fresh
> "%outputFile%" (echo Folder and File Content Report)
echo. >> "%outputFile%"

REM Loop through all files in the current directory and subdirectories
for /R . %%F in (*.*) do (
    echo ====================================================== >> "%outputFile%"
    echo FILE: %%F >> "%outputFile%"
    echo ====================================================== >> "%outputFile%"
    echo. >> "%outputFile%"
    type "%%F" >> "%outputFile%" 2>nul
    echo. >> "%outputFile%"
    echo. >> "%outputFile%"
)

echo Finished! All content has been extracted to %outputFile% 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\FlowRuntimeService.cs 
====================================================== 
 
Ôªøusing Microsoft.EntityFrameworkCore;
using System.Text.Json;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat_api.WhatsAppSettings.Services; 

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public class FlowRuntimeService : IFlowRuntimeService
    {
        private readonly AppDbContext _dbContext;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;

        
        public FlowRuntimeService(
            AppDbContext dbContext,
            IMessageEngineService messageEngineService,
            IWhatsAppTemplateFetcherService templateFetcherService)
        {
            _dbContext = dbContext;
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
        }

        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult
        //            {
        //                Success = true,
        //                RedirectUrl = context.ClickedButton.ButtonValue
        //            };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);

        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template to pick the correct language and catch 132001 early
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            // log a failed flow execution (no WA call attempted)
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult
        //            {
        //                Success = false,
        //                Error = $"Template '{templateName}' not found or not approved."
        //            };
        //        }

        //        // prefer the template‚Äôs actual language over hard-coding "en_US"
        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // (Optional) build body/button components here if your step needs params.
        //        // Quick-reply buttons require NO components; dynamic URL buttons would.
        //        var components = new List<object>();

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        var sendResult = await _messageEngineService.SendPayloadAsync(context.BusinessId, payload);

        //        // 4) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 5) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId, // correlate to the parent WA msg (if any)
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,

        //            // üî¥ This was missing before ‚Üí caused NOT NULL violation
        //            MessageContent = templateName,

        //            // good hygiene: stamp SentAt on success
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null,
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 6) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId,

        //            // Optional (only if your entity has these columns):
        //            // TemplateName = templateName,
        //            // TemplateType = targetStep.TemplateType,
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}

        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);

        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
        //        }

        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // 3.1) üîé Resolve provider deterministically from settings
        //        //     prefer a provider that already mirrors a Default sender (PhoneNumberId != null)
        //        var settings = await _dbContext.WhatsAppSettings
        //            .AsNoTracking()
        //            .Where(s => s.BusinessId == context.BusinessId && s.IsActive)
        //            .OrderByDescending(s => s.PhoneNumberId != null)
        //            .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)
        //            .ToListAsync();

        //        if (settings.Count == 0)
        //            return new NextStepResult { Success = false, Error = "WhatsApp settings not found for this business." };

        //        if (settings.Count > 1 && settings[0].PhoneNumberId == null)
        //            return new NextStepResult
        //            {
        //                Success = false,
        //                Error = "Multiple WhatsApp providers are active but no Default sender is set. Set a Default number or specify provider for flows."
        //            };

        //        var provider = settings[0].Provider; // must already be UPPERCASE: PINNACLE or META_CLOUD
        //        if (provider != "PINNACLE" && provider != "META_CLOUD")
        //            return new NextStepResult { Success = false, Error = $"Unsupported provider configured: {provider}" };

        //        // (Optional) if you ever want to pin a sender for flows, you can use settings[0].PhoneNumberId.
        //        string? phoneNumberId = null;

        //        // (Optional) build body/button components here if your step needs params.
        //        var components = new List<object>();

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        // 4) Send via explicit provider (deterministic signature)
        //        var sendResult = await _messageEngineService.SendPayloadAsync(
        //            context.BusinessId,
        //            provider,
        //            payload,
        //            phoneNumberId
        //        );

        //        // 5) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId,
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,
        //            MessageContent = templateName,                      // NOT NULL
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 7) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}
        public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        {
            try
            {
                // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
                if (context.ClickedButton != null &&
                    context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
                {
                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = context.BusinessId,
                        FlowId = context.FlowId,
                        StepId = context.SourceStepId,
                        StepName = "URL_REDIRECT",
                        MessageLogId = context.MessageLogId,
                        ButtonIndex = context.ButtonIndex,
                        ContactPhone = context.ContactPhone,
                        Success = true,
                        ExecutedAt = DateTime.UtcNow,
                        RequestId = context.RequestId
                    });
                    await _dbContext.SaveChangesAsync();

                    return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
                }

                // 2) Load next step in the same flow
                var targetStep = await _dbContext.CTAFlowSteps
                    .Include(s => s.ButtonLinks)
                    .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
                                              s.CTAFlowConfigId == context.FlowId);

                if (targetStep == null)
                    return new NextStepResult { Success = false, Error = "Target step not found." };

                if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
                    return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

                var templateName = targetStep.TemplateToSend.Trim();

                // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)
                var meta = await _templateFetcherService.GetTemplateByNameAsync(
                    context.BusinessId, templateName, includeButtons: true);

                if (meta == null)
                {
                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = context.BusinessId,
                        FlowId = context.FlowId,
                        StepId = targetStep.Id,
                        StepName = templateName,
                        MessageLogId = null,
                        ButtonIndex = context.ButtonIndex,
                        ContactPhone = context.ContactPhone,
                        Success = false,
                        ErrorMessage = $"Template '{templateName}' not found for this WABA.",
                        RawResponse = null,
                        ExecutedAt = DateTime.UtcNow,
                        RequestId = context.RequestId
                    });
                    await _dbContext.SaveChangesAsync();

                    return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
                }

                var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

                // 3.1) üß≠ Determine sender (provider + phoneNumberId) from context (source of truth)
                //      Fall back once to default active number for this business+provider if PhoneNumberId is missing.
                var provider = (context.Provider ?? string.Empty).Trim().ToUpperInvariant();
                if (provider != "PINNACLE" && provider != "META_CLOUD")
                    return new NextStepResult { Success = false, Error = "Provider is required for flow sends (PINNACLE or META_CLOUD)." };

                string? phoneNumberId = context.PhoneNumberId;

                if (string.IsNullOrWhiteSpace(phoneNumberId))
                {
                    // Fallback: pick the default/active number for this business + provider
                    phoneNumberId = await _dbContext.WhatsAppPhoneNumbers
                        .AsNoTracking()
                        .Where(n => n.BusinessId == context.BusinessId
                                    && n.IsActive
                                    && n.Provider.ToUpper() == provider)
                        .OrderByDescending(n => n.IsDefault)
                        .ThenBy(n => n.WhatsAppBusinessNumber)
                        .Select(n => n.PhoneNumberId)
                        .FirstOrDefaultAsync();

                    if (string.IsNullOrWhiteSpace(phoneNumberId))
                        return new NextStepResult { Success = false, Error = "Missing PhoneNumberId (no default sender configured for this provider)." };
                }

                // (Optional) build body/button components here if your step needs params.
                var components = new List<object>();

                var payload = new
                {
                    messaging_product = "whatsapp",
                    to = context.ContactPhone,
                    type = "template",
                    template = new
                    {
                        name = templateName,
                        language = new { code = languageCode },
                        components
                    }
                };

                // 4) Send via explicit provider (deterministic signature)
                var sendResult = await _messageEngineService.SendPayloadAsync(
                    context.BusinessId,
                    provider,               // explicit
                    payload,
                    phoneNumberId           // explicit
                );

                // 5) Snapshot buttons for robust click mapping later
                string? buttonBundleJson = null;
                if (targetStep.ButtonLinks?.Count > 0)
                {
                    var bundle = targetStep.ButtonLinks
                        .OrderBy(b => b.ButtonIndex)
                        .Select(b => new
                        {
                            i = b.ButtonIndex,
                            t = b.ButtonText ?? "",
                            ty = b.ButtonType ?? "QUICK_REPLY",
                            v = b.ButtonValue ?? "",
                            ns = b.NextStepId
                        })
                        .ToList();

                    buttonBundleJson = JsonSerializer.Serialize(bundle);
                }

                // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
                var messageLog = new MessageLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = context.BusinessId,
                    RecipientNumber = context.ContactPhone,
                    CTAFlowConfigId = context.FlowId,
                    CTAFlowStepId = targetStep.Id,
                    FlowVersion = context.Version,
                    Source = "flow",
                    RefMessageId = context.MessageLogId,
                    CreatedAt = DateTime.UtcNow,
                    Status = sendResult.Success ? "Sent" : "Failed",
                    MessageId = sendResult.MessageId,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ButtonBundleJson = buttonBundleJson,
                    MessageContent = templateName,                      // NOT NULL
                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
                };

                _dbContext.MessageLogs.Add(messageLog);

                // 7) Flow execution audit row
                _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = context.BusinessId,
                    FlowId = context.FlowId,
                    StepId = targetStep.Id,
                    StepName = templateName,
                    MessageLogId = messageLog.Id,
                    ButtonIndex = context.ButtonIndex,
                    ContactPhone = context.ContactPhone,
                    Success = sendResult.Success,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ExecutedAt = DateTime.UtcNow,
                    RequestId = context.RequestId
                });

                await _dbContext.SaveChangesAsync();

                return new NextStepResult
                {
                    Success = sendResult.Success,
                    Error = sendResult.ErrorMessage,
                    RedirectUrl = null
                };
            }
            catch (Exception ex)
            {
                return new NextStepResult { Success = false, Error = ex.Message };
            }
        }

    }
}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\ICTAFlowService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Helpers;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public interface ICTAFlowService
    {
        // ‚úÖ Used for flow creation and saving
        Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy);
        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);

        // ‚úÖ Load flows
        Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId);
        Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId);
        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);
        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);

        // ‚úÖ Load and manage flow steps
        Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId);

      
        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText,string buttonType,string currentTemplateName,Guid? campaignId = null);


        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);
        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);
        // ‚úÖ Runtime logic
        Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber);

        // ‚úÖ Flow management
        Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy);
        Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId);

        // ‚úÖ Editor loading (visual builder)
        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid id);

      
        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);
        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);

        public interface IFlowRuntimeService
        {
            Task<NextStepResult> ExecuteNextAsync(NextStepContext context);
        }
    }
}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\IFlowRuntimeService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CTAFlowBuilder.Models;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public interface IFlowRuntimeService
    {
        Task<NextStepResult> ExecuteNextAsync(NextStepContext context);

    }
    public record NextStepContext
    {
        public Guid BusinessId { get; set; }
        public Guid FlowId { get; set; }
        public int Version { get; set; }
        public Guid SourceStepId { get; set; }
        public Guid? TargetStepId { get; set; }
        public short ButtonIndex { get; set; }
        public Guid MessageLogId { get; set; }
        public string ContactPhone { get; set; } = string.Empty;
        public Guid RequestId { get; set; }
        public FlowButtonLink? ClickedButton { get; set; }
        public string? Provider { get; set; }          // "META_CLOUD" | "PINNACLE"
        public string? PhoneNumberId { get; set; }
    }

    public record NextStepResult
    {
        public bool Success { get; set; }
        public string? Error { get; set; }
        public string? RedirectUrl { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\Services_AllFileDump.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\CTAFlowService.cs 
====================================================== 
 
Ôªø// üìÑ File: Features/CTAFlowBuilder/Services/CTAFlowService.cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api.AuthModule.Models;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.MessagesEngine.DTOs;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat.api.Features.Tracking.Models;
using xbytechat.api.Helpers;
using xbytechat.api.WhatsAppSettings.DTOs;
using xbytechat_api.WhatsAppSettings.Services;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public class CTAFlowService : ICTAFlowService
    {
        private readonly AppDbContext _context;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;

        public CTAFlowService(AppDbContext context, IMessageEngineService messageEngineService,
            IWhatsAppTemplateFetcherService templateFetcherService
            )
        {
            _context = context;
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
        }

        public async Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy)
        {
            var flow = new CTAFlowConfig
            {
                Id = Guid.NewGuid(),
                FlowName = dto.FlowName,
                BusinessId = businessId,
                CreatedAt = DateTime.UtcNow,
                CreatedBy = createdBy,
                IsPublished = dto.IsPublished
            };

            foreach (var stepDto in dto.Steps)
            {
                var step = new CTAFlowStep
                {
                    Id = Guid.NewGuid(),
                    CTAFlowConfigId = flow.Id,
                    TriggerButtonText = stepDto.TriggerButtonText,
                    TriggerButtonType = stepDto.TriggerButtonType,
                    TemplateToSend = stepDto.TemplateToSend,
                    StepOrder = stepDto.StepOrder,
                    ButtonLinks = stepDto.ButtonLinks?.Select(link => new FlowButtonLink
                    {
                        ButtonText = link.ButtonText,
                        NextStepId = link.NextStepId
                    }).ToList() ?? new List<FlowButtonLink>()
                };

                flow.Steps.Add(step);
            }

            _context.CTAFlowConfigs.Add(flow);
            await _context.SaveChangesAsync();

            return flow.Id;
        }

        public async Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Include(f => f.Steps.OrderBy(s => s.StepOrder))
                .Where(f => f.BusinessId == businessId && f.IsActive && f.IsPublished)
                .FirstOrDefaultAsync();
        }

        public async Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Include(f => f.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .Where(f => f.BusinessId == businessId && f.IsPublished == false)
                .OrderByDescending(f => f.CreatedAt)
                .FirstOrDefaultAsync();
        }



        public async Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId)
        {
            return await _context.CTAFlowSteps
                .Where(s => s.CTAFlowConfigId == flowId)
                .OrderBy(s => s.StepOrder)
                .ToListAsync();
        }

        public async Task<CTAFlowStep?> MatchStepByButtonAsync(
            Guid businessId,
            string buttonText,
            string buttonType,
            string TemplateName,
            Guid? campaignId = null)
        {
            var normalizedButtonText = buttonText?.Trim().ToLower() ?? "";
            var normalizedButtonType = buttonType?.Trim().ToLower() ?? "";
            var normalizedTemplateName = TemplateName?.Trim().ToLower() ?? "";

            // 1Ô∏è‚É£ Try campaign-specific override
            if (campaignId.HasValue)
            {
                var overrideStep = await _context.CampaignFlowOverrides
                    .Where(o =>
                        o.CampaignId == campaignId &&
                        o.ButtonText.ToLower() == normalizedButtonText &&
                        o.TemplateName.ToLower() == normalizedTemplateName)
                    .FirstOrDefaultAsync();

                if (overrideStep != null)
                {
                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();

                    var matched = await _context.CTAFlowSteps
                        .Include(s => s.Flow)
                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);

                    if (matched != null)
                    {
                        Log.Information("üîÅ Override matched: Template '{Template}' ‚Üí Step '{StepId}'", overrideStep.OverrideNextTemplate, matched.Id);
                        return matched;
                    }

                    Log.Warning("‚ö†Ô∏è Override found for button '{Button}' but no matching step for template '{Template}'", normalizedButtonText, overrideStep.OverrideNextTemplate);
                }

                else
                {
                    Log.Information("üü° No campaign override found for button '{Button}' on template '{Template}'", normalizedButtonText, normalizedTemplateName);
                }
            }

            // 2Ô∏è‚É£ Fallback to standard flow logic
            var fallbackStep = await _context.CTAFlowSteps
                .Include(s => s.Flow)
                .Where(s =>
                    s.Flow.BusinessId == businessId &&
                    s.Flow.IsActive &&
                    s.Flow.IsPublished &&
                    s.TriggerButtonText.ToLower() == normalizedButtonText &&
                    s.TriggerButtonType.ToLower() == normalizedButtonType)
                .FirstOrDefaultAsync();

            if (fallbackStep != null)
            {
                Log.Information("‚úÖ Fallback flow step matched: StepId = {StepId}, Flow = {FlowName}", fallbackStep.Id, fallbackStep.Flow?.FlowName);
            }
            else
            {
                Log.Warning("‚ùå No fallback step matched for button '{ButtonText}' of type '{ButtonType}' in BusinessId: {BusinessId}", normalizedButtonText, normalizedButtonType, businessId);
            }

            return fallbackStep;
        }



        public async Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy)
        {
            try
            {
                // üî• 1. Remove existing published flow for this business
                var existingFlows = await _context.CTAFlowConfigs
                    .Where(f => f.BusinessId == businessId && f.IsPublished)
                    .ToListAsync();

                if (existingFlows.Any())
                {
                    _context.CTAFlowConfigs.RemoveRange(existingFlows);
                }

                // üå± 2. Create new flow config
                var flowConfig = new CTAFlowConfig
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    FlowName = "Published Flow - " + DateTime.UtcNow.ToString("yyyyMMdd-HHmm"),
                    IsPublished = true,
                    IsActive = true,
                    CreatedBy = createdBy,
                    CreatedAt = DateTime.UtcNow,
                    Steps = new List<CTAFlowStep>()
                };

                // üîÅ 3. Convert each step DTO to model
                foreach (var stepDto in steps)
                {
                    var step = new CTAFlowStep
                    {
                        Id = Guid.NewGuid(),
                        CTAFlowConfigId = flowConfig.Id,
                        TriggerButtonText = stepDto.TriggerButtonText,
                        TriggerButtonType = stepDto.TriggerButtonType,
                        TemplateToSend = stepDto.TemplateToSend,
                        StepOrder = stepDto.StepOrder,
                        ButtonLinks = stepDto.ButtonLinks.Select(bl => new FlowButtonLink
                        {
                            Id = Guid.NewGuid(),
                            ButtonText = bl.ButtonText,
                            NextStepId = bl.NextStepId,
                        }).ToList()
                    };

                    flowConfig.Steps.Add(step);
                }

                // üíæ 4. Save to DB
                await _context.CTAFlowConfigs.AddAsync(flowConfig);
                await _context.SaveChangesAsync();

                return ResponseResult.SuccessInfo("‚úÖ Flow published successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Error while publishing CTA flow.");
                return ResponseResult.ErrorInfo("‚ùå Could not publish flow.");
            }
        }

        public async Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy)
        {
            try
            {
                Log.Information("üß† SaveVisualFlow started | FlowName: {FlowName} | BusinessId: {BusinessId}", dto.FlowName, businessId);

                if (dto.Nodes == null || !dto.Nodes.Any())
                {
                    Log.Warning("‚ùå No nodes found in flow. Aborting save.");
                    return ResponseResult.ErrorInfo("‚ùå Cannot save an empty flow. Please add at least one step.");
                }

                // 1) Upsert FlowConfig
                var flow = await _context.CTAFlowConfigs
                    .FirstOrDefaultAsync(f => f.FlowName == dto.FlowName && f.BusinessId == businessId);

                if (flow == null)
                {
                    flow = new CTAFlowConfig
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = businessId,
                        FlowName = dto.FlowName,
                        CreatedBy = createdBy,
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow,
                        IsActive = true,
                        IsPublished = dto.IsPublished
                    };
                    _context.CTAFlowConfigs.Add(flow);
                    Log.Information("‚úÖ New FlowConfig created with ID: {Id}", flow.Id);
                }
                else
                {
                    // wipe old steps+links for a clean replace
                    var oldSteps = await _context.CTAFlowSteps
                        .Where(s => s.CTAFlowConfigId == flow.Id)
                        .Include(s => s.ButtonLinks)
                        .ToListAsync();

                    foreach (var step in oldSteps)
                        _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);

                    _context.CTAFlowSteps.RemoveRange(oldSteps);

                    flow.IsPublished = dto.IsPublished;
                    flow.UpdatedAt = DateTime.UtcNow;
                }

                // 2) Build Steps (map by incoming node.Id string)
                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);

                foreach (var (node, index) in dto.Nodes.Select((n, i) => (n, i)))
                {
                    if (string.IsNullOrWhiteSpace(node.Id))
                        continue;

                    var step = new CTAFlowStep
                    {
                        Id = Guid.NewGuid(),
                        CTAFlowConfigId = flow.Id,
                        StepOrder = index,
                        TemplateToSend = node.TemplateName,
                        TemplateType = node.TemplateType ?? "UNKNOWN",
                        TriggerButtonText = node.TriggerButtonText ?? "",
                        TriggerButtonType = node.TriggerButtonType ?? "cta",
                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,
                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,
                        UseProfileName = node.UseProfileName,
                        ProfileNameSlot = node.ProfileNameSlot ?? 1,
                        ButtonLinks = new List<FlowButtonLink>()
                    };

                    stepMap[node.Id] = step;
                    //if (step.UseProfileName && (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot < 1))
                    //    step.ProfileNameSlot = 1;
                    _context.CTAFlowSteps.Add(step);
                }

                // 3) Build Links PER NODE using buttons order (with Index), not per-edge blindly
                foreach (var node in dto.Nodes)
                {
                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))
                        continue;

                    // outgoing edges from this node
                    var outEdges = dto.Edges?.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList()
                                   ?? new List<FlowEdgeDto>();

                    // dedupe by button text to avoid ambiguous routing
                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

                    // stable ordering: by provided Index (0..N), then by Text
                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())
                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)
                        .ThenBy(b => b.Text ?? string.Empty)
                        .ToList();

                    short nextIdx = 0;

                    foreach (var btn in orderedButtons)
                    {
                        var text = (btn.Text ?? string.Empty).Trim();
                        if (string.IsNullOrEmpty(text))
                            continue;

                        if (!seenTexts.Add(text))
                        {
                            Log.Warning("‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; keeping first, skipping duplicates.", text, node.Id);
                            continue;
                        }

                        // match edge by SourceHandle == button text (how ReactFlow wires handles)
                        var edge = outEdges.FirstOrDefault(e =>
                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));
                        if (edge == null)
                        {
                            // no wire from this button ‚Üí skip link creation but keep button metadata in UI on reload
                            continue;
                        }

                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep))
                            continue;

                        // final index: prefer incoming payload Index; else fallback to a sequential counter
                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;
                        nextIdx = (short)(finalIndex + 1);

                        var link = new FlowButtonLink
                        {
                            Id = Guid.NewGuid(),
                            CTAFlowStepId = fromStep.Id,
                            NextStepId = toStep.Id,
                            ButtonText = text,
                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? "QUICK_REPLY" : btn.Type,
                            ButtonSubType = btn.SubType ?? string.Empty,
                            ButtonValue = btn.Value ?? string.Empty,
                            ButtonIndex = (short)finalIndex // üîë persist the index
                        };

                        _context.FlowButtonLinks.Add(link);
                        fromStep.ButtonLinks.Add(link);

                        // propagate trigger info on the target step for convenience
                        toStep.TriggerButtonText = text;
                        toStep.TriggerButtonType = (btn.Type ?? "QUICK_REPLY").ToLowerInvariant();
                    }
                }

                await _context.SaveChangesAsync();

                Log.Information("‚úÖ Flow '{Flow}' saved | Steps: {StepCount} | Links: {LinkCount}",
                    dto.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));

                return ResponseResult.SuccessInfo("‚úÖ Flow saved successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while saving flow");
                return ResponseResult.ErrorInfo("‚ùå Internal error while saving flow.");
            }
        }

        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId)
        {
            var flow = await _context.CTAFlowConfigs
                .Include(c => c.Steps)
                    .ThenInclude(s => s.ButtonLinks)
                .FirstOrDefaultAsync(c => c.Id == flowId && c.IsActive);

            if (flow == null) return null;

            var businessId = flow.BusinessId;

            // ‚úÖ Pre-fetch templates from Meta
            var templateMap = new Dictionary<string, TemplateMetadataDto>();

            foreach (var step in flow.Steps)
            {
                if (!string.IsNullOrWhiteSpace(step.TemplateToSend) && !templateMap.ContainsKey(step.TemplateToSend))
                {
                    try
                    {
                        var template = await _templateFetcherService.GetTemplateByNameAsync(
                            businessId,
                            step.TemplateToSend,
                            includeButtons: true
                        );

                        if (template != null)
                            templateMap[step.TemplateToSend] = template;
                    }
                    catch (Exception ex)
                    {
                        Log.Warning(ex, "‚ö†Ô∏è Failed to fetch template from Meta for {Template}", step.TemplateToSend);
                    }
                }
            }

            // ‚úÖ Map into ReactFlow-compatible structure
            var nodes = flow.Steps.Select(step =>
            {
                var template = templateMap.GetValueOrDefault(step.TemplateToSend);

                return new FlowNodeDto
                {
                    Id = step.Id.ToString(),
                    TemplateName = step.TemplateToSend,
                    MessageBody = template?.Body ?? "Message body preview...",
                    TriggerButtonText = step.TriggerButtonText,
                    TriggerButtonType = step.TriggerButtonType,
                    PositionX = step.PositionX ?? 100,
                    PositionY = step.PositionY ?? 100,

                    // ‚úÖ NEW: Include conditional logic
                    RequiredTag = step.RequiredTag,
                    RequiredSource = step.RequiredSource,

                    //Buttons = step.ButtonLinks.Select(link => new LinkButtonDto
                    //{
                    //    Text = link.ButtonText,
                    //    TargetNodeId = link.NextStepId.ToString()
                    //}).ToList()

                    UseProfileName = step.UseProfileName,
                    ProfileNameSlot = step.ProfileNameSlot,

                    Buttons = step.ButtonLinks.Select(link => new LinkButtonDto
                    {
                        Text = link.ButtonText,
                        Type = link.ButtonType,
                        SubType = link.ButtonSubType,
                        Value = link.ButtonValue,
                        TargetNodeId = link.NextStepId?.ToString()
                    }).ToList()

                             .Concat((template?.ButtonParams ?? new List<ButtonMetadataDto>())
                                 .Where(btn => !step.ButtonLinks.Any(bl => bl.ButtonText == btn.Text))
                                 .Select(btn => new LinkButtonDto
                                 {
                                     Text = btn.Text,
                                     TargetNodeId = null
                                 })).ToList()
                };

            }).ToList();

            return new SaveVisualFlowDto
            {
                FlowName = flow.FlowName,
                IsPublished = flow.IsPublished,
                Nodes = nodes,
                Edges = flow.Steps
                        .SelectMany(step =>
                            step.ButtonLinks.Select(link => new FlowEdgeDto
                            {
                                FromNodeId = step.Id.ToString(),
                                ToNodeId = link.NextStepId.ToString(),
                                SourceHandle = link.ButtonText // ‚úÖ important
                            })
                        ).ToList()

            };
        }


        public async Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId)
        {
            var flow = await _context.CTAFlowConfigs
                .Where(f => f.Id == id && f.BusinessId == businessId)
                .FirstOrDefaultAsync();

            if (flow == null)
                return ResponseResult.ErrorInfo("‚ùå Flow not found or does not belong to you.");

            _context.CTAFlowConfigs.Remove(flow);
            await _context.SaveChangesAsync();

            return ResponseResult.SuccessInfo("‚úÖ Flow deleted successfully.");
        }
        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Where(f => f.BusinessId == businessId && f.IsPublished)
                .OrderByDescending(f => f.CreatedAt)
                .Select(f => new VisualFlowSummaryDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    IsPublished = f.IsPublished,
                    CreatedAt = f.CreatedAt
                })
                .ToListAsync();
        }

        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)
        {
            return await _context.CTAFlowConfigs
                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)
                .OrderByDescending(f => f.CreatedAt)
                .Select(f => new VisualFlowSummaryDto
                {
                    Id = f.Id,
                    FlowName = f.FlowName,
                    CreatedAt = f.CreatedAt,
                    IsPublished = f.IsPublished
                })
                .ToListAsync();
        }

        public async Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber)
        {
            // Log.Information("üöÄ Executing follow-up for BusinessId: {BusinessId}, CurrentStepId: {StepId}", businessId);
            if (currentStep == null)
            {
                Log.Warning("‚ö†Ô∏è Cannot execute follow-up. Current step is null.");
                return ResponseResult.ErrorInfo("Current step not found.");
            }

            // üß† Step: Look through all button links for a valid NextStepId
            var nextLink = currentStep.ButtonLinks.FirstOrDefault(link => link.NextStepId != null);

            if (nextLink == null)
            {
                Log.Information("‚ÑπÔ∏è No NextStepId defined in any ButtonLinks for StepId: {StepId}", currentStep.Id);
                return ResponseResult.SuccessInfo("No follow-up step to execute.");
            }

            // üîç Fetch the next step using new logic (via CTAFlowConfig + Steps)
            // 1Ô∏è‚É£ Try to resolve with smart condition check
            var followUpStep = await GetChainedStepAsync(businessId, nextLink.NextStepId, null, null);

            if (followUpStep == null)
            {
                Log.Warning("‚ùå Follow-up step skipped due to condition mismatch ‚Üí StepId: {StepId}", nextLink.NextStepId);

                // 2Ô∏è‚É£ Optional fallback: Try same flow ‚Üí Any step without conditions
                var flow = await _context.CTAFlowConfigs
                    .Include(f => f.Steps)
                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.IsPublished);

                followUpStep = flow?.Steps
                    .Where(s => string.IsNullOrEmpty(s.RequiredTag) && string.IsNullOrEmpty(s.RequiredSource))
                    .OrderBy(s => s.StepOrder)
                    .FirstOrDefault();

                if (followUpStep != null)
                {
                    Log.Information("üîÅ Fallback step selected ‚Üí StepId: {StepId}, Template: {Template}",
                        followUpStep.Id, followUpStep.TemplateToSend);
                }
                else
                {
                    Log.Warning("üö´ No suitable fallback found in flow. Skipping follow-up.");
                    return ResponseResult.SuccessInfo("No matching follow-up step based on user context.");
                }
            }


            // üì® Send the follow-up message using the TemplateToSend field
            try
            {
                var template = followUpStep.TemplateToSend;

                Log.Information("üì§ Sending follow-up message ‚Üí Template: {Template}, To: {Recipient}", template, recipientNumber);

                // üß™ Replace this with actual message engine call
                var sendDto = new SimpleTemplateMessageDto
                {
                    RecipientNumber = recipientNumber,
                    TemplateName = template,
                    TemplateParameters = new List<string>() // Add dynamic params later if needed
                };

                var sendResult = await _messageEngineService
     .SendTemplateMessageSimpleAsync(businessId, sendDto);

                if (!sendResult.Success)
                {
                    Log.Warning("‚ùå Follow-up message send failed ‚Üí {Template}", template);
                    return ResponseResult.ErrorInfo("Follow-up send failed.", sendResult.ErrorMessage);
                }


                return ResponseResult.SuccessInfo($"Follow-up message sent using template: {template}", null, sendResult.RawResponse);

            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Error sending follow-up message for StepId: {StepId}", followUpStep.Id);
                return ResponseResult.ErrorInfo("Failed to send follow-up.");
            }
        }
        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)
        {
            return GetChainedStepAsync(businessId, nextStepId, null, null); // Forward to full logic
        }

        // ‚úÖ Extended logic with condition check (Tag + Source)
        public async Task<CTAFlowStep?> GetChainedStepAsync(
            Guid businessId,
            Guid? nextStepId,
            TrackingLog? trackingLog = null,
            Contact? contact = null)
        {
            if (nextStepId == null)
            {
                Log.Information("‚ÑπÔ∏è No NextStepId provided ‚Äî skipping follow-up.");
                return null;
            }

            try
            {
                var flow = await _context.CTAFlowConfigs
                    .Include(f => f.Steps)
                    .FirstOrDefaultAsync(f =>
                        f.BusinessId == businessId &&
                        f.Steps.Any(s => s.Id == nextStepId));

                if (flow == null)
                {
                    Log.Warning("‚ö†Ô∏è No flow found containing NextStepId: {NextStepId} for business: {BusinessId}", nextStepId, businessId);
                    return null;
                }

                var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);

                if (followUpStep == null)
                {
                    Log.Warning("‚ùå Step matched in flow but not found in step list: {NextStepId}", nextStepId);
                    return null;
                }

                // ‚úÖ Check RequiredTag / Source match
                if (trackingLog != null)
                {
                    var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);

                    if (!isMatch)
                    {
                        Log.Information("üö´ Step {StepId} skipped due to condition mismatch [Tag: {Tag}, Source: {Source}]",
                            followUpStep.Id, followUpStep.RequiredTag, followUpStep.RequiredSource);
                        return null;
                    }
                }

                Log.Information("‚úÖ Follow-up step found and matched ‚Üí StepId: {StepId}, Template: {Template}",
                    followUpStep.Id, followUpStep.TemplateToSend);

                return followUpStep;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while fetching chained step for NextStepId: {NextStepId}", nextStepId);
                throw;
            }
        }

        // ‚úÖ Optional helper for resolving from TrackingLogId
        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(
            Guid businessId,
            Guid? nextStepId,
            Guid? trackingLogId)
        {
            var log = await _context.TrackingLogs
                .Include(l => l.Contact)
                    .ThenInclude(c => c.ContactTags)
                        .ThenInclude(ct => ct.Tag)
                .FirstOrDefaultAsync(l => l.Id == trackingLogId);

            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);
        }
       
        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)
        {
            try
            {
                Log.Information("üö¶ Executing Visual Flow ‚Üí StepId: {StepId} | TrackingLogId: {TrackingLogId}", startStepId, trackingLogId);

                var log = await _context.TrackingLogs
                    .Include(l => l.Contact)
                        .ThenInclude(c => c.ContactTags)
                            .ThenInclude(ct => ct.Tag)
                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);

                if (log == null)
                {
                    Log.Warning("‚ùå TrackingLog not found for ID: {TrackingLogId}", trackingLogId);
                    return ResponseResult.ErrorInfo("Tracking log not found.");
                }

                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);

                if (step == null)
                {
                    Log.Warning("‚ùå No flow step matched or conditions failed ‚Üí StepId: {StepId}", startStepId);
                    return ResponseResult.ErrorInfo("Step conditions not satisfied.");
                }

                ResponseResult sendResult;

                // This switch block remains unchanged
                switch (step.TemplateType?.ToLower())
                {
                    case "image_template":
                        var imageDto = new ImageTemplateMessageDto
                        {
                            BusinessId = businessId,
                            RecipientNumber = log.ContactPhone ?? "",
                            TemplateName = step.TemplateToSend,
                            LanguageCode = "en_US"
                        };
                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);
                        break;

                    case "text_template":
                    default:
                        var textDto = new SimpleTemplateMessageDto
                        {
                            RecipientNumber = log.ContactPhone ?? "",
                            TemplateName = step.TemplateToSend,
                            TemplateParameters = new()
                        };
                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);
                        break;
                }

                // ‚úÖ 2. SAVE the new ID to the log
                var executionLog = new FlowExecutionLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = businessId,
                    StepId = step.Id,
                    FlowId = step.CTAFlowConfigId,
                    CampaignSendLogId = campaignSendLogId, // <-- THE NEW VALUE IS SAVED HERE
                    TrackingLogId = trackingLogId,
                    ContactPhone = log.ContactPhone,
                    TriggeredByButton = step.TriggerButtonText,
                    TemplateName = step.TemplateToSend,
                    TemplateType = step.TemplateType,
                    Success = sendResult.Success,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ExecutedAt = DateTime.UtcNow
                };

                _context.FlowExecutionLogs.Add(executionLog);
                await _context.SaveChangesAsync();

                if (sendResult.Success)
                {
                    Log.Information("‚úÖ Flow step executed ‚Üí Template: {Template} sent to {To}", step.TemplateToSend, log.ContactPhone);
                }
                else
                {
                    Log.Warning("‚ùå Failed to send template from flow ‚Üí {Reason}", sendResult.ErrorMessage);
                }

                return ResponseResult.SuccessInfo($"Flow step executed. Sent: {sendResult.Success}", null, sendResult.RawResponse);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception during ExecuteVisualFlowAsync()");
                return ResponseResult.ErrorInfo("Internal error during flow execution.");
            }
        }

        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)
        {
            return await _context.FlowButtonLinks
     .Where(l => l.CTAFlowStepId == sourceStepId
              && l.NextStepId != null
              && l.Step.CTAFlowConfigId == flowId
              && l.ButtonIndex == buttonIndex)
     .SingleOrDefaultAsync();

        }

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\ExtrackAllFiles.bat 
====================================================== 
 
@echo off
REM This script will find all files and output their name and content into one file.
REM The output file will be named [FolderName]_AllFileDump.txt.

REM Get the current folder's name and set it as the output file name with the custom suffix
for %%I in ("%cd%") do set "outputFile=%%~nI_AllFileDump.txt"

REM Clear the output file to start fresh
> "%outputFile%" (echo Folder and File Content Report)
echo. >> "%outputFile%"

REM Loop through all files in the current directory and subdirectories
for /R . %%F in (*.*) do (
    echo ====================================================== >> "%outputFile%"
    echo FILE: %%F >> "%outputFile%"
    echo ====================================================== >> "%outputFile%"
    echo. >> "%outputFile%"
    type "%%F" >> "%outputFile%" 2>nul
    echo. >> "%outputFile%"
    echo. >> "%outputFile%"
)

echo Finished! All content has been extracted to %outputFile% 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\FlowRuntimeService.cs 
====================================================== 
 
Ôªøusing Microsoft.EntityFrameworkCore;
using System.Text.Json;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat_api.WhatsAppSettings.Services; 

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public class FlowRuntimeService : IFlowRuntimeService
    {
        private readonly AppDbContext _dbContext;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;

        
        public FlowRuntimeService(
            AppDbContext dbContext,
            IMessageEngineService messageEngineService,
            IWhatsAppTemplateFetcherService templateFetcherService)
        {
            _dbContext = dbContext;
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;
        }

        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult
        //            {
        //                Success = true,
        //                RedirectUrl = context.ClickedButton.ButtonValue
        //            };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);

        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template to pick the correct language and catch 132001 early
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            // log a failed flow execution (no WA call attempted)
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult
        //            {
        //                Success = false,
        //                Error = $"Template '{templateName}' not found or not approved."
        //            };
        //        }

        //        // prefer the template‚Äôs actual language over hard-coding "en_US"
        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // (Optional) build body/button components here if your step needs params.
        //        // Quick-reply buttons require NO components; dynamic URL buttons would.
        //        var components = new List<object>();

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        var sendResult = await _messageEngineService.SendPayloadAsync(context.BusinessId, payload);

        //        // 4) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 5) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId, // correlate to the parent WA msg (if any)
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,

        //            // üî¥ This was missing before ‚Üí caused NOT NULL violation
        //            MessageContent = templateName,

        //            // good hygiene: stamp SentAt on success
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null,
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 6) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId,

        //            // Optional (only if your entity has these columns):
        //            // TemplateName = templateName,
        //            // TemplateType = targetStep.TemplateType,
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}

        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        //{
        //    try
        //    {
        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
        //        if (context.ClickedButton != null &&
        //            context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = context.SourceStepId,
        //                StepName = "URL_REDIRECT",
        //                MessageLogId = context.MessageLogId,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = true,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
        //        }

        //        // 2) Load next step in the same flow
        //        var targetStep = await _dbContext.CTAFlowSteps
        //            .Include(s => s.ButtonLinks)
        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
        //                                      s.CTAFlowConfigId == context.FlowId);

        //        if (targetStep == null)
        //            return new NextStepResult { Success = false, Error = "Target step not found." };

        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
        //            return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

        //        var templateName = targetStep.TemplateToSend.Trim();

        //        // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)
        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(
        //            context.BusinessId, templateName, includeButtons: true);

        //        if (meta == null)
        //        {
        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //            {
        //                Id = Guid.NewGuid(),
        //                BusinessId = context.BusinessId,
        //                FlowId = context.FlowId,
        //                StepId = targetStep.Id,
        //                StepName = templateName,
        //                MessageLogId = null,
        //                ButtonIndex = context.ButtonIndex,
        //                ContactPhone = context.ContactPhone,
        //                Success = false,
        //                ErrorMessage = $"Template '{templateName}' not found for this WABA.",
        //                RawResponse = null,
        //                ExecutedAt = DateTime.UtcNow,
        //                RequestId = context.RequestId
        //            });
        //            await _dbContext.SaveChangesAsync();

        //            return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
        //        }

        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

        //        // 3.1) üîé Resolve provider deterministically from settings
        //        //     prefer a provider that already mirrors a Default sender (PhoneNumberId != null)
        //        var settings = await _dbContext.WhatsAppSettings
        //            .AsNoTracking()
        //            .Where(s => s.BusinessId == context.BusinessId && s.IsActive)
        //            .OrderByDescending(s => s.PhoneNumberId != null)
        //            .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)
        //            .ToListAsync();

        //        if (settings.Count == 0)
        //            return new NextStepResult { Success = false, Error = "WhatsApp settings not found for this business." };

        //        if (settings.Count > 1 && settings[0].PhoneNumberId == null)
        //            return new NextStepResult
        //            {
        //                Success = false,
        //                Error = "Multiple WhatsApp providers are active but no Default sender is set. Set a Default number or specify provider for flows."
        //            };

        //        var provider = settings[0].Provider; // must already be UPPERCASE: PINNACLE or META_CLOUD
        //        if (provider != "PINNACLE" && provider != "META_CLOUD")
        //            return new NextStepResult { Success = false, Error = $"Unsupported provider configured: {provider}" };

        //        // (Optional) if you ever want to pin a sender for flows, you can use settings[0].PhoneNumberId.
        //        string? phoneNumberId = null;

        //        // (Optional) build body/button components here if your step needs params.
        //        var components = new List<object>();

        //        var payload = new
        //        {
        //            messaging_product = "whatsapp",
        //            to = context.ContactPhone,
        //            type = "template",
        //            template = new
        //            {
        //                name = templateName,
        //                language = new { code = languageCode },
        //                components
        //            }
        //        };

        //        // 4) Send via explicit provider (deterministic signature)
        //        var sendResult = await _messageEngineService.SendPayloadAsync(
        //            context.BusinessId,
        //            provider,
        //            payload,
        //            phoneNumberId
        //        );

        //        // 5) Snapshot buttons for robust click mapping later
        //        string? buttonBundleJson = null;
        //        if (targetStep.ButtonLinks?.Count > 0)
        //        {
        //            var bundle = targetStep.ButtonLinks
        //                .OrderBy(b => b.ButtonIndex)
        //                .Select(b => new
        //                {
        //                    i = b.ButtonIndex,
        //                    t = b.ButtonText ?? "",
        //                    ty = b.ButtonType ?? "QUICK_REPLY",
        //                    v = b.ButtonValue ?? "",
        //                    ns = b.NextStepId
        //                })
        //                .ToList();

        //            buttonBundleJson = JsonSerializer.Serialize(bundle);
        //        }

        //        // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
        //        var messageLog = new MessageLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            RecipientNumber = context.ContactPhone,
        //            CTAFlowConfigId = context.FlowId,
        //            CTAFlowStepId = targetStep.Id,
        //            FlowVersion = context.Version,
        //            Source = "flow",
        //            RefMessageId = context.MessageLogId,
        //            CreatedAt = DateTime.UtcNow,
        //            Status = sendResult.Success ? "Sent" : "Failed",
        //            MessageId = sendResult.MessageId,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ButtonBundleJson = buttonBundleJson,
        //            MessageContent = templateName,                      // NOT NULL
        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
        //        };

        //        _dbContext.MessageLogs.Add(messageLog);

        //        // 7) Flow execution audit row
        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
        //        {
        //            Id = Guid.NewGuid(),
        //            BusinessId = context.BusinessId,
        //            FlowId = context.FlowId,
        //            StepId = targetStep.Id,
        //            StepName = templateName,
        //            MessageLogId = messageLog.Id,
        //            ButtonIndex = context.ButtonIndex,
        //            ContactPhone = context.ContactPhone,
        //            Success = sendResult.Success,
        //            ErrorMessage = sendResult.ErrorMessage,
        //            RawResponse = sendResult.RawResponse,
        //            ExecutedAt = DateTime.UtcNow,
        //            RequestId = context.RequestId
        //        });

        //        await _dbContext.SaveChangesAsync();

        //        return new NextStepResult
        //        {
        //            Success = sendResult.Success,
        //            Error = sendResult.ErrorMessage,
        //            RedirectUrl = null
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new NextStepResult { Success = false, Error = ex.Message };
        //    }
        //}
        public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)
        {
            try
            {
                // 1) URL-only buttons ‚Üí no WA send, just record and return redirect
                if (context.ClickedButton != null &&
                    context.ClickedButton.ButtonType?.Equals("URL", StringComparison.OrdinalIgnoreCase) == true)
                {
                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = context.BusinessId,
                        FlowId = context.FlowId,
                        StepId = context.SourceStepId,
                        StepName = "URL_REDIRECT",
                        MessageLogId = context.MessageLogId,
                        ButtonIndex = context.ButtonIndex,
                        ContactPhone = context.ContactPhone,
                        Success = true,
                        ExecutedAt = DateTime.UtcNow,
                        RequestId = context.RequestId
                    });
                    await _dbContext.SaveChangesAsync();

                    return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };
                }

                // 2) Load next step in the same flow
                var targetStep = await _dbContext.CTAFlowSteps
                    .Include(s => s.ButtonLinks)
                    .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&
                                              s.CTAFlowConfigId == context.FlowId);

                if (targetStep == null)
                    return new NextStepResult { Success = false, Error = "Target step not found." };

                if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))
                    return new NextStepResult { Success = false, Error = "Target step has no template assigned." };

                var templateName = targetStep.TemplateToSend.Trim();

                // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)
                var meta = await _templateFetcherService.GetTemplateByNameAsync(
                    context.BusinessId, templateName, includeButtons: true);

                if (meta == null)
                {
                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = context.BusinessId,
                        FlowId = context.FlowId,
                        StepId = targetStep.Id,
                        StepName = templateName,
                        MessageLogId = null,
                        ButtonIndex = context.ButtonIndex,
                        ContactPhone = context.ContactPhone,
                        Success = false,
                        ErrorMessage = $"Template '{templateName}' not found for this WABA.",
                        RawResponse = null,
                        ExecutedAt = DateTime.UtcNow,
                        RequestId = context.RequestId
                    });
                    await _dbContext.SaveChangesAsync();

                    return new NextStepResult { Success = false, Error = $"Template '{templateName}' not found or not approved." };
                }

                var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? "en_US" : meta.Language;

                // 3.1) üß≠ Determine sender (provider + phoneNumberId) from context (source of truth)
                //      Fall back once to default active number for this business+provider if PhoneNumberId is missing.
                var provider = (context.Provider ?? string.Empty).Trim().ToUpperInvariant();
                if (provider != "PINNACLE" && provider != "META_CLOUD")
                    return new NextStepResult { Success = false, Error = "Provider is required for flow sends (PINNACLE or META_CLOUD)." };

                string? phoneNumberId = context.PhoneNumberId;

                if (string.IsNullOrWhiteSpace(phoneNumberId))
                {
                    // Fallback: pick the default/active number for this business + provider
                    phoneNumberId = await _dbContext.WhatsAppPhoneNumbers
                        .AsNoTracking()
                        .Where(n => n.BusinessId == context.BusinessId
                                    && n.IsActive
                                    && n.Provider.ToUpper() == provider)
                        .OrderByDescending(n => n.IsDefault)
                        .ThenBy(n => n.WhatsAppBusinessNumber)
                        .Select(n => n.PhoneNumberId)
                        .FirstOrDefaultAsync();

                    if (string.IsNullOrWhiteSpace(phoneNumberId))
                        return new NextStepResult { Success = false, Error = "Missing PhoneNumberId (no default sender configured for this provider)." };
                }

                // (Optional) build body/button components here if your step needs params.
                var components = new List<object>();

                var payload = new
                {
                    messaging_product = "whatsapp",
                    to = context.ContactPhone,
                    type = "template",
                    template = new
                    {
                        name = templateName,
                        language = new { code = languageCode },
                        components
                    }
                };

                // 4) Send via explicit provider (deterministic signature)
                var sendResult = await _messageEngineService.SendPayloadAsync(
                    context.BusinessId,
                    provider,               // explicit
                    payload,
                    phoneNumberId           // explicit
                );

                // 5) Snapshot buttons for robust click mapping later
                string? buttonBundleJson = null;
                if (targetStep.ButtonLinks?.Count > 0)
                {
                    var bundle = targetStep.ButtonLinks
                        .OrderBy(b => b.ButtonIndex)
                        .Select(b => new
                        {
                            i = b.ButtonIndex,
                            t = b.ButtonText ?? "",
                            ty = b.ButtonType ?? "QUICK_REPLY",
                            v = b.ButtonValue ?? "",
                            ns = b.NextStepId
                        })
                        .ToList();

                    buttonBundleJson = JsonSerializer.Serialize(bundle);
                }

                // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps
                var messageLog = new MessageLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = context.BusinessId,
                    RecipientNumber = context.ContactPhone,
                    CTAFlowConfigId = context.FlowId,
                    CTAFlowStepId = targetStep.Id,
                    FlowVersion = context.Version,
                    Source = "flow",
                    RefMessageId = context.MessageLogId,
                    CreatedAt = DateTime.UtcNow,
                    Status = sendResult.Success ? "Sent" : "Failed",
                    MessageId = sendResult.MessageId,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ButtonBundleJson = buttonBundleJson,
                    MessageContent = templateName,                      // NOT NULL
                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null
                };

                _dbContext.MessageLogs.Add(messageLog);

                // 7) Flow execution audit row
                _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog
                {
                    Id = Guid.NewGuid(),
                    BusinessId = context.BusinessId,
                    FlowId = context.FlowId,
                    StepId = targetStep.Id,
                    StepName = templateName,
                    MessageLogId = messageLog.Id,
                    ButtonIndex = context.ButtonIndex,
                    ContactPhone = context.ContactPhone,
                    Success = sendResult.Success,
                    ErrorMessage = sendResult.ErrorMessage,
                    RawResponse = sendResult.RawResponse,
                    ExecutedAt = DateTime.UtcNow,
                    RequestId = context.RequestId
                });

                await _dbContext.SaveChangesAsync();

                return new NextStepResult
                {
                    Success = sendResult.Success,
                    Error = sendResult.ErrorMessage,
                    RedirectUrl = null
                };
            }
            catch (Exception ex)
            {
                return new NextStepResult { Success = false, Error = ex.Message };
            }
        }

    }
}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\ICTAFlowService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CTAFlowBuilder.DTOs;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Helpers;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public interface ICTAFlowService
    {
        // ‚úÖ Used for flow creation and saving
        Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy);
        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);

        // ‚úÖ Load flows
        Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId);
        Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId);
        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);
        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);

        // ‚úÖ Load and manage flow steps
        Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId);

      
        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText,string buttonType,string currentTemplateName,Guid? campaignId = null);


        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);
        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);
        // ‚úÖ Runtime logic
        Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber);

        // ‚úÖ Flow management
        Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy);
        Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId);

        // ‚úÖ Editor loading (visual builder)
        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid id);

      
        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);
        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);

        public interface IFlowRuntimeService
        {
            Task<NextStepResult> ExecuteNextAsync(NextStepContext context);
        }
    }
}


 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\IFlowRuntimeService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CTAFlowBuilder.Models;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public interface IFlowRuntimeService
    {
        Task<NextStepResult> ExecuteNextAsync(NextStepContext context);

    }
    public record NextStepContext
    {
        public Guid BusinessId { get; set; }
        public Guid FlowId { get; set; }
        public int Version { get; set; }
        public Guid SourceStepId { get; set; }
        public Guid? TargetStepId { get; set; }
        public short ButtonIndex { get; set; }
        public Guid MessageLogId { get; set; }
        public string ContactPhone { get; set; } = string.Empty;
        public Guid RequestId { get; set; }
        public FlowButtonLink? ClickedButton { get; set; }
        public string? Provider { get; set; }          // "META_CLOUD" | "PINNACLE"
        public string? PhoneNumberId { get; set; }
    }

    public record NextStepResult
    {
        public bool Success { get; set; }
        public string? Error { get; set; }
        public string? RedirectUrl { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\Services_AllFileDump.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\CTAFlowService.cs 
======= 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\StepMatchingHelper.cs 
====================================================== 
 
Ôªøusing Serilog;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.Tracking.Models;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public static class StepMatchingHelper
    {
        public static bool IsStepMatched(CTAFlowStep step, TrackingLog log, Contact? contact)
        {
            if (!string.IsNullOrWhiteSpace(step.RequiredSource) &&
                !string.Equals(step.RequiredSource, log.SourceType, StringComparison.OrdinalIgnoreCase))
            {
                Log.Information("üö´ Step [{StepId}] skipped: RequiredSource '{Required}' ‚â† ClickedSource '{Actual}'",
                    step.Id, step.RequiredSource, log.SourceType);
                return false;
            }

            if (!string.IsNullOrWhiteSpace(step.RequiredTag))
            {
                if (contact == null || contact.ContactTags == null || !contact.ContactTags.Any())
                {
                    Log.Information("üö´ Step [{StepId}] skipped: Contact or Tags missing (RequiredTag: {RequiredTag})",
                        step.Id, step.RequiredTag);
                    return false;
                }

                var hasTag = contact.ContactTags.Any(ct =>
                    string.Equals(ct.Tag.Name, step.RequiredTag, StringComparison.OrdinalIgnoreCase));

                if (!hasTag)
                {
                    var contactTags = string.Join(", ", contact.ContactTags.Select(ct => ct.Tag.Name));
                    Log.Information("üö´ Step [{StepId}] skipped: Contact tags [{Tags}] do not include RequiredTag '{Required}'",
                        step.Id, contactTags, step.RequiredTag);
                    return false;
                }
            }

            return true;
        }

    }
}
 
 
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CTAFlowBuilder\Services\StepMatchingHelper.cs 
====================================================== 
 
Ôªøusing Serilog;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CTAFlowBuilder.Models;
using xbytechat.api.Features.Tracking.Models;

namespace xbytechat.api.Features.CTAFlowBuilder.Services
{
    public static class StepMatchingHelper
    {
        public static bool IsStepMatched(CTAFlowStep step, TrackingLog log, Contact? contact)
        {
            if (!string.IsNullOrWhiteSpace(step.RequiredSource) &&
                !string.Equals(step.RequiredSource, log.SourceType, StringComparison.OrdinalIgnoreCase))
            {
                Log.Information("üö´ Step [{StepId}] skipped: RequiredSource '{Required}' ‚â† ClickedSource '{Actual}'",
                    step.Id, step.RequiredSource, log.SourceType);
                return false;
            }

            if (!string.IsNullOrWhiteSpace(step.RequiredTag))
            {
                if (contact == null || contact.ContactTags == null || !contact.ContactTags.Any())
                {
                    Log.Information("üö´ Step [{StepId}] skipped: Contact or Tags missing (RequiredTag: {RequiredTag})",
                        step.Id, step.RequiredTag);
                    return false;
                }

                var hasTag = contact.ContactTags.Any(ct =>
                    string.Equals(ct.Tag.Name, step.RequiredTag, StringComparison.OrdinalIgnoreCase));

                if (!hasTag)
                {
                    var contactTags = string.Join(", ", contact.ContactTags.Select(ct => ct.Tag.Name));
                    Log.Information("üö´ Step [{StepId}] skipped: Contact tags [{Tags}] do not include RequiredTag '{Required}'",
                        step.Id, contactTags, step.RequiredTag);
                    return false;
                }
            }

            return true;
        }

    }
}
 
 
