{
  "name": "xbytechat-api",
  "part": 1,
  "of": 9,
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/appsettings.Development.json",
      "sha256": "62e4b655f67314ef6d814af9ecb8e6ab369b13f4638def48761547d37043e4af",
      "language": "json",
      "size": 2930,
      "content": "{\n  \"ConnectionStrings\": {\n\n    // Locl Host Coonection string \n  // \"DefaultConnection\": \"Host=localhost;Port=5432;Database=xplorebyte_DB;Username=postgres;Password=xplore2025\"\n    //- Amazon db connection string\n    // \"DefaultConnection\": \"Host=database-1.cowtv1vdzblr.us-east-1.rds.amazonaws.com;Port=5432;Database=AmazonLeadsConeDb;Username=postgres;Password=qLCvFQV4FB6e47jcM1sT; SSL Mode=Require;Trust Server Certificate=true;Timeout=15;Command Timeout=30;Keepalive=30;Pooling=true;Include Error Detail=true;\"\n\n    // Hostinger\n    //\"DefaultConnection\": \"Host=srv1018586.hstgr.cloud;Port=5432;Database=postgresql-database-dwoc84csosgocwocw4csokgs;Username=postgres;Password=aXe0skpAFOBLA0QX6r4TizM17QSRR71SyQYKBXrpos3KFpiQAq0NvMZhxLOfhj0V; SSL Mode=Require;Trust Server Certificate=true;Pooling=true;Timeout=15;Command Timeout=30;Keepalive=30;\",\n  \"DefaultConnection\": \"Host=srv1018586.hstgr.cloud;Port=5432;Database=postgresql-database-jow4kcw0s8s8o8c0og4scok8;Username=postgres;Password=aZBGAoMYGlmiWJFHZOQrE6sro1PYWsoBIf8RLDhjBbghJTQjcMNCTiAdSUNNqGNo; SSL Mode=Require;Trust Server Certificate=true;Pooling=true;Timeout=15;Command Timeout=30;Keepalive=30;\"\n\n  },\n  \"Cors\": {\n    \"AllowedOrigins\": [\n      \"http://localhost:3000\",\n      \"https://app.xplorebytesolutions.com\",\n      \"http://localhost:7113\",\n      \"https://localhost:7113\",\n      \"https://localhost:7114\"\n    ]\n  },\n  \"JwtSettings\": {\n    \"Issuer\": \"xbytechat-api\",\n    \"Audience\": \"xbytechat-client\",\n    \"SecretKey\": \"dev-sevictcret-key-only-cliff-0a-for-tevictsting\"\n  },\n  \"WhatsApp\": {\n    \"ApiKey\": \"EAAIo1fBYKV8BO6tGEYsdH461nPYdyJzlMorCAHYtiasvUorEYUcGCaRdzy0IMhh1D6h1ZBYHLbNWbvF2FrvlaviZCwhZCPeGKE2t62BTp77Ha1IwGvNlEeagFiZBiU7LrkMw11fOPng2PgDphl2vp3DTyZBtICJkhy6ikPGvylZA5aM2oWLoIBS6zZB6vOygIFLmgFKoC7lqYPpP8JydDJI9bVN6Kx73CZAtGS9abjGxnHAZD\",\n    \"PhoneNumberId\": \"673199269218077\",\n    \"MetaToken\": \"SPYdyJzlMorCAHYtiayJzlMorUoryJzlMorEYUcGCaRdzy0IMhhK\", //\"SPYdyJzlMorCAHYtiayJzlMorUoryJzlMorEYUcGCaRdzy0IMhhK\"\n    \"WABA_ID\": \"744548247936621\",\n    \"ApiBaseUrl\": \"https://077903ad22d3.ngrok-free.app\",\n    \"MetaVerifyToken\": \"set-a-strong-secret\",\n    \"Templates\": {\n      \"SyncIntervalMinutes\": 360\n    }\n  },\n  \"Tracking\": {\n    \"BaseUrl\": \"https://app.xplorebytesolutions.com\", // dev: your ngrok or localhost (don‚Äôt commit ngrok)\n    \"Secret\": \"replace-with-64+char-random-secret\" // use a long random string\n  },\n  \"FlowClickTokens\": {\n    \"Secret\": \"useVaVveryGlongYrandomFstringQhere\",\n    \"BaseUrl\": \"https://app.xplorebytesolutions.com\",\n    \"TtlHours\": 72\n  },\n\n  \"Bootstrap\": {\n    \"ApiKeyCreateSecret\": \"change_this_to_a_long_random_64_char_secret\"\n  },\n  \n    \"ApiKeys\": {\n      \"Static\": {\n        \"Key\": \"api_live_DEV_4f8f3b0f2d7e4f4c9e5b8a1a2d3c4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1\",\n        //\"BusinessId\": \"bf82072c-69c1-4f8c-be53-ade19d6776a5\"\n        \"BusinessId\": \"9841bcab-ca71-439f-8691-d85ada887b01\"\n      }\n    }\n  }\n\n\n"
    },
    {
      "path": "xbytechat-api/appsettings.json",
      "sha256": "eb580f981bc0fffb89e483b04ce0fe226fe3a4d6740c879c799141c625dbd390",
      "language": "json",
      "size": 923,
      "content": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n\n  \"JwtSettings\": {\n    \"Issuer\": \"xbytechat-api\",\n    \"Audience\": \"xbytechat-client\",\n    \"ExpiryMinutes\": 60,\n    \"SecretKey\": \"CHANGE_ME\"\n  },\n\n  \"WhatsApp\": {\n    \"ApiUrl\": \"https://graph.facebook.com/v23.0/601884673011340/messages\",\n    \"WABA_ID\": \"744548247936621\"\n  },\n\n  \"Cors\": {\n    \"AllowedOrigins\": []\n  },\n\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"\"\n  },\n\n  \"Tracking\": {\n    \"BaseUrl\": \"https://app.xplorebytesolutions.com\",\n    \"Secret\": \"replaceXwithX64+charQrandomhsecret\"\n  },\n\n  \"Debugging\": {\n    \"DebugKey\": \"use-a-long-random-string-here\"\n  },\n  \"FlowClickTokens\": {\n    \"BaseUrl\": \"https://app.xplorebytesolutions.com\",\n    \"Secret\": \"useVaVveryGlongYrandomFstringQhere\",\n    \"TtlHours\": 72\n  }\n\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Controllers/AuthController.cs",
      "sha256": "b6a574dacfd35dbb7c4d8bbd764c65f4ec23fc92f68e250f8a708a4581c8c4dc",
      "language": "csharp",
      "size": 3725,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing xbytechat.api.AuthModule.DTOs;\nusing xbytechat.api.AuthModule.Services;\nusing xbytechat.api.Features.BusinessModule.DTOs;\n\nnamespace xbytechat.api.AuthModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AuthController : ControllerBase\n    {\n        private readonly IAuthService _authService;\n\n        public AuthController(IAuthService authService)\n        {\n            _authService = authService;\n        }\n\n        // ‚úÖ Login ‚Üí return { token } (NO cookies)\n        [AllowAnonymous]\n        [HttpPost(\"login\")]\n        public async Task<IActionResult> Login([FromBody] UserLoginDto dto)\n        {\n            var result = await _authService.LoginAsync(dto);\n            if (!result.Success || string.IsNullOrWhiteSpace(result.Token))\n                return Unauthorized(new { success = false, message = result.Message });\n\n            return Ok(new { token = result.Token });\n        }\n\n        // (Optional) Refresh token endpoint if you still issue refresh tokens.\n        // Returns tokens in body (NO cookies).\n        [AllowAnonymous]\n        [HttpPost(\"refresh-token\")]\n        public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequest request)\n        {\n            var result = await _authService.RefreshTokenAsync(request.RefreshToken);\n            if (!result.Success) return Unauthorized(new { success = false, message = result.Message });\n\n            dynamic data = result.Data!;\n            return Ok(new\n            {\n                accessToken = data.accessToken,\n                refreshToken = data.refreshToken\n            });\n        }\n        // ‚úÖ Signup\n        [HttpPost(\"business-user-signup\")]\n        public async Task<IActionResult> Signup([FromBody] SignupBusinessDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                var errors = ModelState.Values\n                    .SelectMany(v => v.Errors)\n                    .Select(e => e.ErrorMessage)\n                    .ToList();\n\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"‚ùå Validation failed.\",\n                    errors\n                });\n            }\n\n            var result = await _authService.SignupAsync(dto);\n            return result.Success ? Ok(result) : BadRequest(result);\n        }\n\n        // ‚úÖ Logout (stateless JWT): nothing server-side to do\n        [Authorize]\n        [HttpPost(\"logout\")]\n        public IActionResult Logout() => Ok(new { success = true, message = \"Logged out\" });\n\n        // ‚úÖ (Optional) lightweight session echo from claims (works with Bearer)\n        [Authorize]\n        [HttpGet(\"session\")]\n        public IActionResult GetSession()\n        {\n            var user = HttpContext.User;\n            if (user?.Identity is not { IsAuthenticated: true }) return BadRequest(\"Invalid session\");\n\n            var email = user.FindFirst(ClaimTypes.Email)?.Value ?? \"unknown\";\n            var role = user.FindFirst(ClaimTypes.Role)?.Value\n                       ?? user.FindFirst(\"role\")?.Value\n                       ?? \"unknown\";\n            var plan = user.FindFirst(\"plan\")?.Value ?? \"basic\";\n            var biz = user.FindFirst(\"businessId\")?.Value;\n\n            return Ok(new { isAuthenticated = true, role, email, plan, businessId = biz });\n        }\n\n        [Authorize]\n        [HttpGet(\"features\")]\n        public async Task<IActionResult> GetFeatureAccess()\n        {\n            var result = await _authService.GetFeatureAccessForUserAsync(User);\n            return Ok(result.Features);\n        }\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Controllers/TestJwtController.cs",
      "sha256": "c407c3fdf8977cffcb0cd6131f617087ede160fd75646be61000b68f7a455a22",
      "language": "csharp",
      "size": 2087,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.AuthModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/auth/test\")]\n    public class TestJwtController : ControllerBase\n    {\n        [Authorize]\n        [HttpGet(\"get-logged-in\")]\n        public IActionResult GetLoggedInUserInfo()\n        {\n            var userId = UserContextHelper.GetUserId(User);\n            var businessId = UserContextHelper.GetBusinessId(User);\n            var role = UserContextHelper.GetRole(User);\n            var plan = UserContextHelper.GetPlan(User);\n            var companyName = UserContextHelper.GetCompanyName(User);\n\n            return Ok(new\n            {\n                success = true,\n                message = \"üîê JWT is valid. Here's your decoded info:\",\n                data = new\n                {\n                    userId,\n                    businessId,\n                    role,\n                    plan,\n                    companyName\n                }\n            });\n        }\n\n        [HttpGet(\"get-current-user\")]\n        public IActionResult GetCurrentUser()\n        {\n            if (User?.Identity?.IsAuthenticated != true)\n            {\n                return Unauthorized(new { success = false, message = \"‚ùå Not authenticated\" });\n            }\n\n            var userId = User.FindFirst(\"sub\")?.Value;\n            var email = User.FindFirst(\"email\")?.Value;\n            var role = User.FindFirst(\"role\")?.Value;\n            var businessId = User.FindFirst(\"businessId\")?.Value;\n            var plan = User.FindFirst(\"plan\")?.Value;\n            var permissions = User.FindFirst(\"permissions\")?.Value;\n\n            return Ok(new\n            {\n                success = true,\n                message = \"‚úÖ Token is valid\",\n                user = new\n                {\n                    userId,\n                    email,\n                    role,\n                    businessId,\n                    plan,\n                    permissions\n                }\n            });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/FeatureAccessDto.cs",
      "sha256": "2cd5dd1900f770fb91216632561ec241edda181aa0f8f394ca384f8ce04f70b0",
      "language": "csharp",
      "size": 220,
      "content": "// üìÅ xbytechat.api/AuthModule/DTOs/FeatureAccessDto.cs\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class FeatureAccessDto\n    {\n        public Dictionary<string, bool> Features { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/RefreshTokenRequest.cs",
      "sha256": "5f68342bebd5c2664561285523bcabe509a7ffe5fe9c995eeeaf821aba238e2d",
      "language": "csharp",
      "size": 142,
      "content": "namespace xbytechat.api.AuthModule.DTOs\n{\n    public class RefreshTokenRequest\n    {\n        public string RefreshToken { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/ResendConfirmationDto.cs",
      "sha256": "c390da7f0aa2324928025edc1a4ce1c65e079357cb2219fade8cdc4153734982",
      "language": "csharp",
      "size": 226,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class ResendConfirmationDto\n    {\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/ResetPasswordDto.cs",
      "sha256": "33b22ea5acec9376aef19d7c09ff580b689f7a6bc04ea1d6f214dd9b203de0c4",
      "language": "csharp",
      "size": 374,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class ResetPasswordDto\n    {\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        [MinLength(6, ErrorMessage = \"Password must be at least 6 characters long.\")]\n        public string NewPassword { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/UserDto.cs",
      "sha256": "47384e5d11fcdfb564f639c3937db6f3aa97f5963366ecb7af4dc37e6a311ff1",
      "language": "csharp",
      "size": 587,
      "content": "namespace xbytechat.api.AuthModule.DTOs\n{\n    public class UserDto\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public string Email { get; set; }\n        public string Role { get; set; }\n        public string Status { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n        // ‚úÖ Extra fields\n        public Guid BusinessId { get; set; }\n        public string CompanyName { get; set; }\n        public string Plan { get; set; }\n        public string AccessToken { get; set; }\n\n        public Guid? PlanId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/UserLoginDto.cs",
      "sha256": "d0b1140af88b221c2cb7dbd58223d5803643620b16d27f016aba26ed9b816482",
      "language": "csharp",
      "size": 281,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class UserLoginDto\n    {\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        public string Password { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Models/User.cs",
      "sha256": "25f82a426c60ebda55385071a527cb10389e2f164415031be0a718cc4dc8f768",
      "language": "csharp",
      "size": 1761,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models; // üÜï Required for navigation\n\nnamespace xbytechat.api.AuthModule.Models\n{\n    public class User\n    {\n        public Guid Id { get; set; }\n\n        // üîó FK to Business\n        public Guid? BusinessId { get; set; }\n        public Business Business { get; set; }\n\n        // üë§ User Info\n        [Required]\n        public string Name { get; set; }\n\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        public string PasswordHash { get; set; }\n\n        // üõ°Ô∏è Role System\n        // üõ°Ô∏è Role System (FK + Navigation)\n        public Guid? RoleId { get; set; }\n        public Role Role { get; set; }// admin / business / agent / staff\n\n        // ‚úÖ Status Management\n        public string Status { get; set; } = \"Pending\"; // Active / Hold / Rejected / Pending\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // üóëÔ∏è Soft Delete Role \n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n\n        public List<CampaignSendLog> SendLogs { get; set; }\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        // üÜï Permission Navigation\n        public ICollection<UserPermission> UserPermissions { get; set; } // üí° Enables .WithMany(u => u.UserPermissions)\n        public string? RefreshToken { get; set; }\n        public DateTime? RefreshTokenExpiry { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Models/WhatsAppTemplate.cs",
      "sha256": "58c48102ea525733b401f28523a39a8358c4235f1bc7fad9bf667c08f942b1b9",
      "language": "csharp",
      "size": 1820,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.Models\n{\n    [Index(nameof(BusinessId), nameof(Provider))]\n    [Index(nameof(BusinessId), nameof(Name))]\n    [Index(nameof(BusinessId), nameof(Name), nameof(Language), nameof(Provider), IsUnique = true)]\n    public class WhatsAppTemplate\n    {\n        [Key] public Guid Id { get; set; } = Guid.NewGuid();\n\n        public Guid BusinessId { get; set; }\n\n        [MaxLength(40)]\n        public string Provider { get; set; } = \"meta_cloud\";   // \"meta_cloud\" | \"pinnacle\" | etc.\n\n        [MaxLength(120)]\n        public string? ExternalId { get; set; }                // Meta template id if available\n\n        [MaxLength(160)]\n        public string Name { get; set; } = \"\";\n\n        [MaxLength(16)]\n        public string Language { get; set; } = \"en_US\";\n\n        [MaxLength(32)]\n        public string Status { get; set; } = \"APPROVED\";       // APPROVED/ACTIVE/REJECTED/PENDING\n\n        [MaxLength(40)]\n        public string? Category { get; set; }                  // e.g. MARKETING, UTILITY\n\n        public string Body { get; set; } = \"\";\n\n        public bool HasImageHeader { get; set; } = false;\n\n        public int PlaceholderCount { get; set; } = 0;\n\n        // JSON blobs (use TEXT in PG)\n        public string ButtonsJson { get; set; } = \"[]\";        // serialized List<ButtonMetadataDto>\n        public string RawJson { get; set; } = \"{}\";            // provider raw item (for audit/debug)\n\n        public DateTime LastSyncedAt { get; set; } = DateTime.UtcNow;\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        public bool IsActive { get; set; } = true;             // soft-disable if deprecated\n    }\n}"
    },
    {
      "path": "xbytechat-api/AuthModule/Roles/UserRoles.cs",
      "sha256": "5a91bb09b9b5fc0f5fe14cf1b9727c0c8a8de225c71455452a14d491125209c5",
      "language": "csharp",
      "size": 507,
      "content": "namespace xbytechat.api.AuthModule.Roles\n{\n    public static class UserRoles\n    {\n        public const string Admin = \"admin\";         // xByte Admin\n        public const string Business = \"business\";   // Tenant Admin\n        public const string Staff = \"staff\";         // CRM Staff (future)\n        public const string Agent = \"agent\";         // WhatsApp/chat agent\n        public const string CRM = \"crm\";             // CRM-only user (future)\n        public const string Partner = \"partner\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Services/AuthService.cs",
      "sha256": "f2b6fda822da5be77741a756e1eff53c493510fc5dcc46d65794d77a26ce63b0",
      "language": "csharp",
      "size": 50624,
      "content": "using System.Security.Cryptography;\nusing System.Text;\nusing xbytechat.api.AuthModule.DTOs;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Features.AccessControl.Services;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.AspNetCore.Http;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing System.Security.Claims;\nusing System.IdentityModel.Tokens.Jwt;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public class AuthService : IAuthService\n    {\n        private readonly IGenericRepository<User> _userRepo;\n        private readonly IBusinessService _businessService;\n        private readonly IJwtTokenService _jwtTokenService;\n        private readonly IAccessControlService _accessControlService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly ILogger<AuthService> _logger;\n        private readonly AppDbContext _dbContext;\n        public AuthService(\n            IGenericRepository<User> userRepo,\n            IBusinessService businessService,\n            IJwtTokenService jwtTokenService,\n            IAccessControlService accessControlService,\n            IHttpContextAccessor httpContextAccessor,\n            ILogger<AuthService> logger,\n            AppDbContext dbContext)\n        {\n            _userRepo = userRepo;\n            _businessService = businessService;\n            _jwtTokenService = jwtTokenService;\n            _accessControlService = accessControlService;\n            _httpContextAccessor = httpContextAccessor;\n            _logger = logger;\n            _dbContext = dbContext;\n        }\n\n        // üîë Production-grade Login\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n        //    _logger.LogInformation(\"User role detected: {Role} (AdminType: {IsAdminType})\", roleName, isAdminType);\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService\n        //            .Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"‚ùå Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"‚è≥ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName;\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //        _logger.LogInformation(\"Admin/superadmin login. Plan set as role: {Plan}\", planName);\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //        _logger.LogInformation(\"Business login. Plan: {Plan}, Company: {Company}\", planName, companyName);\n        //    }\n\n        //    var claims = new List<Claim>\n        //    {\n        //        new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),\n        //        new Claim(JwtRegisteredClaimNames.Email, user.Email ?? \"\"),\n        //        new Claim(\"name\", user.Name ?? \"\"),\n        //        new Claim(ClaimTypes.Role, roleName),\n        //        new Claim(\"role\", roleName),\n        //        new Claim(\"status\", user.Status ?? \"unknown\"),\n        //        new Claim(\"plan\", planName ?? \"\"),\n        //        new Claim(\"businessId\", businessId),\n        //        new Claim(\"companyName\", companyName ?? \"\")\n        //    };\n\n        //    if (permissions?.Any() == true)\n        //    {\n        //        claims.AddRange(permissions.Select(p => new Claim(\"perm\", p)));\n        //    }\n\n        //    var token = _jwtTokenService.GenerateToken(claims);\n\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"‚úÖ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        // üü¢ Signup Business User\n\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n        //    _logger.LogInformation(\"User role detected: {Role} (AdminType: {IsAdminType})\", roleName, isAdminType);\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService\n        //            .Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"‚ùå Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"‚è≥ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName; // 'superadmin', 'admin', etc.\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //        _logger.LogInformation(\"Admin/superadmin login. Plan set as role: {Plan}\", planName);\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //        _logger.LogInformation(\"Business login. Plan: {Plan}, Company: {Company}\", planName, companyName);\n        //    }\n\n        //    // ‚úÖ Generate token with full claims\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ‚úÖ User info for frontend\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"‚úÖ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n        //    _logger.LogInformation(\"User role detected: {Role} (AdminType: {IsAdminType})\", roleName, isAdminType);\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService\n        //            .Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"‚ùå Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"‚è≥ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName; // 'superadmin', 'admin', etc.\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //        _logger.LogInformation(\"Admin/superadmin login. Plan set as role: {Plan}\", planName);\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //        _logger.LogInformation(\"Business login. Plan: {Plan}, Company: {Company}\", planName, companyName);\n        //    }\n\n        //    // ‚úÖ Generate token with full claims\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ‚úÖ Store token in secure HttpOnly cookie\n        //    _httpContextAccessor.HttpContext.Response.Cookies.Append(\"xbyte_token\", token, new CookieOptions\n        //    {\n        //        HttpOnly = true,\n        //        Secure = true, // Set to false only for localhost if needed\n        //        SameSite = SameSiteMode.Lax,\n        //        Expires = DateTime.UtcNow.AddDays(7)\n        //    });\n\n        //    // ‚úÖ User info for frontend\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"‚úÖ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        #region // Below Code comeneted to replace cokkies to bearer\n\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService.Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"‚ùå Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"‚è≥ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName; // e.g., 'superadmin'\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\"; // Admins are not tied to a business\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //    }\n\n        //    // ‚úÖ Generate JWT with lowercase claim keys\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ‚úÖ Store token securely as cookie (must match JwtBearer event)\n        //    _httpContextAccessor.HttpContext.Response.Cookies.Append(\"xbyte_token\", token, \n\n        //        new CookieOptions\n        //    {\n        //        HttpOnly = true,\n        //        Secure = true,\n        //       // SameSite = SameSiteMode.Strict,\n        //        SameSite = SameSiteMode.None,\n        //        Expires = DateTime.UtcNow.AddDays(7),\n        //        Domain = \"http://localhost:3000\"\n        //    });\n\n        //    // ‚úÖ Build user info for frontend\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null // Not needed since we're using secure cookie\n        //    };\n\n        //    _logger.LogInformation(\"‚úÖ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        #endregion\n\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName is \"admin\" or \"superadmin\" or \"partner\" or \"reseller\";\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business? business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService.Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName;        // admin types treated as plan in UI\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"basic\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //    }\n\n        //    // ‚úÖ Generate JWT (includes role/plan/biz + ClaimTypes.Role)\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ‚ùå NO cookie writes in Bearer mode\n\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"‚úÖ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName is \"admin\" or \"superadmin\" or \"partner\" or \"reseller\";\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business? business = null;\n        //    Guid? planId = null;\n        //   // string planName = string.Empty;\n        //    string companyName = string.Empty;\n        //    string businessId = user.BusinessId?.ToString() ?? string.Empty;\n\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService.Query()\n        //            .Include(b => b.Plan) // Ensure Plan navigation exists in Business model\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n\n        //        if (!business.PlanId.HasValue)\n        //            return ResponseResult.ErrorInfo(\"‚ùå No plan assigned to this business.\");\n\n        //        planId = business.PlanId;\n        //      //  planName = business.Plan?.Name ?? string.Empty;\n        //        companyName = business.CompanyName ?? string.Empty;\n        //    }\n\n        //    if (isAdminType)\n        //    {\n        //       // planName = roleName; // Admins' \"plan\" is just their role name\n        //        companyName = \"xByte Admin\";\n        //        businessId = string.Empty;\n        //        planId = null; // No plan restriction for admins\n        //    }\n\n        //    var permissions = planId.HasValue\n        //        ? await _accessControlService.GetPermissionsByPlanIdAsync(planId)\n        //        : new List<string>();\n\n        //    // ‚úÖ Generate JWT with planId\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? string.Empty,\n        //        user.Email ?? string.Empty,\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //       // planName,\n        //        permissions ?? new List<string>(),\n        //        planId?.ToString() ?? string.Empty\n        //    );\n\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        //Plan = planName,\n        //        PlanId = planId,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\n        //        \"‚úÖ Login successful for {Email}, Role: {Role}, PlanId: {PlanId}\",\n        //        dto.Email, roleName, planId\n        //    );\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n        public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        {\n            _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n            var hashedPassword = HashPassword(dto.Password);\n\n            var user = await _userRepo\n                .AsQueryable()\n                .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n                .Include(u => u.Role)\n                .FirstOrDefaultAsync();\n\n            if (user == null)\n            {\n                _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n            }\n\n            var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n            var isAdminType = roleName is \"admin\" or \"superadmin\" or \"partner\" or \"reseller\";\n\n            if (user.BusinessId == null && !isAdminType)\n            {\n                _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n            }\n\n            Business? business = null;\n            Guid? planId = null;\n            string companyName = string.Empty;\n            string businessId = user.BusinessId?.ToString() ?? string.Empty;\n\n            if (user.BusinessId != null)\n            {\n                business = await _businessService.Query()\n                    .Include(b => b.Plan)\n                    .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n                if (business == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n\n                if (business.Status == Business.StatusType.Pending)\n                    return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n\n                if (!business.PlanId.HasValue)\n                    return ResponseResult.ErrorInfo(\"‚ùå No plan assigned to this business.\");\n\n                planId = business.PlanId;\n                companyName = business.CompanyName ?? string.Empty;\n            }\n\n            if (isAdminType)\n            {\n                // Admins don‚Äôt get plan restrictions\n                companyName = \"xByte Admin\";\n                businessId = string.Empty;\n                planId = null;\n            }\n\n            // üî• Compute EFFECTIVE permissions (plan ‚à© role) and derive features\n            var (permCodes, featureKeys) = isAdminType\n                ? (await GetAllActivePermissions(), new List<string> { \"Dashboard\", \"Messaging\", \"CRM\", \"Campaigns\", \"Catalog\", \"AdminPanel\" })\n                : await GetEffectivePermissionsAndFeaturesAsync(user.Id);\n\n            // üé´ Generate JWT (now includes permissions, features, plan_id)\n            var token = _jwtTokenService.GenerateToken(\n                userId: user.Id.ToString(),\n                role: roleName,\n                userName: user.Name ?? string.Empty,\n                email: user.Email ?? string.Empty,\n                status: user.Status ?? \"unknown\",\n                businessId: businessId,\n                companyName: companyName,\n                permissions: permCodes ?? new List<string>(),\n                planId: planId?.ToString() ?? string.Empty,\n                features: featureKeys,\n                hasAllAccess: isAdminType\n            );\n            try\n            {\n                var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);\n                var pid = jwt.Claims.FirstOrDefault(c => c.Type == \"plan_id\")?.Value;\n                _logger.LogInformation(\"üîé JWT includes plan_id: {PlanId}\", pid ?? \"<null>\");\n            }\n            catch { /* ignore */ }\n            var userDto = new UserDto\n            {\n                Id = user.Id,\n                Name = user.Name,\n                Email = user.Email,\n                Role = roleName,\n                Status = user.Status,\n                CreatedAt = user.CreatedAt,\n                BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n                CompanyName = companyName,\n                PlanId = planId,\n                AccessToken = null\n            };\n\n            _logger.LogInformation(\n                \"‚úÖ Login successful for {Email}, Role: {Role}, PlanId: {PlanId}\",\n                dto.Email, roleName, planId\n            );\n\n            return new ResponseResult\n            {\n                Success = true,\n                Message = \"‚úÖ Login successful\",\n                Data = userDto,\n                Token = token\n            };\n        }\n        public async Task<ResponseResult> SignupAsync(SignupBusinessDto dto)\n        {\n            _logger.LogInformation(\"üü¢ Signup attempt: {Email}\", dto.Email);\n            var result = await _businessService.SignupBusinessAsync(dto);\n\n            if (!result.Success)\n            {\n                _logger.LogWarning(\"‚ùå Signup failed for {Email}: {Msg}\", dto.Email, result.Message);\n                return ResponseResult.ErrorInfo(result.Message);\n            }\n\n            var business = await _businessService.GetBusinessByEmailAsync(dto.Email);\n\n            if (business == null)\n            {\n                _logger.LogError(\"‚ùå Signup succeeded but business retrieval failed for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå Signup succeeded but business retrieval failed.\");\n            }\n\n            try\n            {\n                // üÜï Set BusinessAssignedTo if available\n                if (dto.CreatedByPartnerId.HasValue && business.CreatedByPartnerId == null)\n                {\n                    business.CreatedByPartnerId = dto.CreatedByPartnerId;\n                    await _businessService.UpdateBusinessAsync(business);\n                    _logger.LogInformation(\"‚úÖ Partner assigned during signup: {PartnerId} for Business: {BusinessId}\", dto.CreatedByPartnerId, business.Id);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Signup succeeded but assigning partner failed for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå Signup succeeded but assigning partner failed: \" + ex.Message);\n            }\n\n            _logger.LogInformation(\"‚úÖ Signup successful for {Email} (BusinessId: {BusinessId})\", dto.Email, business.Id);\n            return ResponseResult.SuccessInfo(\"‚úÖ Signup successful. Pending approval.\", new { BusinessId = business.Id });\n        }\n\n        // üîÑ Refresh JWT Token (and Rotate)\n        //public async Task<ResponseResult> RefreshTokenAsync(string refreshToken)\n        //{\n        //    _logger.LogInformation(\"üîÑ RefreshToken attempt\");\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Include(u => u.Role)\n        //        .Include(u => u.Business)\n        //            .ThenInclude(b => b.BusinessPlanInfo)\n        //        .FirstOrDefaultAsync(u => u.RefreshToken == refreshToken && u.RefreshTokenExpiry > DateTime.UtcNow);\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Invalid or expired refresh token.\");\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid or expired refresh token.\");\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName;\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //    }\n        //    else\n        //    {\n        //        planName = user.Business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = user.Business?.CompanyName ?? \"\";\n        //    }\n\n        //    var claims = new List<Claim>\n        //    {\n        //        new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),\n        //        new Claim(JwtRegisteredClaimNames.Email, user.Email ?? \"\"),\n        //        new Claim(\"name\", user.Name ?? \"\"),\n        //        new Claim(ClaimTypes.Role, roleName),\n        //        new Claim(\"role\", roleName),\n        //        new Claim(\"status\", user.Status ?? \"unknown\"),\n        //        new Claim(\"plan\", planName ?? \"\"),\n        //        new Claim(\"businessId\", businessId),\n        //        new Claim(\"companyName\", companyName ?? \"\")\n        //    };\n\n        //    if (permissions?.Any() == true)\n        //    {\n        //        claims.AddRange(permissions.Select(p => new Claim(\"perm\", p)));\n        //    }\n\n        //    var token = _jwtTokenService.GenerateToken(claims);\n\n        //    // üîÅ Rotate refresh token\n        //    var newRefreshToken = Guid.NewGuid().ToString(\"N\");\n        //    user.RefreshToken = newRefreshToken;\n        //    user.RefreshTokenExpiry = DateTime.UtcNow.AddDays(30);\n        //    _userRepo.Update(user);\n\n        //    _logger.LogInformation(\"üîÑ Token refreshed for user {UserId}, role {Role}\", user.Id, roleName);\n\n        //    return ResponseResult.SuccessInfo(\"üîÑ Token refreshed\", new\n        //    {\n        //        accessToken = token,\n        //        refreshToken = newRefreshToken\n        //    });\n        //}\n\n        // üîÅ Resend confirmation\n\n        // üîÑ Refresh JWT Token (and Rotate)\n        public async Task<ResponseResult> RefreshTokenAsync(string refreshToken)\n        {\n            _logger.LogInformation(\"üîÑ RefreshToken attempt\");\n\n            var user = await _userRepo\n                .AsQueryable()\n                .Include(u => u.Role)\n                .Include(u => u.Business)\n                    .ThenInclude(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(u => u.RefreshToken == refreshToken && u.RefreshTokenExpiry > DateTime.UtcNow);\n\n            if (user == null)\n            {\n                _logger.LogWarning(\"‚ùå Invalid or expired refresh token.\");\n                return ResponseResult.ErrorInfo(\"‚ùå Invalid or expired refresh token.\");\n            }\n\n            var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n            var isAdminType = roleName is \"admin\" or \"superadmin\" or \"partner\" or \"reseller\";\n\n            string planId = user.Business?.PlanId?.ToString() ?? string.Empty;\n            string companyName = isAdminType ? \"xByte Admin\" : (user.Business?.CompanyName ?? string.Empty);\n            string businessId = isAdminType ? string.Empty : (user.BusinessId?.ToString() ?? string.Empty);\n\n            var (permCodes, featureKeys) = isAdminType\n                ? (await GetAllActivePermissions(), new List<string> { \"Dashboard\", \"Messaging\", \"CRM\", \"Campaigns\", \"Catalog\", \"AdminPanel\" })\n                : await GetEffectivePermissionsAndFeaturesAsync(user.Id);\n\n            var claims = new List<Claim>\n        {\n            new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),\n            new Claim(\"id\", user.Id.ToString()),\n            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n            new Claim(\"email\", user.Email ?? \"\"),\n            new Claim(\"name\", user.Name ?? \"\"),\n            new Claim(\"status\", user.Status ?? \"unknown\"),\n            new Claim(\"businessId\", businessId),\n            new Claim(\"companyName\", companyName),\n            new Claim(\"permissions\", string.Join(\",\", permCodes ?? new List<string>())),\n            new Claim(\"features\", string.Join(\",\", featureKeys ?? new List<string>())),\n            new Claim(\"hasAllAccess\", isAdminType ? \"true\" : \"false\"),\n            new Claim(\"role\", roleName),\n            new Claim(ClaimTypes.Role, roleName),\n            new Claim(\"plan_id\", planId ?? string.Empty)\n        };\n\n            var token = _jwtTokenService.GenerateToken(claims);\n\n            // üîÅ Rotate refresh token\n            var newRefreshToken = Guid.NewGuid().ToString(\"N\");\n            user.RefreshToken = newRefreshToken;\n            user.RefreshTokenExpiry = DateTime.UtcNow.AddDays(30);\n            _userRepo.Update(user);\n\n            _logger.LogInformation(\"üîÑ Token refreshed for user {UserId}, role {Role}\", user.Id, roleName);\n\n            return ResponseResult.SuccessInfo(\"üîÑ Token refreshed\", new\n            {\n                accessToken = token,\n                refreshToken = newRefreshToken\n            });\n        }\n        public async Task<ResponseResult> ResendConfirmationAsync(ResendConfirmationDto dto)\n        {\n            _logger.LogInformation(\"üîÅ Resend confirmation attempt for {Email}\", dto.Email);\n            var business = await _businessService.GetBusinessByEmailAsync(dto.Email);\n            if (business == null)\n            {\n                _logger.LogWarning(\"‚ùå Resend confirmation failed: No business for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå No business registered with this email\");\n            }\n\n            _logger.LogInformation(\"‚úÖ Resend confirmation request processed for {Email}\", dto.Email);\n            return ResponseResult.SuccessInfo(\"üì® Confirmation request resent.\");\n        }\n        public async Task<FeatureAccessDto> GetFeatureAccessForUserAsync(ClaimsPrincipal user)\n        {\n            var role = user.FindFirstValue(\"role\")?.ToLower();\n            var dto = new FeatureAccessDto();\n\n            if (role == \"superadmin\")\n            {\n                // Grant all known frontend features\n                dto.Features = await _dbContext.FeatureAccess\n                    .Select(f => f.FeatureName)\n                    .Distinct()\n                    .ToDictionaryAsync(name => name, name => true);\n\n                return dto;\n            }\n\n            var plan = user.FindFirstValue(\"plan\")?.ToLower();\n            var businessIdStr = user.FindFirstValue(\"businessId\");\n\n            if (!Guid.TryParse(businessIdStr, out var businessId))\n                return dto;\n\n            // Plan-level or per-business override\n            var features = await _dbContext.FeatureAccess\n                .Where(f => f.BusinessId == businessId || f.Plan.ToLower() == plan)\n                .ToListAsync();\n\n            foreach (var feature in features)\n            {\n                dto.Features[feature.FeatureName] = feature.IsEnabled;\n            }\n\n            return dto;\n        }\n\n        // üîí Reset password\n        public async Task<ResponseResult> ResetPasswordAsync(ResetPasswordDto dto)\n        {\n            _logger.LogInformation(\"üîí Reset password attempt for {Email}\", dto.Email);\n            var user = await _userRepo.FirstOrDefaultAsync(u => u.Email == dto.Email);\n            if (user == null)\n            {\n                _logger.LogWarning(\"‚ùå Reset password failed: No user for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå No user found with this email\");\n            }\n\n            user.PasswordHash = HashPassword(dto.NewPassword);\n            _userRepo.Update(user);\n\n            _logger.LogInformation(\"‚úÖ Password reset successfully for {Email}\", dto.Email);\n            return ResponseResult.SuccessInfo(\"‚úÖ Password reset successfully\");\n        }\n\n        // Utility: Hash password using SHA256\n        //private string HashPassword(string password)\n        //{\n        //    using var sha = SHA256.Create();\n        //    var bytes = Encoding.UTF8.GetBytes(password);\n        //    var hash = sha.ComputeHash(bytes);\n        //    return Convert.ToBase64String(hash);\n        //}\n        // INTERSECTION: Role ‚à© Plan for the user, then map groups -> feature keys\n        //private async Task<(List<string> Perms, List<string> Features)> GetEffectivePermissionsAndFeaturesAsync(Guid userId)\n        //{\n        //    var userAndPermissions = _dbContext.Users\n        //        .Where(u => u.Id == userId)\n        //        .Join(_dbContext.Businesses,\n        //            u => u.BusinessId,\n        //            b => b.Id,\n        //            (u, b) => new { u, b })\n        //        .Join(_dbContext.PlanPermissions.Where(pp => pp.IsActive),\n        //            ub => ub.b.PlanId,\n        //            pp => pp.PlanId,\n        //            (ub, pp) => new { ub.u, pp })\n        //        .Join(_dbContext.Permissions.Where(p => p.IsActive),\n        //            ubpp => ubpp.pp.PermissionId,\n        //            p => p.Id,\n        //            (ubpp, p) => new { ubpp.u, p }); // This gives you a sequence of {user, permission} pairs\n\n        //    // Replace the final problematic Join with this Where clause\n        //    var rows = await userAndPermissions\n        //        .Where(up => _dbContext.RolePermissions\n        //            .Where(rp => rp.IsActive && !rp.IsRevoked)\n        //            .Any(rp => rp.RoleId == up.u.RoleId && rp.PermissionId == up.p.Id))\n        //        .Select(up => up.p) // Select the final permission object\n        //        .Select(p => new { p.Code, p.Group })\n        //        .Distinct()\n        //        .ToListAsync();\n\n        //    var perms = rows.Select(r => r.Code).ToList();\n\n        //    var features = rows.Select(r => r.Group)\n        //        .Where(g => !string.IsNullOrWhiteSpace(g))\n        //        .Select(GroupToFeature)\n        //        .Where(f => f != null)\n        //        .Select(f => f!)\n        //        .Distinct(StringComparer.OrdinalIgnoreCase)\n        //        .ToList();\n\n        //    return (perms, features);\n        //}\n        //// If you ever need ‚Äúall perms‚Äù (e.g., for superadmins)\n        /// <summary>\n        /// \n        /// </summary>\n        /// <returns></returns>\n        /// \n        private async Task<(List<string> Perms, List<string> Features)> GetEffectivePermissionsAndFeaturesAsync(Guid userId)\n        {\n            var rows = await _dbContext.Users\n                .AsNoTracking()\n                .Where(u => u.Id == userId)\n                .Join(_dbContext.Businesses.AsNoTracking(),\n                      u => u.BusinessId,\n                      b => b.Id,\n                      (u, b) => new { u, b })\n                .Join(_dbContext.PlanPermissions.AsNoTracking().Where(pp => pp.IsActive),\n                      ub => ub.b.PlanId,\n                      pp => pp.PlanId,\n                      (ub, pp) => new { ub.u, pp })\n                .Join(_dbContext.Permissions.AsNoTracking().Where(p => p.IsActive),\n                      ubpp => ubpp.pp.PermissionId,\n                      p => p.Id,\n                      (ubpp, p) => new { ubpp.u, p })\n                // Intersect with RolePermissions via EXISTS\n                .Where(up => _dbContext.RolePermissions\n                    .AsNoTracking()\n                    .Where(rp => rp.IsActive && !rp.IsRevoked)\n                    .Any(rp => rp.RoleId == up.u.RoleId && rp.PermissionId == up.p.Id))\n                .Select(up => new { up.p.Code, up.p.Group })\n                .Distinct()\n                .ToListAsync();\n\n            var perms = rows.Select(r => r.Code).ToList();\n\n            var features = rows.Select(r => r.Group)\n                .Where(g => !string.IsNullOrWhiteSpace(g))\n                .Select(GroupToFeature)\n                .Where(f => f != null)\n                .Select(f => f!)\n                .Distinct(StringComparer.OrdinalIgnoreCase)\n                .ToList();\n\n            return (perms, features);\n        }\n\n        private async Task<List<string>> GetAllActivePermissions() =>\n            await _dbContext.Permissions\n                .Where(p => p.IsActive)\n                .Select(p => p.Code)\n                .OrderBy(c => c)\n                .ToListAsync();\n\n        private static string? GroupToFeature(string? g) => g switch\n        {\n            \"Messaging\" => \"Messaging\",\n            \"Contacts\" => \"CRM\",\n            \"Campaign\" => \"Campaigns\",\n            \"Product\" => \"Catalog\",\n            \"Dashboard\" => \"Dashboard\",\n            \"Admin\" => \"AdminPanel\",\n            _ => null\n        };\n\n        private string HashPassword(string password)\n        {\n            using var sha = SHA256.Create();\n            var bytes = Encoding.UTF8.GetBytes(password);\n            var hash = sha.ComputeHash(bytes);\n            return Convert.ToBase64String(hash);\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Services/IAuthService.cs",
      "sha256": "7d563b4b118d631a798738eddf29e7637d5defe5bf5863d10d24b3e31bd897db",
      "language": "csharp",
      "size": 745,
      "content": "using System.Security.Claims;\nusing xbytechat.api.AuthModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public interface IAuthService\n    {\n        Task<ResponseResult> LoginAsync(UserLoginDto dto);\n        Task<ResponseResult> SignupAsync(SignupBusinessDto dto);                  // ‚úÖ Add this\n        Task<ResponseResult> ResetPasswordAsync(ResetPasswordDto dto);           // ‚úÖ Add this\n        Task<ResponseResult> ResendConfirmationAsync(ResendConfirmationDto dto); // ‚úÖ Add this\n        Task<ResponseResult> RefreshTokenAsync(string refreshToken);\n        Task<FeatureAccessDto> GetFeatureAccessForUserAsync(ClaimsPrincipal user);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Services/IJwtTokenService.cs",
      "sha256": "6d4a732e224fe37de1184e7c79c9a3413bab6ea6cda0d29a1c3fb5a70cf9b6e7",
      "language": "csharp",
      "size": 750,
      "content": "using Microsoft.IdentityModel.Tokens;\nusing System.Collections.Generic;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public interface IJwtTokenService\n    {\n        string GenerateToken(\n            string userId,\n            string role,\n            string userName,\n            string email,\n            string status,\n            string businessId,\n            string companyName,\n                       List<string> permissions,\n            string planId,\n              List<string>? features = null,\n            bool hasAllAccess = false\n        );\n        string GenerateToken(IEnumerable<Claim> claims);\n        TokenValidationParameters GetValidationParameters(); // ‚úÖ For Middleware validation\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Services/JwtTokenService.cs",
      "sha256": "54b0235003a02ee3bff4006db2d37974e88962409ec7f015cbad4ad2a264491f",
      "language": "csharp",
      "size": 12625,
      "content": "using Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.IdentityModel.Tokens;\nusing System;\nusing System.Collections.Generic;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Text;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public class JwtTokenService : IJwtTokenService\n    {\n        private readonly IConfiguration _config;\n        private readonly ILogger<JwtTokenService> _logger;\n\n        public JwtTokenService(IConfiguration config, ILogger<JwtTokenService> logger)\n        {\n            _config = config;\n            _logger = logger;\n        }\n\n        public string GenerateToken(\n            string userId,\n            string role,\n            string userName,\n            string email,\n            string status,\n            string businessId,\n            string companyName,\n            List<string> permissions,\n            string planId,\n            List<string>? features = null,\n            bool hasAllAccess = false)\n        {\n            try\n            {\n                var permissionString = string.Join(\",\", permissions ?? new List<string>());\n                var featuresString = string.Join(\",\", features ?? new List<string>());\n\n                var claims = new List<Claim>\n{\n    new Claim(JwtRegisteredClaimNames.Sub, userId),\n    new Claim(\"id\", userId),\n    new Claim(ClaimTypes.NameIdentifier, userId),\n\n    new Claim(\"email\", email ?? \"\"),\n    new Claim(\"name\", userName ?? \"\"),\n    new Claim(\"status\", status ?? \"unknown\"),\n\n    // üîê Business id: add BOTH for compatibility\n    new Claim(\"BusinessId\", businessId ?? \"\"), // <-- used by our helpers/controllers\n    new Claim(\"businessId\", businessId ?? \"\"), // <-- keep for existing clients\n\n    new Claim(\"companyName\", companyName ?? \"\"),\n\n    // üîñ Role (API + UI)\n    new Claim(\"role\", role?.ToLowerInvariant() ?? \"unknown\"),\n    new Claim(ClaimTypes.Role, role?.ToLowerInvariant() ?? \"unknown\"),\n\n    // üß© Plan & access\n    new Claim(\"plan_id\", planId ?? string.Empty),\n    new Claim(\"permissions\", string.Join(\",\", permissions ?? new List<string>())),\n    new Claim(\"features\", string.Join(\",\", features ?? new List<string>())),\n    new Claim(\"hasAllAccess\", hasAllAccess ? \"true\" : \"false\"),\n};\n\n\n                return GenerateToken(claims);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Error generating token for userId: {UserId}\", userId);\n                throw;\n            }\n        }\n\n        public string GenerateToken(IEnumerable<Claim> claims)\n        {\n            try\n            {\n                var jwtSettings = _config.GetSection(\"JwtSettings\");\n\n                var secret = jwtSettings[\"SecretKey\"];\n                if (string.IsNullOrEmpty(secret))\n                {\n                    _logger.LogWarning(\"‚ö†Ô∏è JWT SecretKey is missing from configuration.\");\n                    throw new Exception(\"JWT SecretKey is not configured.\");\n                }\n\n                var expiry = jwtSettings[\"ExpiryMinutes\"];\n                if (!int.TryParse(expiry, out var expiryMinutes))\n                {\n                    _logger.LogWarning(\"‚ö†Ô∏è JWT ExpiryMinutes is invalid or missing. Defaulting to 60 minutes.\");\n                    expiryMinutes = 60;\n                }\n\n                var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret));\n                var creds = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256);\n\n                var expires = DateTime.UtcNow.AddMinutes(expiryMinutes);\n                var unixExp = new DateTimeOffset(expires).ToUnixTimeSeconds();\n\n                var finalClaims = claims.ToList();\n                finalClaims.Add(new Claim(JwtRegisteredClaimNames.Exp, unixExp.ToString()));\n\n                var token = new JwtSecurityToken(\n                    issuer: jwtSettings[\"Issuer\"],\n                    audience: jwtSettings[\"Audience\"],\n                    claims: finalClaims,\n                    expires: expires,\n                    signingCredentials: creds\n                );\n\n                _logger.LogInformation(\"‚úÖ Token generated for: {Email}\", finalClaims.FirstOrDefault(c => c.Type == \"email\")?.Value);\n\n                return new JwtSecurityTokenHandler().WriteToken(token);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Error generating JWT from claims.\");\n                throw;\n            }\n        }\n\n        public TokenValidationParameters GetValidationParameters()\n        {\n            var jwtSettings = _config.GetSection(\"JwtSettings\");\n\n            return new TokenValidationParameters\n            {\n                ValidateIssuer = true,\n                ValidateAudience = true,\n                ValidateIssuerSigningKey = true,\n                ValidateLifetime = true,\n                RequireSignedTokens = true,\n                RequireExpirationTime = true,\n                ValidIssuer = jwtSettings[\"Issuer\"],\n                ValidAudience = jwtSettings[\"Audience\"],\n                IssuerSigningKey = new SymmetricSecurityKey(\n                    Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])\n                ),\n                ClockSkew = TimeSpan.Zero,\n                RoleClaimType = \"role\",\n                NameClaimType = \"name\"\n            };\n        }\n    }\n}\n\n\n//using Microsoft.Extensions.Configuration;\n//using Microsoft.Extensions.Logging;\n//using Microsoft.IdentityModel.Tokens;\n//using System;\n//using System.Collections.Generic;\n//using System.IdentityModel.Tokens.Jwt;\n//using System.Linq;\n//using System.Security.Claims;\n//using System.Text;\n\n//namespace xbytechat.api.AuthModule.Services\n//{\n//    public class JwtTokenService : IJwtTokenService\n//    {\n//        private readonly IConfiguration _config;\n//        private readonly ILogger<JwtTokenService> _logger;\n\n//        public JwtTokenService(IConfiguration config, ILogger<JwtTokenService> logger)\n//        {\n//            _config = config;\n//            _logger = logger;\n//        }\n\n//        //public string GenerateToken(\n//        //    string userId,\n//        //    string role,\n//        //    string userName,\n//        //    string email,\n//        //    string status,\n//        //    string businessId,\n//        //    string companyName,\n//        //    string plan,\n//        //    List<string> permissions)\n//        //{\n//        //    try\n//        //    {\n//        //        var permissionString = string.Join(\",\", permissions ?? new List<string>());\n\n//        //        var claims = new List<Claim>\n//        //        {\n//        //            new Claim(JwtRegisteredClaimNames.Sub, userId),\n//        //            new Claim(\"id\", userId),\n//        //            new Claim(ClaimTypes.NameIdentifier, userId),\n//        //            new Claim(\"email\", email ?? \"\"),\n//        //            new Claim(\"role\", role?.ToLowerInvariant() ?? \"unknown\"),    // lowercased!\n//        //            new Claim(\"name\", userName ?? \"\"),\n//        //            new Claim(\"status\", status ?? \"unknown\"),\n//        //            new Claim(\"businessId\", businessId ?? \"\"),                   // lowercased!\n//        //            new Claim(\"companyName\", companyName ?? \"\"),\n//        //            new Claim(\"plan\", plan?.ToLowerInvariant() ?? \"basic\"),      // lowercased!\n//        //            new Claim(\"permissions\", permissionString)\n//        //        };\n\n//        //        return GenerateToken(claims);\n//        //    }\n//        //    catch (Exception ex)\n//        //    {\n//        //        _logger.LogError(ex, \"‚ùå Error generating token for userId: {UserId}\", userId);\n//        //        throw;\n//        //    }\n//        //}\n//        public string GenerateToken(string userId, string role,string userName,\n//                                    string email,\n//                                    string status,\n//                                    string businessId,\n//                                    string companyName,\n//                                    //string plan,\n//                                    List<string> permissions,\n//                                    string planId)\n//        {\n//            try\n//            {\n//                var permissionString = string.Join(\",\", permissions ?? new List<string>());\n\n//                var claims = new List<Claim>\n//        {\n//            new Claim(JwtRegisteredClaimNames.Sub, userId),\n//            new Claim(\"id\", userId),\n//            new Claim(ClaimTypes.NameIdentifier, userId),\n//            new Claim(\"email\", email ?? \"\"),\n//            new Claim(\"name\", userName ?? \"\"),\n//            new Claim(\"status\", status ?? \"unknown\"),\n//            new Claim(\"businessId\", businessId ?? \"\"),\n//            new Claim(\"companyName\", companyName ?? \"\"),\n//           // new Claim(\"plan\", plan?.ToLowerInvariant() ?? \"basic\"),\n//            new Claim(\"permissions\", permissionString),\n\n//            // ‚úÖ Proper role mapping for both ASP.NET and frontend\n//            new Claim(\"role\", role?.ToLowerInvariant() ?? \"unknown\"),           // for React\n//            new Claim(ClaimTypes.Role, role?.ToLowerInvariant() ?? \"unknown\") ,  // for ASP.NET\n//            new Claim(\"plan_id\", planId ?? string.Empty)\n\n//        };\n\n//                return GenerateToken(claims);\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"‚ùå Error generating token for userId: {UserId}\", userId);\n//                throw;\n//            }\n//        }\n\n//        public string GenerateToken(IEnumerable<Claim> claims)\n//        {\n//            try\n//            {\n//                var jwtSettings = _config.GetSection(\"JwtSettings\");\n\n//                var secret = jwtSettings[\"SecretKey\"];\n//                if (string.IsNullOrEmpty(secret))\n//                {\n//                    _logger.LogWarning(\"‚ö†Ô∏è JWT SecretKey is missing from configuration.\");\n//                    throw new Exception(\"JWT SecretKey is not configured.\");\n//                }\n\n//                var expiry = jwtSettings[\"ExpiryMinutes\"];\n//                if (!int.TryParse(expiry, out var expiryMinutes))\n//                {\n//                    _logger.LogWarning(\"‚ö†Ô∏è JWT ExpiryMinutes is invalid or missing. Defaulting to 60 minutes.\");\n//                    expiryMinutes = 60;\n//                }\n\n//                var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret));\n//                var creds = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256);\n\n//                var expires = DateTime.UtcNow.AddMinutes(expiryMinutes);\n//                var unixExp = new DateTimeOffset(expires).ToUnixTimeSeconds();\n\n//                var finalClaims = claims.ToList();\n//                finalClaims.Add(new Claim(JwtRegisteredClaimNames.Exp, unixExp.ToString()));\n\n//                var token = new JwtSecurityToken(\n//                    issuer: jwtSettings[\"Issuer\"],\n//                    audience: jwtSettings[\"Audience\"],\n//                    claims: finalClaims,\n//                    expires: expires,\n//                    signingCredentials: creds\n//                );\n\n//                _logger.LogInformation(\"‚úÖ Token generated for: {Email}\", finalClaims.FirstOrDefault(c => c.Type == \"email\")?.Value);\n\n//                return new JwtSecurityTokenHandler().WriteToken(token);\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"‚ùå Error generating JWT from claims.\");\n//                throw;\n//            }\n//        }\n\n//        public TokenValidationParameters GetValidationParameters()\n//        {\n//            var jwtSettings = _config.GetSection(\"JwtSettings\");\n\n//            return new TokenValidationParameters\n//            {\n//                ValidateIssuer = true,\n//                ValidateAudience = true,\n//                ValidateIssuerSigningKey = true,\n//                ValidateLifetime = true,\n//                RequireSignedTokens = true,\n//                RequireExpirationTime = true,\n//                ValidIssuer = jwtSettings[\"Issuer\"],\n//                ValidAudience = jwtSettings[\"Audience\"],\n//                IssuerSigningKey = new SymmetricSecurityKey(\n//                    Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])\n//                ),\n//                ClockSkew = TimeSpan.Zero,\n//                RoleClaimType = \"role\",   // standardized!\n//                NameClaimType = \"name\"\n//            };\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Controllers/BusinessLoginController.cs",
      "sha256": "7eda997e4bb632f6a487b52c57910c7c83ca50c17597d2a02e818cb3ed2459be",
      "language": "csharp",
      "size": 1158,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.DTOs;\nusing xbytechat.api.DTOs.Tenants;\nusing xbytechat.api.Services.Interfaces;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/tenants\")]\n    public class BusinessLoginController : ControllerBase\n    {\n        private readonly IBusinessService _tenantService;\n\n        public BusinessLoginController(IBusinessService tenantService)\n        {\n            _tenantService = tenantService;\n        }\n\n        [HttpPost(\"login\")]\n        public async Task<IActionResult> Login([FromBody] BusinessLoginRequest request)\n        {\n            try\n            {\n                var tenant = await _tenantService.LoginAsync(request);\n\n                return Ok(new\n                {\n                    tenant.Id,\n                    tenant.Email,\n                    tenant.CompanyName,\n                    //tenant.Role,\n                    //tenant.Plan,\n                    Message = \"Login successful\"\n                });\n            }\n            catch (Exception ex)\n            {\n                return Unauthorized(new { Message = ex.Message });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Controllers/DevSeedController.cs",
      "sha256": "e42997ea8140347d4c505532f1a7a654901109f62e13ac56dc8622ae0a20b3d8",
      "language": "csharp",
      "size": 2166,
      "content": "#if DEBUG\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Linq;\nusing System.Threading.Tasks;\n\n[ApiController]\n[Route(\"api/dev-seed\")]\n[ApiExplorerSettings(IgnoreApi = true)]\npublic class DevSeedController : ControllerBase\n{\n    private readonly UserManager<IdentityUser> _users;\n    private readonly RoleManager<IdentityRole> _roles;\n    private readonly IWebHostEnvironment _env;\n\n    public DevSeedController(\n        UserManager<IdentityUser> users,\n        RoleManager<IdentityRole> roles,\n        IWebHostEnvironment env)\n    {\n        _users = users;\n        _roles = roles;\n        _env = env;\n    }\n\n    [AllowAnonymous]\n    [HttpPost(\"e2e-user\")]\n    public async Task<IActionResult> SeedE2E([FromBody] SeedReq req)\n    {\n        // Only allow in Development\n        if (!_env.IsDevelopment())\n            return Forbid();\n\n        var email = (req.Email ?? \"\").Trim();\n        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(req.Password))\n            return BadRequest(new { message = \"email/password required\" });\n\n        // Idempotent create/update\n        var user = await _users.FindByEmailAsync(email);\n        if (user == null)\n        {\n            user = new IdentityUser { UserName = email, Email = email, EmailConfirmed = true };\n            var create = await _users.CreateAsync(user, req.Password);\n            if (!create.Succeeded)\n                return BadRequest(new { message = \"create failed\", errors = create.Errors.Select(e => e.Description) });\n        }\n\n        // Ensure role (use \"superadmin\" or a minimal CRM role your app understands)\n        var role = string.IsNullOrWhiteSpace(req.Role) ? \"superadmin\" : req.Role.Trim();\n        if (!await _roles.RoleExistsAsync(role))\n            await _roles.CreateAsync(new IdentityRole(role));\n        if (!await _users.IsInRoleAsync(user, role))\n            await _users.AddToRoleAsync(user, role);\n\n        return Ok(new { ok = true, email, role });\n    }\n\n    public record SeedReq(string Email, string Password, string Role = \"superadmin\");\n}\n#endif\n"
    },
    {
      "path": "xbytechat-api/Controllers/HealthCheckController.cs",
      "sha256": "52d69ec41e8cd4fc50bc1281507a30e39bc629677df7bbd0e1cfb876e2623086",
      "language": "csharp",
      "size": 799,
      "content": "// xbytechat-api/Controllers/HealthCheckController.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Reflection;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class HealthCheckController : ControllerBase\n    {\n        [HttpGet]\n        public IActionResult Get() => Ok(\"‚úÖ xByteChat backend is running üöÄ\");\n\n        [AllowAnonymous]\n        [HttpGet(\"ping\")]\n        public IActionResult Ping()\n        {\n            var version = Assembly.GetExecutingAssembly()?.GetName()?.Version?.ToString() ?? \"0.0.0\";\n            return Ok(new\n            {\n                status = \"ok\",\n                version,\n                serverTimeUtc = DateTime.UtcNow.ToString(\"o\")\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Controllers/MessageLogsController.cs",
      "sha256": "e36c308f0d6e42ec75e8db9797ab4ea5e68366e503e0bb04a51824491c22620a",
      "language": "csharp",
      "size": 648,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Models;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MessageLogsController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n\n        public MessageLogsController(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> Get()\n        {\n            var logs = await _db.MessageLogs\n                .OrderByDescending(log => log.CreatedAt)\n                .ToListAsync();\n\n            return Ok(logs);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Controllers/MessagesController.cs",
      "sha256": "c23a3ca95ebcc60cdb6a1762b7c1d9605de6427a56dd4b91332e15eecfbb4500",
      "language": "csharp",
      "size": 6940,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Services.Messages.Interfaces;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MessagesController : ControllerBase\n    {\n        private readonly IMessageService _messageService;\n\n        public MessagesController(IMessageService messageService)\n        {\n            _messageService = messageService;\n        }\n\n        /// ‚úÖ SEND TEXT MESSAGE\n        [HttpPost(\"send-text\")]\n        public async Task<IActionResult> SendTextMessage([FromBody] TextMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"‚ùå Validation failed\",\n                    errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage)\n                });\n            }\n\n            var result = await _messageService.SendMessageAsync(dto);\n\n            return result.Success\n                ? Ok(new { success = true, message = result.Message, response = result.Data })\n                : StatusCode(500, new { success = false, message = result.Message, error = result.ErrorMessage });\n        }\n\n        /// ‚úÖ SEND IMAGE MESSAGE\n        [HttpPost(\"send-image\")]\n        public async Task<IActionResult> SendImageMessage([FromBody] ImageMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"‚ùå Validation failed\",\n                    errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage)\n                });\n            }\n\n            var result = await _messageService.SendMessageAsync(dto);\n\n            return result.Success\n                ? Ok(new { success = true, message = result.Message, response = result.Data })\n                : StatusCode(500, new { success = false, message = result.Message, error = result.ErrorMessage });\n        }\n\n        /// ‚úÖ SEND TEMPLATE MESSAGE\n        [HttpPost(\"send-template\")]\n        public async Task<IActionResult> SendTemplateMessage([FromBody] TemplateMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"‚ùå Validation failed\",\n                    errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage)\n                });\n            }\n\n            var result = await _messageService.SendMessageAsync(dto);\n\n            return result.Success\n                ? Ok(new { success = true, message = result.Message, response = result.Data })\n                : StatusCode(500, new { success = false, message = result.Message, error = result.ErrorMessage });\n        }\n\n        /// ‚úÖ SEND CTA BUTTON MESSAGE (Free-form Interactive)\n        [HttpPost(\"send-cta\")]\n        public async Task<IActionResult> SendCtaMessage([FromBody] CtaMessageDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.RecipientPhone) || string.IsNullOrWhiteSpace(dto.BodyText) || dto.Buttons == null || dto.Buttons.Count == 0)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"‚ùå Invalid request ‚Äî phone, body text and buttons are required\"\n                });\n            }\n\n            // Optional tracking\n            var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n            var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n            var result = await _messageService.SendInteractiveMessageAsync(dto.RecipientPhone, dto.BodyText, dto.Buttons);\n\n            return result.Success\n                ? Ok(new\n                {\n                    success = true,\n                    message = result.Message,\n                    messageId = result.MessageId,\n                    logId = result.MessageLogId,\n                    raw = result.RawResponse\n                })\n                : StatusCode(500, new\n                {\n                    success = false,\n                    message = result.Message,\n                    error = result.ErrorMessage\n                });\n        }\n\n        /// ‚úÖ SEND BULK MESSAGES\n        //[HttpPost(\"send-bulk\")]\n        //public async Task<SendResultExtended> SendBulkMessagesAsync(BulkMessageDto dto)\n        //{\n        //    var result = new SendResultExtended\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ All messages processed.\",\n        //        LogId = null,\n        //        MessageId = null\n        //    };\n\n        //    try\n        //    {\n        //        foreach (var contactId in dto.ContactIds)\n        //        {\n        //            var contact = await _dbContext.Contacts\n        //                .Include(c => c.Business)\n        //                .FirstOrDefaultAsync(c => c.Id == contactId);\n\n        //            if (contact == null || string.IsNullOrWhiteSpace(contact.PhoneNumber))\n        //                continue;\n\n        //            BaseMessageDto message;\n\n        //            if (dto.MessageType.ToLower() == \"template\")\n        //            {\n        //                message = new TemplateMessageDto\n        //                {\n        //                    RecipientNumber = contact.PhoneNumber,\n        //                    MessageContent = dto.MessageTemplate,\n        //                    MessageType = \"template\",\n        //                    TemplateName = dto.TemplateName!,\n        //                    TemplateParameters = dto.TemplateParams ?? new List<string>(),\n        //                    BusinessId = contact.BusinessId\n        //                };\n        //            }\n        //            else\n        //            {\n        //                message = new TextMessageDto\n        //                {\n        //                    RecipientNumber = contact.PhoneNumber,\n        //                    MessageContent = dto.MessageTemplate,\n        //                    MessageType = \"text\",\n        //                    BusinessId = contact.BusinessId\n        //                };\n        //            }\n\n        //            await SendMessageAsync(message); // already returns SendResultExtended\n        //        }\n\n        //        return result;\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        return new SendResultExtended\n        //        {\n        //            Success = false,\n        //            Message = \"‚ùå Bulk send failed.\",\n        //            ErrorMessage = ex.Message\n        //        };\n        //    }\n        //}\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Controllers/SendMessageController.cs",
      "sha256": "f2cf8e138d7177000e595b752d8da0ab54cec8a56df32328388c4a4f58f328d9",
      "language": "csharp",
      "size": 1919,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Services;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WhatsAppController : ControllerBase\n    {\n        private readonly WhatsAppService _whatsAppService;\n\n        public WhatsAppController(WhatsAppService whatsAppService)\n        {\n            _whatsAppService = whatsAppService;\n        }\n\n        /// <summary>\n        /// Endpoint to send a WhatsApp message.\n        /// </summary>\n        /// <param name=\"recipientPhone\">Recipient's phone number (including country code).</param>\n        /// <param name=\"messageText\">Text message to send.</param>\n        /// <returns>Response with the result of the send operation.</returns>\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendMessage([FromQuery] string recipientPhone, [FromQuery] string messageText)\n        {\n            if (string.IsNullOrEmpty(recipientPhone) || string.IsNullOrEmpty(messageText))\n            {\n                return BadRequest(new { success = false, message = \"Phone number and message text are required.\" });\n            }\n\n            // Call WhatsApp service to send the message\n            var result = await _whatsAppService.SendMessageAsync(recipientPhone, messageText);\n\n            if (result.Success)\n            {\n                return Ok(new\n                {\n                    success = true,\n                    message = \"‚úÖ Message sent successfully.\",\n                    response = result.RawResponse\n                });\n            }\n            else\n            {\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = result.ErrorMessage ?? \"‚ùå Failed to send message.\",\n                    response = result.RawResponse\n                });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Controllers/ContactsController.cs",
      "sha256": "2d74dc1fdc1740f3002c6187d7dfe3031721d374c9e4e061492a35e3456508b3",
      "language": "csharp",
      "size": 8394,
      "content": "using CsvHelper.Configuration;\nusing CsvHelper;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Globalization;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;  // <-- For GetBusinessId extension\n\nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ContactsController : ControllerBase\n    {\n        private readonly IContactService _contactService;\n        private readonly ILogger<ContactsController> _logger;\n        public ContactsController(IContactService contactService, ILogger<ContactsController> logger)\n        {\n            _contactService = contactService;\n            _logger = logger;\n        }\n\n        // POST: api/contacts\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> AddContact([FromBody] ContactDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid contact payload.\"));\n\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var result = await _contactService.AddContactAsync(businessId, dto);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(result); // Already ResponseResult.ErrorInfo\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"üö® Unexpected error in AddContact\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while creating contact.\", ex.ToString()));\n            }\n        }\n\n\n\n\n        // GET: api/contacts/{id}\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetContactById(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var contact = await _contactService.GetContactByIdAsync(businessId, id);\n            if (contact == null)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Contact loaded.\", contact));\n        }\n\n        // PUT: api/contacts/{id}\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateContact(Guid id, [FromBody] ContactDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            dto.Id = id;\n            var success = await _contactService.UpdateContactAsync(businessId, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Contact updated.\"));\n        }\n\n        // DELETE: api/contacts/{id}\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteContact(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _contactService.DeleteContactAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Contact deleted.\"));\n        }\n\n        // POST: api/contacts/parse-csv\n        [ApiExplorerSettings(IgnoreApi = true)]\n        [HttpPost(\"parse-csv\")]\n        [Consumes(\"multipart/form-data\")]\n        public async Task<IActionResult> ParseCsvToContactsAsync([FromForm] IFormFile file)\n        {\n            if (file == null || file.Length == 0)\n                return BadRequest(ResponseResult.ErrorInfo(\"CSV file is required.\"));\n\n            var businessId = HttpContext.User.GetBusinessId();\n            using var stream = file.OpenReadStream();\n\n            try\n            {\n                var parseResult = await _contactService.ParseCsvToContactsAsync(businessId, stream);\n                return Ok(ResponseResult.SuccessInfo(\"CSV parsed with detailed results.\", parseResult));\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(ResponseResult.ErrorInfo(\"CSV parsing failed: \" + ex.Message));\n            }\n        }\n\n        // PATCH: /api/contacts/{id}/favorite\n        [HttpPatch(\"{id}/favorite\")]\n        public async Task<IActionResult> ToggleFavorite(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _contactService.ToggleFavoriteAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Favorite toggled.\"));\n        }\n\n        // PATCH: /api/contacts/{id}/archive\n        [HttpPatch(\"{id}/archive\")]\n        public async Task<IActionResult> ToggleArchive(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _contactService.ToggleArchiveAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Archive toggled.\"));\n        }\n\n        // POST: api/contacts/bulk-assign-tag\n        [HttpPost(\"bulk-assign-tag\")]\n        public async Task<IActionResult> AssignTagToContacts([FromBody] AssignTagToContactsDto dto)\n        {\n            if (dto.ContactIds == null || !dto.ContactIds.Any())\n                return BadRequest(ResponseResult.ErrorInfo(\"No contact IDs provided.\"));\n\n            var businessId = HttpContext.User.GetBusinessId();\n            await _contactService.AssignTagToContactsAsync(businessId, dto.ContactIds, dto.TagId);\n\n            return Ok(ResponseResult.SuccessInfo(\"Tag assigned to selected contacts.\"));\n        }\n\n        //[HttpGet(\"contacts\")]\n        [HttpGet]\n        public async Task<IActionResult> GetAllContacts(\n        [FromQuery] string? tab = \"all\",\n        [FromQuery] int page = 1,\n        [FromQuery] int pageSize = 25)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var pagedResult = await _contactService.GetPagedContactsAsync(businessId, tab, page, pageSize);\n            return Ok(ResponseResult.SuccessInfo(\"Contacts loaded.\", pagedResult));\n        }\n        // GET: api/contacts/all\n        [HttpGet(\"all\")]\n        public async Task<IActionResult> GetAllContactsFlat()\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var allContacts = await _contactService.GetAllContactsAsync(businessId); // This returns IEnumerable<ContactDto>\n            return Ok(allContacts); // Returns plain array!\n        }\n\n        [HttpPost(\"filter-by-tags\")]\n        public async Task<IActionResult> GetContactsByTags([FromBody] List<string> tags)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n\n            // ‚úÖ Convert to Guid list safely\n            var tagGuids = tags\n                .Where(x => Guid.TryParse(x, out _))\n                .Select(Guid.Parse)\n                .ToList();\n\n            var contacts = await _contactService.GetContactsByTagsAsync(businessId, tagGuids);\n\n            return Ok(ResponseResult.SuccessInfo(\"Contacts filtered successfully\", contacts));\n        }\n\n        [HttpPost(\"bulk-import\")]\n        [Consumes(\"multipart/form-data\")]\n        public async Task<IActionResult> BulkImportContactsAsync(IFormFile file)\n        {\n            if (file == null || file.Length == 0)\n                return BadRequest(ResponseResult.ErrorInfo(\"CSV file is required.\"));\n\n            var businessId = HttpContext.User.GetBusinessId();\n\n            try\n            {\n                var result = await _contactService.BulkImportAsync(businessId, file.OpenReadStream());\n                return Ok(ResponseResult.SuccessInfo(\"Contacts imported successfully.\", result));\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Bulk import failed.\");\n                return BadRequest(ResponseResult.ErrorInfo(\"Import failed: \" + ex.Message));\n            }\n        }\n       \n        [HttpGet(\"by-tags\")]\n        public async Task<IActionResult> GetContactsByTags([FromQuery] List<Guid> tagIds)\n        {\n            var businessId = User.GetBusinessId();  // Your tenant logic\n            var contacts = await _contactService.GetContactsByTagsAsync(businessId, tagIds);\n            return Ok(contacts);\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Controllers/NotesController.cs",
      "sha256": "f1a804500703b68b36ff3c8de61e939660f5c9f400d5e65588af1cb135b7f87f",
      "language": "csharp",
      "size": 2925,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Helpers; \nusing xbytechat.api.Shared; \nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class NotesController : ControllerBase\n    {\n        private readonly INoteService _noteService;\n\n        public NotesController(INoteService noteService)\n        {\n            _noteService = noteService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddNote([FromBody] NoteDto dto)\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var result = await _noteService.AddNoteAsync(businessId, dto);\n                return Ok(ResponseResult.SuccessInfo(\"Note created.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Error creating note\", ex.Message));\n            }\n        }\n\n        [HttpGet(\"contact/{contactId}\")]\n        public async Task<IActionResult> GetNotesByContact(Guid contactId)\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var result = await _noteService.GetNotesByContactAsync(businessId, contactId);\n                return Ok(ResponseResult.SuccessInfo(\"Notes loaded.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Error fetching notes\", ex.Message));\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetNoteById(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var result = await _noteService.GetNoteByIdAsync(businessId, id);\n            if (result == null)\n                return NotFound(ResponseResult.ErrorInfo(\"Note not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Note loaded.\", result));\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateNote(Guid id, [FromBody] NoteDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _noteService.UpdateNoteAsync(businessId, id, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Note not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Note updated.\"));\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteNote(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _noteService.DeleteNoteAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Note not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Note deleted.\"));\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Controllers/RemindersController.cs",
      "sha256": "66418c8f0a9fa94a869653029f08e5c16243f5d8e83b36b884bb9c33d8448f29",
      "language": "csharp",
      "size": 3205,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RemindersController : ControllerBase\n    {\n        private readonly IReminderService _reminderService;\n\n        public RemindersController(IReminderService reminderService)\n        {\n            _reminderService = reminderService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddReminder(ReminderDto dto)\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                if (dto == null)\n                    return BadRequest(ResponseResult.ErrorInfo(\"Reminder data is missing.\"));\n\n                var result = await _reminderService.AddReminderAsync(businessId, dto);\n                return Ok(ResponseResult.SuccessInfo(\"Reminder created.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"An error occurred while adding the reminder.\", ex.Message));\n            }\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllReminders()\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var reminders = await _reminderService.GetAllRemindersAsync(businessId);\n                return Ok(ResponseResult.SuccessInfo(\"Reminders loaded.\", reminders));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"An error occurred while fetching reminders.\", ex.Message));\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetReminderById(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var reminder = await _reminderService.GetReminderByIdAsync(businessId, id);\n            if (reminder == null)\n                return NotFound(ResponseResult.ErrorInfo(\"Reminder not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Reminder loaded.\", reminder));\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateReminder(Guid id, [FromBody] ReminderDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _reminderService.UpdateReminderAsync(businessId, id, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Reminder not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Reminder updated.\"));\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteReminder(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _reminderService.DeleteReminderAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Reminder not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Reminder deleted.\"));\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Controllers/TagsController.cs",
      "sha256": "987b5679067710f05ca13825f2ae57be4ee9b4452a415b3b477bb0234956c6d9",
      "language": "csharp",
      "size": 1975,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Helpers; \nusing xbytechat.api.Shared;  \n\nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TagsController : ControllerBase\n    {\n        private readonly ITagService _tagService;\n\n        public TagsController(ITagService tagService)\n        {\n            _tagService = tagService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddTag([FromBody] TagDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var result = await _tagService.AddTagAsync(businessId, dto);\n            return Ok(ResponseResult.SuccessInfo(\"Tag created.\", result));\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateTag(Guid id, [FromBody] TagDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _tagService.UpdateTagAsync(businessId, id, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Tag not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Tag updated.\"));\n        }\n\n        [HttpGet(\"get-tags\")]\n        public async Task<IActionResult> GetAllTags()\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var tags = await _tagService.GetAllTagsAsync(businessId);\n            return Ok(ResponseResult.SuccessInfo(\"Tags loaded.\", tags));\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteTag(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _tagService.DeleteTagAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Tag not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Tag deleted.\"));\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/AssignTagToContactsDto.cs",
      "sha256": "69c9b7fc83bbaf32fab62812c210f204eca0b723301878252850f6527f71a7f3",
      "language": "csharp",
      "size": 189,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class AssignTagToContactsDto\n    {\n        public List<Guid> ContactIds { get; set; } = new();\n        public Guid TagId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/BulkImportResultDto.cs",
      "sha256": "05392f5b522d34ba8069854727ab513053a529252f41be0f45e827f4df613eac",
      "language": "csharp",
      "size": 333,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class BulkImportResultDto\n    {\n        public int Imported { get; set; }\n        public List<CsvImportError> Errors { get; set; } = new();\n    }\n\n    public class CsvImportErrorMsg\n    {\n        public int RowNumber { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/ContactDto.cs",
      "sha256": "2b8886ad0c004c3a5ce0ac58626222791b3ae690e9ba47cd564e3c9da570df48",
      "language": "csharp",
      "size": 1356,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.CRM.Dtos\n{\n    public class ContactDto\n    {\n        public Guid? Id { get; set; } // Nullable for Create (used in PUT)\n\n        public string Name { get; set; } // Contact full name\n\n        public string PhoneNumber { get; set; } // WhatsApp-compatible number\n\n        public string? Email { get; set; } // Optional email address\n\n        public string? LeadSource { get; set; } // e.g., \"WhatsApp\", \"Facebook\", \"Landing Page\"\n\n        public DateTime? LastContactedAt { get; set; } // Last WhatsApp or CRM interaction\n\n        public DateTime? NextFollowUpAt { get; set; } // For scheduling reminders\n\n        public string? Notes { get; set; } // Internal notes for the contact\n\n        public DateTime? CreatedAt { get; set; } // Read-only timestamp\n\n        // ‚úÖ NEW: Structured Tags (replaces comma-separated strings)\n        // Example: [{ id: 1, name: \"VIP\" }, { id: 2, name: \"Follow-up\" }]\n        public List<ContactTagDto> Tags { get; set; } = new();\n\n        public bool IsFavorite { get; set; } = false;\n        public bool IsArchived { get; set; } = false;\n        public string? Group { get; set; }\n\n        public bool IsTemporary { get; set; } = false;\n        public Guid? SourceCampaignId { get; set; }\n        public DateTime? ExpiresAt { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/ContactDtoCsvMap.cs",
      "sha256": "5dd22482c7625ce4ada21b1595015bd0273b921d8a5ac8787486b4f2ad874570",
      "language": "csharp",
      "size": 473,
      "content": "using CsvHelper.Configuration;\n\nnamespace xbytechat.api.CRM.Dtos\n{\n    public class ContactDtoCsvMap : ClassMap<ContactDto>\n    {\n        public ContactDtoCsvMap()\n        {\n            Map(m => m.Name).Name(\"name\", \"Name\", \"full name\");\n            Map(m => m.PhoneNumber).Name(\"phone\", \"Phone\", \"mobile\", \"mobile number\");\n            Map(m => m.Email).Name(\"email\", \"Email\").Optional();\n            Map(m => m.Notes).Name(\"notes\", \"Notes\").Optional();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/ContactTagDto.cs",
      "sha256": "4b81638e7806bd28b702637f4d9e379725b86e63045e558d2abbdc54663b7650",
      "language": "csharp",
      "size": 272,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class ContactTagDto\n    {\n        public Guid TagId { get; set; }\n        public string TagName { get; set; } = string.Empty;\n        public string? ColorHex { get; set; }\n        public string? Category { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/CsvImportResult.cs",
      "sha256": "7e0d39bb56ef6fa9d80f69f7c37ece658407016ae68b838cd425050ed5f31680",
      "language": "csharp",
      "size": 364,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class CsvImportResult<T>\n    {\n        public List<T> SuccessRecords { get; set; } = new();\n        public List<CsvImportError> Errors { get; set; } = new();\n    }\n\n    public class CsvImportError\n    {\n        public int RowNumber { get; set; }\n        public string ErrorMessage { get; set; } = string.Empty;\n    }\n}"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/NoteDto.cs",
      "sha256": "a324df31b2679d4db34a15ec6a647792e8a9456a0684e01787d9baeff44f3c8f",
      "language": "csharp",
      "size": 515,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class NoteDto\n    {\n        public Guid Id { get; set; }\n        public Guid? ContactId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public string Source { get; set; }\n        public string CreatedBy { get; set; }\n        public bool IsPinned { get; set; }\n        public bool IsInternal { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime? EditedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/PagedResult.cs",
      "sha256": "8219de3f57c89361d316f109fd9372741ed6702c71d6dfbe7d7850dbf3a585b7",
      "language": "csharp",
      "size": 342,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class PagedResult<T>\n    {\n        public List<T> Items { get; set; } = new();\n        public int TotalCount { get; set; }\n\n        public int Page { get; set; }\n        public int PageSize { get; set; }\n        public int TotalPages => (int)Math.Ceiling(TotalCount / (double)PageSize);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/ReminderDto.cs",
      "sha256": "9d68d6f7f4b48cada2f4160bc381166930f0fdfb5212ad239fe27abf981f5d0f",
      "language": "csharp",
      "size": 946,
      "content": "using System;\n\nnamespace xbytechat.api.CRM.Dtos\n{\n    public class ReminderDto\n    {\n        public Guid? Id { get; set; }  // Null when creating, present when updating\n\n        public Guid? ContactId { get; set; }\n\n        public string Title { get; set; } = default!;\n\n        public string? Description { get; set; }\n\n        public DateTime DueAt { get; set; }\n\n        public string? Status { get; set; } = \"Pending\";\n\n        public string? ReminderType { get; set; }\n\n        public int? Priority { get; set; }\n\n        public bool IsRecurring { get; set; }\n\n        public string? RecurrencePattern { get; set; }\n\n        public bool SendWhatsappNotification { get; set; }\n\n        public string? LinkedCampaign { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime? CreatedAt { get; set; }\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public DateTime? CompletedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/TagDto.cs",
      "sha256": "c13472528bbecc527f9c37b069e6b80729380492eb7126891fe189c354298a04",
      "language": "csharp",
      "size": 512,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class TagDto\n    {\n        public Guid? Id { get; set; }\n\n        public string Name { get; set; } = default!;\n\n        public string? ColorHex { get; set; }\n\n        public string? Category { get; set; }\n\n        public string? Notes { get; set; }\n\n        public bool IsSystemTag { get; set; } = false;\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime? CreatedAt { get; set; }\n\n        public DateTime? LastUsedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Interfaces/IContactService.cs",
      "sha256": "cd965fba71ad33d2cd884288f207914e0e6aa24233a777136295ed2ca86040d6",
      "language": "csharp",
      "size": 1835,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    /// <summary>\n    /// Defines the contract for all operations related to managing contacts.\n    /// </summary>\n    public interface IContactService\n    {\n\n        Task<ResponseResult> AddContactAsync(Guid businessId, ContactDto dto);\n        Task<ContactDto> GetContactByIdAsync(Guid businessId, Guid contactId);\n        Task<bool> UpdateContactAsync(Guid businessId, ContactDto dto);\n        Task<bool> DeleteContactAsync(Guid businessId, Guid contactId);\n        Task<CsvImportResult<ContactDto>> ParseCsvToContactsAsync(Guid businessId, Stream csvStream);\n        Task<Contact> FindOrCreateAsync(Guid businessId, string phoneNumber);\n        Task<bool> ToggleFavoriteAsync(Guid businessId, Guid contactId);\n        Task<bool> ToggleArchiveAsync(Guid businessId, Guid contactId);\n        Task<IEnumerable<ContactDto>> GetAllContactsAsync(Guid businessId, string? tab = \"all\");\n        Task AssignTagToContactsAsync(Guid businessId, List<Guid> contactIds, Guid tagId);\n        Task<PagedResult<ContactDto>> GetPagedContactsAsync(\n             Guid businessId,\n             string? tab = \"all\",\n             int page = 1,\n             int pageSize = 25,\n             string? searchTerm = null\n            );\n        // ‚úÖ Tag-based filtering support\n        Task<IEnumerable<ContactDto>> GetContactsByTagsAsync(Guid businessId, List<Guid> tags);\n\n        Task<BulkImportResultDto> BulkImportAsync(Guid businessId, Stream csvStream);\n        // üìå New method to support flow node ‚Üí tag assignment\n        Task<bool> AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tags);\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Interfaces/INoteService.cs",
      "sha256": "c7f3f36ea21a7508514c9054225df94aef67048fa1290fb84f860cd103764e87",
      "language": "csharp",
      "size": 687,
      "content": "using xbytechat.api.CRM.Dtos;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    public interface INoteService\n    {\n        // For creating new note\n        Task<NoteDto> AddNoteAsync(Guid businessId, NoteDto dto);\n\n        // List all notes for dashboard view\n        Task<IEnumerable<NoteDto>> GetNotesByContactAsync(Guid businessId, Guid contactId);\n\n        // For loading note in edit mode\n        Task<NoteDto?> GetNoteByIdAsync(Guid businessId, Guid noteId);\n        // Handles editing\n        Task<bool> UpdateNoteAsync(Guid businessId, Guid noteId, NoteDto dto);\n        // Soft delete ‚Üí IsActive = false\n        Task<bool> DeleteNoteAsync(Guid businessId, Guid noteId);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Interfaces/IReminderService.cs",
      "sha256": "b495104def7199c6e12aa28db2fad8c0c13dc551ab0cba0f8c0797361e14d8c3",
      "language": "csharp",
      "size": 806,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    public interface IReminderService\n    {\n        //For creating new reminder\n        Task<ReminderDto> AddReminderAsync(Guid businessId, ReminderDto dto);\n\n        //List all reminders for dashboard view\n        Task<IEnumerable<ReminderDto>> GetAllRemindersAsync(Guid businessId);\n\n        //For loading reminder in edit mode\n        Task<ReminderDto?> GetReminderByIdAsync(Guid businessId, Guid reminderId);\n\n        //Handles editing\n        Task<bool> UpdateReminderAsync(Guid businessId, Guid reminderId, ReminderDto dto);\n        //Soft delete ‚Üí IsActive = false\n        Task<bool> DeleteReminderAsync(Guid businessId, Guid reminderId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Interfaces/ITagService.cs",
      "sha256": "bf7f3ea814c33020416ac25cd9d3b6f600c58c7dc849701f93e8093bf2949681",
      "language": "csharp",
      "size": 633,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    public interface ITagService\n    {\n        Task<TagDto> AddTagAsync(Guid businessId, TagDto dto);\n\n        Task<IEnumerable<TagDto>> GetAllTagsAsync(Guid businessId);\n        Task<bool> UpdateTagAsync(Guid businessId, Guid tagId, TagDto dto);\n        Task<bool> DeleteTagAsync(Guid businessId, Guid tagId);\n       // Task AssignTagAsync(Guid businessId, string phone, string tag);\n        Task AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tagNames);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Mappers/ContactDtoCsvMap.cs",
      "sha256": "41e1be6be963984ed9a757aa1575fd03a556851cdea04c287a91c4358696e166",
      "language": "csharp",
      "size": 387,
      "content": "using CsvHelper.Configuration;\nusing xbytechat.api.CRM.Dtos;\n\npublic sealed class ContactDtoCsvMap : ClassMap<ContactDto>\n{\n    public ContactDtoCsvMap()\n    {\n        Map(m => m.Name).Name(\"Name\");\n        Map(m => m.PhoneNumber).Name(\"Phone\");\n        Map(m => m.Email).Name(\"Email\");\n        Map(m => m.LeadSource).Name(\"LeadSource\");\n        Map(m => m.Notes).Name(\"Notes\");\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Mappers/NoteMapper.cs",
      "sha256": "e26b6156b9aca01214bd18633cce4bee5e8ce187f220ff8857ab6c496e4fb933",
      "language": "csharp",
      "size": 1238,
      "content": "using xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.CRM.Mappers\n{\n    public static class NoteMapper\n    {\n        public static NoteDto MapToDto(Note note)\n        {\n            return new NoteDto\n            {\n                Id = note.Id,\n                ContactId = note.ContactId,\n                Title = note.Title,\n                Content = note.Content,\n                Source = note.Source,\n                CreatedBy = note.CreatedBy,\n                IsPinned = note.IsPinned,\n                IsInternal = note.IsInternal,\n                CreatedAt = note.CreatedAt,\n                EditedAt = note.EditedAt\n            };\n        }\n\n        public static Note MapToEntity(NoteDto dto, Guid businessId)\n        {\n            return new Note\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = dto.ContactId,\n                Title = dto.Title,\n                Content = dto.Content,\n                Source = dto.Source,\n                CreatedBy = dto.CreatedBy,\n                IsPinned = dto.IsPinned,\n                IsInternal = dto.IsInternal,\n                CreatedAt = DateTime.UtcNow\n            };\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Mappers/ReminderMapper.cs",
      "sha256": "53c9d6d5cbdcb101f0bfc0225af4e6afc6b29111d75fb565263bf55135999e2d",
      "language": "csharp",
      "size": 865,
      "content": "namespace xbytechat.api.CRM.Mappers\n{\n    using xbytechat.api.CRM.Models;\n    using xbytechat.api.CRM.Dtos;\n\n    public static class ReminderMapper\n    {\n        public static ReminderDto MapToDto(Reminder r)\n        {\n            return new ReminderDto\n            {\n                Id = r.Id,\n                Title = r.Title,\n                Description = r.Description,\n                DueAt = r.DueAt,\n                ReminderType = r.ReminderType,\n                Priority = r.Priority,\n                IsRecurring = r.IsRecurring,\n                RecurrencePattern = r.RecurrencePattern,\n                SendWhatsappNotification = r.SendWhatsappNotification,\n                LinkedCampaign = r.LinkedCampaign,\n                Status = r.Status,\n                CreatedAt = r.CreatedAt,\n                ContactId = r.ContactId\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Models/Contact.cs",
      "sha256": "666ba2273cafca4df4074fc51aa6aa601fa9876af7ffe40f8cc4f2c76773a6c0",
      "language": "csharp",
      "size": 2361,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.CRM.Models\n{\n    public class Contact\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; } = null!;\n        // üîó FK to Business\n        [Required]\n        [MaxLength(100)]\n        public string Name { get; set; }\n\n        [Required]\n        [MaxLength(20)]\n        public string PhoneNumber { get; set; }\n\n        [MaxLength(100)]\n        public string? Email { get; set; }\n\n        [MaxLength(50)]\n        public string? LeadSource { get; set; }\n\n        [MaxLength(200)]\n        public string? Tags { get; set; } // Legacy, will be deprecated after ContactTag rollout\n\n        public DateTime? LastContactedAt { get; set; }\n        public DateTime? NextFollowUpAt { get; set; }\n\n        [MaxLength(500)]\n        public string? Notes { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // üß© NEW: Link to Tags\n        public ICollection<ContactTag> ContactTags { get; set; } = new List<ContactTag>();\n        // ‚úÖ New: Navigation property for many-to-many tags\n        //public ICollection<ContactTag> TagsLink { get; set; } = new List<ContactTag>();\n\n        public DateTime? LastCTAInteraction { get; set; }\n        public string? LastCTAType { get; set; }\n        public Guid? LastClickedProductId { get; set; }\n\n        // üö¶ If true, skip automation flows (manually or programmatically paused)\n        public bool IsAutomationPaused { get; set; } = false;\n\n        // üë§ If agent assigned, automation should pause (runtime check)\n        public Guid? AssignedAgentId { get; set; }\n\n        public bool IsFavorite { get; set; } = false;\n        public bool IsArchived { get; set; } = false;\n        public string? Group { get; set; }\n        public bool IsActive { get; set; } = true;\n\n\n        //public bool IsTemporary { get; set; } = false;\n        //public Guid? SourceCampaignId { get; set; }\n        //public DateTime? ExpiresAt { get; set; }\n\n        public string? ProfileName { get; set; }            // latest WA profile.name we saw inbound\n        public DateTime? ProfileNameUpdatedAt { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Models/ContactTag.cs",
      "sha256": "422118f780b163abab39572c97ce858dcf1288cc05ae98138b8bdb3dc4329322",
      "language": "csharp",
      "size": 501,
      "content": "using System.ComponentModel.DataAnnotations;\nusing xbytechat.api.CRM.Models;\n\npublic class ContactTag\n{\n    [Key]\n    public Guid Id { get; set; }\n\n    [Required]\n    public Guid ContactId { get; set; }\n\n    public Contact Contact { get; set; }\n\n    [Required]\n    public Guid TagId { get; set; }\n\n    public Tag Tag { get; set; }\n\n    [Required]\n    public Guid BusinessId { get; set; }\n\n    public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n\n    public string? AssignedBy { get; set; }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Models/Note.cs",
      "sha256": "200a2bd5f7ef4bb6ed3fa7cf3dc7403ea1b2e236a843b985dfc1c02c4fe75112",
      "language": "csharp",
      "size": 914,
      "content": "namespace xbytechat.api.CRM.Models\n{\n    public class Note\n    {\n        public Guid Id { get; set; }\n\n        // üîó Ownership & Association\n        public Guid? BusinessId { get; set; }\n        public Guid? ContactId { get; set; }\n\n        // üìù Core Content\n        public string Title { get; set; } // Optional short title (for pinning or preview)\n        public string Content { get; set; }\n\n        // üîñ Contextual Intelligence\n        public string Source { get; set; } // e.g., \"Manual\", \"Call Log\", \"WhatsApp\", \"LeadForm\"\n        public string CreatedBy { get; set; } // Store agent/user name or userId\n\n        // üìå UX Flags\n        public bool IsPinned { get; set; } = false;\n        public bool IsInternal { get; set; } = false; // if true, only visible to team\n\n        // üïì Timestamps\n        public DateTime CreatedAt { get; set; }\n        public DateTime? EditedAt { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/CRM/Models/Reminder.cs",
      "sha256": "bc1e21ef857422a3ea4524863c8adefe038dc7cd43c474ae463ca6ca5379a830",
      "language": "csharp",
      "size": 1719,
      "content": "using System;\n\nnamespace xbytechat.api.CRM.Models\n{\n    public class Reminder\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }   // For multi-tenant isolation\n\n        public Guid ContactId { get; set; }    // Which contact this reminder is for\n\n        public string Title { get; set; } = default!; // Main reminder title (e.g., \"Call back about invoice\")\n\n        public string? Description { get; set; } // Longer notes, optional (for internal detail)\n\n        public DateTime DueAt { get; set; }    // When reminder should notify\n\n        public string Status { get; set; } = \"Pending\"; // \"Pending\", \"Done\", \"Overdue\"\n\n        public string? ReminderType { get; set; } // e.g., \"Call\", \"Email\", \"Follow-up\", \"Meeting\"\n\n        public int? Priority { get; set; } // e.g., 1 (High), 2 (Medium), 3 (Low)\n\n        public bool IsRecurring { get; set; } = false; // For future ‚Üí repeat reminder\n\n        public string? RecurrencePattern { get; set; } // e.g., \"Weekly\", \"Monthly\" (optional)\n\n        public bool SendWhatsappNotification { get; set; } = false; // Future: auto-WA message trigger\n\n        public string? LinkedCampaign { get; set; } // Optional: which campaign this reminder relates to\n\n        public bool IsActive { get; set; } = true;  // Soft delete support\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public DateTime? CompletedAt { get; set; } // Track when it was marked Done\n\n        public string? LastCTAType { get; set; } // e.g., Confirm, Reschedule\n        public DateTime? LastClickedAt { get; set; }\n        public bool FollowUpSent { get; set; } = false;\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Models/Tag.cs",
      "sha256": "e654598a682f6c55d536da4b9e18ace295abe7d611603fd18eaf61f4a5baff54",
      "language": "csharp",
      "size": 1108,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.CRM.Models\n{\n    public class Tag\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }             // Multi-tenant isolation\n\n        public string Name { get; set; } = default!;     // e.g., \"VIP\", \"Follow-up\"\n\n        public string? ColorHex { get; set; }            // For UI tag styling (e.g., #FF5733)\n\n        public string? Category { get; set; }            // e.g., \"Priority\", \"Campaign\", \"Stage\"\n\n        public string? Notes { get; set; }               // Admin/internal notes about this tag\n\n        public bool IsSystemTag { get; set; } = false;   // Reserved tags like \"New\", \"Subscribed\"\n\n        public bool IsActive { get; set; } = true;       // For soft-deactivation (future bulk ops)\n\n        public DateTime CreatedAt { get; set; }          // For analytics / sorting\n\n        public DateTime? LastUsedAt { get; set; }        // Useful for CRM insights later\n\n        public ICollection<ContactTag> ContactTags { get; set; } = new List<ContactTag>(); // Linked contacts\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/ContactProfileService.cs",
      "sha256": "73838d6b56bdf8c39a912fccc2dba0df5c0a449a03b65e907f5806bf7a3e58a0",
      "language": "csharp",
      "size": 3345,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.Features.Contacts.Services\n{\n    public sealed class ContactProfileService : IContactProfileService\n    {\n        private readonly AppDbContext _db;\n\n        public ContactProfileService(AppDbContext db) => _db = db;\n\n        public async Task UpsertProfileNameAsync(\n            Guid businessId,\n            string phoneE164,\n            string? profileName,\n            CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(phoneE164) || string.IsNullOrWhiteSpace(profileName))\n                return;\n\n            static string Digits(string s) => new string(s.Where(char.IsDigit).ToArray());\n            var phoneDigits = Digits(phoneE164);\n            var newName = profileName.Trim();\n            var now = DateTime.UtcNow;\n\n            // Try digits first; fall back to raw (handles legacy rows)\n            var contact = await _db.Contacts.FirstOrDefaultAsync(\n                c => c.BusinessId == businessId &&\n                     (c.PhoneNumber == phoneDigits || c.PhoneNumber == phoneE164),\n                ct);\n\n            if (contact == null)\n            {\n                // Concurrency-safe create\n                try\n                {\n                    _db.Contacts.Add(new Contact\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        PhoneNumber = phoneDigits,          // canonical = digits-only\n                        Name = newName,                     // display fallback\n                        ProfileName = newName,              // WA profile name\n                        ProfileNameUpdatedAt = now,\n                        CreatedAt = now,\n                        LastContactedAt = now\n                    });\n                    await _db.SaveChangesAsync(ct);\n                    return;\n                }\n                catch (DbUpdateException)\n                {\n                    // Someone else created it ‚Äî refetch and continue as update\n                    contact = await _db.Contacts.FirstOrDefaultAsync(\n                        c => c.BusinessId == businessId && c.PhoneNumber == phoneDigits, ct);\n                    if (contact == null) return;\n                }\n            }\n\n            var anyChange = false;\n\n            if (!string.Equals(contact.ProfileName, newName, StringComparison.Ordinal))\n            {\n                contact.ProfileName = newName;\n                contact.ProfileNameUpdatedAt = now;\n                anyChange = true;\n            }\n\n            // Backfill Name if empty/placeholder/phone\n            if (string.IsNullOrWhiteSpace(contact.Name) ||\n                contact.Name == \"WhatsApp User\" ||\n                contact.Name == contact.PhoneNumber)\n            {\n                if (!string.Equals(contact.Name, newName, StringComparison.Ordinal))\n                {\n                    contact.Name = newName;\n                    anyChange = true;\n                }\n            }\n\n            if (anyChange)\n            {\n                contact.ProfileNameUpdatedAt = now;\n                await _db.SaveChangesAsync(ct);\n            }\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/ContactService.cs",
      "sha256": "8d878c77a65acb2340d4f634b9cc4c3ca3906e9569553273b32450293c27ea6f",
      "language": "csharp",
      "size": 36933,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing CsvHelper;\nusing CsvHelper.Configuration;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class ContactService : IContactService\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<ContactService> _logger;\n\n        public ContactService(AppDbContext db, ILogger<ContactService> logger)\n        {\n            _db = db;\n            _logger = logger;\n        }\n\n        //public async Task<ContactDto> AddContactAsync(Guid businessId, ContactDto dto)\n        //{\n        //    _logger.LogInformation(\"AddContactAsync called for businessId={BusinessId}, Name={Name}\", businessId, dto.Name);\n\n        //    var contact = new Contact\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = businessId,\n        //        Name = dto.Name,\n        //        PhoneNumber = dto.PhoneNumber,\n        //        Email = dto.Email,\n        //        LeadSource = dto.LeadSource,\n        //        LastContactedAt = dto.LastContactedAt?.ToUniversalTime(),\n        //        NextFollowUpAt = dto.NextFollowUpAt?.ToUniversalTime(),\n        //        Notes = dto.Notes,\n        //        CreatedAt = DateTime.UtcNow,\n        //        IsFavorite = dto.IsFavorite,\n        //        IsArchived = dto.IsArchived,\n        //        Group = dto.Group\n        //    };\n\n        //    if (dto.Tags != null && dto.Tags.Any())\n        //    {\n        //        contact.ContactTags = dto.Tags.Select(t => new ContactTag\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            ContactId = contact.Id,\n        //            TagId = t.TagId,\n        //            BusinessId = businessId,\n        //            AssignedAt = DateTime.UtcNow,\n        //            AssignedBy = \"system\"\n        //        }).ToList();\n        //    }\n\n        //    _db.Contacts.Add(contact);\n\n        //    try\n        //    {\n        //        await _db.SaveChangesAsync();\n        //        _logger.LogInformation(\"Contact added: {ContactId} for businessId={BusinessId}\", contact.Id, businessId);\n        //    }\n        //    catch (DbUpdateException ex)\n        //    {\n        //        _logger.LogError(ex, \"DB error in AddContactAsync (Contact: {Contact}, BusinessId={BusinessId})\", contact, businessId);\n        //        var innerMessage = ex.InnerException?.Message ?? ex.Message;\n        //        throw new Exception(\"‚ùå DB save error (Contact): \" + innerMessage, ex);\n        //    }\n\n        //    return new ContactDto\n        //    {\n        //        Id = contact.Id,\n        //        Name = contact.Name,\n        //        PhoneNumber = contact.PhoneNumber,\n        //        Email = contact.Email,\n        //        LeadSource = contact.LeadSource,\n        //        LastContactedAt = contact.LastContactedAt,\n        //        NextFollowUpAt = contact.NextFollowUpAt,\n        //        Notes = contact.Notes,\n        //        CreatedAt = contact.CreatedAt,\n        //        Tags = dto.Tags ?? new List<ContactTagDto>()\n        //    };\n        //}\n\n        //public async Task<ResponseResult> AddContactAsync(Guid businessId, ContactDto dto)\n        //{\n        //    _logger.LogInformation(\"üì© AddContactAsync called for businessId={BusinessId}, Name={Name}\", businessId, dto.Name);\n\n        //    try\n        //    {\n        //        // 1. Duplicate check\n        //        if (!string.IsNullOrWhiteSpace(dto.PhoneNumber))\n        //        {\n        //            var existingContact = await _db.Contacts.FirstOrDefaultAsync(c =>\n        //                c.BusinessId == businessId && c.PhoneNumber == dto.PhoneNumber);\n\n        //            if (existingContact != null)\n        //            {\n        //                _logger.LogWarning(\"‚ö†Ô∏è Duplicate contact attempt for phone {Phone}\", dto.PhoneNumber);\n        //                return ResponseResult.ErrorInfo(\n        //                    $\"‚ùå A contact with the phone number '{dto.PhoneNumber}' already exists.\"\n        //                );\n        //            }\n        //        }\n\n        //        // 2. Build entity\n        //        var contact = new Contact\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = businessId,\n        //            Name = dto.Name,\n        //            PhoneNumber = dto.PhoneNumber,\n        //            Email = dto.Email,\n        //            LeadSource = dto.LeadSource,\n        //            LastContactedAt = dto.LastContactedAt?.ToUniversalTime(),\n        //            NextFollowUpAt = dto.NextFollowUpAt?.ToUniversalTime(),\n        //            Notes = dto.Notes,\n        //            CreatedAt = DateTime.UtcNow,\n        //            IsFavorite = dto.IsFavorite,\n        //            IsArchived = dto.IsArchived,\n        //            Group = dto.Group\n        //        };\n\n        //        // 3. Tags mapping\n        //        if (dto.Tags != null && dto.Tags.Any())\n        //        {\n        //            contact.ContactTags = dto.Tags.Select(t => new ContactTag\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                ContactId = contact.Id,\n        //                TagId = t.TagId,\n        //                BusinessId = businessId,\n        //                AssignedAt = DateTime.UtcNow,\n        //                AssignedBy = \"system\"\n        //            }).ToList();\n        //        }\n\n        //        _db.Contacts.Add(contact);\n\n        //        // 4. Save\n        //        try\n        //        {\n        //            await _db.SaveChangesAsync();\n        //            _logger.LogInformation(\"‚úÖ Contact added successfully: {ContactId} (BusinessId={BusinessId})\", contact.Id, businessId);\n        //        }\n        //        catch (DbUpdateException ex)\n        //        {\n        //            _logger.LogError(ex, \"‚ùå DB error in AddContactAsync (BusinessId={BusinessId})\", businessId);\n        //            var innerMessage = ex.InnerException?.Message ?? ex.Message;\n        //            return ResponseResult.ErrorInfo(\"‚ùå Database save error (Contact): \" + innerMessage);\n        //        }\n\n        //        // 5. Map back to DTO\n        //        var resultDto = new ContactDto\n        //        {\n        //            Id = contact.Id,\n        //            Name = contact.Name,\n        //            PhoneNumber = contact.PhoneNumber,\n        //            Email = contact.Email,\n        //            LeadSource = contact.LeadSource,\n        //            LastContactedAt = contact.LastContactedAt,\n        //            NextFollowUpAt = contact.NextFollowUpAt,\n        //            Notes = contact.Notes,\n        //            CreatedAt = contact.CreatedAt,\n        //            IsFavorite = contact.IsFavorite,\n        //            IsArchived = contact.IsArchived,\n        //            Group = contact.Group,\n        //            Tags = dto.Tags ?? new List<ContactTagDto>()\n        //        };\n\n        //        return ResponseResult.SuccessInfo(\"‚úÖ Contact created successfully.\", resultDto);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"üö® Unexpected error in AddContactAsync (BusinessId={BusinessId})\", businessId);\n        //        return ResponseResult.ErrorInfo(\"üö® A server error occurred while creating the contact.\", ex.Message);\n        //    }\n        //}\n\n        public async Task<ResponseResult> AddContactAsync(Guid businessId, ContactDto dto)\n        {\n            _logger.LogInformation(\"üì© AddContactAsync called for businessId={BusinessId}, Name={Name}\", businessId, dto.Name);\n\n            try\n            {\n                // 1. Normalize the phone number using your private method first.\n                var normalizedPhone = NormalizePhone(dto.PhoneNumber);\n\n                // 2. Validate the normalized number.\n                // Your NormalizePhone method returns an empty string for invalid numbers.\n                if (string.IsNullOrWhiteSpace(normalizedPhone))\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Phone number is invalid. It must contain exactly 10 digits.\");\n                }\n\n                // 3. Use the clean, normalized number for the duplicate check.\n                var existingContact = await _db.Contacts.FirstOrDefaultAsync(c =>\n                    c.BusinessId == businessId && c.PhoneNumber == normalizedPhone);\n\n                if (existingContact != null)\n                {\n                    _logger.LogWarning(\"‚ö†Ô∏è Duplicate contact attempt for phone {Phone}\", dto.PhoneNumber);\n                    return ResponseResult.ErrorInfo(\n                        $\"‚ùå A contact with the phone number '{dto.PhoneNumber}' already exists.\"\n                    );\n                }\n\n                // 4. Build the new contact entity, SAVING the normalized number.\n                var contact = new Contact\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Name = dto.Name,\n                    PhoneNumber = normalizedPhone, // Save the standardized number\n                    Email = dto.Email,\n                    LeadSource = dto.LeadSource,\n                    LastContactedAt = dto.LastContactedAt?.ToUniversalTime(),\n                    NextFollowUpAt = dto.NextFollowUpAt?.ToUniversalTime(),\n                    Notes = dto.Notes,\n                    CreatedAt = DateTime.UtcNow,\n                    IsFavorite = dto.IsFavorite,\n                    IsArchived = dto.IsArchived,\n                    Group = dto.Group\n                };\n\n                // Map tags if they are provided\n                if (dto.Tags != null && dto.Tags.Any())\n                {\n                    contact.ContactTags = dto.Tags.Select(t => new ContactTag\n                    {\n                        Id = Guid.NewGuid(),\n                        ContactId = contact.Id,\n                        TagId = t.TagId,\n                        BusinessId = businessId,\n                        AssignedAt = DateTime.UtcNow,\n                        AssignedBy = \"system\"\n                    }).ToList();\n                }\n\n                _db.Contacts.Add(contact);\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"‚úÖ Contact added successfully: {ContactId}\", contact.Id);\n\n                // Map the created entity back to a DTO for the response\n                var resultDto = new ContactDto\n                {\n                    Id = contact.Id,\n                    Name = contact.Name,\n                    PhoneNumber = contact.PhoneNumber,\n                    Email = contact.Email,\n                    LeadSource = contact.LeadSource,\n                    CreatedAt = contact.CreatedAt,\n                    Tags = contact.ContactTags?.Select(ct => new ContactTagDto { TagId = ct.TagId }).ToList() ?? new List<ContactTagDto>()\n                };\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Contact created successfully.\", resultDto);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"üö® Unexpected error in AddContactAsync for business {BusinessId}\", businessId);\n                return ResponseResult.ErrorInfo(\"üö® A server error occurred while creating the contact.\", ex.Message);\n            }\n        }\n        public async Task<ContactDto> GetContactByIdAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"GetContactByIdAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts\n                     .Where(c => c.BusinessId == businessId && c.Id == contactId && c.IsActive)\n                    .Include(c => c.ContactTags)\n                        .ThenInclude(ct => ct.Tag)\n                    .FirstOrDefaultAsync();\n\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return null;\n                }\n\n                return new ContactDto\n                {\n                    Id = contact.Id,\n                    Name = contact.Name,\n                    PhoneNumber = contact.PhoneNumber,\n                    Email = contact.Email,\n                    LeadSource = contact.LeadSource,\n                    LastContactedAt = contact.LastContactedAt,\n                    NextFollowUpAt = contact.NextFollowUpAt,\n                    Notes = contact.Notes,\n                    CreatedAt = contact.CreatedAt,\n                    Tags = contact.ContactTags?\n                        .Where(ct => ct.Tag != null)\n                        .Select(ct => new ContactTagDto\n                        {\n                            TagId = ct.TagId,\n                            TagName = ct.Tag.Name\n                        })\n                        .ToList() ?? new List<ContactTagDto>()\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error fetching contact by id: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        public async Task<bool> UpdateContactAsync(Guid businessId, ContactDto dto)\n        {\n            _logger.LogInformation(\"UpdateContactAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, dto.Id);\n            try\n            {\n                var contact = await _db.Contacts\n                    .Include(c => c.ContactTags)\n                    .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == dto.Id);\n\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for update: businessId={BusinessId}, contactId={ContactId}\", businessId, dto.Id);\n                    return false;\n                }\n\n                contact.Name = dto.Name;\n                contact.PhoneNumber = dto.PhoneNumber;\n                contact.Email = dto.Email;\n                contact.LeadSource = dto.LeadSource;\n                contact.LastContactedAt = dto.LastContactedAt?.ToUniversalTime();\n                contact.NextFollowUpAt = dto.NextFollowUpAt?.ToUniversalTime();\n                contact.Notes = dto.Notes;\n\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact updated: {ContactId}\", contact.Id);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error updating contact: businessId={BusinessId}, contactId={ContactId}\", businessId, dto.Id);\n                throw;\n            }\n        }\n\n        public async Task<bool> DeleteContactAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"DeleteContactAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts\n                    .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId && c.IsActive);\n\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for delete: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return false;\n                }\n\n                contact.IsActive = false; // üëà Soft delete\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact soft-deleted: {ContactId}\", contactId);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error deleting contact: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        \n        public async Task<CsvImportResult<ContactDto>> ParseCsvToContactsAsync(Guid businessId, Stream csvStream)\n        {\n            _logger.LogInformation(\"ParseCsvToContactsAsync: businessId={BusinessId}\", businessId);\n\n            var result = new CsvImportResult<ContactDto>();\n\n            var config = new CsvConfiguration(CultureInfo.InvariantCulture)\n            {\n                HeaderValidated = null,\n                MissingFieldFound = null\n            };\n\n            using var reader = new StreamReader(csvStream);\n            using var csv = new CsvReader(reader, config);\n\n            // Register custom column mapping for ContactDto\n            csv.Context.RegisterClassMap<ContactDtoCsvMap>();\n\n            int rowNumber = 1;\n\n            await csv.ReadAsync();     // Move to first row\n            csv.ReadHeader();          // Read header row\n\n            while (await csv.ReadAsync())\n            {\n                rowNumber++;\n                try\n                {\n                    var record = csv.GetRecord<ContactDto>();\n                    record.CreatedAt = DateTime.UtcNow;\n\n                    result.SuccessRecords.Add(record);\n                }\n                catch (Exception ex)\n                {\n                    // Avoid ambiguity by using explicit object instantiation\n                    var error = new CsvImportError\n                    {\n                        RowNumber = rowNumber,\n                        ErrorMessage = ex.Message\n                    };\n                    result.Errors.Add(error);\n                }\n            }\n\n            _logger.LogInformation(\"CSV parsed with {SuccessCount} successes and {ErrorCount} errors.\",\n                result.SuccessRecords.Count, result.Errors.Count);\n\n            return result;\n        }\n\n        //private string NormalizePhone(string phoneNumber)\n        //{\n        //    if (string.IsNullOrWhiteSpace(phoneNumber))\n        //        return phoneNumber;\n\n        //    var digits = new string(phoneNumber.Where(char.IsDigit).ToArray());\n\n        //    // If it starts with \"91\" and length = 12 ‚Üí add +\n        //    if (digits.StartsWith(\"91\") && digits.Length == 12)\n        //        return \"+\" + digits;\n\n        //    // If it starts with \"91\" and length = 10 (missing country code) ‚Üí add +91\n        //    if (digits.Length == 10)\n        //        return \"+91\" + digits;\n\n        //    // If it already includes country code with + (13 digits for India)\n        //    if (digits.StartsWith(\"91\") && digits.Length == 12)\n        //        return \"+\" + digits;\n\n        //    // Fallback ‚Üí return with +\n        //    if (!digits.StartsWith(\"+\"))\n        //        return \"+\" + digits;\n\n        //    return digits;\n        //}\n\n        private string NormalizePhone(string phoneNumber)\n        {\n            // 1. Handle empty or null input\n            if (string.IsNullOrWhiteSpace(phoneNumber))\n            {\n                return string.Empty;\n            }\n\n            // 2. Extract only the numeric digits from the string\n            var digits = new string(phoneNumber.Where(char.IsDigit).ToArray());\n\n            // 3. If the number starts with India's country code (91) and is 12 digits long,\n            //    strip the country code to get the core 10-digit number.\n            if (digits.StartsWith(\"91\") && digits.Length == 12)\n            {\n                digits = digits.Substring(2);\n            }\n\n            // 4. NEW: Strictly validate that the result is 10 digits long.\n            if (digits.Length != 10)\n            {\n                // If the number of digits is not exactly 10, it's invalid.\n                // Return an empty string to signal that it could not be normalized.\n                return string.Empty;\n            }\n\n            // 5. If the number is a valid 10 digits, return it in the standard +91 format.\n            return \"+91\" + digits;\n        }\n        public async Task<Contact> FindOrCreateAsync(Guid businessId, string phoneNumber)\n        {\n            var normalized = NormalizePhone(phoneNumber);\n            _logger.LogInformation(\"FindOrCreateAsync: businessId={BusinessId}, rawPhone={PhoneNumber}, normalized={Normalized}\",\n                businessId, phoneNumber, normalized);\n\n            try\n            {\n                var contact = await _db.Contacts\n                    .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == normalized);\n\n                if (contact != null)\n                {\n                    _logger.LogInformation(\"Contact already exists: contactId={ContactId}\", contact.Id);\n                    return contact;\n                }\n\n                var newContact = new Contact\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Name = \"WhatsApp User\",\n                    PhoneNumber = normalized,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                _db.Contacts.Add(newContact);\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact created: {ContactId}\", newContact.Id);\n\n                return newContact;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error in FindOrCreateAsync: businessId={BusinessId}, phoneNumber={PhoneNumber}\", businessId, phoneNumber);\n                throw;\n            }\n        }\n\n        public async Task<bool> ToggleFavoriteAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"ToggleFavoriteAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts.FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId);\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for favorite toggle: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return false;\n                }\n\n                contact.IsFavorite = !contact.IsFavorite;\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact favorite toggled: {ContactId} -> {IsFavorite}\", contactId, contact.IsFavorite);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error toggling favorite: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        public async Task AssignTagToContactsAsync(Guid businessId, List<Guid> contactIds, Guid tagId)\n        {\n            _logger.LogInformation(\"AssignTagToContactsAsync: businessId={BusinessId}, tagId={TagId}, contactIds={ContactIds}\", businessId, tagId, contactIds);\n            try\n            {\n                var contacts = await _db.Contacts\n                    .Where(c => c.BusinessId == businessId && contactIds.Contains(c.Id))\n                    .Include(c => c.ContactTags)\n                    .ToListAsync();\n\n                foreach (var contact in contacts)\n                {\n                    bool alreadyAssigned = contact.ContactTags.Any(link => link.TagId == tagId);\n                    if (!alreadyAssigned)\n                    {\n                        contact.ContactTags.Add(new ContactTag\n                        {\n                            ContactId = contact.Id,\n                            TagId = tagId\n                        });\n                    }\n                }\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Tags assigned to contacts\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error assigning tag: businessId={BusinessId}, tagId={TagId}\", businessId, tagId);\n                throw;\n            }\n        }\n\n        public async Task<bool> ToggleArchiveAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"ToggleArchiveAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts.FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId);\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for archive toggle: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return false;\n                }\n\n                contact.IsArchived = !contact.IsArchived;\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact archive toggled: {ContactId} -> {IsArchived}\", contactId, contact.IsArchived);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error toggling archive: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        public async Task<IEnumerable<ContactDto>> GetAllContactsAsync(Guid businessId, string? tab = \"all\")\n        {\n            _logger.LogInformation(\"GetAllContactsAsync: businessId={BusinessId}, tab={Tab}\", businessId, tab);\n            try\n            {\n                var baseQuery = _db.Contacts\n                    .Where(c => c.BusinessId == businessId && c.IsActive);\n\n                if (tab == \"favourites\")\n                    baseQuery = baseQuery.Where(c => c.IsFavorite);\n                else if (tab == \"archived\")\n                    baseQuery = baseQuery.Where(c => c.IsArchived);\n                else if (tab == \"groups\")\n                    baseQuery = baseQuery.Where(c => !string.IsNullOrEmpty(c.Group));\n\n                var query = baseQuery\n                    .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag);\n\n                var contacts = await query.ToListAsync();\n\n                var result = contacts.Select(c => new ContactDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    PhoneNumber = c.PhoneNumber,\n                    Email = c.Email,\n                    LeadSource = c.LeadSource,\n                    LastContactedAt = c.LastContactedAt,\n                    NextFollowUpAt = c.NextFollowUpAt,\n                    Notes = c.Notes,\n                    CreatedAt = c.CreatedAt,\n                    IsFavorite = c.IsFavorite,\n                    IsArchived = c.IsArchived,\n                    Group = c.Group,\n                    Tags = c.ContactTags?\n                        .Where(ct => ct.Tag != null)\n                        .Select(ct => new ContactTagDto\n                        {\n                            TagId = ct.TagId,\n                            TagName = ct.Tag.Name,\n                            ColorHex = ct.Tag.ColorHex,\n                            Category = ct.Tag.Category\n                        })\n                        .ToList() ?? new List<ContactTagDto>()\n                });\n\n                _logger.LogInformation(\"GetAllContactsAsync returned {Count} contacts\", contacts.Count);\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error in GetAllContactsAsync: businessId={BusinessId}\", businessId);\n                throw;\n            }\n        }\n        public async Task<PagedResult<ContactDto>> GetPagedContactsAsync(Guid businessId, string? tab, int page, int pageSize, string? searchTerm)\n        {\n            _logger.LogInformation(\"GetPagedContactsAsync: businessId={BusinessId}, tab={Tab}, page={Page}, pageSize={PageSize}\",\n                businessId, tab, page, pageSize);\n\n            if (page < 1) page = 1;\n            if (pageSize < 1) pageSize = 25;\n            if (pageSize > 100) pageSize = 100; // max limit\n\n            var baseQuery = _db.Contacts\n                .Where(c => c.BusinessId == businessId && c.IsActive);\n\n            if (tab == \"favourites\")\n                baseQuery = baseQuery.Where(c => c.IsFavorite);\n            else if (tab == \"archived\")\n                baseQuery = baseQuery.Where(c => c.IsArchived);\n            else if (tab == \"groups\")\n                baseQuery = baseQuery.Where(c => !string.IsNullOrEmpty(c.Group));\n\n            var totalCount = await baseQuery.CountAsync();\n\n            var contacts = await baseQuery\n                .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag)\n                .OrderBy(c => c.Name) // or any order preferred\n                .Skip((page - 1) * pageSize)\n                .Take(pageSize)\n                .ToListAsync();\n\n            var items = contacts.Select(c => new ContactDto\n            {\n                Id = c.Id,\n                Name = c.Name,\n                PhoneNumber = c.PhoneNumber,\n                Email = c.Email,\n                LeadSource = c.LeadSource,\n                LastContactedAt = c.LastContactedAt,\n                NextFollowUpAt = c.NextFollowUpAt,\n                Notes = c.Notes,\n                CreatedAt = c.CreatedAt,\n                IsFavorite = c.IsFavorite,\n                IsArchived = c.IsArchived,\n                Group = c.Group,\n                Tags = c.ContactTags?\n                    .Where(ct => ct.Tag != null)\n                    .Select(ct => new ContactTagDto\n                    {\n                        TagId = ct.TagId,\n                        TagName = ct.Tag.Name,\n                        ColorHex = ct.Tag.ColorHex,\n                        Category = ct.Tag.Category\n                    })\n                    .ToList() ?? new List<ContactTagDto>()\n            }).ToList();\n\n            return new PagedResult<ContactDto>\n            {\n                Items = items,\n                TotalCount = totalCount\n            };\n        }\n\n        public async Task<IEnumerable<ContactDto>> GetContactsByTagsAsync(Guid businessId, List<string> tags)\n        {\n            var contacts = await _db.Contacts\n                .Where(c => c.BusinessId == businessId && !c.IsArchived)\n                .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag)\n                .Where(c => c.ContactTags.Any(ct => tags.Contains(ct.Tag.Name))) // üîç Filter by tag names\n                .OrderBy(c => c.Name)\n                .Select(c => new ContactDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    PhoneNumber = c.PhoneNumber,\n                    Email = c.Email,\n                    Notes = c.Notes,\n                    Tags = c.ContactTags.Select(ct => new ContactTagDto\n                    {\n                        TagId = ct.Tag.Id,\n                        TagName = ct.Tag.Name,\n                        ColorHex = ct.Tag.ColorHex,\n                        Category = ct.Tag.Category\n                    }).ToList()\n                })\n                .ToListAsync();\n\n            return contacts;\n        }\n        public async Task<BulkImportResultDto> BulkImportAsync(Guid businessId, Stream csvStream)\n        {\n            _logger.LogInformation(\"Bulk import started for businessId={BusinessId}\", businessId);\n\n            var result = new BulkImportResultDto();\n            var config = new CsvConfiguration(CultureInfo.InvariantCulture)\n            {\n                HeaderValidated = null,\n                MissingFieldFound = null\n            };\n\n            using var reader = new StreamReader(csvStream);\n            using var csv = new CsvReader(reader, config);\n            csv.Context.RegisterClassMap<ContactDtoCsvMap>();\n\n            await csv.ReadAsync();\n            csv.ReadHeader();\n\n            var contactsToAdd = new List<Contact>();\n            int row = 1;\n\n            while (await csv.ReadAsync())\n            {\n                row++;\n                try\n                {\n                    var dto = csv.GetRecord<ContactDto>();\n                    if (string.IsNullOrWhiteSpace(dto.PhoneNumber)) continue;\n\n                    var contact = new Contact\n                    {\n                        Id = Guid.NewGuid(),\n                        Name = dto.Name?.Trim() ?? \"Unnamed\",\n                        PhoneNumber = dto.PhoneNumber.Trim(),\n                        Email = dto.Email?.Trim(),\n                        Notes = dto.Notes,\n                        BusinessId = businessId,\n                        CreatedAt = DateTime.UtcNow\n                    };\n\n                    contactsToAdd.Add(contact);\n                    result.Imported++;\n                }\n                catch (Exception ex)\n                {\n                    result.Errors.Add(new CsvImportError\n                    {\n                        RowNumber = row,\n                        ErrorMessage = ex.Message\n                    });\n                }\n            }\n\n            await _db.Contacts.AddRangeAsync(contactsToAdd);\n            await _db.SaveChangesAsync();\n\n            _logger.LogInformation(\"Bulk import completed: {Imported} contacts, {Errors} errors\",\n                result.Imported, result.Errors.Count);\n\n            return result;\n        }\n        public async Task<IEnumerable<ContactDto>> GetContactsByTagsAsync(Guid businessId, List<Guid> tagIds)\n        {\n            // Step 1: Prepare base query (without Include yet)\n            var baseQuery = _db.Contacts\n                .Where(c => c.BusinessId == businessId && !c.IsArchived);\n\n            // Step 2: Apply tag filter only if tagIds are provided\n            if (tagIds?.Any() == true)\n            {\n                baseQuery = baseQuery.Where(c =>\n                    c.ContactTags.Any(ct =>\n                        tagIds.Contains(ct.TagId)\n                    )\n                );\n            }\n\n            // Step 3: Add Includes after filtering to avoid cast issue\n            var queryWithIncludes = baseQuery\n                .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag);\n\n            // Step 4: Fetch data\n            var contacts = await queryWithIncludes.ToListAsync();\n\n            // Step 5: Project to DTO\n            return contacts.Select(c => new ContactDto\n            {\n                Id = c.Id,\n                Name = c.Name,\n                PhoneNumber = c.PhoneNumber,\n                Tags = c.ContactTags.Select(ct => new ContactTagDto\n                {\n                    TagId = ct.Tag.Id,\n                    TagName = ct.Tag.Name,\n                    ColorHex = ct.Tag.ColorHex,\n                    Category = ct.Tag.Category\n                }).ToList()\n            });\n        }\n        public async Task<bool> AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tags)\n        {\n            if (tags == null || tags.Count == 0)\n                return false;\n\n            // üß† Step 1: Find the contact by phone\n            var contact = await _db.Contacts\n                .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == phoneNumber && !c.IsArchived);\n\n            if (contact == null)\n                return false;\n\n            foreach (var tagName in tags)\n            {\n                if (string.IsNullOrWhiteSpace(tagName))\n                    continue;\n\n                // ‚úÖ Step 2: Find or create the tag (by name)\n                var tag = await _db.Tags\n                    .FirstOrDefaultAsync(t => t.BusinessId == businessId && t.Name == tagName && t.IsActive);\n\n                if (tag == null)\n                {\n                    tag = new Tag\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        Name = tagName,\n                        ColorHex = \"#8c8c8c\", // default gray if not assigned\n                        IsActive = true,\n                        CreatedAt = DateTime.UtcNow\n                    };\n                    _db.Tags.Add(tag);\n                }\n\n                // üß™ Step 3: Check if contact already has this tag\n                var alreadyTagged = await _db.ContactTags.AnyAsync(ct =>\n                    ct.ContactId == contact.Id && ct.TagId == tag.Id);\n\n                if (!alreadyTagged)\n                {\n                    _db.ContactTags.Add(new ContactTag\n                    {\n                        Id = Guid.NewGuid(),\n                        ContactId = contact.Id,\n                        TagId = tag.Id\n                    });\n                }\n            }\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/IContactProfileService.cs",
      "sha256": "949d9e0212be16febdce4d2576084c3dd21f6e7c0fa65890a475ba1e09e98421",
      "language": "csharp",
      "size": 497,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Contacts.Services\n{\n    public interface IContactProfileService\n    {\n        /// <summary>\n        /// Update contact's ProfileName if changed. Lookup by (BusinessId, E.164 phone).\n        /// No-op if contact not found or name is empty.\n        /// </summary>\n        Task UpsertProfileNameAsync(Guid businessId, string phoneE164, string? profileName, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/IPermissionService.cs.cs",
      "sha256": "336362e66dcb2a7882cb5cd48537a7105d5c7460adea2dfe2f6e563f57d6bb1a",
      "language": "csharp",
      "size": 338,
      "content": "using xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public interface IPermissionService\n    {\n       // Task<IEnumerable<object>> GetGroupedPermissionsAsync();\n        Task<IEnumerable<GroupedPermissionDto>> GetGroupedPermissionsAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/NoteService.cs",
      "sha256": "b2087e02e5275e90dced5ed8e2b0c1cffcbca20c8c11ad2c68fe22cad1adb2fc",
      "language": "csharp",
      "size": 4411,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Mappers;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Services;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class NoteService : INoteService\n    {\n        private readonly AppDbContext _db;\n        private readonly ITimelineService _timelineService; // ‚úÖ Injected Timeline Service\n\n        // ‚úÖ Constructor: Inject AppDbContext + TimelineService\n        public NoteService(AppDbContext db, ITimelineService timelineService)\n        {\n            _db = db;\n            _timelineService = timelineService;\n        }\n\n        // üìù Add a new Note + Log into LeadTimeline\n        public async Task<NoteDto> AddNoteAsync(Guid businessId, NoteDto dto)\n        {\n            // 1Ô∏è‚É£ Map incoming DTO to Note entity\n            var note = NoteMapper.MapToEntity(dto, businessId);\n\n            // 2Ô∏è‚É£ Save the Note into database\n            _db.Notes.Add(note);\n            await _db.SaveChangesAsync();\n\n            // 3Ô∏è‚É£ Log this Note creation into LeadTimeline (only if ContactId is present)\n            if (dto.ContactId.HasValue)\n            {\n                try\n                {\n                    await _timelineService.LogNoteAddedAsync(new CRMTimelineLogDto\n                    {\n                        ContactId = dto.ContactId.Value,       // ‚ûî Which contact the note is related to\n                        BusinessId = businessId,               // ‚ûî Which business created this\n                        EventType = \"NoteAdded\",                // ‚ûî Timeline event type\n                        Description = $\"üìù Note added: {dto.Title ?? \"(Untitled)\"}\", // ‚ûî Friendly description\n                        ReferenceId = note.Id,                  // ‚ûî Link back to Note Id\n                        CreatedBy = dto.CreatedBy,              // ‚ûî Who created it\n                        Timestamp = DateTime.UtcNow             // ‚ûî When created\n                    });\n                }\n                catch (Exception ex)\n                {\n                    // üõ° Timeline saving failure should not break note creation\n                    Console.WriteLine($\"‚ö†Ô∏è Timeline log failed for NoteId {note.Id}: {ex.Message}\");\n                }\n            }\n\n            // 4Ô∏è‚É£ Return the saved note as DTO\n            return NoteMapper.MapToDto(note);\n        }\n\n        // üìã List all Notes by Contact\n        public async Task<IEnumerable<NoteDto>> GetNotesByContactAsync(Guid businessId, Guid contactId)\n        {\n            return await _db.Notes\n                .AsNoTracking()\n                .Where(n => n.BusinessId == businessId && n.ContactId == contactId)\n                .OrderByDescending(n => n.CreatedAt)\n                .Select(n => NoteMapper.MapToDto(n))\n                .ToListAsync();\n        }\n\n        // üìã Get a single Note by Id\n        public async Task<NoteDto?> GetNoteByIdAsync(Guid businessId, Guid noteId)\n        {\n            var note = await _db.Notes\n                .AsNoTracking()\n                .FirstOrDefaultAsync(n => n.Id == noteId && n.BusinessId == businessId);\n\n            return note == null ? null : NoteMapper.MapToDto(note);\n        }\n\n        // ‚úèÔ∏è Update an existing Note\n        public async Task<bool> UpdateNoteAsync(Guid businessId, Guid noteId, NoteDto dto)\n        {\n            var note = await _db.Notes.FirstOrDefaultAsync(n => n.Id == noteId && n.BusinessId == businessId);\n            if (note == null) return false;\n\n            note.Title = dto.Title;\n            note.Content = dto.Content;\n            note.IsPinned = dto.IsPinned;\n            note.IsInternal = dto.IsInternal;\n            note.EditedAt = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc); // Always UTC timestamp\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        // üóëÔ∏è Soft delete (actually remove) a Note\n        public async Task<bool> DeleteNoteAsync(Guid businessId, Guid noteId)\n        {\n            var note = await _db.Notes.FirstOrDefaultAsync(n => n.Id == noteId && n.BusinessId == businessId);\n            if (note == null) return false;\n\n            _db.Notes.Remove(note);\n            await _db.SaveChangesAsync();\n            return true;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/PermissionService.cs",
      "sha256": "a3b02a9b61aceffef079138a9d8df67bb6973a51a233b2538f82bb1096a184cc",
      "language": "csharp",
      "size": 999,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public class PermissionService : IPermissionService\n    {\n        private readonly AppDbContext _context;\n\n        public PermissionService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<IEnumerable<GroupedPermissionDto>> GetGroupedPermissionsAsync()\n        {\n            return await _context.Permissions\n                .Where(p => p.IsActive)\n                .GroupBy(p => p.Group ?? \"Ungrouped\")\n                .Select(g => new GroupedPermissionDto\n                {\n                    Group = g.Key,\n                    Features = g.ToList()\n                })\n                .ToListAsync();\n        }\n       \n\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/CRM/Services/ReminderService.cs",
      "sha256": "3ad4d8d834b958a925554f6aadbc8360ec657324fee3f939680f3c37df7076a0",
      "language": "csharp",
      "size": 5904,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Mappers;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class ReminderService : IReminderService\n    {\n        private readonly AppDbContext _db;\n\n        public ReminderService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        //public async Task<ReminderDto> AddReminderAsync(Guid businessId, ReminderDto dto)\n        //{\n        //    var reminder = new Reminder\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = businessId,\n        //        //ContactId = dto.ContactId,\n        //        Title = dto.Title,\n        //        Description = dto.Description,\n        //        DueAt = dto.DueAt,\n        //        Status = dto.Status ?? \"Pending\",\n        //        ReminderType = dto.ReminderType,\n        //        Priority = dto.Priority,\n        //        IsRecurring = dto.IsRecurring,\n        //        RecurrencePattern = dto.RecurrencePattern,\n        //        SendWhatsappNotification = dto.SendWhatsappNotification,\n        //        LinkedCampaign = dto.LinkedCampaign,\n        //        CreatedAt = DateTime.UtcNow,\n        //        IsActive = true\n        //    };\n\n        //    _db.Reminders.Add(reminder);\n        //    await _db.SaveChangesAsync();\n\n        //    return MapToDto(reminder);\n        //}\n        public async Task<ReminderDto> AddReminderAsync(Guid businessId, ReminderDto dto)\n        {\n            try\n            {\n                var reminder = new Reminder\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = dto.ContactId ?? Guid.Empty, // add default fallback\n                    Title = dto.Title,\n                    Description = dto.Description,\n                    DueAt = DateTime.SpecifyKind(dto.DueAt, DateTimeKind.Utc),\n                    Status = dto.Status ?? \"Pending\",\n                    ReminderType = dto.ReminderType,\n                    Priority = dto.Priority,\n                    IsRecurring = dto.IsRecurring,\n                    RecurrencePattern = dto.RecurrencePattern,\n                    SendWhatsappNotification = dto.SendWhatsappNotification,\n                    LinkedCampaign = dto.LinkedCampaign,\n                    CreatedAt = DateTime.SpecifyKind(dto.DueAt, DateTimeKind.Utc),\n                    IsActive = true\n                };\n\n                _db.Reminders.Add(reminder);\n                await _db.SaveChangesAsync();\n\n                return MapToDto(reminder);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error in AddReminderAsync: \" + ex.Message);\n                throw;\n            }\n        }\n\n        public async Task<IEnumerable<ReminderDto>> GetAllRemindersAsync(Guid businessId)\n        {\n            return await _db.Reminders\n                .AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.DueAt)\n                .Select(r => ReminderMapper.MapToDto(r))\n                .ToListAsync();\n        }\n\n\n        public async Task<ReminderDto?> GetReminderByIdAsync(Guid businessId, Guid reminderId)\n        {\n            var reminder = await _db.Reminders\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.Id == reminderId && r.IsActive);\n\n            return reminder == null ? null : MapToDto(reminder);\n        }\n\n        public async Task<bool> UpdateReminderAsync(Guid businessId, Guid reminderId, ReminderDto dto)\n        {\n            var reminder = await _db.Reminders.FirstOrDefaultAsync(r => r.BusinessId == businessId && r.Id == reminderId && r.IsActive);\n            if (reminder == null) return false;\n\n            reminder.Title = dto.Title;\n            reminder.Description = dto.Description;\n            reminder.DueAt = DateTime.SpecifyKind(dto.DueAt, DateTimeKind.Utc);\n            reminder.Status = dto.Status ?? reminder.Status;\n            reminder.ReminderType = dto.ReminderType;\n            reminder.Priority = dto.Priority;\n            reminder.IsRecurring = dto.IsRecurring;\n            reminder.RecurrencePattern = dto.RecurrencePattern;\n            reminder.SendWhatsappNotification = dto.SendWhatsappNotification;\n            reminder.LinkedCampaign = dto.LinkedCampaign;\n            reminder.UpdatedAt = DateTime.UtcNow;\n\n            if (dto.Status?.ToLower() == \"done\")\n                reminder.CompletedAt = DateTime.UtcNow;\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteReminderAsync(Guid businessId, Guid reminderId)\n        {\n            var reminder = await _db.Reminders.FirstOrDefaultAsync(r => r.BusinessId == businessId && r.Id == reminderId && r.IsActive);\n            if (reminder == null) return false;\n\n            reminder.IsActive = false;\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        private ReminderDto MapToDto(Reminder r)\n        {\n            return new ReminderDto\n            {\n                Id = r.Id,\n                ContactId = r.ContactId,\n                Title = r.Title,\n                Description = r.Description,\n                DueAt = r.DueAt,\n                Status = r.Status,\n                ReminderType = r.ReminderType,\n                Priority = r.Priority,\n                IsRecurring = r.IsRecurring,\n                RecurrencePattern = r.RecurrencePattern,\n                SendWhatsappNotification = r.SendWhatsappNotification,\n                LinkedCampaign = r.LinkedCampaign,\n                CreatedAt = r.CreatedAt,\n                UpdatedAt = r.UpdatedAt,\n                CompletedAt = r.CompletedAt,\n                IsActive = r.IsActive\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/TagService.cs",
      "sha256": "e6319aeaf570d7b97052cbcabccb0de70ab4649b141cea3a48e625b620caa0c1",
      "language": "csharp",
      "size": 8676,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Services;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class TagService : ITagService\n    {\n        private readonly AppDbContext _db;\n        private readonly ITimelineService _timelineService; // ‚úÖ Injected TimelineService\n        private readonly ILogger<TagService> _logger;\n        public TagService(AppDbContext db, ITimelineService timelineService, ILogger<TagService> logger)\n        {\n            _db = db;\n            _timelineService = timelineService;\n            _logger = logger;\n        }\n\n        public async Task<TagDto> AddTagAsync(Guid businessId, TagDto dto)\n        {\n            var tag = new Tag\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = dto.Name,\n                ColorHex = dto.ColorHex,\n                Category = dto.Category,\n                Notes = dto.Notes,\n                IsSystemTag = dto.IsSystemTag,\n                IsActive = dto.IsActive,\n                CreatedAt = DateTime.UtcNow,\n                LastUsedAt = null\n            };\n\n            _db.Tags.Add(tag);\n            await _db.SaveChangesAsync();\n\n            // ‚úÖ After saving tag ‚Üí try logging into Timeline (non-blocking)\n            try\n            {\n                await _timelineService.LogTagAppliedAsync(new CRMTimelineLogDto\n                {\n                    ContactId = Guid.Empty,    // ‚û°Ô∏è No specific contact, general event\n                    BusinessId = businessId,\n                    EventType = \"TagCreated\",\n                    Description = $\"üè∑Ô∏è New tag created: {dto.Name}\",\n                    ReferenceId = tag.Id,\n                    CreatedBy = \"System\",\n                    Timestamp = DateTime.UtcNow,\n                    Category = \"CRM\"\n                });\n            }\n            catch (Exception ex)\n            {\n                // üõ° Fail-safe: Do not block tag creation if timeline fails\n                Console.WriteLine($\"‚ö†Ô∏è Timeline log failed for TagId {tag.Id}: {ex.Message}\");\n            }\n\n            return new TagDto\n            {\n                Id = tag.Id,\n                Name = tag.Name,\n                ColorHex = tag.ColorHex,\n                Category = tag.Category,\n                Notes = tag.Notes,\n                IsSystemTag = tag.IsSystemTag,\n                IsActive = tag.IsActive,\n                CreatedAt = tag.CreatedAt,\n                LastUsedAt = tag.LastUsedAt\n            };\n        }\n\n        public async Task<IEnumerable<TagDto>> GetAllTagsAsync(Guid businessId)\n        {\n            return await _db.Tags\n                .Where(t => t.BusinessId == businessId && t.IsActive)\n                .OrderByDescending(t => t.CreatedAt)\n                .Select(t => new TagDto\n                {\n                    Id = t.Id,\n                    Name = t.Name,\n                    ColorHex = t.ColorHex,\n                    Category = t.Category,\n                    Notes = t.Notes,\n                    IsSystemTag = t.IsSystemTag,\n                    IsActive = t.IsActive,\n                    CreatedAt = t.CreatedAt,\n                    LastUsedAt = t.LastUsedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<bool> UpdateTagAsync(Guid businessId, Guid tagId, TagDto dto)\n        {\n            var tag = await _db.Tags.FirstOrDefaultAsync(t => t.Id == tagId && t.BusinessId == businessId);\n            if (tag == null) return false;\n\n            tag.Name = dto.Name;\n            tag.ColorHex = dto.ColorHex;\n            tag.Category = dto.Category;\n            tag.Notes = dto.Notes;\n            tag.IsSystemTag = dto.IsSystemTag;\n            tag.IsActive = dto.IsActive;\n            tag.LastUsedAt = DateTime.UtcNow;\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteTagAsync(Guid businessId, Guid tagId)\n        {\n            var tag = await _db.Tags.FirstOrDefaultAsync(t => t.Id == tagId && t.BusinessId == businessId);\n            if (tag == null) return false;\n\n            tag.IsActive = false;\n            await _db.SaveChangesAsync();\n            return true;\n        }\n        //public async Task AssignTagAsync(Guid businessId, string phone, string tag)\n        //{\n        //    try\n        //    {\n        //        // ‚úÖ Step 1: Lookup contact\n        //        var contact = await _db.Contacts\n        //            .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == phone);\n\n        //        if (contact == null)\n        //        {\n        //            _logger.LogWarning(\"‚ö†Ô∏è Contact not found for phone: {Phone}\", phone);\n        //            return;\n        //        }\n\n        //        // ‚úÖ Step 2: Check if tag exists\n        //        var existingTag = await _db.Tags\n        //            .FirstOrDefaultAsync(t => t.BusinessId == businessId && t.Name == tag);\n\n        //        if (existingTag == null)\n        //        {\n        //            existingTag = new Tag\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                Name = tag,\n        //                CreatedAt = DateTime.UtcNow\n        //            };\n\n        //            await _db.Tags.AddAsync(existingTag);\n        //        }\n\n        //        // ‚úÖ Step 3: Associate tag with contact if not already\n        //        var alreadyTagged = await _db.ContactTags\n        //            .AnyAsync(ct => ct.ContactId == contact.Id && ct.TagId == existingTag.Id);\n\n        //        if (!alreadyTagged)\n        //        {\n        //            await _db.ContactTags.AddAsync(new ContactTag\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                ContactId = contact.Id,\n        //                TagId = existingTag.Id,\n        //                AssignedAt = DateTime.UtcNow\n        //            });\n\n        //            _logger.LogInformation(\"üè∑ Tag '{Tag}' assigned to contact {ContactId}\", tag, contact.Id);\n        //        }\n\n        //        await _db.SaveChangesAsync();\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"‚ùå Error assigning tag to contact.\");\n        //        throw;\n        //    }\n        //}\n        public async Task AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tagNames)\n        {\n            if (tagNames == null || !tagNames.Any())\n                return;\n\n            // üîç Fetch the contact and existing tag links\n            var contact = await _db.Contacts\n             .Include(c => c.ContactTags)\n             .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == phoneNumber);\n\n\n            if (contact == null) return;\n\n            var existingTagIds = contact.ContactTags.Select(t => t.TagId).ToHashSet();\n\n            // üîç Ensure tags exist or create them\n            var tags = await _db.Tags\n                .Where(t => t.BusinessId == businessId && tagNames.Contains(t.Name))\n                .ToListAsync();\n\n            var existingNames = tags.Select(t => t.Name).ToHashSet(StringComparer.OrdinalIgnoreCase);\n            var missingNames = tagNames.Where(t => !existingNames.Contains(t)).Distinct().ToList();\n\n            foreach (var name in missingNames)\n            {\n                var newTag = new Tag\n                {\n                    Id = Guid.NewGuid(),\n                    Name = name,\n                    BusinessId = businessId,\n                    CreatedAt = DateTime.UtcNow\n                };\n                _db.Tags.Add(newTag);\n                tags.Add(newTag);\n            }\n\n            await _db.SaveChangesAsync(); // Save new tags before linking\n\n            // ‚úÖ Link new tags to contact\n            foreach (var tag in tags)\n            {\n                if (!existingTagIds.Contains(tag.Id))\n                {\n                    contact.ContactTags.Add(new ContactTag\n                    {\n                        Id = Guid.NewGuid(),\n                        TagId = tag.Id,\n                        ContactId = contact.Id,\n                        BusinessId = businessId,\n                        AssignedAt = DateTime.UtcNow,\n                        AssignedBy = \"automation\" // optional: set to flow name\n                    });\n                }\n            }\n\n            await _db.SaveChangesAsync();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Data/AppDbContext.cs",
      "sha256": "fe72f2855310ba672fd8cd9bb5d2f9f6a18f9ada5b9e5f3333589f70a27e9145",
      "language": "csharp",
      "size": 62524,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Globalization;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.AccessControl.Seeder;\nusing xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.xbTimelines.Models;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat.api.Features.CTAManagement.Models;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.Webhooks.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Inbox.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Features.Automation.Models;\nusing xbytechat.api.Features.CampaignTracking.Worker;\nusing xbytechat.api.Features.WhatsAppSettings.Models;\nusing Microsoft.AspNetCore.Http.HttpResults;\nusing xbytechat_api.Features.Billing.Models;\nusing xbytechat.api.Features.CustomeApi.Models;\n\nnamespace xbytechat.api\n{\n    public class AppDbContext : DbContext\n    {\n        public AppDbContext(DbContextOptions<AppDbContext> options)\n            : base(options) { }\n\n        // ‚úÖ Table Registrations\n        public DbSet<Business> Businesses { get; set; }\n        public DbSet<User> Users { get; set; }\n        public DbSet<MessageLog> MessageLogs { get; set; }\n        public DbSet<Product> Products { get; set; }\n        public DbSet<CatalogClickLog> CatalogClickLogs { get; set; }\n        public DbSet<Contact> Contacts { get; set; }\n        public DbSet<Tag> Tags { get; set; }\n        public DbSet<Reminder> Reminders { get; set; }\n        public DbSet<Note> Notes { get; set; }\n        public DbSet<LeadTimeline> LeadTimelines { get; set; }\n        public DbSet<ContactTag> ContactTags { get; set; }\n        public DbSet<Campaign> Campaigns { get; set; }\n        public DbSet<CampaignRecipient> CampaignRecipients { get; set; }\n        public DbSet<CampaignSendLog> CampaignSendLogs { get; set; }\n        public DbSet<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        // üß© Access Control\n        public DbSet<Role> Roles { get; set; }\n        public DbSet<Permission> Permissions { get; set; }\n        public DbSet<RolePermission> RolePermissions { get; set; }\n        public DbSet<UserPermission> UserPermissions { get; set; }\n        public DbSet<AuditLog> AuditLogs { get; set; }\n        public DbSet<WhatsAppSettingEntity> WhatsAppSettings { get; set; }\n        public DbSet<BusinessPlanInfo> BusinessPlanInfos { get; set; }\n\n        public DbSet<TrackingLog> TrackingLogs { get; set; }\n        public DbSet<CTADefinition> CTADefinitions { get; set; }\n        public DbSet<CampaignButton> CampaignButtons { get; set; }\n        public DbSet<FailedWebhookLog> FailedWebhookLogs { get; set; }\n        public DbSet<WebhookSettings> WebhookSettings { get; set; }\n\n        public DbSet<CTAFlowConfig> CTAFlowConfigs { get; set; }\n        public DbSet<CTAFlowStep> CTAFlowSteps { get; set; }\n        public DbSet<FlowButtonLink> FlowButtonLinks { get; set; }\n\n        public DbSet<CampaignFlowOverride> CampaignFlowOverrides { get; set; }\n        public DbSet<FlowExecutionLog> FlowExecutionLogs { get; set; }\n        public DbSet<ContactRead> ContactReads { get; set; }\n\n        public DbSet<AutoReplyRule> AutoReplyRules { get; set; }\n        public DbSet<AutoReplyFlow> AutoReplyFlows { get; set; }\n        public DbSet<AutoReplyFlowNode> AutoReplyFlowNodes { get; set; }\n        public DbSet<AutoReplyFlowEdge> AutoReplyFlowEdges { get; set; }\n        public DbSet<AutoReplyLog> AutoReplyLogs { get; set; }\n        public DbSet<ChatSessionState> ChatSessionStates { get; set; }\n        public DbSet<Plan> Plans { get; set; }\n        public DbSet<PlanPermission> PlanPermissions { get; set; }\n        public DbSet<FeatureAccess> FeatureAccess { get; set; }\n        public DbSet<PlanFeatureMatrix> PlanFeatureMatrix { get; set; }\n        public DbSet<UserFeatureAccess> UserFeatureAccess { get; set; }\n        public DbSet<FeatureMaster> FeatureMasters { get; set; }\n        public DbSet<AutomationFlow> AutomationFlows { get; set; }\n        public DbSet<WhatsAppTemplate> WhatsAppTemplates { get; set; }\n\n        public DbSet<CampaignClickLog> CampaignClickLogs => Set<CampaignClickLog>();\n        public DbSet<CampaignClickDailyAgg> CampaignClickDailyAgg => Set<CampaignClickDailyAgg>();\n\n        public DbSet<QuickReply> QuickReplies { get; set; } = null!;\n        public DbSet<WhatsAppPhoneNumber> WhatsAppPhoneNumbers { get; set; }\n\n        public DbSet<Audience> Audiences { get; set; }\n        public DbSet<AudienceMember> AudiencesMembers { get; set; }\n        public DbSet<CsvBatch> CsvBatches { get; set; }\n        public DbSet<CsvRow> CsvRows { get; set; }\n        public DbSet<CampaignVariableMap> CampaignVariableMaps { get; set; }\n\n        public DbSet<ProviderBillingEvent> ProviderBillingEvents { get; set; } = default!;\n        public DbSet<OutboundCampaignJob> OutboundCampaignJobs { get; set; }\n        public DbSet<ApiKey> ApiKeys { get; set; } = null!;\n\n    //    public DbSet<CustomerWebhookConfig> CustomerWebhookConfigs\n    //=> Set<CustomerWebhookConfig>();\n        public DbSet<xbytechat.api.Features.CustomeApi.Models.CustomerWebhookConfig> CustomerWebhookConfigs { get; set; }\n        public DbSet<ContactJourneyState> ContactJourneyStates { get; set; }\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n\n            // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DETERMINISTIC SEED TIMESTAMPS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n            var seedCreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n            var planCreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n            var created = new DateTime(2025, 9, 13, 0, 0, 0, DateTimeKind.Utc);\n\n            // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SEEDS (unchanged GUIDs) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n            var superadminRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000001\");\n            var partnerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000002\");\n            var resellerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000003\");\n            var businessRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000004\");\n            var agentRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000005\");\n\n            modelBuilder.Entity<Role>().HasData(\n                new Role { Id = superadminRoleId, Name = \"admin\", Description = \"Super Admin\", CreatedAt = seedCreatedAt },\n                new Role { Id = partnerRoleId, Name = \"partner\", Description = \"Business Partner\", CreatedAt = seedCreatedAt },\n                new Role { Id = resellerRoleId, Name = \"reseller\", Description = \"Reseller Partner\", CreatedAt = seedCreatedAt },\n                new Role { Id = businessRoleId, Name = \"business\", Description = \"Business Owner\", CreatedAt = seedCreatedAt },\n                new Role { Id = agentRoleId, Name = \"staff\", Description = \"Staff\", CreatedAt = seedCreatedAt }\n            );\n\n            var superAdminUserId = Guid.Parse(\"62858aa2-3a54-4fd5-8696-c343d9af7634\");\n            modelBuilder.Entity<User>().HasData(new User\n            {\n                Id = superAdminUserId,\n                Name = \"Super Admin\",\n                Email = \"admin@xbytechat.com\",\n                RoleId = superadminRoleId,\n                Status = \"active\",\n                CreatedAt = seedCreatedAt,\n                DeletedAt = null,\n                IsDeleted = false,\n                BusinessId = null,\n                PasswordHash = \"JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk=\",\n                RefreshToken = null,\n                RefreshTokenExpiry = null\n            });\n\n            var basicPlanId = Guid.Parse(\"5f9f5de1-a0b2-48ba-b03d-77b27345613f\");\n            modelBuilder.Entity<Plan>().HasData(new Plan\n            {\n                Id = basicPlanId,\n                Code = \"basic\",\n                Name = \"Basic\",\n                Description = \"Default free plan\",\n                IsActive = true,\n                CreatedAt = planCreatedAt\n            });\n\n            modelBuilder.Entity<Permission>().HasData(\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000000\"), Code = \"dashboard.view\", Name = \"dashboard.view\", Group = \"Dashboard\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000001\"), Code = \"campaign.view\", Name = \"campaign.view\", Group = \"Campaign\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000002\"), Code = \"campaign.create\", Name = \"campaign.create\", Group = \"Campaign\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000003\"), Code = \"campaign.delete\", Name = \"campaign.delete\", Group = \"Campaign\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000004\"), Code = \"product.view\", Name = \"product.view\", Group = \"Catalog\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000005\"), Code = \"product.create\", Name = \"product.create\", Group = \"Catalog\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000006\"), Code = \"product.delete\", Name = \"product.delete\", Group = \"Catalog\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000007\"), Code = \"contacts.view\", Name = \"contacts.view\", Group = \"CRM\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000008\"), Code = \"tags.edit\", Name = \"tags.edit\", Group = null, IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000009\"), Code = \"admin.business.approve\", Name = \"admin.business.approve\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000010\"), Code = \"admin.logs.view\", Name = \"admin.logs.view\", Group = null, IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000011\"), Code = \"admin.plans.view\", Name = \"admin.plans.view\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000012\"), Code = \"admin.plans.create\", Name = \"admin.plans.create\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000013\"), Code = \"admin.plans.update\", Name = \"admin.plans.update\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000014\"), Code = \"admin.plans.delete\", Name = \"admin.plans.delete\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"74c8034f-d9cb-4a17-8578-a9f765bd845c\"), Code = \"messaging.report.view\", Name = \"messaging.report.view\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"c819f1bd-422d-4609-916c-cc185fe44ab0\"), Code = \"messaging.status.view\", Name = \"messaging.status.view\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"eecd0fac-223c-4dba-9fa1-2a6e973d61d1\"), Code = \"messaging.inbox.view\", Name = \"messaging.inbox.view\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"974af1f9-3caa-4857-a1a7-48462c389332\"), Code = \"messaging.send.text\", Name = \"messaging.send.text\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"0485154c-dde5-4732-a7aa-a379c77a5b27\"), Code = \"messaging.send.template\", Name = \"messaging.send.template\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"29461562-ef9c-48c0-a606-482ff57b8f95\"), Code = \"messaging.send\", Name = \"messaging.send\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"bbc5202a-eac9-40bb-aa78-176c677dbf5b\"), Code = \"messaging.whatsappsettings.view\", Name = \"messaging.whatsappsettings.view\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"205b87c7-b008-4e51-9fea-798c2dc4f9c2\"), Code = \"admin.whatsappsettings.view\", Name = \"admin.whatsappsettings.view\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"6e4d3a86-7cf9-4ac2-b8a7-ed10c9f0173d\"), Code = \"settings.whatsapp.view\", Name = \"Settings - WhatsApp View\", Group = \"Settings\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"ad36cdb7-5221-448b-a6a6-c35c9f88d021\"), Code = \"inbox.view\", Name = \"inbox.view\", Group = \"Inbox\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"74828fc0-e358-4cfc-b924-13719a0d9f50\"), Code = \"inbox.menu\", Name = \"inbox.menu\", Group = \"Inbox\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"98572fe7-d142-475a-b990-f248641809e2\"), Code = \"settings.profile.view\", Name = \"settings.profile.view\", Group = \"Settings\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"821480c6-1464-415e-bba8-066fcb4e7e63\"), Code = \"automation.menu\", Name = \"automation.menu\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"918a61d0-5ab6-46af-a3d3-41e37b7710f9\"), Code = \"automation.Create.Template.Flow\", Name = \"automation.Create.Template.Flow\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"9ae90cfe-3fea-4307-b024-3083c2728148\"), Code = \"automation.View.Template.Flow\", Name = \"automation.View.Template.Flow\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"93c5d5a7-f8dd-460a-8c7b-e3788440ba3a\"), Code = \"automation.Create.TemplatePlusFreetext.Flow\", Name = \"automation.Create.TemplatePlusFreetext.Flow\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"7d7cbceb-4ce7-4835-85cd-59562487298d\"), Code = \"automation.View.TemplatePlusFreetext.Flow\", Name = \"automation.View.TemplatePlusFreetext.Flow\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"636b17f2-1c54-4e26-a8cd-dbf561dcb522\"), Code = \"automation.View.Template.Flow_analytics\", Name = \"automation.View.Template.Flow_analytics\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"adfa8490-9705-4a36-a86e-d5bff7ddc220\"), Code = \"automation.View.TemplatePlusFreeText.Flow_analytics\", Name = \"automation.View.TemplatePlusFreeText.Flow_analytics\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"0dedac5b-81c8-44c3-8cfe-76c58e29c6db\"), Code = \"automation_trigger_test\", Name = \"automation_trigger_test\", Group = \"Automation\", IsActive = true, CreatedAt = created }\n                //new Permission { Id = Guid.Parse(\"0d7dac5b-81c8-44c3-8cfe-76c66669c6db\"), Code = \"campaign.send.template.simple\", Name = \"Simple Temlate Send : extra\", Group = \"Campaign\", IsActive = true, CreatedAt = created }\n                //\"campaign-tracking-logs\": [FK.CAMPAIGN_TRACKING_LOGS_VIEW], -- NEDD TO ADD\n                );\n\n            // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Relationships (clean and deduped) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n            // Access-control\n            modelBuilder.Entity<RolePermission>()\n                .HasOne(rp => rp.Role).WithMany(r => r.RolePermissions)\n                .HasForeignKey(rp => rp.RoleId).OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<RolePermission>()\n                .HasOne(rp => rp.Permission).WithMany(p => p.RolePermissions)\n                .HasForeignKey(rp => rp.PermissionId).OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<UserPermission>()\n                .HasOne(up => up.User).WithMany(u => u.UserPermissions)\n                .HasForeignKey(up => up.UserId).OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<UserPermission>()\n                .HasOne(up => up.Permission).WithMany(p => p.UserPermissions)\n                .HasForeignKey(up => up.PermissionId).OnDelete(DeleteBehavior.Cascade);\n\n            // Campaign core\n            modelBuilder.Entity<Campaign>()\n                .HasOne(c => c.Business).WithMany(b => b.Campaigns)\n                .HasForeignKey(c => c.BusinessId).IsRequired();\n\n            modelBuilder.Entity<Campaign>()\n                .HasMany(c => c.MultiButtons).WithOne(b => b.Campaign)\n                .HasForeignKey(b => b.CampaignId).OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<Campaign>(e =>\n            {\n                e.Property(x => x.TemplateSchemaSnapshot).HasColumnType(\"jsonb\");\n                e.HasMany(c => c.Audiences).WithOne(a => a.Campaign)\n                 .HasForeignKey(a => a.CampaignId).OnDelete(DeleteBehavior.SetNull);\n                e.HasMany(c => c.SendLogs).WithOne(s => s.Campaign)\n                 .HasForeignKey(s => s.CampaignId).OnDelete(DeleteBehavior.Cascade);\n                e.HasMany(c => c.MessageLogs).WithOne(m => m.SourceCampaign)\n                 .HasForeignKey(m => m.CampaignId).OnDelete(DeleteBehavior.Restrict);\n            });\n\n            // Audience / CSV\n            modelBuilder.Entity<CsvBatch>(e =>\n            {\n                e.ToTable(\"CsvBatches\");\n                e.HasKey(x => x.Id);\n                e.Property(x => x.HeadersJson).HasColumnType(\"jsonb\");\n                e.HasIndex(x => x.Checksum).HasDatabaseName(\"ix_csvbatch_checksum\");\n                e.HasIndex(x => new { x.BusinessId, x.CreatedAt }).HasDatabaseName(\"ix_csvbatch_biz_created\");\n                e.HasIndex(x => new { x.BusinessId, x.AudienceId });\n                e.HasOne<Audience>().WithMany()\n                 .HasForeignKey(x => x.AudienceId).OnDelete(DeleteBehavior.SetNull);\n            });\n\n            modelBuilder.Entity<CsvRow>(e =>\n            {\n                e.ToTable(\"CsvRows\");\n                e.HasKey(x => x.Id);\n                e.Property(x => x.RowJson).HasColumnType(\"jsonb\");\n                e.HasIndex(x => new { x.BatchId, x.RowIndex }).IsUnique().HasDatabaseName(\"ux_csvrow_batch_rowidx\");\n                e.HasIndex(x => x.PhoneE164).HasDatabaseName(\"ix_csvrow_phone\");\n                e.HasIndex(x => new { x.BusinessId, x.BatchId });\n                e.HasOne(x => x.Batch).WithMany().HasForeignKey(x => x.BatchId).OnDelete(DeleteBehavior.Cascade);\n            });\n\n            modelBuilder.Entity<Audience>(e =>\n            {\n                e.ToTable(\"Audiences\");\n                e.HasKey(x => x.Id);\n                e.HasIndex(x => new { x.BusinessId, x.IsDeleted }).HasDatabaseName(\"ix_audiences_biz_deleted\");\n                e.HasIndex(x => new { x.BusinessId, x.CampaignId });\n                e.HasIndex(x => new { x.BusinessId, x.CsvBatchId });\n                e.HasOne(x => x.CsvBatch).WithMany().HasForeignKey(x => x.CsvBatchId).OnDelete(DeleteBehavior.SetNull);\n            });\n\n            modelBuilder.Entity<AudienceMember>(e =>\n            {\n                e.ToTable(\"AudienceMembers\");\n                e.HasKey(x => x.Id);\n                e.Property(x => x.AttributesJson).HasColumnType(\"jsonb\");\n                e.HasIndex(x => new { x.AudienceId, x.PhoneE164 }).IsUnique().HasDatabaseName(\"ux_audmember_audience_phone\");\n                e.HasIndex(x => x.ContactId).HasDatabaseName(\"ix_audmember_contact\");\n                e.HasOne(x => x.Audience).WithMany(a => a.Members)\n                 .HasForeignKey(x => x.AudienceId).OnDelete(DeleteBehavior.Cascade);\n            });\n\n            // Recipients ‚Äî OPTIONAL AudienceMember, OPTIONAL Contact\n            modelBuilder.Entity<CampaignRecipient>(e =>\n            {\n                e.ToTable(\"CampaignRecipients\");\n                e.HasKey(x => x.Id);\n\n                e.Property(x => x.ResolvedParametersJson).HasColumnType(\"jsonb\");\n                e.Property(x => x.ResolvedButtonUrlsJson).HasColumnType(\"jsonb\");\n                e.HasIndex(x => x.IdempotencyKey).HasDatabaseName(\"ix_campaignrecipients_idempotency\");\n                e.HasIndex(x => new { x.CampaignId, x.ContactId }).HasDatabaseName(\"ix_recipients_campaign_contact\");\n\n                e.HasOne(r => r.AudienceMember)\n                 .WithMany()\n                 .HasForeignKey(r => r.AudienceMemberId)\n                 .IsRequired(false)\n                 .OnDelete(DeleteBehavior.SetNull);\n\n                e.HasOne(r => r.Contact)\n                 .WithMany()\n                 .HasForeignKey(r => r.ContactId)\n                 .IsRequired(false)\n                 .OnDelete(DeleteBehavior.SetNull);\n\n                e.HasOne(r => r.Campaign)\n                 .WithMany(c => c.Recipients)\n                 .HasForeignKey(r => r.CampaignId)\n                 .OnDelete(DeleteBehavior.Cascade);\n\n                e.HasOne(r => r.Business)\n                 .WithMany()\n                 .HasForeignKey(r => r.BusinessId)\n                 .OnDelete(DeleteBehavior.Restrict);\n            });\n\n            // Send logs ‚Äî OPTIONAL Contact, REQUIRED Campaign\n            modelBuilder.Entity<CampaignSendLog>(e =>\n            {\n                e.ToTable(\"CampaignSendLogs\");\n                e.HasKey(x => x.Id);\n\n                e.Property(x => x.BusinessId).IsRequired();\n                e.HasIndex(x => x.MessageId);\n                e.HasIndex(x => x.RunId);\n                e.HasIndex(x => new { x.BusinessId, x.MessageId }).HasDatabaseName(\"IX_CampaignSendLogs_Business_MessageId\");\n\n                e.HasOne(s => s.Recipient).WithMany(r => r.SendLogs)\n                 .HasForeignKey(s => s.RecipientId);\n\n                // ‚úÖ allow null ContactId (fixes 23502 once column is nullable)\n                e.HasOne(s => s.Contact).WithMany()\n                 .HasForeignKey(s => s.ContactId)\n                 .IsRequired(false)\n                 .OnDelete(DeleteBehavior.SetNull);\n\n                e.HasOne(s => s.Campaign).WithMany(c => c.SendLogs)\n                 .HasForeignKey(s => s.CampaignId)\n                 .IsRequired()\n                 .OnDelete(DeleteBehavior.Cascade);\n\n                e.HasOne(s => s.MessageLog).WithMany()\n                 .HasForeignKey(s => s.MessageLogId)\n                 .OnDelete(DeleteBehavior.Restrict);\n            });\n\n            // Message logs ‚Äî helpful indexes + computed column\n            modelBuilder.Entity<MessageLog>(b =>\n            {\n                b.HasIndex(x => x.MessageId);\n                b.HasIndex(x => x.RunId);\n                b.HasIndex(x => new { x.BusinessId, x.MessageId }).HasDatabaseName(\"IX_MessageLogs_Business_MessageId\");\n                b.HasIndex(x => new { x.BusinessId, x.RecipientNumber }).HasDatabaseName(\"IX_MessageLogs_Business_Recipient\");\n                b.Property<DateTime?>(\"MessageTime\").HasComputedColumnSql(\"COALESCE(\\\"SentAt\\\", \\\"CreatedAt\\\")\", stored: true);\n                b.HasIndex(\"BusinessId\", \"IsIncoming\", \"ContactId\", \"MessageTime\").HasDatabaseName(\"ix_msglogs_biz_in_contact_msgtime\");\n            });\n\n            // QuickReplies\n            modelBuilder.Entity<QuickReply>(e =>\n            {\n                e.HasIndex(x => new { x.BusinessId, x.Scope, x.IsActive });\n                e.HasIndex(x => new { x.BusinessId, x.OwnerUserId, x.IsActive });\n                e.HasIndex(x => x.UpdatedAt);\n                e.Property(x => x.Title).HasMaxLength(120).IsRequired();\n                e.Property(x => x.Language).HasMaxLength(8);\n                e.Property(q => q.UpdatedAt).HasDefaultValueSql(\"NOW()\");\n            });\n\n            // Contacts ‚Äî uniqueness\n            modelBuilder.Entity<Contact>()\n                .HasIndex(c => new { c.BusinessId, c.PhoneNumber }).IsUnique();\n\n            modelBuilder.Entity<ContactRead>()\n                .HasIndex(cr => new { cr.ContactId, cr.UserId }).IsUnique();\n\n            modelBuilder.Entity<ContactRead>()\n                .HasIndex(cr => new { cr.BusinessId, cr.UserId, cr.ContactId })\n                .IsUnique().HasDatabaseName(\"ux_contactreads_biz_user_contact\");\n\n            // WhatsApp settings (principal with composite AK)\n            modelBuilder.Entity<WhatsAppSettingEntity>(b =>\n            {\n                b.ToTable(\"WhatsAppSettings\");\n                b.HasAlternateKey(s => new { s.BusinessId, s.Provider })\n                 .HasName(\"AK_WhatsAppSettings_BusinessId_Provider\");\n\n                // Remove redundant unique index on the same columns; keep other helpful indexes\n                b.HasIndex(x => new { x.Provider, x.PhoneNumberId }).HasDatabaseName(\"IX_WhatsAppSettings_Provider_PhoneNumberId\");\n                b.HasIndex(x => new { x.Provider, x.WhatsAppBusinessNumber }).HasDatabaseName(\"IX_WhatsAppSettings_Provider_BusinessNumber\");\n                b.HasIndex(x => new { x.Provider, x.WabaId }).HasDatabaseName(\"IX_WhatsAppSettings_Provider_WabaId\");\n                b.HasIndex(x => new { x.BusinessId, x.Provider, x.IsActive }).HasDatabaseName(\"IX_WhatsAppSettings_Business_Provider_IsActive\");\n                b.HasIndex(x => new { x.Provider, x.WebhookCallbackUrl }).HasDatabaseName(\"IX_WhatsAppSettings_Provider_CallbackUrl\");\n            });\n\n            modelBuilder.Entity<Business>()\n                .HasMany(b => b.WhatsAppSettings).WithOne()\n                .HasForeignKey(s => s.BusinessId).OnDelete(DeleteBehavior.Cascade);\n\n            // WhatsApp phone numbers ‚Üí principal (BusinessId, Provider)\n            modelBuilder.Entity<WhatsAppPhoneNumber>(e =>\n            {\n                e.ToTable(\"WhatsAppPhoneNumbers\");\n                e.HasKey(x => x.Id);\n                e.Property(x => x.Provider).IsRequired();\n                e.Property(x => x.PhoneNumberId).IsRequired();\n\n                e.HasOne<WhatsAppSettingEntity>()\n                 .WithMany(s => s.WhatsAppBusinessNumbers)\n                 .HasForeignKey(x => new { x.BusinessId, x.Provider })\n                 .HasPrincipalKey(s => new { s.BusinessId, s.Provider })\n                 .OnDelete(DeleteBehavior.Cascade);\n\n                e.HasIndex(x => new { x.BusinessId, x.Provider, x.PhoneNumberId })\n                 .IsUnique().HasDatabaseName(\"UX_WhatsappPhoneNumbers_Bus_Prov_PhoneId\");\n            });\n\n            // CTA / Tracking misc\n            modelBuilder.Entity<CampaignClickLog>(e =>\n            {\n                e.HasIndex(x => new { x.CampaignId, x.ClickType, x.ClickedAt });\n                e.HasIndex(x => new { x.CampaignId, x.ButtonIndex });\n                e.HasIndex(x => new { x.CampaignId, x.ContactId });\n            });\n\n            modelBuilder.Entity<CampaignClickDailyAgg>(e =>\n            {\n                e.HasIndex(x => new { x.CampaignId, x.Day, x.ButtonIndex }).IsUnique();\n                e.Property(x => x.Day).HasColumnType(\"date\");\n            });\n\n            // Flow graph bits\n            modelBuilder.Entity<FlowButtonLink>().HasKey(b => b.Id);\n            modelBuilder.Entity<AutoReplyFlowNode>().OwnsOne(n => n.Position);\n\n            // Features/Plans\n            modelBuilder.Entity<FeatureAccess>()\n                .HasIndex(f => new { f.BusinessId, f.FeatureName }).IsUnique();\n\n            // Outbound worker\n            modelBuilder.Entity<OutboundCampaignJob>(e =>\n            {\n                e.ToTable(\"OutboundCampaignJobs\");\n                e.HasIndex(x => new { x.Status, x.NextAttemptAt });\n                e.HasIndex(x => x.CampaignId);\n                e.Property(x => x.Status).HasMaxLength(32);\n                e.Property(x => x.LastError).HasMaxLength(4000);\n            });\n\n            modelBuilder.Entity<Contact>(entity =>\n            {\n                // Composite index for fast lookups during sends/clicks\n                entity.HasIndex(e => new { e.BusinessId, e.PhoneNumber })\n                      .HasDatabaseName(\"IX_Contacts_BusinessId_PhoneNumber\");\n                // .IsUnique(false); // optional (default is non-unique)\n            });\n            modelBuilder.Entity<Campaign>()\n         .HasOne(c => c.CTAFlowConfig)      // ‚úÖ use the nav that exists on Campaign\n         .WithMany()\n         .HasForeignKey(c => c.CTAFlowConfigId)\n         .OnDelete(DeleteBehavior.Restrict);\n\n\n            modelBuilder.Entity<CTAFlowConfig>(e =>\n            {\n                e.HasMany(f => f.Steps)\n                 .WithOne(s => s.Flow)\n                 .HasForeignKey(s => s.CTAFlowConfigId)   // üëà use the existing FK name here\n                 .OnDelete(DeleteBehavior.Cascade);\n\n                e.HasIndex(f => new { f.BusinessId, f.IsActive, f.FlowName })\n                 .HasDatabaseName(\"ix_ctaflowconfigs_biz_active_name\");\n            });\n\n            modelBuilder.Entity<CTAFlowStep>(e =>\n            {\n                e.HasMany(s => s.ButtonLinks)\n                 .WithOne(b => b.Step)                 // only if FlowButtonLink has a 'Step' nav\n                 .HasForeignKey(b => b.CTAFlowStepId)  // ‚úÖ use existing FK name\n                 .OnDelete(DeleteBehavior.Cascade);\n            });\n\n            modelBuilder.Entity<CTAFlowConfig>()\n              .HasIndex(f => new { f.BusinessId, f.FlowName, f.IsActive })\n              .IsUnique();\n\n            // ----- ProviderBillingEvents (core for billing dedupe + reads) -----\n            modelBuilder.Entity<ProviderBillingEvent>(e =>\n            {\n                // Hard dedupe (webhook replays, same message/event). Filter keeps NULLs out of the unique constraint.\n                e.HasIndex(x => new { x.BusinessId, x.Provider, x.ProviderMessageId, x.EventType })\n                 .HasDatabaseName(\"UX_ProviderBillingEvents_UniqueEvent\")\n                 .IsUnique()\n                 .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n\n                // Time-range scans by event type (used by snapshot)\n                e.HasIndex(x => new { x.BusinessId, x.EventType, x.OccurredAt })\n                 .HasDatabaseName(\"IX_Billing_BizEventTime\");\n\n                // Group/lookup by conversation window\n                e.HasIndex(x => new { x.BusinessId, x.ConversationId })\n                 .HasDatabaseName(\"IX_Billing_BizConversation\")\n                 .HasFilter(\"\\\"ConversationId\\\" IS NOT NULL\");\n\n                // Direct lookups by provider message id\n                e.HasIndex(x => new { x.BusinessId, x.ProviderMessageId })\n                 .HasDatabaseName(\"IX_Billing_BizProviderMessage\")\n                 .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n            });\n\n            // ----- MessageLogs (snapshot volume + joins from billing) -----\n            modelBuilder.Entity<MessageLog>(e =>\n            {\n                // Period queries\n                e.HasIndex(x => new { x.BusinessId, x.CreatedAt })\n                 .HasDatabaseName(\"IX_MessageLogs_BizCreatedAt\");\n\n                // Join from billing by provider message id\n                e.HasIndex(x => new { x.BusinessId, x.ProviderMessageId })\n                 .HasDatabaseName(\"IX_MessageLogs_BizProviderMessage\")\n                 .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n\n                // Conversation aggregation / backfills\n                e.HasIndex(x => new { x.BusinessId, x.ConversationId })\n                 .HasDatabaseName(\"IX_MessageLogs_BizConversation\")\n                 .HasFilter(\"\\\"ConversationId\\\" IS NOT NULL\");\n            });\n\n            // ----- CampaignSendLogs (status updater lookups) -----\n            modelBuilder.Entity<CampaignSendLog>(e =>\n            {\n                e.HasIndex(x => new { x.BusinessId, x.SendStatus, x.SentAt })\n                 .HasDatabaseName(\"IX_CampaignSendLogs_StatusTime\");\n            });\n\n            // ----- Optional: provider config lookups used during send/status -----\n            // If your models differ, just delete this block or update the type/namespace.\n            modelBuilder.Entity<WhatsAppSettingEntity>(e =>\n            {\n                // Matches queries like: WHERE BusinessId = ? AND Provider = ? AND IsActive\n                e.HasIndex(x => new { x.BusinessId, x.Provider, x.IsActive })\n                 .HasDatabaseName(\"IX_WhatsAppSettings_BizProviderActive\");\n            });\n\n            modelBuilder.Entity<WhatsAppPhoneNumber>(e =>\n            {\n                e.HasIndex(x => new { x.BusinessId, x.Provider, x.PhoneNumberId })\n                 .HasDatabaseName(\"IX_WhatsAppPhoneNumbers_BizProviderPhone\");\n            });\n            modelBuilder.Entity<xbytechat.api.Features.CustomeApi.Models.ApiKey>(e =>\n            {\n                e.HasKey(x => x.Id);\n                e.HasIndex(x => x.Prefix).IsUnique();\n                e.Property(x => x.SecretHash).IsRequired();\n                e.Property(x => x.Scopes).HasMaxLength(512);\n            });\n            // NOTE: removed duplicate mapping of CampaignRecipient.AudienceMember at the bottom.\n\n\n            //modelBuilder.Entity<CustomerWebhookConfig>()\n            //    .HasIndex(x => new { x.BusinessId, x.IsActive });\n        }\n\n    }\n}\n//protected override void OnModelCreating(ModelBuilder modelBuilder)\n//{\n//    base.OnModelCreating(modelBuilder);\n\n//    // ‚úÖ Seed Role IDs (keep them consistent)\n//    var superadminRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000001\");\n//    var partnerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000002\");\n//    var resellerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000003\");\n//    var businessRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000004\");\n//    var agentRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000005\");\n\n//    // ‚úÖ Roles\n//    modelBuilder.Entity<Role>().HasData(\n//        new Role { Id = superadminRoleId, Name = \"admin\", Description = \"Super Admin\", CreatedAt = DateTime.UtcNow },\n//        new Role { Id = partnerRoleId, Name = \"partner\", Description = \"Business Partner\", CreatedAt = DateTime.UtcNow },\n//        new Role { Id = resellerRoleId, Name = \"reseller\", Description = \"Reseller Partner\", CreatedAt = DateTime.UtcNow },\n//        new Role { Id = businessRoleId, Name = \"business\", Description = \"Business Owner\", CreatedAt = DateTime.UtcNow },\n//        new Role { Id = agentRoleId, Name = \"staff\", Description = \"Staff\", CreatedAt = DateTime.UtcNow }\n//    );\n\n//    // ‚úÖ Permissions from RolePermissionMapping\n\n\n//    //// ‚úÖ RolePermission mappings\n\n\n//    // ‚úÖ Seed Super Admin user (Id + RoleId are fixed)\n//    var superAdminUserId = Guid.Parse(\"62858aa2-3a54-4fd5-8696-c343d9af7634\");\n//    modelBuilder.Entity<User>().HasData(new User\n//    {\n//        Id = superAdminUserId,\n//        Name = \"Super Admin\",\n//        Email = \"admin@xbytechat.com\",\n//        RoleId = superadminRoleId,     // uses the constant defined above\n//        Status = \"active\",\n//        CreatedAt = DateTime.UtcNow,   // will be snapshotted into the migration\n//        DeletedAt = null,\n//        IsDeleted = false,\n//        BusinessId = null,\n//        PasswordHash = \"JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk=\",\n//        RefreshToken = null,\n//        RefreshTokenExpiry = null\n//    });\n\n\n//    // ===== Plans seed (idempotent) =====\n//    var basicPlanId = Guid.Parse(\"5f9f5de1-a0b2-48ba-b03d-77b27345613f\");\n//    var planCreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n//    modelBuilder.Entity<Plan>().HasData(new Plan\n//    {\n//        Id = basicPlanId,\n//        Code = \"basic\",\n//        Name = \"Basic\",\n//        Description = \"Default free plan\",\n//        // MonthlyQuota = 1000,\n//        IsActive = true,\n//        CreatedAt = planCreatedAt\n//    });\n//    // ===== Permissions seed\n\n//    var created = new DateTime(2025, 9, 13, 0, 0, 0, DateTimeKind.Utc);\n\n//    modelBuilder.Entity<Permission>().HasData(\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000000\"), Code = \"dashboard.view\", Name = \"dashboard.view\", Group = \"Dashboard\", Description = \"Permission for dashboard.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000001\"), Code = \"campaign.view\", Name = \"campaign.view\", Group = \"Campaign\", Description = \"Permission for campaign.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000002\"), Code = \"campaign.create\", Name = \"campaign.create\", Group = \"Campaign\", Description = \"Permission for campaign.create\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000003\"), Code = \"campaign.delete\", Name = \"campaign.delete\", Group = \"Campaign\", Description = \"Permission for campaign.delete\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000004\"), Code = \"product.view\", Name = \"product.view\", Group = \"Catalog\", Description = \"Permission for product.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000005\"), Code = \"product.create\", Name = \"product.create\", Group = \"Catalog\", Description = \"Permission for product.create\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000006\"), Code = \"product.delete\", Name = \"product.delete\", Group = \"Catalog\", Description = \"Permission for product.delete\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000007\"), Code = \"contacts.view\", Name = \"contacts.view\", Group = \"CRM\", Description = \"Permission for contacts.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000008\"), Code = \"tags.edit\", Name = \"tags.edit\", Group = null, Description = \"Permission for tags.edit\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000009\"), Code = \"admin.business.approve\", Name = \"admin.business.approve\", Group = \"Admin\", Description = \"Permission for admin.business.approve\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000010\"), Code = \"admin.logs.view\", Name = \"admin.logs.view\", Group = null, Description = \"Permission for admin.logs.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000014\"), Code = \"admin.plans.delete\", Name = \"admin.plans.delete\", Group = \"Admin\", Description = \"Permission to delete plans\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"74c8034f-d9cb-4a17-8578-a9f765bd845c\"), Code = \"messaging.report.view\", Name = \"messaging.report.view\", Group = \"Messaging\", Description = \"Permission for messaging.report.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"c819f1bd-422d-4609-916c-cc185fe44ab0\"), Code = \"messaging.status.view\", Name = \"messaging.status.view\", Group = \"Messaging\", Description = \"Permission for messaging.status.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"eecd0fac-223c-4dba-9fa1-2a6e973d61d1\"), Code = \"messaging.inbox.view\", Name = \"messaging.inbox.view\", Group = \"Messaging\", Description = \"Permission for messaging.inbox.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"974af1f9-3caa-4857-a1a7-48462c389332\"), Code = \"messaging.send.text\", Name = \"messaging.send.text\", Group = \"Messaging\", Description = \"Permission for messaging.send.text\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"0485154c-dde5-4732-a7aa-a379c77a5b27\"), Code = \"messaging.send.template\", Name = \"messaging.send.template\", Group = \"Messaging\", Description = \"Permission for messaging.send.template\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"29461562-ef9c-48c0-a606-482ff57b8f95\"), Code = \"messaging.send\", Name = \"messaging.send\", Group = \"Messaging\", Description = \"Permission for messaging.send\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"bbc5202a-eac9-40bb-aa78-176c677dbf5b\"), Code = \"messaging.whatsappsettings.view\", Name = \"messaging.whatsappsettings.view\", Group = \"Messaging\", Description = \"Permission for admin.whatsappsettings.view\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"205b87c7-b008-4e51-9fea-798c2dc4f9c2\"), Code = \"admin.whatsappsettings.view\", Name = \"admin.whatsappsettings.view\", Group = \"Admin\", Description = \"Permission for admin.whatsappsettings.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"6e4d3a86-7cf9-4ac2-b8a7-ed10c9f0173d\"), Code = \"settings.whatsapp.view\", Name = \"Settings - WhatsApp View\", Group = \"Settings\", Description = \"Permission for users to view & manage WhatsApp Settings\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"ad36cdb7-5221-448b-a6a6-c35c9f88d021\"), Code = \"inbox.view\", Name = \"inbox.view\", Group = \"Inbox\", Description = \"Permission to Inbox View\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"74828fc0-e358-4cfc-b924-13719a0d9f50\"), Code = \"inbox.menu\", Name = \"inbox.menu\", Group = \"Inbox\", Description = \"Permission to View Menu\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"98572fe7-d142-475a-b990-f248641809e2\"), Code = \"settings.profile.view\", Name = \"Complete Profile\", Group = \"Settings\", Description = \"Permission to Complete Profile\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"821480c6-1464-415e-bba8-066fcb4e7e63\"), Code = \"automation.menu\", Name = \"automation.menu\", Group = \"Automation\", Description = \"Permission to view automation menu\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"918a61d0-5ab6-46af-a3d3-41e37b7710f9\"), Code = \"automation.Create.Template.Flow\", Name = \"automation.Create.Template.Flow\", Group = \"Automation\", Description = \"Permission to Create Template Flow\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"9ae90cfe-3fea-4307-b024-3083c2728148\"), Code = \"automation.View.Template.Flow\", Name = \"automation.View.Template.Flow\", Group = \"Automation\", Description = \"Permission to View Template Flow\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"93c5d5a7-f8dd-460a-8c7b-e3788440ba3a\"), Code = \"automation.Create.TemplatePlusFreetext.Flow\", Name = \"automation.Create.TemplatePlusFreetext.Flow\", Group = \"Automation\", Description = \"Permission to Create Template + Freetext Flow\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"7d7cbceb-4ce7-4835-85cd-59562487298d\"), Code = \"automation.View.TemplatePlusFreetext.Flow\", Name = \"automation.View.TemplatePlusFreetext.Flow\", Group = \"Automation\", Description = \"Permission to View Template + Freetext Flow\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"636b17f2-1c54-4e26-a8cd-dbf561dcb522\"), Code = \"automation.View.Template.Flow_analytics\", Name = \"automation.View.Template.Flow_analytics\", Group = \"Automation\", Description = \"Permission to View Flow AnaLytics\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"adfa8490-9705-4a36-a86e-d5bff7ddc220\"), Code = \"automation.View.TemplatePlusFreeText.Flow_analytics\", Name = \"automation.View.TemplatePlusFreeText.Flow_analytics\", Group = \"Automation\", Description = \"Permission to View Templat Plus free text Flow AnaLytics\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"0dedac5b-81c8-44c3-8cfe-76c58e29c6db\"), Code = \"automation_trigger_test\", Name = \"automation_trigger_test\", Group = \"Automation\", Description = \"Permission to to trigger manual test\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000011\"), Code = \"admin.plans.view\", Name = \"admin.plans.view\", Group = \"Admin\", Description = \"Permission to view plan manager\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000012\"), Code = \"admin.plans.create\", Name = \"admin.plans.create\", Group = \"Admin\", Description = \"Permission to create new plans\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000013\"), Code = \"admin.plans.update\", Name = \"admin.plans.update\", Group = \"Admin\", Description = \"Permission to update existing plans\", IsActive = true, CreatedAt = created }\n//    );\n\n\n\n//    // ========== üß© CORRECT RELATIONSHIPS ==========\n\n//    // Role ‚ÜîÔ∏è RolePermission (One-to-Many)\n//    modelBuilder.Entity<RolePermission>()\n//        .HasOne(rp => rp.Role)\n//        .WithMany(r => r.RolePermissions)\n//        .HasForeignKey(rp => rp.RoleId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    // Permission ‚ÜîÔ∏è RolePermission (One-to-Many)\n//    modelBuilder.Entity<RolePermission>()\n//        .HasOne(rp => rp.Permission)\n//        .WithMany(p => p.RolePermissions)\n//        .HasForeignKey(rp => rp.PermissionId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    // User ‚ÜîÔ∏è UserPermission (One-to-Many)\n//    modelBuilder.Entity<UserPermission>()\n//        .HasOne(up => up.User)\n//        .WithMany(u => u.UserPermissions)\n//        .HasForeignKey(up => up.UserId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    // Permission ‚ÜîÔ∏è UserPermission (One-to-Many)\n//    modelBuilder.Entity<UserPermission>()\n//        .HasOne(up => up.Permission)\n//        .WithMany(p => p.UserPermissions)\n//        .HasForeignKey(up => up.PermissionId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    // ========== (Rest of your model mappings below remain the same) ==========\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasOne(s => s.MessageLog)\n//        .WithMany()\n//        .HasForeignKey(s => s.MessageLogId)\n//        .OnDelete(DeleteBehavior.Restrict);\n\n//    modelBuilder.Entity<LeadTimeline>()\n//        .HasOne(t => t.Contact)\n//        .WithMany()\n//        .HasForeignKey(t => t.ContactId);\n\n//    modelBuilder.Entity<Campaign>()\n//        .HasOne(c => c.Business)\n//        .WithMany(b => b.Campaigns)\n//        .HasForeignKey(c => c.BusinessId)\n//        .IsRequired();\n\n//    modelBuilder.Entity<CampaignRecipient>()\n//        .HasOne(r => r.Campaign)\n//        .WithMany(c => c.Recipients)\n//        .HasForeignKey(r => r.CampaignId);\n\n//    modelBuilder.Entity<CampaignRecipient>()\n//        .HasOne(r => r.Contact)\n//        .WithMany()\n//        .HasForeignKey(r => r.ContactId)\n//        .IsRequired(false)                      // <- optional FK\n//        .OnDelete(DeleteBehavior.SetNull);\n\n//    modelBuilder.Entity<CampaignRecipient>()\n//        .HasOne(r => r.Business)\n//        .WithMany()\n//        .HasForeignKey(r => r.BusinessId)\n//        .OnDelete(DeleteBehavior.Restrict);\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasOne(s => s.Recipient)\n//        .WithMany(r => r.SendLogs)\n//        .HasForeignKey(s => s.RecipientId);\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasOne(s => s.Contact)\n//        .WithMany()\n//        .HasForeignKey(s => s.ContactId);\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasOne(s => s.Campaign)\n//        .WithMany(c => c.SendLogs)\n//        .HasForeignKey(s => s.CampaignId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    modelBuilder.Entity<ContactTag>()\n//        .HasOne(ct => ct.Contact)\n//        .WithMany(c => c.ContactTags)\n//        .HasForeignKey(ct => ct.ContactId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    modelBuilder.Entity<ContactTag>()\n//        .HasOne(ct => ct.Tag)\n//        .WithMany(t => t.ContactTags)\n//        .HasForeignKey(ct => ct.TagId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    modelBuilder.Entity<Role>()\n//        .HasMany(r => r.Users)\n//        .WithOne(u => u.Role)\n//        .HasForeignKey(u => u.RoleId)\n//        .OnDelete(DeleteBehavior.Restrict);\n\n//    modelBuilder.Entity<Campaign>()\n//        .HasMany(c => c.MultiButtons)\n//        .WithOne(b => b.Campaign)\n//        .HasForeignKey(b => b.CampaignId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    modelBuilder.Entity<MessageLog>()\n//        .HasOne(m => m.SourceCampaign)\n//        .WithMany(c => c.MessageLogs)\n//        .HasForeignKey(m => m.CampaignId)\n//        .OnDelete(DeleteBehavior.Restrict);\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .Property(s => s.BusinessId)\n//        .IsRequired();\n\n//    modelBuilder.Entity<FlowButtonLink>()\n//        .HasKey(b => b.Id);\n\n\n//    modelBuilder.Entity<Business>()\n//                   .HasMany(b => b.WhatsAppSettings)\n//                   .WithOne()\n//                   .HasForeignKey(s => s.BusinessId)\n//                   .OnDelete(DeleteBehavior.Cascade);\n\n//    modelBuilder.Entity<ContactRead>()\n//        .HasIndex(cr => new { cr.ContactId, cr.UserId })\n//        .IsUnique();\n\n//    modelBuilder.Entity<AutoReplyFlowNode>()\n//        .OwnsOne(n => n.Position);\n\n//    modelBuilder.Entity<FeatureAccess>()\n//    .HasIndex(f => new { f.BusinessId, f.FeatureName })\n//    .IsUnique();\n\n//    modelBuilder.Entity<WhatsAppTemplate>(e =>\n//    {\n//        e.Property(x => x.Body).HasColumnType(\"text\");\n//        e.Property(x => x.ButtonsJson).HasColumnType(\"text\");\n//        e.Property(x => x.RawJson).HasColumnType(\"text\");\n//    });\n//    modelBuilder.Entity<CampaignClickLog>(e =>\n//    {\n//        e.HasIndex(x => new { x.CampaignId, x.ClickType, x.ClickedAt });\n//        e.HasIndex(x => new { x.CampaignId, x.ButtonIndex });\n//        e.HasIndex(x => new { x.CampaignId, x.ContactId });\n//    });\n\n//    modelBuilder.Entity<CampaignClickDailyAgg>(e =>\n//    {\n//        e.HasIndex(x => new { x.CampaignId, x.Day, x.ButtonIndex }).IsUnique();\n//        e.Property(x => x.Day).HasColumnType(\"date\");\n//    });\n\n//    modelBuilder.Entity<MessageLog>()\n//    .HasIndex(x => x.MessageId);\n//    modelBuilder.Entity<MessageLog>()\n//        .HasIndex(x => x.RunId);\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasIndex(x => x.MessageId);\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasIndex(x => x.RunId);\n\n\n//    // WhatsAppSettingEntity (principal)\n//    modelBuilder.Entity<WhatsAppSettingEntity>(b =>\n//    {\n//        b.ToTable(\"WhatsAppSettings\");\n\n//        // SINGLE canonical principal key for the composite FK\n//        b.HasAlternateKey(s => new { s.BusinessId, s.Provider })\n//         .HasName(\"AK_WhatsAppSettings_BusinessId_Provider\");\n\n//        // Optional: also keep an index on it (not strictly needed if you have the AK)\n//        b.HasIndex(s => new { s.BusinessId, s.Provider })\n//         .IsUnique()\n//         .HasDatabaseName(\"UX_WhatsAppSettings_BusinessId_Provider\");\n\n//        // (You can keep your other helper indexes if you want)\n//        b.HasIndex(x => new { x.Provider, x.PhoneNumberId })\n//         .HasDatabaseName(\"IX_WhatsAppSettings_Provider_PhoneNumberId\");\n\n//        b.HasIndex(x => new { x.Provider, x.WhatsAppBusinessNumber })\n//         .HasDatabaseName(\"IX_WhatsAppSettings_Provider_BusinessNumber\");\n\n//        b.HasIndex(x => new { x.Provider, x.WabaId })\n//         .HasDatabaseName(\"IX_WhatsAppSettings_Provider_WabaId\");\n\n//        b.HasIndex(x => new { x.BusinessId, x.Provider, x.IsActive })\n//         .HasDatabaseName(\"IX_WhatsAppSettings_Business_Provider_IsActive\");\n\n//        b.HasIndex(x => new { x.Provider, x.WebhookCallbackUrl })\n//         .HasDatabaseName(\"IX_WhatsAppSettings_Provider_CallbackUrl\");\n\n//        // REMOVE this if you previously had it: the Provider_ci computed column\n//        // REMOVE the unique (BusinessId, Provider_ci) index as well\n//    });\n//    // ---------- CampaignSendLog composite index (fast status reconciliation) ----------\n//    modelBuilder.Entity<CampaignSendLog>(b =>\n//    {\n//        b.HasIndex(x => new { x.BusinessId, x.MessageId })\n//         .HasDatabaseName(\"IX_CampaignSendLogs_Business_MessageId\");\n//    });\n\n//    // ---------- MessageLog composite indexes (fast joins & inbound lookups) ----------\n//    modelBuilder.Entity<MessageLog>(b =>\n//    {\n//        b.HasIndex(x => new { x.BusinessId, x.MessageId })\n//         .HasDatabaseName(\"IX_MessageLogs_Business_MessageId\");\n\n//        b.HasIndex(x => new { x.BusinessId, x.RecipientNumber })\n//         .HasDatabaseName(\"IX_MessageLogs_Business_Recipient\");\n//    });\n\n//    modelBuilder.Entity<Contact>()\n//        .HasIndex(c => new { c.BusinessId, c.PhoneNumber })\n//        .IsUnique();\n//    // -------- ContactReads: one row per (Business, User, Contact) --------\n//    modelBuilder.Entity<ContactRead>()\n//        .HasIndex(cr => new { cr.BusinessId, cr.UserId, cr.ContactId })\n//        .IsUnique()\n//        .HasDatabaseName(\"ux_contactreads_biz_user_contact\");\n\n//    // -------- MessageLogs: computed column + composite index for unread --------\n//    // Create a shadow computed column MessageTime = COALESCE(SentAt, CreatedAt)\n//    modelBuilder.Entity<MessageLog>()\n//        .Property<DateTime?>(\"MessageTime\")\n//        .HasComputedColumnSql(\"COALESCE(\\\"SentAt\\\", \\\"CreatedAt\\\")\", stored: true);\n\n//    // Composite index used by unread query:\n//    // WHERE BusinessId = ? AND IsIncoming AND ContactId IS NOT NULL\n//    // AND (SentAt ?? CreatedAt) > LastReadAt\n//    modelBuilder.Entity<MessageLog>()\n//        .HasIndex(\"BusinessId\", \"IsIncoming\", \"ContactId\", \"MessageTime\")\n//        .HasDatabaseName(\"ix_msglogs_biz_in_contact_msgtime\");\n//    // Quick Reply\n//    modelBuilder.Entity<QuickReply>()\n//        .HasIndex(q => new { q.BusinessId, q.Scope, q.IsActive });\n\n//    modelBuilder.Entity<QuickReply>()\n//        .HasIndex(q => new { q.BusinessId, q.OwnerUserId, q.IsActive });\n\n//    modelBuilder.Entity<QuickReply>()\n//        .Property(q => q.UpdatedAt)\n//        .HasDefaultValueSql(\"NOW()\");\n\n//    modelBuilder.Entity<QuickReply>(e =>\n//    {\n//        e.HasIndex(x => new { x.BusinessId, x.Scope, x.IsDeleted, x.IsActive });\n//        e.HasIndex(x => new { x.OwnerUserId, x.IsDeleted, x.IsActive });\n//        e.HasIndex(x => x.UpdatedAt);\n//        e.Property(x => x.Title).HasMaxLength(120).IsRequired();\n//        e.Property(x => x.Language).HasMaxLength(8);\n//    });\n\n//    modelBuilder.Entity<WhatsAppPhoneNumber>(e =>\n//    {\n//        e.ToTable(\"WhatsAppPhoneNumbers\");\n//        e.HasKey(x => x.Id);\n\n//        e.Property(x => x.Provider).IsRequired();\n//        e.Property(x => x.PhoneNumberId).IsRequired();\n\n//        // Composite FK ‚Üí principal (BusinessId, Provider)\n//        e.HasOne<WhatsAppSettingEntity>()\n//         .WithMany(s => s.WhatsAppBusinessNumbers)           // keep your nav if you have it\n//         .HasForeignKey(x => new { x.BusinessId, x.Provider })\n//         .HasPrincipalKey(s => new { s.BusinessId, s.Provider }) // <-- expression overload\n//         .OnDelete(DeleteBehavior.Cascade);\n\n//        // Unique idempotency for upsert\n//        e.HasIndex(x => new { x.BusinessId, x.Provider, x.PhoneNumberId })\n//         .IsUnique()\n//         .HasDatabaseName(\"UX_WhatsappPhoneNumbers_Bus_Prov_PhoneId\");\n//    });\n//    modelBuilder.Entity<Campaign>(e =>\n//    {\n//        // Freeze provider schema snapshot on the campaign\n//        e.Property(x => x.TemplateSchemaSnapshot).HasColumnType(\"jsonb\");\n//    });\n\n//    modelBuilder.Entity<CampaignRecipient>(e =>\n//    {\n//        // Per-recipient frozen data produced by materializer\n//        e.Property(x => x.ResolvedParametersJson).HasColumnType(\"jsonb\");\n//        e.Property(x => x.ResolvedButtonUrlsJson).HasColumnType(\"jsonb\");\n\n//        // Fast idempotency lookup to prevent duplicate sends\n//        e.HasIndex(x => x.IdempotencyKey).HasDatabaseName(\"ix_campaignrecipients_idempotency\");\n\n//        e.HasOne<xbytechat.api.Features.CampaignModule.Models.AudienceMember>()\n//         .WithMany().HasForeignKey(x => x.AudienceMemberId).OnDelete(DeleteBehavior.SetNull);\n//    });\n\n//    modelBuilder.Entity<xbytechat.api.Features.CampaignModule.Models.CampaignVariableMap>(e =>\n//    {\n//        e.ToTable(\"CampaignVariableMaps\");\n\n//        e.HasKey(x => x.Id);\n\n//        // Scope: ensure uniqueness per (Campaign, Component, Index)\n//        e.HasIndex(x => new { x.CampaignId, x.Component, x.Index })\n//         .IsUnique()\n//         .HasDatabaseName(\"ux_cvm_campaign_component_index\");\n\n//        // Relationship\n//        e.HasOne(x => x.Campaign)\n//         .WithMany(c => c.VariableMaps)             // add ICollection<CampaignVariableMap> VariableMaps { get; set; } to Campaign if you want navs later (optional)\n//         .HasForeignKey(x => x.CampaignId)\n//         .OnDelete(DeleteBehavior.Cascade);\n//    });\n\n//    modelBuilder.Entity<xbytechat.api.Features.CampaignModule.Models.CsvBatch>(e =>\n//    {\n//        e.ToTable(\"CsvBatches\");\n//        e.HasKey(x => x.Id);\n\n//        e.Property(x => x.HeadersJson).HasColumnType(\"jsonb\");\n\n//        e.HasIndex(x => x.Checksum).HasDatabaseName(\"ix_csvbatch_checksum\");\n//        e.HasIndex(x => new { x.BusinessId, x.CreatedAt }).HasDatabaseName(\"ix_csvbatch_biz_created\");\n//    });\n\n//    modelBuilder.Entity<CsvRow>(e =>\n//    {\n//        e.ToTable(\"CsvRows\");\n//        e.HasKey(x => x.Id);\n\n//        e.Property(x => x.RowJson).HasColumnType(\"jsonb\");\n\n//        // Unique within a batch\n//        e.HasIndex(x => new { x.BatchId, x.RowIndex })\n//         .IsUnique()\n//         .HasDatabaseName(\"ux_csvrow_batch_rowidx\");\n\n//        // Useful for fast joins/normalization checks\n//        e.HasIndex(x => x.PhoneE164).HasDatabaseName(\"ix_csvrow_phone\");\n\n//        // FK ‚Üí CsvBatch\n//        e.HasOne(x => x.Batch)\n//         .WithMany()\n//         .HasForeignKey(x => x.BatchId)\n//         .OnDelete(DeleteBehavior.Cascade);\n//    });\n\n//    modelBuilder.Entity<xbytechat.api.Features.CampaignModule.Models.Audience>(e =>\n//    {\n//        e.ToTable(\"Audiences\");\n//        e.HasKey(x => x.Id);\n\n//        e.HasIndex(x => new { x.BusinessId, x.IsDeleted })\n//         .HasDatabaseName(\"ix_audiences_biz_deleted\");\n\n//        // Optional link to the batch this audience came from\n//        e.HasOne(x => x.CsvBatch)\n//         .WithMany()\n//         .HasForeignKey(x => x.CsvBatchId)\n//         .OnDelete(DeleteBehavior.SetNull);\n//    });\n\n//    modelBuilder.Entity<AudienceMember>(e =>\n//    {\n//        e.ToTable(\"AudienceMembers\");\n//        e.HasKey(x => x.Id);\n\n//        e.Property(x => x.AttributesJson).HasColumnType(\"jsonb\");\n\n//        // Prevent duplicate phone rows inside a single audience\n//        e.HasIndex(x => new { x.AudienceId, x.PhoneE164 })\n//         .IsUnique()\n//         .HasDatabaseName(\"ux_audmember_audience_phone\");\n\n//        e.HasIndex(x => x.ContactId).HasDatabaseName(\"ix_audmember_contact\");\n\n//        e.HasOne(x => x.Audience)\n//         .WithMany(a => a.Members)\n//         .HasForeignKey(x => x.AudienceId)\n//         .OnDelete(DeleteBehavior.Cascade);\n//    });\n//    modelBuilder.Entity<OutboundCampaignJob>(e =>\n//    {\n//        e.ToTable(\"OutboundCampaignJobs\");\n//        e.HasIndex(x => new { x.Status, x.NextAttemptAt });\n//        e.HasIndex(x => x.CampaignId);\n//        e.Property(x => x.Status).HasMaxLength(32);\n//        e.Property(x => x.LastError).HasMaxLength(4000);\n//    });\n//    modelBuilder.Entity<CsvBatch>(b =>\n//    {\n//        b.HasIndex(x => new { x.BusinessId, x.AudienceId }); // helpful for lookups\n//        b.HasOne<Audience>()                                  // no nav prop needed right now\n//         .WithMany()\n//         .HasForeignKey(x => x.AudienceId)\n//         .OnDelete(DeleteBehavior.SetNull);                   // if audience is deleted, keep batch\n//    });\n//    modelBuilder.Entity<CsvRow>(b =>\n//    {\n//        // Unique per batch row\n//        b.HasIndex(x => new { x.BatchId, x.RowIndex }).IsUnique();\n\n//        // Helpful for multi-tenant queries by batch\n//        b.HasIndex(x => new { x.BusinessId, x.BatchId });\n//    });\n//    // Audience FKs + helpful indices\n//    modelBuilder.Entity<Audience>(b =>\n//    {\n//        // Helpful indexes\n//        b.HasIndex(x => new { x.BusinessId, x.CampaignId });\n//        b.HasIndex(x => new { x.BusinessId, x.CsvBatchId });\n\n//        // Many Audiences -> one Campaign (dependent = Audience via CampaignId)\n//        // Requires: Audience.Campaign (nav) and Campaign.Audiences (collection nav)\n//        b.HasOne(a => a.Campaign)\n//         .WithMany(c => c.Audiences)\n//         .HasForeignKey(a => a.CampaignId)\n//         .OnDelete(DeleteBehavior.SetNull);\n\n//        // Optional backlink to source CSV batch (no back-collection needed)\n//        b.HasOne(a => a.CsvBatch)\n//         .WithMany()\n//         .HasForeignKey(a => a.CsvBatchId)\n//         .OnDelete(DeleteBehavior.SetNull);\n//    });\n\n\n//}\n//}\n//}\n"
    },
    {
      "path": "xbytechat-api/DTOs/Messages/BaseMessageDto.cs",
      "sha256": "9af6b10a0f81ca1fef4fa6f55228cf022cf8f574e7dc66dcee263cde3074a20d",
      "language": "csharp",
      "size": 440,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    public abstract class BaseMessageDto\n    {\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [Phone]\n        public string RecipientNumber { get; set; }\n\n        public abstract string MessageContent { get; set; }\n\n        //[Required]\n        //public string MessageType { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/DTOs/Messages/BulkMessageDto.cs",
      "sha256": "c9cf233e8ad3bf868c53de4f40343b326e34c668d015097e2aa6a1221696b9c4",
      "language": "csharp",
      "size": 647,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    public class BulkMessageDto\n    {\n        [Required]\n        public List<Guid> ContactIds { get; set; } = new();\n\n        [Required]\n        public string MessageType { get; set; } = string.Empty; // \"text\" or \"template\"\n\n        [Required]\n        public string MessageTemplate { get; set; } = string.Empty;\n\n        public string? TemplateName { get; set; }\n\n        public List<string>? TemplateParams { get; set; }\n\n        public DateTime? ScheduledAt { get; set; } // Optional future scheduling\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/DTOs/Messages/CtaMessageDto.cs",
      "sha256": "80af1338096deb56a727a9ac543829c364442d6f67637455296e227a56abbd7b",
      "language": "csharp",
      "size": 1326,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    public class CtaMessageDto\n    {\n        // üéØ Required Fields\n        public string RecipientPhone { get; set; } = string.Empty;\n        public string BodyText { get; set; } = string.Empty;\n        public List<string> Buttons { get; set; } = new();\n\n        // üîó Optional Source Info\n        public Guid? BusinessId { get; set; }          // Optional: Track for MessageLog\n        public Guid? CampaignId { get; set; }          // Optional: If triggered via Campaign\n        public string? SourceModule { get; set; }      // e.g., \"Catalog\", \"CRM\", \"Timeline\"\n\n        // üë§ Customer Context (Optional Enrichment)\n        public string? CustomerId { get; set; }\n        public string? CustomerName { get; set; }\n        public string? CustomerPhone { get; set; }\n\n        // üì¶ Advanced (Optional but useful)\n        public string? BotId { get; set; }             // Bot which served this (optional)\n        public string? RefMessageId { get; set; }      // Link to previous message (thread)\n        public string? CTATriggeredFrom { get; set; }  // e.g., ‚ÄúBuy Now‚Äù, ‚ÄúKnow More‚Äù\n\n        // ‚è±Ô∏è Timestamps / Meta\n        public DateTime? ScheduledAt { get; set; }     // For future automation (optional)\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/DTOs/Messages/ImageMessageDto.cs",
      "sha256": "f5c8436e0d3055ef94a5fd88067f1497534a889f1296174babd92385a36494cf",
      "language": "csharp",
      "size": 340,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    public class ImageMessageDto : BaseMessageDto\n    {\n        [Required]\n        public override string MessageContent { get; set; } = string.Empty;\n\n        [Required]\n        [Url]\n        public string MediaUrl { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/DTOs/Messages/RawMessageWrapper.cs",
      "sha256": "d7ac355237d8f59f61eeeee123e9450f669ff9eb387359212b8c2c2456ac4353",
      "language": "csharp",
      "size": 220,
      "content": "// DTOs/Messages/RawMessageWrapper.cs\nusing Newtonsoft.Json.Linq;\n\npublic class RawMessageWrapper\n{\n    public string MessageType { get; set; } = string.Empty;\n    public JObject Payload { get; set; } = new JObject();\n}\n"
    },
    {
      "path": "xbytechat-api/DTOs/Messages/TemplateMessageDto.cs",
      "sha256": "06b028cea23f4720af49039d87a58cf7134087ad5744eae187c7900c0a2daa35",
      "language": "csharp",
      "size": 1033,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    /// <summary>\n    /// DTO for sending WhatsApp template-based messages.\n    /// </summary>\n    public class TemplateMessageDto : BaseMessageDto\n    {\n        [Required]\n        public string TemplateName { get; set; } = string.Empty;\n\n        [Required]\n        public string LanguageCode { get; set; } = \"en_US\";\n\n        public Dictionary<string, string> TemplateParameters { get; set; }\n\n        public List<ButtonPayloadDto>? ButtonParams { get; set; } // ‚úÖ NEW\n\n        public override string MessageContent { get; set; } = \"[Template]\";\n    }\n\n    /// <summary>\n    /// DTO for each button in a WhatsApp template.\n    /// </summary>\n    public class ButtonPayloadDto\n    {\n        public string SubType { get; set; } = \"url\"; // or \"phone_number\"\n        public string Index { get; set; } = \"0\";      // 0-based index as string\n        public string Param { get; set; } = string.Empty; // dynamic value for URL or phone number\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/DTOs/Messages/TextMessageDto.cs",
      "sha256": "a899c48829d76e7fdf88be5bdafe15ab5307342c557b6431ba43c60f51a8ee11",
      "language": "csharp",
      "size": 244,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    public class TextMessageDto : BaseMessageDto\n    {\n        [Required]\n        public override string MessageContent { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Attributes/HasPermissionAttribute.cs",
      "sha256": "4c0b87bd0b181823afbcc065a45376dc4c185ec94ae738d09d28afeee757d71d",
      "language": "csharp",
      "size": 3182,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.Services;\n\nnamespace xbytechat.api.Features.AccessControl.Attributes\n{\n    public class HasPermissionAttribute : Attribute, IAsyncAuthorizationFilter\n    {\n        private readonly string _permissionCode;\n\n        public HasPermissionAttribute(string permissionCode) => _permissionCode = permissionCode;\n\n        public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n        {\n            var user = context.HttpContext.User;\n            var planIdClaim = user.FindFirst(\"plan_id\")?.Value;\n\n            if (string.IsNullOrWhiteSpace(planIdClaim) || !Guid.TryParse(planIdClaim, out var planId))\n            {\n                context.Result = new ForbidResult();\n                return;\n            }\n\n            var permissionService = context.HttpContext.RequestServices\n                .GetRequiredService<IPermissionCacheService>();\n\n            var permissions = await permissionService.GetPlanPermissionsAsync(planId);\n\n            var hasPermission = permissions.Any(p =>\n                string.Equals(p.Code, _permissionCode, StringComparison.OrdinalIgnoreCase));\n\n            if (!hasPermission)\n                context.Result = new ForbidResult();\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Mvc;\n//using Microsoft.AspNetCore.Mvc.Filters;\n//using Microsoft.Extensions.DependencyInjection;\n//using System;\n//using System.Linq;\n//using xbytechat.api.Features.AccessControl.Services;\n\n//namespace xbytechat.api.Features.AccessControl.Attributes\n//{\n//    public class HasPermissionAttribute : Attribute, IAuthorizationFilter\n//    {\n//        private readonly string _permissionCode;\n\n//        public HasPermissionAttribute(string permissionCode)\n//        {\n//            _permissionCode = permissionCode;\n//        }\n\n//        public void OnAuthorization(AuthorizationFilterContext context)\n//        {\n//            var user = context.HttpContext.User;\n//            var planIdClaim = user.FindFirst(\"plan_id\")?.Value;\n\n//            if (string.IsNullOrEmpty(planIdClaim))\n//            {\n//                context.Result = new ForbidResult();\n//                return;\n//            }\n\n//            if (!Guid.TryParse(planIdClaim, out var planId))\n//            {\n//                context.Result = new ForbidResult();\n//                return;\n//            }\n\n//            var permissionService = context.HttpContext.RequestServices\n//                .GetRequiredService<IPermissionCacheService>();\n\n//            // Get permissions for this plan from cache\n//            var permissions = permissionService.GetPlanPermissionsAsync(planId).Result;\n\n//            // Check if any permission matches the requested code\n//            bool hasPermission = permissions.Any(p =>\n//                string.Equals(p.Code, _permissionCode, StringComparison.OrdinalIgnoreCase));\n\n//            if (!hasPermission)\n//            {\n//                context.Result = new ForbidResult();\n//            }\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Controllers/PermissionController.cs",
      "sha256": "4e0bbb5ef2b9078ac41349c7c36d74c2d0e9211af908bc1adaef72f85e811e6d",
      "language": "csharp",
      "size": 917,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.AccessControl.Controllers\n{\n\n    [ApiController]\n    [Route(\"api/permission\")]\n    [Authorize]\n    public class PermissionController : Controller\n    {\n\n        private readonly IPermissionService _permissionService;\n        public PermissionController(IPermissionService permissionService)\n        {\n            _permissionService = permissionService;    \n        }\n        [HttpGet(\"Grouped\")]\n        public async Task<IActionResult> GetGroupedPermissions()\n        {\n            var grouped = await _permissionService.GetGroupedPermissionsAsync();\n            return Ok(ResponseResult.SuccessInfo(\"Permissions grouped by category\", grouped));\n        }\n\n       \n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Controllers/PlanController.cs",
      "sha256": "0cd255134e9dc41e6389e01e51036572a7010a710fd0752df31649ec7533438b",
      "language": "csharp",
      "size": 7083,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Features.AccessControl.Services;\nusing xbytechat.api.Helpers; // ‚úÖ For ResponseResult\n\nnamespace xbytechat.api.Features.AccessControl.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    [Authorize]\n    public class PlanController : ControllerBase\n    {\n        private readonly IPlanService _planService;\n        private readonly IPermissionCacheService _permissionCacheService;\n        private readonly ILogger<PlanController> _logger;\n        public PlanController(IPlanService planService, IPermissionCacheService permissionCacheService, ILogger<PlanController> logger)\n        {\n            _planService = planService;\n            _permissionCacheService = permissionCacheService;\n            _logger = logger;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetPlans()\n        {\n            try\n            {\n                var plans = await _planService.GetAllPlansAsync();\n                return Ok(plans); // Return plain array\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to load plans\");\n                return BadRequest(new { message = \"Failed to load plans\", error = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{planId}/permissions\")]\n        public async Task<IActionResult> GetPlanPermissions(Guid planId)\n        {\n            try\n            {\n               // var permissions = await _planService.GetPermissionsForPlanAsync(planId);\n                var permissions = await _permissionCacheService.GetPlanPermissionsAsync(planId);\n\n                return Ok(permissions);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to load permissions for plan {PlanId}\", planId);\n                return BadRequest(new { message = \"Failed to load permissions\", error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"{planId}/permissions\")]\n        [Authorize(Roles = \"superadmin,partneradmin,admin\")]\n        public async Task<IActionResult> UpdatePlanPermissions(Guid planId, [FromBody] Guid[] permissionIds)\n        {\n            try\n            {\n                await _planService.UpdatePlanPermissionsAsync(planId, permissionIds.ToList());\n                // ‚úÖ Clear cache after update\n                _permissionCacheService.ClearPlanPermissionsCache(planId);\n                return Ok(new { message = \"Permissions updated successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to update permissions for plan {PlanId}\", planId);\n                return BadRequest(new { message = \"Failed to update permissions\", error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"Create\")]\n        [Authorize(Roles = \"superadmin,partneradmin,admin\")]\n        public async Task<IActionResult> CreatePlan([FromBody] CreatePlanDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Code) || string.IsNullOrWhiteSpace(dto.Name))\n                return BadRequest(new { message = \"Code and Name are required\" });\n\n            try\n            {\n                var newPlanId = await _planService.CreatePlanAsync(dto);\n                return Ok(new { id = newPlanId, message = \"Plan created successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to create plan {PlanName}\", dto.Name);\n                return BadRequest(new { message = \"Failed to create plan\", error = ex.Message });\n            }\n        }\n\n        [HttpPut(\"{planId}\")]\n        [Authorize(Roles = \"superadmin,partneradmin,admin\")]\n        public async Task<IActionResult> UpdatePlan(Guid planId, [FromBody] UpdatePlanDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Code) || string.IsNullOrWhiteSpace(dto.Name))\n                return BadRequest(new { message = \"Code and Name are required\" });\n\n            try\n            {\n                var updated = await _planService.UpdatePlanAsync(planId, dto);\n                if (!updated)\n                    return NotFound(new { message = \"Plan not found\" });\n\n                return Ok(new { message = \"Plan updated successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to update plan {PlanId}\", planId);\n                return BadRequest(new { message = \"Failed to update plan\", error = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"{planId}\")]\n        [Authorize(Roles = \"superadmin,partneradmin,admin\")]\n        public async Task<IActionResult> DeletePlan(Guid planId)\n        {\n            try\n            {\n                var deleted = await _planService.DeletePlanAsync(planId);\n                if (!deleted)\n                    return NotFound(new { message = \"Plan not found or already inactive\" });\n                // ‚úÖ Clear cache when plan is deleted\n                _permissionCacheService.ClearPlanPermissionsCache(planId);\n                return Ok(new { message = \"Plan deleted successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to delete plan {PlanId}\", planId);\n                return BadRequest(new { message = \"Failed to delete plan\", error = ex.Message });\n            }\n        }\n      \n        [HttpGet(\"me/permissions\")]\n        public async Task<IActionResult> GetMyPlanPermissions(CancellationToken ct)\n        {\n            var role = User.FindFirst(\"role\")?.Value ?? string.Empty;\n\n            // Admin-like roles don't need a plan\n            if (role is \"superadmin\" or \"admin\" or \"partner\" or \"reseller\")\n                return Ok(new\n                {\n                    planId = (Guid?)null,\n                    plan = (PlanDto?)null,\n                    permissions = new[] { \"*\" }\n                });\n\n            var planIdStr = User.FindFirst(\"plan_id\")?.Value;\n            if (!Guid.TryParse(planIdStr, out var planId))\n                return Ok(new\n                {\n                    planId = (Guid?)null,\n                    plan = (PlanDto?)null,\n                    permissions = Array.Empty<string>()\n                });\n\n            // permissions (cached)\n            var permissionEntities = await _permissionCacheService.GetPlanPermissionsAsync(planId);\n            var codes = permissionEntities\n                .Where(p => p.IsActive)\n                .Select(p => p.Code)\n                .Distinct()\n                .ToList();\n\n            // ‚úÖ Fetch the plan once and return it as PlanDto\n            var planDto = await _planService.GetByIdAsync(planId, ct);\n\n            return Ok(new\n            {\n                planId,\n                plan = planDto,     // PlanDto or null\n                permissions = codes\n            });\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/CreatePlanDto.cs",
      "sha256": "15d5b4b092dc0019db6a3e33fc6ea49a5bd2e02c9c4fabde02403dc9c32feb90",
      "language": "csharp",
      "size": 320,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class CreatePlanDto\n    {\n        public string Code { get; set; } // e.g. \"FREE\", \"SMART\"\n        public string Name { get; set; }\n        public string? Description { get; set; }\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/GroupedPermissionDto.cs",
      "sha256": "d31e43145b8ed5908bd705af1dc96740d163615a183c30dc69b6d72097d37a76",
      "language": "csharp",
      "size": 255,
      "content": "using xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class GroupedPermissionDto\n    {\n        public string Group { get; set; }\n        public List<Permission> Features { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/PermissionDto.cs",
      "sha256": "46bfdeaa2a7dfa7bdaa56ed6c991868bae5fcc8ffb88cff1cc82d329e51eb92f",
      "language": "csharp",
      "size": 353,
      "content": "namespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class PermissionDto\n    {\n        public Guid Id { get; set; }\n        public string Code { get; set; }\n        public string Name { get; set; }\n        public string? Group { get; set; }\n        public string? Description { get; set; }\n        public bool IsActive { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/PlanDto.cs",
      "sha256": "87bcc89fbc963d131fcc246a1bde5d2d1a9198a61fac73a55b6b985644c8ee89",
      "language": "csharp",
      "size": 303,
      "content": "namespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class PlanDto\n    {\n        public Guid Id { get; set; }\n        public string Code { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public bool IsActive { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/RoleDto.cs",
      "sha256": "890bec8d90e7068a2c8e49c4249b761506cdb9c26b2fd5a470bf14c6013954cf",
      "language": "csharp",
      "size": 479,
      "content": "namespace xbytechat.api.Features.AccessControl.DTOs;\n\n// DTO: Role details used across layers\npublic class RoleDto\n{\n    /// <summary>Unique identifier of the role.</summary>\n    public Guid Id { get; set; }\n\n   \n    public string Role { get; set; } = default!;\n\n   \n    public string Code { get; set; } = default!;\n\n   \n    public string? Description { get; set; }\n\n    \n    public bool IsActive { get; set; }\n\n       public RoleDto() { }\n\n    // Convenience constructor\n    \n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/UpdatePlanDto.cs",
      "sha256": "e4a09d8fd1c1ff0cb720be4ff2ba80df60e06fc54795e1e2a23fd06b16bf8956",
      "language": "csharp",
      "size": 273,
      "content": "namespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class UpdatePlanDto\n    {\n        public string Name { get; set; }\n        public string Code { get; set; }\n        public string Description { get; set; }\n        public bool IsActive { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/UpdatePlanPermissionsRequest.cs",
      "sha256": "b62abd8813b7a4d3812bc8260d06a3770d0a34c9141d845d60ff86cf904a3378",
      "language": "csharp",
      "size": 168,
      "content": "namespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class UpdatePlanPermissionsRequest\n    {\n        public List<Guid> PermissionIds { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/UpdateRolePermissionsDto.cs",
      "sha256": "e00530db11a422793d96b8905211218a03a8e810c601034c76b75fbba37d40db",
      "language": "csharp",
      "size": 291,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class UpdateRolePermissionsDto\n    {\n        [Required]\n        public List<Guid> PermissionIds { get; set; } = new();\n        public bool ReplaceAll { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/Permission.cs",
      "sha256": "22c58f1f832014c6129b075f027045a186874bc7c20d0f312befe1d658bb0ab4",
      "language": "csharp",
      "size": 832,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Permission\n    {\n        public Guid Id { get; set; }\n\n        public string Code { get; set; } // Unique key like \"ViewDashboard\"\n\n        public string Name { get; set; } // Friendly name like \"View Dashboard\"\n\n        public string? Group { get; set; } // Optional grouping, e.g., \"CRM\", \"Catalog\", \"Admin\"\n\n        public string? Description { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<RolePermission> RolePermissions { get; set; }\n\n        public ICollection<UserPermission> UserPermissions { get; set; }\n\n        public ICollection<PlanPermission> PlanPermissions { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/Plan.cs",
      "sha256": "1682d96ed57c73cf2dce0b4b7194becc04837f998e9f0718b14e8a2b5ff8c5a6",
      "language": "csharp",
      "size": 704,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Plan\n    {\n        public Guid Id { get; set; }\n\n        public string Code { get; set; } // e.g. \"FREE\", \"SMART\", \"ADVANCED\"\n        public string Name { get; set; } // Friendly display name\n\n        public string? Description { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<PlanPermission> PlanPermissions { get; set; }\n        public ICollection<Business> Businesses { get; set; } = new List<Business>();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/PlanPermission.cs",
      "sha256": "e6e65f0ae33c19e9d2585d73812bcf99ed207d52ac6d804a3c2bf86b3152eca7",
      "language": "csharp",
      "size": 525,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class PlanPermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid PlanId { get; set; }\n        public Plan Plan { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin email or ID\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/Role.cs",
      "sha256": "4c2e237e65d702febee355976cfc64209fd4cf2d98f87e7ef6de4b199dd048a4",
      "language": "csharp",
      "size": 760,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.AuthModule.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Role\n    {\n        public Guid Id { get; set; }\n\n        public string Name { get; set; } // e.g. SuperAdmin, PartnerAdmin, BusinessAdmin, Staff, etc.\n\n        public string? Description { get; set; }\n\n        public bool IsSystemDefined { get; set; } = false; // true for SuperAdmin, PartnerAdmin\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<RolePermission> RolePermissions { get; set; }\n        public ICollection<User> Users { get; set; } // üß© One-to-many relation: Role ‚Üí Users\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/RolePermission.cs",
      "sha256": "d9b31669bec3fbda1b95c89def9a6cc641e0dd21f5e38583b8dae4c0239b9a8a",
      "language": "csharp",
      "size": 619,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class RolePermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid RoleId { get; set; }\n        public Role Role { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin user email or ID\n\n        public bool IsActive { get; set; } = true; // ‚úÖ Add this line\n        public bool IsRevoked { get; set; } = false; // ‚úÖ Required\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/UserPermission.cs",
      "sha256": "6b85321ec68fced21477222e85ac56594106c4654b5d99061c42bc1c46d876aa",
      "language": "csharp",
      "size": 677,
      "content": "using System;\nusing xbytechat.api.AuthModule.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class UserPermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid UserId { get; set; }\n        public User User { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public bool IsGranted { get; set; } = true; // ‚úÖ true = allow, false = explicitly deny\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin or system\n\n        public bool IsRevoked { get; set; } = false; // ‚úÖ Required\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Seeder/PermissionConstants.cs",
      "sha256": "47104d91bf08a96917121e247b83aac03fe402f24bb851d3fa4b1b9ee5375469",
      "language": "csharp",
      "size": 1126,
      "content": "namespace xbytechat.api.Features.AccessControl.Seeder\n{\n    public static class PermissionConstants\n    {\n        public static class Dashboard\n        {\n            public const string View = \"dashboard.view\";\n        }\n\n        public static class Campaigns\n        {\n            public const string View = \"campaign.view\";\n            public const string Create = \"campaign.create\";\n            public const string Delete = \"campaign.delete\";\n        }\n\n        public static class Products\n        {\n            public const string View = \"product.view\";\n            public const string Create = \"product.create\";\n            public const string Delete = \"product.delete\";\n        }\n\n        public static class CRM\n        {\n            public const string ContactsView = \"contacts.view\";\n            public const string TagsEdit = \"tags.edit\";\n        }\n\n        public static class Admin\n        {\n            public const string BusinessApprove = \"admin.business.approve\";\n            public const string ViewLogs = \"admin.logs.view\";\n        }\n\n        // üÜï Add more modules and permissions here as needed\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Seeder/RolePermissionMapping.cs",
      "sha256": "47f001a1b2d6404c28e73be68faf79485c10c1c0a7dab0a5346cc06fff4f049a",
      "language": "csharp",
      "size": 1302,
      "content": "namespace xbytechat.api.Features.AccessControl.Seeder\n{\n    public static class RolePermissionMapping\n    {\n        public static readonly Dictionary<string, List<string>> RolePermissions = new()\n        {\n            [\"admin\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.Campaigns.View,\n                PermissionConstants.Campaigns.Create,\n                PermissionConstants.Campaigns.Delete,\n                PermissionConstants.Products.View,\n                PermissionConstants.Products.Create,\n                PermissionConstants.Products.Delete,\n                PermissionConstants.CRM.ContactsView,\n                PermissionConstants.CRM.TagsEdit,\n                PermissionConstants.Admin.BusinessApprove,\n                PermissionConstants.Admin.ViewLogs\n            },\n\n            [\"business\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.Campaigns.View,\n                PermissionConstants.CRM.ContactsView,\n                PermissionConstants.Products.View\n            },\n\n            [\"staff\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.CRM.ContactsView\n            }\n        };\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/AccessControlService.cs",
      "sha256": "7715aa1fb932cf63407c3a5e5502b6c3f751e331055be04257cfd120a8671fcb",
      "language": "csharp",
      "size": 7685,
      "content": "//using Microsoft.EntityFrameworkCore;\n//using System.Collections.Generic;\n//using System.Security.Claims;\n//using System.Threading.Tasks;\n\n//using xbytechat.api.Features.AccessControl.Models;\n\n//namespace xbytechat.api.Features.AccessControl.Services\n//{\n//    public class AccessControlService : IAccessControlService\n//    {\n//        private readonly AppDbContext _context;\n\n//        public AccessControlService(AppDbContext context)\n//        {\n//            _context = context;\n//        }\n\n//        public async Task<IEnumerable<Permission>> GetAllPermissionsAsync()\n//        {\n//            return await _context.Permissions\n//                .AsNoTracking()\n//                .Where(p => p.IsActive)\n//                .ToListAsync();\n//        }\n//        //public async Task<IEnumerable<Permission>> GetPermissionsAsync(Guid userId)\n//        //{\n//        //    // First, check if the user has direct permissions\n//        //    var userPermissions = await _context.UserPermissions\n//        //        .Where(up => up.UserId == userId && up.IsGranted && !up.IsRevoked)\n//        //        .Select(up => up.Permission)\n//        //        .Where(p => p.IsActive)\n//        //        .ToListAsync();\n\n//        //    // If no direct permissions, fall back to role permissions\n//        //    if (!userPermissions.Any())\n//        //    {\n//        //        userPermissions = await _context.RolePermissions\n//        //            .Where(rp => rp.Role.Users.Any(u => u.Id == userId) && rp.IsActive && !rp.IsRevoked)\n//        //            .Select(rp => rp.Permission)\n//        //            .Where(p => p.IsActive)\n//        //            .ToListAsync();\n//        //    }\n\n//        //    return userPermissions;\n//        //}\n       \n        \n       \n//    }\n//}\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Repositories.Interfaces;\nusing System.Linq.Expressions;\n\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public class AccessControlService : IAccessControlService\n    {\n        private readonly IGenericRepository<User> _userRepo;\n        private readonly IGenericRepository<RolePermission> _rolePermissionRepo;\n        private readonly IGenericRepository<UserPermission> _userPermissionRepo;\n        private readonly IGenericRepository<Permission> _permissionRepo;\n        private readonly AppDbContext _context;\n        public AccessControlService(\n            IGenericRepository<User> userRepo,\n            IGenericRepository<RolePermission> rolePermissionRepo,\n            IGenericRepository<UserPermission> userPermissionRepo,\n            IGenericRepository<Permission> permissionRepo, AppDbContext context\n        )\n        {\n            _userRepo = userRepo;\n            _rolePermissionRepo = rolePermissionRepo;\n            _userPermissionRepo = userPermissionRepo;\n            _permissionRepo = permissionRepo;\n            _context = context;\n        }\n\n        /// <summary>\n        /// ‚úÖ Fetch all permissions (Role-based + User-specific) for a given user\n        /// </summary>\n        //public async Task<List<string>> GetPermissionsAsync(Guid userId)\n        //{\n        //    var user = await _userRepo.FindByIdAsync(userId);\n        //    if (user == null || user.RoleId == null)\n        //        return new List<string>();\n\n        //    // üîê Get Role-based permissions\n        //    var rolePerms = await _rolePermissionRepo\n        //        .WhereAsync(rp => rp.RoleId == user.RoleId && !rp.IsRevoked);\n\n        //    // üîê Get User-specific extra permissions\n        //    var userPerms = await _userPermissionRepo\n        //        .WhereAsync(up => up.UserId == userId && !up.IsRevoked);\n\n        //    // üß† Merge permission IDs\n        //    var permissionIds = rolePerms.Select(r => r.PermissionId)\n        //        .Union(userPerms.Select(u => u.PermissionId))\n        //        .Distinct()\n        //        .ToList();\n\n        //    // üéØ Get full permission names from Permission table\n        //    var allPerms = await _permissionRepo\n        //        .WhereAsync(p => permissionIds.Contains(p.Id));\n\n        //    return allPerms.Select(p => p.Code).Distinct().ToList(); // Use Code (standard)\n        //}\n\n        public async Task<IEnumerable<Permission>> GetAllPermissionsAsync()\n        {\n            return await _permissionRepo.WhereAsync(p => p.IsActive);\n        }\n\n\n        public async Task<List<string>> GetPermissionsAsync(Guid userId)\n        {\n            var user = await _userRepo.FindByIdAsync(userId);\n\n            if (user == null || user.RoleId == null)\n                return new List<string>();\n\n            // üöÄ Bypass: SuperAdmin always gets full access\n            if (user.Role != null && user.Role.Name.Equals(\"superadmin\", StringComparison.OrdinalIgnoreCase))\n            {\n                var allPerms = await _permissionRepo.GetAllAsync();\n                return allPerms.Select(p => p.Code).Distinct().ToList();\n            }\n\n            // üîê Get Role-based permissions\n            var rolePerms = await _rolePermissionRepo\n                .WhereAsync(rp => rp.RoleId == user.RoleId && !rp.IsRevoked);\n\n            // üîê Get User-specific extra permissions\n            var userPerms = await _userPermissionRepo\n                .WhereAsync(up => up.UserId == userId && !up.IsRevoked);\n\n            // üß† Merge permission IDs\n            var permissionIds = rolePerms.Select(r => r.PermissionId)\n                .Union(userPerms.Select(u => u.PermissionId))\n                .Distinct()\n                .ToList();\n\n            // üéØ Get full permission names from Permission table\n            var allAllowedPerms = await _permissionRepo\n                .WhereAsync(p => permissionIds.Contains(p.Id));\n\n            return allAllowedPerms.Select(p => p.Code).Distinct().ToList();\n        }\n\n        public bool HasPermission(ClaimsPrincipal user, string requiredPermission)\n        {\n            // üöÄ Bypass: SuperAdmin always passes\n            //var roleClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;\n            var roleClaim = user.Claims.FirstOrDefault(c =>\n                c.Type == ClaimTypes.Role || c.Type.Equals(\"role\", StringComparison.OrdinalIgnoreCase)\n            )?.Value;\n\n            if (!string.IsNullOrEmpty(roleClaim) && roleClaim.Equals(\"superadmin\", StringComparison.OrdinalIgnoreCase))\n                return true;\n\n            var perms = user.Claims\n                .Where(c => c.Type == \"permissions\")\n                .Select(c => c.Value)\n                .ToList();\n\n            return perms.Contains(requiredPermission);\n        }\n\n        /// <summary>\n        /// ‚úÖ Runtime permission checker (for controller/middleware)\n        /// </summary>\n        //public bool HasPermission(ClaimsPrincipal user, string requiredPermission)\n        //{\n        //    var perms = user.Claims\n        //        .Where(c => c.Type == \"permissions\")\n        //        .Select(c => c.Value)\n        //        .ToList();\n\n        //    return perms.Contains(requiredPermission);\n        //}\n\n        public async Task<List<string>> GetPermissionsByPlanIdAsync(Guid? planId)\n        {\n            if (!planId.HasValue)\n                return new List<string>();\n\n            return await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId.Value && pp.IsActive)\n                .Select(pp => pp.Permission.Code)\n                .ToListAsync();\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/IAccessControlService.cs",
      "sha256": "a7175ca2ec5d8ac4aae9b09095d675ab36d2c52dd6a62b3d23c6b6990de055e2",
      "language": "csharp",
      "size": 853,
      "content": "//using System.Collections.Generic;\n//using System.Threading.Tasks;\n//using xbytechat.api.Features.AccessControl.Models;\n\n//namespace xbytechat.api.Features.AccessControl.Services\n//{\n//    public interface IAccessControlService\n//    {\n//        Task<IEnumerable<Permission>> GetAllPermissionsAsync();\n//        Task<IEnumerable<Permission>> GetPermissionsAsync(Guid userId);\n\n//    }\n//}\n\n\nusing System.Security.Claims;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public interface IAccessControlService\n    {\n        Task<List<string>> GetPermissionsAsync(Guid userId);\n        bool HasPermission(ClaimsPrincipal user, string permission);\n        Task<IEnumerable<Permission>> GetAllPermissionsAsync();\n        Task<List<string>> GetPermissionsByPlanIdAsync(Guid? planId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/IPlanService.cs",
      "sha256": "7e943cbf0f9f97ecaac03b05ae94b28c8cf649813e1c6d4dd1e7246b3bdc0cf1",
      "language": "csharp",
      "size": 952,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public interface IPlanService\n    {\n        Task<IEnumerable<PlanDto>> GetAllPlansAsync();\n        Task<IEnumerable<PermissionDto>> GetPermissionsForPlanAsync(Guid planId);\n       // Task UpdatePlanPermissionsAsync(Guid planId, List<Guid> permissionIds);\n        Task<Guid> CreatePlanAsync(CreatePlanDto dto);\n        Task<bool> DeletePlanAsync(Guid planId);\n        Task<bool> UpdatePlanAsync(Guid planId, UpdatePlanDto dto);\n\n        // New methods for permissions\n        Task<List<PermissionDto>> GetPlanPermissionsAsync(Guid planId);\n        Task UpdatePlanPermissionsAsync(Guid planId, List<Guid> permissionIds);\n\n        Task<PlanDto?> GetByIdAsync(Guid planId, CancellationToken ct = default);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/PermissionCacheService.cs",
      "sha256": "c268071425295dc74c3f7323b4ebcbc3f413d9eaea473b6b55ada75cc0117ea9",
      "language": "csharp",
      "size": 1696,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Caching.Memory;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public interface IPermissionCacheService\n    {\n        Task<List<Permission>> GetPlanPermissionsAsync(Guid planId);\n        void ClearPlanPermissionsCache(Guid planId);\n    }\n\n    public class PermissionCacheService : IPermissionCacheService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMemoryCache _cache;\n        private const string CacheKeyPrefix = \"plan_permissions_\";\n\n        public PermissionCacheService(AppDbContext context, IMemoryCache cache)\n        {\n            _context = context;\n            _cache = cache;\n        }\n\n        public async Task<List<Permission>> GetPlanPermissionsAsync(Guid planId)\n        {\n            var cacheKey = $\"{CacheKeyPrefix}{planId}\";\n\n            // Try to get from cache\n            if (_cache.TryGetValue(cacheKey, out List<Permission> cachedPermissions))\n                return cachedPermissions;\n\n            // Fetch from DB\n            var permissions = await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId && pp.IsActive)\n                .Select(pp => pp.Permission)\n                .ToListAsync();\n\n            // Store in cache\n            _cache.Set(cacheKey, permissions, TimeSpan.FromHours(1));\n\n            return permissions;\n        }\n\n        public void ClearPlanPermissionsCache(Guid planId)\n        {\n            _cache.Remove($\"{CacheKeyPrefix}{planId}\");\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/PlanService.cs",
      "sha256": "1b989e01aca4efc37b99ca089369e468ba7ba452768d72b3b85ea7bae8769f9b",
      "language": "csharp",
      "size": 9530,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public class PlanService : IPlanService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<PlanService> _logger;\n        private readonly IPermissionCacheService _permissionCacheService;\n\n        public PlanService(AppDbContext context, ILogger<PlanService> logger, IPermissionCacheService permissionCacheService)\n        {\n            _context = context;\n            _logger = logger;\n            _permissionCacheService = permissionCacheService;\n        }\n\n        //public async Task<IEnumerable<Plan>> GetAllPlansAsync()\n        //{\n        //    _logger.LogInformation(\"Fetching all active plans...\");\n        //    try\n        //    {\n        //        return await _context.Plans\n        //            .AsNoTracking()\n        //            .Include(p => p.PlanPermissions)\n        //            .Where(p => p.IsActive)\n        //            .ToListAsync();\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"Error fetching plans.\");\n        //        throw;\n        //    }\n        //}\n        public async Task<IEnumerable<PlanDto>> GetAllPlansAsync()\n        {\n            return await _context.Plans\n                .Where(p => p.IsActive)\n                .Select(p => new PlanDto\n                {\n                    Id = p.Id,\n                    Code = p.Code,\n                    Name = p.Name,\n                    Description = p.Description,\n                    IsActive = p.IsActive\n                })\n                .ToListAsync();\n        }\n        public async Task<IEnumerable<PermissionDto>> GetPermissionsForPlanAsync(Guid planId)\n        {\n            return await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId && pp.IsActive)\n                .Select(pp => new PermissionDto\n                {\n                    Id = pp.Permission.Id,\n                    Code = pp.Permission.Code,\n                    Name = pp.Permission.Name,\n                    Group = pp.Permission.Group,\n                    Description = pp.Permission.Description,\n                    IsActive = pp.Permission.IsActive\n                })\n                .ToListAsync();\n        }\n        public async Task<PlanDto?> GetByIdAsync(Guid planId, CancellationToken ct = default)\n        {\n            return await _context.Plans\n                .AsNoTracking()\n                .Where(p => p.Id == planId)\n                .Select(p => new PlanDto\n                {\n                    Id = p.Id,\n                    Code = p.Code,\n                    Name = p.Name,\n                    Description = p.Description,\n                    IsActive = p.IsActive\n                })\n                .FirstOrDefaultAsync(ct);\n        }\n\n        //public async Task<IEnumerable<Permission>> GetPermissionsForPlanAsync(Guid planId)\n        //{\n        //    _logger.LogInformation(\"Fetching permissions for plan {PlanId}\", planId);\n        //    try\n        //    {\n        //        return await _context.PlanPermissions\n        //            .Where(pp => pp.PlanId == planId && pp.IsActive)\n        //            .Include(pp => pp.Permission)\n        //            .Select(pp => pp.Permission)\n        //            .AsNoTracking()\n        //            .ToListAsync();\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"Error fetching permissions for plan {PlanId}\", planId);\n        //        throw;\n        //    }\n        //}\n\n        //public async Task UpdatePlanPermissionsAsync(Guid planId, List<Guid> permissionIds)\n        //{\n        //    _logger.LogInformation(\"Updating permissions for plan {PlanId}\", planId);\n        //    try\n        //    {\n        //        // Remove all existing permissions for the plan\n        //        var existing = await _context.PlanPermissions\n        //            .Where(pp => pp.PlanId == planId)\n        //            .ToListAsync();\n\n        //        _context.PlanPermissions.RemoveRange(existing);\n\n        //        // Add new permissions\n        //        var newPlanPermissions = permissionIds.Select(pid => new PlanPermission\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            PlanId = planId,\n        //            PermissionId = pid,\n        //            IsActive = true,\n        //            AssignedAt = DateTime.UtcNow,\n        //            AssignedBy = \"System\"\n        //        });\n\n        //        await _context.PlanPermissions.AddRangeAsync(newPlanPermissions);\n        //        await _context.SaveChangesAsync();\n        //        _logger.LogInformation(\"Permissions updated for plan {PlanId}\", planId);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"Error updating permissions for plan {PlanId}\", planId);\n        //        throw;\n        //    }\n        //}\n\n        public async Task<Guid> CreatePlanAsync(CreatePlanDto dto)\n        {\n            _logger.LogInformation(\"Creating new plan: {PlanName}\", dto.Name);\n            try\n            {\n                var plan = new Plan\n                {\n                    Id = Guid.NewGuid(),\n                    Code = dto.Code,\n                    Name = dto.Name,\n                    Description = dto.Description,\n                    IsActive = dto.IsActive\n                };\n\n                _context.Plans.Add(plan);\n                await _context.SaveChangesAsync();\n\n                _logger.LogInformation(\"Plan created with ID: {PlanId}\", plan.Id);\n                return plan.Id;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error creating plan {PlanName}\", dto.Name);\n                throw;\n            }\n        }\n\n        public async Task<bool> DeletePlanAsync(Guid planId)\n        {\n            _logger.LogInformation(\"Deleting (soft) plan {PlanId}\", planId);\n            try\n            {\n                var plan = await _context.Plans.FirstOrDefaultAsync(p => p.Id == planId);\n                if (plan == null || !plan.IsActive)\n                {\n                    _logger.LogWarning(\"Plan not found or already inactive: {PlanId}\", planId);\n                    return false;\n                }\n\n                plan.IsActive = false;\n                _context.Plans.Update(plan);\n                await _context.SaveChangesAsync();\n\n                _logger.LogInformation(\"Plan {PlanId} soft deleted.\", planId);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error deleting plan {PlanId}\", planId);\n                throw;\n            }\n        }\n\n        public async Task<bool> UpdatePlanAsync(Guid planId, UpdatePlanDto dto)\n        {\n            _logger.LogInformation(\"Updating plan {PlanId}\", planId);\n            try\n            {\n                var plan = await _context.Plans.FirstOrDefaultAsync(p => p.Id == planId);\n                if (plan == null)\n                {\n                    _logger.LogWarning(\"Plan not found: {PlanId}\", planId);\n                    return false;\n                }\n\n                plan.Code = dto.Code;\n                plan.Name = dto.Name;\n                plan.Description = dto.Description;\n                plan.IsActive = dto.IsActive;\n\n                _context.Plans.Update(plan);\n                await _context.SaveChangesAsync();\n\n                _logger.LogInformation(\"Plan {PlanId} updated successfully.\", planId);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error updating plan {PlanId}\", planId);\n                throw;\n            }\n        }\n\n        public async Task UpdatePlanPermissionsAsync(Guid planId, List<Guid> permissionIds)\n        {\n            // Remove old mappings\n            var existing = await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId)\n                .ToListAsync();\n            _context.PlanPermissions.RemoveRange(existing);\n\n            // Add new mappings\n            var newMappings = permissionIds.Select(pid => new PlanPermission\n            {\n                PlanId = planId,\n                PermissionId = pid,\n                AssignedAt = DateTime.UtcNow,\n                AssignedBy = \"system\" // replace with logged-in admin\n            });\n\n            await _context.PlanPermissions.AddRangeAsync(newMappings);\n            await _context.SaveChangesAsync();\n            //// Clear cache\n            _permissionCacheService.ClearPlanPermissionsCache(planId);\n        }\n        public async Task<List<PermissionDto>> GetPlanPermissionsAsync(Guid planId)\n        {\n            return await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId && pp.IsActive)\n                .Select(pp => new PermissionDto\n                {\n                    Id = pp.Permission.Id,\n                    Code = pp.Permission.Code,\n                    Name = pp.Permission.Name,\n                    Group = pp.Permission.Group,\n                    Description = pp.Permission.Description\n                })\n                .ToListAsync();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Controllers/AudienceController.cs",
      "sha256": "36755710674031902cf3133a3308170d732b23a2eb5cc6c6dcba17589b8fec7e",
      "language": "csharp",
      "size": 2865,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.Audiences.DTOs;\nusing xbytechat.api.Features.Audiences.Services;\nusing xbytechat.api.Shared; // User.GetBusinessId()\n\nnamespace xbytechat.api.Features.Audiences.Controllers\n{\n    [ApiController]\n    [Route(\"api/audiences\")]\n    [Authorize]\n    public class AudienceController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        private readonly IAudienceService _svc;\n\n        public AudienceController(AppDbContext db, IAudienceService svc)\n        { _db = db; _svc = svc; }\n\n        [HttpPost]\n        public async Task<IActionResult> Create([FromBody] AudienceCreateDto dto)\n        {\n            var businessId = User.GetBusinessId();\n            var userName = User.Identity?.Name ?? \"system\";\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            if (string.IsNullOrWhiteSpace(dto?.Name))\n                return BadRequest(new { success = false, message = \"Name is required\" });\n\n            var id = await _svc.CreateAsync(businessId, dto!, userName);\n            return Ok(new { success = true, id });\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> List()\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var items = await _svc.ListAsync(businessId);\n            return Ok(new { success = true, items });\n        }\n\n        [HttpPost(\"{audienceId:guid}/assign\")]\n        public async Task<IActionResult> Assign(Guid audienceId, [FromBody] AudienceAssignDto dto)\n        {\n            var businessId = User.GetBusinessId();\n            var userName = User.Identity?.Name ?? \"system\";\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var ok = await _svc.AssignAsync(businessId, audienceId, dto ?? new AudienceAssignDto(), userName);\n            return Ok(new { success = ok });\n        }\n\n        [HttpGet(\"{audienceId:guid}/members\")]\n        public async Task<IActionResult> Members(Guid audienceId, [FromQuery] int page = 1, [FromQuery] int pageSize = 50)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var exists = await _db.Audiences.AnyAsync(a => a.Id == audienceId && a.BusinessId == businessId && !a.IsDeleted);\n            if (!exists) return NotFound(new { success = false, message = \"Audience not found\" });\n\n            var rows = await _svc.GetMembersAsync(businessId, audienceId, page, pageSize);\n            return Ok(new { success = true, items = rows, page, pageSize });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Controllers/AudienceImportController.cs",
      "sha256": "3b83d236a62b4def34dc67cda4f095665cdc144985151dd97565eb8de142268d",
      "language": "csharp",
      "size": 1639,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.Audiences.Services;\nusing xbytechat.api.Shared; // User.GetBusinessId()\n\nnamespace xbytechat.api.Features.Audiences.Controllers\n{\n    [ApiController]\n    [Route(\"api/audiences/import\")]\n    [Authorize]\n    public class AudienceImportController : ControllerBase\n    {\n        private readonly IAudienceImportService _svc;\n\n        public AudienceImportController(IAudienceImportService svc)\n        {\n            _svc = svc;\n        }\n\n        //[HttpPost(\"csv\")]\n        //[RequestSizeLimit(64_000_000)] // 64 MB\n        //public async Task<IActionResult> ImportCsv([FromForm] IFormFile file)\n        //{\n        //    var businessId = User.GetBusinessId();\n        //    if (businessId == Guid.Empty) return Unauthorized();\n\n        //    if (file == null || file.Length == 0)\n        //        return BadRequest(new { success = false, message = \"CSV file is required\" });\n\n        //    try\n        //    {\n        //        await using var stream = file.OpenReadStream();\n        //        var resp = await _svc.ImportCsvAsync(businessId, stream, file.FileName, HttpContext.RequestAborted);\n\n        //        return Ok(new { success = true, data = resp });\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        Log.Error(ex, \"‚ùå CSV import failed | biz={Biz}\", businessId);\n        //        return StatusCode(500, new { success = false, message = \"CSV import failed\" });\n        //    }\n        //}\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/DTOs/AudienceDtos.cs",
      "sha256": "36380702ffe3286aab70c4f45799ef8fc330b26eb9eae08190a307598ade1aa7",
      "language": "csharp",
      "size": 1198,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Audiences.DTOs\n{\n    public class AudienceCreateDto\n    {\n        public string Name { get; set; } = \"\";\n        public string? Description { get; set; }\n    }\n\n    public class AudienceSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; } = \"\";\n        public string? Description { get; set; }\n        public int MemberCount { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n\n    public class AudienceMemberDto\n    {\n        public Guid Id { get; set; }\n        public Guid? ContactId { get; set; }   // optional link to CRM contact\n        public string? Name { get; set; }\n        public string? PhoneNumber { get; set; }\n        public string? Email { get; set; }\n        public string? VariablesJson { get; set; } // if your model stores row-level vars\n        public DateTime CreatedAt { get; set; }\n    }\n\n    public class AudienceAssignDto\n    {\n        public List<Guid> ContactIds { get; set; } = new(); // optional: assign CRM contacts\n        public Guid? CsvBatchId { get; set; }               // optional: attach CSV batch to audience\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/DTOs/CsvImportDtos.cs",
      "sha256": "c93d41ac64223fad52cd0ce3cb909af0347cac1e44b642fcdc9139c013b1ba73",
      "language": "csharp",
      "size": 342,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Audiences.DTOs\n{\n    public class CsvImportResponseDto\n    {\n        public Guid BatchId { get; set; }\n        public int RowCount { get; set; }\n        public List<string> Columns { get; set; } = new();\n        public DateTime CreatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Services/AudienceImportService.cs",
      "sha256": "d7d97123d74025c2ac1e15973dd9e31f977706e2312d898a3af8a8374cc9af38",
      "language": "csharp",
      "size": 4327,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.Audiences.DTOs;\n\nnamespace xbytechat.api.Features.Audiences.Services\n{\n    public class AudienceImportService : IAudienceImportService\n    {\n        private readonly AppDbContext _db;\n\n        public AudienceImportService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<CsvImportResponseDto> ImportCsvAsync(\n            Guid businessId,\n            Stream csvStream,\n            string fileName,\n            CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty)\n                throw new UnauthorizedAccessException(\"Invalid business id.\");\n\n            if (csvStream == null || !csvStream.CanRead)\n                throw new ArgumentException(\"CSV stream is not readable.\");\n\n            using var reader = new StreamReader(csvStream);\n\n            // --- header row ---\n            var headerLine = await reader.ReadLineAsync();\n            if (string.IsNullOrWhiteSpace(headerLine))\n                throw new InvalidOperationException(\"Empty CSV.\");\n\n            var headers = headerLine.Split(',')\n                                    .Select(h => (h ?? string.Empty).Trim())\n                                    .Where(h => !string.IsNullOrWhiteSpace(h))\n                                    .ToList();\n\n            if (headers.Count == 0)\n                throw new InvalidOperationException(\"No columns.\");\n\n            var batchId = Guid.NewGuid();\n            var now = DateTime.UtcNow;\n\n            // Pre-create batch\n            _db.CsvBatches.Add(new Features.CampaignModule.Models.CsvBatch\n            {\n                Id = batchId,\n                BusinessId = businessId,\n                FileName = fileName,\n                // ‚úÖ match your model: CsvBatch.HeadersJson\n                HeadersJson = Newtonsoft.Json.JsonConvert.SerializeObject(headers),\n                RowCount = 0,\n                CreatedAt = now\n            });\n\n            var rowsBuffer = new List<Features.CampaignModule.Models.CsvRow>(capacity: 1024);\n            var total = 0;\n\n            // naive CSV parse (comma-only, no quoting in v1)\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (string.IsNullOrWhiteSpace(line)) continue;\n\n                var cells = line.Split(',');\n                var dict = new Dictionary<string, string?>();\n                for (int i = 0; i < headers.Count; i++)\n                {\n                    var v = (i < cells.Length ? cells[i] : null)?.Trim();\n                    dict[headers[i]] = v;\n                }\n\n                rowsBuffer.Add(new Features.CampaignModule.Models.CsvRow\n                {\n                    Id = Guid.NewGuid(),\n                    BatchId = batchId,\n                    // üîÅ If your property is not RowJson, change this to the correct one (e.g., DataJson)\n                    RowJson = Newtonsoft.Json.JsonConvert.SerializeObject(dict),\n                    CreatedAt = DateTime.UtcNow\n                });\n\n                total++;\n\n                // chunked insert every 1k for memory safety\n                if (rowsBuffer.Count >= 1000)\n                {\n                    await _db.CsvRows.AddRangeAsync(rowsBuffer, ct);\n                    await _db.SaveChangesAsync(ct);\n                    rowsBuffer.Clear();\n                }\n            }\n\n            if (rowsBuffer.Count > 0)\n            {\n                await _db.CsvRows.AddRangeAsync(rowsBuffer, ct);\n            }\n\n            // update batch row count\n            var batchRow = await _db.CsvBatches.FirstAsync(b => b.Id == batchId, ct);\n            batchRow.RowCount = total;\n\n            await _db.SaveChangesAsync(ct);\n\n            Log.Information(\"üì• CSV imported | biz={Biz} batch={Batch} rows={Rows} file={File}\",\n                businessId, batchId, total, fileName);\n\n            return new CsvImportResponseDto\n            {\n                BatchId = batchId,\n                RowCount = total,\n                Columns = headers,\n                CreatedAt = now\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Services/AudienceService.cs",
      "sha256": "cac7c8cbf5cafd4dfa16dff784e3dea70ab732453c3976417aa3b812face67a0",
      "language": "csharp",
      "size": 7432,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Audiences.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.Audiences.Services\n{\n    public interface IAudienceService\n    {\n        Task<Guid> CreateAsync(Guid businessId, AudienceCreateDto dto, string createdBy);\n        Task<List<AudienceSummaryDto>> ListAsync(Guid businessId);\n        Task<bool> AssignAsync(Guid businessId, Guid audienceId, AudienceAssignDto dto, string createdBy);\n        Task<List<AudienceMemberDto>> GetMembersAsync(Guid businessId, Guid audienceId, int page = 1, int pageSize = 50);\n    }\n\n    public class AudienceService : IAudienceService\n    {\n        private readonly AppDbContext _db;\n\n        public AudienceService(AppDbContext db) { _db = db; }\n\n        public async Task<Guid> CreateAsync(Guid businessId, AudienceCreateDto dto, string createdBy)\n        {\n            var id = Guid.NewGuid();\n            try\n            {\n                var now = DateTime.UtcNow;\n                Guid? createdByUserId = null;\n                if (Guid.TryParse(createdBy, out var parsed)) createdByUserId = parsed;\n\n                var model = new Audience\n                {\n                    Id = id,\n                    BusinessId = businessId,\n                    Name = dto?.Name?.Trim() ?? \"Untitled Audience\",\n                    Description = dto?.Description,\n                    CsvBatchId = null,\n                    IsDeleted = false,\n                    CreatedByUserId = createdByUserId,\n                    CreatedAt = now,\n                    UpdatedAt = now\n                };\n\n                _db.Set<Audience>().Add(model);\n                await _db.SaveChangesAsync();\n\n                Log.Information(\"‚úÖ Audience created | biz={Biz} id={Id} name={Name}\", businessId, id, model.Name);\n                return id;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed creating audience | biz={Biz}\", businessId);\n                throw;\n            }\n        }\n\n        public async Task<List<AudienceSummaryDto>> ListAsync(Guid businessId)\n        {\n            var audiences = _db.Set<Audience>()\n                .AsNoTracking()\n                .Where(a => a.BusinessId == businessId && !a.IsDeleted);\n\n            var members = _db.Set<AudienceMember>();\n\n            var items = await audiences\n                .OrderByDescending(a => a.CreatedAt)\n                .Select(a => new AudienceSummaryDto\n                {\n                    Id = a.Id,\n                    Name = a.Name,\n                    Description = a.Description,\n                    MemberCount = members.Count(m => m.BusinessId == businessId && m.AudienceId == a.Id && !m.IsDeleted),\n                    CreatedAt = a.CreatedAt\n                })\n                .ToListAsync();\n\n            return items;\n        }\n\n        public async Task<bool> AssignAsync(Guid businessId, Guid audienceId, AudienceAssignDto dto, string createdBy)\n        {\n            var audience = await _db.Set<Audience>()\n                .FirstOrDefaultAsync(a => a.Id == audienceId && a.BusinessId == businessId && !a.IsDeleted);\n\n            if (audience == null) return false;\n\n            var now = DateTime.UtcNow;\n\n            // 1) Assign CRM contacts (if provided)\n            if (dto?.ContactIds != null && dto.ContactIds.Count > 0)\n            {\n                var contacts = await _db.Set<Contact>()\n                    .Where(c => c.BusinessId == businessId && dto.ContactIds.Contains(c.Id))\n                    .Select(c => new { c.Id, c.Name, c.PhoneNumber, c.Email })\n                    .ToListAsync();\n\n                var newMembers = contacts.Select(c =>\n                {\n                    var phoneRaw = (c.PhoneNumber ?? \"\").Trim();\n                    var phoneE164 = ToE164OrNull(phoneRaw);\n\n                    return new AudienceMember\n                    {\n                        Id = Guid.NewGuid(),\n                        AudienceId = audienceId,\n                        BusinessId = businessId,\n                        ContactId = c.Id,\n                        Name = c.Name,\n                        Email = string.IsNullOrWhiteSpace(c.Email) ? null : c.Email,\n                        PhoneRaw = phoneRaw,\n                        PhoneE164 = phoneE164,\n                        AttributesJson = null,            // keep as null unless you want to pack extra vars\n                        IsTransientContact = false,\n                        IsDeleted = false,\n                        CreatedAt = now,\n                        UpdatedAt = now\n                    };\n                });\n\n                await _db.Set<AudienceMember>().AddRangeAsync(newMembers);\n            }\n\n            // 2) Optionally link a CSV batch\n            if (dto?.CsvBatchId.HasValue == true && dto.CsvBatchId.Value != Guid.Empty)\n            {\n                var batch = await _db.Set<CsvBatch>()\n                    .FirstOrDefaultAsync(b => b.Id == dto.CsvBatchId.Value && b.BusinessId == businessId);\n\n                if (batch != null)\n                {\n                    audience.CsvBatchId = batch.Id;\n                }\n            }\n\n            audience.UpdatedAt = now;\n\n            await _db.SaveChangesAsync();\n\n            Log.Information(\"üë• Audience assigned | biz={Biz} audience={AudienceId} contacts={Contacts} batch={Batch}\",\n                businessId, audienceId, dto?.ContactIds?.Count ?? 0, dto?.CsvBatchId);\n\n            return true;\n        }\n\n        public async Task<List<AudienceMemberDto>> GetMembersAsync(Guid businessId, Guid audienceId, int page = 1, int pageSize = 50)\n        {\n            page = Math.Max(1, page);\n            pageSize = Clamp(pageSize, 10, 200);\n\n            var q = _db.Set<AudienceMember>()\n                .AsNoTracking()\n                .Where(m => m.BusinessId == businessId && m.AudienceId == audienceId && !m.IsDeleted)\n                .OrderByDescending(m => m.CreatedAt);\n\n            var items = await q\n                .Skip((page - 1) * pageSize)\n                .Take(pageSize)\n                .Select(m => new AudienceMemberDto\n                {\n                    Id = m.Id,\n                    ContactId = m.ContactId,\n                    Name = m.Name,\n                    PhoneNumber = string.IsNullOrWhiteSpace(m.PhoneE164) ? m.PhoneRaw : m.PhoneE164,\n                    Email = m.Email,\n                    VariablesJson = m.AttributesJson,\n                    CreatedAt = m.CreatedAt\n                })\n                .ToListAsync();\n\n            return items;\n        }\n\n        // ---- helpers ----\n\n        private static int Clamp(int value, int min, int max)\n        {\n            if (value < min) return min;\n            if (value > max) return max;\n            return value;\n        }\n\n        private static string? ToE164OrNull(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var digits = new string(raw.Where(char.IsDigit).ToArray());\n            if (string.IsNullOrEmpty(digits)) return null;\n\n            // naive normalization: ensure leading +\n            if (raw.Trim().StartsWith(\"+\")) return \"+\" + digits;\n            return \"+\" + digits;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Services/CampaignVariableMapService.cs",
      "sha256": "fde5d702d281a92a4bbe0caa800ed3ab47c52fb28be71324666f3a9c7f34c3c7",
      "language": "csharp",
      "size": 6105,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignVariableMapService\n    {\n        Task<bool> SaveAsync(Guid businessId, CampaignVariableMapDto dto, string updatedBy);\n        Task<CampaignVariableMapDto?> GetAsync(Guid businessId, Guid campaignId);\n    }\n\n    public class CampaignVariableMapService : ICampaignVariableMapService\n    {\n        private readonly AppDbContext _db;\n\n        public CampaignVariableMapService(AppDbContext db) { _db = db; }\n\n        public async Task<bool> SaveAsync(Guid businessId, CampaignVariableMapDto dto, string updatedBy)\n        {\n            try\n            {\n                if (businessId == Guid.Empty) throw new UnauthorizedAccessException(\"Invalid business id.\");\n                if (dto == null) throw new ArgumentNullException(nameof(dto));\n                if (dto.CampaignId == Guid.Empty) throw new ArgumentException(\"CampaignId is required.\", nameof(dto));\n\n                // Ensure campaign ownership\n                var owns = await _db.Campaigns\n                    .AsNoTracking()\n                    .AnyAsync(c => c.Id == dto.CampaignId && c.BusinessId == businessId);\n                if (!owns) return false;\n\n                // Load existing rows for this campaign\n                var existing = await _db.CampaignVariableMaps\n                    .Where(m => m.BusinessId == businessId && m.CampaignId == dto.CampaignId)\n                    .ToListAsync();\n\n                // Normalize incoming:\n                // - tolerate null Items\n                // - default Component ‚Üí \"BODY\" if missing\n                // - trim strings\n                // - keep last occurrence per (Component, Index)\n                var incoming = (dto.Items?.AsEnumerable() ?? Enumerable.Empty<CampaignVariableMapItemDto>())\n                    .Where(i => i != null && i.Index >= 1)\n                    .Select(i => new\n                    {\n                        Component = string.IsNullOrWhiteSpace(i.Component) ? \"BODY\" : i.Component!.Trim(),\n                        i.Index,\n                        SourceType = string.IsNullOrWhiteSpace(i.SourceType) ? \"Static\" : i.SourceType!.Trim(),\n                        SourceKey = string.IsNullOrWhiteSpace(i.SourceKey) ? null : i.SourceKey!.Trim(),\n                        StaticValue = i.StaticValue,\n                        Expression = i.Expression,\n                        DefaultValue = i.DefaultValue,\n                        i.IsRequired\n                    })\n                    .GroupBy(x => new { x.Component, x.Index })\n                    .Select(g => g.Last())\n                    .ToList();\n\n                var incomingKeySet = incoming\n                    .Select(i => (i.Component, i.Index))\n                    .ToHashSet();\n\n                // Upsert each incoming row\n                foreach (var item in incoming)\n                {\n                    var row = existing.FirstOrDefault(x => x.Component == item.Component && x.Index == item.Index);\n                    if (row == null)\n                    {\n                        row = new CampaignVariableMap\n                        {\n                            Id = Guid.NewGuid(),\n                            BusinessId = businessId,\n                            CampaignId = dto.CampaignId,\n                            Component = item.Component,\n                            Index = item.Index\n                        };\n                        _db.CampaignVariableMaps.Add(row);\n                        existing.Add(row); // keep local cache in sync in case of duplicates\n                    }\n\n                    row.SourceType = item.SourceType;\n                    row.SourceKey = item.SourceKey;\n                    row.StaticValue = item.StaticValue;\n                    row.Expression = item.Expression;\n                    row.DefaultValue = item.DefaultValue;\n                    row.IsRequired = item.IsRequired;\n                }\n\n                // Remove deleted mappings (anything not present in incoming)\n                var toRemove = existing.Where(x => !incomingKeySet.Contains((x.Component, x.Index))).ToList();\n                if (toRemove.Count > 0)\n                    _db.CampaignVariableMaps.RemoveRange(toRemove);\n\n                await _db.SaveChangesAsync();\n\n                var upserted = incoming.Count;\n                var removed = toRemove.Count;\n\n                Log.Information(\"‚úÖ Variable map saved | biz={Biz} campaign={Campaign} upserted={Up} removed={Rm}\",\n                    businessId, dto.CampaignId, upserted, removed);\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed saving campaign variable map | biz={Biz} campaign={Campaign}\", businessId, dto?.CampaignId);\n                throw;\n            }\n        }\n        public async Task<CampaignVariableMapDto?> GetAsync(Guid businessId, Guid campaignId)\n        {\n            var rows = await _db.CampaignVariableMaps\n                .AsNoTracking()\n                .Where(m => m.BusinessId == businessId && m.CampaignId == campaignId)\n                .OrderBy(m => m.Component).ThenBy(m => m.Index)\n                .ToListAsync();\n\n            var items = rows.Select(r => new CampaignVariableMapItemDto\n            {\n                Component = r.Component,\n                Index = r.Index,\n                SourceType = r.SourceType,\n                SourceKey = r.SourceKey,\n                StaticValue = r.StaticValue,\n                Expression = r.Expression,\n                DefaultValue = r.DefaultValue,\n                IsRequired = r.IsRequired\n            }).ToList();\n\n            return new CampaignVariableMapDto\n            {\n                CampaignId = campaignId,\n                Items = items\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Services/IAudienceImportService.cs",
      "sha256": "80df51144eb035b0134e49bbdb7de6c48754a7800e72ee354b158ddf5401a202",
      "language": "csharp",
      "size": 586,
      "content": "using System;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Audiences.DTOs;\n\nnamespace xbytechat.api.Features.Audiences.Services\n{\n    public interface IAudienceImportService\n    {\n        /// <summary>\n        /// Parses a CSV stream (first row = headers), creates a CsvBatch and CsvRows, and returns batch summary.\n        /// </summary>\n        Task<CsvImportResponseDto> ImportCsvAsync(\n            Guid businessId,\n            Stream csvStream,\n            string fileName,\n            CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AuditTrail/DTOs/CreateAuditLogDto.cs",
      "sha256": "845322cca23fe6666ea3c5947bf45d55d34363c27d5bacec30375a04b24a73ef",
      "language": "csharp",
      "size": 471,
      "content": "namespace xbytechat.api.Features.AuditTrail.DTOs;\n\npublic class CreateAuditLogDto\n{\n    public string ActionType { get; set; }\n    public string Module { get; set; }\n    public string? RecordId { get; set; }\n\n    public string? OldValues { get; set; }\n    public string? NewValues { get; set; }\n    public string? Description { get; set; }\n\n    public string? IPAddress { get; set; }\n    public string? UserAgent { get; set; }\n    public string? Location { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AuditTrail/Models/AuditLog.cs",
      "sha256": "91e4760f6e10564db50d99acec9f1c83de5fd0b8ca2e0d3bc5874d645ac93a45",
      "language": "csharp",
      "size": 1034,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AuditTrail.Models\n{\n    public class AuditLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // üìç Business Context (Multi-Tenant)\n        public Guid BusinessId { get; set; }\n\n        // üôã Who performed the action\n        public Guid PerformedByUserId { get; set; }\n        public string? PerformedByUserName { get; set; } // Optional for display\n        public string? RoleAtTime { get; set; } // admin / business / agent\n\n        // üîç Action Details\n        public string ActionType { get; set; } = \"\"; // e.g., campaign.created, user.login\n        public string? Description { get; set; } // Free text for summary or custom note\n\n        // üåê Optional: Technical metadata\n        public string? IPAddress { get; set; }\n        public string? UserAgent { get; set; }\n        public string? Location { get; set; } // Optional for geo-capture later\n\n        // üïí Timestamp\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AuditTrail/Services/AuditLogService.cs",
      "sha256": "6b18d820c4191681a1bf26d6672f189bce0cadcfba3c8beb9e29dbed4ad4fdd9",
      "language": "csharp",
      "size": 536,
      "content": "using xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Repositories;\nusing xbytechat.api.Repositories.Interfaces;\n\nnamespace xbytechat.api.Features.AuditTrail.Services\n{\n    public class AuditLogService : IAuditLogService\n    {\n        private readonly IGenericRepository<AuditLog> _repo;\n\n        public AuditLogService(IGenericRepository<AuditLog> repo)\n        {\n            _repo = repo;\n        }\n\n        public async Task SaveLogAsync(AuditLog log)\n        {\n            await _repo.AddAsync(log);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AuditTrail/Services/IAuditLogService.cs",
      "sha256": "65d811af2c7dc349002b7b1a340a765025625f9fe31c241dccc8f3eaeab15330",
      "language": "csharp",
      "size": 197,
      "content": "using xbytechat.api.Features.AuditTrail.Models;\n\nnamespace xbytechat.api.Features.AuditTrail.Services\n{\n    public interface IAuditLogService\n    {\n        Task SaveLogAsync(AuditLog log);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/ChoiceConfig.cs",
      "sha256": "0d09e0bc40325856d625ab31e93694e661b6df532e5de78f2a55254783e40c1c",
      "language": "csharp",
      "size": 354,
      "content": "namespace xbytechat.api.Features.Automation.Config\n{\n    public class ChoiceConfig\n    {\n        public List<ChoiceCondition> Conditions { get; set; } = new();\n        public string FallbackNodeId { get; set; }\n    }\n\n    public class ChoiceCondition\n    {\n        public string Match { get; set; }\n        public string NextNodeId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/MessageConfig.cs",
      "sha256": "564fbd35e79d9ef3f8b48ed54e15d55a9d0226b7d6ea72315d81b562a7a4ecae",
      "language": "csharp",
      "size": 225,
      "content": "namespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n\n        // Future: Add support for media, buttons, templates\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/TagNodeConfig.cs",
      "sha256": "81144c1418ba70285c6af13bf7aee6346f8f6674416ffc9ab79614bceb3be4d0",
      "language": "csharp",
      "size": 197,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/WaitConfig.cs",
      "sha256": "d13667732f9e18370123b10c2881aa385e8d11a33bc01acaf0f7eb96f4903bd6",
      "language": "csharp",
      "size": 170,
      "content": "namespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; } = 2; // Default wait time\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Controllers/AutomationController.cs",
      "sha256": "3a2f3e472a351808592f6357f3e907d20c118e1e0f86f035a76e49697013e4ff",
      "language": "csharp",
      "size": 2144,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Automation.DTOs;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Features.Automation.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Automation.Controllers\n{\n    [ApiController]\n    [Route(\"api/automation\")]\n    [Authorize]\n    public class AutomationController : ControllerBase\n    {\n        private readonly IAutomationFlowRepository _automationRepository;\n        private readonly IAutomationRunner _automationRunner;\n        private readonly IContactService _contactService;\n\n        public AutomationController(\n            IAutomationFlowRepository automationRepository,\n            IAutomationRunner automationRunner,\n            IContactService contactService)\n        {\n            _automationRepository = automationRepository;\n            _automationRunner = automationRunner;\n            _contactService = contactService;\n        }\n\n        [HttpPost(\"trigger\")]\n        public async Task<IActionResult> TriggerByKeyword([FromBody] AutomationTriggerRequest request)\n        {\n            var businessId = User.GetBusinessId();\n            var userId = User.GetUserId();\n\n            if (string.IsNullOrWhiteSpace(request.Keyword) || string.IsNullOrWhiteSpace(request.Phone))\n                return BadRequest(\"Keyword and phone are required.\");\n\n            var flow = await _automationRepository.GetFlowByKeywordAsync(businessId, request.Keyword);\n            if (flow == null || !flow.IsActive)\n                return NotFound(\"‚ö†Ô∏è No matching active automation flow found.\");\n\n            var contact = await _contactService.FindOrCreateAsync(businessId, request.Phone);\n\n            var result = await _automationRunner.RunFlowAsync(\n                flow,\n                businessId,\n                contact.Id,\n                request.Phone,\n                request.SourceChannel ?? \"manual\",\n                request.IndustryTag ?? \"manual\"\n            );\n\n            return Ok(result);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/AutomationEdgeDto.cs",
      "sha256": "d9093a43a35fa0c12238f7c78daec3980190c4160320cfe73c6b93ff2d41c5ce",
      "language": "csharp",
      "size": 450,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.DTOs\n{\n    /// <summary>\n    /// Represents a connection (edge) between two automation nodes.\n    /// </summary>\n    public class AutomationEdgeDto\n    {\n        public Guid SourceNodeId { get; set; }\n\n        public Guid TargetNodeId { get; set; }\n\n        public string? Condition { get; set; }  // Optional: for future conditional routing (e.g., \"if clicked\", \"if not responded\")\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/AutomationTriggerRequest.cs",
      "sha256": "aeca572a0bab580b70dddd50cb6f4e1b282f17508311aaeb9beaefef34d8fa46",
      "language": "csharp",
      "size": 296,
      "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class AutomationTriggerRequest\n    {\n        public string Keyword { get; set; }\n\n        public string Phone { get; set; }\n\n        public string? SourceChannel { get; set; }\n\n        public string? IndustryTag { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/MessageNodeConfig.cs",
      "sha256": "8fdadb2bb6457b35ed85d89655b1f6d1d9bc5028a0ec212d9dd7eaa70b1a8e0d",
      "language": "csharp",
      "size": 218,
      "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class MessageNodeConfig\n    {\n        public string Text { get; set; } = string.Empty;\n\n        // Optional: Later you can add buttons, media, etc.\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/TagNodeConfig.cs",
      "sha256": "2feaf9902643a6bb0e59b019cfca34a41ada3abf9f66afffcac065c6bb545b6c",
      "language": "csharp",
      "size": 199,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.DTOs\n{\n    public class TagNodeConfig\n    {\n        public List<Guid> Tags { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/WaitNodeConfig.cs",
      "sha256": "f520007158ae72db229b2a23f437666e64d34fcc96cdd728ad57a4320f152b75",
      "language": "csharp",
      "size": 143,
      "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class WaitNodeConfig\n    {\n        public int Seconds { get; set; } = 3;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlow.cs",
      "sha256": "7dd5063615cfa824960a08fdd88d9fdf500a3c0461151b27e09fcaa7d97b45fe",
      "language": "csharp",
      "size": 803,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Represents a saved automation flow with nodes and edges.\n    /// </summary>\n    public class AutomationFlow\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string Name { get; set; } = string.Empty;\n\n        public string TriggerKeyword { get; set; } = string.Empty; // ‚úÖ Better naming\n\n        public string NodesJson { get; set; } = \"[]\";\n\n        public string EdgesJson { get; set; } = \"[]\";\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlowEdge.cs",
      "sha256": "ad1f63ff8580807f996a658e2a95652c94370929e8dd75eac9f1fdc98c398105",
      "language": "csharp",
      "size": 280,
      "content": "namespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowEdge\n    {\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n        public string? Condition { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlowNode.cs",
      "sha256": "c18876f0d4c8fdf851da8df67ddff902fee66217b804a6765a9b533f8402e76d",
      "language": "csharp",
      "size": 354,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowNode\n    {\n        public string Id { get; set; } = Guid.NewGuid().ToString(\"N\");\n        public string Label { get; set; } = string.Empty;\n        public NodeTypeEnum NodeType { get; set; }\n        public string ConfigJson { get; set; } = \"{}\";\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlowRunResult.cs",
      "sha256": "61407553e4f66fbfdc8c0a51868372170e58411cd6c74e857e8e9cab13e27b6b",
      "language": "csharp",
      "size": 403,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n        public Guid? HandoffNodeId { get; set; } = null;\n\n        public string? Notes { get; set; }  // Optional: track execution info (e.g., exit reason)\n\n        public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/FlowExecutionContext.cs",
      "sha256": "aef2132567e314889ae4d98f06dd96c43873ab3513b6c02cd8553346e3e7ff57",
      "language": "csharp",
      "size": 523,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Context required to run an automation flow.\n    /// </summary>\n    public class FlowExecutionContext\n    {\n        public AutomationFlow Flow { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public Guid ContactId { get; set; }\n\n        public string ContactPhone { get; set; }\n\n        public string SourceChannel { get; set; } = \"manual\";\n\n        public string IndustryTag { get; set; } = \"manual\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/FlowRunResult.cs",
      "sha256": "64baa95c50dc4528fa36e8ad36a12ac82a0528c8c640797d16b58e17455d6125",
      "language": "csharp",
      "size": 345,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Represents the result of running an automation flow.\n    /// </summary>\n    public class FlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n        public Guid? HandoffNodeId { get; set; } // If agent handoff requested\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/NodeConfigs.cs",
      "sha256": "0e8b3fb72dd676ec59568e34b569e1302a621a35a6efca4553736f89b15b21c4",
      "language": "csharp",
      "size": 167,
      "content": "namespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/NodeTypeEnum.cs",
      "sha256": "ac2b60c1ffd633136ef56df710b0cf7f141496e92e30cd1c4bd42f201f4d85d3",
      "language": "csharp",
      "size": 223,
      "content": "namespace xbytechat.api.Features.Automation.Models\n{\n    public enum NodeTypeEnum\n    {\n        Message,\n        Wait,\n        Tag,\n        AgentHandoff,\n        Choice,\n        Condition,\n        Loop,\n        End\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/TagNodeConfig.cs",
      "sha256": "9cec10f188aea021e4b186075bf0f84e18cb4071046ade7098c2658d077559f5",
      "language": "csharp",
      "size": 201,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/WaitConfig.cs",
      "sha256": "641533b56ae811de7505263f827bc5f89cc405f67645b053fd06737f1e5fa621",
      "language": "csharp",
      "size": 153,
      "content": "namespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; } = 1;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Repositories/AutomationFlowRepository.cs",
      "sha256": "0e6a38673480db7c067e41901c2725f6c93683975ffaacfdcefb67bcfe90820e",
      "language": "csharp",
      "size": 3297,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Repositories\n{\n    public class AutomationFlowRepository : IAutomationFlowRepository\n    {\n        private readonly AppDbContext _db;\n\n        public AutomationFlowRepository(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<AutomationFlow?> GetByIdAsync(Guid flowId, Guid businessId)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);\n        }\n\n        public async Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f =>\n                    f.BusinessId == businessId &&\n                    f.TriggerKeyword.ToLower() == keyword.ToLower() &&\n                    f.IsActive);\n        }\n\n        public async Task<IEnumerable<AutomationFlow>> GetAllByBusinessAsync(Guid businessId)\n        {\n            return await _db.AutomationFlows\n                .Where(f => f.BusinessId == businessId && f.IsActive)\n                .OrderBy(f => f.Name)\n                .ToListAsync();\n        }\n\n        public async Task<AutomationFlow> CreateAsync(AutomationFlow flow)\n        {\n            flow.Id = Guid.NewGuid();\n            flow.CreatedAt = DateTime.UtcNow;\n            flow.IsActive = true;\n\n            _db.AutomationFlows.Add(flow);\n            await _db.SaveChangesAsync();\n            return flow;\n        }\n\n        public async Task<AutomationFlow> UpdateAsync(AutomationFlow flow)\n        {\n            var existing = await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flow.Id && f.BusinessId == flow.BusinessId && f.IsActive);\n\n            if (existing == null)\n                throw new KeyNotFoundException(\"Automation flow not found.\");\n\n            existing.Name = flow.Name;\n            existing.TriggerKeyword = flow.TriggerKeyword;\n            existing.NodesJson = flow.NodesJson;\n            existing.EdgesJson = flow.EdgesJson;\n            existing.UpdatedAt = DateTime.UtcNow;\n\n            _db.AutomationFlows.Update(existing);\n            await _db.SaveChangesAsync();\n\n            return existing;\n        }\n\n        public async Task<bool> DeleteAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);\n\n            if (flow == null)\n                return false;\n\n            flow.IsActive = false;\n            flow.UpdatedAt = DateTime.UtcNow;\n\n            _db.AutomationFlows.Update(flow);\n            await _db.SaveChangesAsync();\n            return true;\n        }\n        public async Task<AutomationFlow?> GetByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f =>\n                f.BusinessId == businessId &&\n                EF.Functions.ILike(f.TriggerKeyword, keyword) &&\n                f.IsActive);\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Repositories/IAutomationFlowRepository.cs",
      "sha256": "3c0e87413a797f0b2cb7de16b419204f9f84555fd58a4435ca5bffc5f570b2fe",
      "language": "csharp",
      "size": 1022,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Repositories\n{\n    public interface IAutomationFlowRepository\n    {\n        // üîç Get flow by unique FlowId + BusinessId (strict filtering)\n        Task<AutomationFlow?> GetByIdAsync(Guid flowId, Guid businessId);\n\n        // üîç Get flow by keyword for auto-trigger\n        Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword);\n\n        // üìã List all flows for business\n        Task<IEnumerable<AutomationFlow>> GetAllByBusinessAsync(Guid businessId);\n\n        // ‚ûï Create flow\n        Task<AutomationFlow> CreateAsync(AutomationFlow flow);\n\n        // ‚úèÔ∏è Update flow\n        Task<AutomationFlow> UpdateAsync(AutomationFlow flow);\n\n        // ‚ùå Delete flow\n        Task<bool> DeleteAsync(Guid flowId, Guid businessId);\n        Task<AutomationFlow?> GetByKeywordAsync(Guid businessId, string keyword);\n\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/AutomationRunner.cs",
      "sha256": "3f1cb7807540e05fcd7092da474d3784a3f5c6065fd4c98ca22abc2753b97765",
      "language": "csharp",
      "size": 12633,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.Automation.Models;\nusing xbytechat.api.Features.Automation.Models.Configs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Inbox.Models;\nusing xbytechat.api.Features.Automation.Config;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public class AutomationRunner : IAutomationRunner\n    {\n        private readonly IMessageEngineService _messageService;\n        private readonly IContactService _contactService;\n        private readonly ILogger<AutomationRunner> _logger;\n        private readonly AppDbContext _appDbContext;\n        public AutomationRunner(\n            IMessageEngineService messageService,\n            IContactService contactService,\n            ILogger<AutomationRunner> logger, AppDbContext appDbContext)\n        {\n            _messageService = messageService;\n            _contactService = contactService;\n            _logger = logger;\n            _appDbContext = appDbContext;\n        }\n\n        public async Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string contactPhone,\n            string sourceChannel,\n            string industryTag)\n        {\n            var nodes = JsonConvert.DeserializeObject<List<AutomationFlowNode>>(flow.NodesJson);\n            var edges = JsonConvert.DeserializeObject<List<AutomationFlowEdge>>(flow.EdgesJson);\n\n            var result = new AutomationFlowRunResult();\n            var currentNode = nodes.FirstOrDefault(); // Start from first node\n\n            if (currentNode == null)\n            {\n                _logger.LogWarning(\"üö´ Flow has no start node.\");\n                result.NeedsAgent = true;\n                result.Notes = \"No start node found.\";\n                return result;\n            }\n\n            while (currentNode != null)\n            {\n                _logger.LogInformation(\"‚û°Ô∏è Running node: {NodeType} | {NodeId}\", currentNode.NodeType, currentNode.Id);\n\n                switch (currentNode.NodeType)\n                {\n                    case NodeTypeEnum.Message:\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        var msgDto = new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            RecipientNumber = contactPhone,\n                            TextContent = msgCfg.Text,\n                            Source = \"automation\"\n                        };\n                        _logger.LogInformation(\"üì§ Sending message: {Text}\", msgCfg.Text);\n                        await _messageService.SendAutomationReply(msgDto);\n                        break;\n\n                    case NodeTypeEnum.Wait:\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        _logger.LogInformation(\"‚è≥ Waiting {Seconds}s\", waitCfg.Seconds);\n                        await Task.Delay(waitCfg.Seconds * 1000);\n                        break;\n\n                    case NodeTypeEnum.Tag:\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        _logger.LogInformation(\"üè∑Ô∏è Assigning tags: {Tags}\", string.Join(\", \", tagCfg.Tags));\n                        await _contactService.AssignTagsAsync(businessId, contactPhone, tagCfg.Tags);\n                        break;\n\n                    case NodeTypeEnum.AgentHandoff:\n                        result.NeedsAgent = true;\n                        if (Guid.TryParse(currentNode.Id, out var parsedId))\n                        {\n                            result.HandoffNodeId = parsedId;\n                        }\n                        else\n                        {\n                            _logger.LogWarning(\"‚ö†Ô∏è Invalid node ID format for AgentHandoff node: {Id}\", currentNode.Id);\n                            result.HandoffNodeId = null;\n                        }\n                        result.Notes = \"Flow routed to human agent.\";\n                        return result;\n\n                    case NodeTypeEnum.End:\n                        _logger.LogInformation(\"‚úÖ End node reached.\");\n                        currentNode = null;\n                        continue;\n\n                    case NodeTypeEnum.Choice:\n                        _logger.LogInformation(\"üß† Reached Choice node. Saving session state to wait for user input...\");\n\n                        var session = await _appDbContext.ChatSessionStates.FirstOrDefaultAsync(s =>\n                            s.BusinessId == businessId && s.ContactId == contactId);\n\n                        if (session == null)\n                        {\n                            session = new ChatSessionState\n                            {\n                                Id = Guid.NewGuid(),\n                                BusinessId = businessId,\n                                ContactId = contactId\n                            };\n                            _appDbContext.ChatSessionStates.Add(session);\n                        }\n\n                        session.Mode = \"awaiting_choice\";\n                        session.UpdatedBy = currentNode.Id.ToString();\n                        session.LastUpdatedAt = DateTime.UtcNow;\n\n                        await _appDbContext.SaveChangesAsync();\n\n                        result.Notes = \"Choice node reached. Flow paused.\";\n                        return result;\n                }\n\n                var edge = edges.FirstOrDefault(e => e.SourceNodeId == currentNode.Id);\n                currentNode = edge == null ? null : nodes.FirstOrDefault(n => n.Id == edge.TargetNodeId);\n            }\n\n            result.Notes = \"Flow completed.\";\n            return result;\n        }\n        public async Task<AutomationFlowRunResult> ResumeFlowAsync(\n           Guid businessId,\n           Guid contactId,\n           string contactPhone,\n           string incomingMessage)\n        {\n            var session = await _appDbContext.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            if (session == null || session.Mode != \"awaiting_choice\")\n            {\n                _logger.LogWarning(\"‚ùå No active automation session found or mode not awaiting_choice.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"No active automation session.\" };\n            }\n\n            var flow = await _appDbContext.AutomationFlows\n                .Where(f => f.BusinessId == businessId && f.IsActive)\n                .OrderByDescending(f => f.UpdatedAt)\n                .FirstOrDefaultAsync();\n\n            if (flow == null)\n            {\n                _logger.LogWarning(\"‚ùå No active automation flow found for business.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"No active flow found.\" };\n            }\n\n            var nodes = JsonConvert.DeserializeObject<List<AutomationFlowNode>>(flow.NodesJson);\n            var edges = JsonConvert.DeserializeObject<List<AutomationFlowEdge>>(flow.EdgesJson);\n\n            var choiceNode = nodes.FirstOrDefault(n => n.Id == session.UpdatedBy && n.NodeType == NodeTypeEnum.Choice);\n            if (choiceNode == null)\n            {\n                _logger.LogWarning(\"‚ùå Stored session node not found or not a Choice node.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Invalid Choice node in session.\" };\n            }\n\n            var cfg = JsonConvert.DeserializeObject<ChoiceConfig>(choiceNode.ConfigJson);\n            if (cfg?.Conditions == null)\n            {\n                _logger.LogWarning(\"‚ùå Choice config is null or empty.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Invalid Choice config.\" };\n            }\n\n            var match = cfg.Conditions.FirstOrDefault(c =>\n                string.Equals(c.Match.Trim(), incomingMessage.Trim(), StringComparison.OrdinalIgnoreCase));\n\n            string nextNodeId = match?.NextNodeId ?? cfg.FallbackNodeId;\n            if (match == null)\n            {\n                _logger.LogWarning(\"üîÅ No matching condition found. Using fallback: {Fallback}\", nextNodeId);\n            }\n\n            var nextNode = nodes.FirstOrDefault(n => n.Id == nextNodeId);\n            if (nextNode == null)\n            {\n                _logger.LogWarning(\"‚ùå Next node after choice not found.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Next node not found.\" };\n            }\n\n            // ‚úÖ Clear session after resume\n            _appDbContext.ChatSessionStates.Remove(session);\n            await _appDbContext.SaveChangesAsync();\n\n            // ‚úÖ Resume from the matched node using shared loop\n            return await ExecuteNodeLoopAsync(flow, nextNode, nodes, edges, businessId, contactId, contactPhone);\n        }\n\n\n        private async Task<AutomationFlowRunResult> ExecuteNodeLoopAsync(\n    AutomationFlow flow,\n    AutomationFlowNode startNode,\n    List<AutomationFlowNode> nodes,\n    List<AutomationFlowEdge> edges,\n    Guid businessId,\n    Guid contactId,\n    string contactPhone)\n        {\n            var result = new AutomationFlowRunResult();\n            var currentNode = startNode;\n\n            while (currentNode != null)\n            {\n                _logger.LogInformation(\"‚û°Ô∏è Executing node: {NodeType} | {NodeId}\", currentNode.NodeType, currentNode.Id);\n\n                switch (currentNode.NodeType)\n                {\n                    case NodeTypeEnum.Message:\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        var msgDto = new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            RecipientNumber = contactPhone,\n                            TextContent = msgCfg.Text,\n                            Source = \"automation\"\n                        };\n                        await _messageService.SendAutomationReply(msgDto);\n                        break;\n\n                    case NodeTypeEnum.Tag:\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        await _contactService.AssignTagsAsync(businessId, contactPhone, tagCfg.Tags);\n                        break;\n\n                    case NodeTypeEnum.Wait:\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        await Task.Delay(waitCfg.Seconds * 1000);\n                        break;\n\n                    case NodeTypeEnum.End:\n                        return new AutomationFlowRunResult { Notes = \"‚úÖ Flow ended.\" };\n\n                    case NodeTypeEnum.AgentHandoff:\n                        return new AutomationFlowRunResult\n                        {\n                            NeedsAgent = true,\n                            Notes = \"Routed to human agent.\"\n                        };\n\n                    case NodeTypeEnum.Choice:\n                        var session = new ChatSessionState\n                        {\n                            Id = Guid.NewGuid(),\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            Mode = \"awaiting_choice\",\n                            UpdatedBy = currentNode.Id.ToString(),\n                            LastUpdatedAt = DateTime.UtcNow\n                        };\n                        _appDbContext.ChatSessionStates.Add(session);\n                        await _appDbContext.SaveChangesAsync();\n\n                        return new AutomationFlowRunResult { Notes = \"Paused at Choice node.\" };\n                }\n\n                var edge = edges.FirstOrDefault(e => e.SourceNodeId == currentNode.Id);\n                currentNode = edge == null ? null : nodes.FirstOrDefault(n => n.Id == edge.TargetNodeId);\n            }\n\n            return new AutomationFlowRunResult { Notes = \"Flow completed.\" };\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/AutomationService.cs",
      "sha256": "c42e37b6d7f110e3f94e15cae67213a79f8219feb763ecb1ba4ca86c636e423c",
      "language": "csharp",
      "size": 5101,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.Automation.Models;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public class AutomationService : IAutomationService\n    {\n        private readonly IAutomationFlowRepository _flowRepository;\n        private readonly IAutomationRunner _runner;\n        private readonly IContactService _contactService;\n        private readonly ILogger<AutomationService> _logger;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public AutomationService(\n            IAutomationFlowRepository flowRepository,\n            IAutomationRunner runner,\n            IContactService contactService,\n            ILogger<AutomationService> logger,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _flowRepository = flowRepository;\n            _runner = runner;\n            _contactService = contactService;\n            _logger = logger;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        public async Task<AutomationFlow?> GetFlowByIdAsync(Guid flowId, Guid businessId)\n        {\n            return await _flowRepository.GetByIdAsync(flowId, businessId);\n        }\n\n        public async Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _flowRepository.GetByKeywordAsync(businessId, keyword);\n        }\n\n        public async Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string phone,\n            string sourceChannel,\n            string industryTag)\n        {\n            return await _runner.RunFlowAsync(flow, businessId, contactId, phone, sourceChannel, industryTag);\n        }\n\n        public async Task<IEnumerable<AutomationFlow>> GetAllFlowsAsync(Guid businessId)\n        {\n            return await _flowRepository.GetAllByBusinessAsync(businessId);\n        }\n\n        public async Task<AutomationFlow> CreateFlowAsync(Guid businessId, AutomationFlow flow)\n        {\n            flow.BusinessId = businessId;\n            return await _flowRepository.CreateAsync(flow);\n        }\n\n        public async Task<bool> DeleteFlowAsync(Guid flowId, Guid businessId)\n        {\n            return await _flowRepository.DeleteAsync(flowId, businessId);\n        }\n\n        public async Task RunByKeywordAsync(string messageText, string phoneNumber, string sourceChannel = \"whatsapp\")\n        {\n            var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                ?? throw new UnauthorizedAccessException(\"BusinessId could not be resolved from context.\");\n\n            var flow = await _flowRepository.GetByKeywordAsync(businessId, messageText);\n            if (flow == null)\n            {\n                _logger.LogInformation(\"No matching automation flow for keyword: {Keyword}\", messageText);\n                return;\n            }\n\n            var contact = await _contactService.FindOrCreateAsync(businessId, phoneNumber);\n            await _runner.RunFlowAsync(flow, businessId, contact.Id, contact.PhoneNumber, sourceChannel, industryTag: \"default\");\n        }\n\n        public async Task<bool> TryRunFlowByKeywordAsync(\n         Guid businessId,\n         string messageText,\n         string userPhone,\n         string sourceChannel,\n         string industryTag)\n        {\n            try\n            {\n                // üîç Normalize keyword\n                var normalizedKeyword = messageText.Trim().ToLower();\n\n                // ‚úÖ Fetch flow by trigger keyword\n                var flow = await _flowRepository.GetByKeywordAsync(businessId, normalizedKeyword);\n                if (flow == null)\n                {\n                    _logger.LogInformation(\"TryRun: No matching automation flow found for keyword: '{Keyword}'\", normalizedKeyword);\n                    return false;\n                }\n\n                // üë§ Ensure contact exists\n                var contact = await _contactService.FindOrCreateAsync(businessId, userPhone);\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"‚ùå TryRun: Failed to resolve or create contact for phone: {Phone}\", userPhone);\n                    return false;\n                }\n\n                // ‚ñ∂Ô∏è Run automation flow\n                _logger.LogInformation(\"üöÄ Running flow '{FlowName}' for keyword '{Keyword}'\", flow.Name, normalizedKeyword);\n                await _runner.RunFlowAsync(flow, businessId, contact.Id, contact.PhoneNumber, sourceChannel, industryTag);\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå TryRun: Exception while executing flow for keyword '{Keyword}'\", messageText);\n                return false;\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/IAutomationRunner.cs",
      "sha256": "0aa081c7006bb76ff84c8cee9da21e51a021a69c4e0b6d191ffdc1356b5e4001",
      "language": "csharp",
      "size": 453,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public interface IAutomationRunner\n    {\n        Task<AutomationFlowRunResult> RunFlowAsync(\n             AutomationFlow flow,\n             Guid businessId,\n             Guid contactId,\n             string contactPhone,\n             string sourceChannel,\n             string industryTag\n );\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/IAutomationService.cs",
      "sha256": "fd32d83e0e970571048b14fb8805162a0b1139c917ed0bf99ad84b4a244ce609",
      "language": "csharp",
      "size": 1688,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public interface IAutomationService\n    {\n        // üìå Get flow by FlowId (for admin UI or debugging)\n        Task<AutomationFlow?> GetFlowByIdAsync(Guid flowId, Guid businessId);\n\n        // üìå Get flow by keyword match (used for auto-triggering)\n        Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword);\n\n        // üõ†Ô∏è Execute a flow with contact and channel info\n        Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string phone,\n            string sourceChannel,\n            string industryTag\n        );\n\n        // üìã List all flows (for admin or dashboard)\n        Task<IEnumerable<AutomationFlow>> GetAllFlowsAsync(Guid businessId);\n\n        // ‚ûï Create new flow\n        Task<AutomationFlow> CreateFlowAsync(Guid businessId, AutomationFlow flow);\n\n        // ‚ùå Delete existing flow\n        Task<bool> DeleteFlowAsync(Guid flowId, Guid businessId);\n\n        // ‚ö° Runtime entry point ‚Äì called when a message arrives\n        Task RunByKeywordAsync(\n            string messageText,\n            string phoneNumber,\n            string sourceChannel = \"whatsapp\"\n        );\n\n        // ‚úÖ Returns true if flow matched and executed\n        Task<bool> TryRunFlowByKeywordAsync(\n            Guid businessId,\n            string messageText,\n            string userPhone,\n            string sourceChannel,\n            string industryTag\n        );\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyController.cs",
      "sha256": "c575c41a8f3145df1332211adef4017099c86609c2981442039fcfbd0823a6de",
      "language": "csharp",
      "size": 2591,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class AutoReplyController : ControllerBase\n    {\n        private readonly IAutoReplyService _service;\n\n        public AutoReplyController(IAutoReplyService service)\n        {\n            _service = service;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> CreateRule([FromBody] AutoReplyRuleDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var result = await _service.CreateRuleAsync(businessId, dto);\n            return Ok(result);\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllRules()\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var rules = await _service.GetAllRulesAsync(businessId);\n            return Ok(rules);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetRuleById(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var rule = await _service.GetRuleByIdAsync(id, businessId);\n            return rule == null ? NotFound() : Ok(rule);\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateRule(Guid id, [FromBody] AutoReplyRuleDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            dto.Id = id;\n            var success = await _service.UpdateRuleAsync(businessId, dto);\n            return success ? NoContent() : NotFound();\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteRule(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var success = await _service.DeleteRuleAsync(id, businessId);\n            return success ? NoContent() : NotFound();\n        }\n\n        // Optional ‚Äî for debugging match logic (not exposed in prod)\n        [HttpGet(\"match\")]\n        public async Task<IActionResult> MatchByKeyword([FromQuery] string message)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var matchedRule = await _service.MatchRuleByKeywordAsync(businessId, message);\n            return matchedRule == null ? NotFound(\"No match found.\") : Ok(matchedRule);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyFlowsController.cs",
      "sha256": "442d35032e1265a4ba687db6033f7cd70d21c92e30f63d3122e43e50540bb763",
      "language": "csharp",
      "size": 3075,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class AutoReplyFlowsController : ControllerBase\n    {\n        private readonly IAutoReplyFlowService _service;\n\n        public AutoReplyFlowsController(IAutoReplyFlowService service)\n        {\n            _service = service;\n        }\n\n        // [HttpPost(\"save\")]\n        //public async Task<IActionResult> SaveFlow([FromBody] SaveFlowDto dto)\n        //{\n        //    var id = await _service.SaveFlowAsync(dto);\n        //    return Ok(new { id });\n        //}\n        [HttpPost(\"save\")]\n        public async Task<IActionResult> SaveFlow([FromBody] SaveFlowDto dto)\n        {\n            Guid businessId;\n            try { businessId = User.GetBusinessId(); }\n            catch (UnauthorizedAccessException) { return Unauthorized(\"Missing or invalid business ID\"); }\n\n            var id = await _service.SaveFlowAsync(dto, businessId);\n            return Ok(new { id });\n        }\n\n        [HttpGet(\"business/{businessId}\")]\n        public async Task<IActionResult> GetFlowsByBusiness(Guid businessId)\n        {\n            var flows = await _service.GetFlowsByBusinessIdAsync(businessId);\n            return Ok(flows);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetFlowById(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var flow = await _service.GetFlowByIdAsync(id, businessId);\n            return flow == null ? NotFound() : Ok(flow);\n        }\n        [HttpGet(\"business/{businessId}/count\")]\n        public async Task<IActionResult> GetFlowCount(Guid businessId)\n        {\n            var count = await _service.GetFlowCountForBusinessAsync(businessId);\n            return Ok(count);\n        }\n        [HttpPut(\"{id}/rename\")]\n        public async Task<IActionResult> RenameFlow(Guid id, [FromBody] RenameFlowDto dto)\n        {\n            var result = await _service.RenameFlowAsync(id, dto.NewName);\n            if (!result) return NotFound();\n            return Ok();\n        }\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteFlow(Guid id)\n        {\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // ‚úÖ Clean and secure\n            }\n            catch (UnauthorizedAccessException)\n            {\n                return Unauthorized(\"Missing or invalid business ID\");\n            }\n\n            var success = await _service.DeleteFlowAsync(id, businessId);\n            if (!success)\n                return NotFound(\"Flow not found or not owned by your business\");\n\n            return Ok(new { message = \"Flow deleted successfully\" });\n        }\n\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyRuntimeController.cs",
      "sha256": "a8f103874213b2129c6d59932b03582a9f21206d073f756ca97bfe08e0015e85",
      "language": "csharp",
      "size": 3135,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/auto-reply-runtime\")]\n    [Authorize]\n    public class AutoReplyRuntimeController : ControllerBase\n    {\n        private readonly IAutoReplyRuntimeService _runtimeService;\n        private readonly ILogger<AutoReplyRuntimeController> _logger;\n\n        public AutoReplyRuntimeController(\n            IAutoReplyRuntimeService runtimeService,\n            ILogger<AutoReplyRuntimeController> logger)\n        {\n            _runtimeService = runtimeService;\n            _logger = logger;\n        }\n\n        // üîÅ Runtime button reply based on keyword (used in message click)\n        [HttpPost(\"button-click\")]\n        public async Task<IActionResult> HandleButtonClick([FromBody] AutoReplyButtonClickDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n\n            _logger.LogInformation(\"üîò Button clicked: BusinessId={BusinessId}, Phone={Phone}, Button={ButtonText}, RefMsg={RefMessageId}\",\n                businessId, dto.Phone, dto.ButtonText, dto.RefMessageId?.ToString() ?? \"null\");\n\n            await _runtimeService.TryRunAutoReplyFlowByButtonAsync(\n                businessId,\n                dto.Phone,\n                dto.ButtonText,\n                dto.RefMessageId\n            );\n\n            return Ok(new { success = true });\n        }\n\n        // üß™ Manual test (canvas-based flow trigger)\n        [HttpPost(\"flow-by-button\")]\n        public async Task<IActionResult> TriggerFlowByButton([FromBody] AutoReplyButtonClickDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Phone) || string.IsNullOrWhiteSpace(dto.ButtonText))\n                return BadRequest(\"Phone and ButtonText are required.\");\n\n            try\n            {\n                _logger.LogInformation(\"üöÄ Triggering flow from button: FlowId={FlowId}, BusinessId={BusinessId}, ContactId={ContactId}, Phone={Phone}, ButtonText={ButtonText}\",\n                    dto.FlowId, dto.BusinessId, dto.ContactId, dto.Phone, dto.ButtonText);\n\n                await _runtimeService.RunFlowFromButtonAsync(\n                    dto.FlowId,\n                    dto.BusinessId,\n                    dto.ContactId,\n                    dto.Phone,\n                    dto.ButtonText.Trim()\n                );\n\n                return Ok(new\n                {\n                    success = true,\n                    flowId = dto.FlowId,\n                    contactId = dto.ContactId,\n                    triggeredAt = DateTime.UtcNow\n                });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to trigger flow from button click: FlowId={FlowId}, Phone={Phone}, Button={ButtonText}\",\n                    dto.FlowId, dto.Phone, dto.ButtonText);\n\n                return StatusCode(500, \"Internal server error\");\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/TemplatesController.cs",
      "sha256": "555d0e0c3deaa65e82290ddcf55e06bb4fa67bbcf43e5b9d56ea5109f7c236b8",
      "language": "csharp",
      "size": 995,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.TemplateMessages.DTOs;\n\nnamespace xbytechat.api.Features.TemplateMessages.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TemplatesController : ControllerBase\n    {\n        private static readonly List<TemplateDto> MockTemplates = new()\n        {\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Welcome Template\",\n                Placeholders = 2\n            },\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Offer Reminder\",\n                Placeholders = 1\n            },\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Follow Up\",\n                Placeholders = 3\n            }\n        };\n\n        [HttpGet]\n        public ActionResult<List<TemplateDto>> GetAll()\n        {\n            return Ok(MockTemplates);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyButtonClickDto.cs",
      "sha256": "c33e345f9a02ff4d627ba42ba92505f5819a034035b07bde678784a244b9d6ac",
      "language": "csharp",
      "size": 412,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class AutoReplyButtonClickDto\n    {\n        public Guid FlowId { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string Phone { get; set; } = string.Empty;\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid? RefMessageId { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyLogDto.cs",
      "sha256": "4674e27873c9ca6a52ab8c85ac1fb97864c6a1e653138b78096a19b3b230124e",
      "language": "csharp",
      "size": 596,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class AutoReplyLogDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string TriggerType { get; set; } = \"rule\"; // or \"flow\"\n        public string TriggerKeyword { get; set; } = string.Empty;\n        public string ReplyContent { get; set; } = string.Empty;\n\n        public DateTime TriggeredAt { get; set; }\n\n        public string? FlowName { get; set; }\n\n        public Guid? MessageLogId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyRuleDto.cs",
      "sha256": "47945e41d0ce9fc41bf7949aea8b58a0caf3bb5083fae0bc6d4815ea846d23ab",
      "language": "csharp",
      "size": 783,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    /// <summary>\n    /// DTO used to create or retrieve AutoReplyRule.\n    /// </summary>\n    public class AutoReplyRuleDto\n    {\n        public Guid? Id { get; set; } // Nullable to allow re-use for Create and Update\n        public string TriggerKeyword { get; set; } = string.Empty;\n        public string ReplyMessage { get; set; } = string.Empty;\n        public string? MediaUrl { get; set; } // Optional media\n        public int Priority { get; set; } = 0; // Lower = higher priority\n        public bool IsActive { get; set; } = true;\n\n        // Audit Fields (optional for now, useful for admin UI)\n        public DateTime? CreatedAt { get; set; }\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ButtonChoiceNodeConfig.cs",
      "sha256": "a573ed18c3b3cce438f3f126b958408f9c6245ac01be98c3db1d0c4a92adbb18",
      "language": "csharp",
      "size": 577,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ButtonChoiceNodeConfig\n    {\n        public string PromptText { get; set; } = \"Please choose an option:\";\n\n        public List<ButtonOption> Options { get; set; } = new();\n    }\n\n    public class ButtonOption\n    {\n        public string Label { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n\n        // Optional metadata to control button behavior\n        public string? NextStepHint { get; set; } // Can guide user or be used for logging\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ConditionNodeConfig.cs",
      "sha256": "836736c40f25f700d3a84836ee147930568713f5f623bcdc1569b42ff5b4432e",
      "language": "csharp",
      "size": 306,
      "content": "using System.Collections.Generic;\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ConditionNodeConfig\n    {\n    \n        public string InputKey { get; set; } = \"buttonText\";\n\n        public Dictionary<string, string> PathMap { get; set; } = new();\n       \n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/DecisionNodeConfig.cs",
      "sha256": "5575668b5865a5bb2847165208e60278c44386e8f710abb968606e22bb52fe70",
      "language": "csharp",
      "size": 418,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class DecisionNodeConfig\n    {\n        public string ConditionType { get; set; } = \"keyword\"; // or \"tag\", \"time\", \"plan\", etc.\n        public string Parameter { get; set; } = string.Empty;   // e.g. \"yes\", \"vip\", \"evening\"\n        public string SourceChannel { get; set; } = \"whatsapp\"; // Optional for multi-channel control\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/FormInputNodeConfig.cs",
      "sha256": "34b1ef9a54bc19dbb2163a80371edaf8d5bf75420e9924e90e82762fa4831216",
      "language": "csharp",
      "size": 596,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class FormInputNodeConfig\n    {\n        public string QuestionText { get; set; } = \"Please enter your response:\";\n\n        public string FieldKey { get; set; } = \"customer_name\";\n        // Used for storing user response under a label\n\n        public string? ValidationRegex { get; set; }\n        // Optional, e.g., @\"^[0-9]{10}$\" for phone numbers\n\n        public string? PlaceholderHint { get; set; }\n        // e.g., \"Full Name\", \"10-digit Phone\"\n\n        public bool IsRequired { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/FormNodeConfig.cs",
      "sha256": "f839475742eb0fc23ab0c6e58e1f23a0583e4b649301ac588feb0808dd1c243d",
      "language": "csharp",
      "size": 818,
      "content": "using System.Collections.Generic;\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class FormNodeConfig\n    {\n        public string Title { get; set; } = \"Please fill out this form\";\n\n        public List<FormFieldConfig> Fields { get; set; } = new();\n\n        public bool SaveToContact { get; set; } = true; // Whether to update contact info\n\n        public string? SubmitMessage { get; set; } = \"Thanks for submitting!\";\n    }\n\n    public class FormFieldConfig\n    {\n        public string Key { get; set; } = string.Empty;      // contactName, email, phone\n        public string Label { get; set; } = string.Empty;    // \"Your Name\"\n        public string Type { get; set; } = \"text\";           // text, number, email, etc.\n        public bool Required { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ForwardToAgentNodeConfig.cs",
      "sha256": "486eab52256f3ee2bfea5f06ada3bf8fade4f055f1012e4a1291ac0e61c9f35c",
      "language": "csharp",
      "size": 268,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ForwardToAgentNodeConfig\n    {\n        public string? NoteToAgent { get; set; } // Optional instruction for agent\n        public bool MarkAsUrgent { get; set; } = false;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/NodeIconMap.cs",
      "sha256": "e56ce9b9bdedf03682aaa6c56815fb85dd510ecd2ec1e4c82f53c0fa5c8f9401",
      "language": "csharp",
      "size": 591,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class NodeIconMap\n    {\n        public static readonly Dictionary<string, string> IconMap = new()\n        {\n            { NodeTypeEnum.Message, \"üó®Ô∏è\" },\n            { NodeTypeEnum.Template, \"üìÑ\" },\n            { NodeTypeEnum.Tag, \"üè∑Ô∏è\" },\n            { NodeTypeEnum.Wait, \"‚è±Ô∏è\" },\n            { NodeTypeEnum.ButtonChoice, \"üîò\" },\n            { NodeTypeEnum.Branch, \"üåø\" },\n            { NodeTypeEnum.AgentHandoff, \"üë®‚Äçüíº\" },\n            { NodeTypeEnum.End, \"‚õî\" }\n        };\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/NodeTypeEnum.cs",
      "sha256": "d21739b3b7651f2a026a4e412de76d45fe215ae50907b0c7ee025bee0c1ed189",
      "language": "csharp",
      "size": 572,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class NodeTypeEnum\n    {\n        public const string Message = \"message\";\n        public const string Template = \"template\";\n        public const string Tag = \"tag\";\n        public const string Wait = \"wait\";\n        public const string ButtonChoice = \"button_choice\";\n        public const string Branch = \"branch\";\n        public const string End = \"end\"; // Optional: Used for flow exit\n        public const string AgentHandoff = \"agent_handoff\"; // Optional: Transfer to human\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/RenameFlowDto.cs",
      "sha256": "c2ad4577f121df77190a9463e0eb6528c20054bd0901e7bc9a355aedfb53031c",
      "language": "csharp",
      "size": 146,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class RenameFlowDto\n    {\n        public string NewName { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/SaveFlowDto.cs",
      "sha256": "b4b9d49533bad3114236c255a28ecc08bc82a01f1141b981146f320c76cc39f4",
      "language": "csharp",
      "size": 2315,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs\n{\n    public class SaveFlowDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public string Name { get; set; }\n        public string? TriggerKeyword { get; set; }\n        public List<NodeDto> Nodes { get; set; } = new();\n        public List<EdgeDto> Edges { get; set; } = new();\n        public DateTime CreatedAt { get; set; }\n\n        public string? IndustryTag { get; set; }     // e.g. \"restaurant\", \"clinic\", etc.\n        public string? UseCase { get; set; }         // e.g. \"Order Flow\", \"Appointment Flow\"\n        public bool IsDefaultTemplate { get; set; } = false; // Flag for prebuilt templates\n\n    }\n\n    public class NodeDto\n    {\n        public string Id { get; set; } = string.Empty;\n        public string Type { get; set; } = string.Empty;\n        public AutoPositionDto Position { get; set; } = new();\n        public NodeDataDto Data { get; set; } = new();\n    }\n\n    public class AutoPositionDto\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n    }\n\n    public class NodeDataDto\n    {\n        public string Label { get; set; } = string.Empty;\n        public object Config { get; set; } = new { };\n    }\n\n    public class EdgeDto\n    {\n        public string Id { get; set; } = string.Empty;\n        public string Source { get; set; } = string.Empty;\n        public string Target { get; set; } = string.Empty;\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n        public string SourceHandle { get; set; } = string.Empty;\n        public string TargetHandle { get; set; } = string.Empty;\n    }\n}\n\n\n//using System;\n\n//namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs\n//{\n//    public class SaveFlowDto\n//    {\n//        public Guid Id { get; set; }\n//        public Guid BusinessId { get; set; }\n//        public string Name { get; set; } = string.Empty;\n//        public List<Dictionary<string, object>> Nodes { get; set; }\n\n//        public List<Dictionary<string, object>> Edges { get; set; }\n//        public DateTime CreatedAt { get; set; }\n//        public string? TriggerKeyword { get; set; }\n\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/TemplateDto.cs",
      "sha256": "42ae32842447bb89f8178a8bae3c490d1fe646b526c27cbe72571e23536f7116",
      "language": "csharp",
      "size": 240,
      "content": "namespace xbytechat.api.Features.TemplateMessages.DTOs\n{\n    public class TemplateDto\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public int Placeholders { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/AutoReplyEdgeDto.cs",
      "sha256": "5cbac1daff177794f7ae69aabf6b323f279f0b7132dc060e462a91226849f868",
      "language": "csharp",
      "size": 264,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class AutoReplyEdgeDto\n    {\n        public string Id { get; set; }\n        public string SourceNodeId { get; set; }\n        public string TargetNodeId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/MessageConfig.cs",
      "sha256": "6e7673134b9b3fabb432529dd4b510007ff1d934f016b3a2d831a4503d01c2c7",
      "language": "csharp",
      "size": 201,
      "content": "// MessageConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/RuntimeConfigs.cs",
      "sha256": "280793d810ae7ce0f016f2671b3627cd52a4029b6ea574d0fee20e0c0e11e5ae",
      "language": "csharp",
      "size": 125,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class RuntimeConfigs\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/TagNodeConfig.cs",
      "sha256": "d9fade9fca5845b7cb33279a01288a4dd94a90aaaed58d384a778209656b5ead",
      "language": "csharp",
      "size": 197,
      "content": "// TagConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/TemplateConfig.cs",
      "sha256": "5c7ea8f78b131705f6bccf1ced0e21a754dadf67bbd6420696995f565c07767a",
      "language": "csharp",
      "size": 682,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class TemplateConfig\n    {\n        public string TemplateName { get; set; } = string.Empty;\n        public List<string> Placeholders { get; set; } = new();\n        public string? Language { get; set; } = \"en_US\";\n        public string? ImageUrl { get; set; }\n        public List<TemplateButtonDto>? MultiButtons { get; set; } = new();\n    }\n\n    public class TemplateButtonDto\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public string ButtonType { get; set; } = \"url\"; // or \"quick_reply\"\n        public string TargetUrl { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/WaitConfig.cs",
      "sha256": "afe336952d0d4959422bbbc499884b286291888fcbd64dd068f26013160261c6",
      "language": "csharp",
      "size": 179,
      "content": "// WaitConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/Enum/NodeTypes.cs",
      "sha256": "94b210bd5bbbbce823c3a1beb8172eddf708305bfbb8b897d1e3c7ef10097b36",
      "language": "csharp",
      "size": 538,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.Enum\n{\n    public class NodeTypes\n    {\n        public const string Start = \"start\";\n        public const string Message = \"message\";\n        public const string Template = \"template\";\n        public const string Wait = \"wait\";\n        public const string Tag = \"tag\";\n        public const string Agent = \"agent\";\n        public const string Condition = \"condition\"; // Coming soon\n        public const string Form = \"form\";           // For ‚ÄúAsk Name‚Äù, ‚ÄúAsk Email‚Äù\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlow.cs",
      "sha256": "2825905f983da1290a44badeda57c8ff26c8920d7fa13e7ebd85dd0da2e0aaca",
      "language": "csharp",
      "size": 1021,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Models\n{\n    public class AutoReplyFlow\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        public string Name { get; set; } = string.Empty;\n\n        [Required]\n        public string NodesJson { get; set; } = string.Empty;\n\n        [Required]\n        public string EdgesJson { get; set; } = string.Empty;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? TriggerKeyword { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public string? IndustryTag { get; set; }    // e.g., \"restaurant\", \"clinic\", \"education\"\n        public string? UseCase { get; set; }        // e.g., \"Order Flow\", \"Booking Flow\"\n        public bool IsDefaultTemplate { get; set; } = false; // Flag to indicate system-provided template\n        public string? Keyword { get; set; }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlowEdge.cs",
      "sha256": "7996bdb8fa1917943e90dad9ad4225984a34b6342eb153028849b30ca63abd7f",
      "language": "csharp",
      "size": 763,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyFlowEdge\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow Flow { get; set; }\n\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n    \n        public string? SourceHandle { get; set; }\n        public string? TargetHandle { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlowNode.cs",
      "sha256": "88a50d45fe3b72f6c3bc0593104b7ee549180c842628cb3d9048c5227a025871",
      "language": "csharp",
      "size": 1013,
      "content": "using System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyFlowNode\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow Flow { get; set; }\n\n        // üîÑ Use a constrained string or enum (recommended for future)\n        [Required]\n        public string NodeType { get; set; } = string.Empty;\n\n        public string Label { get; set; } = string.Empty;\n\n        public string? NodeName { get; set; } // üÜï Optional internal label for debugging\n\n        [Required]\n        public string ConfigJson { get; set; } = string.Empty;\n\n        public Position Position { get; set; } = new();\n\n        public int Order { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyLog.cs",
      "sha256": "d2949264f0ac5b81395d2dee6578df20759d95d300da30d5f0f9003e0ed1c5eb",
      "language": "csharp",
      "size": 915,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    [Table(\"AutoReplyLogs\")]\n    public class AutoReplyLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string TriggerKeyword { get; set; } = string.Empty; // e.g., \"hi\", \"price\"\n        public string TriggerType { get; set; } = string.Empty;     // \"flow\" or \"rule\"\n\n        public string ReplyContent { get; set; } = string.Empty;    // Plaintext summary of what was sent\n        public string? FlowName { get; set; }                       // Nullable if rule-based\n\n        public Guid? MessageLogId { get; set; }                     // Optional link to MessageLog\n        public DateTime TriggeredAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyRule.cs",
      "sha256": "c3049863f7add2dfd09dd962dbdbc904585fa5db4e12ac189193077bfee08a78",
      "language": "csharp",
      "size": 1137,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyRule\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string TriggerKeyword { get; set; } = string.Empty;\n\n        public string ReplyMessage { get; set; } = string.Empty;\n\n        public string? MediaUrl { get; set; }\n\n        public int Priority { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public string? FlowName { get; set; }\n\n        // ‚úÖ NEW: Link to the flow\n        public Guid? FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow? Flow { get; set; }\n\n        public string? IndustryTag { get; set; } // e.g., \"restaurant\", \"clinic\", \"real_estate\"\n        public string? SourceChannel { get; set; } // e.g., \"whatsapp\", \"instagram\"\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowExecutionContext.cs",
      "sha256": "0d3e6415c151099db94a6f0f6dc8f695fd31492808dc09079919950efedf0776",
      "language": "csharp",
      "size": 494,
      "content": "using xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class FlowExecutionContext\n    {\n        public AutoReplyFlow Flow { get; set; } = null!;\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactPhone { get; set; } = null!;\n        public string SourceChannel { get; set; } = \"whatsapp\";\n        public string IndustryTag { get; set; } = \"\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowNode.cs",
      "sha256": "8991ad6277d58a2785f6a93fd8b8ca815af4ce80351d38f30aaf47890909471f",
      "language": "csharp",
      "size": 318,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class FlowNode\n    {\n        public string Id { get; set; }\n        public string Type { get; set; }\n        public Position Position { get; set; }\n        public Dictionary<string, object> Data { get; set; }  // This should capture config\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowRunResult.cs",
      "sha256": "67982580319a635214c13b2ec05cc279d9afc21fdeb1224248a8060036e27f5c",
      "language": "csharp",
      "size": 463,
      "content": "// File: Features/AutoReplyBuilder/Models/FlowRunResult.cs\n\nusing System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    /// <summary>\n    /// Encapsulates the result of running a visual flow, including agent handoff status.\n    /// </summary>\n    public class FlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n\n        public Guid? HandoffNodeId { get; set; }\n\n        public string? ContextJson { get; set; }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/Position.cs",
      "sha256": "0c352c43f4dfcebdc462622ca0acdcd8c1eaafa07a91a70804793d8c76724201",
      "language": "csharp",
      "size": 176,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class Position\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyFlowRepository.cs",
      "sha256": "d919b1d695c3c29ccc653b806d4884197b3d52fb9eb5f86c0f32f893eb198671",
      "language": "csharp",
      "size": 4350,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\npublic class AutoReplyFlowRepository : IAutoReplyFlowRepository\n{\n    private readonly AppDbContext _context;\n    private readonly ILogger<AutoReplyFlowRepository> _logger;\n\n    public AutoReplyFlowRepository(AppDbContext context, ILogger<AutoReplyFlowRepository> logger)\n    {\n        _context = context;\n        _logger = logger;\n    }\n\n    public async Task<AutoReplyFlow> SaveAsync(AutoReplyFlow flow)\n    {\n        _context.AutoReplyFlows.Add(flow);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"‚ùå Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return flow;\n    }\n\n    public async Task SaveNodesAndEdgesAsync(IEnumerable<AutoReplyFlowNode> nodes, IEnumerable<AutoReplyFlowEdge> edges)\n    {\n        _context.AutoReplyFlowNodes.AddRange(nodes);\n        _context.AutoReplyFlowEdges.AddRange(edges);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"‚ùå Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n    }\n\n    public async Task<List<AutoReplyFlow>> GetAllByBusinessIdAsync(Guid businessId)\n    {\n        return await _context.AutoReplyFlows\n            .Where(f => f.BusinessId == businessId)\n            .OrderByDescending(f => f.CreatedAt)\n            .ToListAsync();\n    }\n\n    public async Task<AutoReplyFlow?> GetByIdAsync(Guid flowId, Guid businessId)\n    {\n        return await _context.AutoReplyFlows\n            .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n    }\n\n    public async Task<int> GetFlowCountAsync(Guid businessId)\n    {\n        return await _context.AutoReplyFlows.CountAsync(f => f.BusinessId == businessId);\n    }\n\n    public async Task<bool> RenameFlowAsync(Guid id, string newName)\n    {\n        var flow = await _context.AutoReplyFlows.FindAsync(id);\n        if (flow == null) return false;\n\n        flow.Name = newName;\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"‚ùå Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return true;\n    }\n\n    public async Task<bool> DeleteFlowAsync(Guid id, Guid businessId)\n    {\n        var flow = await _context.AutoReplyFlows\n            .FirstOrDefaultAsync(f => f.Id == id && f.BusinessId == businessId);\n\n        if (flow == null) return false;\n\n        _context.AutoReplyFlows.Remove(flow);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"‚ùå Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return true;\n    }\n    public async Task<List<AutoReplyFlowNode>> GetNodesByFlowIdAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowNodes\n            .Where(n => n.FlowId == flowId)\n            .ToListAsync();\n    }\n\n    public async Task<List<AutoReplyFlowEdge>> GetEdgesByFlowIdAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowEdges\n            .Where(e => e.FlowId == flowId)\n            .ToListAsync();\n    }\n    public async Task<AutoReplyFlow?> FindFlowByKeywordAsync(Guid businessId, string keyword)\n    {\n        return await _context.AutoReplyFlows\n            .Where(f => f.BusinessId == businessId && f.IsActive && f.TriggerKeyword == keyword)\n            .OrderByDescending(f => f.CreatedAt)\n            .FirstOrDefaultAsync();\n    }\n    public async Task<List<AutoReplyFlowNode>> GetStructuredNodesAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowNodes\n            .Where(n => n.FlowId == flowId)\n            .ToListAsync();\n    }\n\n    public async Task<List<AutoReplyFlowEdge>> GetStructuredEdgesAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowEdges\n            .Where(e => e.FlowId == flowId)\n            .ToListAsync();\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyLogRepository.cs",
      "sha256": "4a8777aecfb95fef141063dfa3475992a3848fdd582209819e66ab552d045f71",
      "language": "csharp",
      "size": 1569,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Models;\nusing xbytechat.api.Shared;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class AutoReplyLogRepository : IAutoReplyLogRepository\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<AutoReplyLogRepository> _logger;\n\n        public AutoReplyLogRepository(AppDbContext context, ILogger<AutoReplyLogRepository> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task SaveAsync(AutoReplyLogDto dto)\n        {\n            try\n            {\n                var log = new AutoReplyLog\n                {\n                    Id = dto.Id,\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    TriggerKeyword = dto.TriggerKeyword,\n                    TriggerType = dto.TriggerType,\n                    ReplyContent = dto.ReplyContent,\n                    TriggeredAt = dto.TriggeredAt,\n                    FlowName = dto.FlowName,\n                    MessageLogId = dto.MessageLogId\n                };\n\n                _context.AutoReplyLogs.Add(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to save AutoReplyLog\");\n                throw;\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyRepository.cs",
      "sha256": "6339294423a06a5ebeacfa42db916a0e6fcac770f4082cb3db53569c2dd80483",
      "language": "csharp",
      "size": 4077,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class AutoReplyRepository : IAutoReplyRepository\n    {\n        private readonly AppDbContext _dbContext;\n\n        public AutoReplyRepository(AppDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        public async Task<AutoReplyRule> AddAsync(AutoReplyRule rule)\n        {\n            _dbContext.AutoReplyRules.Add(rule);\n            await _dbContext.SaveChangesAsync();\n            return rule;\n        }\n\n        public async Task<IEnumerable<AutoReplyRule>> GetAllByBusinessIdAsync(Guid businessId)\n        {\n            return await _dbContext.AutoReplyRules\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.Priority)\n                .ToListAsync();\n        }\n\n        public async Task<AutoReplyRule?> GetByIdAsync(Guid ruleId, Guid businessId)\n        {\n            return await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.Id == ruleId && r.BusinessId == businessId);\n        }\n\n        public async Task<bool> UpdateAsync(AutoReplyRule rule)\n        {\n            _dbContext.AutoReplyRules.Update(rule);\n            return await _dbContext.SaveChangesAsync() > 0;\n        }\n\n        public async Task<bool> DeleteAsync(Guid ruleId, Guid businessId)\n        {\n            var rule = await GetByIdAsync(ruleId, businessId);\n            if (rule == null) return false;\n\n            _dbContext.AutoReplyRules.Remove(rule);\n            return await _dbContext.SaveChangesAsync() > 0;\n        }\n\n        public async Task<AutoReplyRule?> MatchByKeywordAsync(Guid businessId, string incomingMessage)\n        {\n            return await _dbContext.AutoReplyRules\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.Priority)\n                .FirstOrDefaultAsync(r => incomingMessage.Contains(r.TriggerKeyword));\n        }\n\n        public async Task<bool> LinkFlowToRuleAsync(Guid businessId, string keyword, Guid flowId, string? flowName)\n        {\n            var rule = await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.TriggerKeyword.ToLower() == keyword.ToLower());\n\n            if (rule == null) return false;\n\n            rule.FlowId = flowId;\n            rule.FlowName = flowName ?? \"\";\n            rule.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n        public async Task<AutoReplyRule> UpsertRuleLinkedToFlowAsync(Guid businessId, string keyword, Guid flowId, string? flowName)\n        {\n            // Ensure keyword is normalized\n            var normalizedKeyword = keyword.ToLower().Trim();\n\n            var rule = await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.TriggerKeyword.ToLower() == normalizedKeyword);\n\n            if (rule != null)\n            {\n                // Update existing rule\n                rule.FlowId = flowId;\n                rule.FlowName = flowName ?? \"\";\n                rule.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                // Create new rule\n                rule = new AutoReplyRule\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    TriggerKeyword = normalizedKeyword,\n                    FlowId = flowId,\n                    FlowName = flowName ?? \"\",\n                    CreatedAt = DateTime.UtcNow,\n                    IsActive = true,\n                    Priority = 1,\n                    ReplyMessage = \"\" // Fallback (optional)\n                };\n\n                _dbContext.AutoReplyRules.Add(rule);\n            }\n\n            await _dbContext.SaveChangesAsync();\n            return rule;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/FlowRepository.cs",
      "sha256": "215b4fc5005e126adf33375390d0ac254a146dbdae11aa8c98eb52aa9054551b",
      "language": "csharp",
      "size": 111,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class FlowRepository\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyFlowRepository.cs",
      "sha256": "f78ae431c2892c49cc0844c2f19e5df301598c964326722b3ca52aec7e9ba61d",
      "language": "csharp",
      "size": 1161,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories\n{\n    public interface IAutoReplyFlowRepository\n    {\n        Task<AutoReplyFlow> SaveAsync(AutoReplyFlow flow);\n        Task<AutoReplyFlow?> GetByIdAsync(Guid flowId, Guid businessId);\n        Task<List<AutoReplyFlow>> GetAllByBusinessIdAsync(Guid businessId);\n        Task<int> GetFlowCountAsync(Guid businessId);\n        Task<bool> RenameFlowAsync(Guid id, string newName);\n        Task<bool> DeleteFlowAsync(Guid id, Guid businessId);\n        Task SaveNodesAndEdgesAsync(IEnumerable<AutoReplyFlowNode> nodes, IEnumerable<AutoReplyFlowEdge> edges);\n        Task<List<AutoReplyFlowNode>> GetNodesByFlowIdAsync(Guid flowId);\n        Task<List<AutoReplyFlowEdge>> GetEdgesByFlowIdAsync(Guid flowId);\n        Task<AutoReplyFlow?> FindFlowByKeywordAsync(Guid businessId, string keyword);\n        Task<List<AutoReplyFlowNode>> GetStructuredNodesAsync(Guid flowId);\n        Task<List<AutoReplyFlowEdge>> GetStructuredEdgesAsync(Guid flowId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyLogRepository.cs",
      "sha256": "49f1ecf8c4ab7bb6a0122d7d98e22eb4cb6e2b4b522c99c3963ca64d57889264",
      "language": "csharp",
      "size": 255,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public interface IAutoReplyLogRepository\n    {\n        Task SaveAsync(AutoReplyLogDto logDto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyRepository.cs",
      "sha256": "136fdda2ad552eadc942d50774dc0ba7cf0796c507e703b6aa20f4fd64fd40d5",
      "language": "csharp",
      "size": 939,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public interface IAutoReplyRepository\n    {\n        Task<AutoReplyRule> AddAsync(AutoReplyRule rule);\n        Task<IEnumerable<AutoReplyRule>> GetAllByBusinessIdAsync(Guid businessId);\n        Task<AutoReplyRule?> GetByIdAsync(Guid ruleId, Guid businessId);\n        Task<bool> UpdateAsync(AutoReplyRule rule);\n        Task<bool> DeleteAsync(Guid ruleId, Guid businessId);\n\n        // Runtime keyword match logic\n        Task<AutoReplyRule?> MatchByKeywordAsync(Guid businessId, string incomingMessage);\n        Task<bool> LinkFlowToRuleAsync(Guid businessId, string keyword, Guid flowId, string? flowName);\n        Task<AutoReplyRule> UpsertRuleLinkedToFlowAsync(Guid businessId, string keyword, Guid flowId, string? flowName);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IFlowRepository.cs",
      "sha256": "dc4b9a1195add53536172098cfd18c52a19a3a5c767ba81f25e2bceb2a483e14",
      "language": "csharp",
      "size": 112,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class IFlowRepository\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyFlowService.cs",
      "sha256": "60a2f344bc7993fa13dd56c9514c142e4a3bb6100c4e6f48056178d09d8d71b4",
      "language": "csharp",
      "size": 24746,
      "content": "using Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System.Numerics;\nusing System.Text.Json;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Services\n{\n    public class AutoReplyFlowService : IAutoReplyFlowService\n    {\n        private readonly IAutoReplyFlowRepository _flowRepository;\n        private readonly ILogger<AutoReplyFlowService> _logger;\n        private readonly IMessageEngineService _messageService;\n        private readonly ITagService _tagService;\n        private readonly IAutoReplyRepository _autoReplyRepository;\n        public AutoReplyFlowService(IAutoReplyFlowRepository flowrepository, ILogger<AutoReplyFlowService> logger,\n            IMessageEngineService messageService, ITagService tagService, IAutoReplyRepository autoReplyRepository)\n        {\n            _flowRepository = flowrepository;\n            _logger = logger;\n            _messageService = messageService;\n            _tagService = tagService;\n            _autoReplyRepository = autoReplyRepository;\n        }\n\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"üîÑ Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto.BusinessId, dto.TriggerKeyword);\n\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name,\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var saved = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"‚úÖ Flow saved: {FlowId}\", saved.Id);\n\n        //    // ‚úÖ Save parsed nodes\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n        //    var nodes = dto.Nodes as List<Dictionary<string, object>>;\n\n        //    if (nodes != null)\n        //    {\n        //        foreach (var nodeDict in nodes)\n        //        {\n        //            if (!nodeDict.ContainsKey(\"type\") || !nodeDict.ContainsKey(\"data\") || !nodeDict.ContainsKey(\"position\"))\n        //            {\n        //                _logger.LogWarning(\"‚ö†Ô∏è Skipped malformed node during flow save: {Node}\", JsonConvert.SerializeObject(nodeDict));\n        //                continue;\n        //            }\n\n        //            var data = nodeDict[\"data\"] as Dictionary<string, object>;\n        //            var positionDict = nodeDict[\"position\"] as Dictionary<string, object>;\n\n        //            var position = new Position\n        //            {\n        //                X = Convert.ToDouble(positionDict?[\"x\"] ?? 0),\n        //                Y = Convert.ToDouble(positionDict?[\"y\"] ?? 0)\n        //            };\n\n        //            parsedNodes.Add(new AutoReplyFlowNode\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                FlowId = saved.Id,\n        //                NodeType = nodeDict[\"type\"]?.ToString() ?? \"\",\n        //                Label = data?[\"label\"]?.ToString() ?? \"\",\n        //                ConfigJson = JsonConvert.SerializeObject(data?[\"config\"] ?? new { }),\n        //                Position = position // ‚úÖ strongly typed\n        //            });\n        //        }\n        //    }\n\n        //    _logger.LogInformation(\"üß© Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ‚úÖ Save parsed edges\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n        //    var edges = dto.Edges as List<Dictionary<string, object>>;\n\n        //    if (edges != null)\n        //    {\n        //        foreach (var edgeDict in edges)\n        //        {\n        //            if (!edgeDict.ContainsKey(\"source\") || !edgeDict.ContainsKey(\"target\"))\n        //            {\n        //                _logger.LogWarning(\"‚ö†Ô∏è Skipped malformed edge during flow save: {Edge}\", JsonConvert.SerializeObject(edgeDict));\n        //                continue;\n        //            }\n\n        //            parsedEdges.Add(new AutoReplyFlowEdge\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                FlowId = saved.Id,\n        //                SourceNodeId = edgeDict[\"source\"]?.ToString() ?? \"\",\n        //                TargetNodeId = edgeDict[\"target\"]?.ToString() ?? \"\",\n        //                CreatedAt = DateTime.UtcNow\n        //            });\n        //        }\n        //    }\n\n        //    _logger.LogInformation(\"üîó Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n\n        //    _logger.LogInformation(\"‚úÖ Node + edge persistence complete for flow {FlowId}\", saved.Id);\n\n        //    return saved.Id;\n        //}\n\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"üîÑ Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto.BusinessId, dto.TriggerKeyword);\n\n        //    // ‚úÖ Step 1: Save main flow\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name?.Trim() ?? \"\",\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var saved = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"‚úÖ Flow saved: {FlowId}\", saved.Id);\n\n        //    // ‚úÖ Step 2: Build ID map and parse nodes\n        //    var nodeIdMap = new Dictionary<string, Guid>();\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n\n        //    foreach (var n in dto.Nodes)\n        //    {\n        //        if (string.IsNullOrWhiteSpace(n.Id))\n        //        {\n        //            _logger.LogWarning(\"‚ö†Ô∏è Skipped node with missing Id\");\n        //            continue;\n        //        }\n\n        //        var internalNodeId = Guid.NewGuid();\n        //        nodeIdMap[n.Id] = internalNodeId;\n\n        //        parsedNodes.Add(new AutoReplyFlowNode\n        //        {\n        //            Id = internalNodeId,\n        //            FlowId = saved.Id,\n        //            NodeType = n.Type,\n        //            Label = n.Data?.Label ?? \"\",\n        //            ConfigJson = JsonConvert.SerializeObject(n.Data?.Config ?? new { }),\n        //            Position = new Position\n        //            {\n        //                X = n.Position?.X ?? 0,\n        //                Y = n.Position?.Y ?? 0\n        //            },\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"üß© Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ‚úÖ Step 3: Map Source/TargetNodeId from external ‚Üí internal GUIDs\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n\n        //    foreach (var e in dto.Edges)\n        //    {\n        //        if (!nodeIdMap.TryGetValue(e.SourceNodeId ?? \"\", out var sourceId))\n        //        {\n        //            _logger.LogWarning(\"‚ö†Ô∏è Edge skipped: SourceNodeId '{Source}' not found\", e.SourceNodeId);\n        //            continue;\n        //        }\n\n        //        if (!nodeIdMap.TryGetValue(e.TargetNodeId ?? \"\", out var targetId))\n        //        {\n        //            _logger.LogWarning(\"‚ö†Ô∏è Edge skipped: TargetNodeId '{Target}' not found\", e.TargetNodeId);\n        //            continue;\n        //        }\n\n        //        parsedEdges.Add(new AutoReplyFlowEdge\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            FlowId = saved.Id,\n        //            SourceNodeId = sourceId.ToString(),\n        //            TargetNodeId = targetId.ToString(),\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"üîó Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    // ‚úÖ Final Save\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n        //    _logger.LogInformation(\"‚úÖ Node + edge persistence complete for flow {FlowId}\", saved.Id);\n\n        //    return saved.Id;\n        //}\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"üîÑ Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto?.BusinessId, dto?.TriggerKeyword);\n\n        //    if (dto == null) throw new ArgumentNullException(nameof(dto));\n        //    if (dto.BusinessId == Guid.Empty) throw new ArgumentException(\"BusinessId is required.\");\n        //    if (string.IsNullOrWhiteSpace(dto.TriggerKeyword)) throw new ArgumentException(\"TriggerKeyword is required.\");\n        //    if (dto.Nodes == null || !dto.Nodes.Any()) throw new ArgumentException(\"At least one node is required.\");\n\n        //    dto.Edges ??= new List<EdgeDto>();\n\n        //    // ‚úÖ Step 1: Save Flow\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name?.Trim() ?? \"\",\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var savedFlow = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"‚úÖ Flow saved: {FlowId}\", savedFlow.Id);\n\n        //    // ‚úÖ Step 2: Parse Nodes\n        //    var nodeIdMap = new Dictionary<string, Guid>();\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n\n        //    foreach (var n in dto.Nodes)\n        //    {\n        //        if (string.IsNullOrWhiteSpace(n.Id)) continue;\n\n        //        var internalNodeId = Guid.NewGuid();\n        //        nodeIdMap[n.Id] = internalNodeId;\n\n        //        string configJson = n.Data?.Config is JsonElement elem\n        //            ? elem.GetRawText()\n        //            : JsonConvert.SerializeObject(n.Data?.Config ?? new { });\n\n        //        parsedNodes.Add(new AutoReplyFlowNode\n        //        {\n        //            Id = internalNodeId,\n        //            FlowId = savedFlow.Id,\n        //            NodeType = n.Type,\n        //            Label = n.Data?.Label ?? \"\",\n        //            ConfigJson = configJson,\n        //            Position = new Position\n        //            {\n        //                X = n.Position?.X ?? 0,\n        //                Y = n.Position?.Y ?? 0\n        //            },\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"üß© Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ‚úÖ Step 3: Parse Edges\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n\n        //    foreach (var e in dto.Edges)\n        //    {\n        //        if (!nodeIdMap.TryGetValue(e.SourceNodeId ?? \"\", out var sourceId)) continue;\n        //        if (!nodeIdMap.TryGetValue(e.TargetNodeId ?? \"\", out var targetId)) continue;\n\n        //        parsedEdges.Add(new AutoReplyFlowEdge\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            FlowId = savedFlow.Id,\n        //            SourceNodeId = sourceId.ToString(),\n        //            TargetNodeId = targetId.ToString(),\n        //            SourceHandle = e.SourceHandle, \n        //            TargetHandle = e.TargetHandle, \n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"üîó Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    // ‚úÖ Step 4: Save Nodes + Edges\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n        //    _logger.LogInformation(\"‚úÖ Node + edge persistence complete for flow {FlowId}\", savedFlow.Id);\n\n        //    // ‚úÖ Step 5: Link to Rule via Repository\n        //    var keyword = dto.TriggerKeyword.Trim().ToLower();\n        //    var rule = await _autoReplyRepository.UpsertRuleLinkedToFlowAsync(dto.BusinessId, keyword, savedFlow.Id, dto.Name);\n\n        //    _logger.LogInformation(\"üîÅ Linked flow to auto-reply rule: {RuleId}\", rule.Id);\n\n        //    return savedFlow.Id;\n        //}\n        public async Task<Guid> SaveFlowAsync(SaveFlowDto dto, Guid businessId)\n        {\n            _logger.LogInformation(\"üîÑ Starting flow save for business {BusinessId} with keyword '{Keyword}'\", businessId, dto?.TriggerKeyword);\n\n            if (dto == null) throw new ArgumentNullException(nameof(dto));\n            if (string.IsNullOrWhiteSpace(dto.TriggerKeyword)) throw new ArgumentException(\"TriggerKeyword is required.\");\n            if (dto.Nodes == null || !dto.Nodes.Any()) throw new ArgumentException(\"At least one node is required.\");\n\n            dto.Edges ??= new List<EdgeDto>();\n\n            // ‚úÖ Step 1: Save Flow\n            var flow = new AutoReplyFlow\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId, // << Use parameter, not from dto!\n                Name = dto.Name?.Trim() ?? \"\",\n                NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n                EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n                TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            var savedFlow = await _flowRepository.SaveAsync(flow);\n            _logger.LogInformation(\"‚úÖ Flow saved: {FlowId}\", savedFlow.Id);\n\n            // ... rest of code unchanged ...\n\n            // ‚úÖ Step 5: Link to Rule via Repository\n            var keyword = dto.TriggerKeyword.Trim().ToLower();\n            var rule = await _autoReplyRepository.UpsertRuleLinkedToFlowAsync(\n                businessId, // << Use parameter, not from dto!\n                keyword, savedFlow.Id, dto.Name);\n\n            _logger.LogInformation(\"üîÅ Linked flow to auto-reply rule: {RuleId}\", rule.Id);\n\n            return savedFlow.Id;\n        }\n\n        public async Task<List<SaveFlowDto>> GetFlowsByBusinessIdAsync(Guid businessId)\n        {\n            _logger.LogInformation(\"üì• Fetching auto-reply flows for business {BusinessId}\", businessId);\n\n            var flows = await _flowRepository.GetAllByBusinessIdAsync(businessId);\n\n            var results = flows.Select(f => new SaveFlowDto\n            {\n                Id = f.Id,\n                BusinessId = f.BusinessId,\n                Name = f.Name,\n                Nodes = string.IsNullOrEmpty(f.NodesJson)\n                    ? new()\n                    : JsonConvert.DeserializeObject<List<NodeDto>>(f.NodesJson),\n\n                Edges = string.IsNullOrEmpty(f.EdgesJson)\n                    ? new()\n                    : JsonConvert.DeserializeObject<List<EdgeDto>>(f.EdgesJson),\n\n\n                CreatedAt = f.CreatedAt\n            }).ToList();\n\n            _logger.LogInformation(\"üì§ Returned {Count} auto-reply flows for business {BusinessId}\", results.Count, businessId);\n\n            return results;\n        }\n\n        public async Task<SaveFlowDto?> GetFlowByIdAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _flowRepository.GetByIdAsync(flowId, businessId);\n            if (flow == null)\n            {\n                _logger.LogWarning(\"‚ùå No flow found for FlowId {FlowId} and BusinessId {BusinessId}\", flowId, businessId);\n                return null;\n            }\n\n            var nodes = await _flowRepository.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepository.GetEdgesByFlowIdAsync(flowId);\n\n            var mappedNodes = nodes.Select(n => new Dictionary<string, object>\n            {\n                [\"id\"] = n.Id,\n                [\"type\"] = n.NodeType,\n                [\"position\"] = new Dictionary<string, object>\n                {\n                    [\"x\"] = n.Position?.X ?? 0,\n                    [\"y\"] = n.Position?.Y ?? 0\n                },\n                [\"data\"] = new Dictionary<string, object>\n                {\n                    [\"label\"] = n.Label,\n                    [\"config\"] = string.IsNullOrEmpty(n.ConfigJson)\n                        ? null\n                        : JsonConvert.DeserializeObject<object>(n.ConfigJson)\n                }\n            }).ToList();\n\n            var mappedEdges = edges.Select(e => new Dictionary<string, object>\n            {\n                [\"id\"] = e.Id,\n                [\"source\"] = e.SourceNodeId,\n                [\"target\"] = e.TargetNodeId\n            }).ToList();\n\n            _logger.LogInformation(\"üì§ Returning flow {FlowId} with {NodeCount} nodes and {EdgeCount} edges\", flow.Id, mappedNodes.Count, mappedEdges.Count);\n\n            return new SaveFlowDto\n            {\n                Id = flow.Id,\n                BusinessId = flow.BusinessId,\n                Name = flow.Name,\n                Nodes = JsonConvert.DeserializeObject<List<NodeDto>>(JsonConvert.SerializeObject(mappedNodes)),\n                Edges = JsonConvert.DeserializeObject<List<EdgeDto>>(JsonConvert.SerializeObject(mappedEdges)),\n                CreatedAt = flow.CreatedAt\n            };\n\n        }\n\n        public async Task<int> GetFlowCountForBusinessAsync(Guid businessId)\n        {\n            return await _flowRepository.GetFlowCountAsync(businessId);\n        }\n\n        public async Task<bool> RenameFlowAsync(Guid id, string newName)\n        {\n            return await _flowRepository.RenameFlowAsync(id, newName);\n        }\n        public async Task<bool> DeleteFlowAsync(Guid id, Guid businessId)\n        {\n            return await _flowRepository.DeleteFlowAsync(id, businessId);\n        }\n        public async Task ExecuteFlowAsync(Guid businessId, string triggerKeyword, string customerPhone)\n        {\n            var flow = await _flowRepository.FindFlowByKeywordAsync(businessId, triggerKeyword);\n            if (flow == null) return;\n\n            var nodes = await _flowRepository.GetNodesByFlowIdAsync(flow.Id);\n            var edges = await _flowRepository.GetEdgesByFlowIdAsync(flow.Id);\n\n            var nodeMap = nodes.ToDictionary(n => n.Id, n => n);\n            var edgeMap = edges.GroupBy(e => e.SourceNodeId)\n                               .ToDictionary(g => g.Key, g => g.ToList());\n\n            var current = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            while (current != null)\n            {\n                switch (current.NodeType)\n                {\n                    case \"message\":\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(current.ConfigJson);\n                        await _messageService.SendTextDirectAsync(new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = customerPhone,\n                            TextContent = msgCfg.Text\n                        });\n\n                        break;\n                    case \"template\":\n                        var tempCfg = JsonConvert.DeserializeObject<TemplateConfig>(current.ConfigJson);\n\n                        var dto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = customerPhone,\n                            TemplateName = tempCfg.TemplateName,\n                            TemplateParameters = tempCfg.Placeholders ?? new List<string>()\n                        };\n\n                        await _messageService.SendTemplateMessageSimpleAsync(businessId, dto);\n                        break;\n\n\n                    case \"wait\":\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(current.ConfigJson);\n                        await Task.Delay(TimeSpan.FromSeconds(waitCfg.Seconds));\n                        break;\n\n                    case \"tag\":\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(current.ConfigJson);\n                        await _tagService.AssignTagsAsync(businessId, customerPhone, tagCfg.Tags);\n                        break;\n                }\n\n                var nextEdge = edgeMap.ContainsKey(current.Id.ToString())\n                     ? edgeMap[current.Id.ToString()].FirstOrDefault()\n                        : null;\n\n                if (nextEdge == null) break;\n\n                current = nodeMap.ContainsKey(Guid.Parse(nextEdge.TargetNodeId))\n                    ? nodeMap[Guid.Parse(nextEdge.TargetNodeId)]\n                    : null;\n\n            }\n        }\n        public async Task TriggerAutoReplyAsync(Guid businessId, string incomingText, string phone)\n        {\n            // Step 1: Find flow matching keyword\n            var flow = await _flowRepository.FindFlowByKeywordAsync(businessId, incomingText.ToLower());\n            if (flow == null) return;\n\n            // Step 2: Load flow nodes + edges\n            var nodes = await _flowRepository.GetStructuredNodesAsync(flow.Id);\n            var edges = await _flowRepository.GetStructuredEdgesAsync(flow.Id);\n\n            // Step 3: Find start node\n            var startNode = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            if (startNode == null) return;\n\n            var visited = new HashSet<string>();\n            var currentNodeId = startNode.Id.ToString();\n\n            while (!string.IsNullOrEmpty(currentNodeId) && !visited.Contains(currentNodeId))\n            {\n                visited.Add(currentNodeId);\n\n                var currentNode = nodes.FirstOrDefault(n => n.Id.ToString() == currentNodeId);\n                if (currentNode == null) break;\n\n                // Step 4: Handle current node\n                switch (currentNode.NodeType)\n                {\n                    case \"message\":\n                        var config = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        await _messageService.SendTextDirectAsync(new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = phone,\n                            TextContent = config.Text\n                        });\n                        break;\n\n                    case \"template\":\n                        var tpl = JsonConvert.DeserializeObject<TemplateConfig>(currentNode.ConfigJson);\n\n                        var dto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = phone,\n                            TemplateName = tpl.TemplateName,\n                            TemplateParameters = tpl.Placeholders ?? new List<string>()\n                        };\n\n                        await _messageService.SendTemplateMessageSimpleAsync(businessId, dto);\n                        break;\n\n\n                    case \"wait\":\n                        var waitConfig = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        await Task.Delay(waitConfig.Seconds * 1000); // Can replace with async scheduling later\n                        break;\n\n                    case \"tag\":\n                        var tagConfig = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        await _tagService.AssignTagsAsync(businessId,phone, tagConfig.Tags);\n                        break;\n\n                }\n\n                // Step 5: Find next node\n                var nextEdge = edges.FirstOrDefault(e => e.SourceNodeId == currentNodeId);\n                currentNodeId = nextEdge?.TargetNodeId;\n            }\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyRuntimeService.cs",
      "sha256": "f9e35069e50bbf3a57f0c5134ae99c32f604d94885000c29aacb8ddab0d00d94",
      "language": "csharp",
      "size": 26209,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Services;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.CRM.Interfaces;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class AutoReplyRuntimeService : IAutoReplyRuntimeService\n    {\n        private readonly IAutoReplyRepository _autoReplyRepo;\n        private readonly IAutoReplyFlowRepository _flowRepo;\n        private readonly IMessageEngineService _messageEngine;\n        private readonly AppDbContext _context;\n        private readonly ILogger<AutoReplyRuntimeService> _logger;\n        private readonly IContactService _contactService;\n        private readonly ITagService _tagService;\n        private readonly ITemplateMessageSender _templateSender;\n        public AutoReplyRuntimeService(\n            IAutoReplyRepository autoReplyRepo,\n            IAutoReplyFlowRepository flowRepo,\n            IMessageEngineService messageEngine,\n            AppDbContext context,\n            ILogger<AutoReplyRuntimeService> logger, IContactService contactService, ITagService tagService, ITemplateMessageSender templateSender)\n        {\n            _autoReplyRepo = autoReplyRepo;\n            _flowRepo = flowRepo;\n            _messageEngine = messageEngine;\n            _context = context;\n            _logger = logger;\n            _contactService = contactService;\n            _tagService = tagService;\n            _templateSender = templateSender;\n        }\n\n        public async Task<bool> TryRunAutoReplyFlowAsync(Guid businessId, string keyword, Guid contactId, string phone)\n        {\n            _logger.LogInformation(\"üîç Auto-reply trigger: '{Keyword}' from {Phone}\", keyword, phone);\n\n            try\n            {\n                // 1Ô∏è‚É£ Try matching a flow by keyword\n                var flow = await _flowRepo.FindFlowByKeywordAsync(businessId, keyword);\n                if (flow != null)\n                {\n                    _logger.LogInformation(\"‚úÖ Flow matched: {FlowName}\", flow.Name);\n                    await RunFlowAsync(flow.Id, businessId, contactId, phone, keyword, flow.Name);\n                    return true;\n                }\n\n                // 2Ô∏è‚É£ Fallback: Try matching auto-reply rule\n                var rule = await _autoReplyRepo.MatchByKeywordAsync(businessId, keyword);\n                if (rule != null)\n                {\n                    _logger.LogInformation(\"üîÅ Fallback auto-reply triggered: {Rule}\", rule.TriggerKeyword);\n\n                    var messageDto = new TextMessageSendDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = phone,\n                        TextContent = rule.ReplyMessage\n                    };\n\n                    var result = await _messageEngine.SendTextDirectAsync(messageDto);\n\n                    await LogAutoReplyAsync(\n                        businessId,\n                        contactId,\n                        keyword,\n                        \"fallback\",\n                        rule.ReplyMessage,\n                        null,\n                        result?.LogId\n                    );\n\n                    return true;\n                }\n\n                _logger.LogWarning(\"‚ùå No flow or fallback rule matched for: {Keyword}\", keyword);\n                return false;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Error in TryRunAutoReplyFlowAsync\");\n                return false;\n            }\n        }\n\n        public async Task RunFlowAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string keyword, string flowName)\n        {\n            var nodes = await _flowRepo.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepo.GetEdgesByFlowIdAsync(flowId);\n\n            var nodeDict = nodes.ToDictionary(n => n.Id.ToString(), n => n);\n            var edgeLookup = edges.GroupBy(e => e.SourceNodeId)\n                                  .ToDictionary(g => g.Key, g => g.ToList());\n\n            var currentNodeId = nodes.FirstOrDefault(n => n.NodeType == \"start\")?.Id.ToString();\n            if (string.IsNullOrEmpty(currentNodeId)) return;\n\n            // ‚úÖ Ensure contact exists\n            var contact = await _contactService.FindOrCreateAsync(businessId, phone);\n\n            while (!string.IsNullOrEmpty(currentNodeId))\n            {\n                if (!nodeDict.TryGetValue(currentNodeId, out var node)) break;\n\n                _logger.LogInformation(\"‚öôÔ∏è Executing node {NodeId} [{NodeType}]\", node.Id, node.NodeType);\n\n                try\n                {\n                    switch (node.NodeType)\n                    {\n                        case \"start\":\n                            _logger.LogInformation(\"üö¶ Start node reached: {NodeId}\", node.Id);\n\n                            // üõë If Start node contains buttons, STOP and wait for user interaction\n                            try\n                            {\n                                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(node.ConfigJson ?? \"{}\");\n                                if (config != null && config.TryGetValue(\"multiButtons\", out var rawButtons))\n                                {\n                                    var buttons = JsonConvert.DeserializeObject<List<object>>(rawButtons.ToString() ?? \"[]\");\n                                    if (buttons.Count > 0)\n                                    {\n                                        _logger.LogInformation(\"üõë Start node has buttons ‚Äì waiting for user interaction. Halting flow.\");\n                                        return;\n                                    }\n                                }\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"‚ùå Failed to parse start node config for button detection.\");\n                            }\n                            break;\n\n                        case \"message\":\n                            await ExecuteMessageNodeAsync(node, businessId, contactId, phone, keyword, flowName);\n                            break;\n\n                        case \"template\":\n                            await ExecuteTemplateNodeAsync(node, businessId, contactId, phone, keyword, flowName);\n\n                          \n                                try\n                                {\n                                    var cfg = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n                                    if (cfg?.MultiButtons?.Any(b => !string.IsNullOrWhiteSpace(b.ButtonText)) == true)\n                                    {\n                                        _logger.LogInformation(\"üõë Template node has buttons ‚Äì halting flow for user click.\");\n                                        return;\n                                    }\n                                }\n\n                            \n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"‚ùå Failed to parse template config for button detection.\");\n                            }\n                            break;\n\n                        case \"tag\":\n                            await ExecuteTagNodeAsync(businessId, contactId, node);\n                            break;\n\n                        case \"wait\":\n                            try\n                            {\n                                var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(node.ConfigJson ?? \"{}\");\n                                var delayMs = (waitCfg?.Seconds ?? 1) * 1000;\n                                _logger.LogInformation(\"‚è≥ Wait node delay: {Seconds}s\", waitCfg?.Seconds ?? 1);\n                                await Task.Delay(delayMs);\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"‚ùå Failed to parse wait config for node {NodeId}\", node.Id);\n                            }\n                            break;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"‚ùå Error while executing node {NodeId} of type {NodeType}\", node.Id, node.NodeType);\n                }\n\n                currentNodeId = edgeLookup.TryGetValue(currentNodeId, out var next)\n                    ? next.FirstOrDefault()?.TargetNodeId\n                    : null;\n            }\n        }\n\n        private bool TryNodeHasButtons(string? configJson)\n        {\n            if (string.IsNullOrWhiteSpace(configJson)) return false;\n\n            try\n            {\n                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(configJson);\n                if (config != null && config.TryGetValue(\"multiButtons\", out var rawButtons))\n                {\n                    var buttons = JsonConvert.DeserializeObject<List<object>>(rawButtons.ToString() ?? \"[]\");\n                    return buttons.Count > 0;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ö†Ô∏è Failed to parse buttons from template config\");\n            }\n\n            return false;\n        }\n\n        private async Task LogAutoReplyAsync(Guid businessId, Guid contactId, string keyword, string type, string replyText, string? flowName, Guid? messageLogId)\n        {\n            var log = new AutoReplyLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contactId,\n                TriggerKeyword = keyword,\n                TriggerType = type,\n                ReplyContent = replyText,\n                FlowName = flowName,\n                MessageLogId = messageLogId,\n                TriggeredAt = DateTime.UtcNow\n            };\n\n            _context.AutoReplyLogs.Add(log);\n            await _context.SaveChangesAsync();\n        }\n\n\n        //    private async Task ExecuteTemplateNodeAsync(\n        //    AutoReplyFlowNode node,\n        //    Guid businessId,\n        //    Guid contactId,\n        //    string phone,\n        //    string keyword,\n        //    string? flowName)\n        //    {\n        //        _logger.LogInformation(\"üß† Raw config JSON for template node: {Json}\", node.ConfigJson);\n\n        //        TemplateConfig? tmpl;\n        //        try\n        //        {\n        //            tmpl = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n        //        }\n        //        catch (Exception ex)\n        //        {\n        //            _logger.LogError(ex, \"‚ùå Failed to deserialize TemplateConfig for node {NodeId}\", node.Id);\n        //            return;\n        //        }\n\n        //        if (tmpl == null || string.IsNullOrWhiteSpace(tmpl.TemplateName))\n        //        {\n        //            _logger.LogWarning(\"‚ùå Template node config is missing or invalid.\");\n        //            return;\n        //        }\n\n        //        var contact = await _context.Contacts\n        //            .FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n\n        //        if (contact == null)\n        //        {\n        //            _logger.LogWarning(\"‚ùå Contact not found for AutoReply.\");\n        //            return;\n        //        }\n\n        //        //var buttons = tmpl.MultiButtons?.Select(b => new CampaignButton\n        //        //{\n        //        //    Title = b.ButtonText,\n        //        //    Type = b.ButtonType,\n        //        //    Value = b.TargetUrl\n        //        //}).ToList();\n        //        var buttons = tmpl.MultiButtons?\n        //.Where(b => !string.IsNullOrWhiteSpace(b.ButtonText)) // ‚úÖ Avoid empty\n        //.Select((b, idx) => new\n        //{\n        //    type = \"button\",\n        //    sub_type = b.ButtonType.ToLowerInvariant(), // must be 'quick_reply' or 'url'\n        //    index = idx.ToString(),\n        //    parameters = new List<object>\n        //    {\n        //        new {\n        //            type = \"text\",\n        //            text = b.ButtonText\n        //        }\n        //    }\n        //}).ToList();\n\n        //        var response = await _templateSender.SendTemplateMessageToContactAsync(\n        //            businessId: businessId,\n        //            contact: contact,\n        //            templateName: tmpl.TemplateName,\n        //            templateParams: tmpl.Placeholders ?? new List<string>(),\n        //            imageUrl: tmpl.ImageUrl,\n        //            buttons: buttons,\n        //            source: \"auto_reply\",\n        //            refMessageId: null\n        //        );\n\n        //        await LogAutoReplyAsync(\n        //            businessId,\n        //            contactId,\n        //            keyword,\n        //            \"flow\",\n        //            $\"Template: {tmpl.TemplateName}\",\n        //            flowName,\n        //            response.LogId\n        //        );\n        //    }\n\n\n        private async Task ExecuteTemplateNodeAsync(\n    AutoReplyFlowNode node,\n    Guid businessId,\n    Guid contactId,\n    string phone,\n    string keyword,\n    string? flowName)\n        {\n            _logger.LogInformation(\"üß† Raw config JSON for template node: {Json}\", node.ConfigJson);\n\n            TemplateConfig? tmpl;\n            try\n            {\n                tmpl = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to deserialize TemplateConfig for node {NodeId}\", node.Id);\n                return;\n            }\n\n            if (tmpl == null || string.IsNullOrWhiteSpace(tmpl.TemplateName))\n            {\n                _logger.LogWarning(\"‚ùå Template node config is missing or invalid.\");\n                return;\n            }\n\n            var contact = await _context.Contacts\n                .FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n\n            if (contact == null)\n            {\n                _logger.LogWarning(\"‚ùå Contact not found for AutoReply.\");\n                return;\n            }\n\n            var buttons = tmpl.MultiButtons?\n                .Where(b => !string.IsNullOrWhiteSpace(b.ButtonText))\n                .Select(b => new CampaignButton\n                {\n                    Title = b.ButtonText,\n                    Type = b.ButtonType,\n                    Value = b.TargetUrl\n                })\n                .ToList();\n\n            var response = await _templateSender.SendTemplateMessageToContactAsync(\n                businessId: businessId,\n                contact: contact,\n                templateName: tmpl.TemplateName,\n                templateParams: tmpl.Placeholders ?? new List<string>(),\n                imageUrl: tmpl.ImageUrl,\n                buttons: buttons,\n                source: \"auto_reply\",\n                refMessageId: null\n            );\n\n            await LogAutoReplyAsync(\n                businessId,\n                contactId,\n                keyword,\n                \"flow\",\n                $\"Template: {tmpl.TemplateName}\",\n                flowName,\n                response.LogId\n            );\n        }\n\n        private async Task ExecuteMessageNodeAsync( AutoReplyFlowNode node, Guid businessId, Guid contactId,string phone, string keyword, string? flowName)\n        {\n            _logger.LogInformation(\"üß† Raw config JSON for message node: {Json}\", node.ConfigJson);\n\n            MessageConfig? config = null;\n            try\n            {\n                config = JsonConvert.DeserializeObject<MessageConfig>(node.ConfigJson ?? \"{}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to parse config for message node {NodeId}\", node.Id);\n                return;\n            }\n\n            if (config == null || string.IsNullOrWhiteSpace(config.Text))\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è Message node config missing or empty.\");\n                return;\n            }\n\n            var result = await _messageEngine.SendTextDirectAsync(new TextMessageSendDto\n            {\n                BusinessId = businessId,\n                RecipientNumber = phone,\n                TextContent = config.Text\n            });\n\n            await LogAutoReplyAsync(\n                businessId,\n                contactId,\n                keyword,\n                \"flow\",\n                config.Text,\n                flowName,\n                result?.LogId\n            );\n        }\n        private async Task ExecuteTagNodeAsync(Guid businessId, Guid contactId, AutoReplyFlowNode node)\n        {\n            if (node == null || string.IsNullOrWhiteSpace(node.ConfigJson))\n                return;\n\n            try\n            {\n                var config = System.Text.Json.JsonSerializer.Deserialize<TagNodeConfig>(node.ConfigJson);\n\n                if (config?.Tags != null && config.Tags.Any())\n                {\n                    // ‚úÖ Load contact from DB\n                    var contact = await _context.Contacts.FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n                    if (contact == null)\n                    {\n                        _logger.LogWarning(\"‚ö†Ô∏è TagNode: Contact not found for {ContactId}\", contactId);\n                        return;\n                    }\n\n                    await _tagService.AssignTagsAsync(businessId, contact.PhoneNumber, config.Tags);\n                    _logger.LogInformation(\"‚úÖ TagNode: Tags [{Tags}] assigned to contact {Phone}\", string.Join(\", \", config.Tags), contact.PhoneNumber);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå TagNode: Failed to execute for contact {ContactId}\", contactId);\n            }\n        }\n\n        public async Task TryRunAutoReplyFlowByButtonAsync(Guid businessId, string phone, string buttonText, Guid? refMessageId = null)\n        {\n            var contact = await _contactService.FindOrCreateAsync(businessId, phone);\n            if (contact == null)\n            {\n                _logger.LogWarning(\"‚ùå Contact not found or could not be created for phone: {Phone}\", phone);\n                return;\n            }\n\n            _logger.LogInformation(\"üì© Button clicked: '{ButtonText}' by {Phone}\", buttonText, phone);\n\n            var flows = await _flowRepo.GetAllByBusinessIdAsync(businessId);\n            if (flows == null || !flows.Any())\n            {\n                _logger.LogInformation(\"üì≠ No flows found for business {BusinessId}\", businessId);\n                return;\n            }\n\n            foreach (var flow in flows)\n            {\n                var nodes = await _flowRepo.GetNodesByFlowIdAsync(flow.Id);\n                var edges = await _flowRepo.GetEdgesByFlowIdAsync(flow.Id);\n\n                var matchedStartNode = nodes\n                    .Where(n => n.NodeType == \"start\")\n                    .FirstOrDefault(n =>\n                    {\n                        try\n                        {\n                            var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(n.ConfigJson ?? \"{}\");\n\n                            if (config != null && config.TryGetValue(\"triggerKeywords\", out var raw))\n                            {\n                                var keywordArray = JsonConvert.DeserializeObject<List<string>>(raw.ToString() ?? \"[]\");\n\n                                return keywordArray.Any(k =>\n                                    string.Equals(k?.Trim(), buttonText.Trim(), StringComparison.OrdinalIgnoreCase));\n                            }\n\n                            return false;\n                        }\n                        catch\n                        {\n                            return false;\n                        }\n                    });\n\n                if (matchedStartNode != null)\n                {\n                    _logger.LogInformation(\"‚úÖ Matched flow {FlowName} by button '{ButtonText}'\", flow.Name, buttonText);\n                   // await RunFlowAsync(flow.Id, businessId, contact.Id, phone, buttonText, flow.Name);\n                  await RunFlowFromButtonAsync(flow.Id, businessId, contact.Id, phone, buttonText);\n                    return;\n                }\n            }\n\n            _logger.LogInformation(\"‚ùå No flow matched for button: {ButtonText}\", buttonText);\n        }\n        public async Task RunFlowFromButtonAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string buttonText)\n        {\n            var nodes = await _flowRepo.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepo.GetEdgesByFlowIdAsync(flowId);\n\n            var nodeMap = nodes.ToDictionary(n => n.Id.ToString(), n => n);\n            var edgeMap = edges.GroupBy(e => e.SourceNodeId)\n                               .ToDictionary(g => g.Key, g => g.ToList());\n\n            // üü¢ 1. Find start node\n            var startNode = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            if (startNode == null)\n            {\n                _logger.LogWarning(\"‚ùå No start node found in flow {FlowId}\", flowId);\n                return;\n            }\n\n            // üîç 2. Find button index from triggerKeywords\n            int matchedIndex = -1;\n            try\n            {\n                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(startNode.ConfigJson ?? \"{}\");\n\n                if (config != null && config.TryGetValue(\"triggerKeywords\", out var raw))\n                {\n                    var keywordList = JsonConvert.DeserializeObject<List<string>>(raw.ToString() ?? \"[]\");\n                    matchedIndex = keywordList.FindIndex(k =>\n                        string.Equals(k?.Trim(), buttonText.Trim(), StringComparison.OrdinalIgnoreCase));\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to parse Start node config\");\n                return;\n            }\n\n            if (matchedIndex < 0)\n            {\n                _logger.LogWarning(\"‚ùå No trigger match for buttonText '{Button}'\", buttonText);\n                return;\n            }\n\n            // ‚úÖ 3. Lookup edge from StartNode using SourceHandle = button-{index}\n            var nextNodeId = edgeMap.TryGetValue(startNode.Id.ToString(), out var list)\n                ? list.FirstOrDefault(e => e.SourceHandle == $\"button-{matchedIndex}\")?.TargetNodeId\n                : null;\n\n            if (string.IsNullOrEmpty(nextNodeId))\n            {\n                _logger.LogWarning(\"‚ùå No outgoing edge found for button index {Index}\", matchedIndex);\n                return;\n            }\n\n            var visited = new HashSet<string>();\n\n            while (!string.IsNullOrEmpty(nextNodeId) && !visited.Contains(nextNodeId))\n            {\n                visited.Add(nextNodeId);\n\n                if (!nodeMap.TryGetValue(nextNodeId, out var node))\n                    break;\n\n                _logger.LogInformation(\"‚öôÔ∏è Executing node {NodeId} [{NodeType}]\", node.Id, node.NodeType);\n\n                try\n                {\n                    switch (node.NodeType)\n                    {\n                        case \"message\":\n                            await ExecuteMessageNodeAsync(node, businessId, contactId, phone, buttonText, null);\n                            break;\n\n                        case \"template\":\n                            await ExecuteTemplateNodeAsync(node, businessId, contactId, phone, buttonText, null);\n\n                            // ‚úÖ Check buttons and halt if any button exists\n                            try\n                            {\n                                var cfg = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n                                if (cfg?.MultiButtons?.Any(b => !string.IsNullOrWhiteSpace(b.ButtonText)) == true)\n                                {\n                                    _logger.LogInformation(\"üõë Template node has buttons ‚Äì halting flow for user click.\");\n                                    return;\n                                }\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"‚ùå Failed to parse template config for button detection.\");\n                            }\n                            break;\n\n\n                        case \"tag\":\n                            await ExecuteTagNodeAsync(businessId, contactId, node);\n                            break;\n\n                        case \"wait\":\n                            var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(node.ConfigJson ?? \"{}\");\n                            await Task.Delay((waitCfg?.Seconds ?? 1) * 1000);\n                            break;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"‚ùå Error executing node {NodeId}\", node.Id);\n                }\n\n                nextNodeId = edgeMap.TryGetValue(nextNodeId, out var nextList)\n                    ? nextList.FirstOrDefault()?.TargetNodeId\n                    : null;\n            }\n        }\n\n    }\n}\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyService.cs",
      "sha256": "df6edf428cebc4dc2d292bef7eb4e47f8cdcbe402b71d79ff9e6ae300502cf70",
      "language": "csharp",
      "size": 3226,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class AutoReplyService : IAutoReplyService\n    {\n        private readonly IAutoReplyRepository _repository;\n\n        public AutoReplyService(IAutoReplyRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<AutoReplyRuleDto> CreateRuleAsync(Guid businessId, AutoReplyRuleDto dto)\n        {\n            var model = new AutoReplyRule\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                TriggerKeyword = dto.TriggerKeyword,\n                ReplyMessage = dto.ReplyMessage,\n                MediaUrl = dto.MediaUrl,\n                Priority = dto.Priority,\n                IsActive = dto.IsActive,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            var saved = await _repository.AddAsync(model);\n\n            return ToDto(saved);\n        }\n\n        public async Task<IEnumerable<AutoReplyRuleDto>> GetAllRulesAsync(Guid businessId)\n        {\n            var rules = await _repository.GetAllByBusinessIdAsync(businessId);\n            return rules.Select(ToDto);\n        }\n\n        public async Task<AutoReplyRuleDto?> GetRuleByIdAsync(Guid ruleId, Guid businessId)\n        {\n            var rule = await _repository.GetByIdAsync(ruleId, businessId);\n            return rule == null ? null : ToDto(rule);\n        }\n\n        public async Task<bool> UpdateRuleAsync(Guid businessId, AutoReplyRuleDto dto)\n        {\n            var existing = await _repository.GetByIdAsync(dto.Id!.Value, businessId);\n            if (existing == null) return false;\n\n            existing.TriggerKeyword = dto.TriggerKeyword;\n            existing.ReplyMessage = dto.ReplyMessage;\n            existing.MediaUrl = dto.MediaUrl;\n            existing.Priority = dto.Priority;\n            existing.IsActive = dto.IsActive;\n            existing.UpdatedAt = DateTime.UtcNow;\n\n            return await _repository.UpdateAsync(existing);\n        }\n\n        public async Task<bool> DeleteRuleAsync(Guid ruleId, Guid businessId)\n        {\n            return await _repository.DeleteAsync(ruleId, businessId);\n        }\n\n        public async Task<AutoReplyRuleDto?> MatchRuleByKeywordAsync(Guid businessId, string incomingMessage)\n        {\n            var rule = await _repository.MatchByKeywordAsync(businessId, incomingMessage);\n            return rule == null ? null : ToDto(rule);\n        }\n\n        private AutoReplyRuleDto ToDto(AutoReplyRule rule)\n        {\n            return new AutoReplyRuleDto\n            {\n                Id = rule.Id,\n                TriggerKeyword = rule.TriggerKeyword,\n                ReplyMessage = rule.ReplyMessage,\n                MediaUrl = rule.MediaUrl,\n                Priority = rule.Priority,\n                IsActive = rule.IsActive,\n                CreatedAt = rule.CreatedAt,\n                UpdatedAt = rule.UpdatedAt\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/FlowRunner.cs",
      "sha256": "d8c0004b19eb4964915bcf51a0ecdadf6dc89cfe50220970befa0fe58a5d4307",
      "language": "csharp",
      "size": 103,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class FlowRunner\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyFlowService.cs",
      "sha256": "dfa67a436f77fb405478dfff58668d94aaed35d2e14d087bffd2fa6eb5b0112b",
      "language": "csharp",
      "size": 721,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Services\n{\n    public interface IAutoReplyFlowService\n    {\n        Task<Guid> SaveFlowAsync(SaveFlowDto dto, Guid businessId);\n        Task<List<SaveFlowDto>> GetFlowsByBusinessIdAsync(Guid businessId);\n        Task<SaveFlowDto?> GetFlowByIdAsync(Guid flowId, Guid businessId);\n        Task<int> GetFlowCountForBusinessAsync(Guid businessId);\n        Task<bool> RenameFlowAsync(Guid id, string newName);\n        Task<bool> DeleteFlowAsync(Guid id, Guid businessId);\n        Task ExecuteFlowAsync(Guid businessId, string triggerKeyword, string customerPhoneNumber);\n\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyRuntimeService.cs",
      "sha256": "444b22549b3c870a3e8cef485bfbf318b5c82a42194255e035be52e27262d4e9",
      "language": "csharp",
      "size": 646,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public interface IAutoReplyRuntimeService\n    {\n        Task<bool> TryRunAutoReplyFlowAsync(Guid businessId, string messageText, Guid contactId, string phoneNumber);\n        Task RunFlowAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string keyword, string flowName);\n        Task TryRunAutoReplyFlowByButtonAsync(Guid businessId, string phone, string buttonText, Guid? refMessageId = null);\n        Task RunFlowFromButtonAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string buttonText);\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyService.cs",
      "sha256": "b2816300ae56acd5368c993c2bccc75ff481290ca8379e745ac361e2d27e620f",
      "language": "csharp",
      "size": 763,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public interface IAutoReplyService\n    {\n        Task<AutoReplyRuleDto> CreateRuleAsync(Guid businessId, AutoReplyRuleDto dto);\n        Task<IEnumerable<AutoReplyRuleDto>> GetAllRulesAsync(Guid businessId);\n        Task<AutoReplyRuleDto?> GetRuleByIdAsync(Guid ruleId, Guid businessId);\n        Task<bool> UpdateRuleAsync(Guid businessId, AutoReplyRuleDto dto);\n        Task<bool> DeleteRuleAsync(Guid ruleId, Guid businessId);\n\n        // For runtime matching\n        Task<AutoReplyRuleDto?> MatchRuleByKeywordAsync(Guid businessId, string incomingMessage);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IFlowRunner.cs",
      "sha256": "11438f4864857ba65f652f4ed62baf47119c77fcd6933106db70602675dce48b",
      "language": "csharp",
      "size": 104,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class IFlowRunner\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyTemplates/Restaurant/Configs/MenuNodeConfig.cs",
      "sha256": "f20da12fb12eed3191a2998cb2e7a7dbc65b03bfcb571cf1b6a413f52d78d42a",
      "language": "csharp",
      "size": 527,
      "content": "namespace xbytechat.api.Features.AutoReplyTemplates.Restaurant.Configs\n{\n    public class MenuNodeConfig\n    {\n        public string MenuTitle { get; set; } = string.Empty;         // e.g., \"Today's Specials\"\n        public string Description { get; set; } = string.Empty;       // e.g., \"Lunch combos starting at ‚Çπ199\"\n        public string MenuImageUrl { get; set; } = string.Empty;      // CDN or public link\n        public string MenuDownloadUrl { get; set; } = string.Empty;   // PDF link or product catalog URL\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Billing/Controllers/WhatsAppMetaWebhookController.cs",
      "sha256": "2557cea7249e3f7099e3fc3e53474acd46b9edd9419be5f82cfdd49113b5b629",
      "language": "csharp",
      "size": 2422,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing xbytechat_api.Features.Billing.Services;\n\nnamespace xbytechat_api.Features.Billing.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks/whatsapp/meta\")]\n    public class WhatsAppMetaWebhookController : ControllerBase\n    {\n        private readonly ILogger<WhatsAppMetaWebhookController> _log;\n        private readonly IBillingIngestService _ingest;\n        private readonly IConfiguration _config;\n        public WhatsAppMetaWebhookController(ILogger<WhatsAppMetaWebhookController> log, IBillingIngestService ingest, IConfiguration config)\n        {\n            _log = log;\n            _ingest = ingest;\n            _config = config;\n        }\n\n        // Meta verification handshake\n        // GET /api/webhooks/whatsapp/meta?hub.mode=subscribe&hub.challenge=...&hub.verify_token=...&businessId=...\n        [HttpGet]\n        public IActionResult Verify([FromQuery(Name = \"hub.mode\")] string mode,\n                                    [FromQuery(Name = \"hub.challenge\")] string challenge,\n                                    [FromQuery(Name = \"hub.verify_token\")] string verifyToken,\n                                    [FromQuery] Guid? businessId = null)\n        {\n            var expected = _config[\"WhatsApp:MetaVerifyToken\"]; // optional; if empty we accept\n            if (!string.IsNullOrWhiteSpace(expected) && !string.Equals(expected, verifyToken))\n            {\n                _log.LogWarning(\"Meta webhook verify failed. Provided token does not match.\");\n                return Unauthorized();\n            }\n            _log.LogInformation(\"Meta webhook verified. BusinessId={BusinessId}\", businessId);\n            return Content(challenge ?? string.Empty, \"text/plain\");\n        }\n\n        // POST /api/webhooks/whatsapp/meta?businessId=...\n        [HttpPost]\n        public async Task<IActionResult> Post([FromQuery] Guid businessId)\n        {\n            using var reader = new StreamReader(Request.Body);\n            var payload = await reader.ReadToEndAsync();\n\n            _log.LogInformation(\"Meta webhook payload ({Len} chars) for Biz {Biz}\", payload?.Length ?? 0, businessId);\n            await _ingest.IngestFromWebhookAsync(businessId, \"META_CLOUD\", payload);\n\n            return Ok();\n        }\n\n        // If you need GET verification for Meta webhook, add it here.\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Billing/Controllers/WhatsAppPinnacleWebhookController.cs",
      "sha256": "50c4e7ef562320331826b09fa5210313b19967296a61f89daf10e2e421b8bf73",
      "language": "csharp",
      "size": 1268,
      "content": "using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing xbytechat_api.Features.Billing.Services;\n\nnamespace xbytechat_api.Features.Billing.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks/whatsapp/pinnacle\")]\n    public class WhatsAppPinnacleWebhookController : ControllerBase\n    {\n        private readonly ILogger<WhatsAppPinnacleWebhookController> _log;\n        private readonly IBillingIngestService _ingest;\n\n        public WhatsAppPinnacleWebhookController(\n            ILogger<WhatsAppPinnacleWebhookController> log,\n            IBillingIngestService ingest)\n        {\n            _log = log;\n            _ingest = ingest;\n        }\n\n        // POST /api/webhooks/whatsapp/pinnacle?businessId=...\n        [HttpPost]\n        public async Task<IActionResult> Post([FromQuery] Guid businessId)\n        {\n            using var reader = new StreamReader(Request.Body);\n            var payload = await reader.ReadToEndAsync();\n\n            _log.LogInformation(\"Pinnacle webhook payload ({Len} chars) for Biz {Biz}\", payload?.Length ?? 0, businessId);\n            await _ingest.IngestFromWebhookAsync(businessId, \"PINNACLE\", payload);\n\n            return Ok();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Billing/DTOs/BillingSnapshotDto.cs",
      "sha256": "ccb71af46ccda4580bcf96c49ae7cab671224aa519eaaf63e561d2fa39d0eb26",
      "language": "csharp",
      "size": 534,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat_api.Features.Billing.DTOs\n{\n    public class BillingSnapshotDto\n    {\n        public int TotalMessages { get; set; }\n        public int ChargeableMessages { get; set; }\n        public int FreeMessages { get; set; }\n        public Dictionary<string, int> CountByCategory { get; set; } = new();    // marketing, utility, authentication, service, free_entry\n        public Dictionary<string, decimal> SpendByCurrency { get; set; } = new();// \"USD\" => 12.34, \"INR\" => 250.00\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Billing/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/Billing/Models/ProviderBillingEvent.cs",
      "sha256": "f923e2377733fecf0ad48ff39d28f1a6e1bbfe4e78f370748b864f1568285824",
      "language": "csharp",
      "size": 1179,
      "content": "using System;\n\nnamespace xbytechat_api.Features.Billing.Models\n{\n    public class ProviderBillingEvent\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public Guid BusinessId { get; set; }\n\n        // Link if we can; may be null if webhook arrives before we create MessageLog\n        public Guid? MessageLogId { get; set; }\n\n        public string Provider { get; set; } = \"\";          // \"Meta_cloud\", \"Pinnacle\"\n        public string EventType { get; set; } = \"\";         // \"conversation_started\", \"message_delivered\", \"pricing_update\", etc.\n\n        public string? ProviderMessageId { get; set; }      // \"wamid...\"\n        public string? ConversationId { get; set; }\n        public string? ConversationCategory { get; set; }\n        public bool? IsChargeable { get; set; }\n        public decimal? PriceAmount { get; set; }\n        public string? PriceCurrency { get; set; }\n\n        public string PayloadJson { get; set; } = \"\";       // original provider payload for audit\n        public DateTimeOffset OccurredAt { get; set; }      // when provider says it happened\n        public DateTimeOffset CreatedAt { get; set; } = DateTimeOffset.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Billing/Services/BillingIngestService.cs",
      "sha256": "f177bd5d56a15388b982936d70b7e02fb7942499fd6ffcf777a634207b0c47ac",
      "language": "csharp",
      "size": 41481,
      "content": "using System;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api; // AppDbContext\nusing xbytechat_api.Features.Billing.Models;\n\nnamespace xbytechat_api.Features.Billing.Services\n{\n    public class BillingIngestService : IBillingIngestService\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<BillingIngestService> _log;\n\n        public BillingIngestService(AppDbContext db, ILogger<BillingIngestService> log)\n        {\n            _db = db;\n            _log = log;\n        }\n\n        public async Task IngestFromSendResponseAsync(Guid businessId, Guid messageLogId, string provider, string rawResponseJson)\n        {\n            // Meta send usually returns only message ID; pricing lands via webhook.\n            // We still extract ProviderMessageId early to link later webhook updates.\n            try\n            {\n                using var doc = JsonDocument.Parse(rawResponseJson);\n                string? providerMessageId =\n                    doc.RootElement.TryGetProperty(\"messages\", out var msgs) && msgs.ValueKind == JsonValueKind.Array && msgs.GetArrayLength() > 0\n                        ? msgs[0].TryGetProperty(\"id\", out var idEl) ? idEl.GetString() : null\n                    : doc.RootElement.TryGetProperty(\"id\", out var idEl2) ? idEl2.GetString()\n                    : null;\n\n                var logRow = await _db.MessageLogs.FirstOrDefaultAsync(x => x.Id == messageLogId && x.BusinessId == businessId);\n                if (logRow != null)\n                {\n                    logRow.Provider = provider;\n                    if (!string.IsNullOrWhiteSpace(providerMessageId))\n                        logRow.ProviderMessageId = providerMessageId;\n                }\n\n                // Store audit event\n                var ev = new ProviderBillingEvent\n                {\n                    BusinessId = businessId,\n                    MessageLogId = messageLogId,\n                    Provider = provider,\n                    EventType = \"send_response\",\n                    ProviderMessageId = providerMessageId,\n                    PayloadJson = rawResponseJson,\n                    OccurredAt = DateTimeOffset.UtcNow\n                };\n                _db.ProviderBillingEvents.Add(ev);\n\n                await _db.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _log.LogWarning(ex, \"Failed to ingest send response payload for business {biz}\", businessId);\n            }\n        }\n\n        public async Task IngestFromWebhookAsync(Guid businessId, string provider, string payloadJson)\n        {\n            try\n            {\n                using var doc = JsonDocument.Parse(payloadJson);\n                var now = DateTimeOffset.UtcNow;\n\n                // Local idempotency guard:\n                // Consider an event \"existing\" if (BusinessId, Provider, EventType)\n                // matches and we have either the same ProviderMessageId OR (when absent) the same ConversationId.\n                Task<bool> ExistsAsync(string eventType, string? providerMessageId, string? conversationId)\n                {\n                    if (!string.IsNullOrWhiteSpace(providerMessageId))\n                    {\n                        return _db.ProviderBillingEvents.AsNoTracking().AnyAsync(x =>\n                            x.BusinessId == businessId &&\n                            x.Provider == provider &&\n                            x.EventType == eventType &&\n                            x.ProviderMessageId == providerMessageId);\n                    }\n\n                    if (!string.IsNullOrWhiteSpace(conversationId))\n                    {\n                        return _db.ProviderBillingEvents.AsNoTracking().AnyAsync(x =>\n                            x.BusinessId == businessId &&\n                            x.Provider == provider &&\n                            x.EventType == eventType &&\n                            x.ConversationId == conversationId);\n                    }\n\n                    // No natural key available; let it through (DB unique index can still protect if present).\n                    return Task.FromResult(false);\n                }\n\n                if (string.Equals(provider, \"META_CLOUD\", StringComparison.OrdinalIgnoreCase))\n                {\n                    // Typical Meta structure:\n                    // entry[].changes[].value.statuses[] with:\n                    //  - id (wamid)\n                    //  - status (sent / delivered / read / etc.)\n                    //  - timestamp (unix seconds, string or number)\n                    //  - conversation { id, expiration_timestamp }\n                    //  - pricing { billable, category, amount, currency }\n                    foreach (var entry in Enumerate(doc.RootElement, \"entry\"))\n                        foreach (var change in Enumerate(entry, \"changes\"))\n                        {\n                            if (!change.TryGetProperty(\"value\", out var value)) continue;\n\n                            foreach (var st in Enumerate(value, \"statuses\"))\n                            {\n                                string? providerMessageId = st.TryGetProperty(\"id\", out var idEl) ? idEl.GetString() : null;\n\n                                string? status = null;\n                                if (st.TryGetProperty(\"status\", out var statusEl) && statusEl.ValueKind == JsonValueKind.String)\n                                    status = statusEl.GetString()?.ToLowerInvariant();\n\n                                // OccurredAt from provider if present\n                                DateTimeOffset occurredAt = now;\n                                if (st.TryGetProperty(\"timestamp\", out var tsEl))\n                                {\n                                    if (tsEl.ValueKind == JsonValueKind.String && long.TryParse(tsEl.GetString(), out var tsLong))\n                                        occurredAt = DateTimeOffset.FromUnixTimeSeconds(tsLong);\n                                    else if (tsEl.ValueKind == JsonValueKind.Number && tsEl.TryGetInt64(out var tsNum))\n                                        occurredAt = DateTimeOffset.FromUnixTimeSeconds(tsNum);\n                                }\n\n                                // Conversation info (Meta expires 24h after start)\n                                string? conversationId = null;\n                                DateTimeOffset? convStartedAt = null;\n                                if (st.TryGetProperty(\"conversation\", out var convEl) && convEl.ValueKind == JsonValueKind.Object)\n                                {\n                                    if (convEl.TryGetProperty(\"id\", out var cidEl)) conversationId = cidEl.GetString();\n\n                                    if (convEl.TryGetProperty(\"expiration_timestamp\", out var expEl))\n                                    {\n                                        long exp;\n                                        if (expEl.ValueKind == JsonValueKind.String && long.TryParse(expEl.GetString(), out var expStr))\n                                            exp = expStr;\n                                        else if (expEl.ValueKind == JsonValueKind.Number && expEl.TryGetInt64(out var expNum))\n                                            exp = expNum;\n                                        else\n                                            exp = 0;\n\n                                        if (exp > 0)\n                                        {\n                                            var expiration = DateTimeOffset.FromUnixTimeSeconds(exp);\n                                            convStartedAt = expiration.AddHours(-24);\n                                        }\n                                    }\n                                }\n\n                                // Pricing block (optional per status)\n                                string? category = null;\n                                bool? billable = null;\n                                decimal? amount = null;\n                                string? currency = null;\n\n                                if (st.TryGetProperty(\"pricing\", out var pEl) && pEl.ValueKind == JsonValueKind.Object)\n                                {\n                                    if (pEl.TryGetProperty(\"category\", out var catEl))\n                                        category = catEl.GetString()?.ToLowerInvariant();\n\n                                    if (pEl.TryGetProperty(\"billable\", out var bilEl) &&\n                                        (bilEl.ValueKind == JsonValueKind.True || bilEl.ValueKind == JsonValueKind.False))\n                                        billable = bilEl.GetBoolean();\n\n                                    if (pEl.TryGetProperty(\"amount\", out var amtEl) && amtEl.ValueKind == JsonValueKind.Number)\n                                        amount = amtEl.GetDecimal();\n\n                                    if (pEl.TryGetProperty(\"currency\", out var curEl) && curEl.ValueKind == JsonValueKind.String)\n                                        currency = curEl.GetString();\n                                }\n\n                                // 1) Status event (sent/delivered/read...) ‚Äî write once\n                                if (!string.IsNullOrWhiteSpace(status))\n                                {\n                                    var statusEventType = status; // store status as EventType\n                                    if (!await ExistsAsync(statusEventType, providerMessageId, conversationId))\n                                    {\n                                        _db.ProviderBillingEvents.Add(new ProviderBillingEvent\n                                        {\n                                            BusinessId = businessId,\n                                            Provider = provider,\n                                            EventType = statusEventType,\n                                            ProviderMessageId = providerMessageId,\n                                            ConversationId = conversationId,\n                                            ConversationCategory = category,\n                                            IsChargeable = billable,\n                                            PriceAmount = amount,\n                                            PriceCurrency = currency,\n                                            PayloadJson = payloadJson,\n                                            OccurredAt = occurredAt\n                                        });\n                                    }\n                                }\n\n                                // 2) Pricing update ‚Äî write once\n                                bool hasAnyPricing = !string.IsNullOrWhiteSpace(category) || billable.HasValue || amount.HasValue || !string.IsNullOrWhiteSpace(currency);\n                                if (hasAnyPricing && !await ExistsAsync(\"pricing_update\", providerMessageId, conversationId))\n                                {\n                                    _db.ProviderBillingEvents.Add(new ProviderBillingEvent\n                                    {\n                                        BusinessId = businessId,\n                                        Provider = provider,\n                                        EventType = \"pricing_update\",\n                                        ProviderMessageId = providerMessageId,\n                                        ConversationId = conversationId,\n                                        ConversationCategory = category,\n                                        IsChargeable = billable,\n                                        PriceAmount = amount,\n                                        PriceCurrency = currency,\n                                        PayloadJson = payloadJson,\n                                        OccurredAt = occurredAt\n                                    });\n                                }\n\n                                // Keep MessageLog in sync (when linkable)\n                                var logRow = await FindMatchingMessageLog(businessId, providerMessageId, conversationId);\n                                if (logRow != null)\n                                {\n                                    logRow.Provider = provider;\n                                    if (!string.IsNullOrWhiteSpace(providerMessageId))\n                                        logRow.ProviderMessageId = providerMessageId;\n                                    if (!string.IsNullOrWhiteSpace(conversationId))\n                                        logRow.ConversationId = conversationId;\n                                    if (convStartedAt.HasValue)\n                                        logRow.ConversationStartedAt = convStartedAt;\n\n                                    if (billable.HasValue) logRow.IsChargeable = billable.Value;\n                                    if (!string.IsNullOrWhiteSpace(category)) logRow.ConversationCategory = category;\n                                    if (amount.HasValue) logRow.PriceAmount = amount;\n                                    if (!string.IsNullOrWhiteSpace(currency)) logRow.PriceCurrency = currency;\n                                }\n                            }\n                        }\n                }\n                else if (string.Equals(provider, \"PINNACLE\", StringComparison.OrdinalIgnoreCase))\n                {\n                    // Scan for \"pricing\" nodes; try to infer message & conversation from parent context.\n                    foreach (var pricing in JsonPathAll(doc.RootElement, \"pricing\"))\n                    {\n                        string? category = pricing.TryGetProperty(\"category\", out var catEl) ? catEl.GetString()?.ToLowerInvariant() : null;\n                        bool? billable = (pricing.TryGetProperty(\"billable\", out var bilEl) &&\n                                          (bilEl.ValueKind == JsonValueKind.True || bilEl.ValueKind == JsonValueKind.False))\n                                          ? bilEl.GetBoolean() : (bool?)null;\n\n                        decimal? amount = null;\n                        if (pricing.TryGetProperty(\"amount\", out var amtEl) && amtEl.ValueKind == JsonValueKind.Number)\n                            amount = amtEl.GetDecimal();\n\n                        string? currency = pricing.TryGetProperty(\"currency\", out var curEl) ? curEl.GetString() : null;\n\n                        var parent = TryGetParentObject(doc.RootElement, pricing);\n                        string? providerMessageId = TryGetString(parent, \"id\")\n                                                 ?? TryGetString(parent, \"message_id\")\n                                                 ?? TryGetString(parent, \"wamid\");\n                        string? conversationId = TryGetString(parent, \"conversation_id\")\n                                               ?? TryGetNestedString(parent, \"conversation\", \"id\");\n\n                        // Optional status in same parent\n                        string? status = TryGetString(parent, \"status\")?.ToLowerInvariant();\n\n                        // Pricing (deduped)\n                        if (!await ExistsAsync(\"pricing_update\", providerMessageId, conversationId))\n                        {\n                            _db.ProviderBillingEvents.Add(new ProviderBillingEvent\n                            {\n                                BusinessId = businessId,\n                                Provider = provider,\n                                EventType = \"pricing_update\",\n                                ProviderMessageId = providerMessageId,\n                                ConversationId = conversationId,\n                                ConversationCategory = category,\n                                IsChargeable = billable,\n                                PriceAmount = amount,\n                                PriceCurrency = currency,\n                                PayloadJson = payloadJson,\n                                OccurredAt = now\n                            });\n                        }\n\n                        // Optional status (deduped)\n                        if (!string.IsNullOrWhiteSpace(status) && !await ExistsAsync(status, providerMessageId, conversationId))\n                        {\n                            _db.ProviderBillingEvents.Add(new ProviderBillingEvent\n                            {\n                                BusinessId = businessId,\n                                Provider = provider,\n                                EventType = status,\n                                ProviderMessageId = providerMessageId,\n                                ConversationId = conversationId,\n                                ConversationCategory = category,\n                                IsChargeable = billable,\n                                PriceAmount = amount,\n                                PriceCurrency = currency,\n                                PayloadJson = payloadJson,\n                                OccurredAt = now\n                            });\n                        }\n\n                        // Update MessageLog when linkable\n                        var logRow = await FindMatchingMessageLog(businessId, providerMessageId, conversationId);\n                        if (logRow != null)\n                        {\n                            logRow.Provider = provider;\n                            if (!string.IsNullOrWhiteSpace(providerMessageId))\n                                logRow.ProviderMessageId = providerMessageId;\n                            if (!string.IsNullOrWhiteSpace(conversationId))\n                                logRow.ConversationId = conversationId;\n\n                            if (billable.HasValue) logRow.IsChargeable = billable.Value;\n                            if (!string.IsNullOrWhiteSpace(category)) logRow.ConversationCategory = category;\n                            if (amount.HasValue) logRow.PriceAmount = amount;\n                            if (!string.IsNullOrWhiteSpace(currency)) logRow.PriceCurrency = currency;\n                        }\n                    }\n                }\n                else\n                {\n                    // Unknown provider; still store the raw event for audit (idempotency relaxed here)\n                    _db.ProviderBillingEvents.Add(new ProviderBillingEvent\n                    {\n                        BusinessId = businessId,\n                        Provider = provider,\n                        EventType = \"unknown_provider_webhook\",\n                        PayloadJson = payloadJson,\n                        OccurredAt = now\n                    });\n                }\n\n                await _db.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _log.LogWarning(ex, \"Failed to ingest webhook payload for business {biz}\", businessId);\n            }\n        }\n\n        // -------- helpers --------\n        private async Task<MessageLog?> FindMatchingMessageLog(Guid businessId, string? providerMessageId, string? conversationId)\n        {\n            if (!string.IsNullOrWhiteSpace(providerMessageId))\n            {\n                var byMsgId = await _db.MessageLogs\n                    .OrderByDescending(x => x.CreatedAt)\n                    .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.ProviderMessageId == providerMessageId);\n                if (byMsgId != null) return byMsgId;\n            }\n\n            if (!string.IsNullOrWhiteSpace(conversationId))\n            {\n                var byConv = await _db.MessageLogs\n                    .OrderByDescending(x => x.CreatedAt)\n                    .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.ConversationId == conversationId);\n                if (byConv != null) return byConv;\n            }\n\n            return null;\n        }\n\n        // Enumerate array property safely\n        private static IEnumerable<JsonElement> Enumerate(JsonElement root, string name)\n        {\n            if (root.ValueKind != JsonValueKind.Object) yield break;\n            if (!root.TryGetProperty(name, out var arr) || arr.ValueKind != JsonValueKind.Array) yield break;\n            foreach (var x in arr.EnumerateArray()) yield return x;\n        }\n\n        // Breadth search for any property named `name` (unique name to avoid ambiguity)\n        private static IEnumerable<JsonElement> JsonPathAll(JsonElement root, string name)\n        {\n            if (root.ValueKind == JsonValueKind.Object)\n            {\n                foreach (var p in root.EnumerateObject())\n                {\n                    if (string.Equals(p.Name, name, StringComparison.OrdinalIgnoreCase))\n                        yield return p.Value;\n\n                    foreach (var x in JsonPathAll(p.Value, name))\n                        yield return x;\n                }\n            }\n            else if (root.ValueKind == JsonValueKind.Array)\n            {\n                foreach (var item in root.EnumerateArray())\n                    foreach (var x in JsonPathAll(item, name))\n                        yield return x;\n            }\n        }\n\n        // Very lightweight \"parent\" guess: look for an object in ancestry that contains the node reference (best-effort)\n        private static JsonElement? TryGetParentObject(JsonElement root, JsonElement node)\n        {\n            // System.Text.Json doesn't expose parents. We accept best-effort by scanning objects containing 'pricing'\n            if (root.ValueKind == JsonValueKind.Object)\n            {\n                foreach (var p in root.EnumerateObject())\n                {\n                    if (p.Value.ValueKind == JsonValueKind.Object)\n                    {\n                        if (object.ReferenceEquals(p.Value, node)) return root;\n                        var cand = TryGetParentObject(p.Value, node);\n                        if (cand.HasValue) return cand;\n                    }\n                    else if (p.Value.ValueKind == JsonValueKind.Array)\n                    {\n                        foreach (var e in p.Value.EnumerateArray())\n                        {\n                            if (object.ReferenceEquals(e, node)) return root;\n                            var cand = TryGetParentObject(e, node);\n                            if (cand.HasValue) return cand;\n                        }\n                    }\n                }\n            }\n            else if (root.ValueKind == JsonValueKind.Array)\n            {\n                foreach (var e in root.EnumerateArray())\n                {\n                    var cand = TryGetParentObject(e, node);\n                    if (cand.HasValue) return cand;\n                }\n            }\n            return null;\n        }\n\n        private static string? TryGetString(JsonElement? obj, string name)\n        {\n            if (!obj.HasValue || obj.Value.ValueKind != JsonValueKind.Object) return null;\n            return obj.Value.TryGetProperty(name, out var el) ? el.GetString() : null;\n        }\n\n        private static string? TryGetNestedString(JsonElement? obj, string name1, string name2)\n        {\n            if (!obj.HasValue || obj.Value.ValueKind != JsonValueKind.Object) return null;\n            if (!obj.Value.TryGetProperty(name1, out var inner) || inner.ValueKind != JsonValueKind.Object) return null;\n            return inner.TryGetProperty(name2, out var v) ? v.GetString() : null;\n        }\n    }\n}\n\n\n//using System;\n//using System.Linq;\n//using System.Text.Json;\n//using System.Threading.Tasks;\n//using System.Collections.Generic;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.Logging;\n//using xbytechat.api; // AppDbContext\n//using xbytechat_api.Features.Billing.Models;\n\n//namespace xbytechat_api.Features.Billing.Services\n//{\n//    public class BillingIngestService : IBillingIngestService\n//    {\n//        private readonly AppDbContext _db;\n//        private readonly ILogger<BillingIngestService> _log;\n\n//        public BillingIngestService(AppDbContext db, ILogger<BillingIngestService> log)\n//        {\n//            _db = db;\n//            _log = log;\n//        }\n\n//        public async Task IngestFromSendResponseAsync(Guid businessId, Guid messageLogId, string provider, string rawResponseJson)\n//        {\n//            // Meta send usually returns only message ID; pricing lands via webhook.\n//            // We still extract ProviderMessageId early to link later webhook updates.\n//            try\n//            {\n//                using var doc = JsonDocument.Parse(rawResponseJson);\n//                string? providerMessageId =\n//                    doc.RootElement.TryGetProperty(\"messages\", out var msgs) && msgs.ValueKind == JsonValueKind.Array && msgs.GetArrayLength() > 0\n//                        ? msgs[0].TryGetProperty(\"id\", out var idEl) ? idEl.GetString() : null\n//                    : doc.RootElement.TryGetProperty(\"id\", out var idEl2) ? idEl2.GetString()\n//                    : null;\n\n//                var logRow = await _db.MessageLogs.FirstOrDefaultAsync(x => x.Id == messageLogId && x.BusinessId == businessId);\n//                if (logRow != null)\n//                {\n//                    logRow.Provider = provider;\n//                    if (!string.IsNullOrWhiteSpace(providerMessageId))\n//                        logRow.ProviderMessageId = providerMessageId;\n//                }\n\n//                // Store audit event\n//                var ev = new ProviderBillingEvent\n//                {\n//                    BusinessId = businessId,\n//                    MessageLogId = messageLogId,\n//                    Provider = provider,\n//                    EventType = \"send_response\",\n//                    ProviderMessageId = providerMessageId,\n//                    PayloadJson = rawResponseJson,\n//                    OccurredAt = DateTimeOffset.UtcNow\n//                };\n//                _db.ProviderBillingEvents.Add(ev);\n\n//                await _db.SaveChangesAsync();\n//            }\n//            catch (Exception ex)\n//            {\n//                _log.LogWarning(ex, \"Failed to ingest send response payload for business {biz}\", businessId);\n//            }\n//        }\n\n//        public async Task IngestFromWebhookAsync(Guid businessId, string provider, string payloadJson)\n//        {\n//            try\n//            {\n//                using var doc = JsonDocument.Parse(payloadJson);\n//                var now = DateTimeOffset.UtcNow;\n\n//                if (string.Equals(provider, \"META_CLOUD\", StringComparison.OrdinalIgnoreCase))\n//                {\n//                    // Typical Meta structure:\n//                    // entry[].changes[].value.statuses[] with:\n//                    //  - id (wamid)\n//                    //  - pricing { billable, category, amount, currency }\n//                    //  - conversation { id, expiration_timestamp }\n//                    foreach (var entry in Enumerate(doc.RootElement, \"entry\"))\n//                    {\n//                        foreach (var change in Enumerate(entry, \"changes\"))\n//                        {\n//                            if (!change.TryGetProperty(\"value\", out var value)) continue;\n\n//                            foreach (var st in Enumerate(value, \"statuses\"))\n//                            {\n//                                string? providerMessageId = st.TryGetProperty(\"id\", out var idEl) ? idEl.GetString() : null;\n\n//                                string? category = st.TryGetProperty(\"pricing\", out var pEl) && pEl.ValueKind == JsonValueKind.Object\n//                                    ? pEl.TryGetProperty(\"category\", out var catEl) ? catEl.GetString()?.ToLowerInvariant() : null\n//                                    : null;\n\n//                                bool? billable = st.TryGetProperty(\"pricing\", out var pEl2) && pEl2.ValueKind == JsonValueKind.Object\n//                                    ? pEl2.TryGetProperty(\"billable\", out var bilEl) && (bilEl.ValueKind == JsonValueKind.True || bilEl.ValueKind == JsonValueKind.False)\n//                                        ? bilEl.GetBoolean() : (bool?)null\n//                                    : (bool?)null;\n\n//                                decimal? amount = null;\n//                                string? currency = null;\n//                                if (st.TryGetProperty(\"pricing\", out var pEl3) && pEl3.ValueKind == JsonValueKind.Object)\n//                                {\n//                                    if (pEl3.TryGetProperty(\"amount\", out var amtEl) && amtEl.ValueKind == JsonValueKind.Number)\n//                                        amount = amtEl.GetDecimal();\n//                                    if (pEl3.TryGetProperty(\"currency\", out var curEl))\n//                                        currency = curEl.GetString();\n//                                }\n\n//                                string? conversationId = null;\n//                                DateTimeOffset? convStartedAt = null;\n//                                if (st.TryGetProperty(\"conversation\", out var convEl) && convEl.ValueKind == JsonValueKind.Object)\n//                                {\n//                                    if (convEl.TryGetProperty(\"id\", out var cidEl))\n//                                        conversationId = cidEl.GetString();\n\n//                                    // expiration_timestamp is seconds; start time not directly given.\n//                                    if (convEl.TryGetProperty(\"expiration_timestamp\", out var expEl) && expEl.ValueKind == JsonValueKind.Number)\n//                                    {\n//                                        var exp = DateTimeOffset.FromUnixTimeSeconds(expEl.GetInt64());\n//                                        convStartedAt = exp.AddHours(-24);\n//                                    }\n//                                }\n\n//                                // Audit event\n//                                var ev = new ProviderBillingEvent\n//                                {\n//                                    BusinessId = businessId,\n//                                    Provider = provider,\n//                                    EventType = \"pricing_update\",\n//                                    ProviderMessageId = providerMessageId,\n//                                    ConversationId = conversationId,\n//                                    ConversationCategory = category,\n//                                    IsChargeable = billable,\n//                                    PriceAmount = amount,\n//                                    PriceCurrency = currency,\n//                                    PayloadJson = payloadJson,\n//                                    OccurredAt = now\n//                                };\n//                                _db.ProviderBillingEvents.Add(ev);\n\n//                                // Update MessageLog when possible\n//                                var logRow = await FindMatchingMessageLog(businessId, providerMessageId, conversationId);\n//                                if (logRow != null)\n//                                {\n//                                    logRow.Provider = provider;\n//                                    if (!string.IsNullOrWhiteSpace(providerMessageId))\n//                                        logRow.ProviderMessageId = providerMessageId;\n//                                    if (billable.HasValue) logRow.IsChargeable = billable.Value;\n//                                    if (!string.IsNullOrWhiteSpace(category)) logRow.ConversationCategory = category;\n//                                    if (!string.IsNullOrWhiteSpace(conversationId)) logRow.ConversationId = conversationId;\n//                                    if (amount.HasValue) logRow.PriceAmount = amount;\n//                                    if (!string.IsNullOrWhiteSpace(currency)) logRow.PriceCurrency = currency;\n//                                    if (convStartedAt.HasValue) logRow.ConversationStartedAt = convStartedAt;\n//                                }\n//                            }\n//                        }\n//                    }\n//                }\n//                else if (string.Equals(provider, \"PINNACLE\", StringComparison.OrdinalIgnoreCase))\n//                {\n//                    // Pinnacle payloads vary, but often include \"message_id\", \"conversation\" with id/category and \"pricing\".\n//                    // We'll scan the whole tree for any \"pricing\" objects, and attempt nearby fields for message id and conversation.\n//                    foreach (var pricing in JsonPathAll(doc.RootElement, \"pricing\"))\n//                    {\n//                        string? category = pricing.TryGetProperty(\"category\", out var catEl) ? catEl.GetString()?.ToLowerInvariant() : null;\n//                        bool? billable = pricing.TryGetProperty(\"billable\", out var bilEl) && (bilEl.ValueKind == JsonValueKind.True || bilEl.ValueKind == JsonValueKind.False)\n//                            ? bilEl.GetBoolean() : (bool?)null;\n\n//                        decimal? amount = null;\n//                        if (pricing.TryGetProperty(\"amount\", out var amtEl) && amtEl.ValueKind == JsonValueKind.Number)\n//                            amount = amtEl.GetDecimal();\n//                        string? currency = pricing.TryGetProperty(\"currency\", out var curEl) ? curEl.GetString() : null;\n\n//                        // Heuristics to pick neighbors in same object\n//                        var parent = TryGetParentObject(doc.RootElement, pricing);\n//                        string? providerMessageId = TryGetString(parent, \"id\")\n//                                                 ?? TryGetString(parent, \"message_id\")\n//                                                 ?? TryGetString(parent, \"wamid\");\n//                        string? conversationId = TryGetString(parent, \"conversation_id\")\n//                                               ?? TryGetNestedString(parent, \"conversation\", \"id\");\n\n//                        var ev = new ProviderBillingEvent\n//                        {\n//                            BusinessId = businessId,\n//                            Provider = provider,\n//                            EventType = \"pricing_update\",\n//                            ProviderMessageId = providerMessageId,\n//                            ConversationId = conversationId,\n//                            ConversationCategory = category,\n//                            IsChargeable = billable,\n//                            PriceAmount = amount,\n//                            PriceCurrency = currency,\n//                            PayloadJson = payloadJson,\n//                            OccurredAt = now\n//                        };\n//                        _db.ProviderBillingEvents.Add(ev);\n\n//                        var logRow = await FindMatchingMessageLog(businessId, providerMessageId, conversationId);\n//                        if (logRow != null)\n//                        {\n//                            logRow.Provider = provider;\n//                            if (!string.IsNullOrWhiteSpace(providerMessageId))\n//                                logRow.ProviderMessageId = providerMessageId;\n//                            if (billable.HasValue) logRow.IsChargeable = billable.Value;\n//                            if (!string.IsNullOrWhiteSpace(category)) logRow.ConversationCategory = category;\n//                            if (!string.IsNullOrWhiteSpace(conversationId)) logRow.ConversationId = conversationId;\n//                            if (amount.HasValue) logRow.PriceAmount = amount;\n//                            if (!string.IsNullOrWhiteSpace(currency)) logRow.PriceCurrency = currency;\n//                        }\n//                    }\n//                }\n//                else\n//                {\n//                    // Unknown provider; still store the raw event for audit\n//                    _db.ProviderBillingEvents.Add(new ProviderBillingEvent\n//                    {\n//                        BusinessId = businessId,\n//                        Provider = provider,\n//                        EventType = \"unknown_provider_webhook\",\n//                        PayloadJson = payloadJson,\n//                        OccurredAt = now\n//                    });\n//                }\n\n//                await _db.SaveChangesAsync();\n//            }\n//            catch (Exception ex)\n//            {\n//                _log.LogWarning(ex, \"Failed to ingest webhook payload for business {biz}\", businessId);\n//            }\n//        }\n\n//        // -------- helpers --------\n//        private async Task<MessageLog?> FindMatchingMessageLog(Guid businessId, string? providerMessageId, string? conversationId)\n//        {\n//            if (!string.IsNullOrWhiteSpace(providerMessageId))\n//            {\n//                var byMsgId = await _db.MessageLogs\n//                    .OrderByDescending(x => x.CreatedAt)\n//                    .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.ProviderMessageId == providerMessageId);\n//                if (byMsgId != null) return byMsgId;\n//            }\n\n//            if (!string.IsNullOrWhiteSpace(conversationId))\n//            {\n//                var byConv = await _db.MessageLogs\n//                    .OrderByDescending(x => x.CreatedAt)\n//                    .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.ConversationId == conversationId);\n//                if (byConv != null) return byConv;\n//            }\n\n//            return null;\n//        }\n\n//        // Enumerate array property safely\n//        private static IEnumerable<JsonElement> Enumerate(JsonElement root, string name)\n//        {\n//            if (root.ValueKind != JsonValueKind.Object) yield break;\n//            if (!root.TryGetProperty(name, out var arr) || arr.ValueKind != JsonValueKind.Array) yield break;\n//            foreach (var x in arr.EnumerateArray()) yield return x;\n//        }\n\n//        // Breadth search for any property named `name` (unique name to avoid ambiguity)\n//        private static IEnumerable<JsonElement> JsonPathAll(JsonElement root, string name)\n//        {\n//            if (root.ValueKind == JsonValueKind.Object)\n//            {\n//                foreach (var p in root.EnumerateObject())\n//                {\n//                    if (string.Equals(p.Name, name, StringComparison.OrdinalIgnoreCase))\n//                        yield return p.Value;\n\n//                    foreach (var x in JsonPathAll(p.Value, name))\n//                        yield return x;\n//                }\n//            }\n//            else if (root.ValueKind == JsonValueKind.Array)\n//            {\n//                foreach (var item in root.EnumerateArray())\n//                    foreach (var x in JsonPathAll(item, name))\n//                        yield return x;\n//            }\n//        }\n\n//        // Very lightweight \"parent\" guess: look for an object in ancestry that contains the node reference (best-effort)\n//        private static JsonElement? TryGetParentObject(JsonElement root, JsonElement node)\n//        {\n//            // System.Text.Json doesn't expose parents. We accept best-effort by scanning objects containing 'pricing'\n//            if (root.ValueKind == JsonValueKind.Object)\n//            {\n//                foreach (var p in root.EnumerateObject())\n//                {\n//                    if (p.Value.ValueKind == JsonValueKind.Object)\n//                    {\n//                        if (object.ReferenceEquals(p.Value, node)) return root;\n//                        var cand = TryGetParentObject(p.Value, node);\n//                        if (cand.HasValue) return cand;\n//                    }\n//                    else if (p.Value.ValueKind == JsonValueKind.Array)\n//                    {\n//                        foreach (var e in p.Value.EnumerateArray())\n//                        {\n//                            if (object.ReferenceEquals(e, node)) return root;\n//                            var cand = TryGetParentObject(e, node);\n//                            if (cand.HasValue) return cand;\n//                        }\n//                    }\n//                }\n//            }\n//            else if (root.ValueKind == JsonValueKind.Array)\n//            {\n//                foreach (var e in root.EnumerateArray())\n//                {\n//                    var cand = TryGetParentObject(e, node);\n//                    if (cand.HasValue) return cand;\n//                }\n//            }\n//            return null;\n//        }\n\n//        private static string? TryGetString(JsonElement? obj, string name)\n//        {\n//            if (!obj.HasValue || obj.Value.ValueKind != JsonValueKind.Object) return null;\n//            return obj.Value.TryGetProperty(name, out var el) ? el.GetString() : null;\n//        }\n\n//        private static string? TryGetNestedString(JsonElement? obj, string name1, string name2)\n//        {\n//            if (!obj.HasValue || obj.Value.ValueKind != JsonValueKind.Object) return null;\n//            if (!obj.Value.TryGetProperty(name1, out var inner) || inner.ValueKind != JsonValueKind.Object) return null;\n//            return inner.TryGetProperty(name2, out var v) ? v.GetString() : null;\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/Billing/Services/BillingReadService.cs",
      "sha256": "0298676bbd8d96132ccbaf42ca893f76a03f769606106dfe82a6bed17982b5fc",
      "language": "csharp",
      "size": 7066,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nusing xbytechat.api;                               // AppDbContext\nusing xbytechat_api.Features.Billing.DTOs;         // BillingSnapshotDto\nusing xbytechat_api.Features.Billing.Models;       // ProviderBillingEvent (for _db.ProviderBillingEvents)\n\nnamespace xbytechat_api.Features.Billing.Services\n{\n    public class BillingReadService : IBillingReadService\n    {\n        private readonly AppDbContext _db;\n        public BillingReadService(AppDbContext db) => _db = db;\n\n        public async Task<BillingSnapshotDto> GetBusinessBillingSnapshotAsync(Guid businessId, DateOnly from, DateOnly to)\n        {\n            // Build inclusive [from..to] range in UTC\n            var fromDt = from.ToDateTime(TimeOnly.MinValue, DateTimeKind.Utc);\n            var toDt = to.ToDateTime(TimeOnly.MaxValue, DateTimeKind.Utc);\n\n            // 1) Volume: total messages in the period (unchanged behavior)\n            var totalMessages = await _db.MessageLogs.AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.CreatedAt >= fromDt && x.CreatedAt <= toDt)\n                .CountAsync();\n\n            // 2) Billing source of truth: pricing_update events in the period\n            //    (Only select small projection; we'll dedupe in-memory safely.)\n            var evRaw = await _db.ProviderBillingEvents.AsNoTracking()\n                .Where(e => e.BusinessId == businessId\n                            && e.EventType == \"pricing_update\"\n                            && e.OccurredAt >= fromDt && e.OccurredAt <= toDt)\n                .Select(e => new {\n                    e.Provider,\n                    e.ProviderMessageId,\n                    e.EventType,\n                    e.ConversationId,\n                    e.ConversationCategory,\n                    e.IsChargeable,\n                    e.PriceAmount,\n                    e.PriceCurrency\n                })\n                .ToListAsync();\n\n            // 2a) Defend against webhook replays (if DB unique index not yet deployed)\n            //     Deduplicate on Provider+ProviderMessageId+EventType to drop repeats of the same message event.\n            var evDedup = evRaw\n                .GroupBy(e => new { e.Provider, e.ProviderMessageId, e.EventType })\n                .Select(g => g.First())\n                .ToList();\n\n            // 2b) Group by conversation to compute window-level metrics\n            var convGroups = evDedup\n                .Where(e => !string.IsNullOrWhiteSpace(e.ConversationId))\n                .GroupBy(e => e.ConversationId!)\n                .ToList();\n\n            // Chargeable windows: any event in the conversation marked billable == true\n            var chargeableWindows = convGroups.Count(g => g.Any(x => x.IsChargeable == true));\n\n            // Free windows: conversations explicitly marked billable == false and NOT marked true anywhere\n            var freeWindows = convGroups.Count(g => g.Any(x => x.IsChargeable == false) && !g.Any(x => x.IsChargeable == true));\n\n            // Count by category (per conversation, pick first non-empty category; default \"unknown\")\n            var countByCategory = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase);\n            foreach (var g in convGroups)\n            {\n                var category = g.Select(x => x.ConversationCategory)\n                                .FirstOrDefault(s => !string.IsNullOrWhiteSpace(s))\n                                ?.ToLowerInvariant() ?? \"unknown\";\n                countByCategory[category] = countByCategory.TryGetValue(category, out var c) ? c + 1 : 1;\n            }\n\n            // Spend by currency: for each conversation, take the latest non-null amount (if any), then sum by currency\n            var spendByCurrency = new Dictionary<string, decimal>(StringComparer.OrdinalIgnoreCase);\n            foreach (var g in convGroups)\n            {\n                // Prefer an explicit currency on any event in the conversation\n                var amountWithCurrency = g.LastOrDefault(x => x.PriceAmount.HasValue && !string.IsNullOrWhiteSpace(x.PriceCurrency));\n                if (amountWithCurrency?.IsChargeable == true) // only count billable windows\n                {\n                    var cur = amountWithCurrency.PriceCurrency!.ToUpperInvariant();\n                    var amt = amountWithCurrency.PriceAmount!.Value;\n                    spendByCurrency[cur] = spendByCurrency.TryGetValue(cur, out var sum) ? sum + amt : amt;\n                }\n            }\n\n            // Compose DTO\n            var dto = new BillingSnapshotDto\n            {\n                TotalMessages = totalMessages,\n                // These two are now \"window\"-level metrics (conversations) ‚Äì most accurate for billing with Meta.\n                ChargeableMessages = chargeableWindows,\n                FreeMessages = freeWindows,\n                CountByCategory = countByCategory,\n                SpendByCurrency = spendByCurrency\n            };\n\n            return dto;\n        }\n    }\n}\n\n\n//using System;\n//using System.Linq;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using xbytechat.api;\n//using xbytechat_api.Features.Billing.DTOs;\n\n//namespace xbytechat_api.Features.Billing.Services\n//{\n//    public class BillingReadService : IBillingReadService\n//    {\n//        private readonly AppDbContext _db;\n//        public BillingReadService(AppDbContext db) => _db = db;\n\n//        public async Task<BillingSnapshotDto> GetBusinessBillingSnapshotAsync(Guid businessId, DateOnly from, DateOnly to)\n//        {\n//            var fromDt = from.ToDateTime(TimeOnly.MinValue, DateTimeKind.Utc);\n//            var toDt = to.ToDateTime(TimeOnly.MaxValue, DateTimeKind.Utc);\n\n//            var q = _db.MessageLogs.AsNoTracking()\n//                    .Where(x => x.BusinessId == businessId && x.CreatedAt >= fromDt && x.CreatedAt <= toDt);\n\n//            var list = await q.Select(x => new {\n//                x.IsChargeable,\n//                x.ConversationCategory,\n//                x.PriceAmount,\n//                x.PriceCurrency\n//            }).ToListAsync();\n\n//            var dto = new BillingSnapshotDto\n//            {\n//                TotalMessages = list.Count,\n//                ChargeableMessages = list.Count(x => x.IsChargeable == true),\n//                FreeMessages = list.Count(x => x.IsChargeable == false)\n//            };\n\n//            dto.CountByCategory = list\n//                .GroupBy(x => string.IsNullOrWhiteSpace(x.ConversationCategory) ? \"unknown\" : x.ConversationCategory!.ToLowerInvariant())\n//                .ToDictionary(g => g.Key, g => g.Count());\n\n//            dto.SpendByCurrency = list\n//                .Where(x => x.PriceAmount.HasValue && !string.IsNullOrWhiteSpace(x.PriceCurrency))\n//                .GroupBy(x => x.PriceCurrency!)\n//                .ToDictionary(g => g.Key, g => g.Sum(v => v.PriceAmount!.Value));\n\n//            return dto;\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/Billing/Services/IBillingIngestService.cs",
      "sha256": "8678a1ec3a5979b124caa81faa47d93d5ca21bd8c0d97bf35a8d55bb50824bdf",
      "language": "csharp",
      "size": 416,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat_api.Features.Billing.DTOs;\n\nnamespace xbytechat_api.Features.Billing.Services\n{\n    public interface IBillingIngestService\n    {\n        Task IngestFromSendResponseAsync(Guid businessId, Guid messageLogId, string provider, string rawResponseJson);\n        Task IngestFromWebhookAsync(Guid businessId, string provider, string payloadJson);\n        \n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Billing/Services/IBillingReadService.cs",
      "sha256": "146ab2ebc0dea7d43cd6d050c51c28118cf4c7655b369657e198861aa6c9c3ca",
      "language": "csharp",
      "size": 306,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat_api.Features.Billing.DTOs;\n\nnamespace xbytechat_api.Features.Billing.Services\n{\n    public interface IBillingReadService\n    {\n        Task<BillingSnapshotDto> GetBusinessBillingSnapshotAsync(Guid businessId, DateOnly from, DateOnly to);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/Controllers/BusinessesController.cs",
      "sha256": "a37f76360f9d1f356eb29e802bba2b199ff644811854d1f026ee04e86b3f06d2",
      "language": "csharp",
      "size": 6134,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Helpers;\nusing Serilog;\nusing System.Security.Claims;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing Microsoft.AspNetCore.Authorization;\n\nnamespace xbytechat.api.Features.BusinessModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BusinessesController : ControllerBase\n    {\n        private readonly IBusinessService _businessService;\n\n        public BusinessesController(IBusinessService businessService)\n        {\n            _businessService = businessService;\n        }\n\n\n\n        [HttpGet(\"pending\")]\n        [Authorize(Roles = \"admin,superadmin,partner\")] // partners see scoped; admin/superadmin see ALL\n        public async Task<IActionResult> GetPendingBusinesses()\n        {\n            try\n            {\n                // Read role/id from multiple possible claim types\n                var role = User.FindFirst(ClaimTypes.Role)?.Value\n                           ?? User.FindFirst(\"role\")?.Value\n                           ?? User.FindFirst(\"roles\")?.Value\n                           ?? \"\";\n\n                var userId = User.FindFirst(\"id\")?.Value\n                           ?? User.FindFirst(ClaimTypes.NameIdentifier)?.Value\n                           ?? User.FindFirst(\"sub\")?.Value\n                           ?? \"\";\n\n                var result = await _businessService.GetPendingBusinessesAsync(role, userId);\n                return Ok(ResponseResult.SuccessInfo(\"‚úÖ Pending businesses fetched successfully.\", result));\n            }\n            catch\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"‚ùå Failed to fetch pending businesses. Please try again later.\"));\n            }\n        }\n\n\n        // ‚úÖ Get business by ID (used for profile completion)\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetBusinessById(Guid id)\n        {\n            try\n            {\n                var business = await _businessService.GetByIdAsync(id);\n                if (business == null)\n                    return NotFound(ResponseResult.ErrorInfo(\"‚ùå Business not found.\"));\n\n                return Ok(business);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Failed to fetch business. \" + ex.Message));\n            }\n        }\n\n        [HttpPut(\"assigned-to/{id}\")]\n        public async Task<IActionResult> UpdateBusiness(Guid id, [FromBody] Business business)\n        {\n            if (id != business.Id)\n            {\n                return BadRequest(new { message = \"‚ùå ID mismatch.\" });\n            }\n\n            var result = await _businessService.UpdateBusinessAsync(business);\n            if (!result.Success)\n            {\n                return BadRequest(result);\n            }\n\n            return Ok(result);\n        }\n\n\n        // üü¢ Approve a business\n        [HttpPost(\"approve/{id}\")]\n        public async Task<IActionResult> Approve(Guid id)\n        {\n            try\n            {\n                var result = await _businessService.ApproveBusinessAsync(id);\n\n                if (result.Success)\n                {\n                    // ‚úÖ Optional Success Logging\n                    Log.Information(\"‚úÖ Business approved successfully. BusinessId: {BusinessId}\", id);\n                    return Ok(result);\n                }\n                else\n                {\n                    // ‚úÖ Optional Warning Logging\n                    Log.Warning(\"‚ö†Ô∏è Business approval failed. BusinessId: {BusinessId} - Message: {Message}\", id, result.Message);\n                    return BadRequest(result);\n                }\n            }\n            catch (Exception ex)\n            {\n                // ‚úÖ Proper Error Logging\n                Log.Error(ex, \"‚ùå Exception occurred while approving business. BusinessId: {BusinessId}\", id);\n\n                return StatusCode(500, ResponseResult.ErrorInfo(\n                    \"‚ùå Something went wrong while approving business. Please try again later.\"\n                ));\n            }\n        }\n\n\n        // üî¥ Reject a business\n        [HttpPost(\"reject/{id}\")]\n        public async Task<IActionResult> Reject(Guid id)\n        {\n            try\n            {\n                var result = await _businessService.RejectBusinessAsync(id);\n                return result.Success ? Ok(result) : NotFound(result);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"‚ùå Failed to reject business. \" + ex.Message));\n            }\n        }\n\n        // üü° Put a business on hold\n        [HttpPost(\"hold/{id}\")]\n        public async Task<IActionResult> Hold(Guid id)\n        {\n            try\n            {\n                var result = await _businessService.HoldBusinessAsync(id);\n                return result.Success ? Ok(result) : NotFound(result);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"‚ùå Failed to hold business. \" + ex.Message));\n            }\n        }\n\n        // üõ† Complete profile after signup\n        [HttpPost(\"profile-completion/{businessId}\")]\n        public async Task<IActionResult> CompleteProfile(Guid businessId, [FromBody] ProfileCompletionDto dto)\n        {\n            try\n            {\n                var result = await _businessService.CompleteProfileAsync(businessId, dto);\n                return result.Success ? Ok(result) : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"‚ùå Failed to update profile. \" + ex.Message));\n            }\n        }\n\n        [HttpGet(\"approved\")]\n        [Authorize(Roles = \"SuperAdmin\")]\n        public async Task<IActionResult> GetApprovedBusinesses()\n        {\n            var result = await _businessService.GetApprovedBusinessesAsync();\n            return Ok(result);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/DTOs/PendingBusinessDto.cs",
      "sha256": "262c7390254b692bef62525ec48c34eb502354e446d2e98e77586b32f640f2be",
      "language": "csharp",
      "size": 482,
      "content": "namespace xbytechat.api.Features.BusinessModule.DTOs\n{\n    public class PendingBusinessDto\n    {\n        public Guid BusinessId { get; set; }\n        public string CompanyName { get; set; }\n        public string BusinessEmail { get; set; }\n        public string? RepresentativeName { get; set; }\n        public string? Phone { get; set; }\n        public string Plan { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public bool? IsApproved { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/DTOs/ProfileCompletionDto.cs",
      "sha256": "cbd238cd045c0ee7bfc5061311058fa84005f29244727a11ef5b7a6eedbcf64f",
      "language": "csharp",
      "size": 489,
      "content": "namespace xbytechat.api.Features.BusinessModule.DTOs\n{\n    public class ProfileCompletionDto\n    {\n        public string? BusinessName { get; set; }\n        public string? ReperesentativeName { get; set; }\n        public string? CompanyPhone { get; set; }\n        public string? Phone { get; set; }\n        public string? Website { get; set; }\n        public string? Address { get; set; }\n        public string? Industry { get; set; }\n        public string? LogoUrl { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/DTOs/SignupBusinessDto.cs",
      "sha256": "daebace2d54e91a96825decc469c8acd57822d3e74bd5271ca80792e36cbb30e",
      "language": "csharp",
      "size": 717,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.BusinessModule.DTOs\n{\n    public class SignupBusinessDto\n    {\n        [Required]\n        public string CompanyName { get; set; }\n\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        public string Password { get; set; }\n\n        public string? RepresentativeName { get; set; }\n\n        public string? Phone { get; set; }\n        public string RoleName { get; set; } = \"business\"; // Default to business role\n\n        // üÜï NEW FIELD (Internal use only)\n        public Guid? CreatedByPartnerId { get; set; } // to assign the business to a specific user/agent/partner}\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/Models/Business.cs",
      "sha256": "88684dd541d49eb7c1c8d896f46aa2a50c59c2f7385cdbaae206d7829b0616c3",
      "language": "csharp",
      "size": 2914,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.BusinessModule.Models\n{\n    public class Business\n    {\n        public Guid Id { get; set; }\n\n        // üè¢ Basic Info\n        public string? CompanyName { get; set; }\n        public string BusinessName { get; set; }\n        public string BusinessEmail { get; set; }  // Not used for login, just business contact\n        public string? RepresentativeName { get; set; }\n\n        public Guid? CreatedByPartnerId { get; set; }\n        public string? Phone { get; set; }\n        public string? CompanyPhone { get; set; }\n        public string? Website { get; set; }\n        public string? Address { get; set; }\n        public string? Industry { get; set; }\n        public string? LogoUrl { get; set; }\n\n        // üì¶ SaaS Plan & Status using Enums\n        // public enum PlanType { Basic, Smart, Advanced } -- moved to bisinessinfo\n        // public PlanType Plan { get; set; } = PlanType.Basic;  // moved to bisinessinfo\n        public enum StatusType { Pending, Approved, Rejected }\n        public StatusType Status { get; set; } = StatusType.Pending;  // Default to Pending\n\n        // üìù Metadata\n        public string? Tags { get; set; }\n        public string? Source { get; set; }\n        public string? Notes { get; set; }\n\n        // üìÖ Timestamps\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? CreatedBy { get; set; }\n        public bool IsApproved { get; set; } = false;\n        public string? ApprovedBy { get; set; }\n        public DateTime? ApprovedAt { get; set; }\n        public DateTime? LastLoginAt { get; set; }\n\n        // üóë Soft Deletion\n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n        public string? DeletedBy { get; set; }\n\n        // üë• Navigation Property - List of Users (nullable if no users)\n        public List<User> Users { get; set; } = new();\n\n\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n        public ICollection<Campaign> Campaigns { get; set; } = new List<Campaign>();\n        // üîó Plan Info linked\n\n        /// This is a one-to-one relationship with BusinessPlanInfo\n        public BusinessPlanInfo? BusinessPlanInfo { get; set; }\n\n        public Guid? PlanId { get; set; } // Nullable in case no plan is assigned yet\n        public Plan? Plan { get; set; }   // Navigation property to the Plan entity\n\n       // public WhatsAppSettingEntity WhatsAppSettings { get; set; }\n        public ICollection<WhatsAppSettingEntity> WhatsAppSettings { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/Services/BusinessService.cs",
      "sha256": "d6d0693abd329640c88df84e5a648966ef197a27291c9889c12bf27c3c67f355",
      "language": "csharp",
      "size": 18183,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing System.Security.Cryptography;\nusing System.Text;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.AuditTrail.Services;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Repositories.Interfaces;\n\nnamespace xbytechat.api.Features.BusinessModule.Services\n{\n    public class BusinessService : IBusinessService\n    {\n        private readonly IGenericRepository<Business> _businessRepo;\n        private readonly IGenericRepository<User> _userRepo;\n        private readonly IGenericRepository<Role> _roleRepo;\n        private readonly IAuditLogService _auditLogService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        // inside BusinessService class (class scope, not inside a method)\n        private static readonly Guid BASIC_PLAN_ID = Guid.Parse(\"5f9f5de1-a0b2-48ba-b03d-77b27345613f\");\n\n        public BusinessService(\n            IGenericRepository<Business> businessRepo,\n            IGenericRepository<User> userRepo,\n            IGenericRepository<Role> roleRepo,\n            IAuditLogService auditLogService,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _businessRepo = businessRepo;\n            _userRepo = userRepo;\n            _roleRepo = roleRepo;\n            _auditLogService = auditLogService;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        public async Task<ResponseResult> SignupBusinessAsync(SignupBusinessDto dto)\n        {\n            var normalizedEmail = dto.Email.Trim().ToLower();\n            var existing = await _userRepo.FirstOrDefaultAsync(u => u.Email == normalizedEmail);\n            if (existing != null)\n                return ResponseResult.ErrorInfo(\"‚ùå Email already exists\");\n\n            var business = new Business\n            {\n                Id = Guid.NewGuid(),\n                CompanyName = dto.CompanyName,\n                BusinessName = dto.CompanyName,\n                BusinessEmail = normalizedEmail,\n                RepresentativeName = dto.RepresentativeName,\n                Phone = dto.Phone,\n                Status = Business.StatusType.Pending,\n                // Plan = PlanType.Basic,\n                IsApproved = false,\n                CreatedAt = DateTime.UtcNow,\n                PlanId = BASIC_PLAN_ID   // ‚úÖ hard-code Basic plan here\n            };\n            // STEP 2: Create Plan Info separately\n            var planInfo = new BusinessPlanInfo\n            {\n                BusinessId = business.Id,\n                Plan = PlanType.Basic,\n                TotalMonthlyQuota = 1000,\n                RemainingMessages = 1000,\n                QuotaResetDate = DateTime.UtcNow.AddMonths(1),\n                WalletBalance = 0\n            };\n            // STEP 3: Link them\n            business.BusinessPlanInfo = planInfo;\n            // STEP 4: Save both\n            await _businessRepo.AddAsync(business);\n            await _businessRepo.SaveAsync();\n\n            var role = await _roleRepo.FirstOrDefaultAsync(r => r.Name.ToLower() == dto.RoleName.Trim().ToLower());\n\n            if (role == null)\n                return ResponseResult.ErrorInfo(\"‚ùå Invalid role specified\");\n\n            var user = new User\n            {\n                Id = Guid.NewGuid(),\n                Name = dto.CompanyName,\n                Email = normalizedEmail,\n                PasswordHash = HashPassword(dto.Password),\n                Role = role,\n                Status = \"Pending\",\n                BusinessId = business.Id\n            };\n\n            await _userRepo.AddAsync(user);\n            await _userRepo.SaveAsync();\n\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = user.Id,\n                PerformedByUserName = user.Name,\n                RoleAtTime = \"business\",\n                ActionType = \"business.signup\",\n                Description = $\"New business signup: {business.CompanyName}\",\n                IPAddress = _httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = _httpContextAccessor.HttpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"‚úÖ Signup successful. Pending approval.\", new { BusinessId = business.Id });\n        }\n\n        public async Task<ResponseResult> UpdateBusinessAsync(Business business)\n        {\n            if (business == null)\n                return ResponseResult.ErrorInfo(\"‚ùå Invalid business object provided.\");\n\n            try\n            {\n                _businessRepo.Update(business);\n                await _businessRepo.SaveAsync();\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Business updated successfully.\");\n            }\n            catch (Exception ex)\n            {\n                // üö® Catch any unexpected error\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to update business: \" + ex.Message);\n            }\n        }\n\n        //public async Task<List<PendingBusinessDto>> GetPendingBusinessesAsync(string role, string userId)\n        //{\n        //    try\n        //    {\n        //        role = role?.ToLowerInvariant();\n\n        //         ‚úÖ Superadmin / admin: see ALL pending, ignore userId\n        //        if (role == \"superadmin\" || role == \"admin\")\n        //        {\n        //            var all = await _businessRepo.AsQueryable()\n        //                .Where(b => b.Status == Business.StatusType.Pending && !b.IsDeleted)\n        //                .OrderByDescending(b => b.CreatedAt)\n        //                .ToListAsync();\n\n        //            return all.Select(b => new PendingBusinessDto\n        //            {\n        //                BusinessId = b.Id,\n        //                CompanyName = b.CompanyName ?? \"\",\n        //                BusinessEmail = b.BusinessEmail ?? \"\",\n        //                RepresentativeName = b.RepresentativeName ?? \"\",\n        //                Phone = b.Phone ?? \"\",\n        //                Plan = b.BusinessPlanInfo?.Plan.ToString() ?? \"Unknown\",\n        //                CreatedAt = b.CreatedAt,\n        //                IsApproved = b.IsApproved\n        //            }).ToList();\n        //        }\n\n        //         üß≠ Partner: scoped list(unchanged)\n        //        if (role == \"partner\" && Guid.TryParse(userId, out var partnerGuid))\n        //        {\n        //            var scoped = await _businessRepo.AsQueryable()\n        //                .Where(b => b.Status == Business.StatusType.Pending\n        //                            && !b.IsDeleted\n        //                            && b.CreatedByPartnerId == partnerGuid)\n        //                .OrderByDescending(b => b.CreatedAt)\n        //                .ToListAsync();\n\n        //            return scoped.Select(b => new PendingBusinessDto\n        //            {\n        //                BusinessId = b.Id,\n        //                CompanyName = b.CompanyName ?? \"\",\n        //                BusinessEmail = b.BusinessEmail ?? \"\",\n        //                RepresentativeName = b.RepresentativeName ?? \"\",\n        //                Phone = b.Phone ?? \"\",\n        //                Plan = b.BusinessPlanInfo?.Plan.ToString() ?? \"Unknown\",\n        //                CreatedAt = b.CreatedAt,\n        //                IsApproved = b.IsApproved\n        //            }).ToList();\n        //        }\n\n        //        Everyone else: empty\n        //        return new();\n        //    }\n        //    catch\n        //    {\n        //        return new();\n        //    }\n        //}\n\n\n        public async Task<List<PendingBusinessDto>> GetPendingBusinessesAsync(string role, string userId)\n        {\n            try\n            {\n                var roleLc = (role ?? \"\").ToLowerInvariant();\n\n                // base: pending + not deleted\n                IQueryable<Business> q = _businessRepo.AsQueryable()\n                    .AsNoTracking()\n                    .Include(b => b.BusinessPlanInfo)   // ‚úÖ load enum Plan from BusinessPlanInfo\n                                                        // .Include(b => b.Plan)            // ‚Üê only if you have a Plan navigation property\n                    .Where(b => b.Status == Business.StatusType.Pending && !b.IsDeleted);\n\n                // scope for partner\n                if (roleLc == \"partner\")\n                {\n                    if (!Guid.TryParse(userId, out var partnerId)) return new();\n                    q = q.Where(b => b.CreatedByPartnerId == partnerId);\n                }\n                else if (roleLc != \"admin\" && roleLc != \"superadmin\")\n                {\n                    return new(); // anyone else: nothing\n                }\n\n                var items = await q.OrderByDescending(b => b.CreatedAt).ToListAsync();\n\n                // Map to your existing DTO; with Include() the enum will be present\n                return items.Select(b => new PendingBusinessDto\n                {\n                    BusinessId = b.Id,\n                    CompanyName = b.CompanyName ?? \"\",\n                    BusinessEmail = b.BusinessEmail ?? \"\",\n                    RepresentativeName = b.RepresentativeName ?? \"\",\n                    Phone = b.Phone ?? \"\",\n                    // Shows \"Basic\" etc. because BusinessPlanInfo is now loaded\n                    Plan = b.BusinessPlanInfo?.Plan.ToString() ?? \"Unknown\",\n                    CreatedAt = b.CreatedAt,\n                    IsApproved = b.IsApproved\n                }).ToList();\n            }\n            catch\n            {\n                return new();\n            }\n        }\n\n        public async Task<ResponseResult> ApproveBusinessAsync(Guid businessId)\n        {\n            var business = await _businessRepo\n                .AsQueryable()\n                .Include(b => b.Users)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n                return ResponseResult.ErrorInfo(\"‚ùå Business not found.\");\n\n            // ‚úÖ Current Logged-in User Details\n            var httpContext = _httpContextAccessor.HttpContext;\n            var currentUserId = httpContext?.User?.FindFirst(\"id\")?.Value;\n            var currentUserRole = httpContext?.User?.Claims\n    .FirstOrDefault(c => c.Type.Contains(\"role\"))?.Value;\n            //httpContext?.User?.FindFirst(\"role\")?.Value;\n\n            // var currentUserName = httpContext?.User?.FindFirst(\"name\")?.Value ?? \"Unknown\";\n            var currentUserName = httpContext?.User?.Claims\n    .FirstOrDefault(c => c.Type.Contains(\"name\"))?.Value ?? \"Unknown\";\n            if (string.IsNullOrEmpty(currentUserId) || string.IsNullOrEmpty(currentUserRole))\n                return ResponseResult.ErrorInfo(\"‚ùå Unauthorized access. Please login again.\");\n\n            var currentGuid = Guid.Parse(currentUserId);\n\n            // ‚úÖ Authorization Logic\n            var isSuperAdmin = currentUserRole.Equals(\"admin\", StringComparison.OrdinalIgnoreCase) ||\n                               currentUserRole.Equals(\"superadmin\", StringComparison.OrdinalIgnoreCase);\n\n            var isAssignedPartner = business.CreatedByPartnerId.HasValue &&\n                                     business.CreatedByPartnerId.Value == currentGuid;\n\n            if (!isSuperAdmin && !isAssignedPartner)\n            {\n                return ResponseResult.ErrorInfo(\"‚õî You are not authorized to approve this business.\");\n            }\n\n            // ‚úÖ Approve Business\n       \n            business.IsApproved = true;\n            business.Status = Business.StatusType.Approved;\n            business.ApprovedAt = DateTime.UtcNow;\n            business.ApprovedBy = currentUserName;\n                       _businessRepo.Update(business);\n\n            // ‚úÖ Update all Users to \"ProfilePending\"\n            foreach (var user in business.Users)\n            {\n                user.Status = \"Active\";\n                _userRepo.Update(user);\n            }\n\n            await _businessRepo.SaveAsync();\n            await _userRepo.SaveAsync();\n\n            // ‚úÖ Audit Log\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = currentGuid,\n                PerformedByUserName = currentUserName,\n                RoleAtTime = currentUserRole,\n                ActionType = \"business.approved\",\n                Description = $\"Business approved: {business.CompanyName}\",\n                IPAddress = httpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = httpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"‚úÖ Business approved successfully.\");\n        }\n\n        public async Task<ResponseResult> RejectBusinessAsync(Guid businessId)\n        {\n            var business = await _businessRepo.FindByIdAsync(businessId);\n            if (business is null)\n                return ResponseResult.ErrorInfo(\"‚ùå Business not found\");\n\n            business.Status = Business.StatusType.Rejected;\n            business.IsDeleted = true;\n            business.DeletedAt = DateTime.UtcNow;\n\n            _businessRepo.Update(business);\n            await _businessRepo.SaveAsync();\n\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = Guid.TryParse(_httpContextAccessor.HttpContext?.User?.FindFirst(\"id\")?.Value, out var userId) ? userId : Guid.Empty,\n                PerformedByUserName = _httpContextAccessor.HttpContext?.User?.FindFirst(\"email\")?.Value,\n                RoleAtTime = _httpContextAccessor.HttpContext?.User?.FindFirst(\"role\")?.Value,\n                ActionType = \"business.rejected\",\n                Description = $\"Business rejected: {business.CompanyName}\",\n                IPAddress = _httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = _httpContextAccessor.HttpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"‚úÖ Business rejected and marked as deleted\");\n        }\n\n        public async Task<ResponseResult> HoldBusinessAsync(Guid businessId)\n        {\n            var business = await _businessRepo.FindByIdAsync(businessId);\n            if (business is null)\n                return ResponseResult.ErrorInfo(\"‚ùå Business not found\");\n\n            business.IsApproved = false;\n            business.Status = Business.StatusType.Pending;\n\n            _businessRepo.Update(business);\n            await _businessRepo.SaveAsync();\n\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = Guid.TryParse(_httpContextAccessor.HttpContext?.User?.FindFirst(\"id\")?.Value, out var userId) ? userId : Guid.Empty,\n                PerformedByUserName = _httpContextAccessor.HttpContext?.User?.FindFirst(\"email\")?.Value,\n                RoleAtTime = _httpContextAccessor.HttpContext?.User?.FindFirst(\"role\")?.Value,\n                ActionType = \"business.hold\",\n                Description = $\"Business put on hold: {business.CompanyName}\",\n                IPAddress = _httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = _httpContextAccessor.HttpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"‚è∏ Business put on hold\");\n        }\n\n        public async Task<ResponseResult> CompleteProfileAsync(Guid businessId, ProfileCompletionDto dto)\n        {\n            var business = await _businessRepo.FindByIdAsync(businessId);\n            if (business is null)\n                return ResponseResult.ErrorInfo(\"‚ùå Business not found\");\n\n            if (!string.IsNullOrEmpty(dto.BusinessName)) business.BusinessName = dto.BusinessName;\n            if (!string.IsNullOrEmpty(dto.CompanyPhone)) business.CompanyPhone = dto.CompanyPhone;\n            if (!string.IsNullOrEmpty(dto.Website)) business.Website = dto.Website;\n            if (!string.IsNullOrEmpty(dto.Address)) business.Address = dto.Address;\n            if (!string.IsNullOrEmpty(dto.Industry)) business.Industry = dto.Industry;\n            if (!string.IsNullOrEmpty(dto.LogoUrl)) business.LogoUrl = dto.LogoUrl;\n            if (!string.IsNullOrEmpty(dto.ReperesentativeName)) business.RepresentativeName = dto.ReperesentativeName;\n            if (!string.IsNullOrEmpty(dto.Phone)) business.Phone = dto.Phone;\n            _businessRepo.Update(business);\n            await _businessRepo.SaveAsync();\n            return ResponseResult.SuccessInfo(\"‚úÖ Profile updated successfully\");\n        }\n\n        public async Task<Business?> GetBusinessByEmailAsync(string email)\n        {\n            return await _businessRepo.FirstOrDefaultAsync(b => b.BusinessEmail.ToLower() == email.Trim().ToLower());\n        }\n\n        private string HashPassword(string password)\n        {\n            using var sha = SHA256.Create();\n            var bytes = Encoding.UTF8.GetBytes(password);\n            var hash = sha.ComputeHash(bytes);\n            return Convert.ToBase64String(hash);\n        }\n\n        public async Task<Business?> GetByIdAsync(Guid businessId)\n        {\n            return await _businessRepo.FindByIdAsync(businessId);\n        }\n\n        public async Task<List<Business>> GetApprovedBusinessesAsync()\n        {\n            return await _businessRepo.AsQueryable()\n               .Where(b => b.IsApproved && !b.IsDeleted)\n               .OrderBy(b => b.CompanyName)\n               .ToListAsync();\n        }\n        public IQueryable<Business> Query()\n        {\n            return _businessRepo.AsQueryable();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/Services/IBusinessService.cs",
      "sha256": "5205ee768b8669a55cd022a8bec1e88cabbc330f576d4532922b1e43378461ed",
      "language": "csharp",
      "size": 1180,
      "content": "using System.Runtime.CompilerServices;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nnamespace xbytechat.api.Features.BusinessModule.Services\n{\n\n    public interface IBusinessService\n    {\n        IQueryable<Business> Query();\n        Task<ResponseResult> SignupBusinessAsync(SignupBusinessDto dto); /// Signup + create admin user\n\n        Task<ResponseResult> ApproveBusinessAsync(Guid businessId);      // Admin action\n        Task<ResponseResult> RejectBusinessAsync(Guid businessId);       // Admin action\n        Task<ResponseResult> HoldBusinessAsync(Guid businessId);         // Admin action\n        Task<ResponseResult> CompleteProfileAsync(Guid businessId, ProfileCompletionDto dto); // Post-login completion\n        Task<Business?> GetBusinessByEmailAsync(string email);\n        Task<Business?> GetByIdAsync(Guid businessId);\n        Task<ResponseResult> UpdateBusinessAsync(Business business);\n        Task<List<PendingBusinessDto>> GetPendingBusinessesAsync(string role, string userId);\n        Task<List<Business>> GetApprovedBusinessesAsync();\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignController.cs",
      "sha256": "3ac64096a0e207027ed704a44ed1519f3a97ddcd184cde3ab9373c70938316b0",
      "language": "csharp",
      "size": 13885,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing static xbytechat.api.Features.MessagesEngine.Controllers.MessageEngineController;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignController : ControllerBase\n    {\n        private readonly ICampaignService _campaignService;\n        private readonly IBusinessService _businessService;\n        private readonly IMessageEngineService _messageService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public CampaignController(\n            ICampaignService campaignService,\n            IBusinessService businessService,\n            IMessageEngineService messageEngineService,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _campaignService = campaignService;\n            _businessService = businessService;\n            _messageService = messageEngineService;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n\n        [HttpGet(\"get-image-campaign\")]\n        public async Task<IActionResult> GetAll([FromQuery] string? type)\n        {\n            var businessId = GetBusinessIdOrThrow();\n            var items = await _campaignService.GetAllCampaignsAsync(businessId, type);\n            return Ok(items);\n        }\n        [HttpGet(\"paginated\")]\n        public async Task<IActionResult> GetPaginatedCampaigns([FromQuery] PaginatedRequest request)\n        {\n            var user = HttpContext.User;\n            var businessIdClaim = user.FindFirst(\"businessId\");\n\n            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n            var result = await _campaignService.GetPaginatedCampaignsAsync(businessId, request);\n            return Ok(result);\n        }\n\n        [HttpGet(\"debug-claims\")]\n        public IActionResult DebugClaims()\n        {\n            var user = HttpContext.User;\n            var businessId = user.FindFirst(\"businessId\")?.Value;\n\n            return Ok(new\n            {\n                name = user.Identity?.Name,\n                businessId\n            });\n        }\n\n        [HttpPost(\"create-text-campaign\")]\n        public async Task<IActionResult> CreateTextCampaign([FromBody] CampaignCreateDto dto)\n        {\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out var businessId))\n                    return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n                var createdBy = User.Identity?.Name ?? \"system\";\n\n                if (string.IsNullOrWhiteSpace(dto.Name))\n                    return BadRequest(new { message = \"üö´ Campaign name is required.\" });\n\n                if (string.IsNullOrWhiteSpace(dto.TemplateId))\n                    return BadRequest(new { message = \"üö´ TemplateId is required for template campaigns.\" });\n\n                if (string.IsNullOrWhiteSpace(dto.MessageTemplate))\n                    return BadRequest(new { message = \"üö´ Message template content is required.\" });\n\n                var campaignId = await _campaignService.CreateTextCampaignAsync(dto, businessId, createdBy);\n\n                return campaignId != null\n                    ? Ok(new\n                    {\n                        success = true,\n                        message = \"‚úÖ Campaign created successfully\",\n                        campaignId = campaignId.Value\n                    })\n                    : BadRequest(new { success = false, message = \"‚ùå Failed to create campaign\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception in CreateTextCampaign\");\n                return StatusCode(500, new { message = \"üö® Internal server error\", error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"create-image-campaign\")]\n        public async Task<IActionResult> CreateImageCampaign([FromBody] CampaignCreateDto dto)\n        {\n            try\n            {\n                var user = HttpContext.User;\n                var businessIdClaim = user.FindFirst(\"businessId\");\n\n                if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                    return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var allowedTypes = new[] { \"url\", \"copy_code\", \"flow\", \"phone_number\", \"quick_reply\" };\n                    foreach (var button in dto.MultiButtons)\n                    {\n                        var type = button.ButtonType?.Trim().ToLower();\n\n                        if (!allowedTypes.Contains(type))\n                            return BadRequest(new { message = $\"‚ùå Invalid ButtonType: '{type}' is not supported.\" });\n\n                        var needsValue = new[] { \"url\", \"flow\", \"copy_code\", \"phone_number\" };\n                        if (needsValue.Contains(type) && string.IsNullOrWhiteSpace(button.TargetUrl))\n                            return BadRequest(new { message = $\"‚ùå Button '{button.ButtonText}' requires a valid TargetUrl or Value for type '{type}'.\" });\n\n                        if (button.TargetUrl?.ToLower() == \"unknown\")\n                            return BadRequest(new { message = $\"‚ùå Invalid value 'unknown' found in button '{button.ButtonText}'.\" });\n                    }\n                }\n\n                var createdBy = user.Identity?.Name ?? \"system\";\n                var campaignId = await _campaignService.CreateImageCampaignAsync(businessId, dto, createdBy);\n\n                return Ok(new\n                {\n                    success = true,\n                    message = \"‚úÖ Campaign created successfully\",\n                    campaignId\n                });\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return BadRequest(new { message = ex.Message });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception in CreateImageCampaign\");\n                return StatusCode(500, new { message = \"üö® Internal server error\", error = ex.Message });\n            }\n        }\n\n        // ‚úÖ Moved above {id} routes\n        [HttpPost(\"{id}/assign-contacts\")]\n        public async Task<IActionResult> AssignContactsToCampaign(Guid id, [FromBody] AssignContactsDto request)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var success = await _campaignService.AssignContactsToCampaignAsync(id, businessId, request.ContactIds);\n\n                return success\n                    ? Ok(new { message = \"‚úÖ Contacts assigned\" })\n                    : BadRequest(new { message = \"‚ùå Failed to assign contacts\" });\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error assigning contacts: \" + ex.Message);\n                return StatusCode(500, new { message = \"Internal error\", error = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"{campaignId}/recipients/{contactId}\")]\n        public async Task<IActionResult> RemoveCampaignRecipient(Guid campaignId, Guid contactId)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var success = await _campaignService.RemoveRecipientAsync(businessId, campaignId, contactId);\n\n                if (!success)\n                    return NotFound(new { message = \"Recipient not found or not assigned\" });\n\n                return NoContent();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Remove recipient failed: \" + ex.Message);\n                return StatusCode(500, new { message = \"Error removing recipient\", detail = ex.Message });\n            }\n        }\n\n        // Put this inside CampaignService (same class as SendTemplateCampaignWithTypeDetectionAsync)\n        private static string? ResolveRecipientPhone(CampaignRecipient r)\n        {\n            // Try Contact first, then AudienceMember fallbacks\n            return r?.Contact?.PhoneNumber\n                ?? r?.AudienceMember?.PhoneE164\n                ?? r?.AudienceMember?.PhoneRaw;\n        }\n\n        // Send All Type of campaign method \n        [HttpPost(\"send-campaign/{campaignId}\")] // use to send free text and Template campaigns\n        public async Task<IActionResult> SendTemplateCampaign(Guid campaignId)\n        {\n            try\n            {\n                var result = await _campaignService.SendTemplateCampaignWithTypeDetectionAsync(campaignId);\n                return result.Success ? Ok(result) : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception while sending image template campaign\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending campaign\", ex.ToString()));\n            }\n        }\n\n        [HttpPost(\"send-template-campaign/{id}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid id)\n        {\n            var result = await _campaignService.SendTemplateCampaignAsync(id);\n            return result.Success ? Ok(result) : BadRequest(result);\n        }\n\n        [HttpPost(\"send/{campaignId}\")]\n        public async Task<IActionResult> SendCampaign(Guid campaignId)\n        {\n            try\n            {\n                var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n                var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n                var success = await _campaignService.SendCampaignAsync(campaignId, ipAddress, userAgent);\n\n                return success\n                    ? Ok(new { success = true, message = \"‚úÖ Campaign sent successfully\" })\n                    : BadRequest(new { success = false, message = \"‚ùå Campaign sending failed\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception in SendCampaign\");\n                return StatusCode(500, new { success = false, message = \"üö® Internal Server Error\", error = ex.Message });\n            }\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateCampaign(Guid id, [FromBody] CampaignCreateDto dto)\n        {\n            var result = await _campaignService.UpdateCampaignAsync(id, dto);\n            return result\n                ? Ok(new { message = \"‚úèÔ∏è Campaign updated successfully\" })\n                : BadRequest(new { message = \"‚ùå Update failed ‚Äî only draft campaigns can be edited\" });\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteCampaign(Guid id)\n        {\n            var result = await _campaignService.DeleteCampaignAsync(id);\n            return result\n                ? Ok(new { message = \"üóëÔ∏è Campaign deleted successfully\" })\n                : BadRequest(new { message = \"‚ùå Delete failed ‚Äî only draft campaigns can be deleted\" });\n        }\n        private Guid GetBusinessIdOrThrow()\n        {\n            string? raw =\n                User?.FindFirst(\"business_id\")?.Value ??\n                User?.FindFirst(\"BusinessId\")?.Value ??\n                User?.FindFirst(\"businessId\")?.Value ??\n                Request.Headers[\"X-Business-Id\"].FirstOrDefault();\n\n            if (!Guid.TryParse(raw, out var id))\n                throw new UnauthorizedAccessException(\"Business context missing.\");\n            return id;\n        }\n        [HttpGet(\"recipients/{id}\")]\n        public async Task<IActionResult> GetCampaignRecipients(Guid id)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var recipients = await _campaignService.GetRecipientsByCampaignIdAsync(id, businessId);\n                return Ok(recipients);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error fetching campaign recipients: \" + ex.Message);\n                return StatusCode(500, new { message = \"Error fetching recipients\", detail = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CampaignDto>> GetCampaignById(Guid id)\n        {\n            var businessId = GetBusinessId();\n            var campaign = await _campaignService.GetCampaignByIdAsync(id, businessId);\n\n            if (campaign == null)\n                return NotFound();\n\n            return Ok(campaign);\n        }\n\n        private Guid GetBusinessId()\n        {\n            var claim = HttpContext.User.FindFirst(\"businessId\")?.Value;\n            if (string.IsNullOrEmpty(claim))\n                throw new UnauthorizedAccessException(\"BusinessId not found in token claims.\");\n\n            return Guid.Parse(claim);\n        }\n    \n        [HttpGet(\"list/{businessId:guid}\")]\n        public async Task<IActionResult> GetAvailableFlows(Guid businessId, [FromQuery] bool onlyPublished = true)\n        {\n            var items = await _campaignService.GetAvailableFlowsAsync(businessId, onlyPublished);\n            return Ok(new { success = true, items });\n        }\n\n\n    }\n}\n"
    }
  ]
}
