{
  "name": "xbytechat-api",
  "part": 4,
  "of": 9,
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/MessageEngineService.cs",
      "sha256": "b4f78dc3f517b921c29931ef1d985e92b9c2117c23fd0073c623b531fbad696f",
      "language": "csharp",
      "size": 88090,
      "content": "// 📄 File: Features/MessagesEngine/Services/MessageEngineService.cs\nusing Newtonsoft.Json;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System.Net.Http;\nusing xbytechat.api.Shared.utility;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\n\n// ✅ provider abstraction + factory\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat.api.Features.MessagesEngine.Factory;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing xbytechat.api.CRM.Models;\nusing System.Collections.Concurrent;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class MessageEngineService : IMessageEngineService\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _http; // kept for other internal calls if any\n        private readonly TextMessagePayloadBuilder _textBuilder;\n        private readonly ImageMessagePayloadBuilder _imageBuilder;\n        private readonly TemplateMessagePayloadBuilder _templateBuilder;\n        private readonly CtaMessagePayloadBuilder _ctaBuilder;\n        private readonly IPlanManager _planManager;\n        private readonly IHubContext<InboxHub> _hubContext;\n        private readonly IMessageIdResolver _messageIdResolver;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IContactService _contactService;\n        private readonly ConcurrentDictionary<Guid, (IReadOnlyList<WhatsAppSettingEntity> setting, DateTime expiresAt)>\n _settingsCache = new();\n        // 🔄 Basic cache for WhatsApp settings to reduce DB load (kept for other paths)\n        //private static readonly Dictionary<Guid, (WhatsAppSettingEntity setting, DateTime expiresAt)> _settingsCache = new();\n\n        private readonly IWhatsAppProviderFactory _providerFactory;\n        private readonly ILogger<MessageEngineService> _logger;\n        public MessageEngineService(\n            AppDbContext db,\n            HttpClient http,\n            TextMessagePayloadBuilder textBuilder,\n            ImageMessagePayloadBuilder imageBuilder,\n            TemplateMessagePayloadBuilder templateBuilder,\n            CtaMessagePayloadBuilder ctaBuilder,\n            IPlanManager planManager,\n            IHubContext<InboxHub> hubContext,\n            IMessageIdResolver messageIdResolver,\n            IHttpContextAccessor httpContextAccessor,\n            IContactService contactService,\n            IWhatsAppProviderFactory providerFactory,\n            ILogger<MessageEngineService> logger\n        )\n        {\n            _db = db;\n            _http = http;\n            _textBuilder = textBuilder;\n            _imageBuilder = imageBuilder;\n            _templateBuilder = templateBuilder;\n            _ctaBuilder = ctaBuilder;\n            _planManager = planManager;\n            _hubContext = hubContext;\n            _messageIdResolver = messageIdResolver;\n            _httpContextAccessor = httpContextAccessor;\n            _contactService = contactService;\n            _providerFactory = providerFactory;\n            _logger = logger;\n        }\n\n        // INSERT: near other helpers / utilities\n        private static string ResolveGreeting(string? profileName, string? contactName)\n        {\n            var s = (profileName ?? contactName)?.Trim();\n            return string.IsNullOrEmpty(s) ? \"there\" : s;\n        }\n\n        private static void EnsureArgsLength(List<string> args, int slot1Based)\n        {\n            while (args.Count < slot1Based) args.Add(string.Empty);\n        }\n\n        // ✅ Public helper so both Flow + Campaign send paths can use it\n        public async Task<List<string>> ApplyProfileNameAsync(\n            Guid businessId,\n            Guid contactId,\n            bool useProfileName,\n            int? profileNameSlot,\n            List<string> args,\n            CancellationToken ct = default)\n        {\n            if (!useProfileName || !(profileNameSlot is int slot) || slot < 1)\n                return args;\n\n            // pull once from DB (cheap; uses your existing index on BusinessId/Id)\n            var contact = await _db.Contacts\n                .AsNoTracking()\n                .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId, ct);\n\n            var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);\n\n            EnsureArgsLength(args, slot);\n            args[slot - 1] = greet;\n\n            return args;\n        }\n\n\n        public async Task<ResponseResult> SendPayloadAsync(Guid businessId, string provider, object payload,         // \"PINNACLE\" or \"META_CLOUD\"object payload,\n        string? phoneNumberId = null)\n        {\n            // Validate provider (no server-side normalization)\n            if (string.IsNullOrWhiteSpace(provider) ||\n                (provider != \"PINNACLE\" && provider != \"META_CLOUD\"))\n            {\n                return ResponseResult.ErrorInfo(\"❌ Invalid provider.\",\n                    \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n            }\n\n            // Route to the correct provider + optional sender override\n            return await SendViaProviderAsync(\n                businessId,\n                provider,\n                p => p.SendInteractiveAsync(payload),\n                phoneNumberId\n            );\n        }\n\n\n\n\n\n        // MessageEngineService.cs\n       \n        private static string NormalizeProviderOrThrow(string? p)\n        {\n            if (string.IsNullOrWhiteSpace(p))\n                throw new ArgumentException(\"Provider is required.\");\n\n            var u = p.Trim().ToUpperInvariant();\n            // Map common aliases -> canonical constants\n            return u switch\n            {\n                \"META\" => \"META_CLOUD\",\n                \"META_CLOUD\" => \"META_CLOUD\",\n                \"PINNACLE\" => \"PINNACLE\",\n                _ => throw new ArgumentException($\"Invalid provider: {p}\")\n            };\n        }\n\n        private async Task<ResponseResult> SendViaProviderAsync(\n        Guid businessId,\n        string provider,                                // explicit\n        Func<IWhatsAppProvider, Task<WaSendResult>> action,\n        string? phoneNumberId = null)\n        {\n            try\n            {\n                // normalize + validate provider once\n                var normalizedProvider = NormalizeProviderOrThrow(provider);   // 👈\n\n                // For both META_CLOUD and PINNACLE we require a sender id\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                    return ResponseResult.ErrorInfo(\n                        \"❌ Campaign has no sender number.\",\n                        \"Missing PhoneNumberId\");\n\n                // Build the right provider instance bound to this business + number\n                var wa = await _providerFactory.CreateAsync(\n                    businessId,\n                    normalizedProvider,\n                    phoneNumberId);\n\n                var res = await action(wa);\n\n                if (!res.Success)\n                    return ResponseResult.ErrorInfo(\"❌ WhatsApp API returned an error.\", res.Error, res.RawResponse);\n\n                var rr = ResponseResult.SuccessInfo(\"✅ Message sent successfully\", data: null, raw: res.RawResponse);\n                rr.MessageId = string.IsNullOrWhiteSpace(res.ProviderMessageId)\n                    ? TryExtractMetaWamid(res.RawResponse)\n                    : res.ProviderMessageId;\n                return rr;\n            }\n            catch (ArgumentException ex) // from NormalizeProviderOrThrow\n            {\n                return ResponseResult.ErrorInfo(\"❌ Invalid provider.\", ex.Message);\n            }\n            catch (InvalidOperationException ex)\n            {\n                return ResponseResult.ErrorInfo(\"❌ Provider configuration error.\", ex.Message);\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"❌ Provider call failed.\", ex.Message);\n            }\n        }\n\n        private static string? TryExtractMetaWamid(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var s = raw.TrimStart();\n            if (!s.StartsWith(\"{\")) return null;\n            try\n            {\n                using var doc = System.Text.Json.JsonDocument.Parse(s);\n                if (doc.RootElement.TryGetProperty(\"messages\", out var msgs) &&\n                    msgs.ValueKind == System.Text.Json.JsonValueKind.Array &&\n                    msgs.GetArrayLength() > 0 &&\n                    msgs[0].TryGetProperty(\"id\", out var idProp))\n                {\n                    return idProp.GetString();\n                }\n            }\n            catch { }\n            return null;\n        }\n        // ---------- CSV-materialized variables helpers (for campaign recipients) ----------\n        private static string[] ReadBodyParams(string? json)\n        {\n            if (string.IsNullOrWhiteSpace(json)) return Array.Empty<string>();\n            try\n            {\n                return System.Text.Json.JsonSerializer.Deserialize<string[]>(json) ?? Array.Empty<string>();\n            }\n            catch { return Array.Empty<string>(); }\n        }\n\n        private static Dictionary<string, string> ReadVarDict(string? json)\n        {\n            if (string.IsNullOrWhiteSpace(json))\n                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            try\n            {\n                return System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(json)\n                       ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n            catch\n            {\n                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n        }\n\n        private static List<string> BuildHeaderTextParams(IDictionary<string, string> kv)\n        {\n            // Accept either \"header.text.{n}\" or \"headerpara{n}\"\n            var matches = kv.Keys\n                .Select(k => new\n                {\n                    k,\n                    m = System.Text.RegularExpressions.Regex.Match(\n                        k, @\"^(?:header(?:\\.text)?\\.)?(\\d+)$|^header(?:\\.text)?\\.(\\d+)$|^headerpara(\\d+)$\",\n                        System.Text.RegularExpressions.RegexOptions.IgnoreCase)\n                })\n                .Where(x => x.m.Success)\n                .Select(x =>\n                {\n                    // pull the first captured number\n                    for (int g = 1; g < x.m.Groups.Count; g++)\n                        if (x.m.Groups[g].Success) return int.Parse(x.m.Groups[g].Value);\n                    return 0;\n                })\n                .Where(n => n > 0)\n                .Distinct()\n                .OrderBy(n => n)\n                .ToList();\n\n            if (matches.Count == 0) return new List<string>();\n\n            var list = new List<string>(new string[matches.Last()]);\n            for (int i = 1; i <= list.Count; i++)\n            {\n                var k1 = $\"header.text.{i}\";\n                var k2 = $\"headerpara{i}\";\n                if (!kv.TryGetValue(k1, out var v))\n                    kv.TryGetValue(k2, out v);\n                list[i - 1] = v ?? string.Empty;\n            }\n\n            return list;\n        }\n\n        private static IReadOnlyDictionary<string, string> BuildButtonUrlParams(IDictionary<string, string> kv)\n        {\n            // Normalize to \"button{pos}.url_param\"\n            var map = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            for (int pos = 1; pos <= 3; pos++)\n            {\n                var k1 = $\"button{pos}.url_param\"; // canonical\n                var k2 = $\"buttonpara{pos}\";       // alias fallback\n                if (kv.TryGetValue(k1, out var v1) && !string.IsNullOrWhiteSpace(v1))\n                    map[k1] = v1;\n                else if (kv.TryGetValue(k2, out var v2) && !string.IsNullOrWhiteSpace(v2))\n                    map[k1] = v2;\n            }\n            return map;\n        }\n\n\n        public async Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"📨 Sending template message to {dto.RecipientNumber} via BusinessId {dto.BusinessId}\");\n\n                if (dto.MessageType != MessageTypeEnum.Template)\n                    return ResponseResult.ErrorInfo(\"Only template messages are supported in this method.\");\n\n                // ✅ Validate provider (UPPERCASE only, no normalization)\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"❌ Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                // ✅ Quota\n                var quotaCheck = await _planManager.CheckQuotaBeforeSendingAsync(dto.BusinessId);\n                if (!quotaCheck.Success)\n                {\n                    Console.WriteLine($\"❌ Quota check failed: {quotaCheck.Message}\");\n                    return quotaCheck;\n                }\n\n                // ✅ Build template components from dto.TemplateParameters\n                var bodyParams = (dto.TemplateParameters?.Values?.ToList() ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                var components = new List<object>();\n                if (bodyParams.Length > 0)\n                {\n                    components.Add(new { type = \"body\", parameters = bodyParams });\n                }\n\n                // 🚀 Send to provider — explicit provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    dto.BusinessId,\n                    dto.Provider, // <-- REQUIRED now\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName!, \"en_US\", components),\n                    dto.PhoneNumberId // <-- optional; relies on default if null\n                );\n\n                // ✅ Build rendered body\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters?.Values.ToList() ?? new List<string>());\n\n                // 📝 Log result (store provider raw payload)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = resolvedBody,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse, // <-- not JsonConvert of wrapper\n                    MessageId = sendResult.MessageId,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n\n                // 📉 Decrement remaining quota\n                var planInfo = await _db.BusinessPlanInfos\n                    .FirstOrDefaultAsync(p => p.BusinessId == dto.BusinessId);\n\n                if (planInfo != null && planInfo.RemainingMessages > 0)\n                {\n                    planInfo.RemainingMessages -= 1;\n                    planInfo.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _db.SaveChangesAsync();\n\n                // 📡 SignalR push\n                await _hubContext.Clients\n                    .Group($\"business_{dto.BusinessId}\")\n                    .SendAsync(\"ReceiveMessage\", new\n                    {\n                        Id = log.Id,\n                        RecipientNumber = log.RecipientNumber,\n                        MessageContent = log.RenderedBody,\n                        MediaUrl = log.MediaUrl,\n                        Status = log.Status,\n                        CreatedAt = log.CreatedAt,\n                        SentAt = log.SentAt\n                    });\n\n                return ResponseResult.SuccessInfo(\"✅ Template message sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                var errorId = Guid.NewGuid();\n                Console.WriteLine($\"🧨 Error ID: {errorId}\\n{ex}\");\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                        dto.TemplateBody ?? \"\",\n                        dto.TemplateParameters?.Values.ToList() ?? new List<string>()),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\n                    $\"❌ Exception occurred while sending template message. [Ref: {errorId}]\",\n                    ex.ToString());\n            }\n        }\n\n        //public async Task<ResponseResult> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId)\n        //{\n        //    try\n        //    {\n        //        if (string.IsNullOrWhiteSpace(dto.Provider) || (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n        //            return ResponseResult.ErrorInfo(\"❌ Invalid provider.\", \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n\n        //        var components = new List<object>();\n\n        //        if (!string.IsNullOrWhiteSpace(dto.HeaderVideoUrl))\n        //        {\n        //            components.Add(new\n        //            {\n        //                type = \"header\",\n        //                parameters = new[] { new { type = \"video\", video = new { link = dto.HeaderVideoUrl! } } }\n        //            });\n        //        }\n\n        //        components.Add(new\n        //        {\n        //            type = \"body\",\n        //            parameters = (dto.TemplateParameters ?? new List<string>())\n        //                .Select(p => new { type = \"text\", text = p })\n        //                .ToArray()\n        //        });\n\n        //        var btns = dto.ButtonParameters ?? new List<CampaignButtonDto>();\n        //        for (int i = 0; i < btns.Count && i < 3; i++)\n        //        {\n        //            var btn = btns[i];\n        //            var subType = btn.ButtonType?.ToLowerInvariant();\n        //            if (string.IsNullOrWhiteSpace(subType)) continue;\n\n        //            var button = new Dictionary<string, object>\n        //            {\n        //                [\"type\"] = \"button\",\n        //                [\"sub_type\"] = subType,\n        //                [\"index\"] = i.ToString()\n        //            };\n\n        //            if (subType == \"quick_reply\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n        //                button[\"parameters\"] = new[] { new { type = \"payload\", payload = btn.TargetUrl! } };\n        //            else if (subType == \"url\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n        //                button[\"parameters\"] = new[] { new { type = \"text\", text = btn.TargetUrl! } };\n\n        //            components.Add(button);\n        //        }\n\n        //        var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n        //        //var sendResult = await SendViaProviderAsync(\n        //        //    businessId,\n        //        //    dto.Provider,\n        //        //    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n        //        //    dto.PhoneNumberId\n        //        //);\n        //        // ✅ build proper WhatsApp payload (language must be an object)\n        //        var payload = new\n        //        {\n        //            messaging_product = \"whatsapp\",\n        //            to = dto.RecipientNumber,\n        //            type = \"template\",\n        //            template = new\n        //            {\n        //                name = dto.TemplateName,\n        //                language = new { code = lang },   // <-- key fix\n        //                components = components\n        //            }\n        //        };\n\n        //        var sendResult = await SendPayloadAsync(\n        //            businessId,\n        //            dto.Provider,\n        //            payload,\n        //            dto.PhoneNumberId\n        //        );\n\n        //        var renderedBody = TemplateParameterHelper.FillPlaceholders(\n        //            dto.TemplateBody ?? \"\",\n        //            dto.TemplateParameters ?? new List<string>());\n\n        //        var log = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = businessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n        //            MediaUrl = dto.HeaderVideoUrl,\n        //            RenderedBody = renderedBody,\n        //            Status = sendResult.Success ? \"Sent\" : \"Failed\",\n        //            ErrorMessage = sendResult.Success ? null : sendResult.Message,\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,\n        //            SentAt = DateTime.UtcNow,\n        //            CreatedAt = DateTime.UtcNow,\n        //            CTAFlowConfigId = dto.CTAFlowConfigId,\n        //            CTAFlowStepId = dto.CTAFlowStepId\n        //        };\n\n        //        await _db.MessageLogs.AddAsync(log);\n        //        await _db.SaveChangesAsync();\n\n        //        return new ResponseResult\n        //        {\n        //            Success = sendResult.Success,\n        //            Message = sendResult.Success ? \"✅ Template sent successfully.\" : (sendResult.Message ?? \"❌ WhatsApp API returned an error.\"),\n        //            Data = new { Success = sendResult.Success, MessageId = sendResult.MessageId, LogId = log.Id },\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,\n        //            LogId = log.Id\n        //        };\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        try\n        //        {\n        //            await _db.MessageLogs.AddAsync(new MessageLog\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                RecipientNumber = dto.RecipientNumber,\n        //                MessageContent = dto.TemplateName,\n        //                RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n        //                MediaUrl = dto.HeaderVideoUrl,\n        //                Status = \"Failed\",\n        //                ErrorMessage = ex.Message,\n        //                CreatedAt = DateTime.UtcNow,\n        //                CTAFlowConfigId = dto.CTAFlowConfigId,\n        //                CTAFlowStepId = dto.CTAFlowStepId\n        //            });\n        //            await _db.SaveChangesAsync();\n        //        }\n        //        catch { /* ignore */ }\n\n        //        return ResponseResult.ErrorInfo(\"❌ Template send failed\", ex.Message);\n        //    }\n        //}\n        public async Task<ResponseResult> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId)\n        {\n            try\n            {\n                // ── 0) Basic validation + normalization\n                var provider = (dto.Provider ?? \"META_CLOUD\").Trim().ToUpperInvariant();\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    return ResponseResult.ErrorInfo(\"❌ Invalid provider.\", \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n\n                if (string.IsNullOrWhiteSpace(dto.RecipientNumber))\n                    return ResponseResult.ErrorInfo(\"❌ Missing recipient number.\");\n\n                if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                    return ResponseResult.ErrorInfo(\"❌ Missing template name.\");\n\n                if (string.IsNullOrWhiteSpace(dto.HeaderVideoUrl))\n                    return ResponseResult.ErrorInfo(\"🚫 Missing HeaderVideoUrl (must be a direct HTTPS link to a video file).\");\n\n                var langCode = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!.Trim();\n\n                // ── 1) Build WhatsApp components\n                var components = new List<object>();\n\n                // header → video\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                new { type = \"video\", video = new { link = dto.HeaderVideoUrl! } }\n                    }\n                });\n\n                // body → text params\n                var bodyParams = (dto.TemplateParameters ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                components.Add(new { type = \"body\", parameters = bodyParams });\n\n                // buttons (max 3)\n                var btns = (dto.ButtonParameters ?? new List<CampaignButtonDto>()).Take(3).ToList();\n                for (int i = 0; i < btns.Count; i++)\n                {\n                    var b = btns[i];\n                    var sub = (b.ButtonType ?? \"\").Trim().ToLowerInvariant();\n                    if (string.IsNullOrEmpty(sub)) continue;\n\n                    var button = new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = sub,\n                        [\"index\"] = i.ToString()\n                    };\n\n                    if (sub == \"url\" && !string.IsNullOrWhiteSpace(b.TargetUrl))\n                    {\n                        button[\"parameters\"] = new object[] { new { type = \"text\", text = b.TargetUrl! } };\n                    }\n                    else if (sub == \"quick_reply\" && !string.IsNullOrWhiteSpace(b.TargetUrl))\n                    {\n                        // For quick replies, providers expect a payload string\n                        button[\"parameters\"] = new object[] { new { type = \"payload\", payload = b.TargetUrl! } };\n                    }\n\n                    components.Add(button);\n                }\n\n                // ── 2) Full WhatsApp template payload (language is an OBJECT)\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber!,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = dto.TemplateName!,\n                        language = new { code = langCode },  // ✅ required object shape\n                        components = components\n                    }\n                };\n\n                // ── 3) Send via provider (pass through PhoneNumberId when supplied)\n                //var sendResult = await _messageEngineService.SendPayloadAsync(\n                //    businessId,\n                //    provider,\n                //    payload,\n                //    dto.PhoneNumberId\n                //);\n                var sendResult = await SendPayloadAsync(businessId, provider, payload, dto.PhoneNumberId);\n                // ── 4) Persist message log (best-effort)\n                var renderedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters ?? new List<string>());\n\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber!,\n                    MessageContent = dto.TemplateName!,\n                    MediaUrl = dto.HeaderVideoUrl,        // mirrors header media\n                    RenderedBody = renderedBody,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.ErrorMessage ?? (sendResult.Success ? null : \"WhatsApp API returned an error.\"),\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success ? \"✅ Template sent successfully.\" : (sendResult.ErrorMessage ?? \"❌ WhatsApp API returned an error.\"),\n                    Data = new { Success = sendResult.Success, MessageId = sendResult.MessageId, LogId = log.Id },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                // failure log (best effort)\n                try\n                {\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber ?? \"\",\n                        MessageContent = dto.TemplateName ?? \"\",\n                        RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n                        MediaUrl = dto.HeaderVideoUrl,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow,\n                        CTAFlowConfigId = dto.CTAFlowConfigId,\n                        CTAFlowStepId = dto.CTAFlowStepId\n                    });\n                    await _db.SaveChangesAsync();\n                }\n                catch { /* ignore */ }\n\n                return ResponseResult.ErrorInfo(\"❌ Template send failed\", ex.Message);\n            }\n        }\n\n        private async Task<IReadOnlyList<WhatsAppSettingEntity>> GetBusinessWhatsAppSettingsAsync(Guid businessId)\n        {\n            if (_settingsCache.TryGetValue(businessId, out var cached) && cached.expiresAt > DateTime.UtcNow)\n                return cached.setting;\n\n            // Load all settings rows for this business (supports multiple providers)\n            var items = await _db.WhatsAppSettings\n                .Where(s => s.BusinessId == businessId)\n                .ToListAsync();\n\n            if (items == null || items.Count == 0)\n                throw new Exception(\"WhatsApp settings not found.\");\n\n            var ro = items.AsReadOnly();\n            _settingsCache[businessId] = (ro, DateTime.UtcNow.AddMinutes(5));\n            return ro;\n        }\n\n\n        public async Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto)\n        {\n            try\n            {\n                var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                    ?? throw new UnauthorizedAccessException(\"❌ Cannot resolve BusinessId from context.\");\n\n                // --- Resolve/validate provider & sender -------------------------------\n                // Normalize inbound (trim+upper) but DO NOT silently map unknown values\n                string? provider = dto.Provider?.Trim().ToUpperInvariant();\n                string? phoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId)\n                    ? null\n                    : dto.PhoneNumberId!.Trim();\n\n                // If provider not supplied, try to resolve from active settings:\n                // - Prefer a row that already has a default sender (PhoneNumberId not null)\n                // - If multiple rows and none has default, ask the caller to specify\n                xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity? chosenSetting = null;\n\n                if (string.IsNullOrWhiteSpace(provider))\n                {\n                    var candidates = await _db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive)\n                        .OrderByDescending(s => s.PhoneNumberId != null)          // prefer defaulted\n                        //.ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .ThenByDescending(s => (s.UpdatedAt > s.CreatedAt ? s.UpdatedAt : s.CreatedAt))\n\n                        .ToListAsync();\n\n                    if (candidates.Count == 0)\n                        return ResponseResult.ErrorInfo(\"❌ WhatsApp settings not found for this business.\");\n\n                    if (candidates.Count > 1 && candidates.All(s => s.PhoneNumberId == null))\n                        return ResponseResult.ErrorInfo(\"❌ Multiple providers are active but no default sender is set. Please pass Provider (PINNACLE/META_CLOUD) or set a Default number.\");\n\n                    chosenSetting = candidates[0];\n                    provider = (chosenSetting.Provider ?? \"\").Trim().ToUpperInvariant();\n                    if (string.IsNullOrWhiteSpace(phoneNumberId) && !string.IsNullOrWhiteSpace(chosenSetting.PhoneNumberId))\n                        phoneNumberId = chosenSetting.PhoneNumberId!.Trim();\n                }\n\n                // Final provider check (must be one of the two)\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    return ResponseResult.ErrorInfo(\n                        \"❌ Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\"\n                    );\n                }\n\n                // If provider was supplied but no sender, we can still inherit the default\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                {\n                    // Try to find a default sender for the chosen provider\n                    var defaultRow = await _db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(s => s.BusinessId == businessId &&\n                                    s.IsActive &&\n                                    s.Provider == provider &&\n                                    s.PhoneNumberId != null)\n                        .OrderByDescending(s => (s.UpdatedAt > s.CreatedAt ? s.UpdatedAt : s.CreatedAt))\n\n                        //.OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n\n                        .FirstOrDefaultAsync();\n\n                    if (defaultRow != null)\n                        phoneNumberId = defaultRow.PhoneNumberId!.Trim();\n                }\n                // ----------------------------------------------------------------------\n\n                Guid? contactId = null;\n\n                // 1) Try to find contact by business + phone (indexed)\n                var contact = await _db.Contacts.FirstOrDefaultAsync(c =>\n                    c.BusinessId == businessId && c.PhoneNumber == dto.RecipientNumber);\n\n                if (contact != null)\n                {\n                    // 2) Touch last-contacted when reusing an existing contact\n                    contactId = contact.Id;\n                    contact.LastContactedAt = DateTime.UtcNow;\n                }\n                else if (dto.IsSaveContact)\n                {\n                    // 3) Create a new contact if requested\n                    contact = new Contact\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        Name = \"WhatsApp User\",\n                        PhoneNumber = dto.RecipientNumber,\n                        CreatedAt = DateTime.UtcNow,\n                        LastContactedAt = DateTime.UtcNow\n                    };\n                    _db.Contacts.Add(contact);\n                    contactId = contact.Id;\n                }\n\n                // 4) Persist contact changes (create or timestamp update)\n                await _db.SaveChangesAsync();\n\n                // 🚀 Send via provider — explicit provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    provider!,                                                     // validated value\n                    p => p.SendTextAsync(dto.RecipientNumber, dto.TextContent),\n                    phoneNumberId                                                  // optional\n                );\n\n                // 🔎 Extract provider message id (fallback to Meta messages[0].id if needed)\n                string? messageId = sendResult.MessageId;\n                if (string.IsNullOrWhiteSpace(messageId) && !string.IsNullOrWhiteSpace(sendResult.RawResponse))\n                {\n                    try\n                    {\n                        var raw = sendResult.RawResponse!.TrimStart();\n                        if (raw.StartsWith(\"{\"))\n                        {\n                            using var parsed = System.Text.Json.JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var msgs)\n                                && msgs.ValueKind == System.Text.Json.JsonValueKind.Array\n                                && msgs.GetArrayLength() > 0\n                                && msgs[0].TryGetProperty(\"id\", out var idProp))\n                            {\n                                messageId = idProp.GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"⚠️ JSON parsing failed: {ex.Message} | Raw: {sendResult.RawResponse}\");\n                    }\n                }\n\n                // 📝 Log the message\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                // 🔗 Optional campaign mapping\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"📦 CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"⚠️ Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                                ? \"✅ Text message sent successfully.\"\n                                : (sendResult.Message ?? \"❌ WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"❌ Exception in SendTextDirectAsync: {ex.Message}\");\n\n                try\n                {\n                    var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                        ?? throw new UnauthorizedAccessException(\"❌ Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"❌ Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"❌ Failed to send text message.\", ex.ToString());\n            }\n        }\n\n        public async Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto)\n        {\n            try\n            {\n                var businessId =\n                    dto.BusinessId != Guid.Empty\n                        ? dto.BusinessId\n                        : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                          ?? throw new UnauthorizedAccessException(\"❌ Cannot resolve BusinessId from context or DTO.\");\n\n                // ✅ Validate provider (no server-side normalization)\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"❌ Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                Guid? contactId = null;\n                try\n                {\n                    var contact = await _contactService.FindOrCreateAsync(businessId, dto.RecipientNumber);\n                    contactId = contact.Id;\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"⚠️ Failed to resolve or create contact: {ex.Message}\");\n                }\n\n                // 🚀 Send via provider — explicit provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    dto.Provider,\n                    p => p.SendTextAsync(dto.RecipientNumber, dto.TextContent),\n                    dto.PhoneNumberId\n                );\n\n                // 🔎 Try to get a provider message id (use provider-provided id first, then Meta fallback)\n                string? messageId = sendResult.MessageId;\n                var raw = sendResult.RawResponse;\n                if (string.IsNullOrWhiteSpace(messageId) && !string.IsNullOrWhiteSpace(raw))\n                {\n                    try\n                    {\n                        var s = raw.TrimStart();\n                        if (s.StartsWith(\"{\"))\n                        {\n                            using var parsed = JsonDocument.Parse(s);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var messages) &&\n                                messages.ValueKind == JsonValueKind.Array &&\n                                messages.GetArrayLength() > 0 &&\n                                messages[0].TryGetProperty(\"id\", out var idProp))\n                            {\n                                messageId = idProp.GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"⚠️ JSON parsing failed: {ex.Message} | Raw: {raw}\");\n                    }\n                }\n\n                // 📝 Log result (store raw provider payload; don’t serialize the wrapper)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"📦 CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"⚠️ Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"✅ Text message sent successfully.\"\n                        : (sendResult.Message ?? \"❌ WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"❌ Exception in SendAutomationReply: {ex.Message}\");\n\n                try\n                {\n                    var businessId =\n                        dto.BusinessId != Guid.Empty\n                            ? dto.BusinessId\n                            : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                              ?? throw new UnauthorizedAccessException(\"❌ Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"❌ Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"❌ Failed to send text message.\", ex.ToString());\n            }\n        }\n        public async Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto)\n        {\n            try\n            {\n                // 0) Soft-resolve provider & sender (no hard early return)\n                var provider = (dto.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                var phoneNumberId = dto.PhoneNumberId;\n\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    // Try active WhatsAppSettings first (usually the “current” sender)\n                    var ws = await _db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(x => x.BusinessId == businessId && x.IsActive)\n                        .OrderByDescending(x => x.UpdatedAt ?? x.CreatedAt)\n                        .FirstOrDefaultAsync();\n\n                    if (ws != null)\n                    {\n                        provider = (ws.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                        if (string.IsNullOrWhiteSpace(phoneNumberId))\n                            phoneNumberId = ws.PhoneNumberId;\n                    }\n\n                    // Fallback to WhatsAppPhoneNumbers (prefer default, then stable order)\n                    if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    {\n                        var pn = await _db.WhatsAppPhoneNumbers\n                            .AsNoTracking()\n                            .Where(n => n.BusinessId == businessId && n.IsActive)\n                            .OrderByDescending(n => n.IsDefault)\n                            .ThenBy(n => n.WhatsAppBusinessNumber)\n                            .Select(n => new { n.Provider, n.PhoneNumberId })\n                            .FirstOrDefaultAsync();\n\n                        if (pn != null)\n                        {\n                            provider = (pn.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                            if (string.IsNullOrWhiteSpace(phoneNumberId))\n                                phoneNumberId = pn.PhoneNumberId;\n                        }\n                    }\n                }\n\n                // If still unknown, fail clearly (we tried our best)\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    return ResponseResult.ErrorInfo(\"❌ Missing provider.\",\n                        \"No active WhatsApp sender found. Configure a PINNACLE or META_CLOUD sender for this business.\");\n                }\n\n                // 1) Build minimal components (body only)\n                var components = new List<object>();\n                var parameters = (dto.TemplateParameters ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                if (parameters.Length > 0)\n                {\n                    components.Add(new { type = \"body\", parameters });\n                }\n\n                // 2) Always send via provider — explicit provider + sender override (if given/resolved)\n                var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n                _logger?.LogInformation(\"➡️ SEND-INTENT tmpl={Template} to={To} provider={Provider} pnid={PhoneNumberId}\",\n                    dto.TemplateName, dto.RecipientNumber, provider, phoneNumberId ?? \"(default)\");\n\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    provider, // explicit, resolved above\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n                    phoneNumberId // explicit; lets the adapter pick the correct sender\n                );\n\n                // 3) Log message (store provider raw response, not the whole wrapper)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                        dto.TemplateBody ?? string.Empty,\n                        dto.TemplateParameters ?? new List<string>()),\n\n                    // Optional flow context from DTO (if this simple send was triggered by a flow)\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n\n                    // Helpful for downstream analysis\n                    Provider = provider,\n                    ProviderMessageId = sendResult.MessageId,\n\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null,\n                    CreatedAt = DateTime.UtcNow,\n                    Source = \"api\" // or \"simple_send\"\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"✅ Template sent successfully.\"\n                        : (sendResult.Message ?? \"❌ WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = sendResult.MessageId,\n                        LogId = log.Id\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                // Best-effort failure log\n                try\n                {\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TemplateName,\n                        RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                            dto.TemplateBody ?? string.Empty,\n                            dto.TemplateParameters ?? new List<string>()),\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow,\n                        Source = \"api\"\n                    });\n                    await _db.SaveChangesAsync();\n                }\n                catch { /* ignore log errors */ }\n\n                return ResponseResult.ErrorInfo(\"❌ Template send failed\", ex.Message);\n            }\n        }\n\n\n        //public async Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto)\n        //{\n        //    try\n        //    {\n        //        // 0) Validate provider (no server-side normalization)\n        //        if (string.IsNullOrWhiteSpace(dto.Provider) ||\n        //            (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n        //        {\n        //            return ResponseResult.ErrorInfo(\"❌ Invalid provider.\",\n        //                \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n        //        }\n\n        //        // 1) Build minimal components (body only)\n        //        var components = new List<object>();\n        //        var parameters = (dto.TemplateParameters ?? new List<string>())\n        //            .Select(p => new { type = \"text\", text = p })\n        //            .ToArray();\n\n        //        if (parameters.Length > 0)\n        //        {\n        //            components.Add(new { type = \"body\", parameters });\n        //        }\n\n        //        // 2) Send via provider — explicit provider + optional sender override\n        //        var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n        //        var sendResult = await SendViaProviderAsync(\n        //            businessId,\n        //            dto.Provider, // <-- explicit provider\n        //            p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n        //            dto.PhoneNumberId // <-- optional sender override\n        //        );\n\n        //        // 3) Log message (store provider raw response, not the whole wrapper)\n        //        var log = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = businessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n        //            RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n        //            Status = sendResult.Success ? \"Sent\" : \"Failed\",\n        //            ErrorMessage = sendResult.Success ? null : sendResult.Message,\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,     // capture if available\n        //            SentAt = DateTime.UtcNow,\n        //            CreatedAt = DateTime.UtcNow\n        //        };\n\n        //        await _db.MessageLogs.AddAsync(log);\n        //        await _db.SaveChangesAsync();\n\n        //        return new ResponseResult\n        //        {\n        //            Success = sendResult.Success,\n        //            Message = sendResult.Success\n        //                ? \"✅ Template sent successfully.\"\n        //                : (sendResult.Message ?? \"❌ WhatsApp API returned an error.\"),\n        //            Data = new\n        //            {\n        //                Success = sendResult.Success,\n        //                MessageId = sendResult.MessageId,\n        //                LogId = log.Id\n        //            },\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,\n        //            LogId = log.Id\n        //        };\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        // Best-effort failure log\n        //        try\n        //        {\n        //            await _db.MessageLogs.AddAsync(new MessageLog\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                RecipientNumber = dto.RecipientNumber,\n        //                MessageContent = dto.TemplateName,\n        //                RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n        //                Status = \"Failed\",\n        //                ErrorMessage = ex.Message,\n        //                CreatedAt = DateTime.UtcNow\n        //            });\n        //            await _db.SaveChangesAsync();\n        //        }\n        //        catch { /* ignore log errors */ }\n\n        //        return ResponseResult.ErrorInfo(\"❌ Template send failed\", ex.Message);\n        //    }\n        //}\n\n        public async Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string sentBy)\n        {\n            try\n            {\n                var campaign = await _db.Campaigns\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"❌ Campaign not found or unauthorized.\");\n\n                var recipients = await _db.CampaignRecipients\n                    .Include(r => r.Contact)\n                    .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                    .ToListAsync();\n\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"⚠️ No recipients assigned to this campaign.\");\n\n                if (string.IsNullOrWhiteSpace(campaign.ImageCaption))\n                    return ResponseResult.ErrorInfo(\"❌ Campaign caption (ImageCaption) is required.\");\n\n                var validButtons = campaign.MultiButtons\n                    ?.Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Select(b => new CtaButtonDto { Title = b.Title, Value = b.Value })\n                    .ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ At least one CTA button with a valid title is required.\");\n\n                int successCount = 0, failCount = 0;\n\n                foreach (var recipient in recipients)\n                {\n                    if (recipient.Contact == null || string.IsNullOrWhiteSpace(recipient.Contact.PhoneNumber))\n                    {\n                        Console.WriteLine($\"⚠️ Skipping invalid contact: {recipient.Id}\");\n                        failCount++;\n                        continue;\n                    }\n\n                    var dto = new SendMessageDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageType = MessageTypeEnum.Image,\n                        MediaUrl = campaign.ImageUrl,\n                        TextContent = campaign.MessageTemplate,\n                        CtaButtons = validButtons,\n\n                        CampaignId = campaign.Id,\n                        SourceModule = \"image-campaign\",\n                        CustomerId = recipient.Contact.Id.ToString(),\n                        CustomerName = recipient.Contact.Name,\n                        CustomerPhone = recipient.Contact.PhoneNumber,\n                        CTATriggeredFrom = \"campaign\"\n                    };\n\n                    var result = await SendImageWithCtaAsync(dto);\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.Contact.Id,\n                        RecipientId = recipient.Id,\n                        MessageLogId = result?.LogId,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = sentBy,\n                        BusinessId = businessId,\n                    };\n\n                    await _db.CampaignSendLogs.AddAsync(sendLog);\n\n                    if (result.Success) successCount++;\n                    else failCount++;\n                }\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo($\"✅ Campaign sent.\\n📤 Success: {successCount}, ❌ Failed: {failCount}\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"❌ Error sending image campaign: {ex.Message}\");\n                return ResponseResult.ErrorInfo(\"❌ Unexpected error while sending image campaign.\", ex.ToString());\n            }\n        }\n        // Features/MessageManagement/Services/MessageEngineService.cs\n        /// <summary>\n        /// Sends a TEMPLATE campaign using CSV-materialized variables stored on CampaignRecipients:\n        /// - ResolvedParametersJson (string[] for body {{n}})\n        /// - ResolvedButtonUrlsJson (dict for header.text.{n} and button{pos}.url_param)\n        /// Uses campaign-level HeaderKind + HeaderMediaUrl for media headers.\n        /// </summary>\n        // Sends a TEMPLATE campaign using materialized per-recipient values from CSV.\n        // - Reads CampaignRecipients.ResolvedParametersJson (string[] for body {{n}})\n        // - Reads CampaignRecipients.ResolvedButtonUrlsJson (dict: \"button{1..3}.url_param\", optional \"header.image_url\")\n        // - Uses Campaign.ImageUrl as header media if present; otherwise uses header.image_url from the dict if provided.\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId, Guid businessId, string sentBy)\n        {\n            try\n            {\n                // 1) Load campaign (minimal fields we need)\n                var campaign = await _db.Campaigns\n                    .AsNoTracking()\n                    .Where(c => c.Id == campaignId && c.BusinessId == businessId)\n                    .Select(c => new\n                    {\n                        c.Id,\n                        c.BusinessId,\n                        c.MessageTemplate,\n                        c.TemplateId,\n                        c.Provider,\n                        c.PhoneNumberId,\n                        c.ImageUrl // used as header media if template expects image\n                    })\n                    .FirstOrDefaultAsync();\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"❌ Campaign not found or unauthorized.\");\n\n                // Template name\n                var templateName = !string.IsNullOrWhiteSpace(campaign.TemplateId)\n                    ? campaign.TemplateId!\n                    : (campaign.MessageTemplate ?? \"\").Trim();\n\n                if (string.IsNullOrWhiteSpace(templateName))\n                    return ResponseResult.ErrorInfo(\"❌ Campaign has no template selected.\");\n\n                // 2) Determine language (fallback en_US)\n                var lang = await _db.WhatsAppTemplates\n                    .AsNoTracking()\n                    .Where(w => w.BusinessId == businessId && w.Name == templateName)\n                    .OrderByDescending(w => (w.UpdatedAt > w.CreatedAt ? w.UpdatedAt : w.CreatedAt))\n                    .Select(w => w.Language)\n                    .FirstOrDefaultAsync();\n\n                if (string.IsNullOrWhiteSpace(lang)) lang = \"en_US\";\n\n                // 3) Load recipients with materialized vars + phone\n                var recipients = await _db.CampaignRecipients\n                    .AsNoTracking()\n                    .Include(r => r.AudienceMember)\n                    .Include(r => r.Contact) // optional fallback for phone\n                    .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                    .Select(r => new\n                    {\n                        r.Id,\n                        r.ResolvedParametersJson,   // string[]\n                        r.ResolvedButtonUrlsJson,   // dict\n                        Phone = r.AudienceMember != null && !string.IsNullOrEmpty(r.AudienceMember.PhoneE164)\n                                ? r.AudienceMember.PhoneE164\n                                : (r.Contact != null ? r.Contact.PhoneNumber : null)\n                    })\n                    .ToListAsync();\n\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"⚠️ No recipients materialized for this campaign.\");\n\n                // 4) Provider and sender validation (no normalization here)\n                var provider = (campaign.Provider ?? \"\").Trim().ToUpperInvariant();\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    return ResponseResult.ErrorInfo(\"❌ Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.\");\n\n                var phoneNumberId = string.IsNullOrWhiteSpace(campaign.PhoneNumberId)\n                    ? null\n                    : campaign.PhoneNumberId!.Trim();\n\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                    return ResponseResult.ErrorInfo(\"❌ Campaign has no sender number (PhoneNumberId).\");\n\n                int success = 0, fail = 0;\n\n                foreach (var r in recipients)\n                {\n                    if (string.IsNullOrWhiteSpace(r.Phone))\n                    {\n                        fail++;\n                        continue;\n                    }\n\n                    // Deserialize materialized values\n                    string[] bodyParams;\n                    try\n                    {\n                        bodyParams = string.IsNullOrWhiteSpace(r.ResolvedParametersJson)\n                            ? Array.Empty<string>()\n                            : System.Text.Json.JsonSerializer.Deserialize<string[]>(r.ResolvedParametersJson!) ?? Array.Empty<string>();\n                    }\n                    catch { bodyParams = Array.Empty<string>(); }\n\n                    Dictionary<string, string> buttonVars;\n                    try\n                    {\n                        buttonVars = string.IsNullOrWhiteSpace(r.ResolvedButtonUrlsJson)\n                            ? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)\n                            : System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(r.ResolvedButtonUrlsJson!)\n                              ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n                    }\n                    catch\n                    {\n                        buttonVars = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n                    }\n\n                    // 5) Build WhatsApp components\n                    var components = new List<object>();\n\n                    // Header (image) — priority: Campaign.ImageUrl -> header.image_url in dict\n                    var headerImage = !string.IsNullOrWhiteSpace(campaign.ImageUrl) ? campaign.ImageUrl\n                                   : (buttonVars.TryGetValue(\"header.image_url\", out var hv) && !string.IsNullOrWhiteSpace(hv) ? hv : null);\n\n                    if (!string.IsNullOrWhiteSpace(headerImage))\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = new object[]\n                            {\n                        new { type = \"image\", image = new { link = headerImage! } }\n                            }\n                        });\n                    }\n\n                    // Body params\n                    if (bodyParams.Length > 0)\n                    {\n                        var bp = bodyParams.Select(p => new { type = \"text\", text = p ?? \"\" }).ToArray();\n                        components.Add(new { type = \"body\", parameters = bp });\n                    }\n\n                    // Dynamic URL buttons (button{1..3}.url_param)\n                    for (int pos = 1; pos <= 3; pos++)\n                    {\n                        var key = $\"button{pos}.url_param\";\n                        if (buttonVars.TryGetValue(key, out var urlParam) && !string.IsNullOrWhiteSpace(urlParam))\n                        {\n                            components.Add(new\n                            {\n                                type = \"button\",\n                                sub_type = \"url\",\n                                index = (pos - 1).ToString(), // Meta expects 0-based string index\n                                parameters = new object[] { new { type = \"text\", text = urlParam } }\n                            });\n                        }\n                    }\n\n                    // 6) Full payload\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = r.Phone!,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = lang },\n                            components = components\n                        }\n                    };\n\n                    // 7) Send via provider\n                    var result = await SendPayloadAsync(businessId, provider, payload, phoneNumberId);\n                    if (result.Success) success++; else fail++;\n\n                    // OPTIONAL: you can write a CampaignSendLog here, mirroring your image path.\n                    // (Omitted to keep this tight; add if you want parity with image campaigns)\n                }\n\n                return ResponseResult.SuccessInfo($\"✅ Template campaign sent. 📤 Success: {success}, ❌ Failed: {fail}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"❌ Error sending template campaign.\", ex.ToString());\n            }\n        }\n\n\n\n\n\n        public async Task<ResponseResult> SendImageWithCtaAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"📤 Sending image+CTA to {dto.RecipientNumber}\");\n\n                // ✅ Validate inputs\n                if (string.IsNullOrWhiteSpace(dto.TextContent))\n                    return ResponseResult.ErrorInfo(\"❌ Image message caption (TextContent) cannot be empty.\");\n\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"❌ Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                // ✅ CTA buttons (1–3)\n                var validButtons = dto.CtaButtons?\n                    .Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"reply\",\n                        reply = new\n                        {\n                            id = $\"btn_{index + 1}_{Guid.NewGuid():N}\".Substring(0, 16),\n                            title = btn.Title\n                        }\n                    })\n                    .ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ At least one CTA button with a valid title is required.\");\n\n                // 📦 Interactive payload (Meta-friendly; other providers can proxy)\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"interactive\",\n                    interactive = new\n                    {\n                        type = \"button\",\n                        body = new { text = dto.TextContent },\n                        action = new { buttons = validButtons }\n                    },\n                    image = string.IsNullOrWhiteSpace(dto.MediaUrl) ? null : new { link = dto.MediaUrl }\n                };\n\n                // 🚀 Send via provider — EXPLICIT provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    dto.BusinessId,\n                    dto.Provider,\n                    p => p.SendInteractiveAsync(payload),\n                    dto.PhoneNumberId  // null → use provider’s default sender\n                );\n\n                // 🔎 MessageId: provider id first, then Meta fallback\n                string? messageId = sendResult.MessageId;\n                if (string.IsNullOrWhiteSpace(messageId) && !string.IsNullOrWhiteSpace(sendResult.RawResponse))\n                {\n                    try\n                    {\n                        var raw = sendResult.RawResponse.TrimStart();\n                        if (raw.StartsWith(\"{\"))\n                        {\n                            using var doc = System.Text.Json.JsonDocument.Parse(raw);\n                            if (doc.RootElement.TryGetProperty(\"messages\", out var msgs) &&\n                                msgs.ValueKind == System.Text.Json.JsonValueKind.Array &&\n                                msgs.GetArrayLength() > 0 &&\n                                msgs[0].TryGetProperty(\"id\", out var idProp))\n                            {\n                                messageId = idProp.GetString();\n                            }\n                        }\n                    }\n                    catch { /* best-effort */ }\n                }\n\n                // 📝 Log (store RAW provider payload)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image with CTA]\",\n                    RenderedBody = dto.TextContent ?? \"\",\n                    MediaUrl = dto.MediaUrl,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"✅ Image+CTA message sent.\"\n                        : (sendResult.Message ?? \"❌ WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = messageId,\n                        LogId = log.Id\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Exception in SendImageWithCtaAsync: \" + ex.Message);\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image CTA Failed]\",\n                    RenderedBody = dto.TextContent ?? \"[Failed image CTA]\",\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"❌ Failed to send image+CTA.\", ex.ToString());\n            }\n        }\n\n\n        public async Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId)\n        {\n            try\n            {\n                // ✅ Validate provider (no normalization here)\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"❌ Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                // 1) Build components\n                var components = new List<object>();\n\n                if (!string.IsNullOrWhiteSpace(dto.HeaderImageUrl))\n                {\n                    components.Add(new\n                    {\n                        type = \"header\",\n                        parameters = new[]\n                        {\n                    new { type = \"image\", image = new { link = dto.HeaderImageUrl! } }\n                }\n                    });\n                }\n\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = (dto.TemplateParameters ?? new List<string>())\n                        .Select(p => new { type = \"text\", text = p })\n                        .ToArray()\n                });\n\n                // Buttons (dynamic up to 3; null-safe)\n                var btns = dto.ButtonParameters ?? new List<CampaignButtonDto>();\n                for (int i = 0; i < btns.Count && i < 3; i++)\n                {\n                    var btn = btns[i];\n                    var subType = btn.ButtonType?.ToLowerInvariant();\n                    if (string.IsNullOrWhiteSpace(subType)) continue;\n\n                    var button = new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subType,\n                        [\"index\"] = i.ToString()\n                    };\n\n                    if (subType == \"quick_reply\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    {\n                        button[\"parameters\"] = new[] { new { type = \"payload\", payload = btn.TargetUrl! } };\n                    }\n                    else if (subType == \"url\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    {\n                        button[\"parameters\"] = new[] { new { type = \"text\", text = btn.TargetUrl! } };\n                    }\n\n                    components.Add(button);\n                }\n\n                var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n\n                // 2) Send via provider — EXPLICIT provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    dto.Provider,\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n                    dto.PhoneNumberId // null => provider default sender\n                );\n\n                // 3) Build rendered body\n                var renderedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters ?? new List<string>());\n\n                // 4) Log raw provider payload and message id (if any)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    MediaUrl = dto.HeaderImageUrl,\n                    RenderedBody = renderedBody,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,     // store raw provider payload, not wrapper\n                    MessageId = sendResult.MessageId,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"✅ Image template sent successfully.\"\n                        : (sendResult.Message ?? \"❌ WhatsApp API returned an error.\"),\n                    Data = new { Success = sendResult.Success, MessageId = sendResult.MessageId, LogId = log.Id },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n                    MediaUrl = dto.HeaderImageUrl,\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n                return ResponseResult.ErrorInfo(\"❌ Error sending image template.\", ex.ToString());\n            }\n        }\n\n        public async Task<IEnumerable<RecentMessageLogDto>> GetLogsByBusinessIdAsync(Guid businessId)\n        {\n            var logs = await _db.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(1000)\n                .Select(m => new RecentMessageLogDto\n                {\n                    Id = m.Id,\n                    RecipientNumber = m.RecipientNumber,\n                    MessageContent = m.MessageContent,\n                    Status = m.Status,\n                    CreatedAt = m.CreatedAt,\n                    SentAt = m.SentAt,\n                    ErrorMessage = m.ErrorMessage\n                })\n                .ToListAsync();\n\n            return logs;\n        }\n\n        public Task<ResponseResult> SendDocumentTemplateMessageAsync(DocumentTemplateMessageDto dto, Guid businessId)\n        {\n            throw new NotImplementedException();\n        }\n    \n    }\n}\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/TemplateMessageSender.cs",
      "sha256": "aace58451c410bc1a2b7a362097cf9f2f61e343e8bb4abdfb53b2f0479cbd4a0",
      "language": "csharp",
      "size": 8300,
      "content": "// 📄 File: Features/MessagesEngine/Services/TemplateMessageSender.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\n\n//using xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class TemplateMessageSender : ITemplateMessageSender\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<TemplateMessageSender> _logger;\n        private readonly IWhatsAppTemplateFetcherService _templateService;\n\n        public TemplateMessageSender(\n            AppDbContext db,\n            HttpClient httpClient,\n            ILogger<TemplateMessageSender> logger,\n            IWhatsAppTemplateFetcherService templateService)\n        {\n            _db = db;\n            _httpClient = httpClient;\n            _logger = logger;\n            _templateService = templateService;\n        }\n\n        public async Task<ResponseResult> SendTemplateMessageToContactAsync(\n            Guid businessId,\n            Contact contact,\n            string templateName,\n            List<string> templateParams,\n            string? imageUrl = null,\n            List<CampaignButton>? buttons = null,\n            string? source = null,\n            Guid? refMessageId = null)\n        {\n            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(s => s.BusinessId == businessId && s.IsActive);\n            if (setting == null)\n                return ResponseResult.ErrorInfo(\"WhatsApp settings not found for this business.\");\n\n            var template = await _templateService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n            if (template == null)\n                return ResponseResult.ErrorInfo(\"Template not found or invalid.\");\n\n            var payload = new Dictionary<string, object>\n            {\n                [\"messaging_product\"] = \"whatsapp\",\n                [\"to\"] = contact.PhoneNumber,\n                [\"type\"] = \"template\",\n                [\"template\"] = new\n                {\n                    name = template.Name,\n                    language = new { code = template.Language },\n                    components = BuildTemplateComponents(template, templateParams, imageUrl, buttons)\n                }\n            };\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiKey);\n            var json = JsonSerializer.Serialize(payload);\n            var response = await _httpClient.PostAsync(\n                $\"{setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\"}/{setting.PhoneNumberId}/messages\",\n                new StringContent(json, Encoding.UTF8, \"application/json\"));\n\n            var responseBody = await response.Content.ReadAsStringAsync();\n            var status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\";\n\n            await _db.MessageLogs.AddAsync(new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contact.Id,\n                MessageContent = template.Name,\n                MediaUrl = imageUrl,\n                Status = status,\n                RawResponse = responseBody,\n                ErrorMessage = response.IsSuccessStatusCode ? null : responseBody,\n                Source = source,\n                RefMessageId = refMessageId,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = DateTime.UtcNow\n            });\n\n            await _db.SaveChangesAsync();\n            return response.IsSuccessStatusCode\n                ? ResponseResult.SuccessInfo(\"✅ Message sent successfully\", null, responseBody)\n                : ResponseResult.ErrorInfo(\"❌ Message failed\", null, responseBody);\n\n        }\n\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign)\n        {\n            if (campaign == null || campaign.IsDeleted)\n                return ResponseResult.ErrorInfo(\"Invalid or deleted campaign.\");\n\n            var contacts = await _db.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaign.Id && r.Contact != null)\n                .ToListAsync();\n\n            if (!contacts.Any())\n                return ResponseResult.ErrorInfo(\"No contacts found for this campaign.\");\n\n            var templateName = campaign.TemplateId;\n            var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n            var templateMeta = await _templateService.GetTemplateByNameAsync(campaign.BusinessId, templateName, includeButtons: true);\n\n            if (templateMeta == null)\n                return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n\n            int success = 0, failed = 0;\n\n            foreach (var r in contacts)\n            {\n                var result = await SendTemplateMessageToContactAsync(\n                    campaign.BusinessId,\n                    r.Contact,\n                    templateName,\n                    templateParams,\n                    campaign.ImageUrl,\n                    campaign.MultiButtons?.ToList(),\n                    source: \"campaign\",\n                    refMessageId: campaign.Id);\n\n                await _db.CampaignSendLogs.AddAsync(new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = r.ContactId,\n                    RecipientId = r.Id,\n                    MessageBody = campaign.MessageBody ?? templateName,\n                    TemplateId = templateName,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CreatedBy = campaign.CreatedBy\n                });\n\n                if (result.Success) success++;\n                else failed++;\n            }\n\n            await _db.SaveChangesAsync();\n            return ResponseResult.SuccessInfo($\"📤 Sent to {success}, ❌ Failed for {failed}.\");\n        }\n\n        private List<object> BuildTemplateComponents(\n            TemplateMetadataDto template,\n            List<string> paramsList,\n            string? imageUrl,\n            List<CampaignButton>? buttons)\n        {\n            var components = new List<object>();\n\n            if (template.HasImageHeader && !string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[] { new { type = \"image\", image = new { link = imageUrl } } }\n                });\n            }\n\n            if (paramsList.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = paramsList.Select(p => new { type = \"text\", text = p }).ToList()\n                });\n            }\n\n            if (buttons != null && buttons.Any())\n            {\n                for (int i = 0; i < buttons.Count; i++)\n                {\n                    var btn = buttons[i];\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type?.ToLower() == \"url\" ? \"url\" : \"quick_reply\",\n                        index = i.ToString(),\n                        parameters = new[] {\n                            new {\n                                type = \"text\",\n                                text = btn.Value ?? btn.Title\n                            }\n                        }\n                    });\n                }\n            }\n\n            return components;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Validators/ValidateMessageDtoAttribute.cs",
      "sha256": "9b7355295c8cecdf6c4416a324d05f0910b3ff67e99fd35e04e397f715096a9b",
      "language": "csharp",
      "size": 1760,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs.Validation\n{\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\n    public class ValidateMessageDtoAttribute : ValidationAttribute\n    {\n        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)\n        {\n            if (value is not SendMessageDto dto)\n                return ValidationResult.Success;\n\n            switch (dto.MessageType)\n            {\n                case MessageTypeEnum.Text:\n                    if (string.IsNullOrWhiteSpace(dto.TextContent))\n                        return new ValidationResult(\"TextContent is required for text messages.\", new[] { nameof(dto.TextContent) });\n                    break;\n\n                case MessageTypeEnum.Image:\n                    if (string.IsNullOrWhiteSpace(dto.MediaUrl))\n                        return new ValidationResult(\"MediaUrl is required for image messages.\", new[] { nameof(dto.MediaUrl) });\n                    break;\n\n                case MessageTypeEnum.Template:\n                    if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                        return new ValidationResult(\"TemplateName is required for template messages.\", new[] { nameof(dto.TemplateName) });\n                    break;\n\n                case MessageTypeEnum.Cta:\n                    if (dto.CtaButtons == null || dto.CtaButtons.Count == 0)\n                        return new ValidationResult(\"CtaButtons is required for CTA messages.\", new[] { nameof(dto.CtaButtons) });\n                    break;\n            }\n\n            return ValidationResult.Success;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Models/BusinessPlanInfo.cs",
      "sha256": "4a8d4603750b0630eec386cbb831948aaa2cc2f5872d4e1b178da2b9a6952bc7",
      "language": "csharp",
      "size": 1240,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\n\nnamespace xbytechat.api.Models.BusinessModel\n{\n    public class BusinessPlanInfo\n    {\n        [Key]\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // 🔗 Foreign key to Business\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [ForeignKey(nameof(BusinessId))]\n        public Business Business { get; set; }\n\n        // 📦 Plan Management\n        [Required]\n        public PlanType Plan { get; set; } = PlanType.Trial; // Default Trial\n\n        [Required]\n        public int TotalMonthlyQuota { get; set; } = 100; // Default Trial Messages\n\n        [Required]\n        public int RemainingMessages { get; set; } = 100;\n\n        public DateTime QuotaResetDate { get; set; } = DateTime.UtcNow.AddMonths(1);\n\n        // 💰 Wallet Management (optional)\n        public decimal WalletBalance { get; set; } = 0.00m;\n\n        // 📅 Timestamps\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Models/PlanFeature.cs",
      "sha256": "af8483d1a28e7555f8111b552d2730fd4ef167d9ba562bebb508328248b01a12",
      "language": "csharp",
      "size": 687,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.PlanManagement.Models\n{\n    [Table(\"PlanFeatureMatrix\")]\n    public class PlanFeatureMatrix\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        [MaxLength(20)]\n        public string PlanName { get; set; } = string.Empty;  // \"Basic\", \"Smart\", \"Advance\"\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } = string.Empty; // \"Contacts\", \"Catalog\", etc.\n\n        [Required]\n        public bool IsEnabled { get; set; }  // Default state for this plan-feature pair\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Models/PlanType.cs",
      "sha256": "52170542c11ff0a0e52b9f16289446106038cd266cd602169980aa1d684672ea",
      "language": "csharp",
      "size": 187,
      "content": "namespace xbytechat.api.Features.PlanManagement.Models\n{\n    public enum PlanType\n    {\n       \n        Basic = 0,\n        Smart = 1,\n        Advanced = 2,\n            Trial = 3,\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Services/IPlanManager.cs",
      "sha256": "69cb77d9f587d971ee0cc96bf3fa399d9982294045981db84e714050dc242d85",
      "language": "csharp",
      "size": 418,
      "content": "using xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.PlanManagement.Services\n{\n    public interface IPlanManager\n    {\n        /// <summary>\n        /// Checks if business has enough quota to send a message.\n        /// </summary>\n        Task<ResponseResult> CheckQuotaBeforeSendingAsync(Guid businessId);\n        Dictionary<string, bool> GetPlanFeatureMap(string plan);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Services/PlanManager.cs",
      "sha256": "0d93116ee8bd77194569c6739adad49911359cad9bd6f1919bae85f130027871",
      "language": "csharp",
      "size": 1992,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.PlanManagement.Services\n{\n    public class PlanManager : IPlanManager\n    {\n        private readonly AppDbContext _db;\n\n        public PlanManager(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<ResponseResult> CheckQuotaBeforeSendingAsync(Guid businessId)\n        {\n            var business = await _db.Businesses.FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n                return ResponseResult.ErrorInfo(\"Business not found.\", \"Invalid business ID\");\n            if (business?.BusinessPlanInfo?.RemainingMessages <= 0)\n            {\n                var msg = business?.BusinessPlanInfo?.Plan == PlanType.Trial\n                    ? \"Trial limit reached. Please upgrade your plan.\"\n                    : \"Monthly quota exhausted. Please upgrade or wait for reset.\";\n\n                return ResponseResult.ErrorInfo(msg, \"Quota limit exceeded\");\n            }\n\n            return ResponseResult.SuccessInfo(\"Quota check passed.\");\n        }\n\n        public Dictionary<string, bool> GetPlanFeatureMap(string plan)\n        {\n            // Example map — replace with real logic if needed\n            if (plan == \"Basic\")\n                return new Dictionary<string, bool>\n            {\n                { \"CATALOG\", true },\n                { \"MESSAGE_SEND\", false },\n                { \"CRM_NOTES\", false }\n            };\n\n            if (plan == \"Advanced\")\n                return new Dictionary<string, bool>\n            {\n                { \"CATALOG\", true },\n                { \"MESSAGE_SEND\", true },\n                { \"CRM_NOTES\", true },\n                { \"CRM_TAGS\", true }\n            };\n\n            // Fallback plan\n            return new Dictionary<string, bool>();\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/Controllers/MessageAnalyticsController.cs",
      "sha256": "99dc4aa00c1bae7339a4b7cf1c00c7946b5aebeb41f493a46adb22e6d15af298",
      "language": "csharp",
      "size": 1238,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.ReportingModule.Controllers\n{\n    [ApiController]\n    [Authorize] // ✅ add this\n    [Route(\"api/reporting/messages\")]\n    public class MessageAnalyticsController : ControllerBase\n    {\n        private readonly IMessageAnalyticsService _service;\n\n        public MessageAnalyticsController(IMessageAnalyticsService service)\n        {\n            _service = service;\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 20)\n        {\n            var businessId = User.GetBusinessId();\n            var logs = await _service.GetRecentLogsAsync(businessId, limit);\n            return Ok(new { success = true, data = logs });\n        }\n\n        [HttpGet(\"history\")]\n        public async Task<IActionResult> GetPaginatedLogs([FromQuery] PaginatedRequest request)\n        {\n            var businessId = User.GetBusinessId();\n            var result = await _service.GetPaginatedLogsAsync(businessId, request);\n            return Ok(new { success = true, data = result });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/DTOs/DirectMessageLogFilterDto.cs",
      "sha256": "e8f948d0367820dd6dce43d8c057e8bfe7a65889ab2eb6361f062de66d36922b",
      "language": "csharp",
      "size": 293,
      "content": "namespace xbytechat.api.Features.ReportingModule.DTOs\n{\n    public class DirectMessageLogFilterDto\n\n    {\n        public int Page { get; set; } = 1;\n        public int PageSize { get; set; } = 10;\n        public string? Status { get; set; }\n        public string? Search { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/DTOs/RecentMessageLogDto.cs",
      "sha256": "f86a239c42fefe2d63c5087c403a7c2cc1e2eea942cc1443bd03495783bbb2f4",
      "language": "csharp",
      "size": 586,
      "content": "// 📄 File: Features/ReportingModule/DTOs/RecentMessageLogDto.cs\nusing System;\n\nnamespace xbytechat.api.Features.ReportingModule.DTOs\n{\n    public class RecentMessageLogDto\n    {\n        public Guid Id { get; set; }\n        public string RecipientNumber { get; set; }\n        public string MessageContent { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }             \n        public Guid? CampaignId { get; set; }\n        public string? Status { get; set; }\n        public string? ErrorMessage { get; set; }         \n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/Services/IMessageAnalyticsService.cs",
      "sha256": "08c8fb19a092bb252492d04c2114547e4ca4a5725875accb403182551c8229f4",
      "language": "csharp",
      "size": 536,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.ReportingModule.Services\n{\n    public interface IMessageAnalyticsService\n    {\n        Task<List<RecentMessageLogDto>> GetRecentLogsAsync(Guid businessId, int limit);\n        Task<PaginatedResponse<RecentMessageLogDto>> GetPaginatedLogsAsync(Guid businessId, PaginatedRequest request);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/Services/MessageAnalyticsService.cs",
      "sha256": "3a87316fa63b4890a5bc35b2d867a96a2a7d73e8aea0e52ff6854e89c4245b7a",
      "language": "csharp",
      "size": 2844,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.ReportingModule.Services\n{\n    public class MessageAnalyticsService : IMessageAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public MessageAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<List<RecentMessageLogDto>> GetRecentLogsAsync(Guid businessId, int limit)\n        {\n            return await _context.MessageLogs\n                .Where(x => x.BusinessId == businessId)\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(limit)\n                .Select(x => new RecentMessageLogDto\n                {\n                    Id = x.Id,\n                    RecipientNumber = x.RecipientNumber,\n                    MessageContent = x.MessageContent,\n                    CreatedAt = x.CreatedAt,\n                    CampaignId = x.CampaignId,\n                    Status = x.Status,\n                    SentAt = x.SentAt,\n                })\n                .ToListAsync();\n        }\n\n        public async Task<PaginatedResponse<RecentMessageLogDto>> GetPaginatedLogsAsync(Guid businessId, PaginatedRequest request)\n        {\n            var query = _context.MessageLogs\n                .Where(x => x.BusinessId == businessId);\n\n            if (!string.IsNullOrEmpty(request.Status))\n                query = query.Where(x => x.Status == request.Status);\n\n            if (!string.IsNullOrEmpty(request.Search))\n                query = query.Where(x =>\n                    x.RecipientNumber.Contains(request.Search) ||\n                    x.MessageContent.Contains(request.Search));\n\n            var totalCount = await query.CountAsync();\n\n            var items = await query\n                .OrderByDescending(x => x.CreatedAt)\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .Select(x => new RecentMessageLogDto\n                {\n                    Id = x.Id,\n                    RecipientNumber = x.RecipientNumber,\n                    MessageContent = x.MessageContent,\n                    CreatedAt = x.CreatedAt,\n                    CampaignId = x.CampaignId,\n                    Status = x.Status,\n                    SentAt = x.SentAt,\n                })\n                .ToListAsync();\n\n            return new PaginatedResponse<RecentMessageLogDto>\n            {\n                Items = items,\n                TotalCount = totalCount,\n                Page = request.Page,\n                PageSize = request.PageSize\n            };\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Controllers/TemplatesController.cs",
      "sha256": "b7014e9c08b5d3cf85e8dbd5edf632bc51e34a2acac661dbb3109dcd259edf4c",
      "language": "csharp",
      "size": 1479,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.TemplateModule.Services;\n\nnamespace xbytechat.api.Features.TemplateModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates\")]\n    public class TemplatesController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateService _templateService;\n        private readonly ILogger<TemplatesController> _logger;\n\n        public TemplatesController(IWhatsAppTemplateService templateService, ILogger<TemplatesController> logger)\n        {\n            _templateService = templateService;\n            _logger = logger;\n        }\n\n        /// <summary>\n        /// Fetches WhatsApp template metadata (name, language, body, placeholders)\n        /// </summary>\n        [HttpGet(\"metadata\")]\n        public async Task<IActionResult> GetTemplates()\n        {\n            try\n            {\n                var templates = await _templateService.FetchTemplatesAsync();\n                return Ok(new\n                {\n                    success = true,\n                    templates\n                });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error fetching template metadata: \" + ex.Message);\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"❌ Failed to retrieve template metadata\",\n                    error = ex.Message\n                });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Services/IWhatsAppTemplateService.cs",
      "sha256": "2ed5f5891246b4fec02e29892760c3d033e76572488701c525fd801763f742a9",
      "language": "csharp",
      "size": 226,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.TemplateModule.Services\n{\n    public interface IWhatsAppTemplateService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Services/WhatsAppTemplateService.cs",
      "sha256": "ee70376834e701f63425a69d50a4ea5d02170321edf828fe7fd2bd5d100bf3a1",
      "language": "csharp",
      "size": 2815,
      "content": "using Microsoft.Extensions.Configuration;\nusing Newtonsoft.Json;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.TemplateModule.Services\n{\n    public class WhatsAppTemplateService : IWhatsAppTemplateService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _config;\n        private readonly ILogger<WhatsAppTemplateService> _logger;\n\n        public WhatsAppTemplateService(HttpClient httpClient, IConfiguration config, ILogger<WhatsAppTemplateService> logger)\n        {\n            _httpClient = httpClient;\n            _config = config;\n            _logger = logger;\n        }\n\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync()\n        {\n            var wabaId = _config[\"WhatsApp:WABA_ID\"];\n            var token = _config[\"WhatsApp:apiToken\"];\n            var url = $\"https://graph.facebook.com/v18.0/{wabaId}/message_templates\";\n\n            var templates = new List<TemplateMetadataDto>();\n\n            try\n            {\n                _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", token);\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"Failed to fetch WhatsApp templates: \" + json);\n                    return templates;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n\n                    foreach (var component in tpl.components)\n                    {\n                        if (component.type == \"BODY\")\n                        {\n                            body = component.text;\n                            break;\n                        }\n                    }\n\n                    // Count {{placeholders}}\n                    var placeholderCount = System.Text.RegularExpressions.Regex.Matches(body, \"{{(.*?)}}\").Count;\n\n                    templates.Add(new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = placeholderCount\n                    });\n                }\n\n                return templates;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error while fetching templates from Meta: \" + ex.Message);\n                return templates;\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/MessageLogsReportController.cs",
      "sha256": "57679ca179ec26b011a115fa136660702c25971ea0beb441c8805d2bdc911b49",
      "language": "csharp",
      "size": 10297,
      "content": "using System.Text;\nusing ClosedXML.Excel;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Shared; // for User.GetBusinessId()\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/report/message-logs\")]\n    [Authorize]\n    public sealed class MessageLogsReportController : ControllerBase\n    {\n        private readonly IMessageLogsReportService _service;\n\n        public MessageLogsReportController(IMessageLogsReportService service)\n            => _service = service;\n\n        [HttpPost(\"search\")]\n        [ProducesResponseType(typeof(PaginatedResponse<MessageLogListItemDto>), StatusCodes.Status200OK)]\n        [ProducesResponseType(StatusCodes.Status401Unauthorized)]\n        public async Task<IActionResult> Search([FromBody] MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var result = await _service.SearchAsync(businessId, q, ct);\n            return Ok(result);\n        }\n\n        [HttpPost(\"export/csv\")]\n        [Produces(\"text/csv\")]\n        public async Task<IActionResult> ExportCsv([FromBody] MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            // We’ll walk pages to get the full dataset (service clamps PageSize to <= 200).\n            var sb = new StringBuilder();\n\n            // Header\n            sb.AppendLine(string.Join(\",\", new[]\n            {\n                \"Time\",\"Recipient\",\"SenderId\",\"Channel\",\"Status\",\"Type\",\"Campaign\",\n                \"Body\",\"ProviderId\",\"DeliveredAt\",\"ReadAt\",\"Error\"\n            }.Select(EscapeCsv)));\n\n            var page = 1;\n            const int maxLoops = 10000; // safety\n            var totalWritten = 0;\n\n            while (page <= maxLoops)\n            {\n                var pageQuery = new MessageLogReportQueryDto\n                {\n                    FromUtc = q.FromUtc,\n                    ToUtc = q.ToUtc,\n                    Search = q.Search,\n                    Statuses = q.Statuses,\n                    Channels = q.Channels,\n                    SenderIds = q.SenderIds,\n                    MessageTypes = q.MessageTypes,\n                    CampaignId = q.CampaignId,\n                    SortBy = q.SortBy,\n                    SortDir = q.SortDir,\n                    Page = page,\n                    PageSize = 200 // max page supported by service\n                };\n\n                var res = await _service.SearchAsync(businessId, pageQuery, ct);\n                if (res.Items.Count == 0) break;\n\n                foreach (var r in res.Items)\n                {\n                    var time = r.SentAt ?? r.CreatedAt;\n                    var row = new[]\n                    {\n                        EscapeCsv(time.ToLocalTime().ToString(\"yyyy-MM-dd HH:mm:ss\")),\n                        EscapeCsv(r.RecipientNumber ?? \"\"),\n                        EscapeCsv(r.SenderId ?? \"\"),\n                        EscapeCsv(r.SourceChannel ?? \"\"),\n                        EscapeCsv(r.Status ?? \"\"),\n                        EscapeCsv(r.MessageType ?? \"\"),\n                        EscapeCsv(r.CampaignName ?? r.CampaignId?.ToString() ?? \"\"),\n                        EscapeCsv((r.MessageContent ?? \"\").ReplaceLineEndings(\" \")),\n                        EscapeCsv(r.ProviderMessageId ?? \"\"),\n                        EscapeCsv(r.DeliveredAt?.ToLocalTime().ToString(\"yyyy-MM-dd HH:mm:ss\") ?? \"\"),\n                        EscapeCsv(r.ReadAt?.ToLocalTime().ToString(\"yyyy-MM-dd HH:mm:ss\") ?? \"\"),\n                        EscapeCsv((r.ErrorMessage ?? \"\").ReplaceLineEndings(\" \"))\n                    };\n                    sb.AppendLine(string.Join(\",\", row));\n                }\n\n                totalWritten += res.Items.Count;\n\n                // stop when we’ve written everything\n                var total = res.TotalCount;\n                if (totalWritten >= total) break;\n\n                page++;\n            }\n\n            var bytes = Encoding.UTF8.GetBytes(sb.ToString());\n            var fileName =\n                $\"MessageLogs{(q.CampaignId.HasValue ? \"-\" + q.CampaignId.Value : \"\")}-{DateTime.UtcNow:yyyyMMddHHmmss}.csv\";\n\n            return File(bytes, \"text/csv\", fileName);\n\n            static string EscapeCsv(string s)\n            {\n                // Quote if contains comma, quote, or newline\n                if (s.Contains(',') || s.Contains('\"') || s.Contains('\\n') || s.Contains('\\r'))\n                {\n                    return $\"\\\"{s.Replace(\"\\\"\", \"\\\"\\\"\")}\\\"\";\n                }\n                return s;\n            }\n        }\n\n     \n        [HttpPost(\"export/pdf\")]\n        public IActionResult ExportPdfStub()\n        {\n            return StatusCode(StatusCodes.Status501NotImplemented, new ProblemDetails\n            {\n                Title = \"PDF export is not enabled\",\n                Detail = \"Implement in MessageLogsReportController.ExportPdf using a PDF library.\"\n            });\n        }\n\n        [HttpPost(\"export/xlsx\")]\n        [Produces(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")]\n        public async Task<IActionResult> ExportXlsx([FromBody] MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            // Page through all results using the same service used by the grid.\n            const int pageSize = 200; // service already clamps; keep explicit for clarity\n            var all = new List<MessageLogListItemDto>(capacity: pageSize * 5); // small pre-alloc\n\n            var page = 1;\n            while (true)\n            {\n                var pageQuery = new MessageLogReportQueryDto\n                {\n                    FromUtc = q.FromUtc,\n                    ToUtc = q.ToUtc,\n                    Search = q.Search,\n                    Statuses = q.Statuses,\n                    Channels = q.Channels,\n                    SenderIds = q.SenderIds,\n                    MessageTypes = q.MessageTypes,\n                    CampaignId = q.CampaignId,\n                    SortBy = q.SortBy,\n                    SortDir = q.SortDir,\n                    Page = page,\n                    PageSize = pageSize\n                };\n\n                var res = await _service.SearchAsync(businessId, pageQuery, ct);\n                if (res.Items.Count == 0) break;\n\n                all.AddRange(res.Items);\n\n                if (all.Count >= res.TotalCount) break; // done\n                page++;\n            }\n\n            // Build the workbook in memory\n            using var wb = new XLWorkbook();\n            var ws = wb.Worksheets.Add(\"MessageLogs\");\n\n            // Header\n            var headers = new[]\n            {\n        \"Time\",\"Recipient\",\"SenderId\",\"Channel\",\"Status\",\"Type\",\"Campaign\",\n        \"Body\",\"ProviderId\",\"DeliveredAt\",\"ReadAt\",\"Error\"\n    };\n            for (int c = 0; c < headers.Length; c++)\n                ws.Cell(1, c + 1).Value = headers[c];\n\n            // Simple header style\n            var headerRange = ws.Range(1, 1, 1, headers.Length);\n            headerRange.Style.Font.Bold = true;\n            headerRange.Style.Fill.BackgroundColor = XLColor.FromHtml(\"#F3F4F6\"); // light gray\n            headerRange.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n\n            // Rows\n            int r = 2;\n            foreach (var it in all)\n            {\n                var time = (it.SentAt ?? it.CreatedAt).ToLocalTime();\n\n                ws.Cell(r, 1).Value = time;\n                ws.Cell(r, 1).Style.DateFormat.Format = \"yyyy-mm-dd hh:mm:ss\";\n\n                ws.Cell(r, 2).Value = it.RecipientNumber ?? \"\";\n                ws.Cell(r, 3).Value = it.SenderId ?? \"\";\n                ws.Cell(r, 4).Value = it.SourceChannel ?? \"\";\n                ws.Cell(r, 5).Value = it.Status ?? \"\";\n                ws.Cell(r, 6).Value = it.MessageType ?? \"\";\n                ws.Cell(r, 7).Value = it.CampaignName ?? (it.CampaignId?.ToString() ?? \"\");\n\n                // Body/Errors as plain text to avoid newlines breaking rows\n                ws.Cell(r, 8).Value = (it.MessageContent ?? \"\").ReplaceLineEndings(\" \");\n                ws.Cell(r, 9).Value = it.ProviderMessageId ?? \"\";\n\n                if (it.DeliveredAt.HasValue)\n                {\n                    ws.Cell(r, 10).Value = it.DeliveredAt.Value.ToLocalTime();\n                    ws.Cell(r, 10).Style.DateFormat.Format = \"yyyy-mm-dd hh:mm:ss\";\n                }\n                else ws.Cell(r, 10).Value = \"\";\n\n                if (it.ReadAt.HasValue)\n                {\n                    ws.Cell(r, 11).Value = it.ReadAt.Value.ToLocalTime();\n                    ws.Cell(r, 11).Style.DateFormat.Format = \"yyyy-mm-dd hh:mm:ss\";\n                }\n                else ws.Cell(r, 11).Value = \"\";\n\n                ws.Cell(r, 12).Value = (it.ErrorMessage ?? \"\").ReplaceLineEndings(\" \");\n                r++;\n            }\n\n            // Fit columns\n            ws.Columns().AdjustToContents();\n\n            // Stream to client\n            using var ms = new MemoryStream();\n            wb.SaveAs(ms);\n            ms.Position = 0;\n\n            var fileName = $\"MessageLogs-{DateTime.UtcNow:yyyyMMddHHmmss}.xlsx\";\n            const string contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n            return File(ms.ToArray(), contentType, fileName);\n        }\n        [HttpGet(\"facets\")]\n        [ProducesResponseType(typeof(MessageLogFacetsDto), StatusCodes.Status200OK)]\n        [ProducesResponseType(StatusCodes.Status401Unauthorized)]\n        public async Task<IActionResult> Facets([FromQuery] int fromDays = 90, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var fromUtc = DateTime.UtcNow.AddDays(-Math.Abs(fromDays));\n            var facets = await _service.GetFacetsAsync(businessId, fromUtc, ct);\n            return Ok(facets);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingController.cs",
      "sha256": "e99ad95860e4414c4d2691b0ff365fd6ecd20d10848e5715bdac1cc9d0295521",
      "language": "csharp",
      "size": 6267,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api; // Your using for AppDbContext\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Worker; // Your using for DTOs\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking\")]\n    public class TrackingController : ControllerBase\n    {\n        private readonly ITrackingService _tracker;\n        private readonly AppDbContext _context;\n        private readonly IContactJourneyService _journeyService;\n        public TrackingController(ITrackingService tracker, AppDbContext context, IContactJourneyService journeyService)\n        {\n            _tracker = tracker;\n            _context = context;\n            _journeyService = journeyService;\n        }\n\n        [HttpGet(\"journeys/{campaignSendLogId}\")]\n        public async Task<IActionResult> GetJourney(Guid campaignSendLogId)\n        {\n            var journeyEvents = await _journeyService.GetJourneyEventsAsync(campaignSendLogId);\n            return Ok(journeyEvents);\n        }\n\n\n        //[HttpGet(\"redirect/{campaignSendLogId}\")]\n        //public async Task<IActionResult> TrackCampaignClick(\n        //    Guid campaignSendLogId,\n        //    [FromQuery] string type,\n        //    [FromQuery] string to)\n        //{\n        //    if (string.IsNullOrWhiteSpace(to))\n        //    {\n        //        return BadRequest(\"Missing redirect target URL.\");\n        //    }\n\n        //    var log = await _context.CampaignSendLogs.FindAsync(campaignSendLogId);\n        //    if (log != null)\n        //    {\n        //        log.IsClicked = true;\n        //        log.ClickedAt = DateTime.UtcNow;\n        //        log.ClickType = type;\n        //        log.IpAddress = HttpContext.Connection.RemoteIpAddress?.ToString();\n        //        await _context.SaveChangesAsync();\n        //    }\n\n        //    return Redirect(to);\n        //}\n\n        [HttpGet(\"redirect/{campaignSendLogId}\")]\n        public async Task<IActionResult> TrackCampaignClick(\n    Guid campaignSendLogId,\n    [FromQuery] string type,\n    [FromQuery] string to,\n    [FromQuery] int? idx = null,\n    CancellationToken ct = default)\n        {\n            if (string.IsNullOrWhiteSpace(to))\n                return BadRequest(\"Missing redirect target URL.\");\n\n            if (!Uri.TryCreate(to, UriKind.Absolute, out var destUri))\n                return BadRequest(\"Destination URL is invalid.\");\n\n            var clickType = string.IsNullOrWhiteSpace(type)\n                ? ClassifyClickType(destUri)\n                : type.Trim().ToLowerInvariant();\n\n            // Load parent CSL (tracked so we can update it)\n            var log = await _context.CampaignSendLogs.FindAsync(new object[] { campaignSendLogId }, ct);\n            if (log is not null)\n            {\n                var now = DateTime.UtcNow;\n                var ip = HttpContext.Connection.RemoteIpAddress?.ToString();\n                var ua = Request.Headers.UserAgent.ToString();\n\n                // First-click update on the send (idempotent enough for now)\n                log.IsClicked = true;\n                log.ClickedAt = now;\n                log.ClickType = clickType;\n                log.IpAddress = ip;\n\n                // Persist the click (ties to same run/session)\n                await _context.CampaignClickLogs.AddAsync(new CampaignClickLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignSendLogId = log.Id,\n                    CampaignId = log.CampaignId,// ?? Guid.Empty, // ✅ coalesce; make column Guid? to avoid this\n                    ContactId = log.ContactId,                // Guid? OK\n                    ButtonIndex = (short)(idx ?? 0),\n                    ButtonTitle = string.IsNullOrWhiteSpace(type) ? \"link\" : type,\n                    Destination = destUri.ToString(),\n                    ClickedAt = now,\n                    Ip = ip ?? \"\",\n                    UserAgent = ua ?? \"\",\n                    ClickType = clickType,\n                    RunId = log.RunId                      // remove if your schema doesn’t have RunId\n                }, ct);\n\n                await _context.SaveChangesAsync(ct);\n            }\n\n            return Redirect(destUri.ToString());\n        }\n\n        // Simple classifier used above\n        private static string ClassifyClickType(Uri u)\n        {\n            if (u == null) return \"web\";\n            var scheme = u.Scheme?.ToLowerInvariant() ?? \"\";\n            if (scheme == \"tel\") return \"call\";\n            if (scheme == \"whatsapp\") return \"whatsapp\";\n            if (scheme is \"http\" or \"https\")\n            {\n                var host = u.Host?.ToLowerInvariant() ?? \"\";\n                if (host.Contains(\"wa.me\") || host.Contains(\"api.whatsapp.com\"))\n                    return \"whatsapp\";\n            }\n            return \"web\";\n        }\n\n        /// <summary>\n        /// Gets detailed information for a specific tracking log entry.\n        /// </summary>\n        [HttpGet(\"logs/{id}/details\")]\n        public async Task<IActionResult> GetLogDetails(Guid id)\n        {\n            var result = await _tracker.GetLogDetailsAsync(id);\n            if (result == null)\n                return NotFound(\"Tracking log not found\");\n\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Retrieves click logs specifically related to automation flows.\n        /// </summary>\n        [HttpGet(\"flow-clicks\")]\n        public async Task<IActionResult> GetFlowClickLogs()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid or missing business ID\");\n\n            var logs = await _tracker.GetFlowClickLogsAsync(businessId);\n\n            var dtoList = logs.Select(x => new\n            {\n                x.Id,\n                x.StepId,\n                x.ContactPhone,\n                x.ButtonText,\n                x.TemplateId,\n                x.FollowUpSent,\n                x.ClickedAt\n            });\n\n            return Ok(dtoList);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingViewerController.cs",
      "sha256": "6dfeff85fe69af455c90c7ae2ad1fd0614866359c0eaee39cf101ca67b819507",
      "language": "csharp",
      "size": 1584,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking/logs\")]\n    public class TrackingViewerController : ControllerBase\n    {\n        private readonly AppDbContext _context;\n\n        public TrackingViewerController(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll([FromQuery] Guid? campaignId = null)\n        {\n            var query = _context.TrackingLogs\n                .Include(t => t.Campaign) // Optional\n                .Include(t => t.Contact)  // Optional\n                .OrderByDescending(t => t.ClickedAt)\n                .AsQueryable();\n\n            if (campaignId.HasValue)\n                query = query.Where(t => t.CampaignId == campaignId);\n\n            var results = await query\n                .Select(t => new\n                {\n                    t.Id,\n                    t.ContactPhone,\n                    ContactName = t.Contact != null ? t.Contact.Name : \"(N/A)\",\n                    t.ButtonText,\n                    t.CTAType,\n                    t.SourceType,\n                    t.ClickedAt,\n                    t.DeviceType,\n                    t.Country,\n                    CampaignName = t.Campaign != null ? t.Campaign.Name : \"(Unknown)\"\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = results });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/JourneyEventDto.cs",
      "sha256": "34abc81cfaea73e66ebb64431d3723ede8e2ac5cab0fcd6e8f4a1b2bbfe20320",
      "language": "csharp",
      "size": 727,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class JourneyEventDto\n    {\n        public DateTime Timestamp { get; set; }\n        public string Source { get; set; } = \"System\"; // System/User/Provider\n        public string EventType { get; set; } = \"\";    // MessageSent/Delivered/Read/ButtonClicked/FlowStep/FlowSend/Redirect/Error\n        public string Title { get; set; } = \"\";\n        public string Details { get; set; } = \"\";\n        public Guid? StepId { get; set; }\n        public string? StepName { get; set; }\n        public int? ButtonIndex { get; set; }\n        public string? ButtonTitle { get; set; }\n        public string? Url { get; set; }\n        public string? TemplateName { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/JourneyResponseDto.cs",
      "sha256": "0dd5d4a7faf319e281c5c96d6a7164a6e763aba0de03a617e58165196f48dffa",
      "language": "csharp",
      "size": 549,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class JourneyResponseDto\n    {\n        public string CampaignType { get; set; } = \"dynamic_url\"; // or \"flow\"\n        public string? FlowName { get; set; }\n        public Guid? FlowId { get; set; }\n        public Guid CampaignId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactPhone { get; set; } = \"\";\n        public List<JourneyEventDto> Events { get; set; } = new();\n        public string? LeftOffAt { get; set; }  // step title or reason\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/MessageLogFacetsDto.cs",
      "sha256": "78f9fb1561eb81fa5af81dd2df22164d18841f71475f5d10400f18a702c8fa0f",
      "language": "csharp",
      "size": 516,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public sealed class MessageLogFacetsDto\n    {\n        public string[] WabaIds { get; init; } = Array.Empty<string>();     // WhatsAppBusinessNumber\n        public string[] SenderIds { get; init; } = Array.Empty<string>();   // Campaign.PhoneNumberId\n        public string[] Channels { get; init; } = Array.Empty<string>();    // provider (e.g., META, PINNACLE)\n        public string[] Statuses { get; init; } = Array.Empty<string>();    // message status\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/MessageLogReportQueryDto.cs",
      "sha256": "d92aa8928329edd484bc7c51d8c0be8b7adad6acf6e1996007b37f993214c4aa",
      "language": "csharp",
      "size": 1843,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public sealed class MessageLogReportQueryDto\n    {\n        public DateTime? FromUtc { get; set; }\n        public DateTime? ToUtc { get; set; }\n        public string? Search { get; set; }                 // phone or text contains\n        public string[]? Statuses { get; set; }             // Sent/Delivered/Read/Failed etc.\n        public string[]? Channels { get; set; }             // meta_cloud/sms/email…\n        public string[]? SenderIds { get; set; }            // phone_number_id\n        public string[]? MessageTypes { get; set; }         // text/image/template…\n        public Guid? CampaignId { get; set; }               // optional scope\n\n        public string? SortBy { get; set; } = \"SentAt\";     // server-whitelisted\n        public string? SortDir { get; set; } = \"desc\";      // asc|desc\n\n        public int Page { get; set; } = 1;\n        public int PageSize { get; set; } = 25;\n    }\n\n    public sealed class MessageLogListItemDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }\n\n        public string? RecipientNumber { get; set; }\n        public string? SenderId { get; set; }\n        public string? SourceChannel { get; set; }\n        public string? Status { get; set; }\n        public string? MessageType { get; set; }\n\n        public string? MessageContent { get; set; }\n        public string? TemplateName { get; set; }\n        public string? ProviderMessageId { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDetailsDto.cs",
      "sha256": "e27d7a86aea38ec1fef0aaf6d4d6c208e2481cfaf7033c57fa8da1c81d2c693c",
      "language": "csharp",
      "size": 453,
      "content": "using xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDetailsDto\n    {\n        public TrackingLogDto Tracking { get; set; } = new();\n        public ContactDto? Contact { get; set; }\n        public CampaignDto? Campaign { get; set; }\n        public MessageLogDto? MessageLog { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDto.cs",
      "sha256": "bae94801851bba1bbeb94d60e81f2d20efd13b86be1391265098462d82a3c762",
      "language": "csharp",
      "size": 1798,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDto\n    {\n        // 🧩 Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // 👤 CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n\n        // 🔗 Source Info\n        public string SourceType { get; set; } = string.Empty; // e.g. \"campaign\", \"reminder\", \"bot\"\n        public Guid? SourceId { get; set; }\n\n        // 🔘 CTA Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // 📨 Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n\n        // 🧠 Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n        public DateTime? ClickedAt { get; set; } = DateTime.UtcNow;\n        // 📡 Tracking\n        public string? IPAddress { get; set; }\n        public string? Browser { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 🔖 Session context\n        public string? SessionId { get; set; }\n        public string? ThreadId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Guid? CampaignSendLogId { get; set; }\n\n        public string RawJson { get; set; } = string.Empty; // used in queue method\n        public DateTime EnqueuedAt { get; set; } // used in queue method\n        public string? NextStepMatched { get; set; } // ✅ Add this if not already there\n\n        public string? TemplateName { get; set; } // ✅ Needed for follow-up matcher\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Models/TrackingLog.cs",
      "sha256": "ce8da394901366ef9d5d9b32a338d7a49d6b8d06eb1f911e89e02296506b4281",
      "language": "csharp",
      "size": 2252,
      "content": "using xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.Tracking.Models;\nnamespace xbytechat.api.Features.Tracking.Models\n{\n    public class TrackingLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // 🧩 Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // 👤 CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n        public Contact? Contact { get; set; } // ✅ NEW\n\n        // 🔗 Source Info\n        public string SourceType { get; set; } = string.Empty;\n        public Guid? SourceId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; } // ✅ NEW\n\n        public Guid? CampaignSendLogId { get; set; }\n        public CampaignSendLog? CampaignSendLog { get; set; } // ✅ Optional\n\n        // 🔘 Button Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // 📨 Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; } // ✅ Optional\n\n        // 🧠 Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n\n        // 🕒 Audit Trail\n        public DateTime ClickedAt { get; set; } = DateTime.UtcNow;\n        public string? IPAddress { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 🔖 Follow-up & Analytics\n        public bool FollowUpSent { get; set; } = false;\n        public string? LastInteractionType { get; set; }\n\n        // 🧵 Journey Tracking\n        public Guid? SessionId { get; set; }\n        public Guid? ThreadId { get; set; }\n        public Guid? StepId { get; set; } // ✅ Link to CTAFlowStep for CTA Flow tracking\n\n       //  public string? NextStepMatched { get; set; } // Logs which template system resolved\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/ContactJourneyService.cs",
      "sha256": "616caf304202b708ece31d18cf8416d3eff2b423d80b8e3edad172ccaaf292e1",
      "language": "csharp",
      "size": 33572,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Tracking.DTOs; // Updated namespace\n// Add other necessary using statements for your project\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class ContactJourneyService : IContactJourneyService\n    {\n        private readonly AppDbContext _context;\n\n        public ContactJourneyService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n\n        //public async Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId)\n        //{\n        //    var resp = new JourneyResponseDto();\n        //    var events = new List<JourneyEventDto>();\n\n        //    // 0) Load the selected send\n        //    var sentLog = await _context.CampaignSendLogs\n        //        .AsNoTracking()\n        //        .Include(x => x.Campaign)\n        //        .Include(x => x.Contact)\n        //        .FirstOrDefaultAsync(x => x.Id == initialCampaignSendLogId);\n\n        //    // Require a fully-linked send (campaign + contact) for Journey\n        //    // CampaignId is non-nullable now; only check navs + ContactId\n        //    if (sentLog is null || sentLog.Campaign is null || sentLog.Contact is null || sentLog.ContactId == null)\n        //    {\n        //        resp.Events = events;\n        //        return resp;\n        //    }\n\n        //    // Unwrap once into non-nullable locals\n        //    var campaignId = sentLog.CampaignId;          // Guid (non-nullable)\n        //    var contactId = sentLog.ContactId.Value;     // Guid (we ensured not null above)\n\n        //    resp.CampaignId = campaignId;\n        //    resp.ContactId = contactId;\n        //    resp.ContactPhone = sentLog.Contact.PhoneNumber ?? \"\";\n        //    resp.CampaignType = sentLog.CTAFlowConfigId.HasValue ? \"flow\" : \"dynamic_url\";\n        //    resp.FlowId = sentLog.CTAFlowConfigId;\n\n        //    // 1) Session window for THIS run of the campaign to THIS contact\n        //    var sessionStart = sentLog.SentAt ?? sentLog.CreatedAt;\n\n        //    // next send to same contact for same campaign\n        //    var nextSameCampaignAt = await _context.CampaignSendLogs\n        //        .AsNoTracking()\n        //        .Where(x => x.ContactId == contactId &&\n        //                    x.CampaignId == campaignId &&\n        //                    x.CreatedAt > sessionStart)\n        //        .OrderBy(x => x.CreatedAt)\n        //        .Select(x => (DateTime?)x.CreatedAt)\n        //        .FirstOrDefaultAsync();\n\n        //    // next send to same contact for same flow (if this is a flow)\n        //    DateTime? nextSameFlowAt = null;\n        //    if (sentLog.CTAFlowConfigId.HasValue)\n        //    {\n        //        var flowId = sentLog.CTAFlowConfigId.Value;\n        //        nextSameFlowAt = await _context.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(x => x.ContactId == contactId &&\n        //                        x.CTAFlowConfigId == flowId &&\n        //                        x.CreatedAt > sessionStart)\n        //            .OrderBy(x => x.CreatedAt)\n        //            .Select(x => (DateTime?)x.CreatedAt)\n        //            .FirstOrDefaultAsync();\n        //    }\n\n        //    // session end = earliest “next run” OR +24h cap\n        //    var sessionEnd = new[] { nextSameCampaignAt, nextSameFlowAt }\n        //        .Where(dt => dt.HasValue)\n        //        .Select(dt => dt!.Value)\n        //        .DefaultIfEmpty(sessionStart.AddHours(24))\n        //        .Min();\n\n        //    // 2) Initial \"sent\" + statuses from CSL\n        //    events.Add(new JourneyEventDto\n        //    {\n        //        Timestamp = sessionStart,\n        //        Source = \"System\",\n        //        EventType = \"MessageSent\",\n        //        Title = $\"Campaign '{sentLog.Campaign?.Name ?? \"Campaign\"}' sent\",\n        //        Details = $\"Template '{sentLog.TemplateId}' to {resp.ContactPhone}\",\n        //        TemplateName = sentLog.TemplateId\n        //    });\n\n        //    if (sentLog.DeliveredAt is { } d1 && d1 >= sessionStart && d1 < sessionEnd)\n        //        events.Add(new JourneyEventDto\n        //        {\n        //            Timestamp = d1,\n        //            Source = \"Provider\",\n        //            EventType = \"Delivered\",\n        //            Title = \"Message delivered\",\n        //            Details = $\"Delivered to {resp.ContactPhone}\",\n        //            TemplateName = sentLog.TemplateId\n        //        });\n\n        //    if (sentLog.ReadAt is { } r1 && r1 >= sessionStart && r1 < sessionEnd)\n        //        events.Add(new JourneyEventDto\n        //        {\n        //            Timestamp = r1,\n        //            Source = \"Provider\",\n        //            EventType = \"Read\",\n        //            Title = \"Message read\",\n        //            Details = $\"Read by {resp.ContactPhone}\",\n        //            TemplateName = sentLog.TemplateId\n        //        });\n\n        //    // 3) URL clicks for THIS send within the window\n        //    var urlClicksInitial = await _context.CampaignClickLogs\n        //        .AsNoTracking()\n        //        .Where(c => c.CampaignSendLogId == sentLog.Id &&\n        //                    c.ClickedAt >= sessionStart &&\n        //                    c.ClickedAt < sessionEnd)\n        //        .OrderBy(c => c.ClickedAt)\n        //        .ToListAsync();\n\n        //    foreach (var c in urlClicksInitial)\n        //    {\n        //        events.Add(new JourneyEventDto\n        //        {\n        //            Timestamp = c.ClickedAt,\n        //            Source = \"User\",\n        //            EventType = \"ButtonClicked\",\n        //            Title = $\"Clicked URL Button: '{c.ButtonTitle}'\",\n        //            Details = $\"Redirected to {c.Destination}\",\n        //            ButtonIndex = c.ButtonIndex,\n        //            ButtonTitle = c.ButtonTitle,\n        //            Url = c.Destination\n        //        });\n        //    }\n\n        //    // 4) FLOW chain (if any) scoped to THIS session window\n        //    if (sentLog.CTAFlowConfigId.HasValue)\n        //    {\n        //        var flowId = sentLog.CTAFlowConfigId.Value;\n\n        //        // Flow label\n        //        resp.FlowName = await _context.CTAFlowConfigs\n        //            .AsNoTracking()\n        //            .Where(f => f.Id == flowId)\n        //            .Select(f => f.FlowName)\n        //            .FirstOrDefaultAsync();\n\n        //        // All flow sends (CSLs) for same contact+flow within the window\n        //        var flowCslChain = await _context.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(csl => csl.BusinessId == sentLog.BusinessId &&\n        //                          csl.ContactId == contactId &&\n        //                          csl.CTAFlowConfigId == flowId &&\n        //                          csl.CreatedAt >= sessionStart &&\n        //                          csl.CreatedAt < sessionEnd)\n        //            .OrderBy(csl => csl.CreatedAt)\n        //            .Select(csl => new\n        //            {\n        //                csl.Id,\n        //                csl.MessageLogId,\n        //                csl.SentAt,\n        //                csl.CreatedAt,\n        //                csl.TemplateId,\n        //                csl.CTAFlowStepId,\n        //                csl.DeliveredAt,\n        //                csl.ReadAt\n        //            })\n        //            .ToListAsync();\n\n        //        var chainCslIds = flowCslChain.Select(x => x.Id).ToList();\n        //        var chainMsgLogIds = flowCslChain\n        //            .Where(x => x.MessageLogId.HasValue)\n        //            .Select(x => x.MessageLogId!.Value)\n        //            .ToList();\n\n        //        var execByCsl = await _context.FlowExecutionLogs\n        //            .AsNoTracking()\n        //            .Where(f => f.CampaignSendLogId.HasValue &&\n        //                        chainCslIds.Contains(f.CampaignSendLogId.Value) &&\n        //                        f.ExecutedAt >= sessionStart &&\n        //                        f.ExecutedAt < sessionEnd)\n        //            .OrderBy(f => f.ExecutedAt)\n        //            .ToListAsync();\n\n        //        var execByMsg = chainMsgLogIds.Count == 0\n        //            ? new List<FlowExecutionLog>()\n        //            : await _context.FlowExecutionLogs\n        //                .AsNoTracking()\n        //                .Where(f => f.MessageLogId.HasValue &&\n        //                            chainMsgLogIds.Contains(f.MessageLogId.Value) &&\n        //                            f.ExecutedAt >= sessionStart &&\n        //                            f.ExecutedAt < sessionEnd)\n        //                .OrderBy(f => f.ExecutedAt)\n        //                .ToListAsync();\n\n        //        // Phone fallback (strictly within the session window; accept + or digits-only)\n        //        var phoneA = resp.ContactPhone ?? \"\";\n        //        var phoneB = phoneA.StartsWith(\"+\") ? phoneA[1..] : \"+\" + phoneA;\n\n        //        var execByPhone = await _context.FlowExecutionLogs\n        //            .AsNoTracking()\n        //            .Where(f => f.BusinessId == sentLog.BusinessId &&\n        //                        f.FlowId == flowId &&\n        //                        (f.ContactPhone == phoneA || f.ContactPhone == phoneB) &&\n        //                        f.ExecutedAt >= sessionStart &&\n        //                        f.ExecutedAt < sessionEnd)\n        //            .OrderBy(f => f.ExecutedAt)\n        //            .ToListAsync();\n\n        //        var flowExec = execByCsl.Concat(execByMsg).Concat(execByPhone)\n        //            .GroupBy(x => x.Id)\n        //            .Select(g => g.First())\n        //            .OrderBy(x => x.ExecutedAt)\n        //            .ToList();\n\n        //        foreach (var fe in flowExec)\n        //        {\n        //            if (!string.IsNullOrWhiteSpace(fe.TriggeredByButton))\n        //            {\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = fe.ExecutedAt,\n        //                    Source = \"User\",\n        //                    EventType = \"ButtonClicked\",\n        //                    Title = $\"Clicked Quick Reply: '{fe.TriggeredByButton}'\",\n        //                    Details = string.IsNullOrWhiteSpace(fe.TemplateName)\n        //                        ? $\"Advanced in flow at step '{fe.StepName}'\"\n        //                        : $\"Triggered next template: '{fe.TemplateName}'\",\n        //                    StepId = fe.StepId,\n        //                    StepName = fe.StepName,\n        //                    ButtonIndex = fe.ButtonIndex,\n        //                    ButtonTitle = fe.TriggeredByButton,\n        //                    TemplateName = fe.TemplateName\n        //                });\n        //            }\n\n        //            if (!string.IsNullOrWhiteSpace(fe.TemplateName))\n        //            {\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = fe.ExecutedAt,\n        //                    Source = \"System\",\n        //                    EventType = \"FlowSend\",\n        //                    Title = $\"Flow sent template '{fe.TemplateName}'\",\n        //                    Details = $\"Step '{fe.StepName}'\",\n        //                    StepId = fe.StepId,\n        //                    StepName = fe.StepName,\n        //                    TemplateName = fe.TemplateName\n        //                });\n        //            }\n        //        }\n\n        //        // Include the flow CSLs themselves + statuses (within window)\n        //        foreach (var csl in flowCslChain.Where(x => x.Id != sentLog.Id))\n        //        {\n        //            var ts = csl.SentAt ?? csl.CreatedAt;\n\n        //            events.Add(new JourneyEventDto\n        //            {\n        //                Timestamp = ts,\n        //                Source = \"System\",\n        //                EventType = \"FlowSend\",\n        //                Title = $\"Flow sent template '{csl.TemplateId}'\",\n        //                Details = csl.CTAFlowStepId.HasValue ? $\"Step: {csl.CTAFlowStepId}\" : null,\n        //                StepId = csl.CTAFlowStepId,\n        //                TemplateName = csl.TemplateId\n        //            });\n\n        //            if (csl.DeliveredAt is { } d2 && d2 >= sessionStart && d2 < sessionEnd)\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = d2,\n        //                    Source = \"Provider\",\n        //                    EventType = \"Delivered\",\n        //                    Title = \"Message delivered\",\n        //                    Details = \"\",\n        //                    TemplateName = csl.TemplateId,\n        //                    StepId = csl.CTAFlowStepId\n        //                });\n\n        //            if (csl.ReadAt is { } r2 && r2 >= sessionStart && r2 < sessionEnd)\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = r2,\n        //                    Source = \"Provider\",\n        //                    EventType = \"Read\",\n        //                    Title = \"Message read\",\n        //                    Details = \"\",\n        //                    TemplateName = csl.TemplateId,\n        //                    StepId = csl.CTAFlowStepId\n        //                });\n        //        }\n\n        //        // URL clicks during the flow (within window)\n        //        if (chainCslIds.Count > 0)\n        //        {\n        //            var flowClicks = await _context.CampaignClickLogs\n        //                .AsNoTracking()\n        //                .Where(c => chainCslIds.Contains(c.CampaignSendLogId) &&\n        //                            c.ClickedAt >= sessionStart &&\n        //                            c.ClickedAt < sessionEnd)\n        //                .OrderBy(c => c.ClickedAt)\n        //                .ToListAsync();\n\n        //            foreach (var c in flowClicks)\n        //            {\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = c.ClickedAt,\n        //                    Source = \"User\",\n        //                    EventType = \"ButtonClicked\",\n        //                    Title = $\"Clicked URL: '{c.ButtonTitle}'\",\n        //                    Details = $\"Redirected to {c.Destination}\",\n        //                    ButtonIndex = c.ButtonIndex,\n        //                    ButtonTitle = c.ButtonTitle,\n        //                    Url = c.Destination\n        //                });\n        //            }\n        //        }\n\n        //        // Where the user left off in this session\n        //        var lastFlowEvent = events\n        //            .Where(e => e.EventType == \"FlowSend\" || e.EventType == \"ButtonClicked\")\n        //            .OrderBy(e => e.Timestamp)\n        //            .LastOrDefault();\n\n        //        resp.LeftOffAt = lastFlowEvent?.StepName ?? lastFlowEvent?.Title;\n        //    }\n\n        //    resp.Events = events.OrderBy(e => e.Timestamp).ToList();\n        //    return resp;\n        //}\n        public async Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId)\n        {\n            var resp = new JourneyResponseDto { Events = new List<JourneyEventDto>() };\n            var events = resp.Events;\n\n            // 0) Load the selected send (campaign required; contact optional)\n            var sentLog = await _context.CampaignSendLogs\n                .AsNoTracking()\n                .Include(x => x.Campaign)\n                .Include(x => x.Contact)\n                .FirstOrDefaultAsync(x => x.Id == initialCampaignSendLogId);\n\n            if (sentLog is null || sentLog.Campaign is null)\n                return resp;\n\n            // Envelope (CampaignId is non-nullable now)\n            var campaignId = sentLog.CampaignId;\n            resp.CampaignId = campaignId;\n            resp.CampaignType = sentLog.CTAFlowConfigId.HasValue ? \"flow\" : \"dynamic_url\";\n            resp.FlowId = sentLog.CTAFlowConfigId;\n\n            if (sentLog.ContactId.HasValue)\n                resp.ContactId = sentLog.ContactId.Value;\n\n            // ---- Resolve a phone for display/flow fallback --------------------------------------------\n            string? phone = sentLog.Contact?.PhoneNumber;\n\n            // via MessageLog\n            if (string.IsNullOrWhiteSpace(phone) && sentLog.MessageLogId.HasValue)\n            {\n                phone = await _context.MessageLogs.AsNoTracking()\n                    .Where(m => m.Id == sentLog.MessageLogId.Value && m.BusinessId == sentLog.BusinessId)\n                    .Select(m => m.RecipientNumber)\n                    .FirstOrDefaultAsync();\n            }\n\n            // via Recipient → Contact or AudienceMember\n            if (string.IsNullOrWhiteSpace(phone) && sentLog.RecipientId != Guid.Empty)\n            {\n                var rec = await _context.CampaignRecipients.AsNoTracking()\n                    .Where(r => r.Id == sentLog.RecipientId)\n                    .Select(r => new { r.ContactId, r.AudienceMemberId })\n                    .FirstOrDefaultAsync();\n\n                if (rec is not null)\n                {\n                    if (rec.ContactId.HasValue)\n                        phone = await _context.Contacts.AsNoTracking()\n                            .Where(c => c.Id == rec.ContactId.Value)\n                            .Select(c => c.PhoneNumber)\n                            .FirstOrDefaultAsync();\n                    else if (rec.AudienceMemberId.HasValue)\n                        phone = await _context.AudiencesMembers.AsNoTracking()\n                            .Where(a => a.Id == rec.AudienceMemberId.Value)\n                            .Select(a => a.PhoneE164)\n                            .FirstOrDefaultAsync();\n                }\n            }\n\n            resp.ContactPhone = phone ?? \"\";\n\n            // ---- 1) Session window ---------------------------------------------------------------------\n            var sessionStart = sentLog.SentAt ?? sentLog.CreatedAt;\n\n            DateTime sessionEnd;\n\n            if (sentLog.ContactId.HasValue)\n            {\n                var contactId = sentLog.ContactId.Value;\n\n                var nextSameCampaignAt = await _context.CampaignSendLogs.AsNoTracking()\n                    .Where(x => x.ContactId == contactId &&\n                                x.CampaignId == campaignId &&\n                                x.CreatedAt > sessionStart)\n                    .OrderBy(x => x.CreatedAt)\n                    .Select(x => (DateTime?)x.CreatedAt)\n                    .FirstOrDefaultAsync();\n\n                DateTime? nextSameFlowAt = null;\n                if (sentLog.CTAFlowConfigId.HasValue)\n                {\n                    var flowId = sentLog.CTAFlowConfigId.Value;\n                    nextSameFlowAt = await _context.CampaignSendLogs.AsNoTracking()\n                        .Where(x => x.ContactId == contactId &&\n                                    x.CTAFlowConfigId == flowId &&\n                                    x.CreatedAt > sessionStart)\n                        .OrderBy(x => x.CreatedAt)\n                        .Select(x => (DateTime?)x.CreatedAt)\n                        .FirstOrDefaultAsync();\n                }\n\n                sessionEnd = new[] { nextSameCampaignAt, nextSameFlowAt }\n                    .Where(dt => dt.HasValue)\n                    .Select(dt => dt!.Value)\n                    .DefaultIfEmpty(sessionStart.AddHours(24))\n                    .Min();\n            }\n            else\n            {\n                // No ContactId: keep it simple and robust\n                sessionEnd = sessionStart.AddHours(24);\n            }\n\n            // ---- 2) Initial \"sent\" + statuses from CSL -------------------------------------------------\n            events.Add(new JourneyEventDto\n            {\n                Timestamp = sessionStart,\n                Source = \"System\",\n                EventType = \"MessageSent\",\n                Title = $\"Campaign '{sentLog.Campaign?.Name ?? \"Campaign\"}' sent\",\n                Details = string.IsNullOrWhiteSpace(resp.ContactPhone) ? null :\n                               $\"Template '{sentLog.TemplateId}' to {resp.ContactPhone}\",\n                TemplateName = sentLog.TemplateId\n            });\n\n            if (sentLog.DeliveredAt is { } d1 && d1 >= sessionStart && d1 < sessionEnd)\n                events.Add(new JourneyEventDto\n                {\n                    Timestamp = d1,\n                    Source = \"Provider\",\n                    EventType = \"Delivered\",\n                    Title = \"Message delivered\",\n                    Details = string.IsNullOrWhiteSpace(resp.ContactPhone) ? null : $\"Delivered to {resp.ContactPhone}\",\n                    TemplateName = sentLog.TemplateId\n                });\n\n            if (sentLog.ReadAt is { } r1 && r1 >= sessionStart && r1 < sessionEnd)\n                events.Add(new JourneyEventDto\n                {\n                    Timestamp = r1,\n                    Source = \"Provider\",\n                    EventType = \"Read\",\n                    Title = \"Message read\",\n                    Details = string.IsNullOrWhiteSpace(resp.ContactPhone) ? null : $\"Read by {resp.ContactPhone}\",\n                    TemplateName = sentLog.TemplateId\n                });\n\n            // ---- 3) URL clicks for THIS send within the window ----------------------------------------\n            var urlClicksInitial = await _context.CampaignClickLogs\n                .AsNoTracking()\n                .Where(c => c.CampaignSendLogId == sentLog.Id &&\n                            c.ClickedAt >= sessionStart && c.ClickedAt < sessionEnd)\n                .OrderBy(c => c.ClickedAt)\n                .ToListAsync();\n\n            foreach (var c in urlClicksInitial)\n            {\n                events.Add(new JourneyEventDto\n                {\n                    Timestamp = c.ClickedAt,\n                    Source = \"User\",\n                    EventType = \"ButtonClicked\",\n                    Title = $\"Clicked URL Button: '{c.ButtonTitle}'\",\n                    Details = $\"Redirected to {c.Destination}\",\n                    ButtonIndex = c.ButtonIndex,\n                    ButtonTitle = c.ButtonTitle,\n                    Url = c.Destination\n                });\n            }\n\n            // ---- 4) FLOW chain (if any) ---------------------------------------------------------------\n            if (sentLog.CTAFlowConfigId.HasValue)\n            {\n                var flowId = sentLog.CTAFlowConfigId.Value;\n\n                resp.FlowName = await _context.CTAFlowConfigs.AsNoTracking()\n                    .Where(f => f.Id == flowId)\n                    .Select(f => f.FlowName)\n                    .FirstOrDefaultAsync();\n\n                // Build base query for CSLs in this business/flow within the window\n                var flowCslQuery = _context.CampaignSendLogs.AsNoTracking()\n                    .Where(csl => csl.BusinessId == sentLog.BusinessId &&\n                                  csl.CTAFlowConfigId == flowId &&\n                                  csl.CreatedAt >= sessionStart &&\n                                  csl.CreatedAt < sessionEnd);\n\n                // If we have ContactId, match on it; otherwise match by phone via MessageLogs\n                List<Guid> chainCslIds;\n                if (sentLog.ContactId.HasValue)\n                {\n                    var contactId = sentLog.ContactId.Value;\n                    chainCslIds = await flowCslQuery.Where(csl => csl.ContactId == contactId)\n                        .OrderBy(csl => csl.CreatedAt)\n                        .Select(csl => csl.Id)\n                        .ToListAsync();\n                }\n                else if (!string.IsNullOrWhiteSpace(phone))\n                {\n                    var msgIdsForPhone = await _context.MessageLogs.AsNoTracking()\n                        .Where(m => m.BusinessId == sentLog.BusinessId &&\n                                    m.RecipientNumber == phone &&\n                                    m.CreatedAt >= sessionStart && m.CreatedAt < sessionEnd)\n                        .Select(m => m.Id)\n                        .ToListAsync();\n\n                    chainCslIds = await flowCslQuery\n                        .Where(csl => csl.MessageLogId.HasValue &&\n                                      msgIdsForPhone.Contains(csl.MessageLogId.Value))\n                        .OrderBy(csl => csl.CreatedAt)\n                        .Select(csl => csl.Id)\n                        .ToListAsync();\n\n                    if (!chainCslIds.Contains(sentLog.Id))\n                        chainCslIds.Add(sentLog.Id);\n                }\n                else\n                {\n                    chainCslIds = new List<Guid> { sentLog.Id };\n                }\n\n                // Pull minimal data for those CSLs (for statuses)\n                var flowCslChain = await _context.CampaignSendLogs.AsNoTracking()\n                    .Where(csl => chainCslIds.Contains(csl.Id))\n                    .OrderBy(csl => csl.CreatedAt)\n                    .Select(csl => new\n                    {\n                        csl.Id,\n                        csl.MessageLogId,\n                        csl.SentAt,\n                        csl.CreatedAt,\n                        csl.TemplateId,\n                        csl.CTAFlowStepId,\n                        csl.DeliveredAt,\n                        csl.ReadAt\n                    })\n                    .ToListAsync();\n\n                var chainMsgLogIds = flowCslChain\n                    .Where(x => x.MessageLogId.HasValue)\n                    .Select(x => x.MessageLogId!.Value)\n                    .ToList();\n\n                // Flow exec logs by CSL\n                var execByCsl = await _context.FlowExecutionLogs.AsNoTracking()\n                    .Where(f => f.CampaignSendLogId.HasValue &&\n                                chainCslIds.Contains(f.CampaignSendLogId.Value) &&\n                                f.ExecutedAt >= sessionStart && f.ExecutedAt < sessionEnd)\n                    .OrderBy(f => f.ExecutedAt)\n                    .ToListAsync();\n\n                // ... by MessageLog\n                var execByMsg = chainMsgLogIds.Count == 0\n                    ? new List<FlowExecutionLog>()\n                    : await _context.FlowExecutionLogs.AsNoTracking()\n                        .Where(f => f.MessageLogId.HasValue &&\n                                    chainMsgLogIds.Contains(f.MessageLogId.Value) &&\n                                    f.ExecutedAt >= sessionStart && f.ExecutedAt < sessionEnd)\n                        .OrderBy(f => f.ExecutedAt)\n                        .ToListAsync();\n\n                // ... by Phone fallback (accept + or digits-only)\n                var phoneA = phone ?? \"\";\n                var phoneB = string.IsNullOrWhiteSpace(phoneA)\n                    ? \"\"\n                    : (phoneA.StartsWith(\"+\") ? phoneA[1..] : \"+\" + phoneA);\n\n                var execByPhone = string.IsNullOrWhiteSpace(phoneA)\n                    ? new List<FlowExecutionLog>()\n                    : await _context.FlowExecutionLogs.AsNoTracking()\n                        .Where(f => f.BusinessId == sentLog.BusinessId &&\n                                    f.FlowId == flowId &&\n                                    (f.ContactPhone == phoneA || f.ContactPhone == phoneB) &&\n                                    f.ExecutedAt >= sessionStart && f.ExecutedAt < sessionEnd)\n                        .OrderBy(f => f.ExecutedAt)\n                        .ToListAsync();\n\n                var flowExec = execByCsl.Concat(execByMsg).Concat(execByPhone)\n                    .GroupBy(x => x.Id)\n                    .Select(g => g.First())\n                    .OrderBy(x => x.ExecutedAt)\n                    .ToList();\n\n                foreach (var fe in flowExec)\n                {\n                    if (!string.IsNullOrWhiteSpace(fe.TriggeredByButton))\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = fe.ExecutedAt,\n                            Source = \"User\",\n                            EventType = \"ButtonClicked\",\n                            Title = $\"Clicked Quick Reply: '{fe.TriggeredByButton}'\",\n                            Details = string.IsNullOrWhiteSpace(fe.TemplateName)\n                                          ? $\"Advanced in flow at step '{fe.StepName}'\"\n                                          : $\"Triggered next template: '{fe.TemplateName}'\",\n                            StepId = fe.StepId,\n                            StepName = fe.StepName,\n                            ButtonIndex = fe.ButtonIndex,\n                            ButtonTitle = fe.TriggeredByButton,\n                            TemplateName = fe.TemplateName\n                        });\n                    }\n\n                    if (!string.IsNullOrWhiteSpace(fe.TemplateName))\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = fe.ExecutedAt,\n                            Source = \"System\",\n                            EventType = \"FlowSend\",\n                            Title = $\"Flow sent template '{fe.TemplateName}'\",\n                            Details = $\"Step '{fe.StepName}'\",\n                            StepId = fe.StepId,\n                            StepName = fe.StepName,\n                            TemplateName = fe.TemplateName\n                        });\n                    }\n                }\n\n                // Include the flow CSLs themselves + statuses (within window)\n                foreach (var csl in flowCslChain.Where(x => x.Id != sentLog.Id))\n                {\n                    var ts = csl.SentAt ?? csl.CreatedAt;\n\n                    events.Add(new JourneyEventDto\n                    {\n                        Timestamp = ts,\n                        Source = \"System\",\n                        EventType = \"FlowSend\",\n                        Title = $\"Flow sent template '{csl.TemplateId}'\",\n                        Details = csl.CTAFlowStepId.HasValue ? $\"Step: {csl.CTAFlowStepId}\" : null,\n                        StepId = csl.CTAFlowStepId,\n                        TemplateName = csl.TemplateId\n                    });\n\n                    if (csl.DeliveredAt is { } d2 && d2 >= sessionStart && d2 < sessionEnd)\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = d2,\n                            Source = \"Provider\",\n                            EventType = \"Delivered\",\n                            Title = \"Message delivered\",\n                            Details = \"\",\n                            TemplateName = csl.TemplateId,\n                            StepId = csl.CTAFlowStepId\n                        });\n\n                    if (csl.ReadAt is { } r2 && r2 >= sessionStart && r2 < sessionEnd)\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = r2,\n                            Source = \"Provider\",\n                            EventType = \"Read\",\n                            Title = \"Message read\",\n                            Details = \"\",\n                            TemplateName = csl.TemplateId,\n                            StepId = csl.CTAFlowStepId\n                        });\n                }\n\n                // URL clicks during the flow (within window)\n                if (chainCslIds.Count > 0)\n                {\n                    var flowClicks = await _context.CampaignClickLogs.AsNoTracking()\n                        .Where(c => chainCslIds.Contains(c.CampaignSendLogId) &&\n                                    c.ClickedAt >= sessionStart && c.ClickedAt < sessionEnd)\n                        .OrderBy(c => c.ClickedAt)\n                        .ToListAsync();\n\n                    foreach (var c in flowClicks)\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = c.ClickedAt,\n                            Source = \"User\",\n                            EventType = \"ButtonClicked\",\n                            Title = $\"Clicked URL: '{c.ButtonTitle}'\",\n                            Details = $\"Redirected to {c.Destination}\",\n                            ButtonIndex = c.ButtonIndex,\n                            ButtonTitle = c.ButtonTitle,\n                            Url = c.Destination\n                        });\n                    }\n                }\n\n                // Left-off marker\n                var lastFlowEvent = events\n                    .Where(e => e.EventType == \"FlowSend\" || e.EventType == \"ButtonClicked\")\n                    .OrderBy(e => e.Timestamp)\n                    .LastOrDefault();\n\n                resp.LeftOffAt = lastFlowEvent?.StepName ?? lastFlowEvent?.Title;\n            }\n\n            resp.Events = events.OrderBy(e => e.Timestamp).ToList();\n            return resp;\n        }\n\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IContactJourneyService.cs",
      "sha256": "e073e1050a64e2ac4cd335378ce53f0ed653944621efaefbd090223ab818c8fe",
      "language": "csharp",
      "size": 341,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs; // Updated namespace\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IContactJourneyService\n    {\n        Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId);\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IMessageLogsReportService.cs",
      "sha256": "c9879941a987b70fa6796fad4ee97fce33c7dddc65835b8a5ec3d5115d9598c0",
      "language": "csharp",
      "size": 595,
      "content": "// 📄 Features/Tracking/Services/IMessageLogsReportService.cs\nusing xbytechat.api.Shared; // PaginatedResponse<T>\nusing xbytechat.api.Features.Tracking.DTOs;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IMessageLogsReportService\n    {\n\n        Task<PaginatedResponse<MessageLogListItemDto>> SearchAsync(\n            Guid businessId,\n            MessageLogReportQueryDto q,\n            CancellationToken ct);\n\n        Task<MessageLogFacetsDto> GetFacetsAsync(\n            Guid businessId,\n            DateTime? fromUtc,\n            CancellationToken ct);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/ITrackingService.cs",
      "sha256": "7331e4a2b1fb44932573c4ed055613cc4ae21dcd9ec54bc25210c57cd340737c",
      "language": "csharp",
      "size": 528,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface ITrackingService\n    {\n        Task LogCTAClickAsync(TrackingLogDto dto);\n        Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId);\n        Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto);\n        Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IUrlBuilderService.cs",
      "sha256": "2415363e2bcc41b916d5b2836a0c28ac68dabd407d67b63661da9feb8372bd56",
      "language": "csharp",
      "size": 273,
      "content": "namespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IUrlBuilderService\n    {\n\n         string BuildTrackedButtonUrl(\n        Guid campaignSendLogId,\n        int buttonIndex,\n        string? buttonTitle,\n        string destinationUrlAbsolute);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/MessageLogsReportService.cs",
      "sha256": "8a67844db3c5b576d25730b2bd7d379ab878463d5615bd2ed0513a63e327b6ec",
      "language": "csharp",
      "size": 10193,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Linq.Expressions;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    \n\n    // Strongly-typed intermediate row for EF translation (avoid 'dynamic')\n    internal sealed class MessageLogRow\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }\n\n        public string? RecipientNumber { get; set; }\n        public string? SenderId { get; set; }           // Campaign.PhoneNumberId\n        public string? SourceChannel { get; set; }      // Campaign.Provider OR MessageLog.Provider\n        public string? Status { get; set; }\n\n        public string? MessageContent { get; set; }\n        public string? ProviderMessageId { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n    }\n\n    public sealed class MessageLogsReportService : IMessageLogsReportService\n    {\n        private readonly AppDbContext _db;\n        public MessageLogsReportService(AppDbContext db) => _db = db;\n\n        public async Task<PaginatedResponse<MessageLogListItemDto>> SearchAsync(\n            Guid businessId, MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            // normalize paging\n            q.Page = Math.Max(1, q.Page);\n            q.PageSize = Math.Clamp(q.PageSize, 1, 200);\n\n            // Base + left join to Campaign to enrich\n            var baseQuery =\n                from m in _db.MessageLogs.AsNoTracking()\n                where m.BusinessId == businessId\n                join c0 in _db.Campaigns.AsNoTracking() on m.CampaignId equals c0.Id into cj\n                from c in cj.DefaultIfEmpty()\n                select new MessageLogRow\n                {\n                    Id = m.Id,\n                    BusinessId = m.BusinessId,\n                    CampaignId = m.CampaignId,\n                    CampaignName = c != null ? c.Name : null,\n                    RecipientNumber = m.RecipientNumber,\n                    SenderId = c != null ? c.PhoneNumberId : null,\n                    SourceChannel = (c != null && c.Provider != null) ? c.Provider : m.Provider,\n                    Status = m.Status,\n                    MessageContent = m.MessageContent,\n                    ProviderMessageId = m.ProviderMessageId ?? m.MessageId,\n                    ErrorMessage = m.ErrorMessage,\n                    CreatedAt = m.CreatedAt,\n                    SentAt = m.SentAt\n                };\n\n            // Time window (prefer SentAt over CreatedAt)\n            if (q.FromUtc.HasValue)\n                baseQuery = baseQuery.Where(x => (x.SentAt ?? x.CreatedAt) >= q.FromUtc.Value);\n            if (q.ToUtc.HasValue)\n                baseQuery = baseQuery.Where(x => (x.SentAt ?? x.CreatedAt) <= q.ToUtc.Value);\n\n            // Optional scope\n            if (q.CampaignId.HasValue)\n                baseQuery = baseQuery.Where(x => x.CampaignId == q.CampaignId.Value);\n\n            // Status filter\n            if (q.Statuses is { Length: > 0 })\n            {\n                var statuses = q.Statuses.Where(s => !string.IsNullOrWhiteSpace(s)).ToArray();\n                if (statuses.Length > 0) baseQuery = baseQuery.Where(x => statuses.Contains(x.Status!));\n            }\n\n            // Channel filter (campaign.Provider preferred, else message.Provider)\n            if (q.Channels is { Length: > 0 })\n            {\n                var chans = q.Channels.Select(s => s.Trim().ToUpperInvariant())\n                                      .Where(s => s.Length > 0).ToArray();\n                if (chans.Length > 0)\n                    baseQuery = baseQuery.Where(x => x.SourceChannel != null &&\n                                                     chans.Contains(x.SourceChannel.ToUpper()));\n            }\n\n            // SenderIds → Campaign.PhoneNumberId\n            if (q.SenderIds is { Length: > 0 })\n            {\n                var senders = q.SenderIds.Select(s => s.Trim())\n                                         .Where(s => s.Length > 0).ToArray();\n                if (senders.Length > 0)\n                    baseQuery = baseQuery.Where(x => x.SenderId != null && senders.Contains(x.SenderId));\n            }\n\n            // Free-text search\n            if (!string.IsNullOrWhiteSpace(q.Search))\n            {\n                var s = q.Search.Trim().ToLower();\n                baseQuery = baseQuery.Where(x =>\n                    (x.RecipientNumber ?? \"\").ToLower().Contains(s) ||\n                    (x.MessageContent ?? \"\").ToLower().Contains(s) ||\n                    (x.ErrorMessage ?? \"\").ToLower().Contains(s) ||\n                    (x.ProviderMessageId ?? \"\").ToLower().Contains(s) ||\n                    (x.CampaignName ?? \"\").ToLower().Contains(s));\n            }\n\n            // ----- Strongly-typed sorting -----\n            var sortBy = (q.SortBy ?? \"SentAt\").Trim();\n            var sortDir = (q.SortDir ?? \"desc\").Trim().ToLower() == \"asc\" ? \"asc\" : \"desc\";\n\n            var sortMap = new Dictionary<string, Expression<Func<MessageLogRow, object>>>(\n                StringComparer.OrdinalIgnoreCase)\n            {\n                [\"Recipient\"] = x => x.RecipientNumber ?? \"\",\n                [\"SenderId\"] = x => x.SenderId ?? \"\",\n                [\"Channel\"] = x => x.SourceChannel ?? \"\",\n                [\"Status\"] = x => x.Status ?? \"\",\n                [\"CampaignName\"] = x => x.CampaignName ?? \"\",\n                [\"CreatedAt\"] = x => x.CreatedAt,\n                [\"SentAt\"] = x => x.SentAt ?? x.CreatedAt\n            };\n\n            if (!sortMap.ContainsKey(sortBy)) sortBy = \"SentAt\";\n            var keySelector = sortMap[sortBy];\n\n            IOrderedQueryable<MessageLogRow> ordered =\n                sortDir == \"asc\" ? baseQuery.OrderBy(keySelector)\n                                 : baseQuery.OrderByDescending(keySelector);\n\n            var total = await ordered.CountAsync(ct);\n\n            var items = await ordered\n                .Skip((q.Page - 1) * q.PageSize)\n                .Take(q.PageSize)\n                .Select(x => new MessageLogListItemDto\n                {\n                    Id = x.Id,\n                    BusinessId = x.BusinessId,\n                    CampaignId = x.CampaignId,\n                    CampaignName = x.CampaignName,\n                    RecipientNumber = x.RecipientNumber,\n                    SenderId = x.SenderId,\n                    SourceChannel = x.SourceChannel,\n                    Status = x.Status,\n                    MessageType = null,             // not on MessageLog (can be enriched later)\n                    MessageContent = x.MessageContent,\n                    TemplateName = null,             // not on MessageLog\n                    ProviderMessageId = x.ProviderMessageId,\n                    ErrorMessage = x.ErrorMessage,\n                    CreatedAt = x.CreatedAt,\n                    SentAt = x.SentAt,\n                    DeliveredAt = null,             // not on MessageLog\n                    ReadAt = null              // not on MessageLog\n                })\n                .ToListAsync(ct);\n\n            return new PaginatedResponse<MessageLogListItemDto>\n            {\n                Items = items,\n                TotalCount = total,\n                Page = q.Page,\n                PageSize = q.PageSize\n            };\n        }\n        public async Task<MessageLogFacetsDto> GetFacetsAsync(Guid businessId, DateTime? fromUtc, CancellationToken ct)\n        {\n            // scope last 90 days by default to keep it fast\n            var from = fromUtc ?? DateTime.UtcNow.AddDays(-90);\n\n            // base query limited by business & time\n            var baseQ = _db.MessageLogs\n                .AsNoTracking()\n                .Where(m => m.BusinessId == businessId &&\n                            (m.SentAt ?? m.CreatedAt) >= from);\n\n            // SenderIds come from Campaign.PhoneNumberId (if available)\n\n            var senderIds = await _db.WhatsAppPhoneNumbers\n            .AsNoTracking()\n            .Where(w => w.BusinessId == businessId && w.WhatsAppBusinessNumber != null)\n            .Select(w => w.PhoneNumberId!)\n            .Distinct()\n            .OrderBy(x => x)\n            .ToArrayAsync(ct);\n\n            //var senderIds = await (\n            //    from m in baseQ\n            //    join c0 in _db.Campaigns.AsNoTracking() on m.CampaignId equals c0.Id into cj\n            //    from c in cj.DefaultIfEmpty()\n            //    where c != null && c.PhoneNumberId != null\n            //    select c.PhoneNumberId!\n            //)\n            //.Distinct()\n            //.OrderBy(x => x)\n            //.ToArrayAsync(ct);\n\n            // Channels = provider (prefer campaign.provider, else message.provider)\n            var channels = await (\n                from m in baseQ\n                join c0 in _db.Campaigns.AsNoTracking() on m.CampaignId equals c0.Id into cj\n                from c in cj.DefaultIfEmpty()\n                let prov = (c != null && c.Provider != null) ? c.Provider : m.Provider\n                where prov != null\n                select prov!\n            )\n            .Distinct()\n            .OrderBy(x => x)\n            .ToArrayAsync(ct);\n\n            // Statuses\n            var statuses = await baseQ\n                .Where(m => m.Status != null)\n                .Select(m => m.Status!)\n                .Distinct()\n                .OrderBy(x => x)\n                .ToArrayAsync(ct);\n\n            // WABA Ids = WhatsAppBusinessNumber for this business\n            var wabaIds = await _db.WhatsAppSettings\n                .AsNoTracking()\n                .Where(w => w.BusinessId == businessId && w.WabaId != null)\n                .Select(w => w.WabaId!)\n                .Distinct()\n                .OrderBy(x => x)\n                .ToArrayAsync(ct);\n\n            return new MessageLogFacetsDto\n            {\n                WabaIds = wabaIds,\n                SenderIds = senderIds,\n                Channels = channels,\n                Statuses = statuses\n            };\n        }\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/TrackingService.cs",
      "sha256": "90d3f4b3c6a0d5d10d83300d0c3ed58fc81149c2dec145768cfafe2886dccb0b",
      "language": "csharp",
      "size": 9142,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Shared.TrackingUtils;\nusing Serilog;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing AutoMapper;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class TrackingService : ITrackingService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMapper _mapper;\n        public TrackingService(AppDbContext context, IMapper mapper)\n        {\n            _context = context;\n            _mapper = mapper;\n        }\n\n\n        public async Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                // 🧠 1. Try enrich from MessageLog (if msg ID provided)\n                if (!string.IsNullOrEmpty(dto.MessageId))\n                {\n                    var messageLog = await _context.MessageLogs\n                        .FirstOrDefaultAsync(m => m.MessageId == dto.MessageId || m.Id.ToString() == dto.MessageId);\n\n                    if (messageLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty ? messageLog.BusinessId : dto.BusinessId;\n                        dto.ContactId ??= messageLog.ContactId;\n                        dto.CampaignId ??= messageLog.CampaignId;\n                        dto.MessageLogId ??= messageLog.Id;\n                    }\n                }\n\n                // 🧩 2. Enrich from CampaignSendLog if sourceType = campaign\n                CampaignSendLog? sendLog = null;\n\n                if (dto.SourceType == \"campaign\")\n                {\n                    if (!string.IsNullOrEmpty(dto.MessageId))\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .FirstOrDefaultAsync(c => c.MessageId == dto.MessageId);\n                    }\n\n                    if (sendLog == null && dto.CampaignId != null)\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .Where(c => c.CampaignId == dto.CampaignId)\n                            .OrderByDescending(c => c.CreatedAt)\n                            .FirstOrDefaultAsync();\n                    }\n\n                    if (sendLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty\n                            ? sendLog.Recipient?.BusinessId ?? Guid.Empty\n                            : dto.BusinessId;\n\n                        dto.ContactId ??= sendLog.ContactId;\n                        dto.CampaignId ??= sendLog.CampaignId;\n                        dto.CampaignSendLogId ??= sendLog.Id;\n\n                        // ✅ Update campaign send log click details\n                        sendLog.IsClicked = true;\n                        sendLog.ClickedAt = dto.ClickedAt ?? DateTime.UtcNow;\n                        sendLog.ClickType = dto.ButtonText;\n\n                        await _context.SaveChangesAsync();\n                    }\n                }\n\n                // ✅ 3. Validate business context\n                if (dto.BusinessId == Guid.Empty)\n                {\n                    Log.Warning(\"❌ TrackingLog failed: No BusinessId available for click.\");\n                    return ResponseResult.ErrorInfo(\"Business context is missing.\");\n                }\n\n                // 💾 4. Save tracking log (inline instead of separate method)\n                var trackingLog = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(trackingLog);\n                await _context.SaveChangesAsync();\n\n                // ✅ Return the TrackingLog.Id in the response\n                return ResponseResult.SuccessInfo(\"CTA click tracked successfully.\", trackingLog.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception during CTA tracking enrichment\");\n                return ResponseResult.ErrorInfo(\"Exception during tracking: \" + ex.Message);\n            }\n        }\n\n        public async Task LogCTAClickAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                var log = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to log CTA click\");\n            }\n        }\n        public async Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId)\n        {\n            var tracking = await _context.TrackingLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.Id == logId);\n\n            if (tracking == null)\n                return null;\n\n            var contact = tracking.ContactId != null\n                ? await _context.Contacts.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.ContactId)\n                : null;\n\n            var campaign = tracking.CampaignId != null\n                ? await _context.Campaigns.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.CampaignId)\n                : null;\n\n            var messageLog = tracking.MessageLogId != null\n                ? await _context.MessageLogs.AsNoTracking().FirstOrDefaultAsync(m => m.Id == tracking.MessageLogId)\n                : null;\n\n            return new TrackingLogDetailsDto\n            {\n                Tracking = _mapper.Map<TrackingLogDto>(tracking),\n                Contact = contact != null ? _mapper.Map<ContactDto>(contact) : null,\n                Campaign = campaign != null ? _mapper.Map<CampaignDto>(campaign) : null,\n                MessageLog = messageLog != null ? _mapper.Map<MessageLogDto>(messageLog) : null\n            };\n        }\n        public async Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId)\n        {\n            return await _context.TrackingLogs\n                .Where(x => x.BusinessId == businessId && x.SourceType == \"cta-flow\")\n                .OrderByDescending(x => x.ClickedAt)\n                .ToListAsync();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/TrackingToken.cs",
      "sha256": "b5250fc25e3e0ca598d78eba428d651a345550debbc5696ceb32b55ce684019e",
      "language": "csharp",
      "size": 809,
      "content": "using System.Text.Json;\nusing Microsoft.AspNetCore.WebUtilities;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public static class TrackingToken\n    {\n        public static string Create(object payload)\n        {\n            var json = JsonSerializer.Serialize(payload);\n            var bytes = System.Text.Encoding.UTF8.GetBytes(json);\n            return WebEncoders.Base64UrlEncode(bytes);\n        }\n\n        public static T Decode<T>(string token)\n        {\n            var bytes = WebEncoders.Base64UrlDecode(token);\n            var json = System.Text.Encoding.UTF8.GetString(bytes);\n            return JsonSerializer.Deserialize<T>(json)!;\n        }\n    }\n\n    // What we put inside the token:\n    public record ClickToken(Guid cid, int btnIndex, string btnTitle, string to, string phone);\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/UrlBuilderService.cs",
      "sha256": "8f3156fd79a3ab196299a3f0ebb88e74ebe340db9a0d13bd47189ecc5996109d",
      "language": "csharp",
      "size": 4999,
      "content": "// Features/Tracking/Services/UrlBuilderService.cs\nusing System;\nusing Microsoft.Extensions.Options;\nusing xbytechat.api.Features.CampaignTracking.Config;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class UrlBuilderService : IUrlBuilderService\n    {\n        private readonly IClickTokenService _token;\n        private readonly TrackingOptions _opt;\n\n        // Allowed schemes for destination links\n        private static readonly string[] AllowedSchemes = new[] { \"http\", \"https\", \"tel\", \"wa\", \"whatsapp\" };\n\n        public UrlBuilderService(IClickTokenService token, IOptions<TrackingOptions> opt)\n        {\n            _token = token;\n            _opt = opt.Value;\n        }\n\n        /// <summary>\n        /// Normalizes destination and enforces an allowlist of schemes:\n        /// http, https, tel, wa, whatsapp.\n        /// Also supports shorthand WhatsApp hosts: wa.me/... and api.whatsapp.com/...\n        /// </summary>\n        private static string NormalizeAbsoluteUrlOrThrow(string input)\n        {\n            if (input is null) throw new ArgumentException(\"Destination URL is null.\", nameof(input));\n\n            // Trim and remove any non-printable/control whitespace characters\n            var s = input.Trim();\n            s = new string(Array.FindAll(s.ToCharArray(), c => !char.IsControl(c)));\n\n            if (s.Length == 0)\n                throw new ArgumentException(\"Destination URL is empty after trimming.\", nameof(input));\n\n            // Short-circuit for already tracked links, just in case this ever gets called that way\n            if (s.Contains(\"/r/\", StringComparison.Ordinal))\n                return s;\n\n            // Support common WhatsApp shorthands without scheme\n            // e.g. \"wa.me/9170...\" or \"api.whatsapp.com/send?phone=...\"\n            if (!s.Contains(\"://\", StringComparison.Ordinal))\n            {\n                if (s.StartsWith(\"wa.me/\", StringComparison.OrdinalIgnoreCase) ||\n                    s.StartsWith(\"api.whatsapp.com/\", StringComparison.OrdinalIgnoreCase))\n                {\n                    var guessWa = \"https://\" + s;\n                    if (Uri.TryCreate(guessWa, UriKind.Absolute, out var waAbs))\n                        return waAbs.AbsoluteUri;\n                }\n            }\n\n            // Accept absolute URIs with allowed schemes\n            if (Uri.TryCreate(s, UriKind.Absolute, out var abs))\n            {\n                var scheme = abs.Scheme ?? string.Empty;\n\n                // Allow only whitelisted schemes\n                var isAllowed = false;\n                for (int i = 0; i < AllowedSchemes.Length; i++)\n                {\n                    if (scheme.Equals(AllowedSchemes[i], StringComparison.OrdinalIgnoreCase))\n                    {\n                        isAllowed = true;\n                        break;\n                    }\n                }\n\n                if (!isAllowed)\n                    throw new ArgumentException(\n                        $\"Destination must use one of: http, https, tel, wa, whatsapp. Got '{scheme}:'\",\n                        nameof(input));\n\n                // http/https → return canonical AbsoluteUri\n                if (scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase))\n                {\n                    return abs.AbsoluteUri;\n                }\n\n                // tel:/wa:/whatsapp://send → return as provided (trimmed), do not modify\n                return s;\n            }\n\n            // Human input like \"www.example.com/...\" or \"example.com/...\"\n            if (!s.Contains(\"://\", StringComparison.Ordinal) && s.Contains('.', StringComparison.Ordinal))\n            {\n                var guess = \"https://\" + s;\n                if (Uri.TryCreate(guess, UriKind.Absolute, out var httpAbs))\n                    return httpAbs.AbsoluteUri;\n            }\n\n            throw new ArgumentException(\n                $\"Destination must be an absolute URL or allowed deep link (http, https, tel, wa, whatsapp). Got: '{input}'\",\n                nameof(input));\n        }\n\n        public string BuildTrackedButtonUrl(\n            Guid campaignSendLogId,\n            int buttonIndex,\n            string? buttonTitle,\n            string destinationUrlAbsolute)\n        {\n            var dest = NormalizeAbsoluteUrlOrThrow(destinationUrlAbsolute);\n\n            var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n            var exp = now + (long)_opt.TokenTtl.TotalSeconds;\n\n            var payload = new ClickTokenPayload(\n                cid: campaignSendLogId,\n                bi: buttonIndex,\n                bt: buttonTitle ?? string.Empty,\n                to: dest,\n                iat: now,\n                exp: exp\n            );\n\n            var token = _token.Create(payload);\n            return $\"{_opt.BaseUrl.TrimEnd('/')}/r/{token}\";\n        }\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/BackgroundWorkers/WebhookAutoCleanupWorker.cs",
      "sha256": "5149c73a4fbcb11d9e501321407b1c7ae7ee660b8f7d612eca136b528f0467f2",
      "language": "csharp",
      "size": 1212,
      "content": "using xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.BackgroundWorkers\n{\n    public class WebhookAutoCleanupWorker : BackgroundService\n    {\n        private readonly ILogger<WebhookAutoCleanupWorker> _logger;\n        private readonly IServiceProvider _services;\n\n        public WebhookAutoCleanupWorker(IServiceProvider services, ILogger<WebhookAutoCleanupWorker> logger)\n        {\n            _services = services;\n            _logger = logger;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                using var scope = _services.CreateScope();\n                var maintenanceService = scope.ServiceProvider.GetRequiredService<IMaintenanceService>();\n\n                if (await maintenanceService.IsAutoCleanupEnabledAsync())\n                {\n                    var count = await maintenanceService.RunCleanupAsync();\n                    _logger.LogInformation($\"🧹 Auto-cleaned {count} old webhook logs.\");\n                }\n\n                await Task.Delay(TimeSpan.FromHours(12), stoppingToken);\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/BackgroundWorkers/WebhookQueueWorker.cs",
      "sha256": "4a0dbbf63a7e5e5dbdea08790538d449d81f91e4234da7a4b8acedf0ff744b25",
      "language": "csharp",
      "size": 3019,
      "content": "using System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.Webhooks.Services;\nusing xbytechat.api.Features.Webhooks.DTOs;\n\npublic class WebhookQueueWorker : BackgroundService\n{\n    private readonly IWebhookQueueService _queueService;\n    private readonly IServiceScopeFactory _scopeFactory;\n    private readonly ILogger<WebhookQueueWorker> _logger;\n\n    public WebhookQueueWorker(\n        IWebhookQueueService queueService,\n        IServiceScopeFactory scopeFactory,\n        ILogger<WebhookQueueWorker> logger)\n    {\n        _queueService = queueService;\n        _scopeFactory = scopeFactory;\n        _logger = logger;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        _logger.LogInformation(\"🚀 Webhook Queue Worker started.\");\n\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            try\n            {\n                var payload = await _queueService.DequeueAsync(stoppingToken);\n                var clonedPayload = payload.Clone(); // ✅ Avoid disposal issue\n\n                using var scope = _scopeFactory.CreateScope();\n\n                // 🔄 Resolve scoped dependencies\n                var dispatcher = scope.ServiceProvider.GetRequiredService<IWhatsAppWebhookDispatcher>();\n                var failureLogger = scope.ServiceProvider.GetRequiredService<IFailedWebhookLogService>();\n\n                // 🚀 Dispatch\n                await dispatcher.DispatchAsync(clonedPayload);\n            }\n            catch (OperationCanceledException)\n            {\n                _logger.LogInformation(\"🛑 Graceful shutdown requested.\");\n                break;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Error while processing webhook payload.\");\n\n                try\n                {\n                    using var scope = _scopeFactory.CreateScope();\n                    var failureLogger = scope.ServiceProvider.GetRequiredService<IFailedWebhookLogService>();\n\n                    var fallback = new FailedWebhookLogDto\n                    {\n                        SourceModule = \"WebhookQueueWorker\",\n                        FailureType = \"DispatchError\",\n                        ErrorMessage = ex.Message,\n                       // RawJson = ex.Data[\"payload\"]?.ToString() ?? \"(unavailable)\",\n                        RawJson = ex.Data[\"payload\"]?.ToString() ?? \"{}\",\n                        CreatedAt = DateTime.UtcNow\n                    };\n\n                    await failureLogger.LogFailureAsync(fallback);\n                }\n                catch (Exception innerEx)\n                {\n                    _logger.LogError(innerEx, \"⚠️ Failed to log to FailedWebhookLogs table.\");\n                }\n            }\n        }\n\n        _logger.LogInformation(\"🛑 Webhook Queue Worker stopped.\");\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Controllers/FailedWebhookLogsController.cs",
      "sha256": "f16ada5c238d2293688a73b0c4428da7f91567d1ca100da1809f0b95ea65c2fc",
      "language": "csharp",
      "size": 1018,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/failed-webhooks\")]\n    public class FailedWebhookLogsController : ControllerBase\n    {\n        private readonly IFailedWebhookLogService _service;\n\n        public FailedWebhookLogsController(IFailedWebhookLogService service)\n        {\n            _service = service;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllAsync()\n        {\n            var logs = await _service.GetAllAsync();\n            return Ok(logs);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var log = await _service.GetByIdAsync(id);\n            if (log == null)\n                return NotFound();\n\n            return Ok(log);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Controllers/MaintenanceController.cs",
      "sha256": "2936737cca434f20b27184b1885f94a5a90a6a94453b29dc0a597b264cc6325d",
      "language": "csharp",
      "size": 3242,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Webhooks.Models;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks\")]\n    public class MaintenanceController : ControllerBase\n    {\n        private readonly AppDbContext _context;\n        private readonly IMaintenanceService _maintenance;\n\n        public MaintenanceController(AppDbContext context, IMaintenanceService maintenance)\n        {\n            _context = context;\n            _maintenance = maintenance;\n        }\n\n        // ✅ Injected Test Log for Dev Testing\n        [HttpPost(\"inject-test-log\")]\n        public async Task<IActionResult> InjectTestLog()\n        {\n            var testLog = new FailedWebhookLog\n            {\n                SourceModule = \"WebhookQueueWorker\",\n                FailureType = \"DispatchError\",\n                ErrorMessage = \"🧪 Simulated webhook dispatch failure for testing.\",\n                RawJson = \"{\\\"sample\\\":\\\"test_payload\\\",\\\"reason\\\":\\\"unit_test\\\"}\",\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _context.FailedWebhookLogs.Add(testLog);\n            await _context.SaveChangesAsync();\n\n            return Ok(new { message = \"✅ Injected test log successfully.\" });\n        }\n\n        // ✅ Manual Cleanup Trigger\n        [HttpPost(\"cleanup-now\")]\n        public async Task<IActionResult> CleanupNow()\n        {\n            var cutoff = DateTime.UtcNow.AddDays(-7);\n            var oldLogs = await _context.FailedWebhookLogs\n                .Where(x => x.CreatedAt < cutoff)\n                .ToListAsync();\n\n            if (!oldLogs.Any())\n                return Ok(new { message = \"✅ No logs to delete.\" });\n\n            _context.FailedWebhookLogs.RemoveRange(oldLogs);\n            await _context.SaveChangesAsync();\n\n            return Ok(new { message = $\"✅ Deleted {oldLogs.Count} old logs.\" });\n        }\n\n        // ✅ Count of all failed logs\n        [HttpGet(\"failed/count\")]\n        public async Task<IActionResult> GetFailedCount()\n        {\n            var count = await _context.FailedWebhookLogs.CountAsync();\n            return Ok(count);\n        }\n\n        // ✅ Cleanup Setting Status\n             [HttpGet(\"settings\")]\n        public async Task<IActionResult> GetCleanupStatus()\n        {\n            var enabled = await _maintenance.IsAutoCleanupEnabledAsync();\n            var lastRun = await _maintenance.GetLastCleanupTimeAsync();\n\n            return Ok(new\n            {\n                enabled,\n                lastCleanupAt = lastRun\n            });\n        }\n\n        // ✅ Enable Auto Cleanup\n        [HttpPost(\"enable-cleanup\")]\n        public async Task<IActionResult> EnableCleanup()\n        {\n            await _maintenance.EnableAutoCleanupAsync();\n            return Ok(new { message = \"✅ Auto-cleanup enabled.\" });\n        }\n\n        // ✅ Disable Auto Cleanup\n        [HttpPost(\"disable-cleanup\")]\n        public async Task<IActionResult> DisableCleanup()\n        {\n            await _maintenance.DisableAutoCleanupAsync();\n            return Ok(new { message = \"✅ Auto-cleanup disabled.\" });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Controllers/WebhookCallback.cs",
      "sha256": "0353a97ed4f6c1349262de94a5e68f37d87955d3b6735e595aedc13f2b2f7365",
      "language": "csharp",
      "size": 2481,
      "content": "// 📄 File: Features/Webhooks/Controllers/WebhookCallbackController.cs\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Text.Json;\nusing System.Threading;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhookcallback\")]\n    public class WebhookCallbackController : ControllerBase\n    {\n        private readonly ILogger<WebhookCallbackController> _logger;\n        private readonly IWebhookQueueService _queue;\n\n        public WebhookCallbackController(\n            ILogger<WebhookCallbackController> logger,\n            IWebhookQueueService queue)\n        {\n            _logger = logger;\n            _queue = queue;\n        }\n\n        // ✅ Single POST endpoint: Pinnacle (and others) send responses here\n        [HttpPost]\n        [Consumes(\"application/json\")]\n        [Produces(\"application/json\")]\n        public IActionResult Post([FromBody] JsonElement payload, CancellationToken ct)\n        {\n            if (!Request.HasJsonContentType())\n            {\n                return BadRequest(new { error = \"Content-Type must be application/json\" });\n            }\n\n            try\n            {\n                var raw = payload.GetRawText();\n                _logger.LogInformation(\"📥 Webhook received. bytes={Len}\", raw.Length);\n\n                // Clone JsonElement before queueing\n                _queue.Enqueue(payload.Clone());\n\n                // Return 200 OK so Pinnacle won’t retry unnecessarily\n                return Ok(new { received = true });\n            }\n            catch (OperationCanceledException)\n            {\n                _logger.LogWarning(\"⚠️ Webhook processing cancelled by client.\");\n                return StatusCode(499);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to enqueue webhook payload.\");\n                // 500 lets BSP retry later\n                return StatusCode(500, new { error = \"webhook_enqueue_failed\" });\n            }\n        }\n    }\n\n    // Small helper for JSON content-type\n    internal static class HttpRequestContentTypeExtensions\n    {\n        public static bool HasJsonContentType(this HttpRequest request)\n        {\n            if (request?.ContentType is null) return false;\n            return request.ContentType.StartsWith(\"application/json\", StringComparison.OrdinalIgnoreCase);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Controllers/WebhookTestController.cs",
      "sha256": "d3d3ac0e403d42baaa151d62e86135b71a0116ed7231d86c04b87bbd4ae6ac61",
      "language": "csharp",
      "size": 1569,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks/test\")]\n    public class WebhookTestController : ControllerBase\n    {\n        private readonly IWebhookQueueService _queue;\n\n        public WebhookTestController(IWebhookQueueService queue)\n        {\n            _queue = queue;\n        }\n\n        [HttpPost(\"simulate-failure\")]\n        public IActionResult SimulateWebhookFailure()\n        {\n            var fakePayload = new\n            {\n                entry = new[]\n                {\n                    new\n                    {\n                        changes = new[]\n                        {\n                            new\n                            {\n                                value = new\n                                {\n                                    // This will cause dispatcher to throw due to invalid structure\n                                    unexpected = \"🧪 Simulated bad structure\"\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n\n            var json = JsonSerializer.Serialize(fakePayload);\n            var element = JsonDocument.Parse(json).RootElement;\n\n            _queue.Enqueue(element);\n\n            return Ok(new\n            {\n                message = \"✅ Test payload enqueued to simulate failure.\",\n                enqueued = true\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Controllers/WhatsAppWebhookController.cs",
      "sha256": "d25c1bf6870c1712f3270bf8e478e741c09e7d32497bb0f3e64885e8e5c6c7ec",
      "language": "csharp",
      "size": 2801,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System.Text.Json;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks/whatsapp\")]\n    public class WhatsAppWebhookController : ControllerBase\n    {\n        private readonly ILogger<WhatsAppWebhookController> _logger;\n        private readonly IConfiguration _config;\n        private readonly AppDbContext _context;\n        private readonly IWhatsAppWebhookService _webhookService;\n        private readonly IWebhookQueueService _queue;\n            public WhatsAppWebhookController(ILogger<WhatsAppWebhookController> logger,\n            IConfiguration config, AppDbContext context, IWhatsAppWebhookService webhookService, IWebhookQueueService queue)\n        {\n            _logger = logger;\n            _config = config;\n            _context = context;\n            _webhookService = webhookService;\n            _queue = queue;\n        }\n\n        // ✅ Step 1: Meta verification endpoint (GET)\n        // Meta calls this to verify your webhook with hub.verify_token and expects you to return hub.challenge\n        [HttpGet]\n        public IActionResult VerifyWebhook(\n            [FromQuery(Name = \"hub.mode\")] string mode,\n            [FromQuery(Name = \"hub.verify_token\")] string token,\n            [FromQuery(Name = \"hub.challenge\")] string challenge)\n        {\n            // 🔐 Load your secret token from config or environment\n            var expectedToken = _config[\"WhatsApp:MetaToken\"];\n\n            if (mode == \"subscribe\" && token == expectedToken)\n            {\n                _logger.LogInformation(\"✅ WhatsApp webhook verified successfully.\");\n                return Ok(challenge); // Meta expects a 200 OK with the challenge value\n            }\n\n            _logger.LogWarning(\"❌ WhatsApp webhook verification failed.\");\n            return Forbid(\"Token mismatch.\");\n        }\n\n     \n        [HttpPost]\n        public IActionResult HandleStatus([FromBody] JsonElement payload)\n        {\n            _logger.LogWarning(\"📥 Webhook received at controller:\\n\" + payload.ToString());\n\n            try\n            {\n                var cloned = payload.Clone(); // Important to clone here\n                _queue.Enqueue(cloned);\n\n                _logger.LogInformation(\"📥 Webhook payload enqueued successfully.\");\n                return Ok(new { received = true });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to enqueue WhatsApp webhook payload.\");\n                return StatusCode(500, new { error = \"Webhook queue failed\" });\n            }\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Directory/IProviderDirectory.cs",
      "sha256": "9c5e07f8d7488efd67624a5d0b04fe85acf0163688ba6a704f500383e17210d4",
      "language": "csharp",
      "size": 995,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Directory\n{\n    /// <summary>\n    /// Resolves BusinessId from provider-specific webhook identifiers.\n    /// </summary>\n    public interface IProviderDirectory\n    {\n        /// <param name=\"provider\">\"meta\" or \"pinnacle\" (lowercase preferred)</param>\n        /// <param name=\"phoneNumberId\">Meta/Pinnacle phone_number_id (strongest key)</param>\n        /// <param name=\"displayPhoneNumber\">Formatted sending number (e.g. \"+91XXXXXXXXXX\")</param>\n        /// <param name=\"wabaId\">WhatsApp Business Account ID (Meta)</param>\n        /// <param name=\"waId\">Optional WA ID (recipient); used only as a last-ditch heuristic</param>\n        Task<Guid?> ResolveBusinessIdAsync(\n            string? provider,\n            string? phoneNumberId,\n            string? displayPhoneNumber,\n            string? wabaId,\n            string? waId,\n            CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Directory/ProviderDirectory.cs",
      "sha256": "3017c25bfb327e9028a837abd11188b17d3a1b2c4a768126a3f5eb2f040dfb59",
      "language": "csharp",
      "size": 5591,
      "content": "using System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Logging;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.Webhooks.Directory\n{\n    /// <summary>\n    /// EF-backed resolver for mapping provider identifiers to BusinessId, with a short cache.\n    /// </summary>\n    public class ProviderDirectory : IProviderDirectory\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<ProviderDirectory> _logger;\n        private readonly IMemoryCache _cache;\n\n        // reduce DB hits during webhook bursts\n        private static readonly TimeSpan CacheTtl = TimeSpan.FromMinutes(2);\n\n        public ProviderDirectory(AppDbContext db, ILogger<ProviderDirectory> logger, IMemoryCache cache)\n        {\n            _db = db;\n            _logger = logger;\n            _cache = cache;\n        }\n        private static string NormalizeProviderKey(string? raw)\n        {\n            var p = (raw ?? \"\").Trim().ToLowerInvariant();\n            return p switch\n            {\n                \"meta\" or \"meta-cloud\" or \"meta_cloud\" => \"meta_cloud\",\n                \"pinnacle\" => \"pinnacle\",\n                _ => p\n            };\n        }\n        public async Task<Guid?> ResolveBusinessIdAsync(\n            string? provider,\n            string? phoneNumberId,\n            string? displayPhoneNumber,\n            string? wabaId,\n            string? waId,\n            CancellationToken ct = default)\n        {\n            provider = NormalizeProviderKey(provider);\n            if (provider is \"meta\" or \"meta-cloud\") provider = \"meta_cloud\";\n            var cacheKey = $\"provdir:{provider}:{phoneNumberId}:{Normalize(displayPhoneNumber)}:{wabaId}\";\n            if (_cache.TryGetValue<Guid?>(cacheKey, out var cached))\n                return cached;\n\n            try\n            {\n                // ⚓ 1) Strongest match: provider + phone_number_id\n                if (!string.IsNullOrWhiteSpace(provider) && !string.IsNullOrWhiteSpace(phoneNumberId))\n                {\n                    var hit = await QueryByAsync(provider, phoneNumberId: phoneNumberId, ct: ct);\n                    if (hit.HasValue) return CacheAndReturn(cacheKey, hit);\n                }\n\n                // ⚓ 2) Next: provider + display_phone_number (normalized)\n                var normalizedDisplay = Normalize(displayPhoneNumber);\n                if (!string.IsNullOrWhiteSpace(provider) && !string.IsNullOrWhiteSpace(normalizedDisplay))\n                {\n                    var hit = await QueryByAsync(provider, displayPhoneNumber: normalizedDisplay, ct: ct);\n                    if (hit.HasValue) return CacheAndReturn(cacheKey, hit);\n                }\n\n                // ⚓ 3) Next: provider + wabaId (Meta)\n                if (!string.IsNullOrWhiteSpace(provider) && !string.IsNullOrWhiteSpace(wabaId))\n                {\n                    var hit = await QueryByAsync(provider, wabaId: wabaId, ct: ct);\n                    if (hit.HasValue) return CacheAndReturn(cacheKey, hit);\n                }\n\n                _logger.LogWarning(\n                    \"ProviderDirectory: No match for provider={Provider}, pnid={PhoneId}, disp={Display}, waba={Waba}\",\n                    provider, phoneNumberId, normalizedDisplay, wabaId\n                );\n                return CacheAndReturn(cacheKey, null);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"ProviderDirectory lookup failed.\");\n                return null;\n            }\n        }\n\n        private Guid? CacheAndReturn(string key, Guid? value)\n        {\n            _cache.Set(key, value, CacheTtl);\n            return value;\n        }\n\n        /// <summary>\n        /// Centralized query; now materializes candidates so Normalize() runs in-memory.\n        /// </summary>\n        private async Task<Guid?> QueryByAsync(\n            string provider,\n            string? phoneNumberId = null,\n            string? displayPhoneNumber = null,\n            string? wabaId = null,\n            CancellationToken ct = default)\n        {\n            // Only bring back what we need\n            var candidates = await _db.Set<WhatsAppSettingEntity>()\n                .AsNoTracking()\n                .Where(s => s.IsActive && s.Provider.ToLower() == provider)\n                .Select(s => new\n                {\n                    s.BusinessId,\n                    s.PhoneNumberId,\n                    s.WhatsAppBusinessNumber,\n                    s.WabaId\n                })\n                .ToListAsync(ct);\n\n            var normDisp = Normalize(displayPhoneNumber);\n\n            var hit = candidates.FirstOrDefault(s =>\n                (!string.IsNullOrEmpty(phoneNumberId) && s.PhoneNumberId == phoneNumberId) ||\n                (!string.IsNullOrEmpty(normDisp) && Normalize(s.WhatsAppBusinessNumber) == normDisp) ||\n                (!string.IsNullOrEmpty(wabaId) && s.WabaId == wabaId)\n            );\n\n            return hit?.BusinessId;\n        }\n\n        /// <summary>\n        /// Normalize phone formatting for robust comparisons.\n        /// </summary>\n        private static string? Normalize(string? phone)\n        {\n            if (string.IsNullOrWhiteSpace(phone)) return null;\n            var trimmed = phone.Trim();\n            var hasPlus = trimmed.StartsWith(\"+\");\n            var digits = new string(trimmed.Where(char.IsDigit).ToArray());\n            return hasPlus ? \"+\" + digits : digits;\n        }\n    }\n}\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/DTOs/FailedWebhookLogDto.cs",
      "sha256": "6b14d817a983f7eb6626a70cc5aceedd50b164ce0e0282dcf155a1d6eb4b5a51",
      "language": "csharp",
      "size": 391,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Webhooks.DTOs\n{\n    public class FailedWebhookLogDto\n    {\n        public string? ErrorMessage { get; set; }\n        public string? SourceModule { get; set; }\n        public string? FailureType { get; set; }\n        public string RawJson { get; set; } = string.Empty;\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Models/FailedWebhookLog.cs",
      "sha256": "549e466af9a80b67809dd9e25d2bf5b9b5991ce11754225bda46dac4df1e6da6",
      "language": "csharp",
      "size": 624,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Webhooks.Models\n{\n    public class FailedWebhookLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // 🧠 Debug Metadata\n        public string? ErrorMessage { get; set; }\n        public string? SourceModule { get; set; } // e.g., StatusProcessor, ClickProcessor\n        public string? FailureType { get; set; }  // e.g., JSON_PARSE_ERROR, DB_LOOKUP_FAILED\n\n        // 📦 Raw Data Snapshot\n        public string RawJson { get; set; } = string.Empty;\n\n        // 🕒 Timeline\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Models/WebhookSettings.cs",
      "sha256": "c0eeeaa5e14f839b159f28d337450f595c7604994690c66fa7df82a56c6a3093",
      "language": "csharp",
      "size": 267,
      "content": "namespace xbytechat.api.Features.Webhooks.Models\n{\n    public class WebhookSettings\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public bool AutoCleanupEnabled { get; set; } = true;\n        public DateTime? LastCleanupAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Pinnacle/Controllers/PinnacleWebhookController.cs",
      "sha256": "347412f9e7ce91e2e2852339fcb267da0f2153f38df4bfe8902a1f0b4a678ca8",
      "language": "csharp",
      "size": 1235,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Pinnacle.Services.Adapters;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Pinnacle.Controllers\n{\n    [ApiController]\n    [Route(\"api/pinnacle/callback\")]\n    public sealed class PinnacleWebhookController : ControllerBase\n    {\n        private readonly IWebhookQueueService _queue;\n        private readonly IPinnacleToMetaAdapter _adapter;\n        private readonly ILogger<PinnacleWebhookController> _logger;\n\n        public PinnacleWebhookController(IWebhookQueueService queue, IPinnacleToMetaAdapter adapter, ILogger<PinnacleWebhookController> logger)\n        {\n            _queue = queue;\n            _adapter = adapter;\n            _logger = logger;\n        }\n\n        [HttpPost]\n        public IActionResult Post([FromBody] JsonElement body)\n        {\n            // Transform to the envelope WhatsAppWebhookDispatcher already expects\n            var metaEnvelope = _adapter.ToMetaEnvelope(body);\n            _queue.Enqueue(metaEnvelope);\n            _logger.LogInformation(\"📨 Pinnacle payload transformed and enqueued.\");\n            return Ok(new { received = true });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Pinnacle/Services/Adapters/IPinnacleToMetaAdapter.cs",
      "sha256": "7daf100e2d244ce83b0c3f91f8e006bce5359eddf8fe6f7cf2b046f9e071c17b",
      "language": "csharp",
      "size": 364,
      "content": "using System.Text.Json;\n\nnamespace xbytechat.api.Features.Webhooks.Pinnacle.Services.Adapters\n{\n    public interface IPinnacleToMetaAdapter\n    {\n        /// <summary>Converts provider-native payload to Meta-like envelope:\n        /// { \"entry\":[{ \"changes\":[{ \"value\": { ... } }]}] }</summary>\n        JsonElement ToMetaEnvelope(JsonElement pinnPayload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Pinnacle/Services/Adapters/PinnacleToMetaAdapter.cs",
      "sha256": "38b4863c5f4881b2196ae42ce86a47b8d92904a61daad400ab8d1e7e5db2d289",
      "language": "csharp",
      "size": 9751,
      "content": "using System.Buffers;\nusing System.Text.Json;\n\nnamespace xbytechat.api.Features.Webhooks.Pinnacle.Services.Adapters;\n\npublic sealed class PinnacleToMetaAdapter : IPinnacleToMetaAdapter\n{\n    public JsonElement ToMetaEnvelope(JsonElement p)\n    {\n        var buf = new ArrayBufferWriter<byte>();\n        using var w = new Utf8JsonWriter(buf);\n\n        w.WriteStartObject();\n        w.WritePropertyName(\"entry\");\n        w.WriteStartArray();\n        w.WriteStartObject(); // entry[0]\n        w.WritePropertyName(\"changes\");\n        w.WriteStartArray();\n        w.WriteStartObject(); // changes[0]\n        w.WritePropertyName(\"value\");\n        w.WriteStartObject();\n\n        // NEW: try to emit metadata up-front (harmless if not found)\n        WriteMetadata(p, w);\n\n        if (!TryMapStatuses(p, w) && !TryMapMessages(p, w))\n        {\n            w.WritePropertyName(\"provider_raw\");\n            p.WriteTo(w);\n        }\n\n        w.WriteEndObject(); // value\n        w.WriteEndObject(); // change\n        w.WriteEndArray();  // changes\n        w.WriteEndObject(); // entry[0]\n        w.WriteEndArray();  // entry\n        w.WriteEndObject(); // root\n        w.Flush();\n\n        var ros = new ReadOnlySequence<byte>(buf.WrittenMemory);\n        using var doc = JsonDocument.Parse(ros);\n        return doc.RootElement.Clone();\n    }\n\n    // ---- NEW ----\n    // Best-effort extraction; tolerate any Pinnacle layout you have.\n    // We only write fields if we can resolve them.\n    private static void WriteMetadata(JsonElement p, Utf8JsonWriter w)\n    {\n        string? displayPhone = null;\n        string? phoneNumberId = null;\n        string? wabaId = null;\n\n        // common guesses; add/rename to match your Pinnacle payload\n        // 1) flat\n        if (p.TryGetProperty(\"display_phone_number\", out var d1) && d1.ValueKind == JsonValueKind.String) displayPhone = d1.GetString();\n        if (p.TryGetProperty(\"phone_number_id\", out var pid1) && pid1.ValueKind == JsonValueKind.String) phoneNumberId = pid1.GetString();\n        if (p.TryGetProperty(\"waba_id\", out var wa1) && wa1.ValueKind == JsonValueKind.String) wabaId = wa1.GetString();\n\n        // 2) channel\n        if (p.TryGetProperty(\"channel\", out var ch) && ch.ValueKind == JsonValueKind.Object)\n        {\n            if (displayPhone is null && ch.TryGetProperty(\"display_phone_number\", out var d2) && d2.ValueKind == JsonValueKind.String) displayPhone = d2.GetString();\n            if (displayPhone is null && ch.TryGetProperty(\"phone\", out var d3) && d3.ValueKind == JsonValueKind.String) displayPhone = d3.GetString();\n\n            if (phoneNumberId is null && ch.TryGetProperty(\"phone_number_id\", out var pid2) && pid2.ValueKind == JsonValueKind.String) phoneNumberId = pid2.GetString();\n            if (phoneNumberId is null && ch.TryGetProperty(\"id\", out var pid3) && pid3.ValueKind == JsonValueKind.String) phoneNumberId = pid3.GetString();\n\n            if (wabaId is null && ch.TryGetProperty(\"waba_id\", out var wa2) && wa2.ValueKind == JsonValueKind.String) wabaId = wa2.GetString();\n        }\n\n        // 3) meta-style wrapper\n        if (p.TryGetProperty(\"metadata\", out var meta) && meta.ValueKind == JsonValueKind.Object)\n        {\n            if (displayPhone is null && meta.TryGetProperty(\"display_phone_number\", out var d4) && d4.ValueKind == JsonValueKind.String) displayPhone = d4.GetString();\n            if (phoneNumberId is null && meta.TryGetProperty(\"phone_number_id\", out var pid4) && pid4.ValueKind == JsonValueKind.String) phoneNumberId = pid4.GetString();\n            if (wabaId is null && meta.TryGetProperty(\"waba_id\", out var wa3) && wa3.ValueKind == JsonValueKind.String) wabaId = wa3.GetString();\n        }\n\n        if (displayPhone is null && p.TryGetProperty(\"business\", out var biz) && biz.ValueKind == JsonValueKind.Object)\n        {\n            if (biz.TryGetProperty(\"phone\", out var d5) && d5.ValueKind == JsonValueKind.String) displayPhone = d5.GetString();\n            if (biz.TryGetProperty(\"phone_id\", out var pid5) && pid5.ValueKind == JsonValueKind.String) phoneNumberId = pid5.GetString();\n        }\n\n        // Only emit if we have at least one of them.\n        if (displayPhone is not null || phoneNumberId is not null || wabaId is not null)\n        {\n            w.WritePropertyName(\"metadata\");\n            w.WriteStartObject();\n            if (displayPhone is not null) w.WriteString(\"display_phone_number\", displayPhone);\n            if (phoneNumberId is not null) w.WriteString(\"phone_number_id\", phoneNumberId);\n            if (wabaId is not null) w.WriteString(\"waba_id\", wabaId);\n            w.WriteEndObject();\n        }\n    }\n    // ---- NEW END ----\n\n    private static bool TryMapStatuses(JsonElement p, Utf8JsonWriter w)\n    {\n        string? id = null, status = null;\n        long? ts = null;\n\n        if (p.TryGetProperty(\"messageId\", out var mid) && mid.ValueKind == JsonValueKind.String) id = mid.GetString();\n        if (p.TryGetProperty(\"id\", out var pid) && pid.ValueKind == JsonValueKind.String) id ??= pid.GetString();\n        if (p.TryGetProperty(\"status\", out var st) && st.ValueKind == JsonValueKind.String) status = st.GetString();\n\n        if (p.TryGetProperty(\"timestamp\", out var t))\n        {\n            if (t.ValueKind == JsonValueKind.Number) ts = t.GetInt64();\n            else if (t.ValueKind == JsonValueKind.String && long.TryParse(t.GetString(), out var n)) ts = n;\n        }\n\n        if (p.TryGetProperty(\"data\", out var d) && d.ValueKind == JsonValueKind.Object)\n        {\n            if (id is null && d.TryGetProperty(\"id\", out var did) && did.ValueKind == JsonValueKind.String) id = did.GetString();\n            if (status is null && d.TryGetProperty(\"status\", out var ds) && ds.ValueKind == JsonValueKind.String) status = ds.GetString();\n            if (ts is null && d.TryGetProperty(\"ts\", out var dts) && dts.ValueKind == JsonValueKind.Number) ts = dts.GetInt64();\n        }\n\n        if (id is null || status is null) return false;\n\n        w.WritePropertyName(\"statuses\");\n        w.WriteStartArray();\n        w.WriteStartObject();\n        w.WriteString(\"id\", id);\n        w.WriteString(\"status\", status);\n        if (ts.HasValue) w.WriteNumber(\"timestamp\", ts.Value);\n        w.WriteEndObject();\n        w.WriteEndArray();\n        return true;\n    }\n\n    \n    private static bool TryMapMessages(JsonElement p, Utf8JsonWriter w)\n    {\n        // { \"click\": { \"title\":\"Flow Test\", \"contextId\":\"wamid..\", \"from\":\"<biz_phone?>\" , \"user\":\"<customer_wa_id?>\" } }\n        if (p.TryGetProperty(\"click\", out var c) && c.ValueKind == JsonValueKind.Object)\n        {\n            var title = c.TryGetProperty(\"title\", out var t) ? t.GetString() : null;\n            var ctxId = c.TryGetProperty(\"contextId\", out var ctx) ? ctx.GetString() : null;\n\n            // customer who clicked\n            var customerFrom = c.TryGetProperty(\"user\", out var u) && u.ValueKind == JsonValueKind.String\n                ? u.GetString()\n                : (c.TryGetProperty(\"from\", out var f1) && f1.ValueKind == JsonValueKind.String ? f1.GetString() : null);\n\n            // **business** number that sent the message (Meta provides this as context.from)\n            var businessFrom =\n                (p.TryGetProperty(\"display_phone_number\", out var d1) && d1.ValueKind == JsonValueKind.String) ? d1.GetString() :\n                (p.TryGetProperty(\"channel\", out var ch) && ch.ValueKind == JsonValueKind.Object &&\n                 ch.TryGetProperty(\"phone\", out var d2) && d2.ValueKind == JsonValueKind.String) ? d2.GetString() :\n                (c.TryGetProperty(\"from\", out var f2) && f2.ValueKind == JsonValueKind.String ? f2.GetString() : null); // last resort\n\n            if (!string.IsNullOrWhiteSpace(title) && !string.IsNullOrWhiteSpace(ctxId))\n            {\n                w.WritePropertyName(\"messages\");\n                w.WriteStartArray();\n                w.WriteStartObject();\n                w.WriteString(\"type\", \"button\");\n                w.WriteString(\"from\", customerFrom ?? \"\");          // customer wa_id\n                w.WritePropertyName(\"button\");\n                w.WriteStartObject();\n                w.WriteString(\"text\", title!);\n                w.WriteEndObject();\n                w.WritePropertyName(\"context\");\n                w.WriteStartObject();\n                w.WriteString(\"id\", ctxId!);\n                if (!string.IsNullOrWhiteSpace(businessFrom))\n                    w.WriteString(\"from\", businessFrom!);           // **important for directory resolution**\n                w.WriteEndObject();\n                w.WriteEndObject();\n                w.WriteEndArray();\n                return true;\n            }\n        }\n\n        // { \"message\": { \"from\":\"<customer_wa_id>\", \"body\":\"hi\", \"type\":\"text\" }, \"channel\":{ \"phone\":\"<biz_phone>\" } }\n        if (p.TryGetProperty(\"message\", out var m) && m.ValueKind == JsonValueKind.Object)\n        {\n            var type = m.TryGetProperty(\"type\", out var tp) ? tp.GetString() : \"text\";\n            var from = m.TryGetProperty(\"from\", out var fr) ? fr.GetString() : \"\";\n\n            w.WritePropertyName(\"messages\");\n            w.WriteStartArray();\n            w.WriteStartObject();\n            w.WriteString(\"type\", type ?? \"text\");\n            w.WriteString(\"from\", from ?? \"\");\n            if ((type ?? \"text\") == \"text\")\n            {\n                var body = m.TryGetProperty(\"body\", out var bd) ? bd.GetString() : \"\";\n                w.WritePropertyName(\"text\");\n                w.WriteStartObject();\n                w.WriteString(\"body\", body ?? \"\");\n                w.WriteEndObject();\n            }\n            w.WriteEndObject();\n            w.WriteEndArray();\n            return true;\n        }\n\n        return false;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/FailedWebhookLogCleanupService.cs",
      "sha256": "68f4211391a24a94d3096c5cd71fbd6cbd0fed0211dd2929b92b1780ffd02fc8",
      "language": "csharp",
      "size": 2109,
      "content": "using Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class FailedWebhookLogCleanupService : BackgroundService\n    {\n        private readonly ILogger<FailedWebhookLogCleanupService> _logger;\n        private readonly IServiceProvider _services;\n        private readonly TimeSpan _interval = TimeSpan.FromHours(24); // daily run\n\n        public FailedWebhookLogCleanupService(ILogger<FailedWebhookLogCleanupService> logger, IServiceProvider services)\n        {\n            _logger = logger;\n            _services = services;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            _logger.LogInformation(\"🧹 FailedWebhookLogCleanupService started.\");\n\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                try\n                {\n                    using var scope = _services.CreateScope();\n                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    var cutoff = DateTime.UtcNow.AddDays(-7);\n                    var oldLogs = await db.FailedWebhookLogs\n                        .Where(x => x.CreatedAt < cutoff)\n                        .ToListAsync(stoppingToken);\n\n                    if (oldLogs.Any())\n                    {\n                        db.FailedWebhookLogs.RemoveRange(oldLogs);\n                        await db.SaveChangesAsync(stoppingToken);\n                        _logger.LogInformation(\"🧹 Deleted {Count} old failed webhook logs.\", oldLogs.Count);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"❌ Failed to clean up old webhook logs.\");\n                }\n\n                await Task.Delay(_interval, stoppingToken); // wait before next cleanup\n            }\n\n            _logger.LogInformation(\"🛑 FailedWebhookLogCleanupService stopped.\");\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/FailedWebhookLogService.cs",
      "sha256": "3da6a5ad043773f7684b6ea9bc208441cbc36a7e53f01eacdd7c17848118c2af",
      "language": "csharp",
      "size": 1791,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.Webhooks.DTOs;\nusing xbytechat.api.Features.Webhooks.Models;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class FailedWebhookLogService : IFailedWebhookLogService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<FailedWebhookLogService> _logger;\n\n        public FailedWebhookLogService(AppDbContext context, ILogger<FailedWebhookLogService> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task LogFailureAsync(FailedWebhookLogDto dto)\n        {\n            try\n            {\n                var log = new FailedWebhookLog\n                {\n                    ErrorMessage = dto.ErrorMessage,\n                    SourceModule = dto.SourceModule,\n                    FailureType = dto.FailureType,\n                    RawJson = dto.RawJson,\n                    CreatedAt = dto.CreatedAt\n                };\n\n                await _context.FailedWebhookLogs.AddAsync(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to persist webhook error log\");\n            }\n        }\n\n        public async Task<List<FailedWebhookLog>> GetAllAsync()\n        {\n            return await _context.FailedWebhookLogs\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(100) // prevent DB overload\n                .ToListAsync();\n        }\n\n        public async Task<FailedWebhookLog?> GetByIdAsync(Guid id)\n        {\n            return await _context.FailedWebhookLogs.FindAsync(id);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/IFailedWebhookLogService.cs",
      "sha256": "9366c7a087317049e7dee346a65f7ea81a76fe95fb98fe21ca457e0ed5db6a7c",
      "language": "csharp",
      "size": 396,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Webhooks.DTOs;\nusing xbytechat.api.Features.Webhooks.Models;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IFailedWebhookLogService\n    {\n        Task LogFailureAsync(FailedWebhookLogDto dto);\n        Task<List<FailedWebhookLog>> GetAllAsync();\n        Task<FailedWebhookLog?> GetByIdAsync(Guid id);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/IMaintenanceService.cs",
      "sha256": "76ef1df941e3536bbdce5e7213554b593e6431592ba6527334cf274c78357e26",
      "language": "csharp",
      "size": 323,
      "content": "namespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IMaintenanceService\n    {\n        Task<bool> IsAutoCleanupEnabledAsync();\n        Task EnableAutoCleanupAsync();\n        Task DisableAutoCleanupAsync();\n        Task<DateTime?> GetLastCleanupTimeAsync();\n        Task<int> RunCleanupAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/IWebhookQueueService.cs",
      "sha256": "34e2e37f5ba5da57159852cecd9adde2f085640e1eb55a67116b5381ffa2e4b0",
      "language": "csharp",
      "size": 333,
      "content": "using System.Text.Json;\nusing xbytechat.api.Features.Tracking.DTOs;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IWebhookQueueService\n    {\n        void Enqueue(JsonElement payload);\n        ValueTask<JsonElement> DequeueAsync(CancellationToken cancellationToken);\n        int GetQueueLength();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/IWhatsAppWebhookDispatcher.cs",
      "sha256": "844865d879bca5e59aa9d82cf7fabfb3ac241233391ca0544922a8902eed4a88",
      "language": "csharp",
      "size": 219,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IWhatsAppWebhookDispatcher\n    {\n        Task DispatchAsync(JsonElement payload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/IWhatsAppWebhookService.cs",
      "sha256": "ad5a6464f10897dfa75f4fdc1d7914492c73a593d01d71de18ed75df95de1836",
      "language": "csharp",
      "size": 293,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IWhatsAppWebhookService\n    {\n        Task ProcessStatusUpdateAsync(Guid businessId, string provider, JsonElement payload, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/MaintenanceService.cs",
      "sha256": "c8c7e803e34fb97d2edfbaaf824d332f8de8b1483327e364e63d68dd0082a20e",
      "language": "csharp",
      "size": 2411,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Webhooks.Models;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class MaintenanceService : IMaintenanceService\n    {\n        private readonly AppDbContext _context;\n\n        public MaintenanceService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<bool> IsAutoCleanupEnabledAsync()\n        {\n            var setting = await _context.WebhookSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync();\n\n            return setting?.AutoCleanupEnabled ?? false;\n        }\n\n        public async Task<DateTime?> GetLastCleanupTimeAsync()\n        {\n            return await _context.WebhookSettings\n                .AsNoTracking()\n                .Select(s => s.LastCleanupAt)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task EnableAutoCleanupAsync()\n        {\n            var setting = await GetOrCreateAsync();\n            setting.AutoCleanupEnabled = true;\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task DisableAutoCleanupAsync()\n        {\n            var setting = await GetOrCreateAsync();\n            setting.AutoCleanupEnabled = false;\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<int> RunCleanupAsync()\n        {\n            var threshold = DateTime.UtcNow.AddDays(-7);\n            var oldLogs = await _context.FailedWebhookLogs\n                .Where(l => l.CreatedAt < threshold)\n                .ToListAsync();\n\n            if (oldLogs.Any())\n                _context.FailedWebhookLogs.RemoveRange(oldLogs);\n\n            var setting = await GetOrCreateAsync();\n            setting.LastCleanupAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return oldLogs.Count;\n        }\n\n        private async Task<WebhookSettings> GetOrCreateAsync()\n        {\n            var setting = await _context.WebhookSettings.FirstOrDefaultAsync();\n            if (setting == null)\n            {\n                setting = new WebhookSettings\n                {\n                    AutoCleanupEnabled = false,\n                    LastCleanupAt = null\n                };\n                _context.WebhookSettings.Add(setting);\n                await _context.SaveChangesAsync();\n            }\n            return setting;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/ClickWebhookProcessor.cs",
      "sha256": "6b025b9d044452157f8b52ed8e8f22334fb8195987a5a048655e63c7b99a37ac",
      "language": "csharp",
      "size": 69988,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.IO.Pipelines;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.Contacts.Services;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing xbytechat.api.Features.CustomeApi.Models;\nusing xbytechat.api.Features.CustomeApi.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared.TrackingUtils;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class ClickWebhookProcessor : IClickWebhookProcessor\n    {\n        private readonly ILogger<ClickWebhookProcessor> _logger;\n        private readonly IMessageIdResolver _messageIdResolver;\n        private readonly ITrackingService _trackingService;\n        private readonly AppDbContext _context;\n        private readonly IMessageEngineService _messageEngine;\n        private readonly ICTAFlowService _flowService;\n        private readonly IFlowRuntimeService _flowRuntime;\n        private readonly IContactProfileService _contactProfile;\n        private readonly ICtaJourneyPublisher _journeyPublisher;\n        public ClickWebhookProcessor(\n            ILogger<ClickWebhookProcessor> logger,\n            IMessageIdResolver messageIdResolver,\n            ITrackingService trackingService,\n            AppDbContext context,\n            IMessageEngineService messageEngine,\n            ICTAFlowService flowService,\n                        IFlowRuntimeService flowRuntime,\n                         IContactProfileService contactProfile,\n                          ICtaJourneyPublisher journeyPublisher\n            )\n        {\n            _logger = logger;\n            _messageIdResolver = messageIdResolver;\n            _trackingService = trackingService;\n            _context = context;\n            _messageEngine = messageEngine;\n            _flowService = flowService;\n            _flowRuntime = flowRuntime;\n            _contactProfile = contactProfile;\n            _journeyPublisher = journeyPublisher;\n\n        }\n\n        // working code\n\n        public async Task ProcessClickAsync(JsonElement value)\n        {\n            _logger.LogWarning(\"📥 [ENTERED CLICK PROCESSOR]\");\n\n            try\n            {\n                if (!value.TryGetProperty(\"messages\", out var messages) || messages.GetArrayLength() == 0)\n                    return;\n\n                static string Norm(string? s)\n                {\n                    if (string.IsNullOrWhiteSpace(s)) return string.Empty;\n                    return string.Join(' ', s.Split(new[] { ' ', '\\t', '\\r', '\\n' }, StringSplitOptions.RemoveEmptyEntries))\n                                 .Trim()\n                                 .ToLowerInvariant();\n                }\n\n                // ✅ Canonical phone: keep only digits (matches how we store & search contacts)\n                static string NormalizePhone(string? raw)\n                    => new string((raw ?? string.Empty).Where(char.IsDigit).ToArray());\n\n                // ✅ contacts[0].profile.name (Meta shape)\n                static string? TryGetProfileName(JsonElement root)\n                {\n                    if (root.TryGetProperty(\"contacts\", out var contactsEl) &&\n                        contactsEl.ValueKind == JsonValueKind.Array &&\n                        contactsEl.GetArrayLength() > 0)\n                    {\n                        var c0 = contactsEl[0];\n                        if (c0.TryGetProperty(\"profile\", out var profEl) &&\n                            profEl.ValueKind == JsonValueKind.Object &&\n                            profEl.TryGetProperty(\"name\", out var nameEl) &&\n                            nameEl.ValueKind == JsonValueKind.String)\n                        {\n                            var n = nameEl.GetString();\n                            return string.IsNullOrWhiteSpace(n) ? null : n!.Trim();\n                        }\n                    }\n                    return null;\n                }\n\n                // >>> BEGIN MOD: helpers for CTAJourney key + botId extraction\n                static string ToKey(string? s)\n                {\n                    if (string.IsNullOrWhiteSpace(s)) return \"unknown\";\n                    var t = s.Trim().ToLowerInvariant();\n                    var sb = new System.Text.StringBuilder(t.Length);\n                    foreach (var ch in t)\n                    {\n                        if (char.IsLetterOrDigit(ch)) sb.Append(ch);\n                        else if (char.IsWhiteSpace(ch) || ch == '-' || ch == '_' || ch == '.') sb.Append('_');\n                    }\n                    var k = sb.ToString().Trim('_');\n                    return string.IsNullOrEmpty(k) ? \"unknown\" : k;\n                }\n\n                // read WA display number once (used as botId)\n                string botIdFromWebhook = \"\";\n                if (value.TryGetProperty(\"metadata\", out var md) &&\n                    md.TryGetProperty(\"display_phone_number\", out var dpnEl) &&\n                    dpnEl.ValueKind == JsonValueKind.String)\n                {\n                    botIdFromWebhook = NormalizePhone(dpnEl.GetString());\n                }\n                // >>> END MOD\n\n                foreach (var msg in messages.EnumerateArray())\n                {\n                    if (!msg.TryGetProperty(\"type\", out var typeProp))\n                        continue;\n\n                    var type = typeProp.GetString();\n\n                    string? clickMessageId = msg.TryGetProperty(\"id\", out var idProp) ? idProp.GetString() : null;\n                    string? originalMessageId = msg.TryGetProperty(\"context\", out var ctx) && ctx.TryGetProperty(\"id\", out var ctxId)\n                        ? ctxId.GetString()\n                        : null;\n                    var fromRaw = msg.TryGetProperty(\"from\", out var fromProp) ? (fromProp.GetString() ?? \"\") : \"\";\n                    var fromDigits = NormalizePhone(fromRaw);\n\n                    // ——— button label extraction\n                    string? buttonText = null;\n                    if (string.Equals(type, \"button\", StringComparison.OrdinalIgnoreCase))\n                    {\n                        buttonText = msg.TryGetProperty(\"button\", out var btn) &&\n                                     btn.TryGetProperty(\"text\", out var textProp)\n                                       ? textProp.GetString()?.Trim()\n                                       : null;\n                    }\n                    else if (string.Equals(type, \"interactive\", StringComparison.OrdinalIgnoreCase) &&\n                             msg.TryGetProperty(\"interactive\", out var interactive))\n                    {\n                        if (interactive.TryGetProperty(\"type\", out var intrType) &&\n                            string.Equals(intrType.GetString(), \"button_reply\", StringComparison.OrdinalIgnoreCase) &&\n                            interactive.TryGetProperty(\"button_reply\", out var br) &&\n                            br.TryGetProperty(\"title\", out var titleProp))\n                        {\n                            buttonText = titleProp.GetString()?.Trim();\n                        }\n                        else if (interactive.TryGetProperty(\"list_reply\", out var lr) &&\n                                 lr.TryGetProperty(\"title\", out var listTitleProp))\n                        {\n                            buttonText = listTitleProp.GetString()?.Trim();\n                        }\n                    }\n\n                    if (string.IsNullOrWhiteSpace(buttonText) || string.IsNullOrWhiteSpace(originalMessageId))\n                    {\n                        _logger.LogDebug(\"ℹ️ Not a recognized click or missing context.id. type={Type}\", type);\n                        continue;\n                    }\n\n                    _logger.LogInformation(\"🖱️ Button Click → From: {From}, ClickId: {ClickId}, OrigMsgId: {OrigId}, Text: {Text}\",\n                        fromDigits, clickMessageId, originalMessageId, buttonText);\n\n                    // —— Try 1: originating MessageLog (for flow-sent messages)\n                    var origin = await _context.MessageLogs\n                        .AsNoTracking()\n                        .FirstOrDefaultAsync(m =>\n                            m.MessageId == originalMessageId &&\n                            m.CTAFlowConfigId != null &&\n                            m.CTAFlowStepId != null);\n\n                    Guid businessId;\n                    Guid flowId;\n                    Guid stepId;\n                    string? bundleJson = null;\n                    int? flowVersion = null;\n\n                    Guid? campaignSendLogId = null; // link the click to the shown message\n                    Guid? runId = null;             // copy from parent CSL when available\n\n                    if (origin != null)\n                    {\n                        businessId = origin.BusinessId;\n                        flowId = origin.CTAFlowConfigId!.Value;\n                        stepId = origin.CTAFlowStepId!.Value;\n                        bundleJson = origin.ButtonBundleJson;\n                        flowVersion = origin.FlowVersion;\n\n                        // Map back to CSL via MessageLogId or WAMID and fetch RunId\n                        var cslInfo = await _context.CampaignSendLogs\n                            .AsNoTracking()\n                            .Where(csl => (csl.MessageLogId == origin.Id) || (csl.MessageId == originalMessageId))\n                            .OrderByDescending(csl => csl.CreatedAt)\n                            .Select(csl => new { csl.Id, csl.RunId })\n                            .FirstOrDefaultAsync();\n\n                        campaignSendLogId = cslInfo?.Id;\n                        runId = cslInfo?.RunId;\n                    }\n                    else\n                    {\n                        // —— Try 2: first campaign message (CampaignSendLogs)\n                        var sendLog = await _context.CampaignSendLogs\n                            .Include(sl => sl.Campaign)\n                            .AsNoTracking()\n                            .FirstOrDefaultAsync(sl => sl.MessageId == originalMessageId);\n\n                        if (sendLog == null)\n                        {\n                            _logger.LogWarning(\"❌ No MessageLog or CampaignSendLog for original WAMID {Orig}\", originalMessageId);\n                            continue;\n                        }\n\n                        businessId = sendLog.BusinessId != Guid.Empty\n                            ? sendLog.BusinessId\n                            : (sendLog.Campaign?.BusinessId ?? Guid.Empty);\n\n                        if (businessId == Guid.Empty)\n                        {\n                            _logger.LogWarning(\"❌ Could not resolve BusinessId for WAMID {Orig}\", originalMessageId);\n                            continue;\n                        }\n\n                        campaignSendLogId = sendLog.Id;\n                        runId = sendLog.RunId;\n\n                        if (sendLog.CTAFlowConfigId.HasValue && sendLog.CTAFlowStepId.HasValue)\n                        {\n                            flowId = sendLog.CTAFlowConfigId.Value;\n                            stepId = sendLog.CTAFlowStepId.Value;\n                        }\n                        else if (sendLog.Campaign?.CTAFlowConfigId != null)\n                        {\n                            flowId = sendLog.Campaign.CTAFlowConfigId.Value;\n\n                            var entry = await _context.CTAFlowSteps\n                                .Where(s => s.CTAFlowConfigId == flowId)\n                                .OrderBy(s => s.StepOrder)\n                                .Select(s => s.Id)\n                                .FirstOrDefaultAsync();\n\n                            if (entry == Guid.Empty)\n                            {\n                                _logger.LogWarning(\"❌ No entry step found for flow {Flow}\", flowId);\n                                continue;\n                            }\n\n                            stepId = entry;\n                        }\n                        else\n                        {\n                            _logger.LogWarning(\"❌ No flow context on CampaignSendLog for WAMID {Orig}\", originalMessageId);\n                            continue;\n                        }\n\n                        bundleJson = sendLog.ButtonBundleJson;\n                    }\n\n                    // ─────────────────────────────────────────────────────────────\n                    // ✅ UPSERT PROFILE NAME (create-or-update) *before* next step\n                    //    and make sure we look up by digits-only phone.\n                    // ─────────────────────────────────────────────────────────────\n                    try\n                    {\n                        var profileName = TryGetProfileName(value);\n                        if (!string.IsNullOrWhiteSpace(profileName))\n                        {\n                            var now = DateTime.UtcNow;\n                            var contact = await _context.Contacts\n                                .FirstOrDefaultAsync(c => c.BusinessId == businessId &&\n                                                          (c.PhoneNumber == fromDigits || c.PhoneNumber == fromRaw));\n\n                            if (contact == null)\n                            {\n                                profileName = profileName ?? \"User\";\n                                contact = new Contact\n                                {\n                                    Id = Guid.NewGuid(),\n                                    BusinessId = businessId,\n                                    PhoneNumber = fromDigits, // store canonical\n                                    Name = profileName,\n                                    ProfileName = profileName,\n                                    ProfileNameUpdatedAt = now,\n                                    CreatedAt = now,\n                                };\n                                _context.Contacts.Add(contact);\n                                await _context.SaveChangesAsync();\n                                _logger.LogInformation(\"👤 Created contact + stored WA profile '{Name}' for {Phone} (biz {Biz})\",\n                                    profileName, fromDigits, businessId);\n                            }\n                            else\n                            {\n                                var changed = false;\n\n                                if (!string.Equals(contact.ProfileName, profileName, StringComparison.Ordinal))\n                                {\n                                    contact.ProfileName = profileName;\n                                    contact.ProfileNameUpdatedAt = now;\n                                    changed = true;\n                                }\n\n                                if (string.IsNullOrWhiteSpace(contact.Name) ||\n                                    contact.Name == \"WhatsApp User\" ||\n                                    contact.Name == contact.PhoneNumber)\n                                {\n                                    if (!string.Equals(contact.Name, profileName, StringComparison.Ordinal))\n                                    {\n                                        contact.Name = profileName;\n                                        changed = true;\n                                    }\n                                }\n\n                                if (changed)\n                                {\n                                    contact.ProfileNameUpdatedAt = now;\n                                    await _context.SaveChangesAsync();\n                                    _logger.LogInformation(\"👤 Updated WA profile name to '{Name}' for {Phone} (biz {Biz})\",\n                                        profileName, fromDigits, businessId);\n                                }\n                            }\n                        }\n                    }\n                    catch (Exception exProf)\n                    {\n                        _logger.LogWarning(exProf, \"⚠️ Failed to upsert WA profile name on click webhook.\");\n                    }\n\n                    // —— Map clicked text -> button index via the shown bundle\n                    short? buttonIndex = null;\n                    FlowBtnBundleNode? hit = null;\n\n                    if (!string.IsNullOrWhiteSpace(bundleJson))\n                    {\n                        try\n                        {\n                            var nodes = System.Text.Json.JsonSerializer\n                                .Deserialize<List<FlowBtnBundleNode>>(bundleJson) ?? new();\n\n                            hit = nodes.FirstOrDefault(n =>\n                                      string.Equals(n.t ?? \"\", buttonText, StringComparison.OrdinalIgnoreCase))\n                                  ?? nodes.FirstOrDefault(n => Norm(n.t) == Norm(buttonText));\n\n                            if (hit != null)\n                                buttonIndex = (short)hit.i;\n                        }\n                        catch (Exception ex)\n                        {\n                            _logger.LogWarning(ex, \"⚠️ Failed to parse ButtonBundleJson\");\n                        }\n                    }\n\n                    // —— Fallback: find link by TEXT for this step\n                    FlowButtonLink? linkMatchedByText = null;\n                    if (buttonIndex == null)\n                    {\n                        var stepLinks = await _context.FlowButtonLinks\n                            .Where(l => l.CTAFlowStepId == stepId)\n                            .OrderBy(l => l.ButtonIndex)\n                            .ToListAsync();\n\n                        if (stepLinks.Count > 0)\n                        {\n                            linkMatchedByText = stepLinks.FirstOrDefault(l =>\n                                string.Equals(l.ButtonText ?? \"\", buttonText, StringComparison.OrdinalIgnoreCase))\n                                ?? stepLinks.FirstOrDefault(l => Norm(l.ButtonText) == Norm(buttonText));\n\n                            if (linkMatchedByText == null && stepLinks.Count == 1)\n                            {\n                                linkMatchedByText = stepLinks[0];\n                                _logger.LogInformation(\"🟨 Falling back to single available link for step {Step}\", stepId);\n                            }\n\n                            if (linkMatchedByText != null)\n                            {\n                                buttonIndex = (short?)linkMatchedByText.ButtonIndex;\n                                _logger.LogInformation(\"✅ Mapped click by TEXT to index {Idx} (flow={Flow}, step={Step})\",\n                                    buttonIndex, flowId, stepId);\n                            }\n                        }\n                    }\n\n                    if (buttonIndex == null)\n                    {\n                        _logger.LogInformation(\"🟡 Button text not found in bundle or flow links. Ref={Ref}, Text='{Text}'\",\n                            originalMessageId, buttonText);\n                        continue;\n                    }\n\n                    // —— Prefer exact link by index; otherwise use the text-matched link\n                    var link = await _flowService.GetLinkAsync(flowId, stepId, buttonIndex.Value)\n                               ?? linkMatchedByText;\n\n                    if (link == null)\n                    {\n                        _logger.LogInformation(\"🟡 No button link for (flow={Flow}, step={Step}, idx={Idx})\",\n                            flowId, stepId, buttonIndex);\n                        continue;\n                    }\n\n                    // —— Resolve index + step name (for logging)\n                    short resolvedIndex = buttonIndex ?? Convert.ToInt16(link.ButtonIndex);\n                    var stepName = await _context.CTAFlowSteps\n                        .Where(s => s.Id == stepId)\n                        .Select(s => s.TemplateToSend)\n                        .FirstOrDefaultAsync() ?? string.Empty;\n\n                    // ————————————————\n                    // 📝 WRITE CLICK LOG (always, even if terminal)\n                    // ————————————————\n                    try\n                    {\n                        var clickExec = new FlowExecutionLog\n                        {\n                            Id = Guid.NewGuid(),\n                            BusinessId = businessId,\n                            FlowId = flowId,\n                            StepId = stepId,\n                            StepName = stepName,\n                            CampaignSendLogId = campaignSendLogId,\n                            MessageLogId = origin?.Id,\n                            ContactPhone = fromDigits,      // ✅ digits-only, consistent\n                            ButtonIndex = resolvedIndex,\n                            TriggeredByButton = buttonText,\n                            TemplateName = null,\n                            TemplateType = \"quick_reply\",\n                            Success = true,\n                            ExecutedAt = DateTime.UtcNow,\n                            RequestId = Guid.NewGuid(),\n                            RunId = runId\n                        };\n\n                        _context.FlowExecutionLogs.Add(clickExec);\n                        await _context.SaveChangesAsync();\n                    }\n                    catch (Exception exSave)\n                    {\n                        _logger.LogWarning(exSave, \"⚠️ Failed to persist FlowExecutionLog (click). Continuing…\");\n                    }\n                    // ===== RUNNING CTA JOURNEY STATE UPSERT (ONLY IF THIS BIZ IS CONFIGURED) =====\n                    string runningJourney;\n\n                    // Check once if this business is configured to receive CTAJourney.\n                    // If not, we won't touch ContactJourneyStates at all.\n                    bool shouldTrackState = await _context.CustomerWebhookConfigs\n                        .AsNoTracking()\n                        .AnyAsync(x => x.BusinessId == businessId && x.IsActive);\n\n                    if (shouldTrackState)\n                    {\n                        try\n                        {\n                            // load current state for (business, flow, phone)\n                            var state = await _context.ContactJourneyStates\n                                .SingleOrDefaultAsync(s =>\n                                    s.BusinessId == businessId &&\n                                    s.FlowId == flowId &&\n                                    s.ContactPhone == fromDigits);\n\n                            if (state == null)\n                            {\n                                // first click -> start with this button text (original casing)\n                                state = new ContactJourneyState\n                                {\n                                    Id = Guid.NewGuid(),\n                                    BusinessId = businessId,\n                                    FlowId = flowId,\n                                    ContactPhone = fromDigits,\n                                    JourneyText = buttonText ?? string.Empty,\n                                    ClickCount = 1,\n                                    LastButtonText = buttonText,\n                                    CreatedAt = DateTime.UtcNow,\n                                    UpdatedAt = DateTime.UtcNow\n                                };\n                                _context.ContactJourneyStates.Add(state);\n                                await _context.SaveChangesAsync();\n                                runningJourney = state.JourneyText;\n                                _logger.LogInformation(\"🧵 Journey init: {Journey} (biz={Biz}, flow={Flow}, phone={Phone})\",\n                                    runningJourney, businessId, flowId, fromDigits);\n                            }\n                            else\n                            {\n                                // append EVERY press (duplicates allowed), keep original casing\n                                var parts = (state.JourneyText ?? string.Empty)\n                                    .Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)\n                                    .ToList();\n\n                                if (!string.IsNullOrWhiteSpace(buttonText))\n                                    parts.Add(buttonText!);\n\n                                // optional safety: cap growth\n                                const int cap = 15;\n                                if (parts.Count > cap) parts = parts.Skip(parts.Count - cap).ToList();\n\n                                state.JourneyText = string.Join('/', parts);\n                                state.ClickCount += 1;\n                                state.LastButtonText = buttonText;\n                                state.UpdatedAt = DateTime.UtcNow;\n\n                                await _context.SaveChangesAsync();\n                                runningJourney = state.JourneyText ?? string.Empty;\n\n                                _logger.LogInformation(\"🧵 Journey update: {Journey} (biz={Biz}, flow={Flow}, phone={Phone})\",\n                                    runningJourney, businessId, flowId, fromDigits);\n                            }\n                        }\n                        catch (Exception exState)\n                        {\n                            _logger.LogWarning(exState, \"⚠️ Failed to upsert ContactJourneyState.\");\n                            // fall back to this click only\n                            runningJourney = buttonText ?? string.Empty;\n                        }\n                    }\n                    else\n                    {\n                        // Business not configured → do NOT save any state. Just use the current button for emit.\n                        runningJourney = buttonText ?? string.Empty;\n                    }\n                    // ===== END RUNNING CTA JOURNEY STATE UPSERT =====\n\n\n                    // ===== CTAJourney EMIT (running journey) =====\n                    try\n                    {\n                        // contact (for userName / userPhone)\n                        var contact = await _context.Contacts\n                            .AsNoTracking()\n                            .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == fromDigits);\n\n                        // prefer PhoneNumberId (botId) from the originating send; otherwise pick any active one\n                        string? phoneNumberId = null;\n                        if (campaignSendLogId.HasValue)\n                        {\n                            phoneNumberId = await _context.CampaignSendLogs\n                                .AsNoTracking()\n                                .Where(s => s.Id == campaignSendLogId.Value)\n                                .Select(s => s.Campaign.PhoneNumberId)\n                                .FirstOrDefaultAsync();\n                        }\n                        if (string.IsNullOrWhiteSpace(phoneNumberId) && origin?.CampaignId != null)\n                        {\n                            phoneNumberId = await _context.Campaigns\n                                .AsNoTracking()\n                                .Where(c => c.Id == origin.CampaignId.Value)\n                                .Select(c => c.PhoneNumberId)\n                                .FirstOrDefaultAsync();\n                        }\n\n                        //if (string.IsNullOrWhiteSpace(phoneNumberId))\n                        //{\n                        //    phoneNumberId = await _context.WhatsAppSettings\n                        //        .AsNoTracking()\n                        //        .Where(s => s.BusinessId == businessId && s.IsActive && s.PhoneNumberId != null)\n                        //        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        //        .Select(s => s.PhoneNumberId)\n                        //        .FirstOrDefaultAsync();\n                        //}\n                        // 2) Map PhoneNumberId -> WhatsAppBusinessNumber\n                        string? botWaNumber = null;\n                        if (!string.IsNullOrWhiteSpace(phoneNumberId))\n                        {\n                            botWaNumber = await _context.WhatsAppPhoneNumbers\n                                .AsNoTracking()\n                                .Where(n => n.BusinessId == businessId && n.PhoneNumberId == phoneNumberId)\n                                .Select(n => n.WhatsAppBusinessNumber)\n                                .FirstOrDefaultAsync();\n                        }\n                        // business WA display number (fallback botId if no PhoneNumberId)\n                        var displayProfilename = await _context.WhatsAppSettings\n                            .AsNoTracking()\n                            .Where(s => s.BusinessId == businessId && s.IsActive && s.WhatsAppBusinessNumber != null)\n                            .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                            .Select(s => s.WhatsAppBusinessNumber)\n                            .FirstOrDefaultAsync();\n\n                        // Build DTO and POST (CTAJourney = the running slash-joined string with original casing)\n                        var dto = CtaJourneyMapper.Build(\n                            journeyKey: runningJourney,                    // <<—— use the running state\n                            contact: contact,\n                            profileName: contact?.ProfileName ?? contact?.Name,\n                            userId: null,\n                            phoneNumberId: botWaNumber,                  // preferred botId\n                            businessDisplayPhone: displayProfilename,               // fallback botId if above missing\n                            categoryBrowsed: null,\n                            productBrowsed: null\n                        );\n\n                        await _journeyPublisher.PublishAsync(businessId, dto, CancellationToken.None);\n                        _logger.LogInformation(\"📤 CTAJourney posted (running): {Journey} (biz={Biz}, phone={Phone})\",\n                            dto.CTAJourney, businessId, dto.userPhone);\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(ex, \"⚠️ Failed to post CTAJourney (click). Continuing…\");\n                    }\n                    // ===== end CTAJourney EMIT =====\n\n\n                    // ===== CTAJourney EMIT (button name) =====\n                    //try\n                    //{\n                    //    CTAJourney must be the button name now\n                    //   var journeyKey = ToKey(buttonText);\n                    //    var journeyKey = buttonText?.Trim();\n                    //    contact(for userName / userPhone)\n                    //        var contact = await _context.Contacts\n                    //            .AsNoTracking()\n                    //            .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == fromDigits);\n\n                    //    prefer PhoneNumberId(botId) from the originating send; otherwise pick any active one\n                    //    string? phoneNumberId = null;\n                    //    if (campaignSendLogId.HasValue)\n                    //    {\n                    //        phoneNumberId = await _context.CampaignSendLogs\n                    //            .AsNoTracking()\n                    //            .Where(s => s.Id == campaignSendLogId.Value)\n                    //            .Select(s => s.Campaign.PhoneNumberId)\n                    //            .FirstOrDefaultAsync();\n                    //    }\n                    //    if (string.IsNullOrWhiteSpace(phoneNumberId) && origin?.CampaignId != null)\n                    //    {\n                    //        phoneNumberId = await _context.Campaigns\n                    //            .AsNoTracking()\n                    //            .Where(c => c.Id == origin.CampaignId.Value)\n                    //            .Select(c => c.PhoneNumberId)\n                    //            .FirstOrDefaultAsync();\n                    //    }\n                    //    if (string.IsNullOrWhiteSpace(phoneNumberId))\n                    //    {\n                    //        phoneNumberId = await _context.WhatsAppSettings\n                    //            .AsNoTracking()\n                    //            .Where(s => s.BusinessId == businessId && s.IsActive && s.PhoneNumberId != null)\n                    //            .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                    //            .Select(s => s.PhoneNumberId)\n                    //            .FirstOrDefaultAsync();\n                    //    }\n\n                    //    business WA display number(fallback botId if no PhoneNumberId)\n                    //    var displayWa = await _context.WhatsAppSettings\n                    //        .AsNoTracking()\n                    //        .Where(s => s.BusinessId == businessId && s.IsActive && s.WhatsAppBusinessNumber != null)\n                    //        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                    //        .Select(s => s.WhatsAppBusinessNumber)\n                    //        .FirstOrDefaultAsync();\n\n                    //    build DTO and POST(maps to: userName / profileName, userPhone, botId, CTAJourney)\n                    //    var dto = CtaJourneyMapper.Build(\n                    //        journeyKey: journeyKey,                         // <<—— button name\n                    //        contact: contact,\n                    //        profileName: contact?.ProfileName ?? contact?.Name,\n                    //        userId: null,                                   // we don't have external user id\n                    //        phoneNumberId: phoneNumberId,                   // preferred botId\n                    //        businessDisplayPhone: displayWa,                // fallback botId if above missing\n                    //        categoryBrowsed: null,\n                    //        productBrowsed: null\n                    //    );\n\n                    //    await _journeyPublisher.PublishAsync(businessId, dto, CancellationToken.None);\n                    //    _logger.LogInformation(\"📤 CTAJourney posted (button): {Journey} (biz={Biz}, phone={Phone})\",\n                    //        dto.CTAJourney, businessId, dto.userPhone);\n                    //}\n                    //catch (Exception ex)\n                    //{\n                    //    _logger.LogWarning(ex, \"⚠️ Failed to post CTAJourney (click). Continuing…\");\n                    //}\n\n\n\n\n\n                    // —— If terminal/URL button: already logged the click\n                    if (link.NextStepId == null)\n                    {\n                        _logger.LogInformation(\"🔚 Terminal/URL button: no NextStepId. flow={Flow}, step={Step}, idx={Idx}, text='{Text}'\",\n                            flowId, stepId, resolvedIndex, link.ButtonText);\n                        continue;\n                    }\n\n                    if (_flowRuntime == null)\n                    {\n                        _logger.LogError(\"❌ _flowRuntime is null. Cannot execute next step. flow={Flow}, step={Step}, idx={Idx}\", flowId, stepId, resolvedIndex);\n                        continue;\n                    }\n\n                    // —— 🔎 Resolve sender from the originating campaign/send (use SAME WABA)\n                    string? providerFromCampaign = null;\n                    string? phoneNumberIdFromCampaign = null;\n\n                    if (campaignSendLogId.HasValue)\n                    {\n                        var originSend = await _context.CampaignSendLogs\n                            .AsNoTracking()\n                            .Include(s => s.Campaign)\n                            .Where(s => s.Id == campaignSendLogId.Value)\n                            .Select(s => new\n                            {\n                                s.Campaign.Provider,\n                                s.Campaign.PhoneNumberId\n                            })\n                            .FirstOrDefaultAsync();\n\n                        providerFromCampaign = originSend?.Provider;\n                        phoneNumberIdFromCampaign = originSend?.PhoneNumberId;\n                    }\n                    else if (origin != null && origin.CampaignId.HasValue)\n                    {\n                        var originCamp = await _context.Campaigns\n                            .AsNoTracking()\n                            .Where(c => c.Id == origin.CampaignId.Value)\n                            .Select(c => new { c.Provider, c.PhoneNumberId })\n                            .FirstOrDefaultAsync();\n\n                        providerFromCampaign = originCamp?.Provider;\n                        phoneNumberIdFromCampaign = originCamp?.PhoneNumberId;\n                    }\n\n                    // —— Execute next (carry sender forward)\n                    var ctxObj = new NextStepContext\n                    {\n                        BusinessId = businessId,\n                        FlowId = flowId,\n                        Version = flowVersion ?? 1,\n                        SourceStepId = stepId,\n                        TargetStepId = link.NextStepId!.Value,\n                        ButtonIndex = resolvedIndex,\n                        MessageLogId = origin?.Id ?? Guid.Empty,\n                        ContactPhone = fromDigits,     // ✅ digits-only, so runtime finds the Contact\n                        RequestId = Guid.NewGuid(),\n                        ClickedButton = link,\n\n                        // 🧷 Sender from campaign so runtime won’t guess or fail with “Missing PhoneNumberId”\n                        Provider = providerFromCampaign,\n                        PhoneNumberId = phoneNumberIdFromCampaign,\n                        AlwaysSend = true // 🔥 force runtime to send even if it’s a loopback/same step\n                    };\n\n                    try\n                    {\n                        var result = await _flowRuntime.ExecuteNextAsync(ctxObj);\n\n                        if (result.Success && !string.IsNullOrWhiteSpace(result.RedirectUrl))\n                        {\n                            _logger.LogInformation(\"🔗 URL button redirect (logical): {Url}\", result.RedirectUrl);\n                        }\n                    }\n                    catch (Exception exRun)\n                    {\n                        _logger.LogError(exRun,\n                            \"❌ ExecuteNextAsync failed. ctx: flow={Flow} step={Step} next={Next} idx={Idx} from={From} orig={Orig} text='{Text}'\",\n                            ctxObj.FlowId, ctxObj.SourceStepId, ctxObj.TargetStepId, ctxObj.ButtonIndex, fromDigits, originalMessageId, buttonText);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to process CTA button click.\");\n            }\n        }\n\n\n        //public async Task ProcessClickAsync(JsonElement value)\n        //{\n        //    _logger.LogWarning(\"📥 [ENTERED CLICK PROCESSOR]\");\n\n        //    try\n        //    {\n        //        if (!value.TryGetProperty(\"messages\", out var messages) || messages.GetArrayLength() == 0)\n        //            return;\n\n        //        static string Norm(string? s)\n        //        {\n        //            if (string.IsNullOrWhiteSpace(s)) return string.Empty;\n        //            return string.Join(' ', s.Split(new[] { ' ', '\\t', '\\r', '\\n' }, StringSplitOptions.RemoveEmptyEntries))\n        //                         .Trim()\n        //                         .ToLowerInvariant();\n        //        }\n\n        //        // ✅ Canonical phone: keep only digits (matches how we store & search contacts)\n        //        static string NormalizePhone(string? raw)\n        //            => new string((raw ?? string.Empty).Where(char.IsDigit).ToArray());\n\n        //        // ✅ contacts[0].profile.name (Meta shape)\n        //        static string? TryGetProfileName(JsonElement root)\n        //        {\n        //            if (root.TryGetProperty(\"contacts\", out var contactsEl) &&\n        //                contactsEl.ValueKind == JsonValueKind.Array &&\n        //                contactsEl.GetArrayLength() > 0)\n        //            {\n        //                var c0 = contactsEl[0];\n        //                if (c0.TryGetProperty(\"profile\", out var profEl) &&\n        //                    profEl.ValueKind == JsonValueKind.Object &&\n        //                    profEl.TryGetProperty(\"name\", out var nameEl) &&\n        //                    nameEl.ValueKind == JsonValueKind.String)\n        //                {\n        //                    var n = nameEl.GetString();\n        //                    return string.IsNullOrWhiteSpace(n) ? null : n!.Trim();\n        //                }\n        //            }\n        //            return null;\n        //        }\n\n        //        foreach (var msg in messages.EnumerateArray())\n        //        {\n        //            if (!msg.TryGetProperty(\"type\", out var typeProp))\n        //                continue;\n\n        //            var type = typeProp.GetString();\n\n        //            string? clickMessageId = msg.TryGetProperty(\"id\", out var idProp) ? idProp.GetString() : null;\n        //            string? originalMessageId = msg.TryGetProperty(\"context\", out var ctx) && ctx.TryGetProperty(\"id\", out var ctxId)\n        //                ? ctxId.GetString()\n        //                : null;\n        //            var fromRaw = msg.TryGetProperty(\"from\", out var fromProp) ? (fromProp.GetString() ?? \"\") : \"\";\n        //            var fromDigits = NormalizePhone(fromRaw);\n\n        //            // ——— button label extraction\n        //            string? buttonText = null;\n        //            if (string.Equals(type, \"button\", StringComparison.OrdinalIgnoreCase))\n        //            {\n        //                buttonText = msg.TryGetProperty(\"button\", out var btn) &&\n        //                             btn.TryGetProperty(\"text\", out var textProp)\n        //                               ? textProp.GetString()?.Trim()\n        //                               : null;\n        //            }\n        //            else if (string.Equals(type, \"interactive\", StringComparison.OrdinalIgnoreCase) &&\n        //                     msg.TryGetProperty(\"interactive\", out var interactive))\n        //            {\n        //                if (interactive.TryGetProperty(\"type\", out var intrType) &&\n        //                    string.Equals(intrType.GetString(), \"button_reply\", StringComparison.OrdinalIgnoreCase) &&\n        //                    interactive.TryGetProperty(\"button_reply\", out var br) &&\n        //                    br.TryGetProperty(\"title\", out var titleProp))\n        //                {\n        //                    buttonText = titleProp.GetString()?.Trim();\n        //                }\n        //                else if (interactive.TryGetProperty(\"list_reply\", out var lr) &&\n        //                         lr.TryGetProperty(\"title\", out var listTitleProp))\n        //                {\n        //                    buttonText = listTitleProp.GetString()?.Trim();\n        //                }\n        //            }\n\n        //            if (string.IsNullOrWhiteSpace(buttonText) || string.IsNullOrWhiteSpace(originalMessageId))\n        //            {\n        //                _logger.LogDebug(\"ℹ️ Not a recognized click or missing context.id. type={Type}\", type);\n        //                continue;\n        //            }\n\n        //            _logger.LogInformation(\"🖱️ Button Click → From: {From}, ClickId: {ClickId}, OrigMsgId: {OrigId}, Text: {Text}\",\n        //                fromDigits, clickMessageId, originalMessageId, buttonText);\n\n        //            // —— Try 1: originating MessageLog (for flow-sent messages)\n        //            var origin = await _context.MessageLogs\n        //                .AsNoTracking()\n        //                .FirstOrDefaultAsync(m =>\n        //                    m.MessageId == originalMessageId &&\n        //                    m.CTAFlowConfigId != null &&\n        //                    m.CTAFlowStepId != null);\n\n        //            Guid businessId;\n        //            Guid flowId;\n        //            Guid stepId;\n        //            string? bundleJson = null;\n        //            int? flowVersion = null;\n\n        //            Guid? campaignSendLogId = null; // link the click to the shown message\n        //            Guid? runId = null;             // copy from parent CSL when available\n\n        //            if (origin != null)\n        //            {\n        //                businessId = origin.BusinessId;\n        //                flowId = origin.CTAFlowConfigId!.Value;\n        //                stepId = origin.CTAFlowStepId!.Value;\n        //                bundleJson = origin.ButtonBundleJson;\n        //                flowVersion = origin.FlowVersion;\n\n        //                // Map back to CSL via MessageLogId or WAMID and fetch RunId\n        //                var cslInfo = await _context.CampaignSendLogs\n        //                    .AsNoTracking()\n        //                    .Where(csl => (csl.MessageLogId == origin.Id) || (csl.MessageId == originalMessageId))\n        //                    .OrderByDescending(csl => csl.CreatedAt)\n        //                    .Select(csl => new { csl.Id, csl.RunId })\n        //                    .FirstOrDefaultAsync();\n\n        //                campaignSendLogId = cslInfo?.Id;\n        //                runId = cslInfo?.RunId;\n        //            }\n        //            else\n        //            {\n        //                // —— Try 2: first campaign message (CampaignSendLogs)\n        //                var sendLog = await _context.CampaignSendLogs\n        //                    .Include(sl => sl.Campaign)\n        //                    .AsNoTracking()\n        //                    .FirstOrDefaultAsync(sl => sl.MessageId == originalMessageId);\n\n        //                if (sendLog == null)\n        //                {\n        //                    _logger.LogWarning(\"❌ No MessageLog or CampaignSendLog for original WAMID {Orig}\", originalMessageId);\n        //                    continue;\n        //                }\n\n        //                businessId = sendLog.BusinessId != Guid.Empty\n        //                    ? sendLog.BusinessId\n        //                    : (sendLog.Campaign?.BusinessId ?? Guid.Empty);\n\n        //                if (businessId == Guid.Empty)\n        //                {\n        //                    _logger.LogWarning(\"❌ Could not resolve BusinessId for WAMID {Orig}\", originalMessageId);\n        //                    continue;\n        //                }\n\n        //                campaignSendLogId = sendLog.Id;\n        //                runId = sendLog.RunId;\n\n        //                if (sendLog.CTAFlowConfigId.HasValue && sendLog.CTAFlowStepId.HasValue)\n        //                {\n        //                    flowId = sendLog.CTAFlowConfigId.Value;\n        //                    stepId = sendLog.CTAFlowStepId.Value;\n        //                }\n        //                else if (sendLog.Campaign?.CTAFlowConfigId != null)\n        //                {\n        //                    flowId = sendLog.Campaign.CTAFlowConfigId.Value;\n\n        //                    var entry = await _context.CTAFlowSteps\n        //                        .Where(s => s.CTAFlowConfigId == flowId)\n        //                        .OrderBy(s => s.StepOrder)\n        //                        .Select(s => s.Id)\n        //                        .FirstOrDefaultAsync();\n\n        //                    if (entry == Guid.Empty)\n        //                    {\n        //                        _logger.LogWarning(\"❌ No entry step found for flow {Flow}\", flowId);\n        //                        continue;\n        //                    }\n\n        //                    stepId = entry;\n        //                }\n        //                else\n        //                {\n        //                    _logger.LogWarning(\"❌ No flow context on CampaignSendLog for WAMID {Orig}\", originalMessageId);\n        //                    continue;\n        //                }\n\n        //                bundleJson = sendLog.ButtonBundleJson;\n        //            }\n\n        //            // ─────────────────────────────────────────────────────────────\n        //            // ✅ UPSERT PROFILE NAME (create-or-update) *before* next step\n        //            //    and make sure we look up by digits-only phone.\n        //            // ─────────────────────────────────────────────────────────────\n        //            try\n        //            {\n        //                var profileName = TryGetProfileName(value);\n        //                if (!string.IsNullOrWhiteSpace(profileName))\n        //                {\n        //                    var now = DateTime.UtcNow;\n        //                    var contact = await _context.Contacts\n        //                        .FirstOrDefaultAsync(c => c.BusinessId == businessId &&\n        //                                                  (c.PhoneNumber == fromDigits || c.PhoneNumber == fromRaw));\n\n        //                    if (contact == null)\n        //                    {\n        //                        profileName = profileName ?? \"User\";\n        //                        contact = new Contact\n        //                        {\n        //                            Id = Guid.NewGuid(),\n        //                            BusinessId = businessId,\n        //                            PhoneNumber = fromDigits, // store canonical\n        //                            Name = profileName,\n        //                            ProfileName = profileName,\n        //                            ProfileNameUpdatedAt = now,\n        //                            CreatedAt = now,\n\n        //                        };\n        //                        _context.Contacts.Add(contact);\n        //                        await _context.SaveChangesAsync();\n        //                        _logger.LogInformation(\"👤 Created contact + stored WA profile '{Name}' for {Phone} (biz {Biz})\",\n        //                            profileName, fromDigits, businessId);\n        //                    }\n        //                    else\n        //                    {\n        //                        var changed = false;\n\n        //                        if (!string.Equals(contact.ProfileName, profileName, StringComparison.Ordinal))\n        //                        {\n        //                            contact.ProfileName = profileName;\n        //                            contact.ProfileNameUpdatedAt = now;\n        //                            changed = true;\n        //                        }\n\n        //                        if (string.IsNullOrWhiteSpace(contact.Name) ||\n        //                            contact.Name == \"WhatsApp User\" ||\n        //                            contact.Name == contact.PhoneNumber)\n        //                        {\n        //                            if (!string.Equals(contact.Name, profileName, StringComparison.Ordinal))\n        //                            {\n        //                                contact.Name = profileName;\n        //                                changed = true;\n        //                            }\n        //                        }\n\n        //                        if (changed)\n        //                        {\n        //                            contact.ProfileNameUpdatedAt = now;\n        //                            await _context.SaveChangesAsync();\n        //                            _logger.LogInformation(\"👤 Updated WA profile name to '{Name}' for {Phone} (biz {Biz})\",\n        //                                profileName, fromDigits, businessId);\n        //                        }\n        //                    }\n        //                }\n        //            }\n        //            catch (Exception exProf)\n        //            {\n        //                _logger.LogWarning(exProf, \"⚠️ Failed to upsert WA profile name on click webhook.\");\n        //            }\n\n        //            // —— Map clicked text -> button index via the shown bundle\n        //            short? buttonIndex = null;\n        //            FlowBtnBundleNode? hit = null;\n\n        //            if (!string.IsNullOrWhiteSpace(bundleJson))\n        //            {\n        //                try\n        //                {\n        //                    var nodes = System.Text.Json.JsonSerializer\n        //                        .Deserialize<List<FlowBtnBundleNode>>(bundleJson) ?? new();\n\n        //                    hit = nodes.FirstOrDefault(n =>\n        //                              string.Equals(n.t ?? \"\", buttonText, StringComparison.OrdinalIgnoreCase))\n        //                          ?? nodes.FirstOrDefault(n => Norm(n.t) == Norm(buttonText));\n\n        //                    if (hit != null)\n        //                        buttonIndex = (short)hit.i;\n        //                }\n        //                catch (Exception ex)\n        //                {\n        //                    _logger.LogWarning(ex, \"⚠️ Failed to parse ButtonBundleJson\");\n        //                }\n        //            }\n\n        //            // —— Fallback: find link by TEXT for this step\n        //            FlowButtonLink? linkMatchedByText = null;\n        //            if (buttonIndex == null)\n        //            {\n        //                var stepLinks = await _context.FlowButtonLinks\n        //                    .Where(l => l.CTAFlowStepId == stepId)\n        //                    .OrderBy(l => l.ButtonIndex)\n        //                    .ToListAsync();\n\n        //                if (stepLinks.Count > 0)\n        //                {\n        //                    linkMatchedByText = stepLinks.FirstOrDefault(l =>\n        //                        string.Equals(l.ButtonText ?? \"\", buttonText, StringComparison.OrdinalIgnoreCase))\n        //                        ?? stepLinks.FirstOrDefault(l => Norm(l.ButtonText) == Norm(buttonText));\n\n        //                    if (linkMatchedByText == null && stepLinks.Count == 1)\n        //                    {\n        //                        linkMatchedByText = stepLinks[0];\n        //                        _logger.LogInformation(\"🟨 Falling back to single available link for step {Step}\", stepId);\n        //                    }\n\n        //                    if (linkMatchedByText != null)\n        //                    {\n        //                        buttonIndex = (short?)linkMatchedByText.ButtonIndex;\n        //                        _logger.LogInformation(\"✅ Mapped click by TEXT to index {Idx} (flow={Flow}, step={Step})\",\n        //                            buttonIndex, flowId, stepId);\n        //                    }\n        //                }\n        //            }\n\n        //            if (buttonIndex == null)\n        //            {\n        //                _logger.LogInformation(\"🟡 Button text not found in bundle or flow links. Ref={Ref}, Text='{Text}'\",\n        //                    originalMessageId, buttonText);\n        //                continue;\n        //            }\n\n        //            // —— Prefer exact link by index; otherwise use the text-matched link\n        //            var link = await _flowService.GetLinkAsync(flowId, stepId, buttonIndex.Value)\n        //                       ?? linkMatchedByText;\n\n        //            if (link == null)\n        //            {\n        //                _logger.LogInformation(\"🟡 No button link for (flow={Flow}, step={Step}, idx={Idx})\",\n        //                    flowId, stepId, buttonIndex);\n        //                continue;\n        //            }\n\n        //            // —— Resolve index + step name (for logging)\n        //            short resolvedIndex = buttonIndex ?? Convert.ToInt16(link.ButtonIndex);\n        //            var stepName = await _context.CTAFlowSteps\n        //                .Where(s => s.Id == stepId)\n        //                .Select(s => s.TemplateToSend)\n        //                .FirstOrDefaultAsync() ?? string.Empty;\n\n        //            // ————————————————\n        //            // 📝 WRITE CLICK LOG (always, even if terminal)\n        //            // ————————————————\n        //            try\n        //            {\n        //                var clickExec = new FlowExecutionLog\n        //                {\n        //                    Id = Guid.NewGuid(),\n        //                    BusinessId = businessId,\n        //                    FlowId = flowId,\n        //                    StepId = stepId,\n        //                    StepName = stepName,\n        //                    CampaignSendLogId = campaignSendLogId,\n        //                    MessageLogId = origin?.Id,\n        //                    ContactPhone = fromDigits,      // ✅ digits-only, consistent\n        //                    ButtonIndex = resolvedIndex,\n        //                    TriggeredByButton = buttonText,\n        //                    TemplateName = null,\n        //                    TemplateType = \"quick_reply\",\n        //                    Success = true,\n        //                    ExecutedAt = DateTime.UtcNow,\n        //                    RequestId = Guid.NewGuid(),\n        //                    RunId = runId\n        //                };\n\n        //                _context.FlowExecutionLogs.Add(clickExec);\n        //                await _context.SaveChangesAsync();\n\n\n        //            }\n        //            catch (Exception exSave)\n        //            {\n        //                _logger.LogWarning(exSave, \"⚠️ Failed to persist FlowExecutionLog (click). Continuing…\");\n        //            }\n        //            // ===== CTAJourney EMIT (inserted here) =====\n        //            try\n        //            {\n        //                // load current & next step names for readable journey key\n        //                var fromStepName = await _context.CTAFlowSteps\n        //                    .AsNoTracking()\n        //                    .Where(s => s.Id == stepId)\n        //                    .Select(s => s.TemplateToSend)\n        //                    .FirstOrDefaultAsync();\n\n        //                string? toStepName = null;\n        //                if (link.NextStepId.HasValue)\n        //                {\n        //                    toStepName = await _context.CTAFlowSteps\n        //                        .AsNoTracking()\n        //                        .Where(s => s.Id == link.NextStepId.Value)\n        //                        .Select(s => s.TemplateToSend)\n        //                        .FirstOrDefaultAsync();\n        //                }\n\n        //                var journeyKey = $\"{ToKey(fromStepName)}_to_{ToKey(toStepName)}\";\n\n        //                // contact (for userName / userPhone)\n        //                var contact = await _context.Contacts\n        //                    .AsNoTracking()\n        //                    .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == fromDigits);\n\n        //                // prefer PhoneNumberId (botId) from the originating send; otherwise pick any active one\n        //                string? phoneNumberId = null;\n        //                if (campaignSendLogId.HasValue)\n        //                {\n        //                    phoneNumberId = await _context.CampaignSendLogs\n        //                        .AsNoTracking()\n        //                        .Where(s => s.Id == campaignSendLogId.Value)\n        //                        .Select(s => s.Campaign.PhoneNumberId)\n        //                        .FirstOrDefaultAsync();\n        //                }\n        //                if (string.IsNullOrWhiteSpace(phoneNumberId) && origin?.CampaignId != null)\n        //                {\n        //                    phoneNumberId = await _context.Campaigns\n        //                        .AsNoTracking()\n        //                        .Where(c => c.Id == origin.CampaignId.Value)\n        //                        .Select(c => c.PhoneNumberId)\n        //                        .FirstOrDefaultAsync();\n        //                }\n        //                if (string.IsNullOrWhiteSpace(phoneNumberId))\n        //                {\n        //                    phoneNumberId = await _context.WhatsAppSettings\n        //                        .AsNoTracking()\n        //                        .Where(s => s.BusinessId == businessId && s.IsActive && s.PhoneNumberId != null)\n        //                        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n        //                        .Select(s => s.PhoneNumberId)\n        //                        .FirstOrDefaultAsync();\n        //                }\n\n        //                // business WA display number (fallback botId if no PhoneNumberId)\n        //                var displayWa = await _context.WhatsAppSettings\n        //                    .AsNoTracking()\n        //                    .Where(s => s.BusinessId == businessId && s.IsActive && s.WhatsAppBusinessNumber != null)\n        //                    .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n        //                    .Select(s => s.WhatsAppBusinessNumber)\n        //                    .FirstOrDefaultAsync();\n\n        //                // build DTO and POST (maps to: userName/profileName, userPhone, botId, CTAJourney)\n        //                var dto = CtaJourneyMapper.Build(\n        //                    journeyKey: journeyKey,\n        //                    contact: contact,\n        //                    profileName: contact?.ProfileName ?? contact?.Name,\n        //                    userId: null,                         // we don't have an external user id\n        //                    phoneNumberId: phoneNumberId,         // preferred botId\n        //                    businessDisplayPhone: displayWa,      // fallback botId if above missing\n        //                    categoryBrowsed: null,\n        //                    productBrowsed: null\n        //                );\n\n        //                await _journeyPublisher.PublishAsync(businessId, dto, CancellationToken.None);\n        //                _logger.LogInformation(\"📤 CTAJourney posted: {Journey} (biz={Biz}, phone={Phone})\",\n        //                    dto.CTAJourney, businessId, dto.userPhone);\n        //            }\n        //            catch (Exception ex)\n        //            {\n        //                _logger.LogWarning(ex, \"⚠️ Failed to post CTAJourney (click). Continuing…\");\n        //            }\n        //            // ===== end CTAJourney EMIT =====\n\n        //            // —— If terminal/URL button: already logged the click\n        //            if (link.NextStepId == null)\n        //            {\n        //                _logger.LogInformation(\"🔚 Terminal/URL button: no NextStepId. flow={Flow}, step={Step}, idx={Idx}, text='{Text}'\",\n        //                    flowId, stepId, resolvedIndex, link.ButtonText);\n        //                continue;\n        //            }\n\n        //            if (_flowRuntime == null)\n        //            {\n        //                _logger.LogError(\"❌ _flowRuntime is null. Cannot execute next step. flow={Flow}, step={Step}, idx={Idx}\", flowId, stepId, resolvedIndex);\n        //                continue;\n        //            }\n\n        //            // —— 🔎 Resolve sender from the originating campaign/send (use SAME WABA)\n        //            string? providerFromCampaign = null;\n        //            string? phoneNumberIdFromCampaign = null;\n\n        //            if (campaignSendLogId.HasValue)\n        //            {\n        //                var originSend = await _context.CampaignSendLogs\n        //                    .AsNoTracking()\n        //                    .Include(s => s.Campaign)\n        //                    .Where(s => s.Id == campaignSendLogId.Value)\n        //                    .Select(s => new\n        //                    {\n        //                        s.Campaign.Provider,\n        //                        s.Campaign.PhoneNumberId\n        //                    })\n        //                    .FirstOrDefaultAsync();\n\n        //                providerFromCampaign = originSend?.Provider;\n        //                phoneNumberIdFromCampaign = originSend?.PhoneNumberId;\n        //            }\n        //            else if (origin != null && origin.CampaignId.HasValue)\n        //            {\n        //                var originCamp = await _context.Campaigns\n        //                    .AsNoTracking()\n        //                    .Where(c => c.Id == origin.CampaignId.Value)\n        //                    .Select(c => new { c.Provider, c.PhoneNumberId })\n        //                    .FirstOrDefaultAsync();\n\n        //                providerFromCampaign = originCamp?.Provider;\n        //                phoneNumberIdFromCampaign = originCamp?.PhoneNumberId;\n        //            }\n\n        //            // —— Execute next (carry sender forward)\n        //            var ctxObj = new NextStepContext\n        //            {\n        //                BusinessId = businessId,\n        //                FlowId = flowId,\n        //                Version = flowVersion ?? 1,\n        //                SourceStepId = stepId,\n        //                TargetStepId = link.NextStepId!.Value,\n        //                ButtonIndex = resolvedIndex,\n        //                MessageLogId = origin?.Id ?? Guid.Empty,\n        //                ContactPhone = fromDigits,     // ✅ digits-only, so runtime finds the Contact\n        //                RequestId = Guid.NewGuid(),\n        //                ClickedButton = link,\n\n        //                // 🧷 Sender from campaign so runtime won’t guess or fail with “Missing PhoneNumberId”\n        //                Provider = providerFromCampaign,\n        //                PhoneNumberId = phoneNumberIdFromCampaign,\n        //                AlwaysSend = true // 🔥 force runtime to send even if it’s a loopback/same step\n        //            };\n\n        //            try\n        //            {\n        //                var result = await _flowRuntime.ExecuteNextAsync(ctxObj);\n\n        //                if (result.Success && !string.IsNullOrWhiteSpace(result.RedirectUrl))\n        //                {\n        //                    _logger.LogInformation(\"🔗 URL button redirect (logical): {Url}\", result.RedirectUrl);\n        //                }\n        //            }\n        //            catch (Exception exRun)\n        //            {\n        //                _logger.LogError(exRun,\n        //                    \"❌ ExecuteNextAsync failed. ctx: flow={Flow} step={Step} next={Next} idx={Idx} from={From} orig={Orig} text='{Text}'\",\n        //                    ctxObj.FlowId, ctxObj.SourceStepId, ctxObj.TargetStepId, ctxObj.ButtonIndex, fromDigits, originalMessageId, buttonText);\n        //            }\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"❌ Failed to process CTA button click.\");\n        //    }\n        //}\n\n        private sealed class FlowBtnBundleNode\n        {\n            public int i { get; init; }\n            public string? t { get; init; }   // button text/title\n            public string? ty { get; init; }  // button type (URL/QUICK_REPLY/FLOW)\n            public string? v { get; init; }   // value/payload (e.g., URL)\n            public Guid? ns { get; init; }    // next step id\n        }\n        private static string ToKey(string? s)\n        {\n            if (string.IsNullOrWhiteSpace(s)) return \"unknown\";\n            // letters/digits → lower, spaces/._- → underscore, strip the rest\n            var chars = s.Trim().ToLowerInvariant()\n                .Select(ch => char.IsLetterOrDigit(ch) ? ch : '_')\n                .ToArray();\n            var key = new string(chars);\n            // squeeze duplicate underscores\n            while (key.Contains(\"__\")) key = key.Replace(\"__\", \"_\");\n            return key.Trim('_');\n        }\n\n\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/IClickWebhookProcessor.cs",
      "sha256": "5c42427d1e6c36dd122b3a10412eb70d7c412baf00ce54a614491a5b1590afeb",
      "language": "csharp",
      "size": 228,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface IClickWebhookProcessor\n    {\n        Task ProcessClickAsync(JsonElement value);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/IInboundMessageProcessor.cs",
      "sha256": "ec5496c7810122c99affe09fa17861d6d0c371457d9284e0ba58be6a93ea60f2",
      "language": "csharp",
      "size": 229,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface IInboundMessageProcessor\n    {\n        Task ProcessChatAsync(JsonElement value);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/InboundMessageProcessor.cs",
      "sha256": "18ebaad4bf7dd762289357eea42665c0cfc4bd2c42dec9a37a1c88f2d5398c73",
      "language": "csharp",
      "size": 13083,
      "content": "using System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.SignalR;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing Microsoft.Extensions.DependencyInjection;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.Automation.Services;\nusing xbytechat.api.Features.Contacts.Services;\n\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class InboundMessageProcessor : IInboundMessageProcessor\n    {\n        private readonly AppDbContext _context;\n        private readonly IHubContext<InboxHub> _hubContext;\n        private readonly ILogger<InboundMessageProcessor> _logger;\n        private readonly IInboxService _inboxService;\n        private readonly IServiceScopeFactory _serviceScopeFactory;\n        private readonly IHubContext<InboxHub> _hub;\n        private readonly IContactProfileService _contactProfile;\n        public InboundMessageProcessor(\n            AppDbContext context,\n            IHubContext<InboxHub> hubContext,\n            ILogger<InboundMessageProcessor> logger,\n            IInboxService inboxService,\n            IServiceScopeFactory serviceScopeFactory,\n            IHubContext<InboxHub> hub, IContactProfileService contactProfile)\n        {\n            _context = context;\n            _hubContext = hubContext;\n            _logger = logger;\n            _inboxService = inboxService;\n            _serviceScopeFactory = serviceScopeFactory;\n            _hub = hub;\n            _contactProfile = contactProfile;\n        }\n\n        public async Task ProcessChatAsync(JsonElement value)\n        {\n            try\n            {\n                using var scope = _serviceScopeFactory.CreateScope();\n                var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n                var contactService = scope.ServiceProvider.GetRequiredService<IContactService>();\n                var chatSessionStateService = scope.ServiceProvider.GetRequiredService<IChatSessionStateService>();\n                var automationService = scope.ServiceProvider.GetRequiredService<IAutomationService>();\n                var logger = scope.ServiceProvider.GetRequiredService<ILogger<InboundMessageProcessor>>();\n\n                // ✅ INSERT: resolve profile updater\n                var contactProfileService = scope.ServiceProvider.GetRequiredService<IContactProfileService>();\n\n                string Normalize(string? number) =>\n                    string.IsNullOrWhiteSpace(number)\n                        ? \"\"\n                        : new string(number.Where(char.IsDigit).ToArray());\n\n                // 1) Extract WA metadata and message\n                var msg = value.GetProperty(\"messages\")[0];\n                var rawContactPhone = msg.GetProperty(\"from\").GetString()!;\n                var contactPhone = Normalize(rawContactPhone);\n                var content = msg.GetProperty(\"text\").GetProperty(\"body\").GetString();\n                var rawBusinessNumber = value.GetProperty(\"metadata\").GetProperty(\"display_phone_number\").GetString()!;\n                var cleanIncomingBusiness = Normalize(rawBusinessNumber);\n\n                // 2) Resolve business\n                var candidateBusinesses = await db.Businesses\n                    .Include(b => b.WhatsAppSettings)\n                    .Where(b => b.WhatsAppSettings != null &&\n                                b.WhatsAppSettings.Any(s => s.WhatsAppBusinessNumber != null))\n                    .ToListAsync();\n\n                var business = candidateBusinesses.FirstOrDefault(b =>\n                    b.WhatsAppSettings.Any(s => Normalize(s.WhatsAppBusinessNumber!) == cleanIncomingBusiness));\n\n                if (business == null)\n                {\n                    logger.LogWarning(\"❌ Business not found for WhatsApp number: {Number}\", rawBusinessNumber);\n                    return;\n                }\n\n                var businessId = business.Id;\n\n                // 3) Find or create contact\n                var contact = await contactService.FindOrCreateAsync(businessId, contactPhone);\n                if (contact == null)\n                {\n                    logger.LogWarning(\"❌ Could not resolve contact for phone: {Phone}\", contactPhone);\n                    return;\n                }\n\n                // ✅ INSERT: Extract profile.name (Meta shape) and upsert into Contacts\n                string? TryGetProfileName(JsonElement root)\n                {\n                    // Safe TryGetProperty chain for: contacts[0].profile.name\n                    if (root.TryGetProperty(\"contacts\", out var contactsEl) &&\n                        contactsEl.ValueKind == JsonValueKind.Array &&\n                        contactsEl.GetArrayLength() > 0)\n                    {\n                        var c0 = contactsEl[0];\n                        if (c0.TryGetProperty(\"profile\", out var profileEl) &&\n                            profileEl.ValueKind == JsonValueKind.Object &&\n                            profileEl.TryGetProperty(\"name\", out var nameEl) &&\n                            nameEl.ValueKind == JsonValueKind.String)\n                        {\n                            var n = nameEl.GetString();\n                            return string.IsNullOrWhiteSpace(n) ? null : n!.Trim();\n                        }\n                    }\n                    return null;\n                }\n\n                var profileName = TryGetProfileName(value);\n                if (!string.IsNullOrWhiteSpace(profileName))\n                {\n                    try\n                    {\n                        await contactProfileService.UpsertProfileNameAsync(businessId, contactPhone, profileName!, CancellationToken.None);\n                    }\n                    catch (Exception ex)\n                    {\n                        logger.LogWarning(ex, \"⚠️ Failed to upsert ProfileName for {Phone}\", contactPhone);\n                        // non-fatal; continue processing\n                    }\n                }\n\n                // 4) Check chat mode…\n                var mode = await chatSessionStateService.GetChatModeAsync(businessId, contact.Id);\n                var isAgentMode = mode == \"agent\";\n\n                // 5) Log incoming message\n                var messageLog = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = contact.Id,\n                    RecipientNumber = contactPhone,\n                    MessageContent = content,\n                    Status = \"received\",\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    IsIncoming = true\n                };\n\n                db.MessageLogs.Add(messageLog);\n                await db.SaveChangesAsync();\n\n                await _hub.Clients\n                    .Group($\"business_{businessId}\")\n                    .SendAsync(\"ReceiveInboxMessage\", new\n                    {\n                        contactId = contact.Id,\n                        message = messageLog.MessageContent,\n                        isIncoming = true,\n                        senderId = (Guid?)null,\n                        sentAt = messageLog.CreatedAt\n                    });\n\n                // 6) Try to trigger automation by keyword\n                try\n                {\n                    var triggerKeyword = (content ?? string.Empty).Trim().ToLowerInvariant();\n                    var handled = await automationService.TryRunFlowByKeywordAsync(\n                        businessId,\n                        triggerKeyword,\n                        contact.PhoneNumber,\n                        sourceChannel: \"whatsapp\",\n                        industryTag: \"default\"\n                    );\n\n                    if (!handled)\n                    {\n                        logger.LogInformation(\"🕵️ No automation flow matched keyword: {Keyword}\", triggerKeyword);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    logger.LogError(ex, \"❌ Automation flow execution failed.\");\n                }\n\n                // 7) Sync to inbox only if agent mode\n                if (isAgentMode)\n                {\n                    var inboxService = scope.ServiceProvider.GetRequiredService<IInboxService>();\n                    await inboxService.SaveIncomingMessageAsync(new InboxMessageDto\n                    {\n                        BusinessId = businessId,\n                        ContactId = contact.Id,\n                        RecipientPhone = contact.PhoneNumber,\n                        MessageBody = messageLog.MessageContent,\n                        IsIncoming = true,\n                        Status = messageLog.Status,\n                        SentAt = messageLog.CreatedAt\n                    });\n\n                    logger.LogInformation(\"📥 Message synced to inbox for contact {Phone}\", contactPhone);\n                }\n                else\n                {\n                    logger.LogInformation(\"🚫 Skipping inbox sync: chat mode is not 'agent'\");\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to process inbound WhatsApp chat.\");\n            }\n        }\n        public async Task ProcessInteractiveAsync(JsonElement value, CancellationToken ct = default)\n        {\n            using var scope = _serviceScopeFactory.CreateScope();\n            var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n            var contactProfileService = scope.ServiceProvider.GetRequiredService<IContactProfileService>();\n            var logger = scope.ServiceProvider.GetRequiredService<ILogger<InboundMessageProcessor>>();\n\n            string Normalize(string? number) =>\n                string.IsNullOrWhiteSpace(number) ? \"\" : new string(number.Where(char.IsDigit).ToArray());\n\n            // Extract Meta-shaped fields safely:\n            string? TryGetProfileName(JsonElement root)\n            {\n                if (root.TryGetProperty(\"contacts\", out var contactsEl) &&\n                    contactsEl.ValueKind == JsonValueKind.Array &&\n                    contactsEl.GetArrayLength() > 0)\n                {\n                    var c0 = contactsEl[0];\n                    if (c0.TryGetProperty(\"profile\", out var profileEl) &&\n                        profileEl.ValueKind == JsonValueKind.Object &&\n                        profileEl.TryGetProperty(\"name\", out var nameEl) &&\n                        nameEl.ValueKind == JsonValueKind.String)\n                    {\n                        var n = nameEl.GetString();\n                        return string.IsNullOrWhiteSpace(n) ? null : n!.Trim();\n                    }\n                }\n                return null;\n            }\n\n            // messages[0].from is always present for interactive/button\n            if (!value.TryGetProperty(\"messages\", out var msgs) || msgs.GetArrayLength() == 0)\n                return;\n\n            var msg0 = msgs[0];\n            var fromRaw = msg0.GetProperty(\"from\").GetString() ?? \"\";\n            var fromE164 = Normalize(fromRaw);\n\n            // Resolve Business via metadata.display_phone_number (same as chat path)\n            var displayNumberRaw = value.GetProperty(\"metadata\").GetProperty(\"display_phone_number\").GetString() ?? \"\";\n            var displayNumber = Normalize(displayNumberRaw);\n\n            var business = await db.Businesses\n                .Include(b => b.WhatsAppSettings)\n                .Where(b => b.WhatsAppSettings != null && b.WhatsAppSettings.Any(s => s.WhatsAppBusinessNumber != null))\n                .ToListAsync(ct);\n\n            var biz = business.FirstOrDefault(b => b.WhatsAppSettings!.Any(s => Normalize(s.WhatsAppBusinessNumber!) == displayNumber));\n            if (biz == null)\n            {\n                logger.LogWarning(\"❌ Business not found for interactive webhook number: {Num}\", displayNumberRaw);\n                return;\n            }\n\n            // Upsert profile name if present\n            var profileName = TryGetProfileName(value);\n            if (!string.IsNullOrWhiteSpace(profileName))\n            {\n                try\n                {\n                    await contactProfileService.UpsertProfileNameAsync(biz.Id, fromE164, profileName!, ct);\n                }\n                catch (Exception ex)\n                {\n                    logger.LogWarning(ex, \"⚠️ Failed to upsert ProfileName on interactive webhook for {Phone}\", fromE164);\n                }\n            }\n\n            // … continue your existing interactive handling (routing to next step, etc.)\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/IStatusWebhookProcessor.cs",
      "sha256": "5e4ad8a6b9cfece35403204938588d1ef8db2031afbc328d880acb1ee2231a25",
      "language": "csharp",
      "size": 238,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface IStatusWebhookProcessor\n    {\n        Task ProcessStatusUpdateAsync(JsonElement payload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/ITemplateWebhookProcessor.cs",
      "sha256": "6f04b24d675a88073c59204ed241e4744205e80e8d488dd464550a6105c45b7a",
      "language": "csharp",
      "size": 242,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface ITemplateWebhookProcessor\n    {\n        Task ProcessTemplateUpdateAsync(JsonElement payload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/StatusWebhookProcessor.cs",
      "sha256": "8749f0f8cf17ab2fa69210d1844138a078fe8538d1e8062b0d2014146877dcc1",
      "language": "csharp",
      "size": 11778,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\n// 👇 where your AppDbContext lives\nusing xbytechat.api;\n\nusing xbytechat.api.Features.CampaignTracking.Models;   // CampaignSendLog\nusing xbytechat.api.Features.MessageManagement.DTOs;    // MessageLog\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    /// <summary>\n    /// Legacy status processor (back-compat).\n    /// - Extracts statuses from the payload\n    /// - Resolves CampaignSendLog via IMessageIdResolver when possible\n    /// - Updates CampaignSendLog / MessageLog idempotently\n    /// New provider-aware flow should go through the dispatcher -> WhatsAppWebhookService.\n    /// </summary>\n    public class StatusWebhookProcessor : IStatusWebhookProcessor\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<StatusWebhookProcessor> _logger;\n        private readonly IMessageIdResolver _messageIdResolver;\n\n        public StatusWebhookProcessor(\n            AppDbContext context,\n            ILogger<StatusWebhookProcessor> logger,\n            IMessageIdResolver messageIdResolver)\n        {\n            _context = context;\n            _logger = logger;\n            _messageIdResolver = messageIdResolver;\n        }\n\n        /// <summary>\n        /// Entry point from dispatcher (legacy path).\n        /// Normalizes Meta envelope to a \"value\" object, then processes.\n        /// </summary>\n        public async Task ProcessStatusUpdateAsync(JsonElement payload)\n        {\n            _logger.LogDebug(\"status_webhook_in (legacy) \\n{Payload}\", payload.ToString());\n\n            // 1) Envelope → value\n            if (TryExtractValue(payload, out var value))\n            {\n                await ProcessAsync(value);\n                return;\n            }\n\n            // 2) Already value-like (adapter flattened)\n            if (payload.ValueKind == JsonValueKind.Object &&\n                (payload.TryGetProperty(\"statuses\", out _) || payload.TryGetProperty(\"messages\", out _)))\n            {\n                await ProcessAsync(payload);\n                return;\n            }\n\n            _logger.LogWarning(\"Unrecognized status payload shape (legacy path).\");\n        }\n\n        /// <summary>\n        /// Extract statuses from a Meta-like \"value\" object and update DB.\n        /// </summary>\n        public async Task ProcessAsync(JsonElement value)\n        {\n            if (!value.TryGetProperty(\"statuses\", out var statuses) || statuses.ValueKind != JsonValueKind.Array)\n            {\n                _logger.LogWarning(\"⚠️ 'statuses' array missing in webhook payload (legacy path).\");\n                return;\n            }\n\n            foreach (var status in statuses.EnumerateArray())\n            {\n                if (status.ValueKind != JsonValueKind.Object) continue;\n\n                // message id (WAMID)\n                var messageId = status.TryGetProperty(\"id\", out var idEl) && idEl.ValueKind == JsonValueKind.String\n                    ? idEl.GetString()\n                    : null;\n\n                // status text\n                var statusText = status.TryGetProperty(\"status\", out var stEl) && stEl.ValueKind == JsonValueKind.String\n                    ? stEl.GetString()\n                    : null;\n\n                if (string.IsNullOrWhiteSpace(messageId) || string.IsNullOrWhiteSpace(statusText))\n                {\n                    _logger.LogWarning(\"⚠️ Missing messageId or status in webhook payload (legacy path).\");\n                    continue;\n                }\n\n                // timestamp (string or number)\n                DateTime? eventTime = null;\n                if (status.TryGetProperty(\"timestamp\", out var tsEl))\n                {\n                    if (tsEl.ValueKind == JsonValueKind.String && long.TryParse(tsEl.GetString(), out var epochS))\n                        eventTime = DateTimeOffset.FromUnixTimeSeconds(epochS).UtcDateTime;\n                    else if (tsEl.ValueKind == JsonValueKind.Number && tsEl.TryGetInt64(out var epochN))\n                        eventTime = DateTimeOffset.FromUnixTimeSeconds(epochN).UtcDateTime;\n                }\n\n                _logger.LogDebug(\"🕓 Parsed timestamp: {Time} (raw kind={Kind})\",\n                    eventTime?.ToString(\"o\") ?? \"n/a\", status.TryGetProperty(\"timestamp\", out var tsDbg) ? tsDbg.ValueKind.ToString() : \"n/a\");\n\n                // ✅ First try resolving a CampaignSendLog row via resolver\n                Guid? sendLogId = null;\n                try\n                {\n                    sendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogWarning(ex, \"MessageId resolver failed for {MessageId}\", messageId);\n                }\n\n                if (sendLogId is Guid sid)\n                {\n                    var log = await _context.Set<CampaignSendLog>()\n                                            .FirstOrDefaultAsync(l => l.Id == sid);\n\n                    if (log != null)\n                    {\n                        bool changed = false;\n\n                        var newStatus = MapMetaStatus(statusText);\n                        if (!string.IsNullOrEmpty(newStatus) &&\n                            !string.Equals(log.SendStatus, newStatus, StringComparison.Ordinal))\n                        {\n                            log.SendStatus = newStatus;\n                            changed = true;\n                        }\n\n                        if (statusText == \"sent\" && (log.SentAt == null || log.SentAt == default) && eventTime.HasValue)\n                        {\n                            log.SentAt = eventTime.Value;\n                            changed = true;\n                        }\n                        if (statusText == \"delivered\" && (log.DeliveredAt == null || log.DeliveredAt == default) && eventTime.HasValue)\n                        {\n                            log.DeliveredAt = eventTime.Value;\n                            changed = true;\n                        }\n                        if (statusText == \"read\" && (log.ReadAt == null || log.ReadAt == default) && eventTime.HasValue)\n                        {\n                            log.ReadAt = eventTime.Value;\n                            changed = true;\n                        }\n\n                        if (changed)\n                        {\n                            await _context.SaveChangesAsync();\n                            _logger.LogInformation(\"✅ CampaignSendLog updated (legacy) for MessageId: {MessageId} → {Status}\", messageId, newStatus ?? statusText);\n                        }\n                        else\n                        {\n                            _logger.LogInformation(\"🔁 Duplicate status '{Status}' skipped for MessageId: {MessageId} (legacy)\", statusText, messageId);\n                        }\n\n                        continue; // done with this status item\n                    }\n                }\n\n                // 🔁 Fallback: update MessageLog when there’s no CampaignSendLog\n                var msg = await _context.Set<MessageLog>()\n                                        .FirstOrDefaultAsync(m => m.MessageId == messageId);\n\n                if (msg != null)\n                {\n                    bool changed = false;\n\n                    switch (statusText)\n                    {\n                        case \"sent\":\n                            if (!EqualsIgnoreCase(msg.Status, \"Sent\"))\n                            {\n                                msg.Status = \"Sent\";\n                                changed = true;\n                            }\n                            if ((msg.SentAt == null || msg.SentAt == default) && eventTime.HasValue)\n                            {\n                                msg.SentAt = eventTime.Value;\n                                changed = true;\n                            }\n                            break;\n\n                        case \"delivered\":\n                            // no DeliveredAt column on MessageLog; just progression\n                            if (!EqualsIgnoreCase(msg.Status, \"Read\") &&\n                                !EqualsIgnoreCase(msg.Status, \"Delivered\"))\n                            {\n                                msg.Status = \"Delivered\";\n                                changed = true;\n                            }\n                            if ((msg.SentAt == null || msg.SentAt == default) && eventTime.HasValue)\n                            {\n                                msg.SentAt = eventTime.Value; // ensure SentAt eventually set\n                                changed = true;\n                            }\n                            break;\n\n                        case \"read\":\n                            if (!EqualsIgnoreCase(msg.Status, \"Read\"))\n                            {\n                                msg.Status = \"Read\";\n                                changed = true;\n                            }\n                            if ((msg.SentAt == null || msg.SentAt == default) && eventTime.HasValue)\n                            {\n                                msg.SentAt = eventTime.Value;\n                                changed = true;\n                            }\n                            break;\n\n                        default:\n                            // leave as-is for unknown statuses\n                            break;\n                    }\n\n                    if (changed)\n                    {\n                        await _context.SaveChangesAsync();\n                        _logger.LogInformation(\"ℹ️ MessageLog updated (legacy) for MessageId: {MessageId} → {Status}\", messageId, msg.Status);\n                    }\n                    else\n                    {\n                        _logger.LogInformation(\"🔁 Duplicate status '{Status}' skipped for MessageId: {MessageId} (legacy)\", statusText, messageId);\n                    }\n                }\n                else\n                {\n                    // lower severity; common when a send failed before obtaining a message id\n                    _logger.LogInformation(\"ⓘ No matching CampaignSendLog/MessageLog for MessageId: {MessageId} (legacy)\", messageId);\n                }\n            }\n        }\n\n        // ----------------- helpers -----------------\n\n        private static bool TryExtractValue(JsonElement payload, out JsonElement value)\n        {\n            value = default;\n            if (payload.ValueKind != JsonValueKind.Object) return false;\n            if (!payload.TryGetProperty(\"entry\", out var entry) || entry.ValueKind != JsonValueKind.Array || entry.GetArrayLength() == 0) return false;\n\n            var e0 = entry[0];\n            if (!e0.TryGetProperty(\"changes\", out var changes) || changes.ValueKind != JsonValueKind.Array || changes.GetArrayLength() == 0) return false;\n\n            var c0 = changes[0];\n            if (!c0.TryGetProperty(\"value\", out var v) || v.ValueKind != JsonValueKind.Object) return false;\n\n            value = v;\n            return true;\n        }\n\n        private static string? MapMetaStatus(string? s) =>\n            (s ?? \"\").ToLowerInvariant() switch\n            {\n                \"sent\" => \"Sent\",\n                \"delivered\" => \"Delivered\",\n                \"read\" => \"Read\",\n                \"failed\" => \"Failed\",\n                \"deleted\" => \"Deleted\",\n                _ => null\n            };\n\n        private static bool EqualsIgnoreCase(string? a, string? b) =>\n            string.Equals(a, b, StringComparison.OrdinalIgnoreCase);\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/TemplateWebhookProcessor.cs",
      "sha256": "0dbe7873fcf7b84d3a4fb9d78bda6689d86cbfd4d9fd50ce1d98029aaaef0558",
      "language": "csharp",
      "size": 1391,
      "content": "using System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class TemplateWebhookProcessor : ITemplateWebhookProcessor\n    {\n        private readonly ILogger<TemplateWebhookProcessor> _logger;\n\n        public TemplateWebhookProcessor(ILogger<TemplateWebhookProcessor> logger)\n        {\n            _logger = logger;\n        }\n\n        public async Task ProcessTemplateUpdateAsync(JsonElement payload)\n        {\n            try\n            {\n                var entry = payload.GetProperty(\"entry\")[0];\n                var changes = entry.GetProperty(\"changes\")[0];\n                var value = changes.GetProperty(\"value\");\n\n                var eventType = value.GetProperty(\"event\").GetString();\n                var templateId = value.TryGetProperty(\"message_template_id\", out var idProp)\n                                 ? idProp.GetString() : \"(unknown)\";\n\n                _logger.LogInformation($\"🧾 Template Event Received: {eventType} for ID: {templateId}\");\n\n                // 🧠 You can store in DB or show in admin logs in the future\n\n                await Task.CompletedTask;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to process template webhook update.\");\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Resolvers/IMessageIdResolver.cs",
      "sha256": "a9129664eb60ff771e1f4895a51f74dd7277f7693c9a9638cab9363dc4618baa",
      "language": "csharp",
      "size": 369,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Resolvers\n{\n    public interface IMessageIdResolver\n    {\n        Task<Guid?> ResolveCampaignSendLogIdAsync(string messageId);\n        Task<Guid?> ResolveMessageLogIdAsync(string messageId);\n        Task<Guid?> ResolveBusinessIdByMessageIdAsync(string messageId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Resolvers/MessageIdResolver.cs",
      "sha256": "34280daacb42fd65daf76845f254009aff42867432c235250272bb6fc6676084",
      "language": "csharp",
      "size": 1972,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Resolvers\n{\n    public class MessageIdResolver : IMessageIdResolver\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<MessageIdResolver> _logger;\n\n        public MessageIdResolver(AppDbContext context, ILogger<MessageIdResolver> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task<Guid?> ResolveCampaignSendLogIdAsync(string messageId)\n        {\n            var log = await _context.CampaignSendLogs\n                                .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n            if (log == null)\n            {\n                _logger.LogWarning(\"⚠️ CampaignSendLog not found for MessageId: {MessageId}\", messageId);\n                return null;\n            }\n\n            return log.Id;\n        }\n\n        public async Task<Guid?> ResolveMessageLogIdAsync(string messageId)\n        {\n            var log = await _context.MessageLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n            if (log == null)\n            {\n                _logger.LogWarning(\"⚠️ MessageLog not found for MessageId: {MessageId}\", messageId);\n                return null;\n            }\n\n            return log.Id;\n        }\n\n        public async Task<Guid?> ResolveBusinessIdByMessageIdAsync(string messageId)\n        {\n            var log = await _context.MessageLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n            if (log == null)\n            {\n                _logger.LogWarning(\"⚠️ MessageLog not found for MessageId: {MessageId}\", messageId);\n                return null;\n            }\n\n            return log.BusinessId;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/WebhookQueueService.cs",
      "sha256": "5de062949cd3197e00bf3971292ea36c2014849de597b6cc077673c464a02286",
      "language": "csharp",
      "size": 1054,
      "content": "using System.Text.Json;\nusing System.Threading.Channels;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class WebhookQueueService : IWebhookQueueService\n    {\n        private readonly Channel<JsonElement> _queue;\n\n        public WebhookQueueService()\n        {\n            var options = new BoundedChannelOptions(5000)\n            {\n                FullMode = BoundedChannelFullMode.Wait,\n                SingleReader = true,\n                SingleWriter = false\n            };\n\n            _queue = Channel.CreateBounded<JsonElement>(options);\n        }\n\n        public void Enqueue(JsonElement item)\n        {\n            if (!_queue.Writer.TryWrite(item))\n            {\n                throw new InvalidOperationException(\"⚠️ Webhook queue is full.\");\n            }\n        }\n\n        public async ValueTask<JsonElement> DequeueAsync(CancellationToken cancellationToken)\n        {\n            return await _queue.Reader.ReadAsync(cancellationToken);\n        }\n\n        public int GetQueueLength() => _queue.Reader.Count;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/WhatsAppWebhookDispatcher.cs",
      "sha256": "0499a17e151db24a7c3ab24209208db55a17bef3af451b922d10a722564624f4",
      "language": "csharp",
      "size": 14484,
      "content": "using System;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.Webhooks.Directory;            // ✅ provider directory\nusing xbytechat.api.Features.Webhooks.Pinnacle.Services.Adapters;\nusing xbytechat.api.Features.Webhooks.Services.Processors;\nusing xbytechat_api.Features.Billing.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    /// <summary>\n    /// Central dispatcher for WhatsApp webhook events.\n    /// Routes payloads to the appropriate processor based on payload type.\n    /// </summary>\n    public class WhatsAppWebhookDispatcher : IWhatsAppWebhookDispatcher\n    {\n        private readonly IStatusWebhookProcessor _statusProcessor;           // legacy fallback (keep)\n        private readonly ITemplateWebhookProcessor _templateProcessor;       // template events path (unchanged)\n        private readonly IClickWebhookProcessor _clickProcessor;             // click/journey path (unchanged)\n        private readonly IInboundMessageProcessor _inboundMessageProcessor;  // inbound chat path (unchanged)\n        private readonly IWhatsAppWebhookService _webhookService;            // ✅ for new unified status updater call\n        private readonly IProviderDirectory _directory;                      // ✅ resolve BusinessId from provider hints\n        private readonly ILogger<WhatsAppWebhookDispatcher> _logger;\n        private readonly IPinnacleToMetaAdapter _pinnacleToMetaAdapter;\n        private readonly IBillingIngestService _billingIngest;\n        public WhatsAppWebhookDispatcher(\n            IStatusWebhookProcessor statusProcessor,\n            ITemplateWebhookProcessor templateProcessor,\n            ILogger<WhatsAppWebhookDispatcher> logger,\n            IClickWebhookProcessor clickProcessor,\n            IInboundMessageProcessor inboundMessageProcessor,\n            IWhatsAppWebhookService webhookService,     // ✅ add\n            IProviderDirectory directory,\n            IPinnacleToMetaAdapter pinnacleToMetaAdapter,\n            IBillingIngestService billingIngest\n        // ✅ add\n        )\n        {\n            _statusProcessor = statusProcessor;\n            _templateProcessor = templateProcessor;\n            _logger = logger;\n            _clickProcessor = clickProcessor;\n            _inboundMessageProcessor = inboundMessageProcessor;\n            _webhookService = webhookService;\n            _directory = directory;\n            _pinnacleToMetaAdapter = pinnacleToMetaAdapter;\n            _billingIngest = billingIngest;\n        }\n\n        public async Task DispatchAsync(JsonElement payload)\n        {\n            _logger.LogWarning(\"📦 Dispatcher Raw Payload:\\n{Payload}\", payload.ToString());\n\n            try\n            {\n                // 0) Detect provider & normalize to a Meta-like envelope for downstream processors\n                var provider = DetectProvider(payload); // \"meta\" | \"pinnacle\" | null\n\n                JsonElement envelope = provider == \"pinnacle\"\n                    ? _pinnacleToMetaAdapter.ToMetaEnvelope(payload)\n                    : payload;\n\n                if (!envelope.TryGetProperty(\"entry\", out var entries)) return;\n\n                foreach (var entry in entries.EnumerateArray())\n                {\n                    if (!entry.TryGetProperty(\"changes\", out var changes)) continue;\n\n                    foreach (var change in changes.EnumerateArray())\n                    {\n                        if (!change.TryGetProperty(\"value\", out var value)) continue;\n\n                        // 1) STATUS UPDATES\n                        if (IsStatusPayload(envelope)) // 🔁 use envelope, not raw payload\n                        {\n                            Guid? businessId = null;\n                            try\n                            {\n                                var hints = ExtractNumberHints(envelope, provider); // 🔁 from envelope\n                                businessId = await _directory.ResolveBusinessIdAsync(\n                                    provider: provider,\n                                    phoneNumberId: hints.PhoneNumberId,\n                                    displayPhoneNumber: hints.DisplayPhoneNumber,\n                                    wabaId: hints.WabaId,\n                                    waId: hints.WaId\n                                );\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"ProviderDirectory lookup failed; will fallback to legacy status processor.\");\n                            }\n\n                            if (businessId is Guid bid && !string.IsNullOrWhiteSpace(provider))\n                            {\n                                _logger.LogInformation(\"📦 Routing to Unified Status Updater (provider={Provider}, businessId={BusinessId})\", provider, bid);\n                                // 🔹 NEW: billing ingest (captures pricing/conversation updates that arrive in status webhooks)\n                                var providerCanonical = (provider ?? \"meta\").Equals(\"pinnacle\", StringComparison.OrdinalIgnoreCase)\n                                    ? \"PINNACLE\"\n                                    : \"META_CLOUD\";\n\n                                await _billingIngest.IngestFromWebhookAsync(bid, providerCanonical, envelope.ToString());\n\n\n                                await _webhookService.ProcessStatusUpdateAsync(bid, provider!, envelope); // 🔁 pass envelope\n\n                            }\n                            else\n                            {\n                                _logger.LogWarning(\"⚠️ Status routing fallback → legacy processor (provider={Provider}, businessId={BusinessId})\", provider, businessId);\n                                await _statusProcessor.ProcessStatusUpdateAsync(envelope); // 🔁 pass envelope\n                            }\n                            continue;\n                        }\n\n                        // 2) TEMPLATE EVENTS (unchanged)\n                        if (value.TryGetProperty(\"event\", out var eventType)\n                            && eventType.GetString()?.StartsWith(\"template_\") == true)\n                        {\n                            _logger.LogInformation(\"📦 Routing to Template Processor\");\n                            await _templateProcessor.ProcessTemplateUpdateAsync(envelope); // 🔁 pass envelope\n                            continue;\n                        }\n\n                        // 3) MESSAGES (clicks + inbound)\n                        if (!value.TryGetProperty(\"messages\", out var msgs) || msgs.GetArrayLength() == 0)\n                        {\n                            _logger.LogDebug(\"ℹ️ No 'messages' array present.\");\n                            continue;\n                        }\n\n                        foreach (var m in msgs.EnumerateArray())\n                        {\n                            if (!m.TryGetProperty(\"type\", out var typeProp))\n                            {\n                                _logger.LogDebug(\"ℹ️ Message without 'type' field.\");\n                                continue;\n                            }\n\n                            var type = typeProp.GetString();\n\n                            // (A) Legacy quick-reply button → CLICK\n                            if (type == \"button\")\n                            {\n                                _logger.LogInformation(\"👉 Routing to Click Processor (legacy 'button')\");\n                                await _clickProcessor.ProcessClickAsync(change.GetProperty(\"value\")); // 🔁 from envelope\n                                continue;\n                            }\n\n                            // (B) Interactive (button_reply / list_reply) → CLICK\n                            if (type == \"interactive\" && m.TryGetProperty(\"interactive\", out var interactive))\n                            {\n                                if (interactive.TryGetProperty(\"type\", out var interactiveType) &&\n                                    interactiveType.GetString() == \"button_reply\")\n                                {\n                                    _logger.LogInformation(\"👉 Routing to Click Processor (interactive/button_reply)\");\n                                    await _clickProcessor.ProcessClickAsync(change.GetProperty(\"value\")); // 🔁 from envelope\n                                    continue;\n                                }\n\n                                if (interactive.TryGetProperty(\"list_reply\", out _))\n                                {\n                                    _logger.LogInformation(\"👉 Routing to Click Processor (interactive/list_reply)\");\n                                    await _clickProcessor.ProcessClickAsync(change.GetProperty(\"value\")); // 🔁 from envelope\n                                    continue;\n                                }\n                            }\n\n                            // (C) Inbound plain message types → INBOUND\n                            if (type is \"text\" or \"image\" or \"audio\")\n                            {\n                                _logger.LogInformation(\"💬 Routing to InboundMessageProcessor (type: {Type})\", type);\n                                await _inboundMessageProcessor.ProcessChatAsync(change.GetProperty(\"value\")); // 🔁 from envelope\n                                continue;\n                            }\n\n                            _logger.LogDebug(\"ℹ️ Message type '{Type}' not handled by dispatcher.\", type);\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Dispatcher failed to process WhatsApp webhook.\");\n            }\n        }\n\n        private static bool IsStatusPayload(JsonElement root)\n        {\n            // Try Meta shape first: entry[].changes[].value.statuses\n            if (TryGetMetaValue(root, out var val) && val.Value.TryGetProperty(\"statuses\", out _))\n                return true;\n\n            // Try common Pinnacle shapes: \"status\" or event containing \"status\"\n            if (root.TryGetProperty(\"status\", out _)) return true;\n            if (root.TryGetProperty(\"event\", out var ev) &&\n                (ev.GetString()?.Contains(\"status\", StringComparison.OrdinalIgnoreCase) ?? false))\n                return true;\n\n            return false;\n        }\n\n        private static string? DetectProvider(JsonElement root)\n        {\n            // Heuristics by envelope\n            if (root.TryGetProperty(\"object\", out var obj) && obj.GetString() == \"whatsapp_business_account\")\n                return \"meta\";\n            if (root.TryGetProperty(\"entry\", out _))\n                return \"meta\";\n            if (root.TryGetProperty(\"event\", out _))\n                return \"pinnacle\";\n\n            return null;\n        }\n        private static bool TryGetMetaValue(JsonElement root, out (JsonElement Value, JsonElement? Change, JsonElement? Entry) res)\n        {\n            res = default;\n            if (!root.TryGetProperty(\"entry\", out var entries) || entries.ValueKind != JsonValueKind.Array || entries.GetArrayLength() == 0)\n                return false;\n\n            var entry = entries[0];\n            if (!entry.TryGetProperty(\"changes\", out var changes) || changes.ValueKind != JsonValueKind.Array || changes.GetArrayLength() == 0)\n                return false;\n\n            var change = changes[0];\n            if (!change.TryGetProperty(\"value\", out var value))\n                return false;\n\n            res = (value, change, entry);\n            return true;\n        }\n\n        private static NumberHints ExtractNumberHints(JsonElement root, string? provider)\n        {\n            var hints = new NumberHints();\n\n            if (string.Equals(provider, \"meta\", StringComparison.OrdinalIgnoreCase))\n            {\n                if (TryGetMetaValue(root, out var v))\n                {\n                    if (v.Value.TryGetProperty(\"metadata\", out var md))\n                    {\n                        if (md.TryGetProperty(\"phone_number_id\", out var pnid))\n                            hints.PhoneNumberId = pnid.GetString();\n\n                        if (md.TryGetProperty(\"display_phone_number\", out var disp))\n                            hints.DisplayPhoneNumber = NormalizePhone(disp.GetString());\n                    }\n\n                    if (v.Value.TryGetProperty(\"statuses\", out var statuses) &&\n                        statuses.ValueKind == JsonValueKind.Array && statuses.GetArrayLength() > 0)\n                    {\n                        var s0 = statuses[0];\n                        if (s0.TryGetProperty(\"recipient_id\", out var rid))\n                            hints.WaId = rid.GetString();\n                    }\n                }\n            }\n            else if (string.Equals(provider, \"pinnacle\", StringComparison.OrdinalIgnoreCase))\n            {\n                // Adjust to your Pinnacle adapter payload (post-adaptation).\n                // If you inject phone_number_id when adapting to Meta shape, this will pick it up:\n                if (root.TryGetProperty(\"phone_number_id\", out var pn))\n                    hints.PhoneNumberId = pn.GetString();\n\n                // Fallback to sender number fields:\n                if (root.TryGetProperty(\"from\", out var from))\n                    hints.DisplayPhoneNumber = NormalizePhone(from.GetString());\n                else if (root.TryGetProperty(\"msisdn\", out var msisdn))\n                    hints.DisplayPhoneNumber = NormalizePhone(msisdn.GetString());\n\n                if (root.TryGetProperty(\"wabaId\", out var waba))\n                    hints.WabaId = waba.GetString();\n            }\n\n            return hints;\n        }\n\n        private static string? NormalizePhone(string? v)\n        {\n            if (string.IsNullOrWhiteSpace(v)) return null;\n            var t = v.Trim();\n            var keepPlus = t.StartsWith(\"+\");\n            var digits = new string(t.Where(char.IsDigit).ToArray());\n            return keepPlus ? \"+\" + digits : digits;\n        }\n\n        private struct NumberHints\n        {\n            public string? PhoneNumberId { get; set; }\n            public string? DisplayPhoneNumber { get; set; }\n            public string? WabaId { get; set; }\n            public string? WaId { get; set; }\n        }\n    }\n}\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/WhatsAppWebhookService.cs",
      "sha256": "c3bf201e03458a246ea22f55cefa2c6bd2abc9659838214b01fe321dbb0f854b",
      "language": "csharp",
      "size": 14925,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\n\nusing xbytechat.api;                                      // AppDbContext\nusing xbytechat.api.Features.CampaignTracking.Models;     // CampaignSendLog\nusing xbytechat.api.Features.Webhooks.Status;             // IMessageStatusUpdater, StatusEvent, MessageDeliveryState\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class WhatsAppWebhookService : IWhatsAppWebhookService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<WhatsAppWebhookService> _logger;\n        private readonly IMessageStatusUpdater _updater;\n\n        public WhatsAppWebhookService(\n            AppDbContext context,\n            ILogger<WhatsAppWebhookService> logger,\n            IMessageStatusUpdater updater)\n        {\n            _context = context;\n            _logger = logger;\n            _updater = updater;\n        }\n\n        /// <summary>\n        /// Legacy path: payload only (Meta-like).\n        /// We keep this for back-compat, but we *upgrade* behavior:\n        /// - For each status: find CampaignSendLog by MessageId\n        /// - If found → get BusinessId and delegate to the unified updater\n        /// - If not found → keep legacy log-only update (minimal)\n        /// </summary>\n        public async Task ProcessStatusUpdateAsync(JsonElement payload, CancellationToken ct = default)\n        {\n            _logger.LogInformation(\"📦 Processing Webhook Status (legacy):\\n{Pretty}\",\n                JsonSerializer.Serialize(payload, new JsonSerializerOptions { WriteIndented = true }));\n\n            if (!payload.TryGetProperty(\"entry\", out var entries))\n            {\n                _logger.LogWarning(\"⚠️ Payload missing 'entry' property.\");\n                return;\n            }\n\n            foreach (var entry in entries.EnumerateArray())\n            {\n                if (!entry.TryGetProperty(\"changes\", out var changes)) continue;\n\n                foreach (var change in changes.EnumerateArray())\n                {\n                    if (!change.TryGetProperty(\"value\", out var value)) continue;\n                    if (!value.TryGetProperty(\"statuses\", out var statuses)) continue;\n\n                    foreach (var status in statuses.EnumerateArray())\n                    {\n                        string? messageId = status.TryGetProperty(\"id\", out var idProp) ? idProp.GetString() : null;\n                        string? statusText = status.TryGetProperty(\"status\", out var statusProp) ? statusProp.GetString() : null;\n\n                        // timestamp may be string or number\n                        long ts = 0;\n                        if (status.TryGetProperty(\"timestamp\", out var tsProp))\n                        {\n                            if (tsProp.ValueKind == JsonValueKind.String && long.TryParse(tsProp.GetString(), out var parsedTs))\n                                ts = parsedTs;\n                            else if (tsProp.ValueKind == JsonValueKind.Number)\n                                ts = tsProp.GetInt64();\n                        }\n\n                        if (string.IsNullOrEmpty(messageId) || string.IsNullOrEmpty(statusText))\n                        {\n                            _logger.LogWarning(\"⚠️ Missing messageId or status in webhook payload.\");\n                            continue;\n                        }\n\n                        // Try to locate CampaignSendLog (gives us BusinessId)\n                        var sendLog = await _context.Set<CampaignSendLog>()\n                            .FirstOrDefaultAsync(l => l.MessageId == messageId, ct);\n\n                        if (sendLog != null)\n                        {\n                            var ev = new StatusEvent\n                            {\n                                BusinessId = sendLog.BusinessId,\n                                Provider = \"meta\", // legacy path is Meta-shaped; adjust if you also send Pinnacle here\n                                ProviderMessageId = messageId,\n                                State = MapMetaState(statusText),\n                                OccurredAt = ts > 0 ? DateTimeOffset.FromUnixTimeSeconds(ts) : DateTimeOffset.UtcNow\n                            };\n\n                            await _updater.UpdateAsync(ev, ct);\n                            _logger.LogInformation(\"✅ Unified update applied for MessageId {MessageId} (state={State})\", messageId, statusText);\n                        }\n                        else\n                        {\n                            // Fallback: minimal legacy update to CampaignSendLogs (kept from your original code)\n                            var time = ts > 0 ? DateTimeOffset.FromUnixTimeSeconds(ts).UtcDateTime : (DateTime?)null;\n\n                            var log = await _context.Set<CampaignSendLog>()\n                                .FirstOrDefaultAsync(l => l.MessageId == messageId, ct);\n\n                            if (log == null)\n                            {\n                                _logger.LogWarning(\"⚠️ No matching CampaignSendLog for MessageId: {MessageId}\", messageId);\n                                continue;\n                            }\n\n                            var newStatus = statusText switch\n                            {\n                                \"sent\" => \"Sent\",\n                                \"delivered\" => \"Delivered\",\n                                \"read\" => \"Read\",\n                                _ => null\n                            };\n\n                            bool isUpdated = false;\n\n                            if (!string.IsNullOrEmpty(newStatus) && !string.Equals(log.SendStatus, newStatus, StringComparison.Ordinal))\n                            {\n                                log.SendStatus = newStatus;\n                                isUpdated = true;\n                            }\n\n                            if (statusText == \"delivered\" && log.DeliveredAt == null && time.HasValue)\n                            {\n                                log.DeliveredAt = time.Value;\n                                isUpdated = true;\n                            }\n\n                            if (statusText == \"read\" && log.ReadAt == null && time.HasValue)\n                            {\n                                log.ReadAt = time.Value;\n                                isUpdated = true;\n                            }\n\n                            if (isUpdated)\n                            {\n                                await _context.SaveChangesAsync(ct);\n                                _logger.LogInformation(\"✅ Log updated for MessageId: {MessageId} → {Status}\", messageId, newStatus);\n                            }\n                            else\n                            {\n                                _logger.LogInformation(\"🔁 Duplicate status '{Status}' skipped for MessageId: {MessageId}\", statusText, messageId);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /// <summary>\n        /// New provider-aware overload called by the dispatcher after it resolves BusinessId + Provider.\n        /// Always uses the unified updater.\n        /// </summary>\n        public async Task ProcessStatusUpdateAsync(Guid businessId, string provider, JsonElement payload, CancellationToken ct = default)\n        {\n            provider = (provider ?? \"\").Trim().ToLowerInvariant();\n\n            foreach (var ev in ParseStatusEvents(businessId, provider, payload))\n            {\n                await _updater.UpdateAsync(ev, ct);\n            }\n        }\n\n        // ---------------- Parsers (Meta + Pinnacle) ----------------\n\n        private static IEnumerable<StatusEvent> ParseStatusEvents(Guid businessId, string provider, JsonElement root)\n        {\n            if (provider == \"meta\" || provider == \"meta_cloud\" || provider == \"meta-cloud\")\n            {\n                if (TryGetMetaValue(root, out var v) &&\n                    v.Value.TryGetProperty(\"statuses\", out var statuses) &&\n                    statuses.ValueKind == JsonValueKind.Array)\n                {\n                    foreach (var s in statuses.EnumerateArray())\n                    {\n                        var stateStr = s.TryGetProperty(\"status\", out var st) ? st.GetString() : null;\n                        var state = MapMetaState(stateStr);\n\n                        var tsStr = s.TryGetProperty(\"timestamp\", out var tsv) ? tsv.ToString() : null;\n                        var occurredAt = TryParseUnix(tsStr) ?? DateTimeOffset.UtcNow;\n\n                        var providerMsgId = s.TryGetProperty(\"id\", out var idv) ? idv.GetString() : null;\n                        var waId = s.TryGetProperty(\"recipient_id\", out var rid) ? rid.GetString() : null;\n\n                        string? errorCode = null, errorMsg = null;\n                        if (s.TryGetProperty(\"errors\", out var errs) && errs.ValueKind == JsonValueKind.Array && errs.GetArrayLength() > 0)\n                        {\n                            var e0 = errs[0];\n                            if (e0.TryGetProperty(\"code\", out var cv)) errorCode = cv.ToString();\n                            if (e0.TryGetProperty(\"message\", out var mv)) errorMsg = mv.GetString();\n                        }\n\n                        string? conversationId = null;\n                        if (s.TryGetProperty(\"conversation\", out var conv) && conv.TryGetProperty(\"id\", out var cid))\n                            conversationId = cid.GetString();\n\n                        yield return new StatusEvent\n                        {\n                            BusinessId = businessId,\n                            Provider = \"meta\",\n                            ProviderMessageId = providerMsgId ?? string.Empty,\n                            RecipientWaId = waId,\n                            State = state,\n                            OccurredAt = occurredAt,\n                            ErrorCode = errorCode,\n                            ErrorMessage = errorMsg,\n                            ConversationId = conversationId\n                        };\n                    }\n                }\n                yield break;\n            }\n\n            if (provider == \"pinnacle\")\n            {\n                // Support both object and array shapes\n                if (root.ValueKind == JsonValueKind.Object)\n                {\n                    foreach (var ev in ParsePinnacleObject(businessId, root))\n                        yield return ev;\n                }\n                else if (root.ValueKind == JsonValueKind.Array)\n                {\n                    foreach (var item in root.EnumerateArray())\n                        foreach (var ev in ParsePinnacleObject(businessId, item))\n                            yield return ev;\n                }\n                yield break;\n            }\n        }\n\n        private static IEnumerable<StatusEvent> ParsePinnacleObject(Guid businessId, JsonElement obj)\n        {\n            var providerMsgId = obj.TryGetProperty(\"message_id\", out var mid) ? mid.GetString()\n                              : obj.TryGetProperty(\"id\", out var idv) ? idv.GetString()\n                              : null;\n\n            var waId = obj.TryGetProperty(\"to\", out var to) ? to.GetString()\n                     : obj.TryGetProperty(\"recipient_id\", out var rid) ? rid.GetString()\n                     : null;\n\n            var stateStr = obj.TryGetProperty(\"status\", out var st) ? st.GetString()\n                         : obj.TryGetProperty(\"event\", out var ev) ? ev.GetString()\n                         : null;\n\n            var state = MapPinnacleState(stateStr);\n\n            var tsStr = obj.TryGetProperty(\"timestamp\", out var tsv) ? tsv.ToString() : null;\n            var occurredAt = TryParseUnix(tsStr) ?? DateTimeOffset.UtcNow;\n\n            string? errorCode = null, errorMsg = null;\n            if (obj.TryGetProperty(\"error\", out var err))\n            {\n                if (err.TryGetProperty(\"code\", out var cv)) errorCode = cv.ToString();\n                if (err.TryGetProperty(\"message\", out var mv)) errorMsg = mv.GetString();\n            }\n\n            yield return new StatusEvent\n            {\n                BusinessId = businessId,\n                Provider = \"pinnacle\",\n                ProviderMessageId = providerMsgId ?? string.Empty,\n                RecipientWaId = waId,\n                State = state,\n                OccurredAt = occurredAt,\n                ErrorCode = errorCode,\n                ErrorMessage = errorMsg\n            };\n        }\n\n        // ---------------- helpers ----------------\n\n        private static bool TryGetMetaValue(JsonElement root, out (JsonElement Value, JsonElement? Change, JsonElement? Entry) res)\n        {\n            res = default;\n            if (!root.TryGetProperty(\"entry\", out var entries) || entries.ValueKind != JsonValueKind.Array || entries.GetArrayLength() == 0)\n                return false;\n\n            var entry = entries[0];\n            if (!entry.TryGetProperty(\"changes\", out var changes) || changes.ValueKind != JsonValueKind.Array || changes.GetArrayLength() == 0)\n                return false;\n\n            var change = changes[0];\n            if (!change.TryGetProperty(\"value\", out var value))\n                return false;\n\n            res = (value, change, entry);\n            return true;\n        }\n\n        private static MessageDeliveryState MapMetaState(string? s) =>\n            (s ?? \"\").ToLowerInvariant() switch\n            {\n                \"sent\" => MessageDeliveryState.Sent,\n                \"delivered\" => MessageDeliveryState.Delivered,\n                \"read\" => MessageDeliveryState.Read,\n                \"failed\" => MessageDeliveryState.Failed,\n                \"deleted\" => MessageDeliveryState.Deleted,\n                _ => MessageDeliveryState.Sent\n            };\n\n        private static MessageDeliveryState MapPinnacleState(string? s)\n        {\n            var v = (s ?? \"\").ToLowerInvariant();\n            if (v.Contains(\"deliv\")) return MessageDeliveryState.Delivered;\n            if (v.Contains(\"read\")) return MessageDeliveryState.Read;\n            if (v.Contains(\"fail\") || v.Contains(\"error\")) return MessageDeliveryState.Failed;\n            if (v.Contains(\"sent\") || v.Contains(\"submit\")) return MessageDeliveryState.Sent;\n            if (v.Contains(\"delete\")) return MessageDeliveryState.Deleted;\n            return MessageDeliveryState.Sent;\n        }\n\n        private static DateTimeOffset? TryParseUnix(string? val)\n        {\n            if (string.IsNullOrWhiteSpace(val)) return null;\n            if (long.TryParse(val, out var s)) return DateTimeOffset.FromUnixTimeSeconds(s);\n            return null;\n        }\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Status/IMessageStatusUpdater.cs",
      "sha256": "5dd38c83c682b97d35a29121860d3c8bf856c29c01a465ad32e18730fa62d04e",
      "language": "csharp",
      "size": 1246,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Status\n{\n    public interface IMessageStatusUpdater\n    {\n        Task UpdateAsync(StatusEvent ev, CancellationToken ct = default);\n    }\n\n    public sealed class StatusEvent\n    {\n        public Guid BusinessId { get; init; }\n        public string Provider { get; init; } = \"\";          // \"meta\" | \"pinnacle\"\n\n        // Provider message id (Meta \"id\", Pinnacle equivalent) → maps to MessageId in your DB\n        public string ProviderMessageId { get; init; } = \"\";\n\n        // Optional hints (not required in your current lookups)\n        public Guid? CampaignSendLogId { get; init; }\n        public string? RecipientWaId { get; init; }\n\n        public MessageDeliveryState State { get; init; }     // Sent/Delivered/Read/Failed/Deleted\n        public DateTimeOffset OccurredAt { get; init; }      // from provider timestamp when available\n\n        public string? ErrorCode { get; init; }\n        public string? ErrorMessage { get; init; }\n        public string? ConversationId { get; init; }\n    }\n\n    public enum MessageDeliveryState\n    {\n        Sent,\n        Delivered,\n        Read,\n        Failed,\n        Deleted\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Status/MessageStatusContracts.cs",
      "sha256": "37627bd0faaa1e9e438a5d7379dc5f5773a8f7553fe9e1b476e74ee20a66ce30",
      "language": "csharp",
      "size": 1443,
      "content": "namespace xbytechat.api.Features.Webhooks.Status\n{\n    public class MessageStatusContracts\n    {\n        public enum CanonicalMessageStatus\n        {\n            Unknown = 0,\n            Submitted,   // API accepted (optional)\n            Sent,        // provider accepted / sent\n            Delivered,\n            Read,\n            Failed\n        }\n        public sealed class UpdateMessageStatusRequest\n        {\n            public Guid BusinessId { get; set; }\n            public string Provider { get; set; } = \"\";              // \"meta_cloud\" | \"pinnacle\" | etc.\n            public string MessageId { get; set; } = \"\";             // provider message id (WAMID / id)\n            public string RawStatus { get; set; } = \"\";             // provider-specific (e.g., \"sent\", \"delivered\")\n            public DateTimeOffset? EventTime { get; set; }          // provider timestamp, if any\n\n            public string? RecipientNumber { get; set; }            // optional sanity context\n            public string? ErrorCode { get; set; }                  // optional error info\n            public string? ErrorMessage { get; set; }               // optional error info\n            public string? RawPayloadJson { get; set; }             // optional audit/debug\n        }\n\n        public interface IMessageStatusUpdater\n        {\n            Task<bool> UpdateAsync(UpdateMessageStatusRequest req, CancellationToken ct = default);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Status/MessageStatusUpdater.cs",
      "sha256": "55a15fa6bb101b8375418e125a8a48473612f420aa65d7a7dd20a2c7e174c1eb",
      "language": "csharp",
      "size": 21232,
      "content": "using System;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\n\n// 👇 make sure this is where your AppDbContext lives\nusing xbytechat.api;\n\nusing xbytechat.api.Features.CampaignTracking.Models; // CampaignSendLog\nusing xbytechat.api.Features.CampaignModule.Models;   // Campaign (nav)\nusing xbytechat.api.CRM.Models;                       // Contact (nav)\nusing xbytechat.api.Features.MessageManagement.DTOs;  // MessageLog\n\n// 👇 Billing ingest\nusing xbytechat_api.Features.Billing.Services;        // IBillingIngestService\n\nnamespace xbytechat.api.Features.Webhooks.Status\n{\n    /// <summary>\n    /// Idempotent updater touching CampaignSendLogs and MessageLogs using your actual schema.\n    /// Also forwards raw Meta webhook payloads to Billing ingest for pricing/billing capture.\n    /// </summary>\n    public class MessageStatusUpdater : IMessageStatusUpdater\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<MessageStatusUpdater> _log;\n        private readonly IBillingIngestService _billing;\n\n        public MessageStatusUpdater(AppDbContext db,\n                                    ILogger<MessageStatusUpdater> log,\n                                    IBillingIngestService billing)\n        {\n            _db = db;\n            _log = log;\n            _billing = billing;\n        }\n\n        public async Task UpdateAsync(StatusEvent ev, CancellationToken ct = default)\n        {\n            // 🔎 Guard: we need Business + ProviderMessageId (WAMID) to reconcile reliably\n            if (ev.BusinessId == Guid.Empty || string.IsNullOrWhiteSpace(ev.ProviderMessageId))\n            {\n                _log.LogWarning(\"Status update missing key fields (BusinessId or ProviderMessageId). Skip.\");\n                return;\n            }\n\n            // 1) Pull candidates (scoped to business + WAMID)\n            var sendLogQ = _db.Set<CampaignSendLog>()\n                              .AsTracking()\n                              .Where(s => s.BusinessId == ev.BusinessId && s.MessageId == ev.ProviderMessageId);\n\n            // NOTE: some rows set both MessageId and ProviderMessageId to the wamid; be flexible.\n            var msgLogQ = _db.Set<MessageLog>()\n                             .AsTracking()\n                             .Where(m => m.BusinessId == ev.BusinessId &&\n                                        (m.ProviderMessageId == ev.ProviderMessageId ||\n                                         m.MessageId == ev.ProviderMessageId));\n\n            // If caller passed a specific CampaignSendLogId, narrow further\n            if (ev.CampaignSendLogId is Guid sid)\n                sendLogQ = sendLogQ.Where(s => s.Id == sid);\n\n            var sendLog = await sendLogQ.FirstOrDefaultAsync(ct);\n            var msgLog = await msgLogQ.FirstOrDefaultAsync(ct);\n\n            // 2) Apply transition (idempotent)\n            var changed = ApplyTransition(sendLog, msgLog, ev);\n\n            // 3) Persist only if something actually changed\n            if (changed > 0)\n                await _db.SaveChangesAsync(ct);\n\n            // 4) Always forward Meta status webhook payloads to Billing ingest (for pricing events).\n            await TryForwardToBillingAsync(ev, ct);\n        }\n\n        /// <summary>Returns number of entities modified.</summary>\n        private int ApplyTransition(CampaignSendLog? sendLog, MessageLog? msgLog, StatusEvent ev)\n        {\n            int modified = 0;\n\n            // --- CampaignSendLog updates ---\n            if (sendLog != null)\n            {\n                if (!string.Equals(sendLog.MessageId, ev.ProviderMessageId, StringComparison.Ordinal))\n                {\n                    sendLog.MessageId = ev.ProviderMessageId;\n                    modified++;\n                }\n\n                switch (ev.State)\n                {\n                    case MessageDeliveryState.Sent:\n                        if (!EqualsIgnoreCase(sendLog.SendStatus, \"Sent\"))\n                        {\n                            sendLog.SendStatus = \"Sent\";\n                            modified++;\n                        }\n                        if (sendLog.SentAt == null || sendLog.SentAt == default)\n                            sendLog.SentAt = ev.OccurredAt.UtcDateTime;\n                        break;\n\n                    case MessageDeliveryState.Delivered:\n                        if (!EqualsIgnoreCase(sendLog.SendStatus, \"Read\") &&\n                            !EqualsIgnoreCase(sendLog.SendStatus, \"Delivered\"))\n                        {\n                            sendLog.SendStatus = \"Delivered\";\n                            modified++;\n                        }\n                        if (sendLog.DeliveredAt == null || sendLog.DeliveredAt == default)\n                            sendLog.DeliveredAt = ev.OccurredAt.UtcDateTime;\n                        break;\n\n                    case MessageDeliveryState.Read:\n                        if (!EqualsIgnoreCase(sendLog.SendStatus, \"Read\"))\n                        {\n                            sendLog.SendStatus = \"Read\";\n                            modified++;\n                        }\n                        if (sendLog.ReadAt == null || sendLog.ReadAt == default)\n                            sendLog.ReadAt = ev.OccurredAt.UtcDateTime;\n                        break;\n\n                    case MessageDeliveryState.Failed:\n                        if (!EqualsIgnoreCase(sendLog.SendStatus, \"Failed\"))\n                        {\n                            sendLog.SendStatus = \"Failed\";\n                            modified++;\n                        }\n                        if (sendLog.ErrorMessage != ev.ErrorMessage)\n                        {\n                            sendLog.ErrorMessage = ev.ErrorMessage;\n                            modified++;\n                        }\n                        break;\n\n                    case MessageDeliveryState.Deleted:\n                        if (!EqualsIgnoreCase(sendLog.SendStatus, \"Deleted\"))\n                        {\n                            sendLog.SendStatus = \"Deleted\";\n                            modified++;\n                        }\n                        break;\n                }\n            }\n\n            // --- MessageLog updates ---\n            if (msgLog != null)\n            {\n                if (!string.Equals(msgLog.MessageId, ev.ProviderMessageId, StringComparison.Ordinal))\n                {\n                    msgLog.MessageId = ev.ProviderMessageId;\n                    modified++;\n                }\n\n                switch (ev.State)\n                {\n                    case MessageDeliveryState.Sent:\n                        if (!EqualsIgnoreCase(msgLog.Status, \"Sent\"))\n                        {\n                            msgLog.Status = \"Sent\";\n                            modified++;\n                        }\n                        if (msgLog.SentAt == null || msgLog.SentAt == default)\n                            msgLog.SentAt = ev.OccurredAt.UtcDateTime;\n                        break;\n\n                    case MessageDeliveryState.Delivered:\n                        if (!EqualsIgnoreCase(msgLog.Status, \"Read\") &&\n                            !EqualsIgnoreCase(msgLog.Status, \"Delivered\"))\n                        {\n                            msgLog.Status = \"Delivered\";\n                            modified++;\n                        }\n                        break;\n\n                    case MessageDeliveryState.Read:\n                        if (!EqualsIgnoreCase(msgLog.Status, \"Read\"))\n                        {\n                            msgLog.Status = \"Read\";\n                            modified++;\n                        }\n                        break;\n\n                    case MessageDeliveryState.Failed:\n                        if (!EqualsIgnoreCase(msgLog.Status, \"Failed\"))\n                        {\n                            msgLog.Status = \"Failed\";\n                            modified++;\n                        }\n                        if (msgLog.ErrorMessage != ev.ErrorMessage)\n                        {\n                            msgLog.ErrorMessage = ev.ErrorMessage;\n                            modified++;\n                        }\n                        break;\n\n                    case MessageDeliveryState.Deleted:\n                        if (!EqualsIgnoreCase(msgLog.Status, \"Deleted\"))\n                        {\n                            msgLog.Status = \"Deleted\";\n                            modified++;\n                        }\n                        break;\n                }\n            }\n\n            if (sendLog == null && msgLog == null)\n            {\n                _log.LogWarning(\"No matching rows for BusinessId={BusinessId}, MessageId={MessageId}, State={State}\",\n                    ev.BusinessId, ev.ProviderMessageId, ev.State);\n            }\n\n            return modified;\n        }\n\n        private static bool EqualsIgnoreCase(string? a, string? b) =>\n            string.Equals(a, b, StringComparison.OrdinalIgnoreCase);\n\n        // ---------------- Billing forwarder ----------------\n\n        private async Task TryForwardToBillingAsync(StatusEvent ev, CancellationToken ct)\n        {\n            try\n            {\n                if (ev.BusinessId == Guid.Empty) return;\n\n                // Pull Provider (via reflection to avoid changing your StatusEvent contract)\n                var provider = GetStringProp(ev, \"Provider\")\n                               ?? GetStringProp(ev, \"ChannelProvider\")\n                               ?? GetStringProp(ev, \"SourceProvider\")\n                               ?? GetStringProp(ev, \"ProviderNormalized\");\n\n                // Try to get raw JSON payload from common property names\n                string? rawJson =\n                    GetStringProp(ev, \"RawPayloadJson\") ??\n                    GetStringProp(ev, \"PayloadJson\") ??\n                    TryGetJsonElementText(ev, \"Body\") ??\n                    TryGetJsonElementText(ev, \"RawBody\");\n\n                // If provider missing, use a lightweight sniff (Meta sends \"whatsapp_business_account\")\n                if (string.IsNullOrWhiteSpace(provider) && !string.IsNullOrWhiteSpace(rawJson) &&\n                    rawJson.IndexOf(\"\\\"whatsapp_business_account\\\"\", StringComparison.OrdinalIgnoreCase) >= 0)\n                {\n                    provider = \"META_CLOUD\";\n                }\n\n                // Normalize provider for billing\n                var normalized = NormalizeProvider(provider);\n                if (normalized != \"META_CLOUD\") return; // only forward Meta to billing ingest for now\n\n                if (string.IsNullOrWhiteSpace(rawJson))\n                {\n                    _log.LogDebug(\"Billing forward skipped: no raw payload JSON available on StatusEvent.\");\n                    return;\n                }\n\n                await _billing.IngestFromWebhookAsync(ev.BusinessId, normalized, rawJson);\n            }\n            catch (Exception ex)\n            {\n                _log.LogWarning(ex, \"Billing ingest (status webhook) failed. businessId={BusinessId}\", ev.BusinessId);\n            }\n        }\n\n        private static string NormalizeProvider(string? provider)\n        {\n            if (string.IsNullOrWhiteSpace(provider)) return \"\";\n            var p = provider.Trim();\n            if (p.Equals(\"META_CLOUD\", StringComparison.OrdinalIgnoreCase)) return \"META_CLOUD\";\n            if (p.Equals(\"meta\", StringComparison.OrdinalIgnoreCase)) return \"META_CLOUD\";\n            if (p.Equals(\"meta_cloud\", StringComparison.OrdinalIgnoreCase)) return \"META_CLOUD\";\n            return p; // other providers unchanged\n        }\n\n        private static string? GetStringProp(object obj, string propName)\n        {\n            var pi = obj.GetType().GetProperty(propName, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);\n            if (pi == null) return null;\n            var val = pi.GetValue(obj);\n            return val as string;\n        }\n\n        private static string? TryGetJsonElementText(object obj, string propName)\n        {\n            var pi = obj.GetType().GetProperty(propName, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);\n            if (pi == null) return null;\n            var val = pi.GetValue(obj);\n            if (val is JsonElement je) return je.GetRawText();\n            return null;\n        }\n    }\n}\n\n\n//using System;\n//using System.Linq;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.Logging;\n\n//// 👇 make sure this is where your AppDbContext lives\n//using xbytechat.api;\n\n//using xbytechat.api.Features.CampaignTracking.Models; // CampaignSendLog\n//using xbytechat.api.Features.CampaignModule.Models;   // Campaign (nav)\n//using xbytechat.api.CRM.Models;                       // Contact (nav)\n//using xbytechat.api.Features.MessageManagement.DTOs;  // MessageLog\n\n//namespace xbytechat.api.Features.Webhooks.Status\n//{\n//    /// <summary>\n//    /// Idempotent updater touching CampaignSendLogs and MessageLogs using your actual schema.\n//    /// </summary>\n//    public class MessageStatusUpdater : IMessageStatusUpdater\n//    {\n//        private readonly AppDbContext _db;\n//        private readonly ILogger<MessageStatusUpdater> _log;\n\n//        public MessageStatusUpdater(AppDbContext db, ILogger<MessageStatusUpdater> log)\n//        {\n//            _db = db;\n//            _log = log;\n//        }\n\n//        public async Task UpdateAsync(StatusEvent ev, CancellationToken ct = default)\n//        {\n//            // 🔎 Guard: we need Business + ProviderMessageId (WAMID) to reconcile reliably\n//            if (ev.BusinessId == Guid.Empty || string.IsNullOrWhiteSpace(ev.ProviderMessageId))\n//            {\n//                _log.LogWarning(\"Status update missing key fields (BusinessId or ProviderMessageId). Skip.\");\n//                return;\n//            }\n\n//            // 1) Pull candidates (scoped to business + WAMID)\n//            var sendLogQ = _db.Set<CampaignSendLog>()\n//                              .AsTracking()\n//                              .Where(s => s.BusinessId == ev.BusinessId && s.MessageId == ev.ProviderMessageId);\n\n//            var msgLogQ = _db.Set<MessageLog>()\n//                             .AsTracking()\n//                             .Where(m => m.BusinessId == ev.BusinessId && m.MessageId == ev.ProviderMessageId);\n\n//            // If caller passed a specific CampaignSendLogId, narrow further\n//            if (ev.CampaignSendLogId is Guid sid)\n//                sendLogQ = sendLogQ.Where(s => s.Id == sid);\n\n//            var sendLog = await sendLogQ.FirstOrDefaultAsync(ct);\n//            var msgLog = await msgLogQ.FirstOrDefaultAsync(ct);\n\n//            // 2) Apply transition (idempotent)\n//            var changed = ApplyTransition(sendLog, msgLog, ev);\n\n//            // 3) Persist only if something actually changed\n//            if (changed > 0)\n//                await _db.SaveChangesAsync(ct);\n//        }\n\n//        /// <summary>Returns number of entities modified.</summary>\n//        private int ApplyTransition(CampaignSendLog? sendLog, MessageLog? msgLog, StatusEvent ev)\n//        {\n//            int modified = 0;\n\n//            // --- CampaignSendLog updates ---\n//            if (sendLog != null)\n//            {\n//                if (!string.Equals(sendLog.MessageId, ev.ProviderMessageId, StringComparison.Ordinal))\n//                {\n//                    sendLog.MessageId = ev.ProviderMessageId;\n//                    modified++;\n//                }\n\n//                switch (ev.State)\n//                {\n//                    case MessageDeliveryState.Sent:\n//                        if (!EqualsIgnoreCase(sendLog.SendStatus, \"Sent\"))\n//                        {\n//                            sendLog.SendStatus = \"Sent\";\n//                            modified++;\n//                        }\n//                        if (sendLog.SentAt == null || sendLog.SentAt == default)\n//                            sendLog.SentAt = ev.OccurredAt.UtcDateTime;\n//                        break;\n\n//                    case MessageDeliveryState.Delivered:\n//                        if (!EqualsIgnoreCase(sendLog.SendStatus, \"Read\") &&\n//                            !EqualsIgnoreCase(sendLog.SendStatus, \"Delivered\"))\n//                        {\n//                            sendLog.SendStatus = \"Delivered\";\n//                            modified++;\n//                        }\n//                        if (sendLog.DeliveredAt == null || sendLog.DeliveredAt == default)\n//                            sendLog.DeliveredAt = ev.OccurredAt.UtcDateTime;\n//                        break;\n\n//                    case MessageDeliveryState.Read:\n//                        if (!EqualsIgnoreCase(sendLog.SendStatus, \"Read\"))\n//                        {\n//                            sendLog.SendStatus = \"Read\";\n//                            modified++;\n//                        }\n//                        if (sendLog.ReadAt == null || sendLog.ReadAt == default)\n//                            sendLog.ReadAt = ev.OccurredAt.UtcDateTime;\n//                        break;\n\n//                    case MessageDeliveryState.Failed:\n//                        if (!EqualsIgnoreCase(sendLog.SendStatus, \"Failed\"))\n//                        {\n//                            sendLog.SendStatus = \"Failed\";\n//                            modified++;\n//                        }\n//                        if (sendLog.ErrorMessage != ev.ErrorMessage)\n//                        {\n//                            sendLog.ErrorMessage = ev.ErrorMessage;\n//                            modified++;\n//                        }\n//                        break;\n\n//                    case MessageDeliveryState.Deleted:\n//                        if (!EqualsIgnoreCase(sendLog.SendStatus, \"Deleted\"))\n//                        {\n//                            sendLog.SendStatus = \"Deleted\";\n//                            modified++;\n//                        }\n//                        break;\n//                }\n//            }\n\n//            // --- MessageLog updates ---\n//            if (msgLog != null)\n//            {\n//                if (!string.Equals(msgLog.MessageId, ev.ProviderMessageId, StringComparison.Ordinal))\n//                {\n//                    msgLog.MessageId = ev.ProviderMessageId;\n//                    modified++;\n//                }\n\n//                switch (ev.State)\n//                {\n//                    case MessageDeliveryState.Sent:\n//                        if (!EqualsIgnoreCase(msgLog.Status, \"Sent\"))\n//                        {\n//                            msgLog.Status = \"Sent\";\n//                            modified++;\n//                        }\n//                        if (msgLog.SentAt == null || msgLog.SentAt == default)\n//                            msgLog.SentAt = ev.OccurredAt.UtcDateTime;\n//                        break;\n\n//                    case MessageDeliveryState.Delivered:\n//                        if (!EqualsIgnoreCase(msgLog.Status, \"Read\") &&\n//                            !EqualsIgnoreCase(msgLog.Status, \"Delivered\"))\n//                        {\n//                            msgLog.Status = \"Delivered\";\n//                            modified++;\n//                        }\n//                        break;\n\n//                    case MessageDeliveryState.Read:\n//                        if (!EqualsIgnoreCase(msgLog.Status, \"Read\"))\n//                        {\n//                            msgLog.Status = \"Read\";\n//                            modified++;\n//                        }\n//                        break;\n\n//                    case MessageDeliveryState.Failed:\n//                        if (!EqualsIgnoreCase(msgLog.Status, \"Failed\"))\n//                        {\n//                            msgLog.Status = \"Failed\";\n//                            modified++;\n//                        }\n//                        if (msgLog.ErrorMessage != ev.ErrorMessage)\n//                        {\n//                            msgLog.ErrorMessage = ev.ErrorMessage;\n//                            modified++;\n//                        }\n//                        break;\n\n//                    case MessageDeliveryState.Deleted:\n//                        if (!EqualsIgnoreCase(msgLog.Status, \"Deleted\"))\n//                        {\n//                            msgLog.Status = \"Deleted\";\n//                            modified++;\n//                        }\n//                        break;\n//                }\n//            }\n\n//            if (sendLog == null && msgLog == null)\n//            {\n//                _log.LogWarning(\"No matching rows for BusinessId={BusinessId}, MessageId={MessageId}, State={State}\",\n//                    ev.BusinessId, ev.ProviderMessageId, ev.State);\n//            }\n\n//            return modified;\n//        }\n\n//        private static bool EqualsIgnoreCase(string? a, string? b) =>\n//            string.Equals(a, b, StringComparison.OrdinalIgnoreCase);\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/WhatsAppIntegration/Controllers/WhatsAppTemplateController.cs",
      "sha256": "7cee6e94d95a99b2c7b15eb9567b21bea75fb9efd058d6c2a00fba7585616dc8",
      "language": "csharp",
      "size": 2867,
      "content": "\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing Newtonsoft.Json.Linq;\n\nnamespace xbytechat.api.Features.WhatsAppIntegration.Controllers\n{\n    [ApiController]\n    [Route(\"api/whatsapp\")]\n    public class WhatsAppTemplateController : ControllerBase\n    {\n        private readonly IConfiguration _config;\n\n        public WhatsAppTemplateController(IConfiguration config)\n        {\n            _config = config;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetTemplates()\n        {\n            var wabaId = _config[\"WhatsApp:WABA_ID\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n            var url = $\"https://graph.facebook.com/v22.0/{wabaId}/message_templates\";\n\n            using var client = new HttpClient();\n            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            try\n            {\n                var response = await client.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                    return StatusCode((int)response.StatusCode, new { success = false, error = json });\n\n                var root = JsonConvert.DeserializeObject<JObject>(json);\n                var templatesRaw = root[\"data\"] as JArray;\n\n                if (templatesRaw == null)\n                    return BadRequest(new { success = false, error = \"Meta API did not return data array.\" });\n\n                var templates = new List<object>();\n\n                foreach (var tpl in templatesRaw)\n                {\n                    string name = tpl[\"name\"]?.ToString() ?? \"\";\n                    string language = tpl[\"language\"]?.ToString() ?? \"en_US\";\n\n                    string bodyText = \"\";\n                    var components = tpl[\"components\"] as JArray;\n\n                    if (components != null)\n                    {\n                        foreach (var comp in components)\n                        {\n                            if (comp[\"type\"]?.ToString() == \"BODY\")\n                            {\n                                bodyText = comp[\"text\"]?.ToString() ?? \"\";\n                                break;\n                            }\n                        }\n                    }\n\n                    templates.Add(new\n                    {\n                        name,\n                        language,\n                        body = bodyText\n                    });\n                }\n\n                return Ok(new { success = true, templates });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new { success = false, error = ex.Message });\n            }\n        }\n\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/WhatsAppIntegration/DTOs/WhatsAppTemplateDto.cs",
      "sha256": "66133a62d929f35f6f56d4d6c3c9a872e14788627c9645fa41aa6eee13290993",
      "language": "csharp",
      "size": 111,
      "content": "namespace xbytechat.api.Features.WhatsAppIntegration.DTOs\n{\n    public class WhatsAppTemplateDto\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Controllers/LeadTimelineController.cs",
      "sha256": "2bf2b77897c9f322069f976352984cc8a0a0d25514e1e411e2e2393e3ccba3f0",
      "language": "csharp",
      "size": 2028,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.xbTimelines.DTOs;\n\nnamespace xbytechat.api.Features.xbTimelines.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class LeadTimelineController : ControllerBase\n    {\n        private readonly ILeadTimelineService _timelineService;\n\n        public LeadTimelineController(ILeadTimelineService timelineService)\n        {\n            _timelineService = timelineService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddTimelineEntry([FromBody] LeadTimelineDto dto)\n        {\n            try\n            {\n                if (!ModelState.IsValid)\n                    return BadRequest(ModelState);\n\n                var result = await _timelineService.AddTimelineEntryAsync(dto);\n\n                Log.Information(\"✅ Timeline entry created for ContactId: {ContactId}\", dto.ContactId);\n\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to add timeline entry for ContactId: {ContactId}\", dto.ContactId);\n                throw;\n            }\n        }\n\n        [HttpGet(\"contact/{contactId}\")]\n        public async Task<IActionResult> GetTimeline(Guid contactId)\n        {\n            try\n            {\n                var timeline = await _timelineService.GetTimelineByContactIdAsync(contactId);\n\n                Log.Information(\"📄 Retrieved {Count} entries for ContactId: {ContactId}\", timeline.Count, contactId);\n\n                return Ok(timeline);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to get timeline for ContactId: {ContactId}\", contactId);\n                throw;\n            }\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll()\n        {\n            var timelines = await _timelineService.GetAllTimelinesAsync();\n            return Ok(timelines);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/DTOs/CampaignTimelineLogDto.cs",
      "sha256": "b279e39522b2d36effd77fe29c36653ca83b93c6cc9a1281d1ed6b3e596b96e3",
      "language": "csharp",
      "size": 361,
      "content": "public class CampaignTimelineLogDto\n{\n    public Guid ContactId { get; set; }\n    public Guid BusinessId { get; set; }   // ✅ Needed for timeline insertion\n    public Guid CampaignId { get; set; }\n    public string CampaignName { get; set; } = string.Empty; // ✅ Safe default to avoid null issues\n    public DateTime? Timestamp { get; set; } // optional\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/DTOs/CRMTimelineLogDto.cs",
      "sha256": "e6ce11c00e1130226359d24f7c9da23fe4fc68c6e725c5a449ed10a345378269",
      "language": "csharp",
      "size": 693,
      "content": "using System;\n\nnamespace xbytechat.api.Features.xbTimelines.DTOs\n{\n    public class CRMTimelineLogDto\n    {\n        public Guid ContactId { get; set; }\n        public Guid BusinessId { get; set; }\n        public string EventType { get; set; }  // 🧩 Example: \"NoteAdded\", \"ReminderSet\", \"TagApplied\"\n        public string Description { get; set; }\n        public Guid? ReferenceId { get; set; }  // 🆔 Related NoteId, ReminderId, TagId (optional)\n        public string CreatedBy { get; set; }\n        public string? Category { get; set; } = \"CRM\";  // 📂 Default category: CRM\n        public DateTime? Timestamp { get; set; }  // ⏰ Custom time if needed (else CreatedAt = now)\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/DTOs/LeadTimelineDto.cs",
      "sha256": "b4692f6cebba16abcb7dc7450172517334a4832fce8e02d3c4273da2d001f2c8",
      "language": "csharp",
      "size": 687,
      "content": "using System;\n\nnamespace xbytechat.api.Features.xbTimelines.DTOs\n{\n    public class LeadTimelineDto\n    {\n        public Guid ContactId { get; set; }\n        public string ContactName { get; set; } \n        public string ContactNumber { get; set; } \n        public string EventType { get; set; }\n        public string Description { get; set; }\n        public string? Data { get; set; }\n        public Guid? ReferenceId { get; set; }\n        public bool IsSystemGenerated { get; set; } = false;\n        public string CreatedBy { get; set; }\n        public string? Source { get; set; }\n        public string? Category { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Mappers/LeadTimelineMapper.cs",
      "sha256": "de301765ab3465a422c99453aab98cf7b40ec5177358642af08c2d5ec36ead4a",
      "language": "csharp",
      "size": 1837,
      "content": "using xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Models;\n\nnamespace xbytechat.api.Features.xbTimelines.Mappers\n{\n    public static class LeadTimelineMapper\n    {\n        public static LeadTimelineDto ToDto(Models.LeadTimeline entry)\n        {\n            if (entry == null) return null;\n\n            return new LeadTimelineDto\n            {\n                ContactId = entry.ContactId,\n                ContactName = entry.Contact?.Name,                // ✅ Enriched from navigation\n                ContactNumber = entry.Contact?.PhoneNumber,       // ✅ Enriched from navigation\n                EventType = entry.EventType,\n                Description = entry.Description,\n                Data = entry.Data,\n                ReferenceId = entry.ReferenceId,\n                IsSystemGenerated = entry.IsSystemGenerated,\n                CreatedBy = entry.CreatedBy,\n                Source = entry.Source,\n                Category = entry.Category,\n                // ✅ CreatedAt is intentionally excluded from DTO\n            };\n        }\n\n        // Optional for create/update, include only necessary fields\n        public static Models.LeadTimeline ToModel(LeadTimelineDto dto)\n        {\n            if (dto == null) return null;\n\n            return new Models.LeadTimeline\n            {\n                ContactId = dto.ContactId,\n                EventType = dto.EventType,\n                Description = dto.Description,\n                Data = dto.Data,\n                ReferenceId = dto.ReferenceId,\n                IsSystemGenerated = dto.IsSystemGenerated,\n                CreatedBy = dto.CreatedBy,\n                Source = dto.Source,\n                Category = dto.Category,\n                CreatedAt = DateTime.UtcNow // ✅ Always use UTC when creating\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Models/LeadTimeline.cs",
      "sha256": "deaadfd25e7f565dc0456a66a61612baa9aea7a7dc297feca882d2108906413f",
      "language": "csharp",
      "size": 1195,
      "content": "using xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.Features.xbTimelines.Models\n{\n    public class LeadTimeline\n    {\n        public int Id { get; set; }\n        public Guid ContactId { get; set; }\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; }  // optional\n\n        public Contact Contact { get; set; } // 🆕 Navigation property\n\n        public string EventType { get; set; }\n\n        public string Description { get; set; }\n        public string? Data { get; set; }\n        public Guid? ReferenceId { get; set; }           // ✅ New\n        public bool IsSystemGenerated { get; set; } = false;  // ✅ New\n        public string CreatedBy { get; set; }\n        public string? Source { get; set; }\n        public string? Category { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n        public string? CTAType { get; set; } // e.g., \"BuyNow\", \"PriceCheck\", \"ConfirmReminder\"\n        public string? CTASourceType { get; set; } // e.g., \"catalog\", \"campaign\", \"reminder\"\n        public Guid? CTASourceId { get; set; } // ID of the source object (productId, reminderId)\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Services/ILeadTimelineService.cs",
      "sha256": "4bff375276ef500fcbd0288211c9a8438d983b063537b2995a6fc98a8eba1148",
      "language": "csharp",
      "size": 709,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.xbTimeline.Services\n{\n    public interface ILeadTimelineService\n    {\n        Task<LeadTimeline> AddTimelineEntryAsync(LeadTimelineDto dto);\n        Task<List<LeadTimeline>> GetTimelineByContactIdAsync(Guid contactId);\n        Task<List<LeadTimelineDto>> GetAllTimelinesAsync();\n        Task AddFromCatalogClickAsync(CatalogClickLog log);\n        Task<ResponseResult> LogCampaignSendAsync(CampaignTimelineLogDto dto);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Services/ITimelineService.cs",
      "sha256": "3e8a236b7ce0a2af07bc27014910b7fbd77a83c78e8ceebe38c99bab96d183e4",
      "language": "csharp",
      "size": 448,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.xbTimelines.DTOs;\n\nnamespace xbytechat.api.Features.xbTimelines.Services\n{\n    public interface ITimelineService\n    {\n        // Already existing methods...\n\n        // 🆕 CRM related methods\n        Task<bool> LogNoteAddedAsync(CRMTimelineLogDto dto);\n        Task<bool> LogReminderSetAsync(CRMTimelineLogDto dto);\n        Task<bool> LogTagAppliedAsync(CRMTimelineLogDto dto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Services/LeadTimelineService.cs",
      "sha256": "cf0715e549aeb3e6288ceb6cb82177dea0441d9953e64e6aca44f13ed2a19083",
      "language": "csharp",
      "size": 7579,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.xbTimelines.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.Catalog.Models;\nusing static xbytechat.api.Features.BusinessModule.Models.Business;\nusing System.Text.Json;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.PlanManagement.Models;\n\n\nnamespace xbytechat.api.Features.xbTimeline.Services\n{\n    public class LeadTimelineService : ILeadTimelineService\n    {\n        private readonly AppDbContext _context;\n       \n\n        public LeadTimelineService(AppDbContext context )\n        {\n            _context = context;\n        \n        }\n\n        public async Task<LeadTimeline> AddTimelineEntryAsync(LeadTimelineDto dto)\n        {\n            try\n            {\n                var entry = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    EventType = dto.EventType,\n                    Description = dto.Description,\n                    Data = dto.Data,\n                    ReferenceId = dto.ReferenceId,\n                    IsSystemGenerated = dto.IsSystemGenerated,\n                    CreatedBy = dto.CreatedBy,\n                    Source = dto.Source,\n                    Category = dto.Category,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                _context.LeadTimelines.Add(entry);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Timeline entry added for ContactId: {ContactId}\", dto.ContactId);\n\n                return entry;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Error adding timeline entry for ContactId: {ContactId}\", dto.ContactId);\n                throw; // Let global middleware handle this\n            }\n        }\n\n        public async Task<List<LeadTimeline>> GetTimelineByContactIdAsync(Guid contactId)\n        {\n            try\n            {\n                var results = await _context.LeadTimelines\n                    .Where(x => x.ContactId == contactId)\n                    .OrderByDescending(x => x.CreatedAt)\n                    .ToListAsync();\n\n                Log.Information(\"📄 Fetched {Count} timeline entries for ContactId: {ContactId}\", results.Count, contactId);\n\n                return results;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to fetch timeline for ContactId: {ContactId}\", contactId);\n                throw;\n            }\n        }\n\n        public async Task<List<LeadTimelineDto>> GetAllTimelinesAsync()\n        {\n            try\n            {\n                var entries = await _context.LeadTimelines\n                    .Include(t => t.Contact) // for Contact Name/Phone\n                    .OrderByDescending(e => e.CreatedAt)\n                    .ToListAsync();\n\n                var dtoList = entries.Select(entry => new LeadTimelineDto\n                {\n                    ContactId = entry.ContactId,\n                    EventType = entry.EventType,\n                    Description = entry.Description,\n                    Data = entry.Data,\n                    ReferenceId = entry.ReferenceId,\n                    CreatedAt = entry.CreatedAt,\n                    CreatedBy = entry.CreatedBy,\n                    Source = entry.Source,\n                    Category = entry.Category,\n                    IsSystemGenerated = entry.IsSystemGenerated,\n                    ContactName = entry.Contact?.Name,\n                    ContactNumber = entry.Contact?.PhoneNumber\n                }).ToList();\n\n                Log.Information(\"📄 Loaded {Count} total timeline entries\", dtoList.Count);\n                return dtoList;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to fetch all timeline entries\");\n                throw;\n            }\n        }\n        public async Task AddFromCatalogClickAsync(CatalogClickLog log)\n        {\n            if (log == null)\n            {\n                Log.Warning(\"CatalogClickLog is null. Skipping timeline creation.\");\n                return;\n            }\n\n            try\n            {\n                var business = await _context.Businesses\n                    .AsNoTracking()\n                    .FirstOrDefaultAsync(b => b.Id == log.BusinessId);\n\n                if (business == null)\n                {\n                    Log.Warning(\"Business not found for ID: {BusinessId}. Skipping timeline creation.\", log.BusinessId);\n                    return;\n                }\n\n                // if (business.Plan == PlanType.Advanced)\n                if (business?.BusinessPlanInfo?.Plan == PlanType.Advanced)\n                {\n                    Log.Information(\"Timeline skipped for Basic Plan - BusinessId: {BusinessId}\", business.Id);\n                    return;\n                }\n\n\n                var description = $\"{log.ProductBrowsed} | {log.CTAJourney}\";\n\n                var timelineEntry = new LeadTimeline\n                {\n                    BusinessId = log.BusinessId,\n                    ContactId = log.ContactId ?? Guid.Empty,\n                    EventType = \"CatalogCTA\",\n                    Description = description,\n                    Data = JsonSerializer.Serialize(log),\n                    ReferenceId = null,\n                    CreatedBy = \"system\",\n                    IsSystemGenerated = true,\n                    Source = \"Catalog\",\n                    Category = log.CategoryBrowsed,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                _context.LeadTimelines.Add(timelineEntry);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"📈 Timeline entry created from CatalogClick for UserId: {UserId}\", log.UserId);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Error creating timeline entry from CatalogClick for UserId: {UserId}\", log.UserId);\n                // Safe swallow\n            }\n        }\n\n        public async Task<ResponseResult> LogCampaignSendAsync(CampaignTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"CampaignSend\",\n                    Description = $\"Campaign '{dto.CampaignName}' was sent.\", // ✅ Timeline me readable text\n                    ReferenceId = dto.CampaignId, // ✅ Linking to campaign record\n                    IsSystemGenerated = false,    // ✅ Default (campaign sending is manual action)\n                    CreatedBy = \"system\",         // ✅ Or actual user email if needed later\n                    Source = \"CampaignModule\",    // ✅ Source field for clarity\n                    Category = \"Messaging\",       // ✅ Logical grouping\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow // ✅ Use given Timestamp or fallback to now\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"✅ Campaign send event logged into timeline.\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"❌ Failed to log campaign send event: \" + ex.Message);\n            }\n        }\n\n\n    }\n\n\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Services/TimelineService.cs",
      "sha256": "34982b110dddb7a0afcac7582aa0c8dfc2d85810317956df389aaf17bd1a0a1f",
      "language": "csharp",
      "size": 3341,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Models;\n\nnamespace xbytechat.api.Features.xbTimelines.Services\n{\n    public class TimelineService : ITimelineService\n    {\n        private readonly AppDbContext _context;\n\n        public TimelineService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // 🧩 Log Note Added into Timeline\n        public async Task<bool> LogNoteAddedAsync(CRMTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"NoteAdded\",\n                    Description = dto.Description,\n                    ReferenceId = dto.ReferenceId,\n                    CreatedBy = dto.CreatedBy,\n                    Source = \"CRM\",\n                    Category = dto.Category ?? \"CRM\",\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow,\n                    IsSystemGenerated = false\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n\n        // ⏰ Log Reminder Set into Timeline\n        public async Task<bool> LogReminderSetAsync(CRMTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"ReminderSet\",\n                    Description = dto.Description,\n                    ReferenceId = dto.ReferenceId,\n                    CreatedBy = dto.CreatedBy,\n                    Source = \"CRM\",\n                    Category = dto.Category ?? \"CRM\",\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow,\n                    IsSystemGenerated = false\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n\n        // 🏷️ Log Tag Applied into Timeline\n        public async Task<bool> LogTagAppliedAsync(CRMTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"TagApplied\",\n                    Description = dto.Description,\n                    ReferenceId = dto.ReferenceId,\n                    CreatedBy = dto.CreatedBy,\n                    Source = \"CRM\",\n                    Category = dto.Category ?? \"CRM\",\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow,\n                    IsSystemGenerated = false\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Infrastructure/Flows/FlowClickTokenOptions.cs",
      "sha256": "77072ad81d2853a2fd79e3d9e38138f6adfdf21eea5558d5771531d9dde4eb9d",
      "language": "csharp",
      "size": 421,
      "content": "// 📄 Infrastructure/Flows/FlowClickTokenOptions.cs\nnamespace xbytechat.api.Infrastructure.Flows\n{\n    public class FlowClickTokenOptions\n    {\n        public string Secret { get; set; } = \"\";   // long random string (256-bit recommended)\n        public string BaseUrl { get; set; } = \"\";  // e.g. https://app.yourdomain.com\n        public int TtlHours { get; set; } = 72;    // token lifetime (default 3 days)\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Infrastructure/Flows/FlowClickTokenService.cs",
      "sha256": "a259df299ffe015927cc0dfc8bf0818b0e45222cd93cfb2dfb5879f2658e0dfb",
      "language": "csharp",
      "size": 3570,
      "content": "// 📄 Infrastructure/Flows/FlowClickTokenService.cs\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing System.Text;\nusing Microsoft.Extensions.Options;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace xbytechat.api.Infrastructure.Flows\n{\n    public record FlowClickPayload(\n        Guid biz, Guid fid, int ver, Guid sid, short bi,\n        Guid mlid, string cp, long iat, long exp\n    );\n\n    public interface IFlowClickTokenService\n    {\n        string Create(FlowClickPayload p);\n        FlowClickPayload Validate(string token);\n        string BuildUrl(FlowClickPayload p);\n    }\n\n    public class FlowClickTokenService : IFlowClickTokenService\n    {\n        private readonly FlowClickTokenOptions _opt;\n        private readonly JwtSecurityTokenHandler _handler = new();\n\n        public FlowClickTokenService(IOptions<FlowClickTokenOptions> opt)\n        {\n            _opt = opt.Value;\n        }\n\n        public string Create(FlowClickPayload p)\n        {\n            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_opt.Secret));\n            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n            var claims = new[]\n            {\n                new Claim(\"biz\", p.biz.ToString()),\n                new Claim(\"fid\", p.fid.ToString()),\n                new Claim(\"ver\", p.ver.ToString()),\n                new Claim(\"sid\", p.sid.ToString()),\n                new Claim(\"bi\",  p.bi.ToString()),\n                new Claim(\"mlid\",p.mlid.ToString()),\n                new Claim(\"cp\",  p.cp),\n                new Claim(\"iat\", p.iat.ToString()),\n                new Claim(\"exp\", p.exp.ToString())\n            };\n\n            var token = new JwtSecurityToken(claims: claims, signingCredentials: creds);\n            return _handler.WriteToken(token);\n        }\n\n        public FlowClickPayload Validate(string token)\n        {\n            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_opt.Secret));\n\n            var parameters = new TokenValidationParameters\n            {\n                ValidateIssuer = false,\n                ValidateAudience = false,\n                ValidateLifetime = false, // we’ll check manually\n                ValidateIssuerSigningKey = true,\n                IssuerSigningKey = key\n            };\n\n            _handler.ValidateToken(token, parameters, out var validated);\n            var jwt = (JwtSecurityToken)validated;\n\n            long iat = long.Parse(jwt.Claims.First(c => c.Type == \"iat\").Value);\n            long exp = long.Parse(jwt.Claims.First(c => c.Type == \"exp\").Value);\n            var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n            if (now > exp) throw new SecurityTokenExpiredException(\"Token expired\");\n\n            return new FlowClickPayload(\n                biz: Guid.Parse(jwt.Claims.First(c => c.Type == \"biz\").Value),\n                fid: Guid.Parse(jwt.Claims.First(c => c.Type == \"fid\").Value),\n                ver: int.Parse(jwt.Claims.First(c => c.Type == \"ver\").Value),\n                sid: Guid.Parse(jwt.Claims.First(c => c.Type == \"sid\").Value),\n                bi: short.Parse(jwt.Claims.First(c => c.Type == \"bi\").Value),\n                mlid: Guid.Parse(jwt.Claims.First(c => c.Type == \"mlid\").Value),\n                cp: jwt.Claims.First(c => c.Type == \"cp\").Value,\n                iat: iat,\n                exp: exp\n            );\n        }\n\n        public string BuildUrl(FlowClickPayload p)\n        {\n            var token = Create(p);\n            return $\"{_opt.BaseUrl.TrimEnd('/')}/r/flow/{token}\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/GlobalExceptionMiddleware.cs",
      "sha256": "382502b5d584e52221c27934aadd277ed3ee9bbf11af5d77dc5c7394d36fcd26",
      "language": "csharp",
      "size": 3499,
      "content": "using System.Net;\nusing Serilog;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.AspNetCore.Hosting;\n\npublic class GlobalExceptionMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<GlobalExceptionMiddleware> _logger;\n    private readonly IWebHostEnvironment _env;\n\n    public GlobalExceptionMiddleware(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger, IWebHostEnvironment env)\n    {\n        _next = next;\n        _logger = logger;\n        _env = env;\n    }\n    public class ErrorResponse\n    {\n        public int StatusCode { get; set; }\n        public string? Message { get; set; }\n        public string? StackTrace { get; set; }\n        public string? Path { get; set; }\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            Log.Error(ex, \"❌ An unhandled exception occurred\");\n\n            // 🚩 Prevent double-write/headers-already-sent error!\n            if (context.Response.HasStarted)\n            {\n                _logger.LogError(\"Response has already started, unable to write error response for path: {Path}\", context.Request.Path);\n                return;\n            }\n\n            context.Response.ContentType = \"application/json\";\n            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n\n            var response = new ErrorResponse\n            {\n                StatusCode = context.Response.StatusCode,\n                Message = ex.Message,\n                StackTrace = _env.IsDevelopment() ? ex.StackTrace : null,\n                Path = context.Request.Path\n            };\n            await context.Response.WriteAsJsonAsync(response);\n        }\n    }\n}\n\n\n//using System.Net;\n//using Serilog;\n//using System.Net;\n//using System.Threading.Tasks;\n//using Microsoft.AspNetCore.Http;\n//using Microsoft.Extensions.Logging;\n//using Microsoft.AspNetCore.Hosting;\n\n//public class GlobalExceptionMiddleware\n//{\n//    private readonly RequestDelegate _next;\n//    private readonly ILogger<GlobalExceptionMiddleware> _logger;\n//    private readonly IWebHostEnvironment _env;\n\n//    public GlobalExceptionMiddleware(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger, IWebHostEnvironment env)\n//    {\n//        _next = next;\n//        _logger = logger;\n//        _env = env;\n//    }\n//    public class ErrorResponse\n//    {\n//        public int StatusCode { get; set; }\n//        public string Message { get; set; }\n//        public string? StackTrace { get; set; }\n//        public string Path { get; set; }\n//    }\n\n//    public async Task Invoke(HttpContext context)\n//    {\n//        try\n//        {\n//            await _next(context);\n//        }\n//        catch (Exception ex)\n//        {\n//            Log.Error(ex, \"❌ An unhandled exception occurred\");\n\n//            context.Response.ContentType = \"application/json\";\n//            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n\n//            var response = new ErrorResponse\n//            {\n//                StatusCode = context.Response.StatusCode,\n//                Message = ex.Message,\n//                StackTrace = _env.IsDevelopment() ? ex.StackTrace : null,\n//                Path = context.Request.Path\n//            };\n//            await context.Response.WriteAsJsonAsync(response);\n//        }\n//    }\n\n//}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/JwtErrorHandlingMiddleware.cs",
      "sha256": "d35104606ec5c8b08c106f2499d4962349d1c9c99465f0772fe1a92366cdcfac",
      "language": "csharp",
      "size": 2000,
      "content": "using Microsoft.AspNetCore.Http;\nusing System.Net;\nusing System.Text.Json;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace xbytechat.api.Middlewares\n{\n    public class JwtErrorHandlingMiddleware\n    {\n        private readonly RequestDelegate _next;\n\n        public JwtErrorHandlingMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            try\n            {\n                await _next(context); // Proceed to next middleware\n            }\n            catch (SecurityTokenExpiredException)\n            {\n                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\n                context.Response.ContentType = \"application/json\";\n\n                var response = new\n                {\n                    success = false,\n                    message = \"❌ Token expired. Please login again.\"\n                };\n\n                await context.Response.WriteAsync(JsonSerializer.Serialize(response));\n            }\n            catch (SecurityTokenException ex)\n            {\n                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\n                context.Response.ContentType = \"application/json\";\n\n                var response = new\n                {\n                    success = false,\n                    message = $\"❌ Token invalid: {ex.Message}\"\n                };\n\n                await context.Response.WriteAsync(JsonSerializer.Serialize(response));\n            }\n            catch (Exception)\n            {\n                // Pass unhandled exceptions to global exception middleware\n                throw;\n            }\n        }\n    }\n\n    // Extension method for clean registration\n    public static class JwtErrorHandlingMiddlewareExtensions\n    {\n        public static IApplicationBuilder UseJwtErrorHandling(this IApplicationBuilder builder)\n        {\n            return builder.UseMiddleware<JwtErrorHandlingMiddleware>();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/RequirePermissionAttribute.cs",
      "sha256": "a6d3aaceba78295b73d29b3f7b0c72837f08e7f8cb0004a15f1f77f1066dc3c2",
      "language": "csharp",
      "size": 1156,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.Middleware.Attributes\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequirePermissionAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string _requiredPermission;\n\n        public RequirePermissionAttribute(string requiredPermission)\n        {\n            _requiredPermission = requiredPermission;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var user = context.HttpContext.User;\n\n            if (!user.Identity.IsAuthenticated)\n            {\n                context.Result = new UnauthorizedResult();\n                return;\n            }\n\n            var permissionsClaim = user.Claims.FirstOrDefault(c => c.Type == \"permissions\")?.Value;\n\n            if (permissionsClaim == null || !permissionsClaim.Split(',').Contains(_requiredPermission))\n            {\n                context.Result = new ForbidResult();\n            }\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Middlewares/RequirePlanAttribute.cs",
      "sha256": "3e7d8fc23618708b9d4ae5351012eb53f013b2ab0f579426c3d4c9091ed06251",
      "language": "csharp",
      "size": 887,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\n\nnamespace xbytechat.api.Middlewares\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequirePlanAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string[] _allowedPlans;\n\n        public RequirePlanAttribute(params string[] allowedPlans)\n        {\n            _allowedPlans = allowedPlans;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var plan = context.HttpContext.User.FindFirst(\"plan\")?.Value?.ToLowerInvariant();\n            if (string.IsNullOrEmpty(plan) || !_allowedPlans.Any(p => p.ToLowerInvariant() == plan))\n            {\n                context.Result = new ForbidResult(); // 403 Forbidden\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/RequireRoleAttribute.cs",
      "sha256": "b8ca70695e176a36191713cb6b179e1f5097d9077227a77b8658f86392b98b6b",
      "language": "csharp",
      "size": 852,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\n\nnamespace xbytechat.api.Middlewares\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequireRoleAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string[] _roles;\n\n        public RequireRoleAttribute(params string[] roles)\n        {\n            _roles = roles;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var role = context.HttpContext.User.FindFirst(\"role\")?.Value?.ToLowerInvariant();\n            if (string.IsNullOrEmpty(role) || !_roles.Any(r => r.ToLowerInvariant() == role))\n            {\n                context.Result = new ForbidResult(); // 403 Forbidden\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Migrations/20250928044553_Initial.cs",
      "sha256": "93ea1eeec9c796d73321d4ff56e39be858c86221627b0a9bb454fc9b8e32328c",
      "language": "csharp",
      "size": 131127,
      "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class Initial : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.CreateTable(\n                name: \"AuditLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PerformedByUserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PerformedByUserName = table.Column<string>(type: \"text\", nullable: true),\n                    RoleAtTime = table.Column<string>(type: \"text\", nullable: true),\n                    ActionType = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IPAddress = table.Column<string>(type: \"text\", nullable: true),\n                    UserAgent = table.Column<string>(type: \"text\", nullable: true),\n                    Location = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AuditLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutomationFlows\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: false),\n                    NodesJson = table.Column<string>(type: \"text\", nullable: false),\n                    EdgesJson = table.Column<string>(type: \"text\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutomationFlows\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyFlows\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    NodesJson = table.Column<string>(type: \"text\", nullable: false),\n                    EdgesJson = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IndustryTag = table.Column<string>(type: \"text\", nullable: true),\n                    UseCase = table.Column<string>(type: \"text\", nullable: true),\n                    IsDefaultTemplate = table.Column<bool>(type: \"boolean\", nullable: false),\n                    Keyword = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyFlows\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: false),\n                    TriggerType = table.Column<string>(type: \"text\", nullable: false),\n                    ReplyContent = table.Column<string>(type: \"text\", nullable: false),\n                    FlowName = table.Column<string>(type: \"text\", nullable: true),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    TriggeredAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignClickDailyAgg\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Day = table.Column<DateTime>(type: \"date\", nullable: false),\n                    ButtonIndex = table.Column<int>(type: \"integer\", nullable: false),\n                    Clicks = table.Column<long>(type: \"bigint\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignClickDailyAgg\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignClickLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RunId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignSendLogId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ButtonIndex = table.Column<int>(type: \"integer\", nullable: false),\n                    ButtonTitle = table.Column<string>(type: \"character varying(120)\", maxLength: 120, nullable: false),\n                    ClickType = table.Column<string>(type: \"character varying(16)\", maxLength: 16, nullable: false),\n                    Destination = table.Column<string>(type: \"character varying(2048)\", maxLength: 2048, nullable: false),\n                    Ip = table.Column<string>(type: \"character varying(64)\", maxLength: 64, nullable: false),\n                    UserAgent = table.Column<string>(type: \"character varying(512)\", maxLength: 512, nullable: false),\n                    ClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignClickLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CatalogClickLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ProductId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    UserId = table.Column<string>(type: \"text\", nullable: true),\n                    UserName = table.Column<string>(type: \"text\", nullable: true),\n                    UserPhone = table.Column<string>(type: \"text\", nullable: true),\n                    BotId = table.Column<string>(type: \"text\", nullable: true),\n                    CategoryBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    ProductBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    CTAJourney = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: false),\n                    RefMessageId = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    ClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    CampaignSendLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    FollowUpSent = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LastInteractionType = table.Column<string>(type: \"text\", nullable: true),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    PlanSnapshot = table.Column<string>(type: \"text\", nullable: true),\n                    CtaId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Source = table.Column<string>(type: \"text\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CatalogClickLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"ChatSessionStates\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Mode = table.Column<string>(type: \"text\", nullable: false),\n                    LastUpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_ChatSessionStates\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"ContactReads\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    LastReadAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_ContactReads\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CTADefinitions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonType = table.Column<string>(type: \"text\", nullable: false),\n                    TargetUrl = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CTADefinitions\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CTAFlowConfigs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FlowName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsPublished = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CTAFlowConfigs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FailedWebhookLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    SourceModule = table.Column<string>(type: \"text\", nullable: true),\n                    FailureType = table.Column<string>(type: \"text\", nullable: true),\n                    RawJson = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FailedWebhookLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FeatureAccess\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FeatureName = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    Description = table.Column<string>(type: \"character varying(200)\", maxLength: 200, nullable: false),\n                    IsEnabled = table.Column<bool>(type: \"boolean\", nullable: false),\n                    Notes = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    Group = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    Plan = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FeatureAccess\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FeatureMaster\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FeatureCode = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    DisplayName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    Description = table.Column<string>(type: \"character varying(250)\", maxLength: 250, nullable: false),\n                    Group = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FeatureMaster\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FlowExecutionLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RunId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    StepId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    StepName = table.Column<string>(type: \"text\", nullable: false),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignSendLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    TrackingLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactPhone = table.Column<string>(type: \"text\", nullable: true),\n                    TriggeredByButton = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateName = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateType = table.Column<string>(type: \"text\", nullable: true),\n                    Success = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    RawResponse = table.Column<string>(type: \"text\", nullable: true),\n                    ExecutedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ButtonIndex = table.Column<short>(type: \"smallint\", nullable: true),\n                    RequestId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FlowExecutionLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Notes\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    Content = table.Column<string>(type: \"text\", nullable: false),\n                    Source = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: false),\n                    IsPinned = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsInternal = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    EditedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Notes\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"OutboundCampaignJobs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Status = table.Column<string>(type: \"character varying(32)\", maxLength: 32, nullable: false),\n                    Attempt = table.Column<int>(type: \"integer\", nullable: false),\n                    MaxAttempts = table.Column<int>(type: \"integer\", nullable: false),\n                    NextAttemptAt = table.Column<DateTimeOffset>(type: \"timestamp with time zone\", nullable: false),\n                    LastError = table.Column<string>(type: \"character varying(4000)\", maxLength: 4000, nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_OutboundCampaignJobs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Permissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Code = table.Column<string>(type: \"text\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Group = table.Column<string>(type: \"text\", nullable: true),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Permissions\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"PlanFeatureMatrix\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PlanName = table.Column<string>(type: \"character varying(20)\", maxLength: 20, nullable: false),\n                    FeatureName = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    IsEnabled = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_PlanFeatureMatrix\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Plans\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Code = table.Column<string>(type: \"text\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Plans\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Products\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: false),\n                    Price = table.Column<decimal>(type: \"numeric\", nullable: false),\n                    Currency = table.Column<string>(type: \"text\", nullable: false),\n                    ImageUrl = table.Column<string>(type: \"text\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    TotalClicks = table.Column<int>(type: \"integer\", nullable: false),\n                    LastClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    MostClickedCTA = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Products\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"ProviderBillingEvents\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Provider = table.Column<string>(type: \"text\", nullable: false),\n                    EventType = table.Column<string>(type: \"text\", nullable: false),\n                    ProviderMessageId = table.Column<string>(type: \"text\", nullable: true),\n                    ConversationId = table.Column<string>(type: \"text\", nullable: true),\n                    ConversationCategory = table.Column<string>(type: \"text\", nullable: true),\n                    IsChargeable = table.Column<bool>(type: \"boolean\", nullable: true),\n                    PriceAmount = table.Column<decimal>(type: \"numeric\", nullable: true),\n                    PriceCurrency = table.Column<string>(type: \"text\", nullable: true),\n                    PayloadJson = table.Column<string>(type: \"text\", nullable: false),\n                    OccurredAt = table.Column<DateTimeOffset>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedAt = table.Column<DateTimeOffset>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_ProviderBillingEvents\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"QuickReplies\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    OwnerUserId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Title = table.Column<string>(type: \"character varying(120)\", maxLength: 120, nullable: false),\n                    Body = table.Column<string>(type: \"text\", nullable: false),\n                    TagsCsv = table.Column<string>(type: \"character varying(240)\", maxLength: 240, nullable: true),\n                    Language = table.Column<string>(type: \"character varying(8)\", maxLength: 8, nullable: true),\n                    Scope = table.Column<int>(type: \"integer\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false, defaultValueSql: \"NOW()\"),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    UpdatedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_QuickReplies\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Reminders\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    DueAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    ReminderType = table.Column<string>(type: \"text\", nullable: true),\n                    Priority = table.Column<int>(type: \"integer\", nullable: true),\n                    IsRecurring = table.Column<bool>(type: \"boolean\", nullable: false),\n                    RecurrencePattern = table.Column<string>(type: \"text\", nullable: true),\n                    SendWhatsappNotification = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LinkedCampaign = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    CompletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastCTAType = table.Column<string>(type: \"text\", nullable: true),\n                    LastClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    FollowUpSent = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Reminders\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Roles\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IsSystemDefined = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Roles\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Tags\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    ColorHex = table.Column<string>(type: \"text\", nullable: true),\n                    Category = table.Column<string>(type: \"text\", nullable: true),\n                    Notes = table.Column<string>(type: \"text\", nullable: true),\n                    IsSystemTag = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    LastUsedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Tags\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"UserFeatureAccess\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FeatureName = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    IsEnabled = table.Column<bool>(type: \"boolean\", nullable: false),\n                    Notes = table.Column<string>(type: \"text\", nullable: true),\n                    ModifiedByUserId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_UserFeatureAccess\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"WebhookSettings\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AutoCleanupEnabled = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LastCleanupAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_WebhookSettings\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"WhatsAppTemplates\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Provider = table.Column<string>(type: \"character varying(40)\", maxLength: 40, nullable: false),\n                    ExternalId = table.Column<string>(type: \"character varying(120)\", maxLength: 120, nullable: true),\n                    Name = table.Column<string>(type: \"character varying(160)\", maxLength: 160, nullable: false),\n                    Language = table.Column<string>(type: \"character varying(16)\", maxLength: 16, nullable: false),\n                    Status = table.Column<string>(type: \"character varying(32)\", maxLength: 32, nullable: false),\n                    Category = table.Column<string>(type: \"character varying(40)\", maxLength: 40, nullable: true),\n                    Body = table.Column<string>(type: \"text\", nullable: false),\n                    HasImageHeader = table.Column<bool>(type: \"boolean\", nullable: false),\n                    PlaceholderCount = table.Column<int>(type: \"integer\", nullable: false),\n                    ButtonsJson = table.Column<string>(type: \"text\", nullable: false),\n                    RawJson = table.Column<string>(type: \"text\", nullable: false),\n                    LastSyncedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_WhatsAppTemplates\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyFlowEdges\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    SourceNodeId = table.Column<string>(type: \"text\", nullable: false),\n                    TargetNodeId = table.Column<string>(type: \"text\", nullable: false),\n                    SourceHandle = table.Column<string>(type: \"text\", nullable: true),\n                    TargetHandle = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyFlowEdges\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_AutoReplyFlowEdges_AutoReplyFlows_FlowId\",\n                        column: x => x.FlowId,\n                        principalTable: \"AutoReplyFlows\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyFlowNodes\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    NodeType = table.Column<string>(type: \"text\", nullable: false),\n                    Label = table.Column<string>(type: \"text\", nullable: false),\n                    NodeName = table.Column<string>(type: \"text\", nullable: true),\n                    ConfigJson = table.Column<string>(type: \"text\", nullable: false),\n                    Position_X = table.Column<double>(type: \"double precision\", nullable: false),\n                    Position_Y = table.Column<double>(type: \"double precision\", nullable: false),\n                    Order = table.Column<int>(type: \"integer\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyFlowNodes\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_AutoReplyFlowNodes_AutoReplyFlows_FlowId\",\n                        column: x => x.FlowId,\n                        principalTable: \"AutoReplyFlows\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyRules\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: false),\n                    ReplyMessage = table.Column<string>(type: \"text\", nullable: false),\n                    MediaUrl = table.Column<string>(type: \"text\", nullable: true),\n                    Priority = table.Column<int>(type: \"integer\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    FlowName = table.Column<string>(type: \"text\", nullable: true),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IndustryTag = table.Column<string>(type: \"text\", nullable: true),\n                    SourceChannel = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyRules\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_AutoReplyRules_AutoReplyFlows_FlowId\",\n                        column: x => x.FlowId,\n                        principalTable: \"AutoReplyFlows\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CTAFlowSteps\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CTAFlowConfigId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TriggerButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    TriggerButtonType = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateToSend = table.Column<string>(type: \"text\", nullable: false),\n                    StepOrder = table.Column<int>(type: \"integer\", nullable: false),\n                    RequiredTag = table.Column<string>(type: \"text\", nullable: true),\n                    RequiredSource = table.Column<string>(type: \"text\", nullable: true),\n                    PositionX = table.Column<float>(type: \"real\", nullable: true),\n                    PositionY = table.Column<float>(type: \"real\", nullable: true),\n                    TemplateType = table.Column<string>(type: \"text\", nullable: true),\n                    UseProfileName = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ProfileNameSlot = table.Column<int>(type: \"integer\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CTAFlowSteps\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CTAFlowSteps_CTAFlowConfigs_CTAFlowConfigId\",\n                        column: x => x.CTAFlowConfigId,\n                        principalTable: \"CTAFlowConfigs\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Businesses\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CompanyName = table.Column<string>(type: \"text\", nullable: true),\n                    BusinessName = table.Column<string>(type: \"text\", nullable: false),\n                    BusinessEmail = table.Column<string>(type: \"text\", nullable: false),\n                    RepresentativeName = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedByPartnerId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Phone = table.Column<string>(type: \"text\", nullable: true),\n                    CompanyPhone = table.Column<string>(type: \"text\", nullable: true),\n                    Website = table.Column<string>(type: \"text\", nullable: true),\n                    Address = table.Column<string>(type: \"text\", nullable: true),\n                    Industry = table.Column<string>(type: \"text\", nullable: true),\n                    LogoUrl = table.Column<string>(type: \"text\", nullable: true),\n                    Status = table.Column<int>(type: \"integer\", nullable: false),\n                    Tags = table.Column<string>(type: \"text\", nullable: true),\n                    Source = table.Column<string>(type: \"text\", nullable: true),\n                    Notes = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    IsApproved = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ApprovedBy = table.Column<string>(type: \"text\", nullable: true),\n                    ApprovedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastLoginAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    DeletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeletedBy = table.Column<string>(type: \"text\", nullable: true),\n                    PlanId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Businesses\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Businesses_Plans_PlanId\",\n                        column: x => x.PlanId,\n                        principalTable: \"Plans\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"PlanPermissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PlanId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PermissionId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_PlanPermissions\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_PlanPermissions_Permissions_PermissionId\",\n                        column: x => x.PermissionId,\n                        principalTable: \"Permissions\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_PlanPermissions_Plans_PlanId\",\n                        column: x => x.PlanId,\n                        principalTable: \"Plans\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"RolePermissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RoleId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PermissionId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsRevoked = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_RolePermissions\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_RolePermissions_Permissions_PermissionId\",\n                        column: x => x.PermissionId,\n                        principalTable: \"Permissions\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_RolePermissions_Roles_RoleId\",\n                        column: x => x.RoleId,\n                        principalTable: \"Roles\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FlowButtonLinks\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    NextStepId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ButtonType = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonSubType = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonValue = table.Column<string>(type: \"text\", nullable: false),\n                    CTAFlowStepId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ButtonIndex = table.Column<short>(type: \"smallint\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FlowButtonLinks\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_FlowButtonLinks_CTAFlowSteps_CTAFlowStepId\",\n                        column: x => x.CTAFlowStepId,\n                        principalTable: \"CTAFlowSteps\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"BusinessPlanInfos\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Plan = table.Column<int>(type: \"integer\", nullable: false),\n                    TotalMonthlyQuota = table.Column<int>(type: \"integer\", nullable: false),\n                    RemainingMessages = table.Column<int>(type: \"integer\", nullable: false),\n                    QuotaResetDate = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    WalletBalance = table.Column<decimal>(type: \"numeric\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_BusinessPlanInfos\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_BusinessPlanInfos_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Campaigns\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    SourceCampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    MessageTemplate = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    MessageBody = table.Column<string>(type: \"text\", nullable: true),\n                    FollowUpTemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    CampaignType = table.Column<string>(type: \"text\", nullable: true),\n                    CtaId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CTAFlowConfigId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ScheduledAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    DeletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeletedBy = table.Column<string>(type: \"text\", nullable: true),\n                    ImageUrl = table.Column<string>(type: \"text\", nullable: true),\n                    ImageCaption = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateParameters = table.Column<string>(type: \"text\", nullable: true),\n                    Provider = table.Column<string>(type: \"text\", nullable: true),\n                    PhoneNumberId = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateSchemaSnapshot = table.Column<string>(type: \"jsonb\", nullable: true),\n                    AudienceId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    VideoUrl = table.Column<string>(type: \"text\", nullable: true),\n                    DocumentUrl = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Campaigns\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Campaigns_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_Campaigns_CTADefinitions_CtaId\",\n                        column: x => x.CtaId,\n                        principalTable: \"CTADefinitions\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_Campaigns_CTAFlowConfigs_CTAFlowConfigId\",\n                        column: x => x.CTAFlowConfigId,\n                        principalTable: \"CTAFlowConfigs\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                    table.ForeignKey(\n                        name: \"FK_Campaigns_Campaigns_SourceCampaignId\",\n                        column: x => x.SourceCampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Contacts\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    PhoneNumber = table.Column<string>(type: \"character varying(20)\", maxLength: 20, nullable: false),\n                    Email = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: true),\n                    LeadSource = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: true),\n                    Tags = table.Column<string>(type: \"character varying(200)\", maxLength: 200, nullable: true),\n                    LastContactedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    NextFollowUpAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    Notes = table.Column<string>(type: \"character varying(500)\", maxLength: 500, nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    LastCTAInteraction = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastCTAType = table.Column<string>(type: \"text\", nullable: true),\n                    LastClickedProductId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsAutomationPaused = table.Column<bool>(type: \"boolean\", nullable: false),\n                    AssignedAgentId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsFavorite = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsArchived = table.Column<bool>(type: \"boolean\", nullable: false),\n                    Group = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ProfileName = table.Column<string>(type: \"text\", nullable: true),\n                    ProfileNameUpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Contacts\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Contacts_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Users\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Email = table.Column<string>(type: \"text\", nullable: false),\n                    PasswordHash = table.Column<string>(type: \"text\", nullable: false),\n                    RoleId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    DeletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    RefreshToken = table.Column<string>(type: \"text\", nullable: true),\n                    RefreshTokenExpiry = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Users\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Users_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_Users_Roles_RoleId\",\n                        column: x => x.RoleId,\n                        principalTable: \"Roles\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"WhatsAppSettings\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Provider = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    ApiUrl = table.Column<string>(type: \"character varying(500)\", maxLength: 500, nullable: false),\n                    ApiKey = table.Column<string>(type: \"character varying(1000)\", maxLength: 1000, nullable: false),\n                    WhatsAppBusinessNumber = table.Column<string>(type: \"character varying(20)\", maxLength: 20, nullable: true),\n                    PhoneNumberId = table.Column<string>(type: \"text\", nullable: true),\n                    WabaId = table.Column<string>(type: \"text\", nullable: true),\n                    SenderDisplayName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: true),\n                    WebhookSecret = table.Column<string>(type: \"character varying(200)\", maxLength: 200, nullable: true),\n                    WebhookVerifyToken = table.Column<string>(type: \"character varying(200)\", maxLength: 200, nullable: true),\n                    WebhookCallbackUrl = table.Column<string>(type: \"character varying(1000)\", maxLength: 1000, nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_WhatsAppSettings\", x => x.Id);\n                    table.UniqueConstraint(\"AK_WhatsAppSettings_BusinessId_Provider\", x => new { x.BusinessId, x.Provider });\n                    table.ForeignKey(\n                        name: \"FK_WhatsAppSettings_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignButtons\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    Type = table.Column<string>(type: \"text\", nullable: false),\n                    Value = table.Column<string>(type: \"text\", nullable: false),\n                    Position = table.Column<int>(type: \"integer\", nullable: false),\n                    IsFromTemplate = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignButtons\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignButtons_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignFlowOverrides\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TemplateName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    ButtonText = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    OverrideNextTemplate = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignFlowOverrides\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignFlowOverrides_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignVariableMaps\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Component = table.Column<string>(type: \"character varying(64)\", maxLength: 64, nullable: false),\n                    Index = table.Column<int>(type: \"integer\", nullable: false),\n                    SourceType = table.Column<string>(type: \"character varying(32)\", maxLength: 32, nullable: false),\n                    SourceKey = table.Column<string>(type: \"character varying(128)\", maxLength: 128, nullable: true),\n                    StaticValue = table.Column<string>(type: \"text\", nullable: true),\n                    Expression = table.Column<string>(type: \"text\", nullable: true),\n                    DefaultValue = table.Column<string>(type: \"text\", nullable: true),\n                    IsRequired = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedByUserId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignVariableMaps\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignVariableMaps_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"ContactTags\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TagId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_ContactTags\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_ContactTags_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_ContactTags_Tags_TagId\",\n                        column: x => x.TagId,\n                        principalTable: \"Tags\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"LeadTimelines\",\n                columns: table => new\n                {\n                    Id = table.Column<int>(type: \"integer\", nullable: false)\n                        .Annotation(\"Npgsql:ValueGenerationStrategy\", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    EventType = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: false),\n                    Data = table.Column<string>(type: \"text\", nullable: true),\n                    ReferenceId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsSystemGenerated = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: false),\n                    Source = table.Column<string>(type: \"text\", nullable: true),\n                    Category = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CTAType = table.Column<string>(type: \"text\", nullable: true),\n                    CTASourceType = table.Column<string>(type: \"text\", nullable: true),\n                    CTASourceId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_LeadTimelines\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_LeadTimelines_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_LeadTimelines_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"MessageLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    RunId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RecipientNumber = table.Column<string>(type: \"text\", nullable: false),\n                    MessageContent = table.Column<string>(type: \"text\", nullable: false),\n                    MediaUrl = table.Column<string>(type: \"text\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    RawResponse = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CTAFlowConfigId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CTAFlowStepId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    FlowVersion = table.Column<int>(type: \"integer\", nullable: true),\n                    ButtonBundleJson = table.Column<string>(type: \"text\", nullable: true),\n                    IsIncoming = table.Column<bool>(type: \"boolean\", nullable: false),\n                    RenderedBody = table.Column<string>(type: \"text\", nullable: true),\n                    RefMessageId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Source = table.Column<string>(type: \"text\", nullable: true),\n                    Provider = table.Column<string>(type: \"text\", nullable: true),\n                    ProviderMessageId = table.Column<string>(type: \"text\", nullable: true),\n                    IsChargeable = table.Column<bool>(type: \"boolean\", nullable: true),\n                    ConversationId = table.Column<string>(type: \"text\", nullable: true),\n                    ConversationCategory = table.Column<string>(type: \"text\", nullable: true),\n                    ConversationStartedAt = table.Column<DateTimeOffset>(type: \"timestamp with time zone\", nullable: true),\n                    PriceAmount = table.Column<decimal>(type: \"numeric\", nullable: true),\n                    PriceCurrency = table.Column<string>(type: \"text\", nullable: true),\n                    MessageTime = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true, computedColumnSql: \"COALESCE(\\\"SentAt\\\", \\\"CreatedAt\\\")\", stored: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_MessageLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_MessageLogs_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_MessageLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                    table.ForeignKey(\n                        name: \"FK_MessageLogs_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"MessageStatusLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RecipientNumber = table.Column<string>(type: \"text\", nullable: false),\n                    CustomerProfileName = table.Column<string>(type: \"text\", nullable: true),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    MessageType = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateName = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateCategory = table.Column<string>(type: \"text\", nullable: true),\n                    Channel = table.Column<string>(type: \"text\", nullable: false),\n                    IsSessionOpen = table.Column<bool>(type: \"boolean\", nullable: false),\n                    MetaTimestamp = table.Column<long>(type: \"bigint\", nullable: true),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeliveredAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ReadAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    ErrorCode = table.Column<int>(type: \"integer\", nullable: true),\n                    RawPayload = table.Column<string>(type: \"text\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_MessageStatusLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_MessageStatusLogs_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_MessageStatusLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_MessageStatusLogs_Users_UserId\",\n                        column: x => x.UserId,\n                        principalTable: \"Users\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"UserPermissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PermissionId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    IsGranted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true),\n                    IsRevoked = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_UserPermissions\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_UserPermissions_Permissions_PermissionId\",\n                        column: x => x.PermissionId,\n                        principalTable: \"Permissions\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_UserPermissions_Users_UserId\",\n                        column: x => x.UserId,\n                        principalTable: \"Users\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"WhatsAppPhoneNumbers\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Provider = table.Column<string>(type: \"character varying(50)\", nullable: false),\n                    PhoneNumberId = table.Column<string>(type: \"text\", nullable: false),\n                    WhatsAppBusinessNumber = table.Column<string>(type: \"text\", nullable: false),\n                    SenderDisplayName = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsDefault = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_WhatsAppPhoneNumbers\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_WhatsAppPhoneNumbers_WhatsAppSettings_BusinessId_Provider\",\n                        columns: x => new { x.BusinessId, x.Provider },\n                        principalTable: \"WhatsAppSettings\",\n                        principalColumns: new[] { \"BusinessId\", \"Provider\" },\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AudienceMembers\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AudienceId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    PhoneRaw = table.Column<string>(type: \"character varying(64)\", maxLength: 64, nullable: true),\n                    PhoneE164 = table.Column<string>(type: \"character varying(32)\", maxLength: 32, nullable: true),\n                    Name = table.Column<string>(type: \"character varying(160)\", maxLength: 160, nullable: true),\n                    Email = table.Column<string>(type: \"character varying(256)\", maxLength: 256, nullable: true),\n                    AttributesJson = table.Column<string>(type: \"jsonb\", nullable: true),\n                    IsTransientContact = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    PromotedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    CreatedByUserId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AudienceMembers\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignRecipients\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    BotId = table.Column<string>(type: \"text\", nullable: true),\n                    MessagePreview = table.Column<string>(type: \"text\", nullable: true),\n                    ClickedCTA = table.Column<string>(type: \"text\", nullable: true),\n                    CategoryBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    ProductBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IsAutoTagged = table.Column<bool>(type: \"boolean\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AudienceMemberId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ResolvedParametersJson = table.Column<string>(type: \"jsonb\", nullable: true),\n                    ResolvedButtonUrlsJson = table.Column<string>(type: \"jsonb\", nullable: true),\n                    IdempotencyKey = table.Column<string>(type: \"text\", nullable: true),\n                    MaterializedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignRecipients\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignRecipients_AudienceMembers_AudienceMemberId\",\n                        column: x => x.AudienceMemberId,\n                        principalTable: \"AudienceMembers\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.SetNull);\n                    table.ForeignKey(\n                        name: \"FK_CampaignRecipients_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                    table.ForeignKey(\n                        name: \"FK_CampaignRecipients_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignRecipients_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.SetNull);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignSendLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RunId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    RecipientId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    MessageBody = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    SendStatus = table.Column<string>(type: \"text\", nullable: true),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeliveredAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ReadAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    IpAddress = table.Column<string>(type: \"text\", nullable: true),\n                    DeviceInfo = table.Column<string>(type: \"text\", nullable: true),\n                    MacAddress = table.Column<string>(type: \"text\", nullable: true),\n                    SourceChannel = table.Column<string>(type: \"text\", nullable: true),\n                    DeviceType = table.Column<string>(type: \"text\", nullable: true),\n                    Browser = table.Column<string>(type: \"text\", nullable: true),\n                    Country = table.Column<string>(type: \"text\", nullable: true),\n                    City = table.Column<string>(type: \"text\", nullable: true),\n                    IsClicked = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ClickType = table.Column<string>(type: \"text\", nullable: true),\n                    RetryCount = table.Column<int>(type: \"integer\", nullable: false),\n                    LastRetryAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastRetryStatus = table.Column<string>(type: \"text\", nullable: true),\n                    AllowRetry = table.Column<bool>(type: \"boolean\", nullable: false),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CTAFlowConfigId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CTAFlowStepId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ButtonBundleJson = table.Column<string>(type: \"text\", nullable: true),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignSendLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_CampaignRecipients_RecipientId\",\n                        column: x => x.RecipientId,\n                        principalTable: \"CampaignRecipients\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.SetNull);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_MessageLogs_MessageLogId\",\n                        column: x => x.MessageLogId,\n                        principalTable: \"MessageLogs\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_Users_UserId\",\n                        column: x => x.UserId,\n                        principalTable: \"Users\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"TrackingLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactPhone = table.Column<string>(type: \"text\", nullable: true),\n                    SourceType = table.Column<string>(type: \"text\", nullable: false),\n                    SourceId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignSendLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: true),\n                    CTAType = table.Column<string>(type: \"text\", nullable: true),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ClickedVia = table.Column<string>(type: \"text\", nullable: true),\n                    Referrer = table.Column<string>(type: \"text\", nullable: true),\n                    ClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IPAddress = table.Column<string>(type: \"text\", nullable: true),\n                    DeviceType = table.Column<string>(type: \"text\", nullable: true),\n                    Browser = table.Column<string>(type: \"text\", nullable: true),\n                    Country = table.Column<string>(type: \"text\", nullable: true),\n                    City = table.Column<string>(type: \"text\", nullable: true),\n                    FollowUpSent = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LastInteractionType = table.Column<string>(type: \"text\", nullable: true),\n                    SessionId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ThreadId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    StepId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_TrackingLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_CampaignSendLogs_CampaignSendLogId\",\n                        column: x => x.CampaignSendLogId,\n                        principalTable: \"CampaignSendLogs\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_MessageLogs_MessageLogId\",\n                        column: x => x.MessageLogId,\n                        principalTable: \"MessageLogs\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Audiences\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"character varying(160)\", maxLength: 160, nullable: false),\n                    Description = table.Column<string>(type: \"character varying(512)\", maxLength: 512, nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CsvBatchId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedByUserId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Audiences\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Audiences_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.SetNull);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CsvBatches\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AudienceId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    FileName = table.Column<string>(type: \"character varying(256)\", maxLength: 256, nullable: true),\n                    HeadersJson = table.Column<string>(type: \"jsonb\", nullable: true),\n                    Checksum = table.Column<string>(type: \"character varying(128)\", maxLength: 128, nullable: true),\n                    RowCount = table.Column<int>(type: \"integer\", nullable: false),\n                    SkippedCount = table.Column<int>(type: \"integer\", nullable: false),\n                    Status = table.Column<string>(type: \"character varying(32)\", maxLength: 32, nullable: false),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedByUserId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CsvBatches\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CsvBatches_Audiences_AudienceId\",\n                        column: x => x.AudienceId,\n                        principalTable: \"Audiences\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.SetNull);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CsvRows\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BatchId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RowIndex = table.Column<int>(type: \"integer\", nullable: false),\n                    PhoneRaw = table.Column<string>(type: \"character varying(64)\", maxLength: 64, nullable: true),\n                    PhoneE164 = table.Column<string>(type: \"character varying(32)\", maxLength: 32, nullable: true),\n                    RowJson = table.Column<string>(type: \"jsonb\", nullable: false),\n                    ValidationError = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CsvRows\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CsvRows_CsvBatches_BatchId\",\n                        column: x => x.BatchId,\n                        principalTable: \"CsvBatches\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.InsertData(\n                table: \"Permissions\",\n                columns: new[] { \"Id\", \"Code\", \"CreatedAt\", \"Description\", \"Group\", \"IsActive\", \"Name\" },\n                values: new object[,]\n                {\n                    { new Guid(\"0485154c-dde5-4732-a7aa-a379c77a5b27\"), \"messaging.send.template\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Messaging\", true, \"messaging.send.template\" },\n                    { new Guid(\"0dedac5b-81c8-44c3-8cfe-76c58e29c6db\"), \"automation_trigger_test\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Automation\", true, \"automation_trigger_test\" },\n                    { new Guid(\"205b87c7-b008-4e51-9fea-798c2dc4f9c2\"), \"admin.whatsappsettings.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Admin\", true, \"admin.whatsappsettings.view\" },\n                    { new Guid(\"29461562-ef9c-48c0-a606-482ff57b8f95\"), \"messaging.send\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Messaging\", true, \"messaging.send\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000000\"), \"dashboard.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Dashboard\", true, \"dashboard.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000001\"), \"campaign.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Campaign\", true, \"campaign.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000002\"), \"campaign.create\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Campaign\", true, \"campaign.create\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000003\"), \"campaign.delete\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Campaign\", true, \"campaign.delete\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000004\"), \"product.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Catalog\", true, \"product.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000005\"), \"product.create\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Catalog\", true, \"product.create\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000006\"), \"product.delete\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Catalog\", true, \"product.delete\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000007\"), \"contacts.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"CRM\", true, \"contacts.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000008\"), \"tags.edit\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, null, true, \"tags.edit\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000009\"), \"admin.business.approve\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Admin\", true, \"admin.business.approve\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000010\"), \"admin.logs.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, null, true, \"admin.logs.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000011\"), \"admin.plans.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Admin\", true, \"admin.plans.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000012\"), \"admin.plans.create\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Admin\", true, \"admin.plans.create\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000013\"), \"admin.plans.update\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Admin\", true, \"admin.plans.update\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000014\"), \"admin.plans.delete\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Admin\", true, \"admin.plans.delete\" },\n                    { new Guid(\"636b17f2-1c54-4e26-a8cd-dbf561dcb522\"), \"automation.View.Template.Flow_analytics\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Automation\", true, \"automation.View.Template.Flow_analytics\" },\n                    { new Guid(\"6e4d3a86-7cf9-4ac2-b8a7-ed10c9f0173d\"), \"settings.whatsapp.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Settings\", true, \"Settings - WhatsApp View\" },\n                    { new Guid(\"74828fc0-e358-4cfc-b924-13719a0d9f50\"), \"inbox.menu\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Inbox\", true, \"inbox.menu\" },\n                    { new Guid(\"74c8034f-d9cb-4a17-8578-a9f765bd845c\"), \"messaging.report.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Messaging\", true, \"messaging.report.view\" },\n                    { new Guid(\"7d7cbceb-4ce7-4835-85cd-59562487298d\"), \"automation.View.TemplatePlusFreetext.Flow\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Automation\", true, \"automation.View.TemplatePlusFreetext.Flow\" },\n                    { new Guid(\"821480c6-1464-415e-bba8-066fcb4e7e63\"), \"automation.menu\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Automation\", true, \"automation.menu\" },\n                    { new Guid(\"918a61d0-5ab6-46af-a3d3-41e37b7710f9\"), \"automation.Create.Template.Flow\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Automation\", true, \"automation.Create.Template.Flow\" },\n                    { new Guid(\"93c5d5a7-f8dd-460a-8c7b-e3788440ba3a\"), \"automation.Create.TemplatePlusFreetext.Flow\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Automation\", true, \"automation.Create.TemplatePlusFreetext.Flow\" },\n                    { new Guid(\"974af1f9-3caa-4857-a1a7-48462c389332\"), \"messaging.send.text\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Messaging\", true, \"messaging.send.text\" },\n                    { new Guid(\"98572fe7-d142-475a-b990-f248641809e2\"), \"settings.profile.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Settings\", true, \"settings.profile.view\" },\n                    { new Guid(\"9ae90cfe-3fea-4307-b024-3083c2728148\"), \"automation.View.Template.Flow\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Automation\", true, \"automation.View.Template.Flow\" },\n                    { new Guid(\"ad36cdb7-5221-448b-a6a6-c35c9f88d021\"), \"inbox.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Inbox\", true, \"inbox.view\" },\n                    { new Guid(\"adfa8490-9705-4a36-a86e-d5bff7ddc220\"), \"automation.View.TemplatePlusFreeText.Flow_analytics\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Automation\", true, \"automation.View.TemplatePlusFreeText.Flow_analytics\" },\n                    { new Guid(\"bbc5202a-eac9-40bb-aa78-176c677dbf5b\"), \"messaging.whatsappsettings.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Messaging\", true, \"messaging.whatsappsettings.view\" },\n                    { new Guid(\"c819f1bd-422d-4609-916c-cc185fe44ab0\"), \"messaging.status.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Messaging\", true, \"messaging.status.view\" },\n                    { new Guid(\"eecd0fac-223c-4dba-9fa1-2a6e973d61d1\"), \"messaging.inbox.view\", new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc), null, \"Messaging\", true, \"messaging.inbox.view\" }\n                });\n\n            migrationBuilder.InsertData(\n                table: \"Plans\",\n                columns: new[] { \"Id\", \"Code\", \"CreatedAt\", \"Description\", \"IsActive\", \"Name\" },\n                values: new object[] { new Guid(\"5f9f5de1-a0b2-48ba-b03d-77b27345613f\"), \"basic\", new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc), \"Default free plan\", true, \"Basic\" });\n\n            migrationBuilder.InsertData(\n                table: \"Roles\",\n                columns: new[] { \"Id\", \"CreatedAt\", \"Description\", \"IsActive\", \"IsSystemDefined\", \"Name\" },\n                values: new object[,]\n                {\n                    { new Guid(\"00000000-0000-0000-0000-000000000001\"), new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc), \"Super Admin\", true, false, \"admin\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000002\"), new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc), \"Business Partner\", true, false, \"partner\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000003\"), new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc), \"Reseller Partner\", true, false, \"reseller\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000004\"), new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc), \"Business Owner\", true, false, \"business\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000005\"), new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc), \"Staff\", true, false, \"staff\" }\n                });\n\n            migrationBuilder.InsertData(\n                table: \"Users\",\n                columns: new[] { \"Id\", \"BusinessId\", \"CreatedAt\", \"DeletedAt\", \"Email\", \"IsDeleted\", \"Name\", \"PasswordHash\", \"RefreshToken\", \"RefreshTokenExpiry\", \"RoleId\", \"Status\" },\n                values: new object[] { new Guid(\"62858aa2-3a54-4fd5-8696-c343d9af7634\"), null, new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc), null, \"admin@xbytechat.com\", false, \"Super Admin\", \"JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk=\", null, null, new Guid(\"00000000-0000-0000-0000-000000000001\"), \"active\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"ix_audmember_contact\",\n                table: \"AudienceMembers\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"ux_audmember_audience_phone\",\n                table: \"AudienceMembers\",\n                columns: new[] { \"AudienceId\", \"PhoneE164\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"ix_audiences_biz_deleted\",\n                table: \"Audiences\",\n                columns: new[] { \"BusinessId\", \"IsDeleted\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Audiences_BusinessId_CampaignId\",\n                table: \"Audiences\",\n                columns: new[] { \"BusinessId\", \"CampaignId\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Audiences_BusinessId_CsvBatchId\",\n                table: \"Audiences\",\n                columns: new[] { \"BusinessId\", \"CsvBatchId\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Audiences_CampaignId\",\n                table: \"Audiences\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Audiences_CsvBatchId\",\n                table: \"Audiences\",\n                column: \"CsvBatchId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_AutoReplyFlowEdges_FlowId\",\n                table: \"AutoReplyFlowEdges\",\n                column: \"FlowId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_AutoReplyFlowNodes_FlowId\",\n                table: \"AutoReplyFlowNodes\",\n                column: \"FlowId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_AutoReplyRules_FlowId\",\n                table: \"AutoReplyRules\",\n                column: \"FlowId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Businesses_PlanId\",\n                table: \"Businesses\",\n                column: \"PlanId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_BusinessPlanInfos_BusinessId\",\n                table: \"BusinessPlanInfos\",\n                column: \"BusinessId\",\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignButtons_CampaignId\",\n                table: \"CampaignButtons\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignClickDailyAgg_CampaignId_Day_ButtonIndex\",\n                table: \"CampaignClickDailyAgg\",\n                columns: new[] { \"CampaignId\", \"Day\", \"ButtonIndex\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignClickLogs_CampaignId_ButtonIndex\",\n                table: \"CampaignClickLogs\",\n                columns: new[] { \"CampaignId\", \"ButtonIndex\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignClickLogs_CampaignId_ClickType_ClickedAt\",\n                table: \"CampaignClickLogs\",\n                columns: new[] { \"CampaignId\", \"ClickType\", \"ClickedAt\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignClickLogs_CampaignId_ContactId\",\n                table: \"CampaignClickLogs\",\n                columns: new[] { \"CampaignId\", \"ContactId\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignFlowOverrides_CampaignId\",\n                table: \"CampaignFlowOverrides\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignRecipients_AudienceMemberId\",\n                table: \"CampaignRecipients\",\n                column: \"AudienceMemberId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignRecipients_BusinessId\",\n                table: \"CampaignRecipients\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignRecipients_ContactId\",\n                table: \"CampaignRecipients\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"ix_campaignrecipients_idempotency\",\n                table: \"CampaignRecipients\",\n                column: \"IdempotencyKey\");\n\n            migrationBuilder.CreateIndex(\n                name: \"ix_recipients_campaign_contact\",\n                table: \"CampaignRecipients\",\n                columns: new[] { \"CampaignId\", \"ContactId\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Campaigns_BusinessId\",\n                table: \"Campaigns\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Campaigns_CTAFlowConfigId\",\n                table: \"Campaigns\",\n                column: \"CTAFlowConfigId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Campaigns_CtaId\",\n                table: \"Campaigns\",\n                column: \"CtaId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Campaigns_SourceCampaignId\",\n                table: \"Campaigns\",\n                column: \"SourceCampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_Business_MessageId\",\n                table: \"CampaignSendLogs\",\n                columns: new[] { \"BusinessId\", \"MessageId\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_CampaignId\",\n                table: \"CampaignSendLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_ContactId\",\n                table: \"CampaignSendLogs\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_MessageId\",\n                table: \"CampaignSendLogs\",\n                column: \"MessageId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_MessageLogId\",\n                table: \"CampaignSendLogs\",\n                column: \"MessageLogId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_RecipientId\",\n                table: \"CampaignSendLogs\",\n                column: \"RecipientId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_RunId\",\n                table: \"CampaignSendLogs\",\n                column: \"RunId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_UserId\",\n                table: \"CampaignSendLogs\",\n                column: \"UserId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignVariableMaps_CampaignId\",\n                table: \"CampaignVariableMaps\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_ContactReads_ContactId_UserId\",\n                table: \"ContactReads\",\n                columns: new[] { \"ContactId\", \"UserId\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"ux_contactreads_biz_user_contact\",\n                table: \"ContactReads\",\n                columns: new[] { \"BusinessId\", \"UserId\", \"ContactId\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Contacts_BusinessId_PhoneNumber\",\n                table: \"Contacts\",\n                columns: new[] { \"BusinessId\", \"PhoneNumber\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_ContactTags_ContactId\",\n                table: \"ContactTags\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_ContactTags_TagId\",\n                table: \"ContactTags\",\n                column: \"TagId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"ix_csvbatch_biz_created\",\n                table: \"CsvBatches\",\n                columns: new[] { \"BusinessId\", \"CreatedAt\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"ix_csvbatch_checksum\",\n                table: \"CsvBatches\",\n                column: \"Checksum\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CsvBatches_AudienceId\",\n                table: \"CsvBatches\",\n                column: \"AudienceId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CsvBatches_BusinessId_AudienceId\",\n                table: \"CsvBatches\",\n                columns: new[] { \"BusinessId\", \"AudienceId\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"ix_csvrow_phone\",\n                table: \"CsvRows\",\n                column: \"PhoneE164\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CsvRows_BusinessId_BatchId\",\n                table: \"CsvRows\",\n                columns: new[] { \"BusinessId\", \"BatchId\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"ux_csvrow_batch_rowidx\",\n                table: \"CsvRows\",\n                columns: new[] { \"BatchId\", \"RowIndex\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"ix_ctaflowconfigs_biz_active_name\",\n                table: \"CTAFlowConfigs\",\n                columns: new[] { \"BusinessId\", \"IsActive\", \"FlowName\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CTAFlowConfigs_BusinessId_FlowName_IsActive\",\n                table: \"CTAFlowConfigs\",\n                columns: new[] { \"BusinessId\", \"FlowName\", \"IsActive\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CTAFlowSteps_CTAFlowConfigId\",\n                table: \"CTAFlowSteps\",\n                column: \"CTAFlowConfigId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_FeatureAccess_BusinessId_FeatureName\",\n                table: \"FeatureAccess\",\n                columns: new[] { \"BusinessId\", \"FeatureName\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_FlowButtonLinks_CTAFlowStepId\",\n                table: \"FlowButtonLinks\",\n                column: \"CTAFlowStepId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_LeadTimelines_BusinessId\",\n                table: \"LeadTimelines\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_LeadTimelines_ContactId\",\n                table: \"LeadTimelines\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_Business_MessageId\",\n                table: \"MessageLogs\",\n                columns: new[] { \"BusinessId\", \"MessageId\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_Business_Recipient\",\n                table: \"MessageLogs\",\n                columns: new[] { \"BusinessId\", \"RecipientNumber\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_CampaignId\",\n                table: \"MessageLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_ContactId\",\n                table: \"MessageLogs\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_MessageId\",\n                table: \"MessageLogs\",\n                column: \"MessageId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_RunId\",\n                table: \"MessageLogs\",\n                column: \"RunId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"ix_msglogs_biz_in_contact_msgtime\",\n                table: \"MessageLogs\",\n                columns: new[] { \"BusinessId\", \"IsIncoming\", \"ContactId\", \"MessageTime\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageStatusLogs_BusinessId\",\n                table: \"MessageStatusLogs\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageStatusLogs_CampaignId\",\n                table: \"MessageStatusLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageStatusLogs_UserId\",\n                table: \"MessageStatusLogs\",\n                column: \"UserId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_OutboundCampaignJobs_CampaignId\",\n                table: \"OutboundCampaignJobs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_OutboundCampaignJobs_Status_NextAttemptAt\",\n                table: \"OutboundCampaignJobs\",\n                columns: new[] { \"Status\", \"NextAttemptAt\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_PlanPermissions_PermissionId\",\n                table: \"PlanPermissions\",\n                column: \"PermissionId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_PlanPermissions_PlanId\",\n                table: \"PlanPermissions\",\n                column: \"PlanId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_QuickReplies_BusinessId_OwnerUserId_IsActive\",\n                table: \"QuickReplies\",\n                columns: new[] { \"BusinessId\", \"OwnerUserId\", \"IsActive\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_QuickReplies_BusinessId_Scope_IsActive\",\n                table: \"QuickReplies\",\n                columns: new[] { \"BusinessId\", \"Scope\", \"IsActive\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_QuickReplies_UpdatedAt\",\n                table: \"QuickReplies\",\n                column: \"UpdatedAt\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_RolePermissions_PermissionId\",\n                table: \"RolePermissions\",\n                column: \"PermissionId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_RolePermissions_RoleId\",\n                table: \"RolePermissions\",\n                column: \"RoleId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_CampaignId\",\n                table: \"TrackingLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_CampaignSendLogId\",\n                table: \"TrackingLogs\",\n                column: \"CampaignSendLogId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_ContactId\",\n                table: \"TrackingLogs\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_MessageLogId\",\n                table: \"TrackingLogs\",\n                column: \"MessageLogId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_UserPermissions_PermissionId\",\n                table: \"UserPermissions\",\n                column: \"PermissionId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_UserPermissions_UserId\",\n                table: \"UserPermissions\",\n                column: \"UserId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Users_BusinessId\",\n                table: \"Users\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Users_RoleId\",\n                table: \"Users\",\n                column: \"RoleId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"UX_WhatsappPhoneNumbers_Bus_Prov_PhoneId\",\n                table: \"WhatsAppPhoneNumbers\",\n                columns: new[] { \"BusinessId\", \"Provider\", \"PhoneNumberId\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_WhatsAppSettings_Business_Provider_IsActive\",\n                table: \"WhatsAppSettings\",\n                columns: new[] { \"BusinessId\", \"Provider\", \"IsActive\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_WhatsAppSettings_Provider_BusinessNumber\",\n                table: \"WhatsAppSettings\",\n                columns: new[] { \"Provider\", \"WhatsAppBusinessNumber\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_WhatsAppSettings_Provider_CallbackUrl\",\n                table: \"WhatsAppSettings\",\n                columns: new[] { \"Provider\", \"WebhookCallbackUrl\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_WhatsAppSettings_Provider_PhoneNumberId\",\n                table: \"WhatsAppSettings\",\n                columns: new[] { \"Provider\", \"PhoneNumberId\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_WhatsAppSettings_Provider_WabaId\",\n                table: \"WhatsAppSettings\",\n                columns: new[] { \"Provider\", \"WabaId\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_WhatsAppTemplates_BusinessId_Name\",\n                table: \"WhatsAppTemplates\",\n                columns: new[] { \"BusinessId\", \"Name\" });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_WhatsAppTemplates_BusinessId_Name_Language_Provider\",\n                table: \"WhatsAppTemplates\",\n                columns: new[] { \"BusinessId\", \"Name\", \"Language\", \"Provider\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_WhatsAppTemplates_BusinessId_Provider\",\n                table: \"WhatsAppTemplates\",\n                columns: new[] { \"BusinessId\", \"Provider\" });\n\n            migrationBuilder.AddForeignKey(\n                name: \"FK_AudienceMembers_Audiences_AudienceId\",\n                table: \"AudienceMembers\",\n                column: \"AudienceId\",\n                principalTable: \"Audiences\",\n                principalColumn: \"Id\",\n                onDelete: ReferentialAction.Cascade);\n\n            migrationBuilder.AddForeignKey(\n                name: \"FK_Audiences_CsvBatches_CsvBatchId\",\n                table: \"Audiences\",\n                column: \"CsvBatchId\",\n                principalTable: \"CsvBatches\",\n                principalColumn: \"Id\",\n                onDelete: ReferentialAction.SetNull);\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropForeignKey(\n                name: \"FK_CsvBatches_Audiences_AudienceId\",\n                table: \"CsvBatches\");\n\n            migrationBuilder.DropTable(\n                name: \"AuditLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"AutomationFlows\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyFlowEdges\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyFlowNodes\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyRules\");\n\n            migrationBuilder.DropTable(\n                name: \"BusinessPlanInfos\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignButtons\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignClickDailyAgg\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignClickLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignFlowOverrides\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignVariableMaps\");\n\n            migrationBuilder.DropTable(\n                name: \"CatalogClickLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"ChatSessionStates\");\n\n            migrationBuilder.DropTable(\n                name: \"ContactReads\");\n\n            migrationBuilder.DropTable(\n                name: \"ContactTags\");\n\n            migrationBuilder.DropTable(\n                name: \"CsvRows\");\n\n            migrationBuilder.DropTable(\n                name: \"FailedWebhookLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"FeatureAccess\");\n\n            migrationBuilder.DropTable(\n                name: \"FeatureMaster\");\n\n            migrationBuilder.DropTable(\n                name: \"FlowButtonLinks\");\n\n            migrationBuilder.DropTable(\n                name: \"FlowExecutionLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"LeadTimelines\");\n\n            migrationBuilder.DropTable(\n                name: \"MessageStatusLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"Notes\");\n\n            migrationBuilder.DropTable(\n                name: \"OutboundCampaignJobs\");\n\n            migrationBuilder.DropTable(\n                name: \"PlanFeatureMatrix\");\n\n            migrationBuilder.DropTable(\n                name: \"PlanPermissions\");\n\n            migrationBuilder.DropTable(\n                name: \"Products\");\n\n            migrationBuilder.DropTable(\n                name: \"ProviderBillingEvents\");\n\n            migrationBuilder.DropTable(\n                name: \"QuickReplies\");\n\n            migrationBuilder.DropTable(\n                name: \"Reminders\");\n\n            migrationBuilder.DropTable(\n                name: \"RolePermissions\");\n\n            migrationBuilder.DropTable(\n                name: \"TrackingLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"UserFeatureAccess\");\n\n            migrationBuilder.DropTable(\n                name: \"UserPermissions\");\n\n            migrationBuilder.DropTable(\n                name: \"WebhookSettings\");\n\n            migrationBuilder.DropTable(\n                name: \"WhatsAppPhoneNumbers\");\n\n            migrationBuilder.DropTable(\n                name: \"WhatsAppTemplates\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyFlows\");\n\n            migrationBuilder.DropTable(\n                name: \"Tags\");\n\n            migrationBuilder.DropTable(\n                name: \"CTAFlowSteps\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignSendLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"Permissions\");\n\n            migrationBuilder.DropTable(\n                name: \"WhatsAppSettings\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignRecipients\");\n\n            migrationBuilder.DropTable(\n                name: \"MessageLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"Users\");\n\n            migrationBuilder.DropTable(\n                name: \"AudienceMembers\");\n\n            migrationBuilder.DropTable(\n                name: \"Contacts\");\n\n            migrationBuilder.DropTable(\n                name: \"Roles\");\n\n            migrationBuilder.DropTable(\n                name: \"Audiences\");\n\n            migrationBuilder.DropTable(\n                name: \"Campaigns\");\n\n            migrationBuilder.DropTable(\n                name: \"CsvBatches\");\n\n            migrationBuilder.DropTable(\n                name: \"Businesses\");\n\n            migrationBuilder.DropTable(\n                name: \"CTADefinitions\");\n\n            migrationBuilder.DropTable(\n                name: \"CTAFlowConfigs\");\n\n            migrationBuilder.DropTable(\n                name: \"Plans\");\n        }\n    }\n}\n"
    }
  ]
}
