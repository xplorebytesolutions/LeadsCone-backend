{
  "name": "xbytechat-api",
  "part": 9,
  "of": 9,
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/ResponseResult.cs",
      "sha256": "7b5c50a2cdf8601d56a0e89eb3099fdcc2078674de55eb9fe3189d92a3977561",
      "language": "csharp",
      "size": 6436,
      "content": "//namespace xbytechat.api.Helpers\n//{\n//    /// <summary>\n//    /// Represents a standardized response structure for service layer results.\n//    /// </summary>\n//    public class ResponseResult\n//    {\n//        public bool Success { get; set; }                  // ‚úÖ Whether operation succeeded\n//        public string Message { get; set; }                // ‚úÖ User-friendly message\n//        public object? Data { get; set; }                  // Optional payload (if needed)\n\n//        // ‚úÖ WhatsApp-specific diagnostics\n//        public string? ErrorMessage { get; set; }          // Error from API or exception\n//        public string? RawResponse { get; set; }           // Full API raw response\n\n//        public string? MessageId { get; set; } // üåê WhatsApp WAMID (Message ID)\n\n//        public Guid? LogId { get; set; } // ‚úÖ Unique ID of MessageLog for tracking\n//                                         // ‚úÖ Factory method for successful result\n\n//        public string? Token { get; set; }\n\n//        public string? RefreshToken { get; set; }\n//        public static ResponseResult SuccessInfo(string message, object? data = null, string? raw = null)\n//        {\n//            return new ResponseResult\n//            {\n//                Success = true,\n//                Message = message,\n//                Data = data,\n//                RawResponse = raw\n//            };\n//        }\n\n//        // ‚ùå Factory method for error result\n//        public static ResponseResult ErrorInfo(string message, string? error = null, string? raw = null)\n//        {\n//            return new ResponseResult\n//            {\n//                Success = false,\n//                Message = message,\n//                ErrorMessage = error,\n//                RawResponse = raw\n//            };\n//        }\n//    }\n//}\nusing System;\nusing System.Net;\n\nnamespace xbytechat.api.Helpers\n{\n    /// <summary>\n    /// Standard service-layer result with optional HTTP-like status code and payload.\n    /// Backward-compatible with existing callers that use SuccessInfo/ErrorInfo/Data.\n    /// </summary>\n    public class ResponseResult\n    {\n        // Primary flags\n        public bool Success { get; set; }                 // Whether operation succeeded\n        public string Message { get; set; } = string.Empty;\n\n        // Optional status code (HTTP-like, but not tied to ASP.NET)\n        public int Code { get; set; } = (int)HttpStatusCode.OK;\n\n        // Primary payload (prefer this going forward)\n        public object? Payload { get; set; }\n\n        // Back-compat data field (kept to avoid breaking callers)\n        public object? Data { get; set; }\n\n        // WhatsApp / diagnostics (retained)\n        public string? ErrorMessage { get; set; }\n        public string? RawResponse { get; set; }\n        public string? MessageId { get; set; }\n        public Guid? LogId { get; set; }\n        public string? Token { get; set; }\n        public string? RefreshToken { get; set; }\n\n        // ---- Factory helpers (preferred) ----\n        public static ResponseResult Ok(string message = \"OK\", object? payload = null)\n            => new()\n            {\n                Success = true,\n                Code = (int)HttpStatusCode.OK,\n                Message = message,\n                Payload = payload,\n                Data = payload // keep Data in sync for legacy consumers\n            };\n\n        public static ResponseResult Created(string message = \"Created\", object? payload = null)\n            => new()\n            {\n                Success = true,\n                Code = (int)HttpStatusCode.Created,\n                Message = message,\n                Payload = payload,\n                Data = payload\n            };\n\n        public static ResponseResult NotFound(string message = \"Not found\", object? payload = null)\n            => new()\n            {\n                Success = false,\n                Code = (int)HttpStatusCode.NotFound,\n                Message = message,\n                Payload = payload\n            };\n\n        public static ResponseResult Conflict(string message = \"Conflict\", object? payload = null)\n            => new()\n            {\n                Success = false,\n                Code = (int)HttpStatusCode.Conflict,\n                Message = message,\n                Payload = payload\n            };\n\n        public static ResponseResult BadRequest(string message = \"Bad request\", object? payload = null, string? error = null)\n            => new()\n            {\n                Success = false,\n                Code = (int)HttpStatusCode.BadRequest,\n                Message = message,\n                Payload = payload,\n                ErrorMessage = error\n            };\n\n        public static ResponseResult Forbidden(string message = \"Forbidden\")\n            => new()\n            {\n                Success = false,\n                Code = (int)HttpStatusCode.Forbidden,\n                Message = message\n            };\n\n        public static ResponseResult FromException(Exception ex, string message = \"Unexpected error\")\n            => new()\n            {\n                Success = false,\n                Code = (int)HttpStatusCode.InternalServerError,\n                Message = message,\n                ErrorMessage = ex.Message,\n                RawResponse = ex.ToString()\n            };\n\n        // ---- Backward-compatible helpers (kept; route to new ones) ----\n\n        /// <summary>\n        /// Legacy success. Prefer Ok(...) going forward.\n        /// </summary>\n        public static ResponseResult SuccessInfo(string message, object? data = null, string? raw = null)\n        {\n            return new ResponseResult\n            {\n                Success = true,\n                Code = (int)HttpStatusCode.OK,\n                Message = message,\n                Payload = data,\n                Data = data,\n                RawResponse = raw\n            };\n        }\n\n        /// <summary>\n        /// Legacy error. Prefer BadRequest/Conflict/NotFound/... going forward.\n        /// </summary>\n        public static ResponseResult ErrorInfo(string message, string? error = null, string? raw = null)\n        {\n            return new ResponseResult\n            {\n                Success = false,\n                Code = (int)HttpStatusCode.BadRequest,\n                Message = message,\n                ErrorMessage = error,\n                RawResponse = raw\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/SendResultExtended.cs",
      "sha256": "d70ced23d36d879eb80982f4a2508398175f5a06bc3e524c5c426cfe59635a0a",
      "language": "csharp",
      "size": 252,
      "content": "using xbytechat.api.Helpers;\n\npublic class SendResultExtended : ResponseResult\n{\n   // public string? MessageId { get; set; }         // WAMID from WhatsApp\n    public Guid? MessageLogId { get; set; }        // Our DB log ID (from MessageLogs table)\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/UserContextHelper.cs",
      "sha256": "ebabfd85a8a344a40535bccbbdb67a5241b585ecca9f9688e3eb6201b71fda0d",
      "language": "csharp",
      "size": 1432,
      "content": "using System.Security.Claims;\n\nnamespace xbytechat.api.Helpers\n{\n    public static class UserContextHelper\n    {\n        /// <summary>\n        /// Returns the logged-in user's unique ID from JWT.\n        /// </summary>\n        public static Guid GetUserId(ClaimsPrincipal user)\n        {\n            return Guid.TryParse(user.FindFirst(\"sub\")?.Value, out var id) ? id : Guid.Empty;\n        }\n\n        /// <summary>\n        /// Returns the business ID (tenant) from JWT claims.\n        /// </summary>\n        public static Guid GetBusinessId(ClaimsPrincipal user)\n        {\n            return Guid.TryParse(user.FindFirst(\"businessId\")?.Value, out var id) ? id : Guid.Empty;\n        }\n\n        /// <summary>\n        /// Returns the role of the logged-in user.\n        /// </summary>\n        public static string GetRole(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"role\")?.Value ?? \"\";\n        }\n\n        /// <summary>\n        /// Returns company name for UI display (optional).\n        /// </summary>\n        public static string GetCompanyName(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"companyName\")?.Value ?? \"\";\n        }\n\n        /// <summary>\n        /// Returns plan info if needed for plan-based access control.\n        /// </summary>\n        public static string GetPlan(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"plan\")?.Value ?? \"\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat.api.csproj",
      "sha256": "556e723e4c1db71c06590cb56b01f2100bc573078a29f9b04f415b568fc20386",
      "language": "text",
      "size": 4079,
      "content": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <RootNamespace>xbytechat.api</RootNamespace>\n    <UserSecretsId>54c16f50-f987-4162-a877-70088aa68997</UserSecretsId>\n    <EnableDefaultItems>true</EnableDefaultItems>\n  </PropertyGroup>\n\n  <!-- Intentional removals (keep as-is) -->\n  <ItemGroup>\n    <Compile Remove=\"Controllers\\BusinessLoginController.cs\" />\n    <Compile Remove=\"Controllers\\SendMessageController.cs\" />\n    <Compile Remove=\"Features\\Audiences\\DTOs\\CampaignVariableMapDtos.cs\" />\n    <Compile Remove=\"Models\\MessageLog.cs\" />\n    <Compile Remove=\"Shared\\TemplateParameterHelper.cs\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.0\" />\n    <PackageReference Include=\"BCrypt.Net-Next\" Version=\"4.0.3\" />\n    <PackageReference Include=\"ClosedXML\" Version=\"0.105.0\" />\n    <PackageReference Include=\"CsvHelper\" Version=\"33.0.1\" />\n    <PackageReference Include=\"EFCore.BulkExtensions\" Version=\"8.1.3\" />\n    <PackageReference Include=\"FluentValidation\" Version=\"11.11.0\" />\n    <PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"11.3.0\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.0\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"8.0.15\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"8.0.18\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"8.0.15\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" Version=\"8.0.15\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"8.0.15\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"8.0.11\" />\n    <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL.Design\" Version=\"1.1.0\" />\n    <PackageReference Include=\"Serilog\" Version=\"4.2.0\" />\n    <PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.3\" />\n    <PackageReference Include=\"Serilog.Exceptions\" Version=\"8.4.0\" />\n    <PackageReference Include=\"Serilog.Sinks.Async\" Version=\"2.1.0\" />\n    <PackageReference Include=\"Serilog.Sinks.File\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.6.2\" />\n    <PackageReference Include=\"System.IdentityModel.Tokens.Jwt\" Version=\"8.8.0\" />\n  </ItemGroup>\n\n  <!-- Folder placeholders (optional) -->\n  <ItemGroup>\n    <Folder Include=\"Features\\AuditTrail\\Controllers\\\" />\n    <Folder Include=\"Features\\AuditTrail\\Middleware\\\" />\n    <Folder Include=\"Features\\AuditTrail\\Background\\\" />\n    <Folder Include=\"Features\\Automation\\Enums\\\" />\n    <Folder Include=\"Features\\Automation\\Runtime\\\" />\n    <Folder Include=\"Features\\AutoReplyBuilder\\Helpers\\\" />\n    <Folder Include=\"Features\\AutoReplyTemplates\\Restaurant\\Templates\\\" />\n    <Folder Include=\"Features\\CampaignTracking\\Repositories\\\" />\n    <Folder Include=\"Features\\Catalog\\Repositories\\\" />\n    <Folder Include=\"Features\\CrmAnalytics\\Models\\\" />\n    <Folder Include=\"Features\\CTAFlowBuilder\\Mappers\\\" />\n    <Folder Include=\"Features\\MessagesEngine\\Helpers\\\" />\n    <Folder Include=\"Features\\PlanManagement\\DTOs\\\" />\n    <Folder Include=\"Features\\TemplatesModule\\DTOs\\\" />\n    <Folder Include=\"Features\\TemplatesModule\\Models\\\" />\n    <Folder Include=\"Features\\xbTimelines\\Repositories\\\" />\n    <Folder Include=\"Models\\BusinessModel\\\" />\n    <Folder Include=\"Models\\UsersModel\\\" />\n    <Folder Include=\"WhatsAppSettings\\BackgroundService\\\" />\n  </ItemGroup>\n\n</Project>\n"
    }
  ]
}
