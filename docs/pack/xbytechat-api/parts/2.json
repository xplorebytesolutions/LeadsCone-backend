{
  "name": "xbytechat-api",
  "part": 2,
  "of": 9,
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignCsvSampleController.cs",
      "sha256": "e13843bfd6f5e2b253d20b7f78d49ff93bc77eff7d616da94f5ae0330559aeee",
      "language": "csharp",
      "size": 36970,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Shared;\nusing xbytechat_api.WhatsAppSettings.Services; // User.GetBusinessId()\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/csv-sample\")]\n    [Authorize]\n    public sealed class CampaignCsvSampleController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        private readonly ICampaignPreviewService _preview;\n        private readonly IWhatsAppTemplateFetcherService _tpl;\n\n        public CampaignCsvSampleController(AppDbContext db, ICampaignPreviewService preview, IWhatsAppTemplateFetcherService tpl)\n        {\n            _db = db;\n            _preview = preview;\n            _tpl = tpl;\n        }\n\n        private sealed class SchemaResult\n        {\n            public bool Found { get; set; }\n            public List<string> Headers { get; set; } = new(); // dynamic per-row CSV columns (no phone, no media url)\n            public int PlaceholderCount { get; set; }           // body placeholders count\n            public string HeaderType { get; set; } = \"none\";     // \"none\" | \"image\" | \"video\" | \"document\" | \"text\"\n            public bool HeaderNeedsUrl { get; set; }             // true for image/video/document\n        }\n\n        // GET /api/campaigns/{campaignId}/csv-sample/schema\n        // GET /api/campaigns/{campaignId}/csv-sample/schema\n        [HttpGet(\"schema\")]\n        public async Task<IActionResult> GetSchema([FromRoute] Guid campaignId, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var schema = await BuildSchemaAsync(businessId, campaignId, ct);\n            if (!schema.Found) return NotFound();\n\n            // Flatten so FE can read sc.headers / sc.placeholderCount\n            return Ok(new\n            {\n                headers = schema.Headers,                   // e.g. [\"parameter1\",\"headerpara1\",\"buttonpara1\"]\n                placeholderCount = schema.PlaceholderCount, // body placeholders count\n                header = new\n                {\n                    type = schema.HeaderType,               // \"none\" | \"image\" | \"video\" | \"document\" | \"text\"\n                    needsUrl = schema.HeaderNeedsUrl        // true for image/video/document\n                }\n            });\n        }\n\n        // GET /api/campaigns/{campaignId}/csv-sample\n        // -> returns ONLY the header row (no sample values)\n        [HttpGet]\n        public async Task<IActionResult> Download([FromRoute] Guid campaignId, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var schema = await BuildSchemaAsync(businessId, campaignId, ct);\n            if (!schema.Found) return NotFound();\n\n            // phone is always first; then our dynamic columns (already lowercased)\n            var headers = new List<string> { \"phone\" };\n            headers.AddRange(schema.Headers);\n\n            var line = string.Join(\",\", headers.Select(EscapeCsv));\n            var bytes = Encoding.UTF8.GetBytes(line + \"\\n\");\n            var fileName = $\"campaign-{campaignId:N}-sample.csv\";\n            return File(bytes, \"text/csv; charset=utf-8\", fileName);\n        }\n\n        // -------- schema builder (creates lowercase column names) --------\n        private async Task<SchemaResult> BuildSchemaAsync(Guid businessId, Guid campaignId, CancellationToken ct)\n        {\n            var campaign = await _db.Campaigns\n                .AsNoTracking()\n                .Where(c => c.Id == campaignId && c.BusinessId == businessId && !c.IsDeleted)\n                .Select(c => new { c.Id, c.BusinessId, c.TemplateId, c.MessageTemplate, c.Provider })\n                .FirstOrDefaultAsync(ct);\n\n            if (campaign == null)\n                return new SchemaResult { Found = false };\n\n            var templateName =\n                !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :\n                !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :\n                string.Empty;\n\n            if (string.IsNullOrWhiteSpace(templateName))\n            {\n                return new SchemaResult\n                {\n                    Found = true,\n                    Headers = new List<string>(), // dynamic columns only; \"phone\" is added by the downloader\n                    PlaceholderCount = 0,\n                    HeaderType = \"none\",\n                    HeaderNeedsUrl = false\n                };\n            }\n\n            var provider = (campaign.Provider ?? \"META_CLOUD\").ToUpperInvariant();\n\n            // 1) Normalized meta from service\n            var meta = await _tpl.GetTemplateMetaAsync(\n                campaign.BusinessId,\n                templateName,\n                language: null,\n                provider: provider\n            );\n\n            // 2) DB row fallback — NOTE: provider filter REMOVED to avoid mismatches\n            var tplRow = await _db.WhatsAppTemplates\n                .AsNoTracking()\n                .Where(w => w.BusinessId == businessId\n                            && w.IsActive\n                            && w.Name == templateName)\n                .OrderByDescending(w => w.UpdatedAt > w.CreatedAt ? w.UpdatedAt : w.CreatedAt)\n                .FirstOrDefaultAsync(ct);\n\n            var headers = new List<string>();\n\n            // BODY placeholders -> parameter1..N\n            int bodyCount = 0;\n            if (meta?.BodyPlaceholders is { Count: > 0 })\n            {\n                bodyCount = meta.BodyPlaceholders.Count;\n            }\n            else if (tplRow?.PlaceholderCount is int pc && pc > 0)\n            {\n                bodyCount = pc;\n            }\n            else\n            {\n                var bodyText = meta?.GetType().GetProperty(\"Body\")?.GetValue(meta) as string;\n                if (!string.IsNullOrWhiteSpace(bodyText))\n                {\n                    var m = Regex.Matches(bodyText, @\"\\{\\{\\s*(\\d+)\\s*\\}\\}\");\n                    if (m.Count > 0)\n                        bodyCount = m.Select(x => int.Parse(x.Groups[1].Value)).DefaultIfEmpty(0).Max();\n                }\n            }\n            for (int i = 1; i <= bodyCount; i++) headers.Add($\"parameter{i}\");\n\n            // HEADER detection (media is campaign-level; text header may have params)\n            string headerTypeNorm = (meta?.HeaderType ?? \"\").Trim().ToUpperInvariant();\n            if (string.IsNullOrEmpty(headerTypeNorm) && tplRow?.HasImageHeader == true)\n                headerTypeNorm = \"IMAGE\";\n\n            string respHeaderType = \"none\";\n            bool needsUrl = false;\n            switch (headerTypeNorm)\n            {\n                case \"IMAGE\": respHeaderType = \"image\"; needsUrl = true; break;\n                case \"VIDEO\": respHeaderType = \"video\"; needsUrl = true; break;\n                case \"DOCUMENT\":\n                case \"PDF\": respHeaderType = \"document\"; needsUrl = true; break;\n                case \"TEXT\": respHeaderType = \"text\"; needsUrl = false; break;\n                default: respHeaderType = \"none\"; needsUrl = false; break;\n            }\n\n            // Text header placeholders -> headerpara1..M\n            if (respHeaderType == \"text\")\n            {\n                int headerVarCount = 0;\n                var hpProp = meta?.GetType().GetProperty(\"HeaderPlaceholders\");\n                if (hpProp?.GetValue(meta) is IEnumerable<object> hpEnum)\n                {\n                    headerVarCount = hpEnum.Cast<object>().Count();\n                }\n                else\n                {\n                    var headerText =\n                        meta?.GetType().GetProperty(\"Header\")?.GetValue(meta) as string ??\n                        meta?.GetType().GetProperty(\"HeaderText\")?.GetValue(meta) as string ?? \"\";\n                    if (!string.IsNullOrWhiteSpace(headerText))\n                    {\n                        var m = Regex.Matches(headerText, @\"\\{\\{\\s*(\\d+)\\s*\\}\\}\");\n                        if (m.Count > 0)\n                            headerVarCount = m.Select(x => int.Parse(x.Groups[1].Value)).DefaultIfEmpty(0).Max();\n                    }\n                }\n                for (int i = 1; i <= headerVarCount; i++)\n                    headers.Add($\"headerpara{i}\");\n            }\n\n            // Dynamic URL buttons -> buttonpara1..3\n            bool LooksDynamic(string? val) => !string.IsNullOrEmpty(val) && val.Contains(\"{{\");\n            bool IsUrlish(string? type, string? subType)\n            {\n                type = (type ?? \"\").ToLowerInvariant();\n                subType = (subType ?? \"\").ToLowerInvariant();\n                return type == \"url\" || subType == \"url\";\n            }\n            int GetPos(object b, int fallbackOneBased)\n            {\n                var t = b.GetType();\n                if (t.GetProperty(\"Index\")?.GetValue(b) is int idx && idx > 0) return idx;\n                if (t.GetProperty(\"Order\")?.GetValue(b) is int ord && ord >= 0) return ord + 1;\n                if (t.GetProperty(\"Position\")?.GetValue(b) is int pos && pos > 0) return pos;\n                return fallbackOneBased;\n            }\n\n            var positions = new SortedSet<int>();\n\n            // A) normalized meta.Buttons\n            if (meta?.Buttons is { Count: > 0 })\n            {\n                var urlBtns = meta.Buttons\n                    .Where(b => IsUrlish(b.GetType().GetProperty(\"Type\")?.GetValue(b) as string,\n                                         b.GetType().GetProperty(\"SubType\")?.GetValue(b) as string))\n                    .ToList();\n\n                for (int i = 0; i < urlBtns.Count && positions.Count < 3; i++)\n                {\n                    var b = urlBtns[i];\n                    var val = b.GetType().GetProperty(\"Value\")?.GetValue(b) as string;\n                    var subType = b.GetType().GetProperty(\"SubType\")?.GetValue(b) as string;\n                    var urlType = b.GetType().GetProperty(\"UrlType\")?.GetValue(b) as string;\n                    var hasPh = b.GetType().GetProperty(\"HasPlaceholder\")?.GetValue(b) as bool?;\n\n                    var dynamicByProps =\n                        LooksDynamic(val) ||\n                        string.Equals(subType, \"DYNAMIC\", StringComparison.OrdinalIgnoreCase) ||\n                        string.Equals(urlType, \"DYNAMIC\", StringComparison.OrdinalIgnoreCase) ||\n                        hasPh == true;\n\n                    if (dynamicByProps)\n                    {\n                        var pos = GetPos(b, i + 1);\n                        if (pos >= 1 && pos <= 3) positions.Add(pos);\n                    }\n                }\n            }\n\n            // B) ButtonsJson fallback\n            if (positions.Count < 3 && !string.IsNullOrWhiteSpace(tplRow?.ButtonsJson))\n            {\n                try\n                {\n                    var root = JsonDocument.Parse(tplRow.ButtonsJson).RootElement;\n                    if (root.ValueKind == JsonValueKind.Array)\n                    {\n                        foreach (var el in root.EnumerateArray())\n                        {\n                            if (positions.Count >= 3) break;\n\n                            var type = el.TryGetProperty(\"type\", out var tkn) ? tkn.GetString() : null;\n                            if (!IsUrlish(type, null)) continue;\n\n                            int pos = 0;\n                            if (el.TryGetProperty(\"index\", out var iTok) && iTok.TryGetInt32(out var idx) && idx > 0) pos = idx;\n                            else if (el.TryGetProperty(\"order\", out var oTok) && oTok.TryGetInt32(out var ord) && ord >= 0) pos = ord + 1;\n\n                            string? value = null;\n                            if (el.TryGetProperty(\"value\", out var vTok) && vTok.ValueKind == JsonValueKind.String)\n                                value = vTok.GetString();\n\n                            bool hasParam = false;\n                            if (el.TryGetProperty(\"parameters\", out var pTok) && pTok.ValueKind == JsonValueKind.Array)\n                            {\n                                foreach (var p in pTok.EnumerateArray())\n                                {\n                                    if (p.TryGetProperty(\"text\", out var txt) && txt.ValueKind == JsonValueKind.String)\n                                    {\n                                        var s = txt.GetString();\n                                        if (!string.IsNullOrEmpty(s) && s.Contains(\"{{\")) { hasParam = true; break; }\n                                    }\n                                }\n                            }\n\n                            if (LooksDynamic(value) || hasParam)\n                            {\n                                if (pos <= 0) pos = positions.Count + 1;\n                                if (pos >= 1 && pos <= 3) positions.Add(pos);\n                            }\n                        }\n                    }\n                }\n                catch { /* ignore bad JSON */ }\n            }\n\n            foreach (var pos in positions)\n            {\n                var key = $\"buttonpara{pos}\";\n                if (!headers.Contains(key, StringComparer.OrdinalIgnoreCase))\n                    headers.Add(key);\n            }\n\n            // ensure lowercase\n            headers = headers.Select(h => h.ToLowerInvariant()).ToList();\n\n            return new SchemaResult\n            {\n                Found = true,\n                Headers = headers,\n                PlaceholderCount = bodyCount,\n                HeaderType = respHeaderType,\n                HeaderNeedsUrl = needsUrl\n            };\n        }\n\n        private static string EscapeCsv(string input)\n        {\n            if (input == null) return \"\";\n            var needsQuotes = input.Contains(',') || input.Contains('\"') || input.Contains('\\n') || input.Contains('\\r');\n            var s = input.Replace(\"\\\"\", \"\\\"\\\"\");\n            return needsQuotes ? $\"\\\"{s}\\\"\" : s;\n        }\n    }\n}\n\n//using System;\n//using System.Collections.Generic;\n//using System.Linq;\n//using System.Text;\n//using System.Text.Json;\n//using System.Text.RegularExpressions;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using Microsoft.EntityFrameworkCore;\n//using xbytechat.api;\n//using xbytechat.api.AuthModule.Models;\n//using xbytechat.api.Features.CampaignModule.Services;\n//using xbytechat.api.Shared;\n//using xbytechat_api.WhatsAppSettings.Services; // User.GetBusinessId()\n\n//namespace xbytechat.api.Features.CampaignModule.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/campaigns/{campaignId:guid}/csv-sample\")]\n//    [Authorize]\n//    public sealed class CampaignCsvSampleController : ControllerBase\n//    {\n//        private readonly AppDbContext _db;\n//        private readonly ICampaignPreviewService _preview;\n//        private readonly IWhatsAppTemplateFetcherService _tpl;\n//        public CampaignCsvSampleController(AppDbContext db, ICampaignPreviewService preview, IWhatsAppTemplateFetcherService tpl)\n//        {\n//            _db = db;\n//            _preview = preview;\n//            _tpl = tpl;\n//        }\n\n//        // Add at top of file if missing:\n\n\n//        // -----------------------------------------------\n//        // DTO used internally for building the schema\n//        // -----------------------------------------------\n//        private sealed class SchemaResult\n//        {\n//            public bool Found { get; set; }\n//            public List<string> Headers { get; set; } = new();\n//            public int PlaceholderCount { get; set; } // body placeholders count\n//            public string HeaderType { get; set; } = \"none\"; // \"none\" | \"image\" | \"video\" | \"document\" | \"text\"\n//            public bool HeaderNeedsUrl { get; set; } // true for image/video/document header\n//        }\n\n//        // -----------------------------------------------\n//        // GET /campaigns/{campaignId}/csv-sample/schema\n//        // -----------------------------------------------\n//        [HttpGet(\"schema\")]\n//        public async Task<IActionResult> GetSchema([FromRoute] Guid campaignId, CancellationToken ct = default)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized();\n\n//            var schema = await BuildSchemaAsync(businessId, campaignId, ct);\n//            if (!schema.Found) return NotFound();\n\n//            return Ok(new\n//            {\n//                success = true,\n//                data = new\n//                {\n//                    headers = schema.Headers,                     // ONLY per-row CSV fields (no phone, no media URL)\n//                    placeholderCount = schema.PlaceholderCount,   // body placeholders count\n//                    header = new\n//                    {\n//                        type = schema.HeaderType,                 // \"none\" | \"image\" | \"video\" | \"document\" | \"text\"\n//                        needsUrl = schema.HeaderNeedsUrl          // true iff header is image/video/document\n//                    }\n//                }\n//            });\n//        }\n\n//        // -----------------------------------------------\n//        // Builder\n//        // -----------------------------------------------\n//        private async Task<SchemaResult> BuildSchemaAsync(Guid businessId, Guid campaignId, CancellationToken ct)\n//        {\n//            var campaign = await _db.Campaigns\n//                .AsNoTracking()\n//                .Where(c => c.Id == campaignId && c.BusinessId == businessId && !c.IsDeleted)\n//                .Select(c => new { c.Id, c.BusinessId, c.TemplateId, c.MessageTemplate, c.Provider })\n//                .FirstOrDefaultAsync(ct);\n\n//            if (campaign == null)\n//                return new SchemaResult { Found = false };\n\n//            var templateName =\n//                !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :\n//                !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :\n//                string.Empty;\n\n//            // If no template selected, we still return a valid, empty schema (FE will just ask for phone).\n//            if (string.IsNullOrWhiteSpace(templateName))\n//            {\n//                return new SchemaResult\n//                {\n//                    Found = true,\n//                    Headers = new List<string>(),     // do NOT inject \"phone\" here\n//                    PlaceholderCount = 0,\n//                    HeaderType = \"none\",\n//                    HeaderNeedsUrl = false\n//                };\n//            }\n\n//            var provider = (campaign.Provider ?? \"META_CLOUD\").ToUpperInvariant();\n\n//            // 1) Normalized meta from your template service\n//            var meta = await _tpl.GetTemplateMetaAsync(\n//                campaign.BusinessId,\n//                templateName,\n//                language: null,\n//                provider: provider\n//            );\n\n//            // 2) Fallback to raw WhatsAppTemplates row\n//            var tplRow = await _db.WhatsAppTemplates\n//                .AsNoTracking()\n//                .Where(w => w.BusinessId == businessId\n//                         && w.IsActive\n//                         && w.Name == templateName\n//                         && w.Provider == provider)\n//                .OrderByDescending(w => w.UpdatedAt > w.CreatedAt ? w.UpdatedAt : w.CreatedAt)\n//                .FirstOrDefaultAsync(ct);\n\n//            var headers = new List<string>(); // <- per-row CSV columns only (NO \"phone\", NO media URL constant)\n\n//            // ---------------- BODY placeholders ----------------\n//            int bodyCount = 0;\n\n//            if (meta?.BodyPlaceholders is { Count: > 0 })\n//            {\n//                bodyCount = meta.BodyPlaceholders.Count;\n//            }\n//            else if (tplRow?.PlaceholderCount is int pc && pc > 0)\n//            {\n//                bodyCount = pc;\n//            }\n//            else\n//            {\n//                // Last resort: parse {{n}} from a 'Body' text if present\n//                var bodyText = meta?.GetType().GetProperty(\"Body\")?.GetValue(meta) as string;\n//                if (!string.IsNullOrWhiteSpace(bodyText))\n//                {\n//                    var m = Regex.Matches(bodyText, @\"\\{\\{\\s*(\\d+)\\s*\\}\\}\");\n//                    if (m.Count > 0)\n//                        bodyCount = m.Select(x => int.Parse(x.Groups[1].Value)).DefaultIfEmpty(0).Max();\n//                }\n//            }\n//            for (int i = 1; i <= bodyCount; i++) headers.Add($\"body.{i}\");\n\n//            // ---------------- HEADER type + header text placeholders ----------------\n//            // Normalize header type\n//            string headerTypeNorm = (meta?.HeaderType ?? \"\").Trim().ToUpperInvariant();\n//            if (string.IsNullOrEmpty(headerTypeNorm) && tplRow?.HasImageHeader == true)\n//                headerTypeNorm = \"IMAGE\"; // legacy fallback\n\n//            // Map to response type + needsUrl\n//            string respHeaderType = \"none\";\n//            bool needsUrl = false;\n\n//            switch (headerTypeNorm)\n//            {\n//                case \"IMAGE\":\n//                    respHeaderType = \"image\";\n//                    needsUrl = true;\n//                    break;\n//                case \"VIDEO\":\n//                    respHeaderType = \"video\";\n//                    needsUrl = true;\n//                    break;\n//                case \"DOCUMENT\":\n//                case \"PDF\":\n//                    respHeaderType = \"document\";\n//                    needsUrl = true;\n//                    break;\n//                case \"TEXT\":\n//                    respHeaderType = \"text\";\n//                    needsUrl = false;\n//                    break;\n//                default:\n//                    respHeaderType = \"none\";\n//                    needsUrl = false;\n//                    break;\n//            }\n\n//            // If header is TEXT, include its own placeholders as header.1, header.2, ...\n//            if (respHeaderType == \"text\")\n//            {\n//                int headerVarCount = 0;\n\n//                // Prefer an explicit placeholder list if your meta has it\n//                var headerPlaceholdersProp = meta?.GetType().GetProperty(\"HeaderPlaceholders\");\n//                if (headerPlaceholdersProp?.GetValue(meta) is IEnumerable<object> hpEnum)\n//                {\n//                    headerVarCount = hpEnum.Cast<object>().Count();\n//                }\n//                else\n//                {\n//                    // Fallback: parse {{n}} from header text\n//                    var headerText =\n//                        meta?.GetType().GetProperty(\"Header\")?.GetValue(meta) as string ??\n//                        meta?.GetType().GetProperty(\"HeaderText\")?.GetValue(meta) as string ??\n//                        string.Empty;\n\n//                    if (!string.IsNullOrWhiteSpace(headerText))\n//                    {\n//                        var m = Regex.Matches(headerText, @\"\\{\\{\\s*(\\d+)\\s*\\}\\}\");\n//                        if (m.Count > 0)\n//                            headerVarCount = m.Select(x => int.Parse(x.Groups[1].Value)).DefaultIfEmpty(0).Max();\n//                    }\n//                }\n\n//                for (int i = 1; i <= headerVarCount; i++)\n//                    headers.Add($\"header.{i}\");\n//            }\n\n//            // ---------------- DYNAMIC URL BUTTONS -> button{i}.url_param ----------------\n//            bool LooksDynamic(string? val) => !string.IsNullOrEmpty(val) && val.Contains(\"{{\");\n\n//            bool IsUrlish(string? type, string? subType)\n//            {\n//                type = (type ?? \"\").ToLowerInvariant();\n//                subType = (subType ?? \"\").ToLowerInvariant();\n//                return type == \"url\" || subType == \"url\";\n//            }\n\n//            int GetPos(object b, int fallbackOneBased)\n//            {\n//                var t = b.GetType();\n//                if (t.GetProperty(\"Index\")?.GetValue(b) is int idx && idx > 0) return idx;\n//                if (t.GetProperty(\"Order\")?.GetValue(b) is int ord && ord >= 0) return ord + 1;\n//                if (t.GetProperty(\"Position\")?.GetValue(b) is int pos && pos > 0) return pos;\n//                return fallbackOneBased;\n//            }\n\n//            var positions = new SortedSet<int>();\n\n//            // A) meta.Buttons (normalized)\n//            if (meta?.Buttons is { Count: > 0 })\n//            {\n//                var urlBtns = meta.Buttons\n//                    .Where(b => IsUrlish(b.GetType().GetProperty(\"Type\")?.GetValue(b) as string,\n//                                         b.GetType().GetProperty(\"SubType\")?.GetValue(b) as string))\n//                    .ToList();\n\n//                for (int i = 0; i < urlBtns.Count && positions.Count < 3; i++)\n//                {\n//                    var b = urlBtns[i];\n//                    var val = b.GetType().GetProperty(\"Value\")?.GetValue(b) as string;\n//                    var subType = b.GetType().GetProperty(\"SubType\")?.GetValue(b) as string;\n//                    var urlType = b.GetType().GetProperty(\"UrlType\")?.GetValue(b) as string;\n//                    var hasPh = b.GetType().GetProperty(\"HasPlaceholder\")?.GetValue(b) as bool?;\n\n//                    var dynamicByProps =\n//                        LooksDynamic(val) ||\n//                        string.Equals(subType, \"DYNAMIC\", StringComparison.OrdinalIgnoreCase) ||\n//                        string.Equals(urlType, \"DYNAMIC\", StringComparison.OrdinalIgnoreCase) ||\n//                        hasPh == true;\n\n//                    if (dynamicByProps)\n//                    {\n//                        var pos = GetPos(b, i + 1);\n//                        if (pos >= 1 && pos <= 3) positions.Add(pos);\n//                    }\n//                }\n//            }\n\n//            // B) raw ButtonsJson fallback (from DB row)\n//            if (positions.Count < 3 && !string.IsNullOrWhiteSpace(tplRow?.ButtonsJson))\n//            {\n//                try\n//                {\n//                    var root = System.Text.Json.JsonDocument.Parse(tplRow.ButtonsJson).RootElement;\n//                    if (root.ValueKind == System.Text.Json.JsonValueKind.Array)\n//                    {\n//                        foreach (var el in root.EnumerateArray())\n//                        {\n//                            if (positions.Count >= 3) break;\n\n//                            var type = el.TryGetProperty(\"type\", out var tkn) ? tkn.GetString() : null;\n//                            if (!IsUrlish(type, null)) continue;\n\n//                            int pos = 0;\n//                            if (el.TryGetProperty(\"index\", out var iTok) && iTok.TryGetInt32(out var idx) && idx > 0) pos = idx;\n//                            else if (el.TryGetProperty(\"order\", out var oTok) && oTok.TryGetInt32(out var ord) && ord >= 0) pos = ord + 1;\n\n//                            string? value = null;\n//                            if (el.TryGetProperty(\"value\", out var vTok) && vTok.ValueKind == System.Text.Json.JsonValueKind.String)\n//                                value = vTok.GetString();\n\n//                            bool hasParam = false;\n//                            if (el.TryGetProperty(\"parameters\", out var pTok) && pTok.ValueKind == System.Text.Json.JsonValueKind.Array)\n//                            {\n//                                foreach (var p in pTok.EnumerateArray())\n//                                {\n//                                    if (p.TryGetProperty(\"text\", out var txt) && txt.ValueKind == System.Text.Json.JsonValueKind.String)\n//                                    {\n//                                        var s = txt.GetString();\n//                                        if (!string.IsNullOrEmpty(s) && s.Contains(\"{{\")) { hasParam = true; break; }\n//                                    }\n//                                }\n//                            }\n\n//                            if (LooksDynamic(value) || hasParam)\n//                            {\n//                                if (pos <= 0) pos = positions.Count + 1;\n//                                if (pos >= 1 && pos <= 3) positions.Add(pos);\n//                            }\n//                        }\n//                    }\n//                }\n//                catch { /* ignore bad JSON */ }\n//            }\n\n//            foreach (var pos in positions)\n//            {\n//                var key = $\"button{pos}.url_param\";\n//                if (!headers.Contains(key, StringComparer.OrdinalIgnoreCase))\n//                    headers.Add(key);\n//            }\n\n//            // DONE\n//            return new SchemaResult\n//            {\n//                Found = true,\n//                Headers = headers,\n//                PlaceholderCount = bodyCount,\n//                HeaderType = respHeaderType,\n//                HeaderNeedsUrl = needsUrl\n//            };\n//        }\n\n\n\n\n\n//        [HttpGet]\n//        // [HttpGet(\"download-sample/{campaignId:guid}\")]\n//        public async Task<IActionResult> Download(Guid campaignId, CancellationToken ct = default)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized();\n\n//            var schema = await BuildSchemaAsync(businessId, campaignId, ct);\n//            if (!schema.Found) return NotFound();\n\n//            // First row only: the header names the FE expects to see\n//            var sb = new StringBuilder();\n//            sb.AppendLine(string.Join(\",\", schema.Headers.Select(h =>\n//                h.Contains(',') ? $\"\\\"{h.Replace(\"\\\"\", \"\\\"\\\"\")}\\\"\" : h)));\n\n//            var bytes = Encoding.UTF8.GetBytes(sb.ToString());\n//            var fileName = $\"sample_{campaignId:N}.csv\";\n//            return File(bytes, \"text/csv; charset=utf-8\", fileName);\n//        }\n\n//        // -----------------------\n//        // Helpers\n//        // -----------------------\n\n\n\n//        //private async Task<SchemaResult> BuildSchemaAsync(Guid businessId, Guid campaignId, CancellationToken ct)\n//        //{\n//        //    var campaign = await _db.Campaigns\n//        //        .AsNoTracking()\n//        //        .Where(c => c.Id == campaignId && c.BusinessId == businessId && !c.IsDeleted)\n//        //        .Select(c => new\n//        //        {\n//        //            c.Id,\n//        //            c.BusinessId,\n//        //            c.TemplateId,\n//        //            c.MessageTemplate,\n//        //            c.Provider\n//        //        })\n//        //        .FirstOrDefaultAsync(ct);\n\n//        //    if (campaign == null)\n//        //        return new SchemaResult { Found = false };\n\n//        //    var templateName =\n//        //        !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :\n//        //        !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :\n//        //        string.Empty;\n\n//        //    if (string.IsNullOrWhiteSpace(templateName))\n//        //        return new SchemaResult { Found = true, Headers = new List<string> { \"phone\" }, PlaceholderCount = 0 };\n\n//        //    var provider = (campaign.Provider ?? \"META\").ToUpperInvariant();\n\n//        //    // 1) Normalized meta (may be sparse on some branches)\n//        //    var meta = await _tpl.GetTemplateMetaAsync(\n//        //        campaign.BusinessId,\n//        //        templateName,\n//        //        language: null,\n//        //        provider: provider\n//        //    );\n\n//        //    // 2) Raw DB row fallback (has ButtonsJson / HasImageHeader / PlaceholderCount)\n//        //    var tplRow = await _db.WhatsAppTemplates\n//        //        .AsNoTracking()\n//        //        .Where(w => w.BusinessId == businessId\n//        //                    && w.IsActive\n//        //                    && w.Name == templateName\n//        //                    && w.Provider == provider)\n//        //        .OrderByDescending(w => (w.UpdatedAt > w.CreatedAt ? w.UpdatedAt : w.CreatedAt))\n//        //        .FirstOrDefaultAsync(ct);\n\n//        //    var headers = new List<string> { \"phone\" };\n//        //    int bodyCount = 0;\n\n//        //    // ---------- BODY PLACEHOLDERS ----------\n//        //    if (meta?.BodyPlaceholders != null && meta.BodyPlaceholders.Count > 0)\n//        //    {\n//        //        bodyCount = meta.BodyPlaceholders.Count;\n//        //    }\n//        //    else if (tplRow?.PlaceholderCount is int pc && pc > 0)\n//        //    {\n//        //        bodyCount = pc;\n//        //    }\n//        //    else\n//        //    {\n//        //        // try to infer from body text if available in meta\n//        //        var bodyText = meta?.GetType()?.GetProperty(\"Body\")?.GetValue(meta) as string;\n//        //        if (!string.IsNullOrWhiteSpace(bodyText))\n//        //        {\n//        //            var m = System.Text.RegularExpressions.Regex.Matches(bodyText, @\"\\{\\{\\s*(\\d+)\\s*\\}\\}\");\n//        //            if (m.Count > 0)\n//        //                bodyCount = m.Select(x => int.Parse(x.Groups[1].Value)).DefaultIfEmpty(0).Max();\n//        //        }\n//        //    }\n//        //    for (int i = 1; i <= bodyCount; i++)\n//        //        headers.Add($\"body.{i}\");\n\n//        //    // ---------- HEADER MEDIA ----------\n//        //    string headerType = (meta?.HeaderType ?? string.Empty).ToUpperInvariant();\n//        //    if (string.IsNullOrEmpty(headerType))\n//        //    {\n//        //        // legacy bool\n//        //        var hasImg = meta?.GetType()?.GetProperty(\"HasHeaderMedia\")?.GetValue(meta) as bool?\n//        //                     ?? meta?.GetType()?.GetProperty(\"HasImageHeader\")?.GetValue(meta) as bool?;\n//        //        if (hasImg == true) headerType = \"IMAGE\";\n//        //        // row fallback?\n//        //        if (string.IsNullOrEmpty(headerType) && tplRow?.HasImageHeader == true) headerType = \"IMAGE\";\n//        //    }\n\n//        //    if (headerType == \"IMAGE\") headers.Add(\"header.image_url\");\n//        //    if (headerType == \"VIDEO\") headers.Add(\"header.video_url\");\n//        //    if (headerType == \"DOCUMENT\" || headerType == \"PDF\") headers.Add(\"header.document_url\");\n\n//        //    // ---------- DYNAMIC URL BUTTONS ----------\n//        //    // Match FE logic: a button needs a CSV value if:\n//        //    //  - it's a URL-like button (type/subType says url) AND\n//        //    //  - the URL contains a {{…}} placeholder OR parameters array contains a {{…}} text\n//        //    var dynamicPositions = new SortedSet<int>();\n\n//        //    bool LooksDynamic(string? val) =>\n//        //    !string.IsNullOrEmpty(val) && val.Contains(\"{{\", StringComparison.Ordinal);\n\n//        //    bool IsUrlish(string? type, string? subType)\n//        //    {\n//        //        type = (type ?? string.Empty).ToLowerInvariant();\n//        //        subType = (subType ?? string.Empty).ToLowerInvariant();\n//        //        return type == \"url\" || subType == \"url\";\n//        //    }\n\n\n//        //    int GetPos(object b, int fallbackOneBased)\n//        //    {\n//        //        var t = b.GetType();\n//        //        if (t.GetProperty(\"Index\")?.GetValue(b) is int idx && idx > 0) return idx;\n//        //        if (t.GetProperty(\"Order\")?.GetValue(b) is int ord && ord >= 0) return ord + 1;\n//        //        if (t.GetProperty(\"Position\")?.GetValue(b) is int pos && pos > 0) return pos;\n//        //        return fallbackOneBased;\n//        //    }\n\n//        //    // A) meta.Buttons\n//        //    if (meta?.Buttons != null && meta.Buttons.Count > 0)\n//        //    {\n//        //        for (int i = 0; i < meta.Buttons.Count && dynamicPositions.Count < 3; i++)\n//        //        {\n//        //            var b = meta.Buttons[i];\n//        //            var type = b.Type;\n//        //            var subType = b.GetType().GetProperty(\"SubType\")?.GetValue(b) as string; // if present\n//        //            var value = b.Value;\n\n//        //            if (IsUrlish(type, subType) && LooksDynamic(value))\n//        //            {\n//        //                var pos = GetPos(b, i + 1);\n//        //                if (pos >= 1 && pos <= 3) dynamicPositions.Add(pos);\n//        //            }\n//        //        }\n//        //    }\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignDispatchController.cs",
      "sha256": "10a3d3b319ca0133677bf5c5a4574cefc68fc164ddc1ceb4d65bf1ee11ebe84e",
      "language": "csharp",
      "size": 1904,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/dispatch\")]\n    [Authorize]\n    public class CampaignDispatchController : ControllerBase\n    {\n        private readonly ICampaignDispatcher _dispatcher;\n\n        public CampaignDispatchController(ICampaignDispatcher dispatcher)\n        {\n            _dispatcher = dispatcher;\n        }\n\n        /// <summary>\n        /// Dispatch materialized recipients to the outbound queue.\n        /// Query: mode=canary|full, count=25 (used when mode=canary).\n        /// </summary>\n        [HttpPost]\n        public async Task<ActionResult<CampaignDispatchResponseDto>> Dispatch(\n            [FromRoute] Guid campaignId,\n            [FromQuery] string mode = \"canary\",\n            [FromQuery] int count = 25,\n            CancellationToken ct = default)\n        {\n            try\n            {\n                var businessId = ResolveBusinessId();\n                var resp = await _dispatcher.DispatchAsync(businessId, campaignId, mode, count, ct);\n                return Ok(resp);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Dispatch failed for Campaign {CampaignId}\", campaignId);\n                return Problem(title: \"Dispatch failed\", detail: ex.Message, statusCode: 400);\n            }\n        }\n\n        private Guid ResolveBusinessId()\n        {\n            var bidStr = User.FindFirst(\"BusinessId\")?.Value\n                         ?? Request.Headers[\"X-Business-Id\"].ToString();\n            return Guid.TryParse(bidStr, out var bid) ? bid : Guid.Empty;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignDispatchPlanController.cs",
      "sha256": "fa1771645ec3aa53f0c0b793831c1a0f3bd6667a876b07d2c0494eaca0a72152",
      "language": "csharp",
      "size": 1271,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/dispatch-plan\")]\n    [Authorize]\n    public class CampaignDispatchPlanController : ControllerBase\n    {\n        private readonly ICampaignDispatchPlannerService _planner;\n\n        public CampaignDispatchPlanController(ICampaignDispatchPlannerService planner)\n        {\n            _planner = planner;\n        }\n\n        /// <summary>\n        /// Returns a read-only dispatch plan: batches, offsets, and throttle summary.\n        /// </summary>\n        [HttpGet]\n        public async Task<IActionResult> Get(Guid campaignId, [FromQuery] int limit = 2000, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            Log.Information(\"Dispatch plan requested {@Ctx}\", new { businessId, campaignId, limit });\n\n            var data = await _planner.PlanAsync(businessId, campaignId, limit, ct);\n            return Ok(new { success = true, data });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignDispatchPlanExportController.cs",
      "sha256": "99c81c3dcba5bf94c119c5e35543288d8a87e691eb1f55fe071d9fee7eec30f5",
      "language": "csharp",
      "size": 1332,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/dispatch-plan.csv\")]\n    [Authorize]\n    public class CampaignDispatchPlanExportController : ControllerBase\n    {\n        private readonly ICsvExportService _csv;\n\n        public CampaignDispatchPlanExportController(ICsvExportService csv)\n        {\n            _csv = csv;\n        }\n\n        /// <summary>\n        /// Streams a CSV of the dispatch plan (batches, offsets, recipients).\n        /// </summary>\n        [HttpGet]\n        public async Task<IActionResult> Get(Guid campaignId, [FromQuery] int limit = 2000, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            Log.Information(\"Dispatch Plan CSV requested {@Ctx}\", new { businessId, campaignId, limit });\n\n            var bytes = await _csv.BuildDispatchPlanCsvAsync(businessId, campaignId, limit, ct);\n            var fileName = $\"dispatch_plan_{campaignId:N}.csv\";\n            return File(bytes, \"text/csv; charset=utf-8\", fileName);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignDryRunController.cs",
      "sha256": "578d68a41c396cb59025d014be7fa8a9c8776b15be6d7e098e8b5a3511502eb0",
      "language": "csharp",
      "size": 1127,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns\")]\n    [Authorize]\n    public sealed class CampaignDryRunController : ControllerBase\n    {\n        private readonly ICampaignService _campaigns;\n        public CampaignDryRunController(ICampaignService campaigns) => _campaigns = campaigns;\n\n        // GET /api/campaigns/{campaignId}/dry-run?limit=20\n        [HttpGet(\"{campaignId:guid}/dry-run\")]\n        public async Task<IActionResult> DryRun([FromRoute] Guid campaignId, [FromQuery] int limit = 20)\n        {\n            if (campaignId == Guid.Empty) return BadRequest(new { message = \"Invalid campaignId\" });\n            if (limit <= 0) limit = 20;\n            if (limit > 200) limit = 200; // guardrails\n\n            var resp = await _campaigns.DryRunTemplateCampaignAsync(campaignId, limit);\n            return Ok(resp);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignMappingsController.cs",
      "sha256": "e4aa5327bae9ff9f05b0388d401b2855e319d128d59889ebd9b8c165dba29616",
      "language": "csharp",
      "size": 3321,
      "content": "using System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/mappings\")]\n    [Authorize] // adjust to your auth\n    public sealed class CampaignMappingsController : ControllerBase\n    {\n        private readonly IVariableMappingService _svc;\n        private readonly IMappingSuggestionService _suggest;\n\n        public CampaignMappingsController(IVariableMappingService svc, IMappingSuggestionService suggest)\n        {\n            _svc = svc;\n            _suggest = suggest;\n        }\n\n        /// <summary>\n        /// Returns saved variable mappings for a campaign.\n        /// Shape: dictionary of token -> source (e.g., \"first_name\" -> \"csv:First Name\")\n        /// </summary>\n        [HttpGet]\n        public async Task<IActionResult> GetAsync(\n            [FromRoute] Guid campaignId,\n            CancellationToken ct = default)\n        {\n            var businessId = GetBusinessIdOrThrow();\n            var map = await _svc.GetForCampaignAsync(businessId, campaignId, ct);\n            return Ok(map ?? new System.Collections.Generic.Dictionary<string, string>());\n        }\n\n        /// <summary>\n        /// Saves variable mappings for a campaign.\n        /// Body: { \"tokenA\": \"csv:HeaderA\", \"tokenB\": \"static:Hello\", ... }\n        /// </summary>\n        [HttpPost]\n        public async Task<IActionResult> SaveAsync(\n            [FromRoute] Guid campaignId,\n            [FromBody] System.Collections.Generic.Dictionary<string, string> mappings,\n            CancellationToken ct = default)\n        {\n            if (mappings is null)\n                return BadRequest(\"Body cannot be null; send a mapping dictionary.\");\n\n            var businessId = GetBusinessIdOrThrow();\n            await _svc.SaveAsync(businessId, campaignId, mappings, ct);\n            return NoContent();\n        }\n\n        /// <summary>\n        /// Suggest default mappings from CSV headers and campaign tokens.\n        /// GET /api/campaigns/{campaignId}/mappings/suggest?batchId=...\n        /// </summary>\n        [HttpGet(\"suggest\")]\n        public async Task<IActionResult> SuggestAsync(\n            [FromRoute] Guid campaignId,\n            [FromQuery] Guid batchId,\n            CancellationToken ct = default)\n        {\n            if (batchId == Guid.Empty)\n                return BadRequest(\"batchId is required.\");\n\n            var businessId = GetBusinessIdOrThrow();\n            var map = await _suggest.SuggestAsync(businessId, campaignId, batchId, ct);\n            return Ok(map);\n        }\n\n        // -- helpers --\n\n        private Guid GetBusinessIdOrThrow()\n        {\n            string? raw =\n                User?.FindFirst(\"business_id\")?.Value ??\n                User?.FindFirst(\"BusinessId\")?.Value ??\n                Request.Headers[\"X-Business-Id\"].FirstOrDefault();\n\n            if (!Guid.TryParse(raw, out var id))\n                throw new UnauthorizedAccessException(\n                    \"Business context missing. Pass X-Business-Id header or ensure the business_id claim is present.\");\n\n            return id;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignMaterializationController.cs",
      "sha256": "ba44f1458a39c736281ecc8dbed383fac7a646d34853127258aff6364bcf25d7",
      "language": "csharp",
      "size": 1417,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/materialize\")]\n    [Authorize]\n    public class CampaignMaterializationController : ControllerBase\n    {\n        private readonly ICampaignMaterializationService _materializer;\n\n        public CampaignMaterializationController(ICampaignMaterializationService materializer)\n        {\n            _materializer = materializer;\n        }\n\n        /// <summary>\n        /// Returns a page (limit) of fully materialized recipients: placeholder values and resolved button URLs.\n        /// No send, read-only.\n        /// </summary>\n        [HttpGet]\n        public async Task<IActionResult> Get(Guid campaignId, [FromQuery] int limit = 200, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            Log.Information(\"Materialize GET requested {@Ctx}\", new { businessId, campaignId, limit });\n\n            var data = await _materializer.MaterializeAsync(businessId, campaignId, limit, ct);\n            return Ok(new { success = true, data });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignMaterializationExportController.cs",
      "sha256": "1b18901d4ea990ce054a6dbb6d28e9e86341034ba56f73c92987ba2a015d8aba",
      "language": "csharp",
      "size": 1330,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/materialize.csv\")]\n    [Authorize]\n    public class CampaignMaterializationExportController : ControllerBase\n    {\n        private readonly ICsvExportService _csv;\n\n        public CampaignMaterializationExportController(ICsvExportService csv)\n        {\n            _csv = csv;\n        }\n\n        /// <summary>\n        /// Streams a CSV of materialized recipients (params + button URLs).\n        /// </summary>\n        [HttpGet]\n        public async Task<IActionResult> Get(Guid campaignId, [FromQuery] int limit = 200, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            Log.Information(\"Materialize CSV requested {@Ctx}\", new { businessId, campaignId, limit });\n\n            var bytes = await _csv.BuildMaterializedCsvAsync(businessId, campaignId, limit, ct);\n            var fileName = $\"materialized_{campaignId:N}.csv\";\n            return File(bytes, \"text/csv; charset=utf-8\", fileName);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignMaterializeController.cs",
      "sha256": "b33ba1d9af212e9a0085afb4690075cb7a604acfff240d0f281e30c5fd261c49",
      "language": "csharp",
      "size": 3621,
      "content": "// File: Features/CampaignModule/Controllers/CampaignMaterializeController.cs\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/materialize\")]\n    [Authorize]\n    public class CampaignMaterializeController : ControllerBase\n    {\n        private readonly ICampaignMaterializer _csvMaterializer;\n        private readonly ICampaignMaterializationService _recipientPreview;\n\n        public CampaignMaterializeController(\n            ICampaignMaterializer csvMaterializer,\n            ICampaignMaterializationService recipientPreview)\n        {\n            _csvMaterializer = csvMaterializer;\n            _recipientPreview = recipientPreview;\n        }\n\n        /// <summary>\n        /// CSV-based materialization. Use Persist=false for dry-run preview; Persist=true to commit Audience + Recipients.\n        /// </summary>\n        [HttpPost]\n        public async Task<ActionResult<CampaignCsvMaterializeResponseDto>> CsvCreate(\n            [FromRoute] Guid campaignId,\n            [FromBody] CampaignCsvMaterializeRequestDto dto,\n            CancellationToken ct)\n        {\n            try\n            {\n                if (dto is null) return BadRequest(\"Body required.\");\n\n                var businessId = ResolveBusinessId();\n                Log.Information(\"📦 Materialize request: campaign={CampaignId} persist={Persist} batch={BatchId} audience='{Audience}'\",\n                    campaignId, dto.Persist, dto.CsvBatchId, dto.AudienceName);\n\n                var result = await _csvMaterializer.CreateAsync(businessId, campaignId, dto, ct);\n\n                Log.Information(\"📦 Materialize result: campaign={CampaignId} materialized={Count} skipped={Skipped} audienceId={AudienceId}\",\n                    campaignId, result.MaterializedCount, result.SkippedCount, result.AudienceId);\n\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"CSV materialize failed for Campaign {CampaignId}\", campaignId);\n                return Problem(title: \"CSV materialize failed\", detail: ex.Message, statusCode: 400);\n            }\n        }\n\n        /// <summary>\n        /// Recipient-based preview (read-only), using existing recipients + contacts.\n        /// </summary>\n        [HttpGet(\"recipients\")]\n        public async Task<ActionResult<CampaignMaterializeResultDto>> RecipientPreview(\n            [FromRoute] Guid campaignId,\n            [FromQuery] int limit = 200,\n            CancellationToken ct = default)\n        {\n            try\n            {\n                var businessId = ResolveBusinessId();\n                var result = await _recipientPreview.MaterializeAsync(businessId, campaignId, limit, ct);\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Recipient preview failed for Campaign {CampaignId}\", campaignId);\n                return Problem(title: \"Recipient preview failed\", detail: ex.Message, statusCode: 400);\n            }\n        }\n\n        private Guid ResolveBusinessId()\n        {\n            var bidStr = User.FindFirst(\"BusinessId\")?.Value\n                         ?? Request.Headers[\"X-Business-Id\"].ToString();\n            return Guid.TryParse(bidStr, out var bid) ? bid : Guid.Empty;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignPreviewController.cs",
      "sha256": "0f88ad7bec9bc43c01918eaa6fe58c499f1926fecc2a7e9430ae6d99cc47cf36",
      "language": "csharp",
      "size": 1384,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Shared; // User.GetBusinessId()\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/preview\")]\n    [Authorize]\n    public class CampaignPreviewController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        private readonly ICampaignPreviewService _preview;\n\n        public CampaignPreviewController(AppDbContext db, ICampaignPreviewService preview)\n        {\n            _db = db; _preview = preview;\n        }\n\n        [HttpPost]\n        public async Task<ActionResult<CampaignPreviewResponseDto>> Preview(Guid campaignId, [FromBody] CampaignPreviewRequestDto req)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var exists = await _db.Campaigns.AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n            if (!exists) return NotFound();\n\n            var data = await _preview.PreviewAsync(businessId, campaignId, req?.ContactId);\n            return Ok(data);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignRecipientController.cs",
      "sha256": "247e52ea9259e04d5bc4fb6e22d3aa4791b77af05431022b0572a837bbf7e326",
      "language": "csharp",
      "size": 3341,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignRecipientController : ControllerBase\n    {\n        private readonly ICampaignRecipientService _recipientService;\n\n        public CampaignRecipientController(ICampaignRecipientService recipientService)\n        {\n            _recipientService = recipientService;\n        }\n\n        // ✅ Get a single recipient by ID\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CampaignRecipientDto>> GetRecipientById(Guid id)\n        {\n            var recipient = await _recipientService.GetByIdAsync(id);\n            if (recipient == null)\n                return NotFound(new { message = \"Recipient not found\" });\n\n            return Ok(recipient);\n        }\n\n        // ✅ Get all recipients for a specific campaign\n        [HttpGet(\"/api/campaigns/{campaignId}/recipients\")]\n        public async Task<ActionResult> GetRecipientsForCampaign(Guid campaignId)\n        {\n            var recipients = await _recipientService.GetByCampaignIdAsync(campaignId);\n            return Ok(recipients);\n        }\n\n        // ✅ Update recipient status (e.g., from Pending → Sent)\n        [HttpPut(\"{recipientId}/status\")]\n        public async Task<ActionResult> UpdateStatus(Guid recipientId, [FromQuery] string newStatus)\n        {\n            var success = await _recipientService.UpdateStatusAsync(recipientId, newStatus);\n            if (!success)\n                return NotFound(new { message = \"Recipient not found or update failed\" });\n\n            return Ok(new { message = \"Status updated\" });\n        }\n\n        // ✅ Track a reply from customer\n        [HttpPut(\"{recipientId}/reply\")]\n        public async Task<ActionResult> TrackReply(Guid recipientId, [FromQuery] string replyText)\n        {\n            var success = await _recipientService.TrackReplyAsync(recipientId, replyText);\n            if (!success)\n                return NotFound(new { message = \"Recipient not found or tracking failed\" });\n\n            return Ok(new { message = \"Reply tracked\" });\n        }\n\n        // 🔍 Search recipients by optional filters (status, keyword)\n        [HttpGet(\"search\")]\n        public async Task<ActionResult<List<CampaignRecipientDto>>> SearchRecipients([FromQuery] string? status, [FromQuery] string? keyword)\n        {\n            var results = await _recipientService.SearchRecipientsAsync(status, keyword);\n            return Ok(results);\n        }\n\n        [HttpPost(\"{id}/assign-contacts\")]\n        public async Task<IActionResult> AssignContacts(Guid id, [FromBody] AssignContactsDto dto)\n        {\n            try\n            {\n                await _recipientService.AssignContactsToCampaignAsync(id, dto.ContactIds);\n                return Ok(new { message = \"Contacts assigned successfully\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error assigning contacts to campaign\");\n                return StatusCode(500, new { message = \"Failed to assign contacts\" });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignRetryController.cs",
      "sha256": "ca2204f071f6a85505d1550007e2bb2fa0ea7c35a4d13542b1ed9727751b1b9f",
      "language": "csharp",
      "size": 1424,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns\")]\n    [Authorize]\n    public sealed class CampaignRetryController : ControllerBase\n    {\n        private readonly Services.ICampaignRetryService _retry;\n\n        public CampaignRetryController(Services.ICampaignRetryService retry)\n        {\n            _retry = retry;\n        }\n\n        // POST /api/campaigns/{campaignId}/retry-failed?limit=200\n        [HttpPost(\"{campaignId:guid}/retry-failed\")]\n        public async Task<IActionResult> RetryFailed([FromRoute] Guid campaignId, [FromQuery] int limit = 200)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty)\n                return Unauthorized(new { success = false, error = \"Invalid business context.\" });\n\n            try\n            {\n                var data = await _retry.RetryFailedAsync(businessId, campaignId, limit);\n                return Ok(new { success = true, data });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"RetryFailed error for Campaign {CampaignId}\", campaignId);\n                return BadRequest(new { success = false, error = ex.Message });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignVariableMapController.cs",
      "sha256": "882eb072e75759c98b2257f09ada75c7721d73996978f7d35a4ce3721ee13767",
      "language": "csharp",
      "size": 1942,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Shared; // User.GetBusinessId()\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/variables\")]\n    [Authorize]\n    public class CampaignVariableMapController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        private readonly ICampaignVariableMapService _svc;\n\n        public CampaignVariableMapController(AppDbContext db, ICampaignVariableMapService svc)\n        { _db = db; _svc = svc; }\n\n        [HttpGet]\n        public async Task<IActionResult> Get(Guid campaignId)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var exists = await _db.Campaigns.AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n            if (!exists) return NotFound(new { success = false, message = \"Campaign not found\" });\n\n            var data = await _svc.GetAsync(businessId, campaignId);\n            return Ok(new { success = true, data });\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Save(Guid campaignId, [FromBody] CampaignVariableMapDto body)\n        {\n            var businessId = User.GetBusinessId();\n            var userName = User.Identity?.Name ?? \"system\";\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            if (body == null) return BadRequest(new { success = false, message = \"Body required\" });\n            body.CampaignId = campaignId;\n\n            var ok = await _svc.SaveAsync(businessId, body, userName);\n            return Ok(new { success = ok });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CsvBatchController.cs",
      "sha256": "c0570a7e546e94d11dfba66c342200f26f65b9d289abf5a3f3b26cc34c75d3f6",
      "language": "csharp",
      "size": 14872,
      "content": "using System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Shared;   // User.GetBusinessId()\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignModule.DTOs.Requests;  // ResponseResult\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/csv/batch\")]\n    [Authorize]\n    public class CsvBatchController : ControllerBase\n    {\n        private readonly ICsvBatchService _service;\n\n        public CsvBatchController(ICsvBatchService service)\n        {\n            _service = service;\n        }\n\n        /// <summary>Upload a CSV, create a batch, and ingest rows.</summary>\n        [HttpPost]\n        [RequestSizeLimit(1024L * 1024L * 200L)] // 200 MB\n        public async Task<IActionResult> Upload(\n            [FromForm] CsvBatchUploadForm form,\n            CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty)\n                return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n            if (form.File is null || form.File.Length == 0)\n                return BadRequest(ResponseResult.ErrorInfo(\"CSV file is required\"));\n\n            // soft sanity (many browsers use text/csv; don't block others)\n            var allowed = new[] { \"text/csv\", \"application/vnd.ms-excel\", \"application/octet-stream\" };\n            if (!allowed.Contains(form.File.ContentType, StringComparer.OrdinalIgnoreCase))\n                Log.Warning(\"Unusual CSV content type: {ContentType}\", form.File.ContentType);\n\n            await using var stream = form.File.OpenReadStream();\n\n            var result = await _service.CreateAndIngestAsync(\n                businessId: businessId,\n                fileName: form.File.FileName,\n                stream: stream,\n                audienceId: form.AudienceId,\n                ct: ct);\n\n            return Ok(new { success = true, data = result });\n        }\n\n\n        [HttpGet(\"{batchId:guid}\")]\n        public async Task<IActionResult> Get(Guid batchId, CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n            var result = await _service.GetBatchAsync(businessId, batchId, ct);\n            if (result == null) return NotFound(ResponseResult.ErrorInfo(\"Batch not found\"));\n            return Ok(new { success = true, data = result });\n        }\n\n        [HttpGet(\"{batchId:guid}/sample\")]\n        public async Task<IActionResult> Sample(Guid batchId, [FromQuery] int take = 20, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n            var rows = await _service.GetSamplesAsync(businessId, batchId, take, ct);\n            return Ok(new { success = true, data = rows });\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> List([FromQuery] int limit = 20, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n            var list = await _service.ListBatchesAsync(businessId, limit, ct);\n            return Ok(new { success = true, data = list });\n        }\n\n        [HttpGet(\"{batchId:guid}/rows\")]\n        public async Task<IActionResult> RowsPage(Guid batchId, [FromQuery] int skip = 0, [FromQuery] int take = 50, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n            var page = await _service.GetRowsPageAsync(businessId, batchId, skip, take, ct);\n            return Ok(new { success = true, data = page });\n        }\n\n        //[HttpPost(\"{batchId:guid}/validate\")]\n        //public async Task<IActionResult> Validate(Guid batchId, [FromBody] CsvBatchValidationRequestDto request, CancellationToken ct = default)\n        //{\n        //    var businessId = User.GetBusinessId();\n        //    if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n        //    var result = await _service.ValidateAsync(businessId, batchId, request, ct);\n        //    return Ok(new { success = true, data = result });\n        //}\n\n        [HttpDelete(\"{batchId:guid}\")]\n        public async Task<IActionResult> Delete(Guid batchId, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n            var ok = await _service.DeleteBatchAsync(businessId, batchId, ct);\n            return ok ? Ok(new { success = true }) : NotFound(ResponseResult.ErrorInfo(\"Batch not found\"));\n        }\n    }\n}\n\n\n//using System;\n//using System.Linq;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Http;\n//using Microsoft.AspNetCore.Mvc;\n//using Serilog;\n//using xbytechat.api.Features.CampaignModule.DTOs;\n//using xbytechat.api.Features.CampaignModule.Services;\n//using xbytechat.api.Helpers; // User.GetBusinessId()\n//using xbytechat.api.Shared;  // ResponseResult\n\n//namespace xbytechat.api.Features.CampaignModule.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/csv/batch\")]\n//    [Authorize]\n//    public class CsvBatchController : ControllerBase\n//    {\n//        private readonly ICsvBatchService _service;\n\n//        public CsvBatchController(ICsvBatchService service)\n//        {\n//            _service = service;\n//        }\n\n//        /// <summary>Upload a CSV, create a batch, and ingest rows.</summary>\n//        [HttpPost]\n//        [RequestSizeLimit(1024L * 1024L * 200L)] // 200 MB cap; adjust as needed\n//        public async Task<IActionResult> Upload(\n//            [FromQuery] Guid? audienceId,\n//            [FromForm] IFormFile file,\n//            CancellationToken ct)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty)\n//                return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n//            if (file is null || file.Length == 0)\n//                return BadRequest(ResponseResult.ErrorInfo(\"CSV file is required\"));\n\n//            // soft sanity (many browsers use text/csv; don't block others)\n//            var allowed = new[] { \"text/csv\", \"application/vnd.ms-excel\", \"application/octet-stream\" };\n//            if (!allowed.Contains(file.ContentType, StringComparer.OrdinalIgnoreCase))\n//                Log.Warning(\"Unusual CSV content type: {ContentType}\", file.ContentType);\n\n//            await using var stream = file.OpenReadStream();\n\n//            // All validation (incl. optional audience check) happens inside the service.\n//            var result = await _service.CreateAndIngestAsync(\n//                businessId: businessId,\n//                fileName: file.FileName,\n//                stream: stream,\n//                audienceId: audienceId,\n//                ct: ct);\n\n//            return Ok(new { success = true, data = result });\n//        }\n\n//        /// <summary>Get batch info (headers, counts)</summary>\n//        [HttpGet(\"{batchId:guid}\")]\n//        public async Task<IActionResult> Get(Guid batchId, CancellationToken ct)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n//            var result = await _service.GetBatchAsync(businessId, batchId, ct);\n//            if (result == null) return NotFound(ResponseResult.ErrorInfo(\"Batch not found\"));\n\n//            return Ok(new { success = true, data = result });\n//        }\n\n//        /// <summary>Get first N sample rows to help build mappings.</summary>\n//        [HttpGet(\"{batchId:guid}/sample\")]\n//        public async Task<IActionResult> Sample(Guid batchId, [FromQuery] int take = 20, CancellationToken ct = default)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n//            var rows = await _service.GetSamplesAsync(businessId, batchId, take, ct);\n//            return Ok(new { success = true, data = rows });\n//        }\n\n//        // ---------------- NEW endpoints below ----------------\n\n//        /// <summary>List recent CSV batches (default 20, cap 100).</summary>\n//        [HttpGet]\n//        public async Task<IActionResult> List([FromQuery] int limit = 20, CancellationToken ct = default)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n//            var list = await _service.ListBatchesAsync(businessId, limit, ct);\n//            return Ok(new { success = true, data = list });\n//        }\n\n//        /// <summary>Get a paged slice of rows for a batch.</summary>\n//        [HttpGet(\"{batchId:guid}/rows\")]\n//        public async Task<IActionResult> RowsPage(\n//            Guid batchId,\n//            [FromQuery] int skip = 0,\n//            [FromQuery] int take = 50,\n//            CancellationToken ct = default)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n//            var page = await _service.GetRowsPageAsync(businessId, batchId, skip, take, ct);\n//            return Ok(new { success = true, data = page });\n//        }\n\n//        /// <summary>Validate a batch (phone presence, duplicates, missing required headers).</summary>\n//        [HttpPost(\"{batchId:guid}/validate\")]\n//        public async Task<IActionResult> Validate(\n//            Guid batchId,\n//            [FromBody] CsvBatchValidationRequestDto request,\n//            CancellationToken ct = default)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n//            var result = await _service.ValidateAsync(businessId, batchId, request, ct);\n//            return Ok(new { success = true, data = result });\n//        }\n\n//        /// <summary>Delete a CSV batch and all its rows (transactional).</summary>\n//        [HttpDelete(\"{batchId:guid}\")]\n//        public async Task<IActionResult> Delete(Guid batchId, CancellationToken ct = default)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n//            var ok = await _service.DeleteBatchAsync(businessId, batchId, ct);\n//            return ok ? Ok(new { success = true }) : NotFound(ResponseResult.ErrorInfo(\"Batch not found\"));\n//        }\n//    }\n//}\n\n\n//using System;\n//using System.Linq;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Http;\n//using Microsoft.AspNetCore.Mvc;\n//using Serilog;\n//using xbytechat.api;\n//using xbytechat.api.Features.CampaignModule.DTOs;\n//using xbytechat.api.Features.CampaignModule.Services;\n//using xbytechat.api.Helpers;\n//using xbytechat.api.Shared;\n\n//namespace xbytechat.api.Features.CampaignModule.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/csv/batch\")]\n//    [Authorize]\n//    public class CsvBatchController : ControllerBase\n//    {\n//        private readonly ICsvBatchService _service;\n\n//        public CsvBatchController(ICsvBatchService service)\n//        {\n//            _service = service;\n//        }\n\n//        /// <summary>\n//        /// Upload a CSV, create a batch, and ingest rows.\n//        /// </summary>\n//        [HttpPost]\n//        [RequestSizeLimit(1024L * 1024L * 200L)] // 200 MB cap; adjust as needed\n//        public async Task<IActionResult> Upload([FromQuery] Guid audienceId, IFormFile file, CancellationToken ct)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n//            if (audienceId == Guid.Empty)\n//                return BadRequest(ResponseResult.ErrorInfo(\"audienceId is required\"));\n\n//            if (file == null || file.Length == 0)\n//                return BadRequest(ResponseResult.ErrorInfo(\"CSV file is required\"));\n\n//            // quick mime sanity (optional, many browsers send text/csv)\n//            var allowed = new[] { \"text/csv\", \"application/vnd.ms-excel\", \"application/octet-stream\" };\n//            if (!allowed.Contains(file.ContentType, StringComparer.OrdinalIgnoreCase))\n//                Log.Warning(\"Unusual CSV content type: {ContentType}\", file.ContentType);\n\n//            using var stream = file.OpenReadStream();\n//            var result = await _service.CreateAndIngestAsync(businessId, audienceId, file.FileName, stream, ct);\n\n//            return Ok(new { success = true, data = result });\n//        }\n\n//        /// <summary>\n//        /// Get batch info (headers, counts)\n//        /// </summary>\n//        [HttpGet(\"{batchId:guid}\")]\n//        public async Task<IActionResult> Get(Guid batchId, CancellationToken ct)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n//            var result = await _service.GetBatchAsync(businessId, batchId, ct);\n//            if (result == null) return NotFound(ResponseResult.ErrorInfo(\"Batch not found\"));\n\n//            return Ok(new { success = true, data = result });\n//        }\n\n//        /// <summary>\n//        /// Get first N sample rows to help build mappings.\n//        /// </summary>\n//        [HttpGet(\"{batchId:guid}/sample\")]\n//        public async Task<IActionResult> Sample(Guid batchId, [FromQuery] int take = 20, CancellationToken ct = default)\n//        {\n//            var businessId = User.GetBusinessId();\n//            if (businessId == Guid.Empty) return Unauthorized(ResponseResult.ErrorInfo(\"Invalid business\"));\n\n//            var rows = await _service.GetSamplesAsync(businessId, batchId, take, ct);\n//            return Ok(new { success = true, data = rows });\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/OutboundCampaignQueueController.cs",
      "sha256": "b32af6b334cd55462ca38b0506a7d1d5a4961309a1c4d260324faec64efb7c12",
      "language": "csharp",
      "size": 4153,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Shared; // for User.GetBusinessId()\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaigns/{campaignId:guid}/queue\")]\n    [Authorize]\n    public class OutboundCampaignQueueController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        private readonly IOutboundCampaignQueueService _queue;\n\n        public OutboundCampaignQueueController(AppDbContext db, IOutboundCampaignQueueService queue)\n        {\n            _db = db; _queue = queue;\n        }\n\n        // GET: /api/campaigns/{id}/queue/jobs\n        [HttpGet(\"jobs\")]\n        public async Task<ActionResult<IEnumerable<OutboundCampaignJobDto>>> ListJobs(Guid campaignId)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            // ownership check\n            var exists = await _db.Campaigns.AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n            if (!exists) return NotFound();\n\n            var jobs = await _queue.GetJobsForCampaignAsync(businessId, campaignId);\n            return Ok(jobs.Select(Map));\n        }\n\n        // POST: /api/campaigns/{id}/queue/enqueue?forceDuplicate=false\n        [HttpPost(\"enqueue\")]\n        public async Task<ActionResult<object>> Enqueue(Guid campaignId, [FromQuery] bool forceDuplicate = false)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var exists = await _db.Campaigns.AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n            if (!exists) return NotFound();\n\n            var jobId = await _queue.EnqueueAsync(businessId, campaignId, forceDuplicate);\n            return Ok(new { success = true, jobId });\n        }\n\n        // POST: /api/campaigns/{id}/queue/{jobId}/retry\n        [HttpPost(\"{jobId:guid}/retry\")]\n        public async Task<ActionResult<object>> Retry(Guid campaignId, Guid jobId)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            // Optional: ensure job belongs to this campaign & business\n            var job = await _db.OutboundCampaignJobs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(j => j.Id == jobId && j.BusinessId == businessId && j.CampaignId == campaignId);\n\n            if (job == null) return NotFound();\n\n            var ok = await _queue.ForceRetryNowAsync(businessId, jobId);\n            return Ok(new { success = ok });\n        }\n\n        // POST: /api/campaigns/{id}/queue/{jobId}/cancel\n        [HttpPost(\"{jobId:guid}/cancel\")]\n        public async Task<ActionResult<object>> Cancel(Guid campaignId, Guid jobId)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var job = await _db.OutboundCampaignJobs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(j => j.Id == jobId && j.BusinessId == businessId && j.CampaignId == campaignId);\n\n            if (job == null) return NotFound();\n\n            var ok = await _queue.CancelAsync(businessId, jobId);\n            return Ok(new { success = ok });\n        }\n\n        private static OutboundCampaignJobDto Map(OutboundCampaignJob j) => new OutboundCampaignJobDto\n        {\n            Id = j.Id,\n            BusinessId = j.BusinessId,\n            CampaignId = j.CampaignId,\n            Status = j.Status,\n            Attempt = j.Attempt,\n            MaxAttempts = j.MaxAttempts,\n            NextAttemptAt = j.NextAttemptAt,\n            LastError = j.LastError,\n            CreatedAt = j.CreatedAt,\n            UpdatedAt = j.UpdatedAt\n        };\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/AssignContactsDto.cs",
      "sha256": "8f8b9b0da213111f833dd07dd7e5189ccc02984cef1b34deb5b1d93a5d40678e",
      "language": "csharp",
      "size": 156,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class AssignContactsDto\n    {\n        public List<Guid> ContactIds { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignButtonDto.cs",
      "sha256": "21e757f8859c9ea36b40c0d3418d5211cce8a22a26b07b81af62b723f93dc2e5",
      "language": "csharp",
      "size": 379,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignButtonDto\n    {\n        public string ButtonText { get; set; } = string.Empty; // 📍 e.g., \"Buy Now\"\n        public string ButtonType { get; set; } = \"url\";         // 🔘 url | quick_reply | call\n        public string TargetUrl { get; set; } = string.Empty;  // 🌐 or phone/call param\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignButtonParamFromMetaDto.cs",
      "sha256": "d218adbbc4e6418548f3dfe962c8b867fc7f364be490f6533d04fb5c61f17f30",
      "language": "csharp",
      "size": 391,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignButtonParamFromMetaDto\n    {\n        public string Text { get; set; } = string.Empty;\n        public string Type { get; set; } = string.Empty;\n        public string SubType { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n        public int Position { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignCreateDto.cs",
      "sha256": "6b6b7b78d42631d7c64b527942ea1452b1d5860ded056d77d24b634d801cd6be",
      "language": "csharp",
      "size": 1881,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs; // Required to reference CTAButtonDto\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignCreateDto\n    {\n        public string Name { get; set; }\n\n        [Column(TypeName = \"text\")]\n        public string MessageTemplate { get; set; }\n\n        public string? TemplateId { get; set; } // ✅ Optional Meta template ID\n\n        public string? FollowUpTemplateId { get; set; } // 🔁 Auto-reply template after interest\n\n        public string? CampaignType { get; set; } //= \"template\"; // \"text\", \"template\", \"cta\"\n\n        public Guid? CtaId { get; set; } // 🔘 For legacy CTA support (optional)\n\n        public Guid? CTAFlowConfigId { get; set; }\n        public List<CampaignButtonDto> MultiButtons { get; set; } = new(); // ✅ New multi-button support\n        public DateTime? ScheduledAt { get; set; } // 📅 Optional future scheduling\n\n        //public List<Guid>? ContactIds { get; set; } // 👥 Target contact list\n\n        public string? ImageUrl { get; set; } // 🖼️ Optional image field\n\n        public string? ImageCaption { get; set; } // 📝 Optional caption\n\n        public List<Guid> ContactIds { get; set; } = new();\n\n        public List<string>? TemplateParameters { get; set; }\n        public List<CampaignButtonParamFromMetaDto>? ButtonParams { get; set; }\n\n        // Sender fields (REQUIRED for reliability)\n        public string Provider { get; set; }            // \"PINNACLE\" | \"META_CLOUD\" (UPPERCASE)\n        public string PhoneNumberId { get; set; }\n\n        public string? HeaderKind { get; set; }        // \"image\" | \"video\" | \"document\" | \"text\" | \"none\"\n        public string? HeaderMediaUrl { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignCsvMaterializeDtos.cs",
      "sha256": "56c8084a7a0a181e779d3ad774edd588567949c55bcca324c7614b3c7528098c",
      "language": "csharp",
      "size": 1503,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public sealed class CampaignCsvMaterializeRequestDto\n    {\n        [Required] public Guid CsvBatchId { get; set; }\n        public Dictionary<string, string>? Mappings { get; set; } // token -> header or \"constant:Value\"\n        public string? PhoneField { get; set; }\n        public bool NormalizePhones { get; set; } = true;\n        public bool Deduplicate { get; set; } = true;\n        public int? Limit { get; set; } = 200;\n\n        public bool Persist { get; set; } = false;\n        public string? AudienceName { get; set; } // required when Persist=true\n    }\n\n    public sealed class CsvMaterializedRowDto\n    {\n        public int RowIndex { get; set; }\n        public string? Phone { get; set; }\n        public Dictionary<string, string> Variables { get; set; } = new();\n        public List<string> Errors { get; set; } = new();\n    }\n\n    public sealed class CampaignCsvMaterializeResponseDto\n    {\n        public Guid CampaignId { get; set; }\n        public Guid CsvBatchId { get; set; }\n        public int TotalRows { get; set; }\n        public int MaterializedCount { get; set; }\n        public int SkippedCount { get; set; }\n        public Guid? AudienceId { get; set; }          // if persisted\n        public List<CsvMaterializedRowDto> Preview { get; set; } = new();\n        public List<string> Warnings { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignDispatchDtos.cs",
      "sha256": "141796a3913c2089c829bec345ac9d929fb9d8d23826436df34de7d709426f82",
      "language": "csharp",
      "size": 884,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public sealed class CampaignDispatchResponseDto\n    {\n        public Guid CampaignId { get; set; }\n        public string Mode { get; set; } = \"canary\"; // canary|full\n        public int RequestedCount { get; set; }\n        public int SelectedCount { get; set; }\n        public int EnqueuedCount { get; set; }\n        public List<DispatchedRecipientDto> Sample { get; set; } = new(); // small sample for debug\n        public List<string> Warnings { get; set; } = new();\n    }\n\n    public sealed class DispatchedRecipientDto\n    {\n        public Guid RecipientId { get; set; }\n        public string? Phone { get; set; }\n        public string? Status { get; set; }\n        public DateTime? MaterializedAt { get; set; }\n        public string? IdempotencyKey { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignDispatchPlanDtos.cs",
      "sha256": "11f2306c03e0faa381004558316aded4856107a52df35dde32c528be27d16f34",
      "language": "csharp",
      "size": 1870,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class DispatchBatchDto\n    {\n        public int BatchNumber { get; set; }\n        public int StartIndex { get; set; }\n        public int Count { get; set; }\n\n        /// <summary>Total approximate payload size for this batch in bytes (text + buttons, naive estimate).</summary>\n        public int ApproxBytes { get; set; }\n\n        /// <summary>Seconds since plan start when this batch is allowed to start (based on throttling).</summary>\n        public int OffsetSeconds { get; set; }\n\n        public List<Guid?> RecipientIds { get; set; } = new();   // when using CampaignRecipients\n        public List<string?> Phones { get; set; } = new();\n        public List<string> Notes { get; set; } = new();\n    }\n\n    public class DispatchThrottleDto\n    {\n        public string Plan { get; set; } = \"Unknown\";\n        public string Provider { get; set; } = \"Auto\";\n        public int MaxBatchSize { get; set; } = 50;\n        public int MaxPerMinute { get; set; } = 300;\n        public int ComputedBatches { get; set; }\n        public int EstimatedMinutes { get; set; }\n        public List<string> Warnings { get; set; } = new();\n    }\n\n    public class CampaignDispatchPlanResultDto\n    {\n        public Guid CampaignId { get; set; }\n        public string TemplateName { get; set; } = string.Empty;\n        public string Language { get; set; } = \"en\";\n        public int PlaceholderCount { get; set; }\n\n        public int TotalRecipients { get; set; }\n        public int TotalApproxBytes { get; set; }\n\n        public DispatchThrottleDto Throttle { get; set; } = new();\n        public List<DispatchBatchDto> Batches { get; set; } = new();\n\n        public int WarningCount { get; set; }\n        public List<string> GlobalWarnings { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignDryRunDto.cs",
      "sha256": "eb3c8b6acf0bcc6f3ce31d5d3b62a9183655a8bdcef813406921403f8625371b",
      "language": "csharp",
      "size": 1530,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public sealed class CampaignDryRunRecipientResultDto\n    {\n        public Guid? ContactId { get; set; }\n        public string? ContactName { get; set; }\n        public string PhoneNumber { get; set; } = \"\";\n        public bool WouldSend { get; set; }\n        public List<string> Errors { get; set; } = new();\n        public List<string> Warnings { get; set; } = new();\n\n        // Provider-shaped components (Meta/Pinnacle compatible)\n        public List<object> ProviderComponents { get; set; } = new();\n    }\n\n    public sealed class CampaignDryRunResponseDto\n    {\n        public Guid CampaignId { get; set; }\n        public string CampaignType { get; set; } = \"\";\n        public string TemplateName { get; set; } = \"\";\n        public string? Language { get; set; }\n        public bool HasHeaderMedia { get; set; }\n        public int RequiredPlaceholders { get; set; }\n        public int ProvidedPlaceholders { get; set; }\n\n        public int RecipientsConsidered { get; set; }\n        public int WouldSendCount { get; set; }\n        public int ErrorCount { get; set; }\n\n        // Billability (best-effort estimate)\n        public bool EstimatedChargeable { get; set; } = true;\n        public string EstimatedConversationCategory { get; set; } = \"template_outbound\";\n        public List<string> Notes { get; set; } = new();\n\n        public List<CampaignDryRunRecipientResultDto> Results { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignDryRunDtos.cs",
      "sha256": "3ed24bbc0f923a1d28720fad67c5d2c1d8065edfb882467e24b0669d00433711",
      "language": "csharp",
      "size": 1116,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignDryRunIssueDto\n    {\n        public Guid? RecipientId { get; set; }\n        public Guid? ContactId { get; set; }\n        public string Phone { get; set; } = string.Empty;\n\n        /// <summary>\n        /// error | warn\n        /// </summary>\n        public string Severity { get; set; } = \"error\";\n\n        public string Message { get; set; } = string.Empty;\n    }\n\n    public class CampaignDryRunResultDto\n    {\n        public Guid CampaignId { get; set; }\n        public string TemplateName { get; set; } = string.Empty;\n        public string Language { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Placeholder count detected in the template (e.g., {{1}}, {{2}}, ...).\n        /// </summary>\n        public int PlaceholderCount { get; set; }\n\n        public int CheckedRecipients { get; set; }\n        public int ErrorCount { get; set; }\n        public int WarningCount { get; set; }\n\n        public List<CampaignDryRunIssueDto> Issues { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignDto.cs",
      "sha256": "bf33c6aa688063d8efd2734082713e23890bb97409bae31a5bc9d18c00ccd001",
      "language": "csharp",
      "size": 1223,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignDto\n    {\n        public Guid Id { get; set; }\n\n        public string Name { get; set; }\n\n        public string MessageTemplate { get; set; }\n\n        public string? TemplateId { get; set; }\n        public string? MessageBody { get; set; }\n        public string? CampaignType { get; set; }\n\n        public string? Status { get; set; }\n\n        public string? ImageUrl { get; set; }\n\n        public string? ImageCaption { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime? ScheduledAt { get; set; }\n\n        public Guid? CtaId { get; set; }\n\n        public CtaPreviewDto? Cta { get; set; }\n\n        public List<CampaignButtonDto> MultiButtons { get; set; } = new();\n\n        public Guid? CTAFlowConfigId { get; set; }\n        public string? CTAFlowName { get; set; }\n    }\n\n    // 📦 Embedded DTO for CTA preview (title + button text only)\n    public class CtaPreviewDto\n    {\n        public string Title { get; set; } = string.Empty;\n\n        public string ButtonText { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignMaterializationDtos.cs",
      "sha256": "8764d77154e31907654114e66ffc6eb0c83f456db58b64632a1df0a92a139b8e",
      "language": "csharp",
      "size": 2077,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class ButtonResolutionDto\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public string? RawTemplateValue { get; set; } // e.g. \"https://x.com/{{1}}?q={{2}}\"\n        public string? ResolvedUrl { get; set; }\n        public List<string> UsedPlaceholders { get; set; } = new(); // e.g. [\"{{1}}\",\"{{2}}\"]\n        public List<string> MissingArguments { get; set; } = new(); // e.g. [\"{{2}}\"]\n        public List<string> Notes { get; set; } = new();\n    }\n\n    public class TemplateParamResolutionDto\n    {\n        public int Index { get; set; } // 1-based placeholder index from template ({{1}}, {{2}}, ...)\n        public string? Value { get; set; }\n        public string SourceType { get; set; } = string.Empty; // AudienceColumn | Static | Expression\n        public string? SourceKey { get; set; } // column name when SourceType = AudienceColumn\n        public bool IsMissing { get; set; }\n        public string? Note { get; set; }\n    }\n\n    public class MaterializedRecipientDto\n    {\n        public Guid? RecipientId { get; set; }      // when using CampaignRecipients\n        public Guid? ContactId { get; set; }\n        public string? Phone { get; set; }\n\n        public List<TemplateParamResolutionDto> Parameters { get; set; } = new();\n        public List<ButtonResolutionDto> Buttons { get; set; } = new();\n\n        public List<string> Warnings { get; set; } = new();\n        public List<string> Errors { get; set; } = new();\n    }\n\n    public class CampaignMaterializeResultDto\n    {\n        public Guid CampaignId { get; set; }\n        public string TemplateName { get; set; } = string.Empty;\n        public string Language { get; set; } = string.Empty;\n        public int PlaceholderCount { get; set; }\n\n        public int ReturnedCount { get; set; }\n        public int ErrorCount { get; set; }\n        public int WarningCount { get; set; }\n\n        public List<MaterializedRecipientDto> Rows { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignMaterializeDtos.cs",
      "sha256": "b0877006311fb95066d695b7004e7b9ac971424f049675ca95d2e24fbbbcced6",
      "language": "csharp",
      "size": 2046,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public sealed class CampaignMaterializeRequestDto\n    {\n        [Required] public Guid CsvBatchId { get; set; }\n\n        /// <summary>\n        /// Optional explicit mapping: token -> CSV header name or \"constant:Value\".\n        /// If null/empty, we’ll try loading saved mappings; if none exist, we fall back to header==token.\n        /// </summary>\n        public Dictionary<string, string>? Mappings { get; set; }\n\n        /// <summary>\n        /// If not provided, we will try common headers like phone, mobile, whatsapp, msisdn.\n        /// </summary>\n        public string? PhoneField { get; set; }\n\n        public bool NormalizePhones { get; set; } = true;\n        public bool Deduplicate { get; set; } = true;\n\n        /// <summary>Preview only first N rows; 0 or null means all.</summary>\n        public int? Limit { get; set; } = 200;\n\n        /// <summary>When true, materialized rows are persisted to Audience + CampaignRecipients.</summary>\n        public bool Persist { get; set; } = false;\n\n        /// <summary>Required when Persist = true.</summary>\n        public string? AudienceName { get; set; }\n    }\n\n    public sealed class MaterializedRowDto\n    {\n        public int RowIndex { get; set; }\n        public string? Phone { get; set; }\n        public Dictionary<string, string> Variables { get; set; } = new();\n        public List<string> Errors { get; set; } = new();\n    }\n\n    public sealed class CampaignMaterializeResponseDto\n    {\n        public Guid CampaignId { get; set; }\n        public Guid CsvBatchId { get; set; }\n        public int TotalRows { get; set; }\n        public int MaterializedCount { get; set; }\n        public int SkippedCount { get; set; }\n        public Guid? AudienceId { get; set; } // when persisted\n        public List<MaterializedRowDto> Preview { get; set; } = new();\n        public List<string> Warnings { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignPreviewDto.cs",
      "sha256": "ebe80e7f7af1dd5e800a15177ed1305cff9c9b04a8a9b5c000a8afc3de02d1c5",
      "language": "csharp",
      "size": 1547,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignPreviewRequestDto\n    {\n        // Optional: preview using a specific recipient’s contact info\n        public Guid? ContactId { get; set; }\n    }\n\n    public class CampaignPreviewResponseDto\n    {\n        public Guid CampaignId { get; set; }\n        public string TemplateName { get; set; } = \"\";\n        public string Language { get; set; } = \"en_US\";\n        public int PlaceholderCount { get; set; }\n\n        public string BodyPreview { get; set; } = \"\";\n        public List<string> MissingParams { get; set; } = new();  // e.g. [\"{{2}} required but not supplied\"]\n\n        public bool HasHeaderMedia { get; set; }\n        public string? HeaderType { get; set; } // IMAGE/VIDEO/DOCUMENT (if you later persist)\n\n        public List<ButtonPreviewDto> Buttons { get; set; } = new();\n    }\n\n    public class ButtonPreviewDto\n    {\n        public int Index { get; set; }            // 0..2\n        public string Text { get; set; } = \"\";\n        public string Type { get; set; } = \"URL\"; // Meta types\n        public bool IsDynamic { get; set; }       // needs parameter\n        public string? TemplateParamBase { get; set; } // e.g. \"/r/{{1}}\"\n        public string? CampaignValue { get; set; } // what user set in campaign (for dynamic)\n        public string? TokenParam { get; set; }    // what we’d send when base has {{1}}\n        public string? FinalUrlPreview { get; set; } // full tracked URL preview\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignRecipientDto.cs",
      "sha256": "028557690cc0247c25a5db36100a674f3a36f1d96ac0eba571a51fd3aa57febe",
      "language": "csharp",
      "size": 756,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignRecipientDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid? ContactId { get; set; }\n        public string ContactName { get; set; }\n        public string ContactPhone { get; set; }\n\n        public string Status { get; set; }\n        public DateTime? SentAt { get; set; }\n\n        // 🔁 Advanced Fields (for analytics & future automation)\n        public string? BotId { get; set; }\n        public string? MessagePreview { get; set; }\n        public string? ClickedCTA { get; set; }\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n        public bool IsAutoTagged { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignRetryDtos.cs",
      "sha256": "f6d2dd143ecf14f40ec9b5d30aad7ad83309e99f5aab199c117f31dce552d68f",
      "language": "csharp",
      "size": 539,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignRetryResultDto\n    {\n        public Guid CampaignId { get; set; }\n        public int ConsideredFailed { get; set; }\n        public int Retried { get; set; }\n        public int Skipped { get; set; }  // e.g., duplicates, already succeeded, or filtered out\n        public List<Guid> RecipientIdsSample { get; set; } = new(); // up to 20 IDs for quick inspection\n        public string? Note { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignSummaryDto.cs",
      "sha256": "e425735df2c030aa13e5b046f7039f9796104b05b3ec998e039ab1d7eb40b0e0",
      "language": "csharp",
      "size": 687,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string? Name { get; set; }\n        public string? Status { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public int Delivered { get; set; }\n        public int Read { get; set; }\n\n        public string? ImageUrl { get; set; } // ✅ Add this\n        public string? ImageCaption { get; set; } // ✅ Add this\n        public string? CtaTitle { get; set; } // Optional: For CTA info\n        public int RecipientCount { get; set; } // Optional: To show 0/10 etc\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignVariableMapDto.cs",
      "sha256": "09ea689514db078a870217be4fac18f0168d401c0cc23df1d1e9a96099feaa5e",
      "language": "csharp",
      "size": 936,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignVariableMapDto\n    {\n        public Guid CampaignId { get; set; }\n        public List<CampaignVariableMapItemDto> Items { get; set; } = new();\n    }\n\n    public class CampaignVariableMapItemDto\n    {\n        // Matches your normalized model fields\n        public string Component { get; set; } = \"\";   // \"body\", \"header\", \"button:url:1\"\n        public int Index { get; set; }                // 1..N\n\n        public string SourceType { get; set; } = \"Static\"; // ContactField | CsvColumn | Static | Expression\n        public string? SourceKey { get; set; }             // \"name\" / CSV header, etc.\n        public string? StaticValue { get; set; }\n        public string? Expression { get; set; }\n        public string? DefaultValue { get; set; }\n        public bool IsRequired { get; set; } = false;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CsvBatchListItemDto.cs",
      "sha256": "a3ecc66b83ee911be585b7fc50285b27717bedb0f0d6a709ee1532a5116f338a",
      "language": "csharp",
      "size": 501,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    /// <summary>\n    /// Lightweight projection for listing recent CSV batches.\n    /// </summary>\n    public sealed class CsvBatchListItemDto\n    {\n        public Guid BatchId { get; set; }\n        public string? FileName { get; set; }\n        public int RowCount { get; set; }\n        public string Status { get; set; } = \"ready\"; // ready | ingesting | failed | complete\n        public DateTime CreatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CsvBatchRowsPageDto.cs",
      "sha256": "f884ce43dea32e9316e6d9c44036d937745a81ce2f82ea1da5625cdcd446f6a9",
      "language": "csharp",
      "size": 481,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    /// <summary>\n    /// Paged slice of CSV rows for previewing a batch.\n    /// </summary>\n    public sealed class CsvBatchRowsPageDto\n    {\n        public Guid BatchId { get; set; }\n        public int TotalRows { get; set; }\n        public int Skip { get; set; }\n        public int Take { get; set; }\n        public List<CsvRowSampleDto> Rows { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CsvBatchValidationDtos.cs",
      "sha256": "ad1652fd6b89c2d226dd44e051a9b9c5311e7db7d377de150c8dafcd4e454bd2",
      "language": "csharp",
      "size": 1541,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public sealed class CsvBatchValidationRequestDto\n    {\n        /// <summary>Explicit phone column to use; if null we'll try to auto-detect.</summary>\n        public string? PhoneField { get; set; }\n\n        /// <summary>Normalize phones (strip punctuation/leading zeros; add 91 for 10-digit local).</summary>\n        public bool NormalizePhones { get; set; } = true;\n\n        /// <summary>Report duplicates after normalization.</summary>\n        public bool Deduplicate { get; set; } = true;\n\n        /// <summary>Headers that must exist in the CSV.</summary>\n        public List<string>? RequiredHeaders { get; set; }\n\n        /// <summary>How many problematic rows to include in the response samples.</summary>\n        public int SampleSize { get; set; } = 20;\n    }\n\n    public sealed class CsvBatchValidationResultDto\n    {\n        public Guid BatchId { get; set; }\n        public int TotalRows { get; set; }\n\n        public string? PhoneField { get; set; }\n\n        public int MissingPhoneCount { get; set; }\n        public int DuplicatePhoneCount { get; set; }\n\n        public List<string> MissingRequiredHeaders { get; set; } = new();\n        public List<string> Warnings { get; set; } = new();\n        public List<string> Errors { get; set; } = new();\n\n        /// <summary>Sample of problematic rows (missing phone / dup / other).</summary>\n        public List<CsvRowSampleDto> ProblemSamples { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/FlowListItemDto.cs",
      "sha256": "3121c1e145f2d4fd8f1f4978f314782f0afa5d7be9ffe7be6709cfc04af7d068",
      "language": "csharp",
      "size": 246,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class FlowListItemDto\n    {\n        public Guid Id { get; set; }\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/OutboundCampaignJobCreateDto.cs",
      "sha256": "31ade95e7e39a78f5fd669bc7ce9d887c7c004acd05e3e44eb0a6e487b837bd4",
      "language": "csharp",
      "size": 613,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Queueing.DTOs\n{\n    /// <summary>\n    /// Minimal job creation payload for outbound campaign sends.\n    /// The worker will hydrate the template parameters from CampaignRecipient.\n    /// </summary>\n    public sealed class OutboundCampaignJobCreateDto\n    {\n        public Guid BusinessId { get; set; }\n        public Guid CampaignId { get; set; }\n        public Guid CampaignRecipientId { get; set; }\n\n        /// <summary>Deduplication key. The queue should drop duplicates with the same key.</summary>\n        public string? IdempotencyKey { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/OutboundCampaignJobDto.cs",
      "sha256": "3f95f27a03d9cf5a08d649a168cd9cf34b1e790c060f74411eb1cc8dd981f190",
      "language": "csharp",
      "size": 649,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class OutboundCampaignJobDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid CampaignId { get; set; }\n\n        public string Status { get; set; } = \"queued\"; // queued | running | succeeded | failed | canceled\n        public int Attempt { get; set; }\n        public int MaxAttempts { get; set; }\n\n        public DateTimeOffset? NextAttemptAt { get; set; }\n        public string? LastError { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n        public DateTime UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/Requests/CsvBatchUploadForm.cs",
      "sha256": "31e21b0a508910a830966b0aa791e6ca80e872c95f1621bac998386f956b38da",
      "language": "csharp",
      "size": 385,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing Microsoft.AspNetCore.Http;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs.Requests\n{\n    // Swagger-safe wrapper for multipart upload\n    public sealed class CsvBatchUploadForm\n    {\n        public Guid? AudienceId { get; set; }\n\n        [Required]\n        public IFormFile File { get; set; } = default!;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/SendJobDtos.cs",
      "sha256": "6e46d4af7214847bbbb20aad58770f26f7885d22c06b9fd7934ba21449e5e25f",
      "language": "csharp",
      "size": 1907,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public enum SendJobState\n    {\n        Pending = 0,\n        Running = 1,\n        Succeeded = 2,\n        Failed = 3,\n        Canceled = 4,\n        Partial = 5\n    }\n\n    public class SendJobStartRequestDto\n    {\n        public bool Force { get; set; } = false;     // allow send even if dry-run has errors (logged loudly)\n        public int Limit { get; set; } = 2000;       // cap on planned recipients\n    }\n\n    public class SendJobStartResponseDto\n    {\n        public Guid JobId { get; set; }\n        public Guid CampaignId { get; set; }\n        public string Message { get; set; } = \"Send job queued.\";\n    }\n\n    public class SendJobBatchResultDto\n    {\n        public int BatchNumber { get; set; }\n        public int Count { get; set; }\n        public int Success { get; set; }\n        public int Failed { get; set; }\n        public int Skipped { get; set; }\n        public string Notes { get; set; } = string.Empty;\n        public int OffsetSeconds { get; set; }\n    }\n\n    public class SendJobStatusDto\n    {\n        public Guid JobId { get; set; }\n        public Guid CampaignId { get; set; }\n        public SendJobState State { get; set; }\n        public DateTimeOffset CreatedAt { get; set; }\n        public DateTimeOffset? StartedAt { get; set; }\n        public DateTimeOffset? CompletedAt { get; set; }\n\n        public int PlannedBatches { get; set; }\n        public int CompletedBatches { get; set; }\n\n        public int PlannedRecipients { get; set; }\n        public int SentSuccess { get; set; }\n        public int SentFailed { get; set; }\n        public int Skipped { get; set; }\n\n        public List<SendJobBatchResultDto> Batches { get; set; } = new();\n        public List<string> Warnings { get; set; } = new();\n        public List<string> Errors { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/VideoTemplateMessageDto.cs",
      "sha256": "d46c45dcc1d7b4109a51ea465c89038fe205538ef0d02d55804421de868b6bbb",
      "language": "csharp",
      "size": 631,
      "content": "// Features/CampaignModule/DTOs/VideoTemplateMessageDto.cs\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public sealed class VideoTemplateMessageDto\n    {\n        public string RecipientNumber { get; set; } = \"\";\n        public string TemplateName { get; set; } = \"\";\n        public string LanguageCode { get; set; } = \"en_US\";\n\n        // URL for the video header (HTTPS)\n        public string? HeaderVideoUrl { get; set; }\n\n        public List<string> TemplateParameters { get; set; } = new();\n        public List<CampaignButtonDto> ButtonParameters { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Helpers/IVariableResolver.cs",
      "sha256": "f956c04fe5689e3e6613e4d68e1e7dd8ead05b4dd82944fddaffbda5fce24ede",
      "language": "csharp",
      "size": 316,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.Helpers\n{\n    public interface IVariableResolver\n    {\n        Dictionary<string, string> ResolveVariables(\n            IReadOnlyDictionary<string, string> rowData,\n            IReadOnlyDictionary<string, string>? mappings);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Helpers/VariableResolver.cs",
      "sha256": "3933572c1fb60c82a9c9040df8c0f47b8dddc4404e3e30bc379e7c5f504b12f6",
      "language": "csharp",
      "size": 1359,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.Helpers\n{\n    public sealed class VariableResolver : IVariableResolver\n    {\n        public Dictionary<string, string> ResolveVariables(\n            IReadOnlyDictionary<string, string> rowData,\n            IReadOnlyDictionary<string, string>? mappings)\n        {\n            var result = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n\n            if (mappings == null || mappings.Count == 0)\n            {\n                foreach (var kv in rowData)\n                    result[kv.Key.Trim()] = kv.Value?.Trim() ?? string.Empty;\n                return result;\n            }\n\n            foreach (var (token, srcRaw) in mappings)\n            {\n                if (string.IsNullOrWhiteSpace(token)) continue;\n\n                var src = srcRaw?.Trim() ?? string.Empty;\n                if (src.StartsWith(\"constant:\", StringComparison.OrdinalIgnoreCase))\n                {\n                    result[token] = src.Substring(\"constant:\".Length).Trim();\n                    continue;\n                }\n\n                if (rowData.TryGetValue(src, out var v) && v != null)\n                    result[token] = v.Trim();\n                else\n                    result[token] = string.Empty;\n            }\n\n            return result;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/Audience.cs",
      "sha256": "9ab5c5898df2acc74abe3fffe97a37d0de79df0d455be0e3dec1a8a7ee4061c8",
      "language": "csharp",
      "size": 1187,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    /// <summary>\n    /// Logical grouping of recipients (often tied to a CsvBatch).\n    /// A campaign can materialize recipients from one Audience.\n    /// </summary>\n    public class Audience\n    {\n        [Key] public Guid Id { get; set; }\n\n        [Required] public Guid BusinessId { get; set; }\n\n        [Required, MaxLength(160)]\n        public string Name { get; set; } = \"Untitled Audience\";\n\n        [MaxLength(512)]\n        public string? Description { get; set; }  // useful in UI\n               \n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; }\n\n        public Guid? CsvBatchId { get; set; }\n        public CsvBatch? CsvBatch { get; set; }\n\n        public bool IsDeleted { get; set; } = false;\n\n        public Guid? CreatedByUserId { get; set; }\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }   // audit\n\n        public ICollection<AudienceMember> Members { get; set; } = new List<AudienceMember>();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/AudienceMember.cs",
      "sha256": "9d7b99694c279cd7bd36310ea787ed4c4ee781e20167060799d281170358f6da",
      "language": "csharp",
      "size": 1615,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    /// <summary>\n    /// A single member of an Audience. May or may not be linked to a Contact.\n    /// </summary>\n    public class AudienceMember\n    {\n        [Key] public Guid Id { get; set; }\n\n        [Required] public Guid AudienceId { get; set; }\n        public Audience Audience { get; set; } = null!;\n\n        // 🆕 explicit tenant for fast filtering & safety\n        [Required] public Guid BusinessId { get; set; }\n\n        /// <summary>Optional CRM link; null for non-CRM rows until promotion</summary>\n        public Guid? ContactId { get; set; }\n\n        [MaxLength(64)]\n        public string? PhoneRaw { get; set; }\n\n        [MaxLength(32)]\n        public string? PhoneE164 { get; set; }\n\n        [MaxLength(160)]\n        public string? Name { get; set; }\n\n        [MaxLength(256)]\n        public string? Email { get; set; }   // 🆕\n\n        /// <summary>Additional attributes from CSV row (json)</summary>\n        public string? AttributesJson { get; set; } // keep name as-is\n\n        /// <summary>True if an “auto-created” CRM contact; subject to retention</summary>\n        public bool IsTransientContact { get; set; } = false;\n\n        public bool IsDeleted { get; set; } = false;  // 🆕\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? UpdatedAt { get; set; }      // 🆕\n        public DateTime? PromotedAt { get; set; }     // when transient → durable Contact\n        public Guid? CreatedByUserId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/Campaign.cs",
      "sha256": "6222399d39b9093c105f9478e9ec864ee48bf5475d197f853ea72b6c23658508",
      "language": "csharp",
      "size": 3304,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CTAManagement.Models;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models; // 🆕 Import for CTAFlowConfig\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class Campaign\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Business info\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; }\n        public Guid? CampaignId { get; set; }\n        public Campaign? SourceCampaign { get; set; }\n\n        // 📋 Core campaign details\n        public string Name { get; set; }\n        public string MessageTemplate { get; set; }\n        public string? TemplateId { get; set; } // ✅ Meta-approved template ID\n\n        [Column(TypeName = \"text\")]\n        public string? MessageBody { get; set; } // ✅ Final resolved WhatsApp message body\n\n        public string? FollowUpTemplateId { get; set; }\n        public string? CampaignType { get; set; } // text, template, cta\n\n        // 🔘 CTA tracking (optional)\n        public Guid? CtaId { get; set; }\n        public CTADefinition? Cta { get; set; }\n\n        // 🆕 Link to Flow Config (optional)\n        public Guid? CTAFlowConfigId { get; set; }\n       // [ForeignKey(nameof(CTAFlowConfigId))]\n        public CTAFlowConfig? CTAFlowConfig { get; set; }\n\n        public DateTime? ScheduledAt { get; set; }\n        public string Status { get; set; } = \"Draft\"; // Draft, Scheduled, Sent\n\n        // 👤 Metadata\n        public string? CreatedBy { get; set; }\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // 🗑️ Soft delete support\n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n        public string? DeletedBy { get; set; }\n\n        // 👥 Recipient relationship\n        public ICollection<CampaignRecipient> Recipients { get; set; }\n\n        // 📊 Logs\n        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        public string? ImageUrl { get; set; }\n        public string? ImageCaption { get; set; }\n        public string? TemplateParameters { get; set; }\n\n        public ICollection<CampaignButton> MultiButtons { get; set; } = new List<CampaignButton>();\n\n        public ICollection<MessageLog> MessageLogs { get; set; } = new List<MessageLog>();\n\n        public string? Provider { get; set; }            // UPPERCASE only\n        public string? PhoneNumberId { get; set; }\n\n        public string? TemplateSchemaSnapshot { get; set; }\n\n        public ICollection<CampaignVariableMap> VariableMaps { get; set; } = new List<CampaignVariableMap>();\n\n        public Guid? AudienceId { get; set; }\n        public ICollection<Audience> Audiences { get; set; } = new List<Audience>();\n\n        public string? VideoUrl { get; set; }\n        public string? DocumentUrl { get; set; }\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignButton.cs",
      "sha256": "bfca22e0aed3117f3be8b3712de4a7b229991bc3c4b02bdb1f17e43709991977",
      "language": "csharp",
      "size": 654,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignButton\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; } // 🔗 Foreign key\n        public Campaign Campaign { get; set; }\n\n        public string Title { get; set; } = string.Empty; // Button Text (e.g. Buy Now)\n        public string Type { get; set; } = \"url\"; // Type: url, quick_reply, call, etc.\n        public string Value { get; set; } = string.Empty; // Target URL or payload\n\n        public int Position { get; set; } // Button order (1–3)\n        public bool IsFromTemplate { get; set; } = false;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignFlowOverride.cs",
      "sha256": "c4ee719e7601cfb0eb6d67fbba7e11cbd4a57ad5be58dd84f72beead08d88370",
      "language": "csharp",
      "size": 798,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignFlowOverride\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid CampaignId { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string TemplateName { get; set; } = string.Empty;\n\n        [Required]\n        [MaxLength(50)]\n        public string ButtonText { get; set; } = string.Empty;\n\n        public string? OverrideNextTemplate { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? CreatedBy { get; set; }\n\n        [ForeignKey(\"CampaignId\")]\n        public Campaign? Campaign { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignRecipient.cs",
      "sha256": "99ad2bdaa441c049d3dc34f0ba39d88a7cd9ff1b61b193a26887e0ff4c7ebe3c",
      "language": "csharp",
      "size": 4259,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignRecipient\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; }\n        public Campaign? Campaign { get; set; }   // nav is optional at runtime\n\n        public Guid? ContactId { get; set; }      // ← optional FK\n        public Contact? Contact { get; set; }\n\n        public string Status { get; set; } = \"Pending\"; // Pending, Sent, Delivered, Failed, Replied\n        public DateTime? SentAt { get; set; }\n\n        public string? BotId { get; set; }\n        public string? MessagePreview { get; set; }\n        public string? ClickedCTA { get; set; }\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        public bool IsAutoTagged { get; set; } = false;\n\n        // Logs\n        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();\n\n        public Guid BusinessId { get; set; }\n        public Business? Business { get; set; }\n\n        public Guid? AudienceMemberId { get; set; }\n        public AudienceMember? AudienceMember { get; set; } = null!;\n\n        [Column(TypeName = \"jsonb\")]\n        public string? ResolvedParametersJson { get; set; }\n\n        [Column(TypeName = \"jsonb\")]\n        public string? ResolvedButtonUrlsJson { get; set; }\n\n        public string? IdempotencyKey { get; set; }\n        public DateTime? MaterializedAt { get; set; }\n    }\n}\n\n\n//using System;\n//using System.Collections.Generic;\n//using xbytechat.api.CRM.Models;\n//using xbytechat.api.Features.BusinessModule.Models;\n//using xbytechat.api.Features.CampaignTracking.Models;\n\n//namespace xbytechat.api.Features.CampaignModule.Models\n//{\n//    public class CampaignRecipient\n//    {\n//        public Guid Id { get; set; }\n\n//        public Guid CampaignId { get; set; }\n//        public Campaign Campaign { get; set; }\n\n//        public Guid? ContactId { get; set; }\n//        public Contact Contact { get; set; }\n\n//        public string Status { get; set; } = \"Pending\"; // Pending, Sent, Delivered, Failed, Replied\n//        public DateTime? SentAt { get; set; }\n\n//        public string? BotId { get; set; } // Multi-bot support\n//        public string? MessagePreview { get; set; } // Final message sent\n//        public string? ClickedCTA { get; set; } // Track CTA clicked like \"BuyNow\"\n//        public string? CategoryBrowsed { get; set; } // e.g., Ads\n//        public string? ProductBrowsed { get; set; } // e.g., Product name\n//        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n//        public bool IsAutoTagged { get; set; } = false; // Flag for automation-based tagging\n\n//        // ✅ NEW: One-to-many link to detailed logs (message attempts, delivery tracking)\n//        public ICollection<CampaignSendLog> SendLogs { get; set; }\n\n//        public Guid BusinessId { get; set; }  // ✅ Add this line\n//        public Business Business { get; set; } = null!; // if navigation is needed\n\n//        // If this recipient originated from an Audience upload (CSV), link it here\n//        public Guid? AudienceMemberId { get; set; }\n//        // Resolved template parameters for this recipient (body/header placeholders)\n//        // Example: [\"Nicola\",\"500OFF\"]\n//        public string? ResolvedParametersJson { get; set; }\n\n//        // Resolved final URLs for buttons (index-aligned: 0,1,2)\n//        // Example: [\"https://lnk.xbyte/r/abc\", \"https://lnk.xbyte/r/def\"]\n//        public string? ResolvedButtonUrlsJson { get; set; }\n\n//        // An idempotency fingerprint for the specific send to this recipient\n//        // (e.g., SHA256(CampaignId|PhoneE164|TemplateName|ResolvedParametersJson|ResolvedButtonUrlsJson))\n//        public string? IdempotencyKey { get; set; }\n\n//        // When this recipient was materialized (frozen) and ready to dispatch\n//        public DateTime? MaterializedAt { get; set; }\n\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignVariableMap.cs",
      "sha256": "c20c9a369db1d26855d7c1f75e480de9e892b21cc63635b31220904e75f0194b",
      "language": "csharp",
      "size": 2019,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    /// <summary>\n    /// Maps a template placeholder to a data source for a specific campaign.\n    /// Examples of Component:\n    ///   \"body\", \"header\", \"button:url:1\"\n    /// Index is 1-based ({{1}}, {{2}}, ...).\n    /// </summary>\n    public class CampaignVariableMap\n    {\n        [Key] public Guid Id { get; set; }\n\n        [Required] public Guid CampaignId { get; set; }\n        public Campaign Campaign { get; set; } = null!;\n\n        /// <summary> \"body\" | \"header\" | \"button:url:1\" </summary>\n        [Required, MaxLength(64)]\n        public string Component { get; set; } = null!;\n\n        /// <summary> 1..N (corresponds to {{index}}) </summary>\n        [Required]\n        public int Index { get; set; }\n\n        /// <summary>\n        /// ContactField | CsvColumn | Static | Expression\n        /// </summary>\n        [Required, MaxLength(32)]\n        public string SourceType { get; set; } = null!;\n\n        /// <summary>\n        /// If SourceType == ContactField → \"name\",\"phone\",\"email\",...\n        /// If SourceType == CsvColumn → CSV header name.\n        /// Otherwise null.\n        /// </summary>\n        [MaxLength(128)]\n        public string? SourceKey { get; set; }\n\n        /// <summary>Used when SourceType == Static</summary>\n        public string? StaticValue { get; set; }\n\n        /// <summary>Optional expression (mini DSL) for computed values</summary>\n        public string? Expression { get; set; }\n\n        /// <summary>Fallback when source is empty/invalid</summary>\n        public string? DefaultValue { get; set; }\n\n        /// <summary>If true, missing value = validation error in dry-run</summary>\n        public bool IsRequired { get; set; } = false;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public Guid? CreatedByUserId { get; set; }\n        public Guid BusinessId { get; set; }  // denormalized for ownership checks\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CsvBatch.cs",
      "sha256": "9ab2036813c02e1428373fb89419b490fe5c4f4a0279eb40c5c2e5b8d87398cd",
      "language": "csharp",
      "size": 1513,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    /// <summary>\n    /// Represents a single CSV upload (file) for a business.\n    /// Stores headers and basic metadata; rows live in CsvRow.\n    /// </summary>\n    public class CsvBatch\n    {\n        [Key] public Guid Id { get; set; }\n\n        [Required] public Guid BusinessId { get; set; }\n\n        public Guid? AudienceId { get; set; }\n        /// <summary>Original filename, if available</summary>\n        [MaxLength(256)]\n        public string? FileName { get; set; }\n\n      \n        /// <summary>Comma-separated or JSON array of headers (we’ll map to jsonb via DbContext)</summary>\n        public string? HeadersJson { get; set; }\n\n        /// <summary>SHA256 (or similar) of file contents for dedupe</summary>\n        [MaxLength(128)]\n        public string? Checksum { get; set; }\n\n        /// <summary>Total rows parsed (including headerless lines after validation)</summary>\n        public int RowCount { get; set; }\n\n        /// <summary>Total rows skipped due to validation</summary>\n        public int SkippedCount { get; set; }\n\n        [MaxLength(32)]\n        public string Status { get; set; } = \"ready\"; // ready | ingesting | failed | complete\n\n        public string? ErrorMessage { get; set; }\n\n        public Guid? CreatedByUserId { get; set; }\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CsvBatchDtos.cs",
      "sha256": "8a302f82fd2cec1db09b6ef343902b803d507900620ea83b8e551b3e59d620c3",
      "language": "csharp",
      "size": 1008,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CsvBatchUploadResultDto\n    {\n        public Guid BatchId { get; set; }\n        public Guid? AudienceId { get; set; }           // <-- nullable: matches CsvBatch.AudienceId (Guid?)\n        public int RowCount { get; set; }\n        public List<string> Headers { get; set; } = new();\n        public string Message { get; set; } = \"CSV batch created.\";\n        public string FileName { get; set; } = string.Empty;\n    }\n\n    public class CsvBatchInfoDto\n    {\n        public Guid BatchId { get; set; }\n        public Guid? AudienceId { get; set; }           // <-- nullable\n        public int RowCount { get; set; }\n        public List<string> Headers { get; set; } = new();\n        public DateTime CreatedAt { get; set; }\n    }\n\n    public class CsvRowSampleDto\n    {\n        public int RowIndex { get; set; }\n        public Dictionary<string, string?> Data { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CsvRow.cs",
      "sha256": "26dc0e4b4ef801544a8e3935a243f3cb34507713dc1561f9cf08cd7895b316ba",
      "language": "csharp",
      "size": 1816,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    /// <summary>\n    /// One parsed CSV row. Data stored as JSON (key = header, value = cell).\n    /// RowIndex is 0-based (first data row = 0) to match streaming ingest.\n    /// </summary>\n    public class CsvRow\n    {\n        [Key] public Guid Id { get; set; }\n\n        /// <summary>Tenant scoping for fast filters</summary>\n        [Required] public Guid BusinessId { get; set; }\n\n        /// <summary>FK to CsvBatch.Id</summary>\n        [Required] public Guid BatchId { get; set; }\n        public CsvBatch Batch { get; set; } = null!;\n\n        /// <summary>0-based row number within the batch</summary>\n        [Required]\n        public int RowIndex { get; set; }\n\n        /// <summary>Raw phone, exactly as uploaded (optional convenience)</summary>\n        [MaxLength(64)]\n        public string? PhoneRaw { get; set; }\n\n        /// <summary>Normalized phone in E.164 (+&lt;country&gt;&lt;number&gt;)</summary>\n        [MaxLength(32)]\n        public string? PhoneE164 { get; set; }\n\n        /// <summary>JSON of the row: {\"header\":\"value\", ...}</summary>\n        public string RowJson { get; set; } = \"{}\";\n\n        /// <summary>\n        /// Back-compat shim for code that uses DataJson.\n        /// Not mapped to its own column; simply forwards to RowJson.\n        /// </summary>\n        [NotMapped]\n        public string? DataJson\n        {\n            get => RowJson;\n            set => RowJson = value ?? \"{}\";\n        }\n\n        /// <summary>If invalid at ingest/validation time, store reason here</summary>\n        public string? ValidationError { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/OutboundCampaignJob.cs",
      "sha256": "d9575f6ce2eee26b028d3f7d233b75faafc1be91456fee92b9d19a78ff0bf0e2",
      "language": "csharp",
      "size": 1507,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    /// <summary>\n    /// Queue item to send a whole campaign. Worker will call CampaignService to send.\n    /// </summary>\n    public class OutboundCampaignJob\n    {\n        [Key]\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        public Guid CampaignId { get; set; }\n\n        /// <summary>\n        /// queued | running | succeeded | failed\n        /// </summary>\n        [MaxLength(32)]\n        public string Status { get; set; } = \"queued\";\n\n        /// <summary>\n        /// Number of send attempts performed.\n        /// </summary>\n        public int Attempt { get; set; } = 0;\n\n        /// <summary>\n        /// Max attempts before we mark failed.\n        /// </summary>\n        public int MaxAttempts { get; set; } = 5;\n\n        /// <summary>\n        /// When this job becomes eligible for pickup (for backoff).\n        /// </summary>\n        public DateTimeOffset NextAttemptAt { get; set; } = DateTimeOffset.UtcNow;\n\n        /// <summary>\n        /// Last error string (truncated in service).\n        /// </summary>\n        [MaxLength(4000)]\n        public string? LastError { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignDispatcher.cs",
      "sha256": "e23c54c8a6e2d72b8aea5617873775c82e4e57a4faa9a888d341f52ba779d485",
      "language": "csharp",
      "size": 9629,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n// DO NOT import a different interface namespace; the interface is in this same namespace.\nusing xbytechat.api.Features.Queueing.DTOs;     // OutboundCampaignJobCreateDto\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Picks materialized recipients (MaterializedAt != null) in a stable order,\n    /// filters to \"ready\" statuses, and enqueues send jobs via your outbound queue.\n    /// </summary>\n    public sealed class CampaignDispatcher : ICampaignDispatcher\n    {\n        private readonly AppDbContext _db;\n        private readonly IOutboundCampaignQueueService _queue; // interface is in this same namespace\n\n        // If you use enums, map these accordingly.\n        private static readonly string[] ReadyStatuses = { \"Pending\", \"Ready\" };\n\n        public CampaignDispatcher(AppDbContext db, IOutboundCampaignQueueService queue)\n        {\n            _db = db;\n            _queue = queue;\n        }\n\n        //public async Task<CampaignDispatchResponseDto> DispatchAsync(\n        //    Guid businessId,\n        //    Guid campaignId,\n        //    string mode,\n        //    int count,\n        //    CancellationToken ct = default)\n        //{\n        //    if (businessId == Guid.Empty) throw new UnauthorizedAccessException(\"Invalid business id.\");\n        //    if (campaignId == Guid.Empty) throw new ArgumentException(\"campaignId is required.\");\n\n        //    mode = (mode ?? \"canary\").Trim().ToLowerInvariant();\n        //    if (mode != \"canary\" && mode != \"full\") mode = \"canary\";\n        //    if (count <= 0) count = 25;\n\n        //    // 1) Sanity: ownership\n        //    var owns = await _db.Campaigns.AsNoTracking()\n        //        .AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct);\n        //    if (!owns) throw new UnauthorizedAccessException(\"Campaign not found or not owned by this business.\");\n\n        //    // 2) Base recipients query (materialized + ready)\n        //    var baseQuery = _db.CampaignRecipients.AsNoTracking()\n        //        .Where(r => r.BusinessId == businessId\n        //                 && r.CampaignId == campaignId\n        //                 && r.MaterializedAt != null\n        //                 && ReadyStatuses.Contains(r.Status));\n\n        //    // 3) Stable order: oldest materialized first; then Id as tiebreaker\n        //    baseQuery = baseQuery.OrderBy(r => r.MaterializedAt).ThenBy(r => r.Id);\n\n        //    // 4) Select candidates (slightly over-select; queue dedupes)\n        //    var desired = mode == \"canary\" ? count : int.MaxValue;\n        //    var take = Math.Min(desired * 2, 5000);\n        //    var candidates = await baseQuery.Take(take).ToListAsync(ct);\n\n        //    // --- Build queue jobs ---\n        //    var jobs = new List<OutboundCampaignJobCreateDto>(candidates.Count);\n        //    foreach (var r in candidates)\n        //    {\n        //        jobs.Add(new OutboundCampaignJobCreateDto\n        //        {\n        //            BusinessId = businessId,\n        //            CampaignId = campaignId,\n        //            CampaignRecipientId = r.Id,\n        //            IdempotencyKey = r.IdempotencyKey\n        //        });\n        //    }\n\n        //    // 5) Enqueue (no-op adapter will just count)\n        //    var enqueued = await _queue.EnqueueBulkAsync(jobs, ct);\n\n        //    // --- Prepare response ---\n\n        //    // Fetch phones for the sample (phone is on AudienceMember, not CampaignRecipient)\n        //    var memberIds = candidates\n        //        .Where(r => r.AudienceMemberId.HasValue)\n        //        .Select(r => r.AudienceMemberId!.Value)\n        //        .Distinct()\n        //        .ToList();\n\n        //    var phoneByMemberId = await _db.AudiencesMembers.AsNoTracking()\n        //        .Where(m => m.BusinessId == businessId && memberIds.Contains(m.Id))\n        //        .Select(m => new { m.Id, m.PhoneE164 })\n        //        .ToDictionaryAsync(x => x.Id, x => x.PhoneE164, ct);\n\n        //    var resp = new CampaignDispatchResponseDto\n        //    {\n        //        CampaignId = campaignId,\n        //        Mode = mode,\n        //        RequestedCount = count,\n        //        SelectedCount = candidates.Count,\n        //        EnqueuedCount = enqueued,\n        //        Sample = candidates\n        //            .Take(10)\n        //            .Select(r => new DispatchedRecipientDto\n        //            {\n        //                RecipientId = r.Id,\n        //                Phone = (r.AudienceMemberId.HasValue &&\n        //                         phoneByMemberId.TryGetValue(r.AudienceMemberId.Value, out var p))\n        //                            ? p\n        //                            : null,\n        //                Status = r.Status,\n        //                MaterializedAt = r.MaterializedAt,\n        //                IdempotencyKey = r.IdempotencyKey\n        //            })\n        //            .ToList()\n        //    };\n\n        //    if (mode == \"full\")\n        //    {\n        //        resp.Warnings.Add(\"Full dispatch requested; rate limiting/backoff is enforced by the worker/queue.\");\n        //    }\n\n        //    Log.Information(\"Dispatch queued {@Summary}\", new\n        //    {\n        //        businessId,\n        //        campaignId,\n        //        mode,\n        //        requested = count,\n        //        selected = candidates.Count,\n        //        enqueued\n        //    });\n\n        //    return resp;\n        //}\n\n        public async Task<CampaignDispatchResponseDto> DispatchAsync(\n    Guid businessId,\n    Guid campaignId,\n    string mode,\n    int count,\n    CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty) throw new UnauthorizedAccessException(\"Invalid business id.\");\n            if (campaignId == Guid.Empty) throw new ArgumentException(\"campaignId is required.\");\n\n            mode = (mode ?? \"canary\").Trim().ToLowerInvariant();\n            if (mode != \"canary\" && mode != \"full\") mode = \"canary\";\n            if (count <= 0) count = 25;\n\n            var owns = await _db.Campaigns.AsNoTracking()\n                .AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct);\n            if (!owns) throw new UnauthorizedAccessException(\"Campaign not found or not owned by this business.\");\n\n            var baseQuery = _db.CampaignRecipients.AsNoTracking()\n                .Where(r => r.BusinessId == businessId\n                         && r.CampaignId == campaignId\n                         && r.MaterializedAt != null\n                         && ReadyStatuses.Contains(r.Status))\n                .OrderBy(r => r.MaterializedAt).ThenBy(r => r.Id);\n\n            var desired = mode == \"canary\" ? count : int.MaxValue;\n            var take = Math.Min(desired * 2, 5000);\n            var candidates = await baseQuery.Take(take).ToListAsync(ct);\n\n            var jobs = new List<OutboundCampaignJobCreateDto>(candidates.Count);\n            foreach (var r in candidates)\n            {\n                jobs.Add(new OutboundCampaignJobCreateDto\n                {\n                    BusinessId = businessId,\n                    CampaignId = campaignId,\n                    CampaignRecipientId = r.Id,\n                    IdempotencyKey = r.IdempotencyKey\n                });\n            }\n            var enqueued = await _queue.EnqueueBulkAsync(jobs, ct);\n\n            // ---- CHANGED: AudienceMemberId is Guid (non-nullable)\n            //var memberIds = candidates\n            //    .Select(r => r.AudienceMemberId)\n            //    .Distinct()\n            //    .ToHashSet(); // perf for Contains\n\n            var memberIds = candidates\n    .Where(r => r.AudienceMemberId.HasValue)\n    .Select(r => r.AudienceMemberId!.Value)\n    .Distinct()\n    .ToHashSet();\n\n            var phoneByMemberId = await _db.AudiencesMembers   // or _db.AudiencesMembers if that's your DbSet\n      .AsNoTracking()\n      .Where(m => m.BusinessId == businessId && memberIds.Contains(m.Id))\n      .Select(m => new { m.Id, m.PhoneE164 })\n      .ToDictionaryAsync(x => x.Id, x => x.PhoneE164, ct);\n\n            var resp = new CampaignDispatchResponseDto\n            {\n                CampaignId = campaignId,\n                Mode = mode,\n                RequestedCount = count,\n                SelectedCount = candidates.Count,\n                EnqueuedCount = enqueued,\n                Sample = candidates\n                .Take(10)\n                .Select(r => new DispatchedRecipientDto\n                {\n                    RecipientId = r.Id,\n                    Phone = (r.AudienceMemberId.HasValue &&\n                             phoneByMemberId.TryGetValue(r.AudienceMemberId.Value, out var p))\n                                ? p\n                                : null,\n                    Status = r.Status,\n                    MaterializedAt = r.MaterializedAt,\n                    IdempotencyKey = r.IdempotencyKey\n                })\n                .ToList()\n            };\n\n            if (mode == \"full\")\n                resp.Warnings.Add(\"Full dispatch requested; rate limiting/backoff is enforced by the worker/queue.\");\n\n            Log.Information(\"Dispatch queued {@Summary}\", new { businessId, campaignId, mode, requested = count, selected = candidates.Count, enqueued });\n            return resp;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignDispatchPlannerService.cs",
      "sha256": "fe613afed24f76c48409b379b1e82e36e259c41afe57aacb1122ace6dff1ea83",
      "language": "csharp",
      "size": 8973,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignDispatchPlannerService\n    {\n        /// <summary>\n        /// Build a read-only dispatch plan: batches, offsets, size estimates, and throttle summary.\n        /// No messages are sent and no DB writes are performed.\n        /// </summary>\n        Task<CampaignDispatchPlanResultDto> PlanAsync(Guid businessId, Guid campaignId, int limit = 2000, CancellationToken ct = default);\n    }\n\n    /// <summary>\n    /// Computes batch plan from materialized rows with simple throttling:\n    /// - Derives batch size and per-minute cap from Business.Plan (fallback defaults).\n    /// - Slices rows into batches and schedules offsets (seconds) so per-minute cap is respected.\n    /// - Approximates payload size per row/batch for sanity checks.\n    /// </summary>\n    public class CampaignDispatchPlannerService : ICampaignDispatchPlannerService\n    {\n        private readonly AppDbContext _db;\n        private readonly ICampaignMaterializationService _materializer;\n\n        public CampaignDispatchPlannerService(AppDbContext db, ICampaignMaterializationService materializer)\n        {\n            _db = db;\n            _materializer = materializer;\n        }\n\n        public async Task<CampaignDispatchPlanResultDto> PlanAsync(Guid businessId, Guid campaignId, int limit = 2000, CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty) throw new UnauthorizedAccessException(\"Invalid business id.\");\n            if (campaignId == Guid.Empty) throw new ArgumentException(\"CampaignId is required.\");\n\n            // Load campaign shell for meta\n            var campaign = await _db.Campaigns\n                .AsNoTracking()\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct)\n                ?? throw new KeyNotFoundException(\"Campaign not found.\");\n\n            // Materialize (reuses Step 2.11) — read-only\n            var mat = await _materializer.MaterializeAsync(businessId, campaignId, limit, ct);\n\n            // Business plan & provider heuristics (non-fatal if missing)\n            var biz = await _db.Businesses\n                .AsNoTracking()\n                .FirstOrDefaultAsync(b => b.Id == businessId, ct);\n\n            // var planName = (biz?.Plan ?? \"Basic\").Trim();\n            var planName = (biz == null\n     ? \"Basic\"\n     : (biz.Plan?.ToString() ?? \"Basic\")\n ).Trim();\n            var provider = (campaign.Provider ?? \"Auto\").Trim(); // if you snapshot provider on Campaign; otherwise \"Auto\"\n\n            // Throttle rules (sane defaults; adjust to your real plan matrix if available)\n            var (maxBatch, perMinute) = GetThrottleForPlan(planName);\n\n            var result = new CampaignDispatchPlanResultDto\n            {\n                CampaignId = campaignId,\n                TemplateName = mat.TemplateName,\n                Language = mat.Language,\n                PlaceholderCount = mat.PlaceholderCount,\n                TotalRecipients = mat.Rows.Count,\n                Throttle = new DispatchThrottleDto\n                {\n                    Plan = planName,\n                    Provider = provider,\n                    MaxBatchSize = maxBatch,\n                    MaxPerMinute = perMinute\n                }\n            };\n\n            if (mat.Rows.Count == 0)\n            {\n                result.GlobalWarnings.Add(\"No recipients available to plan. Ensure audience or campaign recipients exist.\");\n                result.WarningCount = result.GlobalWarnings.Count;\n                return result;\n            }\n\n            // Approx size per row (naive): sum of parameter lengths + resolved button urls + a small fixed header cost\n            var approxBytesPerRow = new List<int>(mat.Rows.Count);\n            foreach (var row in mat.Rows)\n            {\n                var paramBytes = row.Parameters.Sum(p => (p.Value?.Length ?? 0));\n                var btnBytes = row.Buttons.Sum(b => (b.ResolvedUrl?.Length ?? 0) + (b.ButtonText?.Length ?? 0));\n                // add a tiny constant for template envelope; tweak if you maintain captions/text\n                var approx = (paramBytes + btnBytes + 64);\n                approxBytesPerRow.Add(approx);\n            }\n\n            result.TotalApproxBytes = approxBytesPerRow.Sum();\n\n            // Build batches by MaxBatchSize\n            var batches = new List<DispatchBatchDto>();\n            var total = mat.Rows.Count;\n            var batchCount = (int)Math.Ceiling(total / (double)maxBatch);\n\n            // Schedule offsets constrained by MaxPerMinute:\n            // At most 'perMinute' messages may start within any 60-second window.\n            // Strategy: bucket batches into \"minutes\", each minute can hold floor(perMinute / maxBatch) full batches.\n            var batchesPerMinute = Math.Max(1, perMinute / Math.Max(1, maxBatch));\n            if (batchesPerMinute == 0) batchesPerMinute = 1; // guard\n\n            var offsetMinutes = 0;\n            var slotInMinute = 0;\n            int globalIdx = 0;\n\n            for (int b = 0; b < batchCount; b++)\n            {\n                var startIndex = b * maxBatch;\n                var take = Math.Min(maxBatch, total - startIndex);\n\n                var slicePhones = new List<string?>(take);\n                var sliceRecipientIds = new List<Guid?>(take);\n                var sliceApprox = 0;\n\n                for (int i = 0; i < take; i++)\n                {\n                    var row = mat.Rows[startIndex + i];\n                    slicePhones.Add(row.Phone);\n                    sliceRecipientIds.Add(row.RecipientId);\n                    sliceApprox += approxBytesPerRow[startIndex + i];\n                }\n\n                var batch = new DispatchBatchDto\n                {\n                    BatchNumber = b + 1,\n                    StartIndex = startIndex,\n                    Count = take,\n                    ApproxBytes = sliceApprox,\n                    RecipientIds = sliceRecipientIds,\n                    Phones = slicePhones,\n                    OffsetSeconds = offsetMinutes * 60\n                };\n\n                // Notes for the curious\n                if (slicePhones.Any(p => string.IsNullOrWhiteSpace(p)))\n                    batch.Notes.Add(\"Some rows missing phone; those will fail at send-time unless corrected.\");\n                if (sliceApprox / Math.Max(1, take) > 2000)\n                    batch.Notes.Add(\"Average payload per row is large; provider truncation risk.\");\n\n                batches.Add(batch);\n\n                // advance slot & minute window\n                slotInMinute++;\n                if (slotInMinute >= batchesPerMinute)\n                {\n                    slotInMinute = 0;\n                    offsetMinutes++;\n                }\n\n                globalIdx += take;\n            }\n\n            result.Batches = batches;\n            result.Throttle.ComputedBatches = batches.Count;\n            // Estimated minutes: ceil(total recipients / perMinute)\n            result.Throttle.EstimatedMinutes = (int)Math.Ceiling(total / (double)Math.Max(1, perMinute));\n\n            // Warnings\n            if (perMinute < 30) result.Throttle.Warnings.Add(\"Low per-minute limit; delivery may be slow for large audiences.\");\n            if (result.TotalApproxBytes > 5_000_000) result.GlobalWarnings.Add(\"Plan size is large (>5MB). Consider splitting the audience.\");\n\n            result.WarningCount =\n                result.GlobalWarnings.Count +\n                result.Throttle.Warnings.Count +\n                result.Batches.Sum(bh => bh.Notes.Count);\n\n            Log.Information(\"Dispatch plan computed {@PlanSummary}\",\n                new\n                {\n                    campaignId,\n                    businessId,\n                    mat.TemplateName,\n                    mat.Language,\n                    totalRecipients = result.TotalRecipients,\n                    batches = result.Batches.Count,\n                    perMinute,\n                    maxBatch,\n                    estMinutes = result.Throttle.EstimatedMinutes\n                });\n\n            return result;\n        }\n\n        private static (int maxBatch, int perMinute) GetThrottleForPlan(string planName)\n        {\n            // Conservative defaults; align with your real billing/plan matrix when available.\n            switch ((planName ?? \"\").Trim().ToLowerInvariant())\n            {\n                case \"advanced\":\n                    return (100, 600);\n                case \"smart\":\n                    return (50, 300);\n                case \"basic\":\n                default:\n                    return (25, 120);\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignDryRunService.cs",
      "sha256": "7951a4dbf036d9ec05750278c322b32b635d8135cb7a51d75748e0ac3f1a0d0a",
      "language": "csharp",
      "size": 9184,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.Services;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Dry-run validator for campaigns. Checks template existence, parameter counts,\n    /// dynamic button placeholders, and recipient phone presence/shape.\n    /// </summary>\n    public class CampaignDryRunService : ICampaignDryRunService\n    {\n        private readonly AppDbContext _db;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcher;\n\n        private static readonly Regex PlaceholderRe = new(@\"\\{\\{\\s*(\\d+)\\s*\\}\\}\", RegexOptions.Compiled);\n\n        public CampaignDryRunService(AppDbContext db, IWhatsAppTemplateFetcherService templateFetcher)\n        {\n            _db = db;\n            _templateFetcher = templateFetcher;\n        }\n\n        public async Task<CampaignDryRunResultDto> ValidateAsync(\n            Guid businessId,\n            Guid campaignId,\n            int limit = 200,\n            CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty) throw new UnauthorizedAccessException(\"Invalid business id.\");\n            if (campaignId == Guid.Empty) throw new ArgumentException(\"campaignId is required.\");\n\n            // Load campaign + recipients(+contacts) + variable maps + buttons (read-only)\n            var campaign = await _db.Campaigns\n                .AsNoTracking()\n                .Include(c => c.MultiButtons)\n                .Include(c => c.VariableMaps)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct);\n\n            if (campaign == null)\n                throw new KeyNotFoundException(\"Campaign not found.\");\n\n            // Recipients (contact needed for phone)\n            var recipients = await _db.CampaignRecipients\n                .AsNoTracking()\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                .OrderBy(r => r.UpdatedAt)\n                .Take(limit)\n                .ToListAsync(ct);\n\n            // Determine template name (prefer TemplateId → MessageTemplate) and fetch metadata\n            var templateName = (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\").Trim();\n            if (string.IsNullOrWhiteSpace(templateName))\n            {\n                // No template at all — return result with a single global error across all recipients\n                return BuildResult(\n                    campaignId,\n                    templateName: \"\",\n                    language: \"en_US\",\n                    placeholderCount: 0,\n                    recipients: recipients,\n                    globalError: \"Template name is missing on campaign.\"\n                );\n            }\n\n            var meta = await _templateFetcher.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n            if (meta == null)\n            {\n                return BuildResult(\n                    campaignId,\n                    templateName,\n                    language: \"en_US\",\n                    placeholderCount: 0,\n                    recipients: recipients,\n                    globalError: $\"Template '{templateName}' not found for business.\"\n                );\n            }\n\n            var language = (meta.Language ?? \"en_US\").Trim();\n            var placeholderCount = Math.Max(0, meta.PlaceholderCount);\n\n            // Campaign-stored parameters: if supplied, compare counts\n            var storedParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n            bool paramCountMismatch = storedParams.Count > 0 && storedParams.Count != placeholderCount;\n\n            // Validate buttons for dynamic placeholders ({{n}})\n            var dynamicButtonIssues = new List<string>();\n            var buttonPlaceholdersNeeded = new HashSet<int>();\n\n            foreach (var b in (campaign.MultiButtons ?? Enumerable.Empty<CampaignButton>()))\n            {\n                var value = b.Value ?? \"\";\n                foreach (Match m in PlaceholderRe.Matches(value))\n                {\n                    if (int.TryParse(m.Groups[1].Value, out var n))\n                    {\n                        buttonPlaceholdersNeeded.Add(n);\n                    }\n                }\n            }\n\n            foreach (var n in buttonPlaceholdersNeeded)\n            {\n                if (storedParams.Count > 0 && (n < 1 || n > storedParams.Count))\n                {\n                    dynamicButtonIssues.Add($\"Button needs placeholder {{%{n}%}} but campaign parameters only provide {storedParams.Count} value(s).\");\n                }\n                if (placeholderCount > 0 && (n < 1 || n > placeholderCount))\n                {\n                    dynamicButtonIssues.Add($\"Button needs placeholder {{%{n}%}} but template defines only {placeholderCount} placeholder(s).\");\n                }\n            }\n\n            // Build per-recipient issues\n            var issues = new List<CampaignDryRunIssueDto>();\n            foreach (var r in recipients)\n            {\n                var phone = r.Contact?.PhoneNumber?.Trim();\n\n                if (string.IsNullOrWhiteSpace(phone))\n                {\n                    issues.Add(new CampaignDryRunIssueDto\n                    {\n                        RecipientId = r.Id,\n                        ContactId = r.ContactId,\n                        Phone = phone,\n                        Severity = \"error\",\n                        Message = \"Phone is missing.\"\n                    });\n                }\n                else if (!IsLikelyPhone(phone))\n                {\n                    issues.Add(new CampaignDryRunIssueDto\n                    {\n                        RecipientId = r.Id,\n                        ContactId = r.ContactId,\n                        Phone = phone,\n                        Severity = \"warning\",\n                        Message = \"Phone format looks unusual.\"\n                    });\n                }\n            }\n\n            // Add global-ish issues once (we’ll attribute them to a null recipient)\n            if (paramCountMismatch)\n            {\n                issues.Add(new CampaignDryRunIssueDto\n                {\n                    Severity = \"warning\",\n                    Message = $\"Placeholder count mismatch: template expects {placeholderCount}, campaign provided {storedParams.Count}.\",\n                });\n            }\n\n            foreach (var bi in dynamicButtonIssues.Distinct())\n            {\n                issues.Add(new CampaignDryRunIssueDto\n                {\n                    Severity = \"error\",\n                    Message = bi\n                });\n            }\n\n            var result = new CampaignDryRunResultDto\n            {\n                CampaignId = campaignId,\n                TemplateName = templateName,\n                Language = language,\n                PlaceholderCount = placeholderCount,\n                CheckedRecipients = recipients.Count,\n                Issues = issues,\n                ErrorCount = issues.Count(i => string.Equals(i.Severity, \"error\", StringComparison.OrdinalIgnoreCase)),\n                WarningCount = issues.Count(i => string.Equals(i.Severity, \"warning\", StringComparison.OrdinalIgnoreCase)),\n            };\n\n            Log.Information(\"Dry-run completed for Campaign {CampaignId} (biz {BusinessId}) → {Errors} errors, {Warnings} warnings over {Checked} recipients\",\n                campaignId, businessId, result.ErrorCount, result.WarningCount, result.CheckedRecipients);\n\n            return result;\n        }\n\n        private static CampaignDryRunResultDto BuildResult(\n            Guid campaignId,\n            string templateName,\n            string language,\n            int placeholderCount,\n            List<CampaignRecipient> recipients,\n            string globalError)\n        {\n            var issues = new List<CampaignDryRunIssueDto>\n            {\n                new CampaignDryRunIssueDto\n                {\n                    Severity = \"error\",\n                    Message = globalError\n                }\n            };\n\n            return new CampaignDryRunResultDto\n            {\n                CampaignId = campaignId,\n                TemplateName = templateName,\n                Language = language,\n                PlaceholderCount = placeholderCount,\n                CheckedRecipients = recipients.Count,\n                Issues = issues,\n                ErrorCount = issues.Count,\n                WarningCount = 0\n            };\n        }\n\n        private static bool IsLikelyPhone(string? s)\n        {\n            if (string.IsNullOrWhiteSpace(s)) return false;\n            var digits = s.Count(char.IsDigit);\n            return digits >= 10 && digits <= 15;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignMaterializationService.cs",
      "sha256": "b58fa41286a66c300d53a0970a190a27616e1f35418a2bf573222fded88b4670",
      "language": "csharp",
      "size": 20907,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.WhatsAppSettings.Services; // ensure namespace matches your project\nusing xbytechat.api.Features.MessageManagement.Services;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.WhatsAppSettings.DTOs; // IUrlBuilderService\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    \n\n    /// <summary>\n    /// Read-only “compiler” that materializes template params and button URLs per recipient.\n    /// Mirrors the live send behavior (no dispatch, no DB writes).\n    /// </summary>\n    public sealed class CampaignMaterializationService : ICampaignMaterializationService\n    {\n        private readonly AppDbContext _db;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcher;\n        private readonly IUrlBuilderService _urlBuilderService;\n\n        private static readonly Regex PlaceholderRe = new(@\"\\{\\{\\s*(\\d+)\\s*\\}\\}\", RegexOptions.Compiled);\n\n        public CampaignMaterializationService(\n            AppDbContext db,\n            IWhatsAppTemplateFetcherService templateFetcher,\n            IUrlBuilderService urlBuilderService)\n        {\n            _db = db;\n            _templateFetcher = templateFetcher;\n            _urlBuilderService = urlBuilderService;\n        }\n\n        public async Task<CampaignMaterializeResultDto> MaterializeAsync(\n            Guid businessId,\n            Guid campaignId,\n            int limit = 200,\n            CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty) throw new UnauthorizedAccessException(\"Invalid business id.\");\n            if (campaignId == Guid.Empty) throw new ArgumentException(\"campaignId is required\");\n            if (limit <= 0) limit = 200;\n\n            // Load campaign + variable maps + buttons + recipients (+ contacts)\n            var campaign = await _db.Campaigns\n                .AsNoTracking()\n                .Include(c => c.VariableMaps)\n                .Include(c => c.MultiButtons)\n                .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct);\n\n            if (campaign == null)\n                throw new KeyNotFoundException(\"Campaign not found.\");\n\n            // Resolve template meta from snapshot/params; fallback to live\n            var meta = await ResolveTemplateMetaAsync(campaign, businessId, ct);\n            var templateName = meta.TemplateName;\n            var language = meta.Language;\n            var placeholderCount = meta.PlaceholderCount;\n\n            if (string.IsNullOrWhiteSpace(templateName))\n                throw new InvalidOperationException(\"Campaign does not have a resolvable template name.\");\n\n            // Try to fetch provider button meta (for dynamic URL detection & alignment)\n            TemplateMetadataDto? liveMeta = null;\n            try\n            {\n                liveMeta = await _templateFetcher.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n            }\n            catch (Exception ex)\n            {\n                Log.Warning(ex, \"Template fetch failed during materialization for {Template}\", templateName);\n            }\n\n            var result = new CampaignMaterializeResultDto\n            {\n                CampaignId = campaignId,\n                TemplateName = templateName,\n                Language = language,\n                PlaceholderCount = placeholderCount\n            };\n\n            var varMaps = (campaign.VariableMaps ?? new List<CampaignVariableMap>())\n                .Where(m => m.CampaignId == campaignId)\n                .ToList();\n\n            var recipients = (campaign.Recipients ?? new List<CampaignRecipient>())\n                .OrderBy(r => r.UpdatedAt)\n                .Take(limit)\n                .ToList();\n\n            // order buttons by Position (then by their original index) to align with template button index\n            var orderedButtons = (campaign.MultiButtons ?? new List<CampaignButton>())\n                .Select((b, idx) => new { Btn = b, idx })\n                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                .ThenBy(x => x.idx)\n                .Select(x => x.Btn)\n                .ToList();\n\n            foreach (var r in recipients)\n            {\n                var row = new MaterializedRecipientDto\n                {\n                    RecipientId = r.Id,\n                    ContactId = r.ContactId,\n                    Phone = NormalizePhone(r?.Contact?.PhoneNumber)\n                };\n\n                // Parameters 1..N via variable maps (Static/Default/Expression placeholder)\n                for (int idx = 1; idx <= placeholderCount; idx++)\n                {\n                    var map = varMaps.FirstOrDefault(m => m.Index == idx);\n                    if (map == null)\n                    {\n                        row.Parameters.Add(new TemplateParamResolutionDto\n                        {\n                            Index = idx,\n                            Value = null,\n                            IsMissing = true,\n                            SourceType = \"Unmapped\",\n                            Note = \"No variable map for this placeholder.\"\n                        });\n                        continue;\n                    }\n\n                    var (value, isMissing, note) = ResolveValue(map, r);\n                    row.Parameters.Add(new TemplateParamResolutionDto\n                    {\n                        Index = idx,\n                        Value = value,\n                        IsMissing = isMissing,\n                        SourceType = map.SourceType ?? string.Empty,\n                        SourceKey = map.SourceKey\n                    });\n\n                    if (!string.IsNullOrWhiteSpace(note))\n                        row.Warnings.Add($\"{{{{{idx}}}}}: {note}\");\n                }\n\n                // Buttons: mirror live send behavior for dynamic URL buttons (index 0..2)\n                if (liveMeta?.ButtonParams != null && liveMeta.ButtonParams.Count > 0 && orderedButtons.Count > 0)\n                {\n                    var total = Math.Min(3, Math.Min(orderedButtons.Count, liveMeta.ButtonParams.Count));\n\n                    for (int i = 0; i < total; i++)\n                    {\n                        var metaBtn = liveMeta.ButtonParams[i];\n                        var subType = (metaBtn.SubType ?? \"url\").ToLowerInvariant();\n                        var metaParam = metaBtn.ParameterValue?.Trim();\n\n                        var br = new ButtonResolutionDto\n                        {\n                            ButtonText = orderedButtons[i]?.Title ?? string.Empty,\n                            RawTemplateValue = orderedButtons[i]?.Value\n                        };\n\n                        // We only handle dynamic URL buttons here (consistent with send logic)\n                        if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                        {\n                            br.Notes.Add(\"Non-URL button (no dynamic resolution).\");\n                            row.Buttons.Add(br);\n                            continue;\n                        }\n\n                        var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                        if (!isDynamic)\n                        {\n                            br.Notes.Add(\"Static URL button (no parameters required by template).\");\n                            row.Buttons.Add(br);\n                            continue;\n                        }\n\n                        var btn = orderedButtons[i];\n                        var btnType = (btn?.Type ?? \"URL\").ToUpperInvariant();\n                        if (!string.Equals(btnType, \"URL\", StringComparison.OrdinalIgnoreCase))\n                        {\n                            br.Notes.Add($\"Template expects a dynamic URL at index {i}, but campaign button type is '{btn?.Type}'.\");\n                            row.Buttons.Add(br);\n                            continue;\n                        }\n\n                        var valueRaw = btn?.Value?.Trim();\n                        if (string.IsNullOrWhiteSpace(valueRaw))\n                        {\n                            br.Notes.Add($\"Template requires a dynamic URL at index {i}, but campaign button value is empty.\");\n                            br.MissingArguments.Add(\"{{1}}\");\n                            row.Buttons.Add(br);\n                            continue;\n                        }\n\n                        // optional phone substitution into destination\n                        var phone = row.Phone ?? \"\";\n                        var encodedPhone = Uri.EscapeDataString(phone);\n\n                        var resolvedDestination = valueRaw.Contains(\"{{1}}\")\n                            ? valueRaw.Replace(\"{{1}}\", encodedPhone)\n                            : valueRaw;\n\n                        // normalize/validate URL (allow tel:, wa:, wa.me links)\n                        try\n                        {\n                            resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn!.Title ?? $\"Button {i + 1}\", i);\n                        }\n                        catch (Exception ex)\n                        {\n                            br.Notes.Add($\"Destination invalid: {ex.Message}\");\n                            row.Buttons.Add(br);\n                            continue;\n                        }\n\n                        // Build both styles and pick based on template absolute base rule\n                        var fakeSendLogId = Guid.NewGuid(); // preview-only tokenization\n                        var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(\n                            fakeSendLogId, i, btn!.Title, resolvedDestination);\n\n                        var tokenParam = BuildTokenParam(fakeSendLogId, i, btn.Title, resolvedDestination);\n\n                        var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                        var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                        br.UsedPlaceholders.Add(\"{{1}}\"); // meta indicates dynamic\n                        br.ResolvedUrl = valueToSend;\n                        row.Buttons.Add(br);\n                    }\n                }\n                else\n                {\n                    // no dynamic buttons in template\n                }\n\n                // Basic phone sanity\n                if (string.IsNullOrWhiteSpace(row.Phone))\n                    row.Errors.Add(\"Phone is missing.\");\n                else if (!IsLikelyPhone(row.Phone))\n                    row.Warnings.Add(\"Phone format looks unusual.\");\n\n                result.Rows.Add(row);\n            }\n\n            result.ReturnedCount = result.Rows.Count;\n            result.ErrorCount = result.Rows.Sum(r => r.Errors.Count);\n            result.WarningCount = result.Rows.Sum(r => r.Warnings.Count)\n                                  + result.Rows.Sum(r => r.Parameters.Count(p => p.IsMissing));\n\n            Log.Information(\"Campaign materialization computed {@Summary}\",\n                new\n                {\n                    campaignId,\n                    businessId,\n                    result.ReturnedCount,\n                    result.ErrorCount,\n                    result.WarningCount,\n                    result.PlaceholderCount,\n                    result.TemplateName,\n                    result.Language\n                });\n\n            return result;\n        }\n\n        // --- Helpers (mirror your send logic where relevant) ---\n\n        private static (string? value, bool isMissing, string? note) ResolveValue(\n            CampaignVariableMap map,\n            CampaignRecipient recipient)\n        {\n            var source = (map.SourceType ?? \"\").Trim();\n\n            switch (source)\n            {\n                case \"Static\":\n                    {\n                        var v = map.StaticValue;\n                        var missing = string.IsNullOrWhiteSpace(v) && map.IsRequired;\n                        return (v, missing, missing ? \"Required static value missing.\" : null);\n                    }\n\n                case \"Expression\":\n                    {\n                        // no eval engine; use DefaultValue if provided\n                        var v = map.DefaultValue;\n                        var note = \"Expression present; no evaluation engine configured. Used DefaultValue.\";\n                        var missing = string.IsNullOrWhiteSpace(v) && map.IsRequired;\n                        return (v, missing, missing ? \"Required expression result missing (no default provided).\" : note);\n                    }\n\n                case \"AudienceColumn\":\n                    {\n                        // Current CampaignRecipient shape doesn't carry Audience/CSV row data.\n                        // If you later link AudienceMember.AttributesJson here, resolve from it.\n                        var v = map.DefaultValue;\n                        var missing = string.IsNullOrWhiteSpace(v) && map.IsRequired;\n                        return (v, missing, \"Audience/CSV source not available on CampaignRecipient; used DefaultValue.\");\n                    }\n\n                default:\n                    {\n                        var v = map.DefaultValue;\n                        var missing = string.IsNullOrWhiteSpace(v) && map.IsRequired;\n                        return (v, missing, missing ? \"Unrecognized mapping type and no default.\" : \"Unrecognized mapping type; used DefaultValue.\");\n                    }\n            }\n        }\n\n        private static string NormalizePhone(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return \"\";\n            var p = raw.Trim();\n            if (!p.StartsWith(\"+\")) p = \"+\" + new string(p.Where(char.IsDigit).ToArray());\n            return p;\n        }\n\n        private static bool IsLikelyPhone(string? s)\n        {\n            if (string.IsNullOrWhiteSpace(s)) return false;\n            var digits = s.Count(char.IsDigit);\n            return digits >= 10 && digits <= 15;\n        }\n\n        private static string NormalizeAbsoluteUrlOrThrowForButton(string input, string buttonTitle, int buttonIndex)\n        {\n            if (string.IsNullOrWhiteSpace(input))\n                throw new ArgumentException($\"Destination is required for button '{buttonTitle}' (index {buttonIndex}).\");\n\n            var cleaned = new string(input.Trim().Where(c => !char.IsControl(c)).ToArray());\n            if (cleaned.Length == 0)\n                throw new ArgumentException($\"Destination is required for button '{buttonTitle}' (index {buttonIndex}).\");\n\n            // Accept tel: / wa: / wa.me deep links\n            if (cleaned.StartsWith(\"tel:\", StringComparison.OrdinalIgnoreCase) ||\n                cleaned.StartsWith(\"wa:\", StringComparison.OrdinalIgnoreCase) ||\n                cleaned.StartsWith(\"https://wa.me/\", StringComparison.OrdinalIgnoreCase))\n            {\n                return cleaned;\n            }\n\n            if (Uri.TryCreate(cleaned, UriKind.Absolute, out var uri) &&\n                (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                 uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase)))\n            {\n                return uri.ToString();\n            }\n\n            throw new ArgumentException(\n                $\"Destination must be an absolute http/https/tel/wa URL for button '{buttonTitle}' (index {buttonIndex}). Got: '{input}'\");\n        }\n\n        private static bool LooksLikeAbsoluteBaseUrlWithPlaceholder(string? templateUrl)\n        {\n            if (string.IsNullOrWhiteSpace(templateUrl)) return false;\n            var s = templateUrl.Trim();\n            if (!s.Contains(\"{{\")) return false;\n            var probe = s.Replace(\"{{1}}\", \"x\").Replace(\"{{0}}\", \"x\");\n            return Uri.TryCreate(probe, UriKind.Absolute, out var abs) &&\n                   (abs.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    abs.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase));\n        }\n\n        private string BuildTokenParam(Guid campaignSendLogId, int buttonIndex, string? buttonTitle, string destinationUrlAbsolute)\n        {\n            var full = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, buttonIndex, buttonTitle, destinationUrlAbsolute);\n            var pos = full.LastIndexOf(\"/r/\", StringComparison.OrdinalIgnoreCase);\n            return (pos >= 0) ? full[(pos + 3)..] : full;\n        }\n\n        private sealed record ResolvedTemplateMeta(string TemplateName, string Language, int PlaceholderCount);\n\n        // ...inside CampaignMaterializationService class\n\n        private static int CountPlaceholders(string? text)\n        {\n            if (string.IsNullOrWhiteSpace(text)) return 0;\n            // matches {{1}}, {{ 2 }}, etc.\n            return Regex.Matches(text, @\"\\{\\{\\s*\\d+\\s*\\}\\}\").Count;\n        }\n\n        private async Task<ResolvedTemplateMeta> ResolveTemplateMetaAsync(\n            Campaign campaign,\n            Guid businessId,\n            CancellationToken ct)\n        {\n            string templateName = string.Empty;\n            string language = \"en\";\n            int placeholderCount = 0;\n\n            // 1) Snapshot first (if stored)\n            if (!string.IsNullOrWhiteSpace(campaign.TemplateSchemaSnapshot))\n            {\n                try\n                {\n                    using var doc = JsonDocument.Parse(campaign.TemplateSchemaSnapshot);\n                    var root = doc.RootElement;\n\n                    if (root.TryGetProperty(\"name\", out var n) && n.ValueKind == JsonValueKind.String)\n                        templateName = n.GetString() ?? string.Empty;\n\n                    if (root.TryGetProperty(\"language\", out var l) && l.ValueKind == JsonValueKind.String)\n                        language = l.GetString() ?? \"en\";\n\n                    if (root.TryGetProperty(\"placeholderCount\", out var pc) && pc.TryGetInt32(out var snapCount))\n                        placeholderCount = snapCount;\n                }\n                catch { /* non-fatal */ }\n            }\n\n            // 2) Prefer stored TemplateParameters count if present\n            if (!string.IsNullOrWhiteSpace(campaign.TemplateParameters))\n            {\n                try\n                {\n                    var arr = JsonSerializer.Deserialize<List<string>>(campaign.TemplateParameters) ?? new();\n                    placeholderCount = Math.Max(placeholderCount, arr.Count);\n                }\n                catch { /* ignore bad param JSON */ }\n            }\n\n            // 3) If name still missing, use MessageTemplate as canonical name (fall back to TemplateId)\n            if (string.IsNullOrWhiteSpace(templateName))\n                templateName = campaign.MessageTemplate ?? campaign.TemplateId ?? string.Empty;\n\n            // 4) Fallback to live metadata if essentials missing\n            if (placeholderCount <= 0 || string.IsNullOrWhiteSpace(templateName))\n            {\n                try\n                {\n                    var live = await _templateFetcher.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n                    if (live != null)\n                    {\n                        if (string.IsNullOrWhiteSpace(templateName) && !string.IsNullOrWhiteSpace(live.Name))\n                            templateName = live.Name!;\n                        if (!string.IsNullOrWhiteSpace(live.Language))\n                            language = live.Language!;\n\n                        // Your TemplateMetadataDto exposes PlaceholderCount and Body (no .Parameters)\n                        var liveCount = live.PlaceholderCount > 0\n                            ? live.PlaceholderCount\n                            : CountPlaceholders(live.Body);\n\n                        placeholderCount = Math.Max(placeholderCount, liveCount);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Log.Warning(ex, \"Live template meta fetch failed for {Template}/{Lang}\", templateName, language);\n                }\n            }\n\n            if (string.IsNullOrWhiteSpace(language)) language = \"en\";\n            if (placeholderCount < 0) placeholderCount = 0;\n\n            return new ResolvedTemplateMeta(templateName, language, placeholderCount);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignMaterializer.cs",
      "sha256": "fe42a0c15b5bff77574cea20263a21868a0f07a8a4f465629a32ef129b8ab294",
      "language": "csharp",
      "size": 24005,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Helpers;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// CSV-based materializer:\n    /// - Dry-run: validates + resolves variables/phones (no writes)\n    /// - Persist: creates Audience + AudienceMembers + CampaignRecipients with\n    ///   ResolvedParametersJson, ResolvedButtonUrlsJson, IdempotencyKey, MaterializedAt.\n    /// </summary>\n    public sealed class CampaignMaterializer : ICampaignMaterializer\n    {\n        private readonly AppDbContext _db;\n        private readonly IVariableResolver _resolver;\n\n        // Common phone header candidates (case-insensitive)\n        private static readonly string[] PhoneHeaderCandidates =\n        {\n            \"phone\", \"mobile\", \"whatsapp\", \"msisdn\", \"whatsapp_number\", \"contact\", \"contact_number\"\n        };\n\n        public CampaignMaterializer(AppDbContext db, IVariableResolver resolver)\n        {\n            _db = db;\n            _resolver = resolver;\n        }\n        // === NEW: infer mappings when FE did not send or sent partial mappings =========\n        private static Dictionary<string, string> BuildAutoMappingsFromRow(\n            IDictionary<string, string> rowDict,\n            int requiredBodySlots // 0 if unknown\n        )\n        {\n            // We will map to the variable keys your IVariableResolver expects:\n            //  - \"{{1}}\" -> CSV column name\n            //  - \"header.text_paramN\" -> CSV column\n            //  - \"buttonN.url_param\"  -> CSV column\n            var map = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n\n            // 1) body: parameter1..N  -> {{1}}..{{N}}\n            // If N unknown, infer by scanning parameter\\d+ in row headers\n            int n = requiredBodySlots > 0\n                ? requiredBodySlots\n                : rowDict.Keys.Select(k =>\n                {\n                    var m = System.Text.RegularExpressions.Regex.Match(k, @\"^parameter(\\d+)$\", RegexOptions.IgnoreCase);\n                    return m.Success ? int.Parse(m.Groups[1].Value) : 0;\n                }).DefaultIfEmpty(0).Max();\n\n            for (int i = 1; i <= n; i++)\n            {\n                var csvHeader = rowDict.Keys.FirstOrDefault(k => string.Equals(k, $\"parameter{i}\", StringComparison.OrdinalIgnoreCase));\n                if (!string.IsNullOrWhiteSpace(csvHeader))\n                    map[$\"{{{{{i}}}}}\"] = csvHeader; // -> {{i}}\n            }\n\n            // 2) header text variables: headerparaN -> header.text_paramN\n            foreach (var kv in rowDict)\n            {\n                var m = System.Text.RegularExpressions.Regex.Match(kv.Key, @\"^headerpara(\\d+)$\", RegexOptions.IgnoreCase);\n                if (m.Success)\n                {\n                    var slot = int.Parse(m.Groups[1].Value);\n                    map[$\"header.text_param{slot}\"] = kv.Key;\n                }\n            }\n\n            // 3) dynamic URL buttons: buttonparaN -> buttonN.url_param\n            foreach (var kv in rowDict)\n            {\n                var m = System.Text.RegularExpressions.Regex.Match(kv.Key, @\"^buttonpara(\\d+)$\", RegexOptions.IgnoreCase);\n                if (m.Success)\n                {\n                    var pos = int.Parse(m.Groups[1].Value);\n                    if (pos >= 1 && pos <= 3)\n                        map[$\"button{pos}.url_param\"] = kv.Key;\n                }\n            }\n\n            return map;\n        }\n\n        // === NEW: read the template’s body placeholder count for strict enforcement ====\n        private async Task<int> GetRequiredBodySlotsAsync(Guid businessId, Guid campaignId, CancellationToken ct)\n        {\n            // Try reading campaign -> template name and then WhatsAppTemplates.PlaceholderCount\n            var data = await _db.Campaigns\n                .AsNoTracking()\n                .Where(c => c.Id == campaignId && c.BusinessId == businessId)\n                .Select(c => new { c.MessageTemplate, c.TemplateId })\n                .FirstOrDefaultAsync(ct);\n\n            var templateName = !string.IsNullOrWhiteSpace(data?.TemplateId)\n                ? data!.TemplateId!\n                : (data?.MessageTemplate ?? string.Empty);\n\n            if (string.IsNullOrWhiteSpace(templateName))\n                return 0;\n\n            // Use the most recent active row\n            var tpl = await _db.WhatsAppTemplates\n                .AsNoTracking()\n                .Where(t => t.BusinessId == businessId && t.IsActive && t.Name == templateName)\n                .OrderByDescending(t => t.UpdatedAt > t.CreatedAt ? t.UpdatedAt : t.CreatedAt)\n                .FirstOrDefaultAsync(ct);\n\n            return tpl?.PlaceholderCount ?? 0;\n        }\n\n        // === NEW: ensure body params are complete; return null when missing ============\n        private static string[]? EnsureBodyParamsComplete(string[] bodyParams, int requiredSlots, out List<string> missing)\n        {\n            missing = new List<string>();\n            if (requiredSlots <= 0) return bodyParams; // nothing to enforce\n\n            // Resize to requiredSlots\n            var arr = new string[requiredSlots];\n            for (int i = 0; i < requiredSlots; i++)\n            {\n                var v = (i < bodyParams.Length ? bodyParams[i] : string.Empty) ?? string.Empty;\n                arr[i] = v;\n                if (string.IsNullOrWhiteSpace(v))\n                    missing.Add($\"{{{{{i + 1}}}}}\");\n            }\n\n            if (missing.Count > 0)\n                return null;\n\n            return arr;\n        }\n\n        // File: Features/CampaignModule/Services/CampaignMaterializer.cs\n        // Method: CreateAsync(...)\n        // NOTE: This version is identical to yours except we pull `requiredBodySlots` ONCE before the foreach.\n        //       Everything else remains the same (including the enforcement you added).\n\n        public async Task<CampaignCsvMaterializeResponseDto> CreateAsync(\n            Guid businessId,\n            Guid campaignId,\n            CampaignCsvMaterializeRequestDto request,\n            CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty) throw new UnauthorizedAccessException(\"Invalid business id.\");\n            if (campaignId == Guid.Empty) throw new ArgumentException(\"Invalid campaign id.\");\n            if (request is null) throw new ArgumentNullException(nameof(request));\n            if (request.CsvBatchId == Guid.Empty) throw new ArgumentException(\"CsvBatchId is required.\");\n            if (request.Persist && string.IsNullOrWhiteSpace(request.AudienceName))\n                throw new ArgumentException(\"AudienceName is required when Persist=true.\");\n\n            // Campaign ownership check\n            var owns = await _db.Campaigns\n                .AsNoTracking()\n                .AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId, ct);\n            if (!owns) throw new UnauthorizedAccessException(\"Campaign not found or not owned by this business.\");\n\n            // Load CSV rows for the batch\n            var rowsQuery = _db.CsvRows\n                .AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == request.CsvBatchId)\n                .OrderBy(r => r.RowIndex);\n\n            var totalRows = await rowsQuery.CountAsync(ct);\n            var csvRows = (request.Limit.HasValue && request.Limit.Value > 0)\n                ? await rowsQuery.Take(request.Limit.Value).ToListAsync(ct)\n                : await rowsQuery.ToListAsync(ct);\n\n            var resp = new CampaignCsvMaterializeResponseDto\n            {\n                CampaignId = campaignId,\n                CsvBatchId = request.CsvBatchId,\n                TotalRows = totalRows\n            };\n\n            // Build header set to help autodetect phone field\n            var headerSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n            foreach (var r in csvRows)\n            {\n                foreach (var k in JsonToDict(r.DataJson).Keys)\n                    headerSet.Add(k);\n            }\n\n            // Mapping precedence: request → fallback header==token\n            var effectiveMappings = request.Mappings ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n\n            // Determine phone field\n            var phoneField = request.PhoneField;\n            if (string.IsNullOrWhiteSpace(phoneField))\n                phoneField = PhoneHeaderCandidates.FirstOrDefault(headerSet.Contains);\n\n            if (string.IsNullOrWhiteSpace(phoneField))\n                resp.Warnings.Add(\"No phone field provided or detected; rows without phone will be skipped.\");\n\n            // 🔎 Pull required body slots ONCE (avoid N queries)\n            var requiredBodySlots = await GetRequiredBodySlotsAsync(businessId, campaignId, ct);\n\n            var seenPhones = new HashSet<string>(StringComparer.Ordinal);\n            var preview = resp.Preview; // alias\n\n            foreach (var row in csvRows)\n            {\n                ct.ThrowIfCancellationRequested();\n\n                var rowDict = JsonToDict(row.DataJson);\n                var m = new CsvMaterializedRowDto { RowIndex = row.RowIndex };\n\n                // 🧭 effective mappings: request.Mappings OR auto-infer from row\n                var mappingsToUse =\n                    (effectiveMappings != null && effectiveMappings.Count > 0)\n                        ? new Dictionary<string, string>(effectiveMappings, StringComparer.OrdinalIgnoreCase)\n                        : BuildAutoMappingsFromRow(rowDict, requiredBodySlots);\n\n                // Variables for template (canonicalized by resolver)\n                m.Variables = _resolver.ResolveVariables(rowDict, mappingsToUse);\n\n                // Phone selection\n                string? phone = null;\n                if (!string.IsNullOrWhiteSpace(phoneField))\n                {\n                    rowDict.TryGetValue(phoneField, out phone);\n                }\n                else\n                {\n                    foreach (var cand in PhoneHeaderCandidates)\n                        if (rowDict.TryGetValue(cand, out phone) && !string.IsNullOrWhiteSpace(phone))\n                            break;\n                }\n\n                phone = NormalizePhoneMaybe(phone, request.NormalizePhones);\n                m.Phone = phone;\n\n                if (string.IsNullOrWhiteSpace(m.Phone))\n                {\n                    m.Errors.Add(\"Missing phone\");\n                    resp.SkippedCount++;\n                    continue;\n                }\n\n                if (request.Deduplicate && !seenPhones.Add(m.Phone))\n                {\n                    m.Errors.Add(\"Duplicate phone (deduped)\");\n                    resp.SkippedCount++;\n                    continue;\n                }\n\n                // 🔒 Enforce required body placeholders BEFORE adding to preview\n                var prelimBodyParams = BuildBodyParamArrayFromVariables(\n                    m.Variables ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase));\n\n                var enforced = EnsureBodyParamsComplete(prelimBodyParams, requiredBodySlots, out var missingSlots);\n                if (enforced == null)\n                {\n                    // at least one required slot missing → skip this row\n                    m.Errors.Add($\"Missing body parameters: {string.Join(\", \", missingSlots)}\");\n                    resp.SkippedCount++;\n                    continue;\n                }\n\n                // (Optional) keep for troubleshooting:\n                // m.DebugBodyParams = enforced;\n\n                preview.Add(m);\n            }\n\n            resp.MaterializedCount = preview.Count;\n\n            // Persist if requested\n            if (request.Persist && resp.MaterializedCount > 0)\n            {\n                var audienceId = await PersistAudienceAndRecipientsAsync(\n                    businessId, campaignId, request.AudienceName!, preview, ct);\n\n                resp.AudienceId = audienceId;\n            }\n\n            return resp;\n        }\n\n\n\n        // ---------- Persistence ----------\n        // NEW: reusable helper (body {{n}} → string[])\n        // NEW: reusable helper (body {{n}} / parameterN / body.N → string[])\n        private static string[] BuildBodyParamArrayFromVariables(IDictionary<string, string> vars)\n        {\n            var pairs = new List<(int idx, string val)>();\n\n            foreach (var kv in vars)\n            {\n                var k = kv.Key ?? string.Empty;\n                var v = kv.Value ?? string.Empty;\n\n                // 1) body.N\n                if (k.StartsWith(\"body.\", StringComparison.OrdinalIgnoreCase))\n                {\n                    if (int.TryParse(k.AsSpan(\"body.\".Length), out var n) && n > 0)\n                        pairs.Add((n, v));\n                    continue;\n                }\n\n                // 2) parameterN (FE mapping keys)\n                if (k.StartsWith(\"parameter\", StringComparison.OrdinalIgnoreCase))\n                {\n                    if (int.TryParse(k.AsSpan(\"parameter\".Length), out var n) && n > 0)\n                        pairs.Add((n, v));\n                    continue;\n                }\n\n                // 3) {{N}} (auto-mapper tokens)\n                // match exactly {{  number  }}\n                var m = System.Text.RegularExpressions.Regex.Match(k, @\"^\\{\\{\\s*(\\d+)\\s*\\}\\}$\");\n                if (m.Success && int.TryParse(m.Groups[1].Value, out var t) && t > 0)\n                {\n                    pairs.Add((t, v));\n                    continue;\n                }\n            }\n\n            if (pairs.Count == 0) return Array.Empty<string>();\n\n            var max = pairs.Max(p => p.idx);\n            var arr = new string[max];\n            for (int i = 0; i < max; i++) arr[i] = string.Empty;\n            foreach (var (idx, val) in pairs) arr[idx - 1] = val ?? string.Empty;\n            return arr;\n        }\n\n        // CampaignMaterializer.cs  — replace the whole method\n        private async Task<Guid> PersistAudienceAndRecipientsAsync(\n            Guid businessId,\n            Guid campaignId,\n            string audienceName,\n            List<CsvMaterializedRowDto> rows,\n            CancellationToken ct)\n        {\n            await using var tx = await _db.Database.BeginTransactionAsync(ct);\n            try\n            {\n                var now = DateTime.UtcNow;\n\n                var audience = new Audience\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Name = audienceName,\n                    CreatedAt = now,\n                    UpdatedAt = now\n                };\n                _db.Audiences.Add(audience);\n\n                // --- local helpers --------------------------------------------------\n                static string[] BuildBodyParamArray(IDictionary<string, string> vars)\n                {\n                    // Accept both \"body.N\" and \"parameterN\"\n                    var pairs = new List<(int idx, string val)>();\n\n                    foreach (var kv in vars)\n                    {\n                        var k = kv.Key;\n\n                        // body.N\n                        if (k.StartsWith(\"body.\", StringComparison.OrdinalIgnoreCase))\n                        {\n                            if (int.TryParse(k.AsSpan(\"body.\".Length), out var n) && n > 0)\n                                pairs.Add((n, kv.Value ?? string.Empty));\n                            continue;\n                        }\n\n                        // parameterN (compat)\n                        if (k.StartsWith(\"parameter\", StringComparison.OrdinalIgnoreCase))\n                        {\n                            if (int.TryParse(k.AsSpan(\"parameter\".Length), out var n) && n > 0)\n                                pairs.Add((n, kv.Value ?? string.Empty));\n                        }\n                    }\n\n                    if (pairs.Count == 0) return Array.Empty<string>();\n\n                    var max = pairs.Max(p => p.idx);\n                    var arr = new string[max];\n                    for (int i = 0; i < max; i++) arr[i] = string.Empty;\n                    foreach (var (idx, val) in pairs) arr[idx - 1] = val ?? string.Empty;\n                    return arr;\n                }\n\n                static Dictionary<string, string> BuildHeaderAndButtonVars(IDictionary<string, string> vars)\n                {\n                    // We store non-body keys in ResolvedButtonUrlsJson (generic bag):\n                    // - header.image_url / header.video_url / header.document_url\n                    // - header.text.N\n                    // - button{1..3}.url_param\n                    var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n\n                    foreach (var kv in vars)\n                    {\n                        var k = kv.Key;\n                        var v = kv.Value ?? string.Empty;\n\n                        // header media urls\n                        if (k.StartsWith(\"header.\", StringComparison.OrdinalIgnoreCase) &&\n                           (k.EndsWith(\"_url\", StringComparison.OrdinalIgnoreCase) ||\n                            k.EndsWith(\".url\", StringComparison.OrdinalIgnoreCase)))\n                        {\n                            dict[k] = v;\n                            continue;\n                        }\n\n                        // header text placeholders: header.text.N\n                        if (k.StartsWith(\"header.text.\", StringComparison.OrdinalIgnoreCase))\n                        {\n                            var tail = k.Substring(\"header.text.\".Length);\n                            if (int.TryParse(tail, out var n) && n > 0)\n                                dict[k] = v;\n                            continue;\n                        }\n\n                        // URL button param variants → normalize to .url_param\n                        if (k.StartsWith(\"button\", StringComparison.OrdinalIgnoreCase))\n                        {\n                            var normKey = k\n                                .Replace(\".url.param\", \".url_param\", StringComparison.OrdinalIgnoreCase)\n                                .Replace(\".urlparam\", \".url_param\", StringComparison.OrdinalIgnoreCase);\n\n                            if (normKey.EndsWith(\".url_param\", StringComparison.OrdinalIgnoreCase))\n                                dict[normKey] = v;\n                        }\n                    }\n\n                    return dict;\n                }\n                // --------------------------------------------------------------------\n\n                foreach (var r in rows)\n                {\n                    if (string.IsNullOrWhiteSpace(r.Phone))\n                        continue; // safety; missing phone rows were already filtered\n\n                    // Try to link to an existing Contact by normalized phone\n                    Guid? contactId = await _db.Contacts\n                        .Where(c => c.BusinessId == businessId && c.PhoneNumber == r.Phone)\n                        .Select(c => (Guid?)c.Id)\n                        .FirstOrDefaultAsync(ct);\n\n                    var variables = r.Variables ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n\n                    // Keep full variable map on AudienceMember for export/debug\n                    var attributesJson = JsonSerializer.Serialize(variables);\n\n                    // Shapes expected by sender:\n                    var bodyParams = BuildBodyParamArray(variables);            // string[] for {{1}}..{{N}}\n                    var headerAndButtons = BuildHeaderAndButtonVars(variables); // dict for header.* + button*.url_param\n\n                    var resolvedParamsJson = JsonSerializer.Serialize(bodyParams);\n                    var resolvedButtonsJson = JsonSerializer.Serialize(headerAndButtons);\n\n                    // Idempotency: include both body params and header/button vars\n                    var idemPayload = JsonSerializer.Serialize(new { p = bodyParams, b = headerAndButtons });\n                    var idempotencyKey = ComputeIdempotencyKey(campaignId, r.Phone, idemPayload);\n\n                    var member = new AudienceMember\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        AudienceId = audience.Id,\n                        ContactId = contactId,                 // stays null if no match\n                        PhoneE164 = r.Phone,                   // normalized earlier\n                        AttributesJson = attributesJson,\n                        IsTransientContact = !contactId.HasValue,\n                        CreatedAt = now,\n                        UpdatedAt = now\n                    };\n                    _db.AudiencesMembers.Add(member);\n\n                    var recipient = new CampaignRecipient\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        CampaignId = campaignId,\n                        AudienceMemberId = member.Id,\n                        IdempotencyKey = idempotencyKey,\n                        ResolvedParametersJson = resolvedParamsJson,   // string[] (body)\n                        ResolvedButtonUrlsJson = resolvedButtonsJson,  // dict (header + buttons)\n                        MaterializedAt = now,\n                        Status = \"Pending\",\n                        UpdatedAt = now\n                    };\n\n                    if (contactId.HasValue)\n                        recipient.ContactId = contactId.Value;\n\n                    _db.CampaignRecipients.Add(recipient);\n                }\n\n                await _db.SaveChangesAsync(ct);\n                await tx.CommitAsync(ct);\n                return audience.Id;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Materialize persist failed\");\n                await tx.RollbackAsync(ct);\n                throw;\n            }\n        }\n\n\n        // ---------- Utils ----------\n        private static Dictionary<string, string> JsonToDict(string? json)\n        {\n            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            if (string.IsNullOrWhiteSpace(json)) return dict;\n\n            using var doc = JsonDocument.Parse(json);\n            if (doc.RootElement.ValueKind != JsonValueKind.Object) return dict;\n            foreach (var p in doc.RootElement.EnumerateObject())\n                dict[p.Name] = p.Value.ValueKind == JsonValueKind.Null ? \"\" : p.Value.ToString();\n\n            return dict;\n        }\n\n        private static string? NormalizePhoneMaybe(string? raw, bool normalize)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var trimmed = raw.Trim();\n            if (!normalize) return trimmed;\n\n            // naive E.164-lite cleanup; swap for your real normalizer later\n            var digits = Regex.Replace(trimmed, \"[^0-9]\", \"\");\n            digits = digits.TrimStart('0');\n\n            // Heuristic for India: add 91 if 10-digit local\n            if (digits.Length == 10) digits = \"91\" + digits;\n\n            return digits.Length >= 10 ? digits : trimmed;\n        }\n\n        private static string ComputeIdempotencyKey(Guid campaignId, string phone, string parametersJson)\n        {\n            var raw = $\"{campaignId}|{phone}|{parametersJson}\";\n            using var sha = SHA256.Create();\n            var bytes = sha.ComputeHash(Encoding.UTF8.GetBytes(raw));\n            return Convert.ToHexString(bytes);\n        }\n    }\n}\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignPreviewService.cs",
      "sha256": "7b76cfe39ba8ab8167b8c7ac8883bb99f48d1714cfd45b9d0cbfc5f4e3e8f93f",
      "language": "csharp",
      "size": 11517,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog; // ✅ use Serilog like the rest of your services\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Shared.utility;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignPreviewService\n    {\n        Task<CampaignPreviewResponseDto> PreviewAsync(Guid businessId, Guid campaignId, Guid? contactId);\n    }\n\n    public class CampaignPreviewService : ICampaignPreviewService\n    {\n        private readonly AppDbContext _db;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcher;\n        private readonly IUrlBuilderService _urlBuilder;\n\n        public CampaignPreviewService(\n            AppDbContext db,\n            IWhatsAppTemplateFetcherService templateFetcher,\n            IUrlBuilderService urlBuilder)\n        {\n            _db = db;\n            _templateFetcher = templateFetcher;\n            _urlBuilder = urlBuilder;\n        }\n\n        public async Task<CampaignPreviewResponseDto> PreviewAsync(Guid businessId, Guid campaignId, Guid? contactId)\n        {\n            try\n            {\n                Log.Information(\"🧪 Preview start | biz={BusinessId} campaign={CampaignId} contactId={ContactId}\",\n                    businessId, campaignId, contactId);\n\n                var campaign = await _db.Campaigns\n                    .Include(c => c.MultiButtons)\n                    .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n                if (campaign == null)\n                {\n                    Log.Warning(\"❌ Preview aborted: campaign not found | biz={BusinessId} campaign={CampaignId}\",\n                        businessId, campaignId);\n                    throw new InvalidOperationException(\"Campaign not found.\");\n                }\n\n                // Resolve template name (respect flow entry if any)\n                var templateName = await ResolveStartTemplateName(businessId, campaign);\n                Log.Information(\"🔎 Preview resolved template | campaign={CampaignId} template={TemplateName}\",\n                    campaign.Id, templateName);\n\n                // Fetch template meta (body/buttons/lang/header)\n                var meta = await _templateFetcher.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n                if (meta == null)\n                {\n                    Log.Warning(\"❌ Preview aborted: template metadata not found | biz={BusinessId} template={TemplateName}\",\n                        businessId, templateName);\n                    throw new InvalidOperationException(\"Template metadata not found.\");\n                }\n\n                // Prepare parameters/body\n                var parsedParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n                var body = meta.Body ?? campaign.MessageTemplate ?? string.Empty;\n                var bodyPreview = TemplateParameterHelper.FillPlaceholders(body, parsedParams);\n\n                // Compute missing params (simple check: count vs supplied)\n                var missing = new List<string>();\n                if (meta.PlaceholderCount > 0)\n                {\n                    var supplied = parsedParams?.Count ?? 0;\n                    if (supplied < meta.PlaceholderCount)\n                    {\n                        for (int i = supplied + 1; i <= meta.PlaceholderCount; i++)\n                            missing.Add($\"{{{{{i}}}}} parameter is missing\");\n\n                        Log.Warning(\"⚠️ Preview found missing params | campaign={CampaignId} required={Required} supplied={Supplied}\",\n                            campaign.Id, meta.PlaceholderCount, supplied);\n                    }\n                }\n\n                // Choose contact for dynamic phone substitutions\n                var contact = await PickContactAsync(campaign, contactId);\n\n                // Buttons preview\n                var buttons = BuildButtonsPreview(campaign, meta, contact);\n\n                var result = new CampaignPreviewResponseDto\n                {\n                    CampaignId = campaign.Id,\n                    TemplateName = templateName,\n                    Language = meta.Language ?? \"en_US\",\n                    PlaceholderCount = meta.PlaceholderCount,\n                    BodyPreview = bodyPreview,\n                    MissingParams = missing,\n                    HasHeaderMedia = meta.HasImageHeader,\n                    HeaderType = meta.HasImageHeader ? \"IMAGE\" : null,\n                    Buttons = buttons\n                };\n\n                Log.Information(\"✅ Preview ready | campaign={CampaignId} template={TemplateName} placeholders={Count}\",\n                    campaign.Id, templateName, meta.PlaceholderCount);\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"🚨 Preview failed | biz={BusinessId} campaign={CampaignId}\", businessId, campaignId);\n                throw; // let controller shape the HTTP response (keeps consistency with your pattern)\n            }\n        }\n\n        // ---------- helpers ----------\n\n        private async Task<string> ResolveStartTemplateName(Guid businessId, Campaign campaign)\n        {\n            string selected = campaign.TemplateId ?? campaign.MessageTemplate ?? string.Empty;\n            if (!campaign.CTAFlowConfigId.HasValue || campaign.CTAFlowConfigId.Value == Guid.Empty)\n                return selected;\n\n            var flow = await _db.CTAFlowConfigs\n                .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(f => f.Id == campaign.CTAFlowConfigId.Value\n                                        && f.BusinessId == businessId\n                                        && f.IsActive);\n\n            if (flow == null || flow.Steps == null || flow.Steps.Count == 0)\n                return selected;\n\n            var incoming = new HashSet<Guid>(flow.Steps\n                .SelectMany(s => s.ButtonLinks)\n                .Where(l => l.NextStepId.HasValue)\n                .Select(l => l.NextStepId!.Value));\n\n            var entry = flow.Steps.OrderBy(s => s.StepOrder)\n                                  .FirstOrDefault(s => !incoming.Contains(s.Id));\n\n            return string.IsNullOrWhiteSpace(entry?.TemplateToSend) ? selected : entry!.TemplateToSend!;\n        }\n\n        private async Task<Contact?> PickContactAsync(Campaign campaign, Guid? requestedContactId)\n        {\n            if (requestedContactId.HasValue)\n            {\n                var specific = campaign.Recipients?.FirstOrDefault(r => r.ContactId == requestedContactId)?.Contact;\n                if (specific != null) return specific;\n\n                // allow direct lookup if not in recipients yet\n                return await _db.Contacts.FirstOrDefaultAsync(c =>\n                    c.Id == requestedContactId.Value && c.BusinessId == campaign.BusinessId);\n            }\n\n            // fallback: first recipient’s contact\n            return campaign.Recipients?.FirstOrDefault()?.Contact;\n        }\n\n        private List<ButtonPreviewDto> BuildButtonsPreview(Campaign campaign, TemplateMetadataDto meta, Contact? contact)\n        {\n            var result = new List<ButtonPreviewDto>();\n            var campaignButtons = campaign.MultiButtons?\n                .OrderBy(b => b.Position)\n                .Take(3)\n                .ToList() ?? new List<CampaignButton>();\n\n            var templateButtons = meta.ButtonParams ?? new List<ButtonMetadataDto>();\n            var total = Math.Min(3, Math.Min(campaignButtons.Count, templateButtons.Count));\n\n            for (int i = 0; i < total; i++)\n            {\n                var tplBtn = templateButtons[i];\n                var campBtn = campaignButtons[i];\n\n                var subType = (tplBtn.SubType ?? \"url\").ToLowerInvariant();\n                var baseParam = tplBtn.ParameterValue?.Trim();\n                var isDynamic = subType == \"url\" && !string.IsNullOrWhiteSpace(baseParam) && baseParam.Contains(\"{{\");\n\n                string? token = null;\n                string? previewUrl = null;\n                string? campaignValue = campBtn.Value?.Trim();\n\n                if (isDynamic && string.IsNullOrWhiteSpace(campaignValue))\n                {\n                    Log.Warning(\"⚠️ Preview: dynamic URL button without campaign value | campaign={CampaignId} idx={Index} label={Label}\",\n                        campaign.Id, i, tplBtn.Text ?? campBtn.Title ?? \"\");\n                }\n\n                if (isDynamic && !string.IsNullOrWhiteSpace(campaignValue))\n                {\n                    // optional phone substitution\n                    var phone = NormalizePhone(contact?.PhoneNumber);\n                    var replaced = campaignValue.Contains(\"{{1}}\")\n                        ? campaignValue.Replace(\"{{1}}\", Uri.EscapeDataString(phone ?? \"\"))\n                        : campaignValue;\n\n                    // Build tracked URL using a synthetic id (only for preview)\n                    var fakeLogId = Guid.NewGuid();\n                    var tracked = _urlBuilder.BuildTrackedButtonUrl(fakeLogId, i, campBtn.Title, NormalizeAbsoluteUrl(replaced));\n                    previewUrl = tracked;\n\n                    // extract token after \"/r/\"\n                    token = ExtractToken(tracked);\n                }\n\n                result.Add(new ButtonPreviewDto\n                {\n                    Index = i,\n                    Text = tplBtn.Text ?? campBtn.Title ?? \"\",\n                    Type = tplBtn.Type ?? \"URL\",\n                    IsDynamic = isDynamic,\n                    TemplateParamBase = baseParam,\n                    CampaignValue = campaignValue,\n                    TokenParam = token,\n                    FinalUrlPreview = previewUrl\n                });\n            }\n\n            return result;\n        }\n\n        private static string? NormalizePhone(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var s = raw.Trim();\n            if (!s.StartsWith(\"+\")) s = \"+\" + new string(s.Where(char.IsDigit).ToArray());\n            return s;\n        }\n\n        private static string NormalizeAbsoluteUrl(string input)\n        {\n            // allow tel:/wa: for preview, but tracking expects http(s); if not absolute http(s), keep as-is.\n            if (Uri.TryCreate(input, UriKind.Absolute, out var uri) &&\n                (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                 uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase)))\n            {\n                return uri.ToString();\n            }\n            return input;\n        }\n\n        private static string? ExtractToken(string fullTrackedUrl)\n        {\n            var pos = fullTrackedUrl.LastIndexOf(\"/r/\", StringComparison.OrdinalIgnoreCase);\n            if (pos < 0) return null;\n            var token = fullTrackedUrl[(pos + 3)..];\n            return string.IsNullOrWhiteSpace(token) ? null : token;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignRecipientService.cs",
      "sha256": "3e199694bbe770521c2d3b8b5e58770ed0390d9bc2b2c845e26d4806a41c1ea7",
      "language": "csharp",
      "size": 8095,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CampaignRecipientService : ICampaignRecipientService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignRecipientService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // 🔍 Get a single recipient by ID\n        public async Task<CampaignRecipientDto?> GetByIdAsync(Guid id)\n        {\n            return await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.Id == id)\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .FirstOrDefaultAsync();\n        }\n\n        // 📦 Get all recipients of a specific campaign\n        public async Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId)\n        {\n            return await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId)\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .ToListAsync();\n        }\n\n        // ✏️ Update status of a specific recipient\n        public async Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus)\n        {\n            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);\n            if (recipient == null) return false;\n\n            recipient.Status = newStatus;\n            recipient.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // 💬 Track customer reply or CTA\n        // 🗣️ Track customer reply on a recipient\n        public async Task<bool> TrackReplyAsync(Guid recipientId, string replyText)\n        {\n            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);\n            if (recipient == null) return false;\n\n            recipient.ClickedCTA = replyText;\n            recipient.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n\n        // 🔎 Global recipient search across all campaigns\n        // 🔍 Search recipients by optional status or keyword\n        public async Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null)\n        {\n            var query = _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(status))\n                query = query.Where(r => r.Status == status);\n\n            if (!string.IsNullOrEmpty(keyword))\n                query = query.Where(r =>\n                    r.Contact.Name.Contains(keyword) ||\n                    r.Contact.PhoneNumber.Contains(keyword)\n                );\n\n            return await query\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .ToListAsync();\n        }\n\n        //public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)\n        //{\n        //    var campaign = await _context.Campaigns\n        //        .AsNoTracking()\n        //        .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n        //    if (campaign == null)\n        //        throw new Exception(\"Campaign not found.\");\n\n        //    var businessId = campaign.BusinessId;\n\n        //    var existing = await _context.CampaignRecipients\n        //        .Where(r => r.CampaignId == campaignId && contactIds.Contains(r.ContactId))\n        //        .Select(r => r.ContactId)\n        //        .ToListAsync();\n\n        //    var newRecipients = contactIds\n        //        .Where(id => !existing.Contains(id))\n        //        .Select(contactId => new CampaignRecipient\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            CampaignId = campaignId,\n        //            ContactId = contactId,\n        //            BusinessId = businessId, // ✅ required\n        //            Status = \"Pending\",\n        //            SentAt = DateTime.UtcNow,\n        //            UpdatedAt = DateTime.UtcNow,\n        //            IsAutoTagged = false\n        //        }).ToList();\n\n        //    if (newRecipients.Any())\n        //    {\n        //        await _context.CampaignRecipients.AddRangeAsync(newRecipients);\n        //        await _context.SaveChangesAsync();\n        //    }\n        //}\n\n        public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .AsNoTracking()\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null)\n                throw new Exception(\"Campaign not found.\");\n\n            var businessId = campaign.BusinessId;\n            var now = DateTime.UtcNow;\n\n            // 1) Sanitize inputs (no duplicates, no Guid.Empty)\n            var contactIdsClean = (contactIds ?? new List<Guid>())\n                .Where(id => id != Guid.Empty)\n                .Distinct()\n                .ToList();\n\n            if (contactIdsClean.Count == 0)\n                return;\n\n            // 2) Ensure all contacts belong to the same business (tenant safety)\n            var validContactIds = await _context.Contacts\n                .Where(c => c.BusinessId == businessId && contactIdsClean.Contains(c.Id))\n                .Select(c => c.Id)\n                .ToListAsync();\n\n            if (validContactIds.Count == 0)\n                return;\n\n            // 3) Find existing recipients for this campaign (ContactId is Guid?)\n            var existingContactIds = await _context.CampaignRecipients\n                .Where(r => r.CampaignId == campaignId\n                            && r.ContactId.HasValue\n                            && validContactIds.Contains(r.ContactId.Value))\n                .Select(r => r.ContactId!.Value) // project to non-nullable Guid\n                .ToListAsync();\n\n            // 4) Create recipients only for truly new contacts\n            var newContactIds = validContactIds.Except(existingContactIds).ToList();\n            if (newContactIds.Count == 0)\n                return;\n\n            var newRecipients = newContactIds.Select(contactId => new CampaignRecipient\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = campaignId,\n                BusinessId = businessId,\n                ContactId = contactId,         // non-null Guid\n                Status = \"Pending\",\n                // This is *assignment/materialization*, not send:\n                MaterializedAt = now,\n                SentAt = null,                 // leave null until actually sent\n                UpdatedAt = now,\n                IsAutoTagged = false\n                // AudienceMemberId/IdempotencyKey/etc. if your flow sets them here\n            }).ToList();\n\n            await _context.CampaignRecipients.AddRangeAsync(newRecipients);\n            await _context.SaveChangesAsync();\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignRetryService.cs",
      "sha256": "0e4a2ec463e21ef4eb537bc3ae1cae0e54f3c9282b73bfb666017834dab474f2",
      "language": "csharp",
      "size": 4212,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n \n    public sealed class CampaignRetryService : ICampaignRetryService\n    {\n        private readonly AppDbContext _db;\n        private readonly CampaignService _campaignService; // use concrete to reach batch method\n\n        public CampaignRetryService(AppDbContext db, ICampaignService campaignService)\n        {\n            _db = db;\n            // We know our concrete implementation exposes the batch entry.\n            _campaignService = (CampaignService)campaignService;\n        }\n\n        public async Task<CampaignRetryResultDto> RetryFailedAsync(Guid businessId, Guid campaignId, int limit = 200)\n        {\n            if (businessId == Guid.Empty) throw new UnauthorizedAccessException(\"Invalid business id.\");\n            if (campaignId == Guid.Empty) throw new ArgumentException(\"campaignId is required\");\n            if (limit <= 0) limit = 200;\n\n            var exists = await _db.Campaigns\n                .AsNoTracking()\n                .AnyAsync(c => c.Id == campaignId && c.BusinessId == businessId && !c.IsDeleted);\n            if (!exists) throw new KeyNotFoundException(\"Campaign not found.\");\n\n            // Most recent log per recipient, keep only those whose latest is Failed\n            var failedQuery =\n                from log in _db.CampaignSendLogs.AsNoTracking()\n                where log.BusinessId == businessId && log.CampaignId == campaignId\n                group log by log.RecipientId into g\n                let last = g.OrderByDescending(x => x.CreatedAt).First()\n                where last.SendStatus == \"Failed\"\n                select new { RecipientId = last.RecipientId }; // <-- Guid (non-nullable)\n\n            var failed = await failedQuery\n                .Select(x => x.RecipientId)   // <-- no .Value\n                .Distinct()\n                .Take(limit)\n                .ToListAsync();\n\n            var result = new CampaignRetryResultDto\n            {\n                CampaignId = campaignId,\n                ConsideredFailed = failed.Count\n            };\n\n            if (failed.Count == 0)\n            {\n                result.Note = \"No failed recipients found to retry.\";\n                return result;\n            }\n\n            // Filter out recipients whose latest log is Sent (paranoia/safety)\n            var latestOkQuery =\n                from log in _db.CampaignSendLogs.AsNoTracking()\n                where log.BusinessId == businessId && log.CampaignId == campaignId\n                group log by log.RecipientId into g\n                let last = g.OrderByDescending(x => x.CreatedAt).First()\n                where last.SendStatus == \"Sent\"\n                select new { RecipientId = last.RecipientId }; // Guid\n\n            var alreadyOk = await latestOkQuery\n                .Select(x => x.RecipientId)\n                .ToListAsync();\n\n            var toRetry = failed.Except(alreadyOk).ToList();\n            result.Skipped = failed.Count - toRetry.Count;\n\n            if (toRetry.Count == 0)\n            {\n                result.Note = \"All failed recipients appear to have a later successful send.\";\n                return result;\n            }\n\n            // Send the batch via canonical pipeline (freezing + idempotency safeguard)\n            var resp = await _campaignService.SendTemplateCampaignBatchAsync(campaignId, toRetry);\n\n            result.Retried = resp.Success ? toRetry.Count : 0;\n            result.Note = resp.Success ? \"Retry dispatched.\" : (\"Retry failed: \" + (resp.Message ?? \"Unknown error.\"));\n            result.RecipientIdsSample = toRetry.Take(20).ToList();\n\n            Log.Information(\"Campaign retry executed {@Retry}\", new\n            {\n                businessId,\n                campaignId,\n                consideredFailed = result.ConsideredFailed,\n                skipped = result.Skipped,\n                retried = result.Retried\n            });\n\n            return result;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignService.BatchSend.cs",
      "sha256": "9d3785359f7dace6742cd0602183c331c17695aa9c1cbfb7346421d774cdaf0c",
      "language": "csharp",
      "size": 1876,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public partial class CampaignService\n    {\n        /// <summary>\n        /// Sends a text/template campaign to a given subset of recipient IDs (batch).\n        /// Leverages the same pipeline & idempotency you just implemented.\n        /// </summary>\n        public async Task<ResponseResult> SendTemplateCampaignBatchAsync(Guid campaignId, IEnumerable<Guid> recipientIds)\n        {\n            if (campaignId == Guid.Empty) return ResponseResult.ErrorInfo(\"Invalid campaign id.\");\n            var ids = recipientIds?.Where(id => id != Guid.Empty).Distinct().ToList() ?? new List<Guid>();\n            if (ids.Count == 0) return ResponseResult.ErrorInfo(\"No recipients to send in this batch.\");\n\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients.Where(r => ids.Contains(r.Id))).ThenInclude(r => r.Contact)\n                .Include(c => c.MultiButtons)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n            if (campaign == null) return ResponseResult.ErrorInfo(\"Campaign not found.\");\n            if (campaign.Recipients == null || campaign.Recipients.Count == 0)\n                return ResponseResult.ErrorInfo(\"No batch recipients matched this campaign.\");\n\n            // Reuse your existing method that sends a single campaign object with its recipients loaded.\n            // It already handles: provider resolution, template meta, freezing params/URLs,\n            // idempotency key, logs, and billing ingest.\n            return await SendTextTemplateCampaignAsync(campaign);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignService.cs",
      "sha256": "e60382575da8199eeb0a0b10342b01fdc945baed20ddb0b53c4f5927624d56f2",
      "language": "csharp",
      "size": 208768,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Helpers;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing Newtonsoft.Json;\nusing xbytechat.api.WhatsAppSettings.Services;\nusing xbytechat_api.Features.Billing.Services;\nusing System.Text.RegularExpressions;\nusing xbytechat.api.Common.Utils;\nusing xbytechat.api.Features.TemplateModule.Services;\nusing System.Linq;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public partial class CampaignService : ICampaignService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageService _messageService;\n        private readonly IServiceProvider _serviceProvider;\n        private readonly ILeadTimelineService _timelineService;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n        private readonly IUrlBuilderService _urlBuilderService;\n        private readonly IWhatsAppSenderService _whisatsAppSenderService;\n        private readonly IBillingIngestService _billingIngest;\n        // private readonly Serilog.ILogger _logger = Log.ForContext<CampaignService>();\n\n        private readonly ILogger<WhatsAppTemplateService> _logger;\n        public CampaignService(AppDbContext context, IMessageService messageService,\n                               IServiceProvider serviceProvider,\n                               ILeadTimelineService timelineService,\n                               IMessageEngineService messageEngineService,\n                               IWhatsAppTemplateFetcherService templateFetcherService,\n                               IUrlBuilderService urlBuilderService,\n                               IWhatsAppSenderService whatsAppSenderService, IBillingIngestService billingIngest,\n                               ILogger<WhatsAppTemplateService> logger\n                               )\n        {\n            _context = context;\n            _messageService = messageService;\n            _serviceProvider = serviceProvider;\n            _timelineService = timelineService; // ✅ new\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n            _urlBuilderService = urlBuilderService;\n            _whisatsAppSenderService = whatsAppSenderService;\n            _billingIngest = billingIngest;\n            _logger = logger;\n\n        }\n\n\n        #region Get All Types of Get and Update and Delete Methods\n        // Reads per-recipient variables (header/button canonical keys)\n        private static string? ResolvePerRecipientValue(CampaignRecipient r, string key)\n        {\n            if (string.IsNullOrWhiteSpace(r.ResolvedButtonUrlsJson)) return null;\n            try\n            {\n                var dict = JsonConvert.DeserializeObject<Dictionary<string, string>>(r.ResolvedButtonUrlsJson)\n                           ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n                return dict.TryGetValue(key, out var v) ? v : null;\n            }\n            catch { return null; }\n        }\n\n        // Returns ordered {{1}}..{{N}} values for a recipient; falls back to campaign snapshot\n        private static List<string> BuildBodyParametersForRecipient(Campaign campaign, CampaignRecipient r)\n        {\n            // Preferred: frozen params on recipient (string[])\n            if (!string.IsNullOrWhiteSpace(r.ResolvedParametersJson))\n            {\n                try\n                {\n                    var arr = JsonConvert.DeserializeObject<string[]>(r.ResolvedParametersJson);\n                    if (arr != null) return arr.ToList();\n                }\n                catch { /* ignore */ }\n            }\n\n            // Fallback: campaign.TemplateParameters (stored as JSON array of strings)\n            try\n            {\n                return TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters).ToList();\n            }\n            catch\n            {\n                return new List<string>();\n            }\n        }\n\n        // Builds canonical dict for header.* and buttonN.url_param with safe fallbacks\n        // ✅ Works with your current Campaign model (ImageUrl only). No migration needed.\n        private static Dictionary<string, string> BuildButtonParametersForRecipient(Campaign campaign, CampaignRecipient r)\n        {\n            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n\n            // 1) Recipient-specific vars (from CSV materialization)\n            if (!string.IsNullOrWhiteSpace(r.ResolvedButtonUrlsJson))\n            {\n                try\n                {\n                    var d = JsonConvert.DeserializeObject<Dictionary<string, string>>(r.ResolvedButtonUrlsJson);\n                    if (d != null)\n                    {\n                        foreach (var kv in d)\n                            dict[kv.Key] = kv.Value ?? string.Empty;\n                    }\n                }\n                catch { /* ignore */ }\n            }\n\n            // 2) Header fallbacks from campaign (only ImageUrl exists in this branch)\n            if (!dict.ContainsKey(\"header.image_url\") && !string.IsNullOrWhiteSpace(campaign.ImageUrl))\n                dict[\"header.image_url\"] = campaign.ImageUrl!;\n\n            // NOTE:\n            // We do NOT touch header.video_url/header.document_url here,\n            // because Campaign.VideoUrl/DocumentUrl do not exist in this branch.\n\n            // 3) Button URL fallbacks from campaign buttons\n            if (campaign.MultiButtons != null)\n            {\n                foreach (var b in campaign.MultiButtons.OrderBy(b => b.Position).Take(3))\n                {\n                    var key = $\"button{b.Position}.url_param\";\n                    if (!dict.ContainsKey(key) && !string.IsNullOrWhiteSpace(b.Value))\n                        dict[key] = b.Value!;\n                }\n            }\n\n            return dict;\n        }\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId)\n        {\n            return await _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n\n                })\n                .ToListAsync();\n        }\n        public async Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Cta)\n                .Include(c => c.MultiButtons)\n                .Include(c => c.CTAFlowConfig)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null) return null;\n\n            return new CampaignDto\n            {\n                Id = campaign.Id,\n                Name = campaign.Name,\n                MessageTemplate = campaign.MessageTemplate,\n                MessageBody = campaign.MessageBody,\n                TemplateId = campaign.TemplateId,\n                CampaignType = campaign.CampaignType,\n                Status = campaign.Status,\n                ImageUrl = campaign.ImageUrl,\n                ImageCaption = campaign.ImageCaption,\n                CreatedAt = campaign.CreatedAt,\n                ScheduledAt = campaign.ScheduledAt,\n                CtaId = campaign.CtaId,\n                Cta = campaign.Cta == null ? null : new CtaPreviewDto\n                {\n                    Title = campaign.Cta.Title,\n                    ButtonText = campaign.Cta.ButtonText\n                },\n                MultiButtons = campaign.MultiButtons?\n                    .Select(b => new CampaignButtonDto\n                    {\n                        ButtonText = b.Title,\n                        ButtonType = b.Type,\n                        TargetUrl = b.Value\n                    }).ToList() ?? new List<CampaignButtonDto>(),\n                // ✅ Flow surface to UI\n                CTAFlowConfigId = campaign.CTAFlowConfigId,\n                CTAFlowName = campaign.CTAFlowConfig?.FlowName\n            };\n        }\n        // Returns the entry step (no incoming links) and its template name.\n        // If flow is missing/invalid, returns (null, null) and caller should ignore.\n        private async Task<(Guid? entryStepId, string? entryTemplate)> ResolveFlowEntryAsync(Guid businessId, Guid? flowId)\n        {\n            if (!flowId.HasValue || flowId.Value == Guid.Empty) return (null, null);\n\n            var flow = await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(f => f.Id == flowId.Value && f.BusinessId == businessId && f.IsActive);\n\n            if (flow == null || flow.Steps == null || flow.Steps.Count == 0) return (null, null);\n\n            var incoming = new HashSet<Guid>(\n                flow.Steps.SelectMany(s => s.ButtonLinks)\n                          .Where(l => l.NextStepId.HasValue)\n                          .Select(l => l.NextStepId!.Value)\n            );\n\n            var entry = flow.Steps\n                .OrderBy(s => s.StepOrder)\n                .FirstOrDefault(s => !incoming.Contains(s.Id));\n\n            return entry == null ? (null, null) : (entry.Id, entry.TemplateToSend);\n        }\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(type))\n                query = query.Where(c => c.CampaignType == type);\n\n            return await query\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n                    ImageUrl = c.ImageUrl,            // ✅ Now mapped\n                    ImageCaption = c.ImageCaption,    // ✅ Now mapped\n                    CtaTitle = c.Cta != null ? c.Cta.Title : null,  // optional\n                    RecipientCount = c.Recipients.Count()\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId)\n        {\n            var recipients = await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId && r.Contact.BusinessId == businessId)\n                .Select(r => new ContactDto\n                {\n                    Id = r.Contact.Id,\n                    Name = r.Contact.Name,\n                    PhoneNumber = r.Contact.PhoneNumber,\n                    Email = r.Contact.Email,\n                    LeadSource = r.Contact.LeadSource,\n                    CreatedAt = r.Contact.CreatedAt\n                })\n                .ToListAsync();\n\n            return recipients;\n        }\n\n        public async Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt);\n\n            var total = await query.CountAsync();\n\n            var items = await query\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt\n                })\n                .ToListAsync();\n\n            return new PaginatedResponse<CampaignSummaryDto>\n            {\n                Items = items,\n                TotalCount = total,\n                Page = request.Page,\n                PageSize = request.PageSize\n            };\n        }\n        public async Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto)\n        {\n            var campaign = await _context.Campaigns.FindAsync(id);\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            // ✅ Extract BusinessId from current campaign\n            var businessId = campaign.BusinessId;\n\n            // ✅ Optional CTA ownership validation\n            if (dto.CtaId.HasValue)\n            {\n                var cta = await _context.CTADefinitions\n                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);\n\n                if (cta == null)\n                    throw new UnauthorizedAccessException(\"❌ The selected CTA does not belong to your business or is inactive.\");\n            }\n\n            // ✏️ Update campaign fields\n            campaign.Name = dto.Name;\n            campaign.MessageTemplate = dto.MessageTemplate;\n            campaign.TemplateId = dto.TemplateId;\n            campaign.FollowUpTemplateId = dto.FollowUpTemplateId;\n            campaign.CampaignType = dto.CampaignType;\n            campaign.CtaId = dto.CtaId;\n            campaign.ImageUrl = dto.ImageUrl;\n            campaign.ImageCaption = dto.ImageCaption;\n            campaign.UpdatedAt = DateTime.UtcNow;\n            // 🔒 Step 2.1: Refresh snapshot on update when template may have changed\n            try\n            {\n                var effectiveTemplateName = !string.IsNullOrWhiteSpace(campaign.TemplateId)\n                    ? campaign.TemplateId!\n                    : (campaign.MessageTemplate ?? \"\");\n\n                if (!string.IsNullOrWhiteSpace(effectiveTemplateName))\n                {\n                    var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(\n                        businessId,\n                        effectiveTemplateName,\n                        language: null,\n                        provider: campaign.Provider\n                    );\n\n                    campaign.TemplateSchemaSnapshot = snapshotMeta != null\n                        ? JsonConvert.SerializeObject(snapshotMeta)\n                        : JsonConvert.SerializeObject(new\n                        {\n                            Provider = campaign.Provider ?? \"\",\n                            TemplateName = effectiveTemplateName,\n                            Language = \"\" // unknown if not in provider meta\n                        });\n                }\n            }\n            catch (Exception ex)\n            {\n                Log.Warning(ex, \"⚠️ Template schema snapshot (update) failed for campaign {CampaignId}\", id);\n            }\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteCampaignAsync(Guid id)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == id);\n\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            _context.CampaignRecipients.RemoveRange(campaign.Recipients);\n            _context.Campaigns.Remove(campaign);\n\n            await _context.SaveChangesAsync();\n            Log.Information(\"🗑️ Campaign deleted: {Id}\", id);\n            return true;\n        }\n\n        #endregion\n\n        #region // 🆕 CreateCampaignAsync(Text/Image)\n\n\n        //public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)\n        //{\n        //    try\n        //    {\n        //        var campaignId = Guid.NewGuid();\n\n        //        // 🔁 Parse/normalize template parameters once\n        //        var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n        //            JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n        //        );\n\n        //        // 🔒 Validate + resolve sender (optional but recommended)\n        //        string? providerNorm = null;\n        //        if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n        //        {\n        //            // ask WhatsAppSenderService to validate ownership\n        //            var pair = await _whisatsAppSenderService.ResolveSenderPairAsync(businessId, dto.PhoneNumberId);\n        //            if (pair == null)\n        //                throw new InvalidOperationException(\"❌ Selected sender is invalid or does not belong to this business.\");\n        //            providerNorm = pair.Value.Provider; // already normalized to UPPER\n        //        }\n\n        //        // 🔄 Flow id from UI (null/empty => no flow). We will persist this as-is.\n        //        Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)\n        //            ? dto.CTAFlowConfigId.Value\n        //            : (Guid?)null;\n\n        //        Guid? savedFlowId = incomingFlowId;\n\n        //        // 🧩 FLOW VALIDATION (only to align the starting template)\n        //        string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;\n\n        //        CTAFlowConfig? flow = null;\n        //        CTAFlowStep? entryStep = null;\n\n        //        if (incomingFlowId.HasValue)\n        //        {\n        //            flow = await _context.CTAFlowConfigs\n        //                .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n        //                .FirstOrDefaultAsync(f =>\n        //                    f.Id == incomingFlowId.Value &&\n        //                    f.BusinessId == businessId &&\n        //                    f.IsActive);\n\n        //            if (flow != null)\n        //            {\n        //                var allIncoming = new HashSet<Guid>(flow.Steps\n        //                    .SelectMany(s => s.ButtonLinks)\n        //                    .Where(l => l.NextStepId.HasValue)\n        //                    .Select(l => l.NextStepId!.Value));\n\n        //                entryStep = flow.Steps\n        //                    .OrderBy(s => s.StepOrder)\n        //                    .FirstOrDefault(s => !allIncoming.Contains(s.Id));\n\n        //                if (entryStep != null &&\n        //                    !string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))\n        //                {\n        //                    selectedTemplateName = entryStep.TemplateToSend;\n        //                }\n        //            }\n        //        }\n\n        //        var template = await _templateFetcherService.GetTemplateByNameAsync(\n        //            businessId,\n        //            selectedTemplateName,\n        //            includeButtons: true\n        //        );\n\n        //        var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;\n        //        var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);\n\n        //        var campaign = new Campaign\n        //        {\n        //            Id = campaignId,\n        //            BusinessId = businessId,\n        //            Name = dto.Name,\n\n        //            MessageTemplate = dto.MessageTemplate,\n        //            TemplateId = selectedTemplateName,\n\n        //            FollowUpTemplateId = dto.FollowUpTemplateId,\n        //            CampaignType = dto.CampaignType ?? \"text\",\n        //            CtaId = dto.CtaId,\n        //            CTAFlowConfigId = savedFlowId,\n\n        //            ScheduledAt = dto.ScheduledAt,\n        //            CreatedBy = createdBy,\n        //            CreatedAt = DateTime.UtcNow,\n        //            UpdatedAt = DateTime.UtcNow,\n        //            Status = \"Draft\",\n        //            ImageUrl = dto.ImageUrl,\n        //            ImageCaption = dto.ImageCaption,\n        //            TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n        //            MessageBody = resolvedBody,\n\n        //            // 🟢 Persist sender choice (nullable if not selected)\n        //            Provider = providerNorm,\n        //            PhoneNumberId = dto.PhoneNumberId\n        //        };\n        //        // 🔒 Step 2.1: Snapshot template schema (text path)\n        //        try\n        //        {\n        //            var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(\n        //                businessId,\n        //                selectedTemplateName,\n        //                language: null,\n        //                provider: providerNorm\n        //            );\n\n        //            campaign.TemplateSchemaSnapshot = snapshotMeta != null\n        //                ? JsonConvert.SerializeObject(snapshotMeta)\n        //                : JsonConvert.SerializeObject(new\n        //                {\n        //                    Provider = providerNorm ?? \"\",\n        //                    TemplateName = selectedTemplateName,\n        //                    Language = template?.Language ?? \"\"\n        //                });\n        //        }\n        //        catch (Exception ex)\n        //        {\n        //            Log.Warning(ex, \"⚠️ Template schema snapshot failed for campaign {CampaignId}\", campaignId);\n        //        }\n\n        //        await _context.Campaigns.AddAsync(campaign);\n\n        //        if (dto.ContactIds != null && dto.ContactIds.Any())\n        //        {\n        //            var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                CampaignId = campaignId,\n        //                ContactId = contactId,\n        //                BusinessId = businessId,\n        //                Status = \"Pending\",\n        //                SentAt = null,\n        //                UpdatedAt = DateTime.UtcNow\n        //            });\n\n        //            await _context.CampaignRecipients.AddRangeAsync(recipients);\n        //        }\n\n        //        if (dto.MultiButtons != null && dto.MultiButtons.Any())\n        //        {\n        //            var buttons = dto.MultiButtons\n        //                .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n        //                .Take(3)\n        //                .Select((btn, index) => new CampaignButton\n        //                {\n        //                    Id = Guid.NewGuid(),\n        //                    CampaignId = campaignId,\n        //                    Title = btn.ButtonText,\n        //                    Type = btn.ButtonType ?? \"url\",\n        //                    Value = btn.TargetUrl,\n        //                    Position = index + 1,\n        //                    IsFromTemplate = false\n        //                });\n\n        //            await _context.CampaignButtons.AddRangeAsync(buttons);\n        //        }\n\n        //        if (template != null && template.ButtonParams?.Count > 0)\n        //        {\n        //            var buttonsToSave = new List<CampaignButton>();\n        //            var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();\n\n        //            var total = Math.Min(3, template.ButtonParams.Count);\n        //            for (int i = 0; i < total; i++)\n        //            {\n        //                var tplBtn = template.ButtonParams[i];\n        //                var isDynamic = (tplBtn.ParameterValue?.Contains(\"{{1}}\") ?? false);\n\n        //                var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);\n        //                var valueToSave = (isDynamic && userBtn != null)\n        //                    ? userBtn.Value?.Trim()\n        //                    : tplBtn.ParameterValue;\n\n        //                buttonsToSave.Add(new CampaignButton\n        //                {\n        //                    Id = Guid.NewGuid(),\n        //                    CampaignId = campaignId,\n        //                    Title = tplBtn.Text,\n        //                    Type = tplBtn.Type,\n        //                    Value = valueToSave,\n        //                    Position = i + 1,\n        //                    IsFromTemplate = true\n        //                });\n        //            }\n\n        //            await _context.CampaignButtons.AddRangeAsync(buttonsToSave);\n        //        }\n\n        //        await _context.SaveChangesAsync();\n\n        //        Log.Information(\"✅ Campaign '{Name}' created | FlowId: {Flow} | EntryTemplate: {Entry} | Sender: {Provider}/{PhoneId} | Recipients: {Contacts}\",\n        //            dto.Name,\n        //            savedFlowId,\n        //            entryStep?.TemplateToSend ?? selectedTemplateName,\n        //            providerNorm,\n        //            dto.PhoneNumberId,\n        //            dto.ContactIds?.Count ?? 0);\n\n        //        return campaignId;\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        Log.Error(ex, \"❌ Failed to create campaign\");\n        //        return null;\n        //    }\n        //}\n\n        public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)\n        {\n            try\n            {\n                var campaignId = Guid.NewGuid();\n\n                // 🔁 Parse/normalize template parameters once\n                var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n                    JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n                );\n\n                // 🔒 Validate + resolve sender (optional but recommended)\n                string? providerNorm = null;\n                if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                {\n                    var pair = await _whisatsAppSenderService.ResolveSenderPairAsync(businessId, dto.PhoneNumberId);\n                    if (pair == null)\n                        throw new InvalidOperationException(\"❌ Selected sender is invalid or does not belong to this business.\");\n                    providerNorm = pair.Value.Provider; // already normalized to UPPER\n                }\n\n                // 🔄 Flow id from UI (null/empty => no flow)\n                Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)\n                    ? dto.CTAFlowConfigId.Value\n                    : (Guid?)null;\n\n                Guid? savedFlowId = incomingFlowId;\n\n                // 🧩 FLOW VALIDATION (only to align the starting template)\n                string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;\n\n                CTAFlowConfig? flow = null;\n                CTAFlowStep? entryStep = null;\n\n                if (incomingFlowId.HasValue)\n                {\n                    flow = await _context.CTAFlowConfigs\n                        .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n                        .FirstOrDefaultAsync(f =>\n                            f.Id == incomingFlowId.Value &&\n                            f.BusinessId == businessId &&\n                            f.IsActive);\n\n                    if (flow != null)\n                    {\n                        var allIncoming = new HashSet<Guid>(flow.Steps\n                            .SelectMany(s => s.ButtonLinks)\n                            .Where(l => l.NextStepId.HasValue)\n                            .Select(l => l.NextStepId!.Value));\n\n                        entryStep = flow.Steps\n                            .OrderBy(s => s.StepOrder)\n                            .FirstOrDefault(s => !allIncoming.Contains(s.Id));\n\n                        if (entryStep != null &&\n                            !string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))\n                        {\n                            selectedTemplateName = entryStep.TemplateToSend;\n                        }\n                    }\n                }\n\n                var template = await _templateFetcherService.GetTemplateByNameAsync(\n                    businessId,\n                    selectedTemplateName,\n                    includeButtons: true\n                );\n\n                var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);\n\n                // =========================\n                // 🆕 Header kind + URL logic\n                // =========================\n                string headerKind = (dto.HeaderKind ?? \"\").Trim().ToLowerInvariant(); // \"image\" | \"video\" | \"document\" | \"text\" | \"none\"\n                bool isMediaHeader = headerKind == \"image\" || headerKind == \"video\" || headerKind == \"document\";\n\n                // Prefer new unified HeaderMediaUrl; fall back to ImageUrl for legacy image campaigns\n                string? headerUrl = string.IsNullOrWhiteSpace(dto.HeaderMediaUrl)\n                    ? (headerKind == \"image\" ? dto.ImageUrl : null)\n                    : dto.HeaderMediaUrl;\n\n                // ✅ Campaign type: headerKind ALWAYS wins (FE may still send \"text\")\n                string finalCampaignType = isMediaHeader\n                    ? headerKind                               // \"image\" | \"video\" | \"document\"\n                    : (dto.CampaignType ?? \"text\").Trim().ToLowerInvariant();\n\n                // clamp to known values\n                if (finalCampaignType != \"image\" &&\n                    finalCampaignType != \"video\" &&\n                    finalCampaignType != \"document\")\n                {\n                    finalCampaignType = \"text\";\n                }\n\n                // Validate media header needs URL\n                if (isMediaHeader && string.IsNullOrWhiteSpace(headerUrl))\n                    throw new InvalidOperationException(\"❌ Header media URL is required for this template.\");\n\n                // =========================================\n                // Create entity with correct media fields set\n                // =========================================\n                var campaign = new Campaign\n                {\n                    Id = campaignId,\n                    BusinessId = businessId,\n                    Name = dto.Name,\n\n                    MessageTemplate = dto.MessageTemplate,\n                    TemplateId = selectedTemplateName,\n\n                    FollowUpTemplateId = dto.FollowUpTemplateId,\n                    CampaignType = finalCampaignType,\n                    CtaId = dto.CtaId,\n                    CTAFlowConfigId = savedFlowId,\n\n                    ScheduledAt = dto.ScheduledAt,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    Status = \"Draft\",\n\n                    // Media fields (set exactly one depending on header kind)\n                    ImageUrl = headerKind == \"image\" ? headerUrl : null,\n                    ImageCaption = dto.ImageCaption,\n                    VideoUrl = headerKind == \"video\" ? headerUrl : null,\n                    DocumentUrl = headerKind == \"document\" ? headerUrl : null,\n\n                    TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n                    MessageBody = resolvedBody,\n\n                    // 🟢 Persist sender choice (nullable if not selected)\n                    Provider = providerNorm,\n                    PhoneNumberId = dto.PhoneNumberId\n                };\n\n                // 🔒 Step 2.1: Snapshot template schema (text path)\n                try\n                {\n                    var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(\n                        businessId,\n                        selectedTemplateName,\n                        language: null,\n                        provider: providerNorm?.ToLowerInvariant() // normalize to match DB (\"meta_cloud\"/\"pinnacle\")\n                    );\n\n                    campaign.TemplateSchemaSnapshot = snapshotMeta != null\n                        ? JsonConvert.SerializeObject(snapshotMeta)\n                        : JsonConvert.SerializeObject(new\n                        {\n                            Provider = providerNorm ?? \"\",\n                            TemplateName = selectedTemplateName,\n                            Language = template?.Language ?? \"\"\n                        });\n                }\n                catch (Exception ex)\n                {\n                    Log.Warning(ex, \"⚠️ Template schema snapshot failed for campaign {CampaignId}\", campaignId);\n                }\n\n                await _context.Campaigns.AddAsync(campaign);\n\n                if (dto.ContactIds != null && dto.ContactIds.Any())\n                {\n                    var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        ContactId = contactId,\n                        BusinessId = businessId,\n                        Status = \"Pending\",\n                        SentAt = null,\n                        UpdatedAt = DateTime.UtcNow\n                    });\n\n                    await _context.CampaignRecipients.AddRangeAsync(recipients);\n                }\n\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var buttons = dto.MultiButtons\n                        .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                        .Take(3)\n                        .Select((btn, index) => new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = btn.ButtonText,\n                            Type = btn.ButtonType ?? \"url\",\n                            Value = btn.TargetUrl,\n                            Position = index + 1,\n                            IsFromTemplate = false\n                        });\n\n                    await _context.CampaignButtons.AddRangeAsync(buttons);\n                }\n\n                if (template != null && template.ButtonParams?.Count > 0)\n                {\n                    var buttonsToSave = new List<CampaignButton>();\n                    var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();\n\n                    var total = Math.Min(3, template.ButtonParams.Count);\n                    for (int i = 0; i < total; i++)\n                    {\n                        var tplBtn = template.ButtonParams[i];\n                        var isDynamic = (tplBtn.ParameterValue?.Contains(\"{{1}}\") ?? false);\n\n                        var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);\n                        var valueToSave = (isDynamic && userBtn != null)\n                            ? userBtn.Value?.Trim()\n                            : tplBtn.ParameterValue;\n\n                        buttonsToSave.Add(new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = tplBtn.Text,\n                            Type = tplBtn.Type,\n                            Value = valueToSave,\n                            Position = i + 1,\n                            IsFromTemplate = true\n                        });\n                    }\n\n                    await _context.CampaignButtons.AddRangeAsync(buttonsToSave);\n                }\n\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Campaign '{Name}' created | Type:{Type} | Header:{HeaderKind} | FlowId:{Flow} | EntryTemplate:{Entry} | Sender:{Provider}/{PhoneId} | Recipients:{Contacts}\",\n                    dto.Name, finalCampaignType, headerKind,\n                    savedFlowId,\n                    entryStep?.TemplateToSend ?? selectedTemplateName,\n                    providerNorm,\n                    dto.PhoneNumberId,\n                    dto.ContactIds?.Count ?? 0);\n\n                return campaignId;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to create campaign\");\n                return null;\n            }\n        }\n\n        public async Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy)\n        {\n            var campaignId = Guid.NewGuid();\n\n            // 🔁 Parse/normalize template parameters once\n            var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n                JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n            );\n\n            // 🔄 Flow id from UI (null/empty => no flow). We will persist this as-is.\n            Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)\n                ? dto.CTAFlowConfigId.Value\n                : (Guid?)null;\n\n            // We will save this value regardless of validation outcome\n            Guid? savedFlowId = incomingFlowId;\n\n            // ============================================================\n            // 🧩 FLOW VALIDATION (only to align the starting template)\n            // ============================================================\n            string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;\n\n            CTAFlowConfig? flow = null;\n            CTAFlowStep? entryStep = null;\n\n            if (incomingFlowId.HasValue)\n            {\n                // load flow with steps+links and verify ownership\n                flow = await _context.CTAFlowConfigs\n                    .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n                    .FirstOrDefaultAsync(f =>\n                        f.Id == incomingFlowId.Value &&\n                        f.BusinessId == businessId &&\n                        f.IsActive);\n\n                if (flow == null)\n                {\n                    Log.Warning(\"❌ Flow {FlowId} not found/active for business {Biz}. Will persist FlowId but not align template.\",\n                        incomingFlowId, businessId);\n                }\n                else\n                {\n                    // compute entry step: step with NO incoming links\n                    var allIncoming = new HashSet<Guid>(flow.Steps\n                        .SelectMany(s => s.ButtonLinks)\n                        .Where(l => l.NextStepId.HasValue)\n                        .Select(l => l.NextStepId!.Value));\n\n                    entryStep = flow.Steps\n                        .OrderBy(s => s.StepOrder)\n                        .FirstOrDefault(s => !allIncoming.Contains(s.Id));\n\n                    if (entryStep == null)\n                    {\n                        Log.Warning(\"❌ Flow {FlowId} has no entry step. Persisting FlowId but not aligning template.\", flow.Id);\n                    }\n                    else if (!string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))\n                    {\n                        Log.Information(\"ℹ️ Aligning selected template '{Sel}' to flow entry '{Entry}'.\",\n                            selectedTemplateName, entryStep.TemplateToSend);\n                        selectedTemplateName = entryStep.TemplateToSend;\n                    }\n                }\n            }\n            else\n            {\n                Log.Information(\"ℹ️ No flow attached to image campaign '{Name}'. Proceeding as plain template campaign.\", dto.Name);\n            }\n\n            // 🧠 Fetch template (for body + buttons) using the aligned/selected template name\n            var template = await _templateFetcherService.GetTemplateByNameAsync(\n                businessId,\n                selectedTemplateName,\n                includeButtons: true\n            );\n\n            // 🧠 Resolve message body using template body (if available) else dto.MessageTemplate\n            var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;\n            var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);\n\n            // 🎯 Step 1: Create campaign (CTAFlowConfigId now always = savedFlowId)\n            var campaign = new Campaign\n            {\n                Id = campaignId,\n                BusinessId = businessId,\n                Name = dto.Name,\n\n                // store the (possibly aligned) template name\n                MessageTemplate = dto.MessageTemplate,      // keep original text for UI if you use it\n                TemplateId = selectedTemplateName,          // ensure start template matches flow entry when available\n\n                FollowUpTemplateId = dto.FollowUpTemplateId,\n                CampaignType = \"image\",\n                CtaId = dto.CtaId,\n                CTAFlowConfigId = savedFlowId,              // 👈 persist what UI sent (or null if no flow)\n\n                ScheduledAt = dto.ScheduledAt,\n                CreatedBy = createdBy,\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow,\n                Status = \"Draft\",\n\n                // image-specific fields\n                ImageUrl = dto.ImageUrl,\n                ImageCaption = dto.ImageCaption,\n\n                // params/body snapshot (useful for previews & auditing)\n                TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n                MessageBody = resolvedBody\n            };\n            // 🔒 Step 2.1: Snapshot template schema (image path)\n            try\n            {\n                var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(\n                    businessId,\n                    selectedTemplateName,\n                    language: null,\n                    provider: null\n                );\n\n                campaign.TemplateSchemaSnapshot = snapshotMeta != null\n                    ? JsonConvert.SerializeObject(snapshotMeta)\n                    : JsonConvert.SerializeObject(new\n                    {\n                        Provider = \"\",\n                        TemplateName = selectedTemplateName,\n                        Language = template?.Language ?? \"\"\n                    });\n            }\n            catch (Exception ex)\n            {\n                Log.Warning(ex, \"⚠️ Template schema snapshot failed for (image) campaign {CampaignId}\", campaignId);\n            }\n\n            await _context.Campaigns.AddAsync(campaign);\n\n            // ✅ Step 2: Assign contacts (leave SentAt null until send)\n            if (dto.ContactIds != null && dto.ContactIds.Any())\n            {\n                var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaignId,\n                    ContactId = contactId,\n                    BusinessId = businessId,\n                    Status = \"Pending\",\n                    SentAt = null,\n                    UpdatedAt = DateTime.UtcNow\n                });\n\n                await _context.CampaignRecipients.AddRangeAsync(recipients);\n            }\n\n            // ✅ Step 3a: Save manual buttons from frontend\n            if (dto.MultiButtons != null && dto.MultiButtons.Any())\n            {\n                var buttons = dto.MultiButtons\n                    .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    .Take(3)\n                    .Select((btn, index) => new CampaignButton\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        Title = btn.ButtonText,\n                        Type = btn.ButtonType ?? \"url\",\n                        Value = btn.TargetUrl,\n                        Position = index + 1,\n                        IsFromTemplate = false\n                    });\n\n                await _context.CampaignButtons.AddRangeAsync(buttons);\n            }\n\n            // ======================== Dynamic buttons merge ========================\n            // EXACTLY mirrors your text-creator pattern to avoid type issues with ButtonMetadataDto\n            if (template != null && template.ButtonParams?.Count > 0)\n            {\n                var buttonsToSave = new List<CampaignButton>();\n                var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();\n\n                var total = Math.Min(3, template.ButtonParams.Count);\n                for (int i = 0; i < total; i++)\n                {\n                    var tplBtn = template.ButtonParams[i];                         // ButtonMetadataDto: Text, Type, SubType, Index, ParameterValue\n                    var isDynamic = (tplBtn.ParameterValue?.Contains(\"{{1}}\") ?? false);\n\n                    var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);\n                    var valueToSave = (isDynamic && userBtn != null)\n                        ? userBtn.Value?.Trim()                                    // user override for dynamic URL\n                        : tplBtn.ParameterValue;                                   // pattern or static value from meta\n\n                    buttonsToSave.Add(new CampaignButton\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        Title = tplBtn.Text,                                       // from ButtonMetadataDto\n                        Type = tplBtn.Type,                                        // from ButtonMetadataDto\n                        Value = valueToSave,\n                        Position = i + 1,\n                        IsFromTemplate = true\n                    });\n                }\n\n                await _context.CampaignButtons.AddRangeAsync(buttonsToSave);\n            }\n            // ======================================================================\n\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"✅ Image campaign '{Name}' created | FlowId: {Flow} | EntryTemplate: {Entry} | Recipients: {Contacts} | UserButtons: {ManualButtons} | TemplateButtons: {TemplateButtons} | Params: {Params}\",\n                dto.Name,\n                savedFlowId,\n                entryStep?.TemplateToSend ?? selectedTemplateName,\n                dto.ContactIds?.Count ?? 0,\n                dto.MultiButtons?.Count ?? 0,\n                template?.ButtonParams?.Count ?? 0,\n                dto.TemplateParameters?.Count ?? 0\n            );\n\n            return campaignId;\n        }\n        #endregion\n\n        //public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)\n        //{\n        //    // 1) Load campaign (no tracking)\n        //    var campaign = await _context.Campaigns\n        //        .Where(c => c.Id == campaignId)\n        //        .Select(c => new { c.Id, c.BusinessId, c.TemplateId, MessageTemplate = c.MessageTemplate })\n        //        .AsNoTracking()\n        //        .FirstOrDefaultAsync();\n\n        //    if (campaign == null)\n        //    {\n        //        Log.Warning(\"🚫 Campaign {CampaignId} not found\", campaignId);\n        //        return false;\n        //    }\n\n        //    // 1.1) Resolve active WA settings → Provider + sender (optional)\n        //    var wa = await _context.WhatsAppSettings\n        //        .AsNoTracking()\n        //        .Where(w => w.BusinessId == campaign.BusinessId && w.IsActive)\n        //        .FirstOrDefaultAsync();\n\n        //    var provider = wa?.Provider ?? \"META_CLOUD\";     // must be \"PINNACLE\" or \"META_CLOUD\"\n        //    var phoneNumberId = wa?.PhoneNumberId;           // optional\n\n        //    // 2) Load recipients with explicit LEFT JOINs to Contact and AudienceMember\n        //    var recipients = await (\n        //        from r in _context.CampaignRecipients.AsNoTracking()\n        //        where r.CampaignId == campaignId\n\n        //        // LEFT JOIN Contact\n        //        join c in _context.Contacts.AsNoTracking()\n        //            on r.ContactId equals c.Id into cg\n        //        from c in cg.DefaultIfEmpty()\n\n        //            // LEFT JOIN AudienceMember\n        //        join am in _context.AudiencesMembers.AsNoTracking()\n        //            on r.AudienceMemberId equals am.Id into amg\n        //        from am in amg.DefaultIfEmpty()\n\n        //        select new\n        //        {\n        //            r.Id,\n        //            r.ContactId,\n        //            Phone = c != null && c.PhoneNumber != null ? c.PhoneNumber : am!.PhoneE164,\n        //            Name = c != null && c.Name != null ? c.Name : am!.Name,\n        //            ParamsJson = r.ResolvedParametersJson\n        //        })\n        //        .Where(x => !string.IsNullOrWhiteSpace(x.Phone))\n        //        .ToListAsync();\n\n        //    if (recipients.Count == 0)\n        //    {\n        //        Log.Warning(\"🚫 Campaign {CampaignId} has no recipients\", campaignId);\n        //        return false;\n        //    }\n\n        //    // 3) Mark Sending\n        //    var campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaign.Id);\n        //    campaignRow.Status = \"Sending\";\n        //    campaignRow.UpdatedAt = DateTime.UtcNow;\n        //    await _context.SaveChangesAsync();\n\n        //    // 4) Parallel send\n        //    var throttleLimit = 5;\n        //    var total = recipients.Count;\n        //    var sent = 0;\n        //    var failed = 0;\n\n        //    await Parallel.ForEachAsync(\n        //        recipients,\n        //        new ParallelOptions { MaxDegreeOfParallelism = throttleLimit },\n        //        async (r, ct) =>\n        //        {\n        //            try\n        //            {\n        //                var phone = r.Phone!;\n        //                var name = string.IsNullOrWhiteSpace(r.Name) ? \"Customer\" : r.Name;\n\n        //                using var scope = _serviceProvider.CreateScope();\n        //                var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n        //                // If you froze parameters at materialization, you can parse r.ParamsJson here.\n        //                var dto = new SimpleTemplateMessageDto\n        //                {\n        //                    Provider = provider,                 // ✅ REQUIRED by your send method\n        //                    PhoneNumberId = phoneNumberId,       // optional\n        //                    RecipientNumber = phone,\n        //                    TemplateName = campaign.TemplateId ?? campaign.MessageTemplate,\n        //                    TemplateParameters = new List<string> { name },\n        //                    TemplateParameters = args,\n        //                };\n\n        //                var result = await _messageEngineService\n        //                    .SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n        //                var sendLog = new CampaignSendLog\n        //                {\n        //                    Id = Guid.NewGuid(),\n        //                    BusinessId = campaign.BusinessId,\n        //                    CampaignId = campaign.Id,\n        //                    ContactId = r.ContactId,            // Guid? OK to be null\n        //                    RecipientId = r.Id,\n        //                    TemplateId = campaign.TemplateId,\n        //                    MessageBody = campaign.MessageTemplate,\n        //                    MessageId = null,\n        //                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n        //                    ErrorMessage = result.Message,\n        //                    SentAt = DateTime.UtcNow,\n        //                    CreatedAt = DateTime.UtcNow,\n        //                    SourceChannel = \"whatsapp\",\n        //                    IpAddress = ipAddress,\n        //                    DeviceInfo = userAgent\n        //                };\n\n        //                await scopedDb.CampaignSendLogs.AddAsync(sendLog, ct);\n\n        //                var rec = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(x => x.Id == r.Id, ct);\n        //                if (rec != null)\n        //                {\n        //                    rec.Status = result.Success ? \"Sent\" : \"Failed\";\n        //                    rec.MessagePreview = campaign.MessageTemplate;\n        //                    rec.SentAt = DateTime.UtcNow;\n        //                    rec.UpdatedAt = DateTime.UtcNow;\n        //                }\n\n        //                await scopedDb.SaveChangesAsync(ct);\n\n        //                if (result.Success) Interlocked.Increment(ref sent);\n        //                else Interlocked.Increment(ref failed);\n        //            }\n        //            catch (Exception ex)\n        //            {\n        //                Interlocked.Increment(ref failed);\n        //                Log.Error(ex, \"❌ Send failed for recipient: {RecipientId}\", r.Id);\n        //            }\n        //        });\n\n        //    // 5) Finalize\n        //    campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaignId);\n        //    campaignRow.Status = \"Sent\";\n        //    campaignRow.UpdatedAt = DateTime.UtcNow;\n        //    await _context.SaveChangesAsync();\n\n        //    Log.Information(\"📤 Campaign {CampaignId} sent via template to {Count} recipients (✅ {Sent}, ❌ {Failed})\",\n        //        campaignId, total, sent, failed);\n\n        //    return sent > 0;\n        //}\n\n\n        //public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)\n        //    {\n        //        // 1) Load campaign (no tracking)\n        //        var campaign = await _context.Campaigns\n        //            .Where(c => c.Id == campaignId)\n        //            .Select(c => new { c.Id, c.BusinessId, c.TemplateId, MessageTemplate = c.MessageTemplate })\n        //            .AsNoTracking()\n        //            .FirstOrDefaultAsync();\n\n        //        if (campaign == null)\n        //        {\n        //            Log.Warning(\"🚫 Campaign {CampaignId} not found\", campaignId);\n        //            return false;\n        //        }\n\n        //        // 1.1) Resolve active WA settings → Provider + sender (optional)\n        //        var wa = await _context.WhatsAppSettings\n        //            .AsNoTracking()\n        //            .Where(w => w.BusinessId == campaign.BusinessId && w.IsActive)\n        //            .FirstOrDefaultAsync();\n\n        //        var provider = wa?.Provider ?? \"META_CLOUD\";   // must be \"PINNACLE\" or \"META_CLOUD\"\n        //        var phoneNumberId = wa?.PhoneNumberId;         // optional\n\n        //        // 2) Load recipients with explicit LEFT JOINs to Contact and AudienceMember\n        //        var recipients = await (\n        //            from r in _context.CampaignRecipients.AsNoTracking()\n        //            where r.CampaignId == campaignId\n\n        //            join c in _context.Contacts.AsNoTracking()\n        //                on r.ContactId equals c.Id into cg\n        //            from c in cg.DefaultIfEmpty()\n\n        //            join am in _context.AudiencesMembers.AsNoTracking()\n        //                on r.AudienceMemberId equals am.Id into amg\n        //            from am in amg.DefaultIfEmpty()\n\n        //            select new\n        //            {\n        //                r.Id,\n        //                r.ContactId,\n        //                Phone = c != null && c.PhoneNumber != null ? c.PhoneNumber : am!.PhoneE164,\n        //                Name = c != null && c.Name != null ? c.Name : am!.Name,\n        //                ParamsJson = r.ResolvedParametersJson\n        //            })\n        //            .Where(x => !string.IsNullOrWhiteSpace(x.Phone))\n        //            .ToListAsync();\n\n        //        if (recipients.Count == 0)\n        //        {\n        //            Log.Warning(\"🚫 Campaign {CampaignId} has no recipients\", campaignId);\n        //            return false;\n        //        }\n\n        //        // 3) Mark Sending\n        //        var campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaign.Id);\n        //        campaignRow.Status = \"Sending\";\n        //        campaignRow.UpdatedAt = DateTime.UtcNow;\n        //        await _context.SaveChangesAsync();\n\n        //        // 4) Parallel send\n        //        var throttleLimit = 5;\n        //        var total = recipients.Count;\n        //        var sent = 0;\n        //        var failed = 0;\n\n        //        await Parallel.ForEachAsync(\n        //            recipients,\n        //            new ParallelOptions { MaxDegreeOfParallelism = throttleLimit },\n        //            async (r, ct) =>\n        //            {\n        //                try\n        //                {\n        //                    var phone = r.Phone!;\n        //                    // NOTE: we intentionally do NOT inject profile name here.\n        //                    // Parameters come from frozen ResolvedParametersJson (if any).\n        //                    var parameters = ParseParams(r.ParamsJson);\n\n        //                    using var scope = _serviceProvider.CreateScope();\n        //                    var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n        //                    var dto = new SimpleTemplateMessageDto\n        //                    {\n        //                        Provider = provider,                 // ✅ REQUIRED by send method\n        //                        PhoneNumberId = phoneNumberId,       // optional sender override\n        //                        RecipientNumber = phone,\n        //                        TemplateName = campaign.TemplateId ?? campaign.MessageTemplate,\n        //                        TemplateParameters = parameters      // ✅ use frozen params (or empty list)\n        //                    };\n\n        //                    var result = await _messageEngineService\n        //                        .SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n        //                    var sendLog = new CampaignSendLog\n        //                    {\n        //                        Id = Guid.NewGuid(),\n        //                        BusinessId = campaign.BusinessId,\n        //                        CampaignId = campaign.Id,\n        //                        ContactId = r.ContactId,            // Guid? OK to be null\n        //                        RecipientId = r.Id,\n        //                        TemplateId = campaign.TemplateId,\n        //                        MessageBody = campaign.MessageTemplate,\n        //                        MessageId = result.MessageId,       // ✅ capture WAMID\n        //                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n        //                        ErrorMessage = result.Message,\n        //                        SentAt = DateTime.UtcNow,\n        //                        CreatedAt = DateTime.UtcNow,\n        //                        SourceChannel = \"whatsapp\",\n        //                        IpAddress = ipAddress,\n        //                        DeviceInfo = userAgent\n        //                        // (Optional) ButtonBundleJson = SnapshotTemplateButtons(...);\n        //                    };\n\n        //                    await scopedDb.CampaignSendLogs.AddAsync(sendLog, ct);\n\n        //                    var rec = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(x => x.Id == r.Id, ct);\n        //                    if (rec != null)\n        //                    {\n        //                        rec.Status = result.Success ? \"Sent\" : \"Failed\";\n        //                        rec.MessagePreview = campaign.MessageTemplate;\n        //                        rec.SentAt = DateTime.UtcNow;\n        //                        rec.UpdatedAt = DateTime.UtcNow;\n        //                    }\n\n        //                    await scopedDb.SaveChangesAsync(ct);\n\n        //                    if (result.Success) Interlocked.Increment(ref sent);\n        //                    else Interlocked.Increment(ref failed);\n        //                }\n        //                catch (Exception ex)\n        //                {\n        //                    Interlocked.Increment(ref failed);\n        //                    Log.Error(ex, \"❌ Send failed for recipient: {RecipientId}\", r.Id);\n        //                }\n        //            });\n\n        //        // 5) Finalize\n        //        campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaignId);\n        //        campaignRow.Status = \"Sent\";\n        //        campaignRow.UpdatedAt = DateTime.UtcNow;\n        //        await _context.SaveChangesAsync();\n\n        //        Log.Information(\"📤 Campaign {CampaignId} sent via template to {Count} recipients (✅ {Sent}, ❌ {Failed})\",\n        //            campaignId, total, sent, failed);\n\n        //        return sent > 0;\n\n        //        // ---- local helpers ----\n        //        static List<string> ParseParams(string? json)\n        //        {\n        //            if (string.IsNullOrWhiteSpace(json)) return new List<string>();\n        //            try\n        //            {\n        //                var arr = JsonSerializer.Deserialize<List<string>>(json);\n        //                return arr ?? new List<string>();\n        //            }\n        //            catch\n        //            {\n        //                return new List<string>();\n        //            }\n        //        }\n        //    }\n\n        public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            // 1) Load campaign (no tracking)\n            var campaign = await _context.Campaigns\n                .Where(c => c.Id == campaignId)\n                .Select(c => new { c.Id, c.BusinessId, c.TemplateId, MessageTemplate = c.MessageTemplate })\n                .AsNoTracking()\n                .FirstOrDefaultAsync();\n\n            if (campaign == null)\n            {\n                Log.Warning(\"🚫 Campaign {CampaignId} not found\", campaignId);\n                return false;\n            }\n\n            // 1.1) Resolve active WA settings → Provider + sender (optional)\n            var wa = await _context.WhatsAppSettings\n                .AsNoTracking()\n                .Where(w => w.BusinessId == campaign.BusinessId && w.IsActive)\n                .FirstOrDefaultAsync();\n\n            var provider = wa?.Provider ?? \"META_CLOUD\";   // must be \"PINNACLE\" or \"META_CLOUD\"\n            var phoneNumberId = wa?.PhoneNumberId;         // optional\n\n            // 2) Load recipients with explicit LEFT JOINs to Contact and AudienceMember\n            var recipients = await (\n                from r in _context.CampaignRecipients.AsNoTracking()\n                where r.CampaignId == campaignId\n\n                join c in _context.Contacts.AsNoTracking()\n                    on r.ContactId equals c.Id into cg\n                from c in cg.DefaultIfEmpty()\n\n                join am in _context.AudiencesMembers.AsNoTracking()\n                    on r.AudienceMemberId equals am.Id into amg\n                from am in amg.DefaultIfEmpty()\n\n                select new\n                {\n                    r.Id,\n                    r.ContactId,\n                    Phone = c != null && c.PhoneNumber != null ? c.PhoneNumber : am!.PhoneE164,\n                    Name = c != null && c.Name != null ? c.Name : am!.Name,\n                    ParamsJson = r.ResolvedParametersJson\n                })\n                .Where(x => !string.IsNullOrWhiteSpace(x.Phone))\n                .ToListAsync();\n\n            if (recipients.Count == 0)\n            {\n                Log.Warning(\"🚫 Campaign {CampaignId} has no recipients\", campaignId);\n                return false;\n            }\n\n            // 3) Mark Sending\n            var campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaign.Id);\n            campaignRow.Status = \"Sending\";\n            campaignRow.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            // 4) Parallel send\n            var throttleLimit = 5;\n            var total = recipients.Count;\n            var sent = 0;\n            var failed = 0;\n\n            await Parallel.ForEachAsync(\n                recipients,\n                new ParallelOptions { MaxDegreeOfParallelism = throttleLimit },\n                async (r, ct) =>\n                {\n                    try\n                    {\n                        var phone = r.Phone!;\n                        // NOTE: we intentionally do NOT inject profile name here.\n                        // Parameters come from frozen ResolvedParametersJson (if any).\n                        var parameters = ParseParams(r.ParamsJson);\n\n                        using var scope = _serviceProvider.CreateScope();\n                        var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                        var dto = new SimpleTemplateMessageDto\n                        {\n                            Provider = provider,                 // ✅ REQUIRED by send method\n                            PhoneNumberId = phoneNumberId,       // optional sender override\n                            RecipientNumber = phone,\n                            TemplateName = campaign.TemplateId ?? campaign.MessageTemplate,\n                            TemplateParameters = parameters      // ✅ use frozen params (or empty list)\n                        };\n\n                        var result = await _messageEngineService\n                            .SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n                        var sendLog = new CampaignSendLog\n                        {\n                            Id = Guid.NewGuid(),\n                            BusinessId = campaign.BusinessId,\n                            CampaignId = campaign.Id,\n                            ContactId = r.ContactId,            // Guid? OK to be null\n                            RecipientId = r.Id,\n                            TemplateId = campaign.TemplateId,\n                            MessageBody = campaign.MessageTemplate,\n                            MessageId = result.MessageId,       // ✅ capture WAMID\n                            SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                            ErrorMessage = result.Message,\n                            SentAt = DateTime.UtcNow,\n                            CreatedAt = DateTime.UtcNow,\n                            SourceChannel = \"whatsapp\",\n                            IpAddress = ipAddress,\n                            DeviceInfo = userAgent\n                            // (Optional) ButtonBundleJson = SnapshotTemplateButtons(...);\n                        };\n\n                        await scopedDb.CampaignSendLogs.AddAsync(sendLog, ct);\n\n                        var rec = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(x => x.Id == r.Id, ct);\n                        if (rec != null)\n                        {\n                            rec.Status = result.Success ? \"Sent\" : \"Failed\";\n                            rec.MessagePreview = campaign.MessageTemplate;\n                            rec.SentAt = DateTime.UtcNow;\n                            rec.UpdatedAt = DateTime.UtcNow;\n                        }\n\n                        await scopedDb.SaveChangesAsync(ct);\n\n                        if (result.Success) Interlocked.Increment(ref sent);\n                        else Interlocked.Increment(ref failed);\n                    }\n                    catch (Exception ex)\n                    {\n                        Interlocked.Increment(ref failed);\n                        Log.Error(ex, \"❌ Send failed for recipient: {RecipientId}\", r.Id);\n                    }\n                });\n\n            // 5) Finalize\n            campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaignId);\n            campaignRow.Status = \"Sent\";\n            campaignRow.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"📤 Campaign {CampaignId} sent via template to {Count} recipients (✅ {Sent}, ❌ {Failed})\",\n                campaignId, total, sent, failed);\n\n            return sent > 0;\n\n            // ---- local helpers ----\n            static List<string> ParseParams(string? json)\n            {\n                if (string.IsNullOrWhiteSpace(json)) return new List<string>();\n                try\n                {\n                    var arr = System.Text.Json.JsonSerializer.Deserialize<List<string>>(json);\n                    return arr ?? new List<string>();\n                }\n                catch\n                {\n                    return new List<string>();\n                }\n            }\n        }\n\n\n\n        public async Task<bool> SendCampaignInParallelAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null || campaign.Recipients.Count == 0)\n            {\n                Log.Warning(\"🚫 Campaign not found or has no recipients\");\n                return false;\n            }\n\n            campaign.Status = \"Sending\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            int maxParallelism = 5;\n\n#if NET6_0_OR_GREATER\n            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions\n            {\n                MaxDegreeOfParallelism = maxParallelism\n            },\n            async (recipient, cancellationToken) =>\n            {\n                await SendToRecipientAsync(campaign, recipient, ipAddress, userAgent);\n            });\n#else\n    var tasks = campaign.Recipients.Select(recipient =>\n        SendToRecipientAsync(campaign, recipient, ipAddress, userAgent)\n    );\n    await Task.WhenAll(tasks);\n#endif\n\n            campaign.Status = \"Sent\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"📤 Campaign {CampaignId} sent in parallel to {Count} recipients\", campaign.Id, campaign.Recipients.Count);\n            return true;\n        }\n        private async Task SendToRecipientAsync(Campaign campaign, CampaignRecipient recipient, string ip, string ua)\n        {\n            try\n            {\n                var dto = new SimpleTemplateMessageDto\n                {\n                    RecipientNumber = recipient.Contact.PhoneNumber,\n                    TemplateName = campaign.MessageTemplate,\n                    TemplateParameters = new List<string> { recipient.Contact.Name ?? \"Customer\" }\n                };\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n\n                var log = new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = recipient.ContactId,\n                    RecipientId = recipient.Id,\n                    TemplateId = campaign.TemplateId,\n                    MessageBody = campaign.MessageTemplate,\n                    MessageId = null,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = result.Message,\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow,\n                    SourceChannel = \"whatsapp\",\n                    IpAddress = ip,\n                    DeviceInfo = ua\n                };\n\n                lock (_context)\n                {\n                    _context.CampaignSendLogs.Add(log);\n                    recipient.Status = result.Success ? \"Sent\" : \"Failed\";\n                    recipient.MessagePreview = campaign.MessageTemplate;\n                    recipient.SentAt = DateTime.UtcNow;\n                    recipient.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to send template to recipient: {RecipientId}\", recipient.Id);\n            }\n        }\n\n        public async Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId)\n        {\n            var entry = await _context.CampaignRecipients\n                .FirstOrDefaultAsync(r =>\n                    r.CampaignId == campaignId &&\n                    r.ContactId == contactId &&\n                    r.Campaign.BusinessId == businessId); // ✅ Filter by related Campaign.BusinessId\n\n            if (entry == null)\n                return false;\n\n            _context.CampaignRecipients.Remove(entry);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null)\n                return false;\n\n            var newRecipients = contactIds.Select(id => new CampaignRecipient\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = campaignId,\n                ContactId = id,\n                BusinessId = businessId,\n                Status = \"Pending\",\n                SentAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow\n            });\n\n            _context.CampaignRecipients.AddRange(newRecipients);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // This is the Entry point to send Temaplte (Text Based and Image Based)\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId)\n        {\n            try\n            {\n                var campaign = await _context.Campaigns\n                    .Include(c => c.Recipients)\n                        .ThenInclude(r => r.Contact) // 🧠 include contact details\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"❌ Campaign not found.\");\n\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                    return ResponseResult.ErrorInfo(\"❌ No recipients assigned to this campaign.\");\n\n                var templateName = campaign.MessageTemplate;\n                var templateId = campaign.TemplateId;\n                var language = \"en_US\"; // Optional: make dynamic later\n                var isImageTemplate = !string.IsNullOrEmpty(campaign.ImageUrl);\n\n                var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? \"[]\");\n\n                int success = 0, failed = 0;\n\n                foreach (var recipient in campaign.Recipients)\n                {\n                    var messageDto = new ImageTemplateMessageDto\n                    {\n                        // BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        TemplateName = templateName,\n                        LanguageCode = language,\n                        HeaderImageUrl = isImageTemplate ? campaign.ImageUrl : null,\n                        TemplateParameters = templateParams,\n                        ButtonParameters = campaign.MultiButtons\n                            .OrderBy(b => b.Position)\n                            .Take(3)\n                            .Select(btn => new CampaignButtonDto\n                            {\n                                ButtonText = btn.Title,\n                                ButtonType = btn.Type,\n                                TargetUrl = btn.Value\n                            }).ToList()\n                    };\n\n                    // ✅ Call the image/template sender\n                    var sendResult = await _messageEngineService.SendImageTemplateMessageAsync(messageDto, campaign.BusinessId);\n                    var isSuccess = sendResult.ToString().ToLower().Contains(\"messages\");\n\n                    var log = new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageContent = templateName,\n                        MediaUrl = campaign.ImageUrl,\n                        Status = isSuccess ? \"Sent\" : \"Failed\",\n                        ErrorMessage = isSuccess ? null : \"API Failure\",\n                        RawResponse = JsonConvert.SerializeObject(sendResult),\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow\n                    };\n\n                    await _context.MessageLogs.AddAsync(log);\n\n                    if (isSuccess) success++;\n                    else failed++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"✅ Sent: {success}, ❌ Failed: {failed}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"❌ Unexpected error during campaign send.\", ex.ToString());\n            }\n        }\n\n        #region  This region include all the code related to sending text and image based\n\n        public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)\n        {\n            string? GetPhone(CampaignRecipient r)\n                => r?.Contact?.PhoneNumber\n                ?? r?.AudienceMember?.PhoneE164\n                ?? r?.AudienceMember?.PhoneRaw;\n\n            var campaign = await _context.Campaigns\n                .AsNoTracking()\n                .AsSplitQuery()\n                .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n                .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)\n                .Include(c => c.MultiButtons)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n            if (campaign == null)\n                return ResponseResult.ErrorInfo(\"❌ Campaign not found.\");\n\n            var recipients = campaign.Recipients ?? new List<CampaignRecipient>();\n            var total = recipients.Count;\n            var recipientsWithPhone = recipients.Where(r => !string.IsNullOrWhiteSpace(GetPhone(r))).ToList();\n            if (recipientsWithPhone.Count == 0)\n            {\n                _logger.LogWarning(\"[SendDetect] No valid recipients with phone. total={Total}\", total);\n                return ResponseResult.ErrorInfo(\n                    \"⚠️ No valid recipients with phone numbers (checked Contact.PhoneNumber and AudienceMember.PhoneE164/PhoneRaw).\");\n            }\n\n            // normalize incoming type\n            var type = (campaign.CampaignType ?? string.Empty).Trim().ToLowerInvariant();\n\n            // === Infer type from template meta when empty/auto ===\n            if (string.IsNullOrEmpty(type) || type == \"auto\")\n            {\n                var tplName =\n                    !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :\n                    !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :\n                    string.Empty;\n\n                if (string.IsNullOrWhiteSpace(tplName))\n                    return ResponseResult.ErrorInfo(\"❌ Campaign has no template name (TemplateId/MessageTemplate is empty).\");\n\n                // IMPORTANT: do NOT over-filter by provider here; your templates table stores \"meta_cloud\"/\"pinnacle\"\n                // while Campaign.Provider is UPPER (\"META_CLOUD\"). Passing provider can cause a miss.\n                var meta = await _templateFetcherService.GetTemplateMetaAsync(\n                    campaign.BusinessId, tplName, language: null, provider: null); // 👈 provider=null on purpose\n\n                var headerType = (meta?.HeaderType ?? string.Empty).ToUpperInvariant();\n                type = headerType switch\n                {\n                    \"IMAGE\" => \"image\",\n                    \"VIDEO\" => \"video\",\n                    \"DOCUMENT\" => \"document\",\n                    \"PDF\" => \"document\",\n                    _ => \"text\"\n                };\n\n                _logger.LogInformation(\"[SendDetect] Inferred type. campaignId={CampaignId} template={Template} header={Header} -> type={Type}\",\n                    campaign.Id, tplName, headerType, type);\n            }\n\n            // === Validate required media URL for media types ===\n            if (type == \"image\" && string.IsNullOrWhiteSpace(campaign.ImageUrl))\n                return ResponseResult.ErrorInfo(\"🚫 Image template requires ImageUrl on the campaign.\");\n            if (type == \"video\" && string.IsNullOrWhiteSpace(campaign.VideoUrl))\n                return ResponseResult.ErrorInfo(\"🚫 Video template requires VideoUrl on the campaign.\");\n            if (type == \"document\" && string.IsNullOrWhiteSpace(campaign.DocumentUrl))\n                return ResponseResult.ErrorInfo(\"🚫 Document template requires DocumentUrl on the campaign.\");\n\n            // === Dispatch ===\n            return type switch\n            {\n                \"image\" => await SendImageTemplateCampaignAsync(campaign),\n                \"video\" => await SendVideoTemplateCampaignAsync(campaign),\n                \"document\" => await SendDocumentTemplateCampaignAsync(campaign),\n                \"text\" => await SendTextTemplateCampaignAsync(campaign),\n                _ => ResponseResult.ErrorInfo($\"❌ Unsupported campaign type '{campaign.CampaignType}'.\")\n            };\n        }\n\n\n        //public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)\n        //{\n        //    string? GetPhone(CampaignRecipient r)\n        //        => r?.Contact?.PhoneNumber\n        //        ?? r?.AudienceMember?.PhoneE164\n        //        ?? r?.AudienceMember?.PhoneRaw;\n\n        //    var campaign = await _context.Campaigns\n        //        .AsNoTracking()\n        //        .AsSplitQuery()\n        //        .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n        //        .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)\n        //        .Include(c => c.MultiButtons)\n        //        .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n        //    if (campaign == null)\n        //        return ResponseResult.ErrorInfo(\"❌ Campaign not found.\");\n\n        //    var recipients = campaign.Recipients ?? new List<CampaignRecipient>();\n        //    var total = recipients.Count;\n        //    var recipientsWithPhone = recipients\n        //        .Where(r => !string.IsNullOrWhiteSpace(GetPhone(r)))\n        //        .ToList();\n\n        //    if (recipientsWithPhone.Count == 0)\n        //    {\n        //        _logger.LogWarning(\"[SendDetect] No valid recipients with phone. total={Total}\", total);\n        //        return ResponseResult.ErrorInfo(\n        //            \"⚠️ No valid recipients with phone numbers (checked Contact.PhoneNumber and AudienceMember.PhoneE164/PhoneRaw).\");\n        //    }\n\n        //    var type = (campaign.CampaignType ?? string.Empty).Trim().ToLowerInvariant();\n\n        //    if (string.IsNullOrEmpty(type) || type == \"auto\")\n        //    {\n        //        var tplName =\n        //            !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :\n        //            !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :\n        //            string.Empty;\n\n        //        if (string.IsNullOrWhiteSpace(tplName))\n        //            return ResponseResult.ErrorInfo(\"❌ Campaign has no template name (TemplateId/MessageTemplate is empty).\");\n\n        //        var provider = (campaign.Provider ?? \"META\").ToUpperInvariant();\n\n        //        var meta = await _templateFetcherService.GetTemplateMetaAsync(\n        //            campaign.BusinessId, tplName, language: null, provider: provider);\n\n        //        var headerType = (meta?.HeaderType ?? string.Empty).ToUpperInvariant();\n\n        //        type = headerType switch\n        //        {\n        //            \"IMAGE\" => \"image\",\n        //            \"VIDEO\" => \"video\",\n        //            \"DOCUMENT\" => \"document\",\n        //            \"PDF\" => \"document\",\n        //            _ => \"text\"\n        //        };\n\n        //        _logger.LogInformation(\"[SendDetect] Inferred type. campaignId={CampaignId} template={Template} header={Header} -> type={Type}\",\n        //            campaign.Id, tplName, headerType, type);\n        //    }\n\n        //    return type switch\n        //    {\n        //        \"image\" => await SendImageTemplateCampaignAsync(campaign),\n        //        \"video\" => await SendVideoTemplateCampaignAsync(campaign),\n        //        \"document\" => await SendDocumentTemplateCampaignAsync(campaign),\n        //        \"text\" => await SendTextTemplateCampaignAsync(campaign),\n        //        _ => ResponseResult.ErrorInfo($\"❌ Unsupported campaign type '{campaign.CampaignType}'.\")\n        //    };\n        //}\n\n        // Uses the per-recipient frozen params if present; otherwise falls back to campaign-level params.\n        // Ensures the list length == placeholderCount (pads/truncates).\n        private static List<string> GetRecipientBodyParams(\n            CampaignRecipient recipient,\n            int placeholderCount,\n            string? campaignTemplateParameters)\n        {\n            // Try recipient-specific params first\n            try\n            {\n                if (!string.IsNullOrWhiteSpace(recipient.ResolvedParametersJson))\n                {\n                    var fromRecipient = JsonConvert.DeserializeObject<List<string>>(recipient.ResolvedParametersJson)\n                                        ?? new List<string>();\n                    while (fromRecipient.Count < placeholderCount) fromRecipient.Add(\"\");\n                    if (fromRecipient.Count > placeholderCount) fromRecipient = fromRecipient.Take(placeholderCount).ToList();\n                    return fromRecipient;\n                }\n            }\n            catch { /* ignore and fall back */ }\n\n            // Fallback: campaign-level params (old behavior), padded\n            var fromCampaign = TemplateParameterHelper.ParseTemplateParams(campaignTemplateParameters).ToList();\n            while (fromCampaign.Count < placeholderCount) fromCampaign.Add(\"\");\n            if (fromCampaign.Count > placeholderCount) fromCampaign = fromCampaign.Take(placeholderCount).ToList();\n            return fromCampaign;\n        }\n        public async Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                    return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n                if (campaign.Recipients == null || campaign.Recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ No recipients to send.\");\n\n                var businessId = campaign.BusinessId;\n\n                // 0) Build a concrete list of recipients that actually have a phone\n                static string? ResolveRecipientPhone(CampaignRecipient r) =>\n                    r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;\n\n                var recipients = campaign.Recipients\n                    .Where(r => !string.IsNullOrWhiteSpace(ResolveRecipientPhone(r)))\n                    .ToList();\n\n                if (!recipients.Any())\n                    return ResponseResult.ErrorInfo(\"⚠️ No valid recipients with phone numbers (Contact/AudienceMember).\");\n\n                // 1) Flow/template selection\n                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                    ? entryTemplate!\n                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n                if (string.IsNullOrWhiteSpace(templateName))\n                    return ResponseResult.ErrorInfo(\"❌ No template selected.\");\n\n                // 2) Provider template meta\n                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n                if (templateMeta == null)\n                    return ResponseResult.ErrorInfo(\"❌ Template metadata not found.\");\n\n                var languageCode = (templateMeta.Language ?? \"\").Trim();\n                if (string.IsNullOrWhiteSpace(languageCode))\n                    return ResponseResult.ErrorInfo(\"❌ Template language not resolved from provider meta.\");\n\n                // 3) Buttons only (body params are built per-recipient below)\n                var buttons = campaign.MultiButtons?.OrderBy(b => b.Position).ToList()\n                              ?? new List<CampaignButton>();\n\n                // 4) Resolve provider (normalize + default)\n                string provider;\n                if (!string.IsNullOrWhiteSpace(campaign.Provider))\n                {\n                    if (campaign.Provider != \"PINNACLE\" && campaign.Provider != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo(\"❌ Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.\");\n                    provider = campaign.Provider;\n                }\n                else\n                {\n                    var settings = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive)\n                        .OrderByDescending(s => s.PhoneNumberId != null)\n                        .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .ToListAsync();\n\n                    if (settings.Count == 0)\n                        return ResponseResult.ErrorInfo(\"❌ WhatsApp settings not found.\");\n                    if (settings.Count > 1 && settings[0].PhoneNumberId == null)\n                        return ResponseResult.ErrorInfo(\"❌ Multiple providers are active but no default sender is set.\");\n\n                    provider = settings[0].Provider;\n                    if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo($\"❌ Unsupported provider configured: {provider}\");\n                }\n\n                // Sender override; if missing, try to pull from active settings for this provider\n                string? phoneNumberIdOverride = campaign.PhoneNumberId;\n                if (string.IsNullOrWhiteSpace(phoneNumberIdOverride))\n                {\n                    phoneNumberIdOverride = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive && s.Provider == provider && s.PhoneNumberId != null)\n                        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .Select(s => s.PhoneNumberId)\n                        .FirstOrDefaultAsync();\n                }\n\n                // 5) Optional flow entry step id\n                Guid? entryStepId = null;\n                if (campaign.CTAFlowConfigId.HasValue)\n                {\n                    entryStepId = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)\n                        .OrderBy(s => s.StepOrder)\n                        .Select(s => (Guid?)s.Id)\n                        .FirstOrDefaultAsync();\n                }\n\n                // 6) Freeze button bundle for click-tracking\n                string? buttonBundleJson = null;\n                if (templateMeta.ButtonParams is { Count: > 0 })\n                {\n                    var bundle = templateMeta.ButtonParams.Take(3)\n                        .Select((b, i) => new { i, position = i + 1, text = (b.Text ?? \"\").Trim(), type = b.Type, subType = b.SubType })\n                        .ToList();\n                    buttonBundleJson = JsonConvert.SerializeObject(bundle);\n                }\n\n                // 7) Preload AudienceMember phone/name for recipients that don’t have a Contact\n                var neededMemberIds = recipients\n                    .Where(x => x.ContactId == null && x.AudienceMemberId != null)\n                    .Select(x => x.AudienceMemberId!.Value)\n                    .Distinct()\n                    .ToList();\n\n                var audienceLookup = neededMemberIds.Count == 0\n                    ? new Dictionary<Guid, (string Phone, string? Name)>()\n                    : await _context.AudiencesMembers.AsNoTracking()\n                        .Where(m => m.BusinessId == businessId && neededMemberIds.Contains(m.Id))\n                        .Select(m => new { m.Id, m.PhoneE164, m.PhoneRaw, m.Name })\n                        .ToDictionaryAsync(\n                            x => x.Id,\n                            x => (Phone: string.IsNullOrWhiteSpace(x.PhoneE164) ? (x.PhoneRaw ?? \"\") : x.PhoneE164,\n                                  Name: x.Name)\n                        );\n\n                int successCount = 0, failureCount = 0;\n                var now = DateTime.UtcNow;\n\n                foreach (var r in recipients)\n                {\n                    // Resolve actual phone + fallback name\n                    var phone = ResolveRecipientPhone(r);\n                    string? name = r.Contact?.Name;\n\n                    if (string.IsNullOrWhiteSpace(phone) && r.AudienceMemberId != null &&\n                        audienceLookup.TryGetValue(r.AudienceMemberId.Value, out var a) &&\n                        !string.IsNullOrWhiteSpace(a.Phone))\n                    {\n                        phone = a.Phone;\n                        name ??= a.Name ?? \"Customer\";\n                    }\n\n                    if (string.IsNullOrWhiteSpace(phone))\n                    {\n                        failureCount++;\n                        continue; // nothing to send to\n                    }\n\n                    var contactForTemplating = r.Contact ?? new Contact\n                    {\n                        Id = Guid.Empty,\n                        BusinessId = businessId,\n                        PhoneNumber = phone,\n                        Name = name ?? \"Customer\"\n                    };\n\n                    var runId = Guid.NewGuid();\n                    var campaignSendLogId = Guid.NewGuid();\n\n                    // ✅ Build BODY params per recipient (never clobber with campaign-level when CSV/recipient values exist)\n                    var resolvedParams = GetRecipientBodyParams(r, templateMeta.PlaceholderCount, campaign.TemplateParameters);\n\n                    // If template expects body placeholders, prevent a Meta 131008 by refusing to send when any required value is blank\n                    if (templateMeta.PlaceholderCount > 0 && resolvedParams.Any(string.IsNullOrWhiteSpace))\n                    {\n                        failureCount++;\n                        var why = $\"Missing body parameter(s): expected {templateMeta.PlaceholderCount}, got \" +\n                                  $\"{resolvedParams.Count(x => !string.IsNullOrWhiteSpace(x))} filled.\";\n                        if (_context.Entry(r).State == EntityState.Detached) _context.Attach(r);\n                        r.MaterializedAt = now;\n                        r.UpdatedAt = now;\n                        r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams);\n\n                        // Log locally as a failed send without calling provider\n                        var logIdLocal = Guid.NewGuid();\n                        _context.MessageLogs.Add(new MessageLog\n                        {\n                            Id = logIdLocal,\n                            BusinessId = businessId,\n                            CampaignId = campaign.Id,\n                            ContactId = r.ContactId, // may be null\n                            RecipientNumber = phone,\n                            MessageContent = templateName,\n                            Status = \"Failed\",\n                            ErrorMessage = why,\n                            RawResponse = \"{\\\"local_error\\\":\\\"missing_template_body_params\\\"}\",\n                            CreatedAt = now,\n                            Source = \"campaign\",\n                            CTAFlowConfigId = campaign.CTAFlowConfigId,\n                            CTAFlowStepId = entryStepId,\n                            ButtonBundleJson = buttonBundleJson,\n                            RunId = runId\n                        });\n\n                        await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                        {\n                            Id = campaignSendLogId,\n                            CampaignId = campaign.Id,\n                            BusinessId = businessId,\n                            ContactId = r.ContactId,  // may be null\n                            RecipientId = r.Id,\n                            MessageBody = campaign.MessageBody ?? templateName,\n                            TemplateId = templateName,\n                            SendStatus = \"Failed\",\n                            MessageLogId = logIdLocal,\n                            ErrorMessage = why,\n                            CreatedAt = now,\n                            CreatedBy = campaign.CreatedBy,\n                            CTAFlowConfigId = campaign.CTAFlowConfigId,\n                            CTAFlowStepId = entryStepId,\n                            ButtonBundleJson = buttonBundleJson,\n                            RunId = runId\n                        });\n\n                        continue; // skip provider call\n                    }\n\n                    // ✅ Build components using the per-recipient params\n                    List<string> resolvedButtonUrls;\n                    object components = provider == \"PINNACLE\"\n                        ? BuildTextTemplateComponents_Pinnacle(resolvedParams, buttons, templateMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls)\n                        : BuildTextTemplateComponents_Meta(resolvedParams, buttons, templateMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls);\n\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = phone,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = languageCode },\n                            components\n                        }\n                    };\n\n                    // Freeze recipient materialization BEFORE send (ensure entity is tracked)\n                    if (_context.Entry(r).State == EntityState.Detached)\n                        _context.Attach(r);\n\n                    r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams); // ✅ save what we actually sent\n                    r.ResolvedButtonUrlsJson = JsonConvert.SerializeObject(resolvedButtonUrls);\n                    r.MaterializedAt = now;\n                    r.UpdatedAt = now;\n                    // deterministic idempotency fingerprint\n                    r.IdempotencyKey = Idempotency.Sha256($\"{campaign.Id}|{phone}|{templateName}|{r.ResolvedParametersJson}|{r.ResolvedButtonUrlsJson}\");\n\n                    var result = await _messageEngineService.SendPayloadAsync(businessId, provider, payload, phoneNumberIdOverride);\n\n                    var logId = Guid.NewGuid();\n                    _context.MessageLogs.Add(new MessageLog\n                    {\n                        Id = logId,\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = r.ContactId, // may be null\n                        RecipientNumber = phone,\n                        MessageContent = templateName,\n                        Status = result.Success ? \"Sent\" : \"Failed\",\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        RawResponse = result.RawResponse,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        Source = \"campaign\",\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId\n                    });\n\n                    await _billingIngest.IngestFromSendResponseAsync(\n                        businessId: businessId,\n                        messageLogId: logId,\n                        provider: provider,\n                        rawResponseJson: result.RawResponse ?? \"{}\"\n                    );\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = campaignSendLogId,\n                        CampaignId = campaign.Id,\n                        BusinessId = businessId,\n                        ContactId = r.ContactId,  // may be null\n                        RecipientId = r.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = logId,\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        CreatedBy = campaign.CreatedBy,\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId\n                    });\n\n                    if (result.Success) successCount++; else failureCount++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"📤 Sent to {successCount} recipients. ❌ Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error while sending text template campaign\");\n                return ResponseResult.ErrorInfo(\"🚨 Unexpected error while sending campaign.\", ex.ToString());\n            }\n        }\n\n\n        private static bool IsHttpsMp4Url(string? url, out string? normalizedError)\n        {\n            normalizedError = null;\n            if (string.IsNullOrWhiteSpace(url))\n            {\n                normalizedError = \"Missing VideoUrl.\";\n                return false;\n            }\n\n            if (!Uri.TryCreate(url.Trim(), UriKind.Absolute, out var uri))\n            {\n                normalizedError = \"VideoUrl is not a valid absolute URL.\";\n                return false;\n            }\n\n            if (!uri.Scheme.Equals(\"https\", StringComparison.OrdinalIgnoreCase))\n            {\n                normalizedError = \"VideoUrl must use HTTPS.\";\n                return false;\n            }\n\n            var ext = Path.GetExtension(uri.AbsolutePath);\n            if (!ext.Equals(\".mp4\", StringComparison.OrdinalIgnoreCase))\n            {\n                normalizedError = \"VideoUrl must point to an .mp4 file.\";\n                return false;\n            }\n\n            return true;\n        }\n\n\n\n        public async Task<ResponseResult> SendVideoTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                    return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n                if (campaign.Recipients == null || campaign.Recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ No recipients to send.\");\n\n                var businessId = campaign.BusinessId;\n\n                static string? PhoneOf(CampaignRecipient r) =>\n                    r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;\n\n                var recipients = campaign.Recipients.Where(r => !string.IsNullOrWhiteSpace(PhoneOf(r))).ToList();\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"⚠️ No valid recipients with phone numbers.\");\n\n                // Flow/template selection\n                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                    ? entryTemplate!\n                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n                if (string.IsNullOrWhiteSpace(templateName))\n                    return ResponseResult.ErrorInfo(\"❌ No template selected.\");\n\n                // Validate header media URL (direct https mp4)\n                var videoUrl = (campaign.VideoUrl ?? campaign.ImageUrl ?? \"\").Trim();\n                if (!IsHttpsMp4Url(videoUrl, out var vErr))\n                    return ResponseResult.ErrorInfo(\"🚫 Invalid VideoUrl\", vErr);\n\n                // Template meta\n                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n                if (templateMeta == null)\n                    return ResponseResult.ErrorInfo(\"❌ Template metadata not found.\");\n                var languageCode = (templateMeta.Language ?? \"\").Trim();\n                if (string.IsNullOrWhiteSpace(languageCode))\n                    return ResponseResult.ErrorInfo(\"❌ Template language not resolved from provider meta.\");\n\n                // Resolve provider\n                string provider;\n                if (!string.IsNullOrWhiteSpace(campaign.Provider))\n                {\n                    if (campaign.Provider != \"PINNACLE\" && campaign.Provider != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo(\"❌ Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.\");\n                    provider = campaign.Provider;\n                }\n                else\n                {\n                    var settings = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive)\n                        .OrderByDescending(s => s.PhoneNumberId != null)\n                        .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .ToListAsync();\n\n                    if (settings.Count == 0)\n                        return ResponseResult.ErrorInfo(\"❌ WhatsApp settings not found.\");\n                    if (settings.Count > 1 && settings[0].PhoneNumberId == null)\n                        return ResponseResult.ErrorInfo(\"❌ Multiple providers are active but no default sender is set.\");\n\n                    provider = settings[0].Provider;\n                    if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo($\"❌ Unsupported provider configured: {provider}\");\n                }\n\n                // Sender override\n                string? phoneNumberIdOverride = campaign.PhoneNumberId;\n                if (string.IsNullOrWhiteSpace(phoneNumberIdOverride))\n                {\n                    phoneNumberIdOverride = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive && s.Provider == provider && s.PhoneNumberId != null)\n                        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .Select(s => s.PhoneNumberId)\n                        .FirstOrDefaultAsync();\n                }\n\n                // Optional flow entry step id\n                Guid? entryStepId = null;\n                if (campaign.CTAFlowConfigId.HasValue)\n                {\n                    entryStepId = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)\n                        .OrderBy(s => s.StepOrder)\n                        .Select(s => (Guid?)s.Id)\n                        .FirstOrDefaultAsync();\n                }\n\n                // Freeze button bundle for UI click tracking\n                string? buttonBundleJson = null;\n                if (templateMeta.ButtonParams is { Count: > 0 })\n                {\n                    var bundle = templateMeta.ButtonParams.Take(3)\n                        .Select((b, i) => new { i, position = i + 1, text = (b.Text ?? \"\").Trim(), type = b.Type, subType = b.SubType })\n                        .ToList();\n                    buttonBundleJson = JsonConvert.SerializeObject(bundle);\n                }\n\n                // Audience lookup for missing contacts\n                var neededMemberIds = recipients\n                    .Where(x => x.ContactId == null && x.AudienceMemberId != null)\n                    .Select(x => x.AudienceMemberId!.Value)\n                    .Distinct()\n                    .ToList();\n\n                var audienceLookup = neededMemberIds.Count == 0\n                    ? new Dictionary<Guid, (string Phone, string? Name)>()\n                    : await _context.AudiencesMembers.AsNoTracking()\n                        .Where(m => m.BusinessId == businessId && neededMemberIds.Contains(m.Id))\n                        .Select(m => new { m.Id, m.PhoneE164, m.PhoneRaw, m.Name })\n                        .ToDictionaryAsync(\n                            x => x.Id,\n                            x => (Phone: string.IsNullOrWhiteSpace(x.PhoneE164) ? (x.PhoneRaw ?? \"\") : x.PhoneE164, Name: x.Name)\n                        );\n\n                int successCount = 0, failureCount = 0;\n                var now = DateTime.UtcNow;\n\n                foreach (var r in recipients)\n                {\n                    var phone = PhoneOf(r);\n                    string? name = r.Contact?.Name;\n\n                    if (string.IsNullOrWhiteSpace(phone) && r.AudienceMemberId != null &&\n                        audienceLookup.TryGetValue(r.AudienceMemberId.Value, out var a) &&\n                        !string.IsNullOrWhiteSpace(a.Phone))\n                    {\n                        phone = a.Phone;\n                        name ??= a.Name ?? \"Customer\";\n                    }\n                    if (string.IsNullOrWhiteSpace(phone))\n                    {\n                        failureCount++;\n                        continue;\n                    }\n\n                    var contactForTemplating = r.Contact ?? new Contact\n                    {\n                        Id = Guid.Empty,\n                        BusinessId = businessId,\n                        PhoneNumber = phone,\n                        Name = name ?? \"Customer\"\n                    };\n\n                    var runId = Guid.NewGuid();\n                    var campaignSendLogId = Guid.NewGuid();\n\n                    // ✅ Provider-specific component builder (uses recipient-resolved shapes)\n                    bool built;\n                    List<object> components;\n                    string? buildErr;\n\n                    if (provider == \"META_CLOUD\")\n                        built = TryBuildVideoTemplateComponents_Meta(videoUrl, templateMeta, r, out components, out buildErr);\n                    else\n                        built = TryBuildVideoTemplateComponents_Pinnacle(videoUrl, templateMeta, r, out components, out buildErr);\n\n                    if (!built)\n                    {\n                        failureCount++;\n                        _logger.LogWarning(\"[VideoTpl] Component build failed campaign={CampaignId} phone={Phone}: {Err}\",\n                            campaign.Id, phone, buildErr);\n                        _context.CampaignSendLogs.Add(new CampaignSendLog\n                        {\n                            Id = campaignSendLogId,\n                            CampaignId = campaign.Id,\n                            BusinessId = businessId,\n                            ContactId = r.ContactId,\n                            RecipientId = r.Id,\n                            MessageBody = campaign.MessageBody ?? templateName,\n                            TemplateId = templateName,\n                            SendStatus = \"Failed\",\n                            ErrorMessage = $\"component-build: {buildErr}\",\n                            CreatedAt = now,\n                            CreatedBy = campaign.CreatedBy,\n                            CTAFlowConfigId = campaign.CTAFlowConfigId,\n                            CTAFlowStepId = entryStepId,\n                            ButtonBundleJson = buttonBundleJson,\n                            RunId = runId,\n                            SourceChannel = \"video_template\"\n                        });\n                        continue;\n                    }\n\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = phone,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = languageCode },\n                            components\n                        }\n                    };\n\n                    // Snapshot (keep truthful; materializer should already have set these)\n                    if (_context.Entry(r).State == EntityState.Detached)\n                        _context.Attach(r);\n                    r.MaterializedAt = r.MaterializedAt ?? now;\n                    r.UpdatedAt = now;\n                    r.IdempotencyKey = Idempotency.Sha256(\n                        $\"{campaign.Id}|{phone}|{templateName}|{videoUrl}|{r.ResolvedParametersJson}|{r.ResolvedButtonUrlsJson}\");\n\n                    var result = await _messageEngineService.SendPayloadAsync(businessId, provider, payload, phoneNumberIdOverride);\n\n                    var logId = Guid.NewGuid();\n                    _context.MessageLogs.Add(new MessageLog\n                    {\n                        Id = logId,\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = r.ContactId,\n                        RecipientNumber = phone,\n                        MessageContent = templateName,\n                        MediaUrl = videoUrl,\n                        Status = result.Success ? \"Sent\" : \"Failed\",\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        RawResponse = result.RawResponse,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        Source = \"campaign\",\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId,\n                        Provider = provider,\n                        ProviderMessageId = result.MessageId\n                    });\n\n                    await _billingIngest.IngestFromSendResponseAsync(\n                        businessId: businessId,\n                        messageLogId: logId,\n                        provider: provider,\n                        rawResponseJson: result.RawResponse ?? \"{}\"\n                    );\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = campaignSendLogId,\n                        CampaignId = campaign.Id,\n                        BusinessId = businessId,\n                        ContactId = r.ContactId,\n                        RecipientId = r.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = logId,\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        CreatedBy = campaign.CreatedBy,\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId,\n                        SourceChannel = \"video_template\"\n                    });\n\n                    if (result.Success) successCount++; else failureCount++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"🎬 Video template sent to {successCount} recipients. ❌ Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error while sending video template campaign\");\n                return ResponseResult.ErrorInfo(\"🚨 Unexpected error while sending video campaign.\", ex.ToString());\n            }\n        }\n\n        private List<object> BuildVideoTemplateComponents(\n            string provider,\n            string headerVideoUrl,\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact,\n            out List<string> resolvedButtonUrls)\n        {\n            // Reuse your current builders to get BODY + BUTTONS\n            List<object> nonHeaderComponents;\n            if (string.Equals(provider, \"PINNACLE\", StringComparison.Ordinal))\n                nonHeaderComponents = BuildTextTemplateComponents_Pinnacle(\n                    templateParams, buttonList, templateMeta, campaignSendLogId, contact, out resolvedButtonUrls);\n            else // META_CLOUD\n                nonHeaderComponents = BuildTextTemplateComponents_Meta(\n                    templateParams, buttonList, templateMeta, campaignSendLogId, contact, out resolvedButtonUrls);\n\n            // Prepend the HEADER/VIDEO piece (WhatsApp shape for both providers)\n            var components = new List<object>\n    {\n        new\n        {\n            type = \"header\",\n            parameters = new object[] {\n                new { type = \"video\", video = new { link = headerVideoUrl } }\n            }\n        }\n    };\n\n            components.AddRange(nonHeaderComponents);\n            return components;\n        }\n        private bool TryBuildVideoTemplateComponents_Meta(\n    string videoUrl,\n    TemplateMetadataDto templateMeta,\n    CampaignRecipient r,\n    out List<object> components,\n    out string? error)\n        {\n            components = new List<object>();\n            error = null;\n\n            if (string.IsNullOrWhiteSpace(videoUrl))\n            {\n                error = \"required header VIDEO url is missing\";\n                return false;\n            }\n\n            // HEADER (video)\n            components.Add(new Dictionary<string, object>\n            {\n                [\"type\"] = \"header\",\n                [\"parameters\"] = new object[]\n                {\n            new Dictionary<string, object>\n            {\n                [\"type\"] = \"video\",\n                [\"video\"] = new Dictionary<string, object>\n                {\n                    [\"link\"] = videoUrl\n                }\n            }\n                }\n            });\n\n            // BODY {{1..N}}\n            var count = Math.Max(0, templateMeta.PlaceholderCount);\n            var bodyParams = DeserializeBodyParams(r.ResolvedParametersJson, count);\n            if (count > 0)\n            {\n                // If template expects text params, enforce presence\n                var missing = MissingIndices(bodyParams, count);\n                if (missing.Count > 0)\n                {\n                    error = $\"missing body params at {{ {string.Join(\",\", missing)} }}\";\n                    return false;\n                }\n\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = bodyParams.Select(p => new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"text\",\n                        [\"text\"] = p ?? string.Empty\n                    }).ToList()\n                });\n            }\n\n            // URL BUTTON parameters (only when template declares dynamic pieces)\n            if (templateMeta.ButtonParams != null && templateMeta.ButtonParams.Count > 0)\n            {\n                var urlDict = DeserializeButtonDict(r.ResolvedButtonUrlsJson);\n                var total = Math.Min(3, templateMeta.ButtonParams.Count);\n\n                for (int i = 0; i < total; i++)\n                {\n                    var bp = templateMeta.ButtonParams[i];\n                    var subType = (bp.SubType ?? \"url\").ToLowerInvariant();\n                    var paramMask = bp.ParameterValue?.Trim();\n\n                    // Only dynamic URL buttons need a \"text\" parameter\n                    if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                        continue;\n\n                    var isDynamic = !string.IsNullOrWhiteSpace(paramMask) && paramMask.Contains(\"{{\");\n                    if (!isDynamic) continue;\n\n                    // materializer persisted: button{1..3}.url_param\n                    var key = $\"button{i + 1}.url_param\";\n                    if (!urlDict.TryGetValue(key, out var dyn) || string.IsNullOrWhiteSpace(dyn))\n                    {\n                        error = $\"missing dynamic URL param for {key}\";\n                        return false;\n                    }\n\n                    components.Add(new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = \"url\",\n                        [\"index\"] = i.ToString(), // \"0\",\"1\",\"2\"\n                        [\"parameters\"] = new object[]\n                        {\n                    new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = dyn }\n                        }\n                    });\n                }\n            }\n\n            return true;\n        }\n\n        private bool TryBuildVideoTemplateComponents_Pinnacle(\n    string videoUrl,\n    TemplateMetadataDto templateMeta,\n    CampaignRecipient r,\n    out List<object> components,\n    out string? error)\n        {\n            // If Pinnacle uses same structure as Meta for templates, we can reuse Meta logic.\n            // If they require a different header/media envelope, adapt here.\n            return TryBuildVideoTemplateComponents_Meta(videoUrl, templateMeta, r, out components, out error);\n        }\n        private static Dictionary<string, string> DeserializeButtonDict(string? json)\n        {\n            try\n            {\n                return string.IsNullOrWhiteSpace(json)\n                    ? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)\n                    : JsonConvert.DeserializeObject<Dictionary<string, string>>(json!)\n                      ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n            catch\n            {\n                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n        }\n        private static List<int> MissingIndices(List<string> bodyParams, int count)\n        {\n            var miss = new List<int>();\n            for (int i = 0; i < count; i++)\n            {\n                if (string.IsNullOrWhiteSpace(i < bodyParams.Count ? bodyParams[i] : null))\n                    miss.Add(i + 1); // 1-based for readability\n            }\n            return miss;\n        }\n        // ---------- helpers ----------\n        private static List<string> DeserializeBodyParams(string? json, int expectedCount)\n        {\n            try\n            {\n                var arr = string.IsNullOrWhiteSpace(json)\n                    ? Array.Empty<string>()\n                    : JsonConvert.DeserializeObject<string[]>(json!) ?? Array.Empty<string>();\n\n                // pad/trim to template placeholder count\n                var list = new List<string>(Enumerable.Repeat(string.Empty, Math.Max(expectedCount, 0)));\n                for (int i = 0; i < Math.Min(expectedCount, arr.Length); i++)\n                    list[i] = arr[i] ?? string.Empty;\n                return list;\n            }\n            catch\n            {\n                return new List<string>(Enumerable.Repeat(string.Empty, Math.Max(expectedCount, 0)));\n            }\n        }\n        private static readonly Regex PlaceholderRe = new(@\"\\{\\{\\s*(\\d+)\\s*\\}\\}\", RegexOptions.Compiled);\n\n        private string BuildTokenParam(Guid campaignSendLogId, int buttonIndex, string? buttonTitle, string destinationUrlAbsolute)\n        {\n            var full = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, buttonIndex, buttonTitle, destinationUrlAbsolute);\n            var pos = full.LastIndexOf(\"/r/\", StringComparison.OrdinalIgnoreCase);\n            return (pos >= 0) ? full[(pos + 3)..] : full; // fallback: if not found, return full (rare)\n        }\n\n        private static string NormalizeAbsoluteUrlOrThrowForButton(string input, string buttonTitle, int buttonIndex)\n        {\n            if (string.IsNullOrWhiteSpace(input))\n                throw new ArgumentException($\"Destination is required for button '{buttonTitle}' (index {buttonIndex}).\");\n\n            // Trim + strip control chars\n            var cleaned = new string(input.Trim().Where(c => !char.IsControl(c)).ToArray());\n            if (cleaned.Length == 0)\n                throw new ArgumentException($\"Destination is required for button '{buttonTitle}' (index {buttonIndex}).\");\n\n            // Allow tel: and WhatsApp deep links\n            if (cleaned.StartsWith(\"tel:\", StringComparison.OrdinalIgnoreCase) ||\n                cleaned.StartsWith(\"wa:\", StringComparison.OrdinalIgnoreCase) ||\n                cleaned.StartsWith(\"https://wa.me/\", StringComparison.OrdinalIgnoreCase))\n            {\n                return cleaned; // Accept as-is\n            }\n\n            // Normal web links\n            if (Uri.TryCreate(cleaned, UriKind.Absolute, out var uri) &&\n                (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                 uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase)))\n            {\n                return uri.ToString();\n            }\n\n            // Reject everything else\n            throw new ArgumentException(\n                $\"Destination must be an absolute http/https/tel/wa URL for button '{buttonTitle}' (index {buttonIndex}). Got: '{input}'\");\n        }\n\n        private static bool LooksLikeAbsoluteBaseUrlWithPlaceholder(string? templateUrl)\n        {\n            if (string.IsNullOrWhiteSpace(templateUrl)) return false;\n            var s = templateUrl.Trim();\n            if (!s.Contains(\"{{\")) return false;\n\n            // Probe by replacing common placeholders with a char\n            var probe = PlaceholderRe.Replace(s, \"x\");\n            return Uri.TryCreate(probe, UriKind.Absolute, out var abs) &&\n                   (abs.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    abs.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase));\n        }\n\n        private static object[] BuildBodyParameters(List<string>? templateParams, int requiredCount)\n        {\n            if (requiredCount <= 0) return Array.Empty<object>();\n\n            var src = templateParams ?? new List<string>();\n            if (src.Count > requiredCount) src = src.Take(requiredCount).ToList();\n            while (src.Count < requiredCount) src.Add(string.Empty);\n\n            return src.Select(p => (object)new { type = \"text\", text = p ?? string.Empty }).ToArray();\n        }\n\n        private static string NormalizePhoneForTel(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return \"\";\n            var p = raw.Trim();\n            var digits = new string(p.Where(char.IsDigit).ToArray());\n            // keep leading + if present initially; always output +<digits>\n            return \"+\" + digits;\n        }\n\n        private static string ReplaceAllPlaceholdersWith(string template, string replacement)\n        {\n            if (string.IsNullOrWhiteSpace(template)) return string.Empty;\n            return PlaceholderRe.Replace(template, _ => replacement ?? string.Empty);\n        }\n\n        // ======================================================\n        // META — TEXT TEMPLATE COMPONENTS\n        // ======================================================\n\n        // Back-compat wrapper (old signature)\n        private List<object> BuildTextTemplateComponents_Meta(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact)\n        {\n            return BuildTextTemplateComponents_Meta(\n                templateParams, buttonList, templateMeta, campaignSendLogId, contact, out _);\n        }\n\n        // New overload with resolvedButtonUrls\n        private List<object> BuildTextTemplateComponents_Meta(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact,\n            out List<string> resolvedButtonUrls)\n        {\n            var components = new List<object>();\n            resolvedButtonUrls = new List<string>();\n\n            // BODY: send exactly PlaceholderCount\n            if (templateMeta.PlaceholderCount > 0)\n            {\n                var bodyParams = BuildBodyParameters(templateParams, templateMeta.PlaceholderCount);\n                components.Add(new { type = \"body\", parameters = bodyParams });\n            }\n\n            // No buttons or template has no button params\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            // Ensure index alignment with the template by ordering by Position (then original index)\n            var orderedButtons = buttonList\n                .Select((b, idx) => new { Btn = b, idx })\n                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                .ThenBy(x => x.idx)\n                .Select(x => x.Btn)\n                .ToList();\n\n            var total = Math.Min(3, Math.Min(orderedButtons.Count, templateMeta.ButtonParams.Count));\n\n            // Phone normalization (for optional {{1}} substitution on campaign button value)\n            var phone = NormalizePhoneForTel(contact?.PhoneNumber);\n            var encodedPhone = Uri.EscapeDataString(phone);\n\n            for (int i = 0; i < total; i++)\n            {\n                var meta = templateMeta.ButtonParams[i];\n                var subType = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim();\n\n                // Meta needs parameters ONLY for dynamic URL buttons\n                if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                if (!isDynamic)\n                    continue;\n\n                var btn = orderedButtons[i];\n                var btnType = (btn?.Type ?? \"URL\").ToUpperInvariant();\n                if (!string.Equals(btnType, \"URL\", StringComparison.OrdinalIgnoreCase))\n                {\n                    // If template expects dynamic URL at this index and your campaign button isn't URL, skip to avoid provider error\n                    continue;\n                }\n\n                var valueRaw = btn.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template requires a dynamic URL at button index {i}, but campaign button value is empty.\");\n                }\n\n                // Optional phone substitution in destination (support any {{n}})\n                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>\n                {\n                    if (!int.TryParse(m.Groups[1].Value, out var n)) return \"\";\n                    if (n == 1) return encodedPhone; // convention: {{1}} can be phone\n                    var idx = n - 1;\n                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? \"\") : \"\";\n                });\n\n                resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn.Title ?? \"\", i);\n\n                // Build both; choose which to send based on template base style\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = \"url\",\n                    [\"index\"] = i.ToString(), // \"0\"/\"1\"/\"2\"\n                    [\"parameters\"] = new[] {\n                new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend }\n            }\n                });\n\n                // Provider-resolved URL (what the client actually clicks):\n                // replace all placeholders in provider template with the parameter we sent.\n                var providerResolved = ReplaceAllPlaceholdersWith(metaParam ?? \"\", valueToSend);\n                resolvedButtonUrls.Add(providerResolved);\n            }\n\n            return components;\n        }\n\n        // ======================================================\n        // PINNACLE — TEXT TEMPLATE COMPONENTS\n        // ======================================================\n\n        // Back-compat wrapper (old signature)\n        private List<object> BuildTextTemplateComponents_Pinnacle(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact)\n        {\n            return BuildTextTemplateComponents_Pinnacle(\n                templateParams, buttonList, templateMeta, campaignSendLogId, contact, out _);\n        }\n\n        // New overload with resolvedButtonUrls\n        private List<object> BuildTextTemplateComponents_Pinnacle(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact,\n            out List<string> resolvedButtonUrls)\n        {\n            var components = new List<object>();\n            resolvedButtonUrls = new List<string>();\n\n            // BODY: Pinnacle is strict → always send exactly PlaceholderCount\n            if (templateMeta.PlaceholderCount > 0)\n            {\n                var bodyParams = BuildBodyParameters(templateParams, templateMeta.PlaceholderCount);\n                components.Add(new { type = \"body\", parameters = bodyParams });\n            }\n\n            // No buttons to map → return body-only\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            // Ensure index alignment with the template by ordering by Position (then original index)\n            var orderedButtons = buttonList\n                .Select((b, idx) => new { Btn = b, idx })\n                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                .ThenBy(x => x.idx)\n                .Select(x => x.Btn)\n                .ToList();\n\n            var total = Math.Min(3, Math.Min(orderedButtons.Count, templateMeta.ButtonParams.Count));\n\n            // Phone normalization (for optional {{1}} substitution on campaign button value)\n            var phone = NormalizePhoneForTel(contact?.PhoneNumber);\n            var encodedPhone = Uri.EscapeDataString(phone);\n\n            for (int i = 0; i < total; i++)\n            {\n                var meta = templateMeta.ButtonParams[i];\n                var subType = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim();\n\n                // This path supports dynamic URL params only\n                if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                if (!isDynamic)\n                    continue;\n\n                var btn = orderedButtons[i];\n                var btnType = (btn?.Type ?? \"URL\").ToUpperInvariant();\n                if (!string.Equals(btnType, \"URL\", StringComparison.OrdinalIgnoreCase))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template expects a dynamic URL at button index {i}, but campaign button type is '{btn?.Type}'.\");\n                }\n\n                var valueRaw = btn?.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template requires a dynamic URL at button index {i}, but campaign button value is empty.\");\n                }\n\n                // Optional phone + param substitution (support any {{n}})\n                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>\n                {\n                    if (!int.TryParse(m.Groups[1].Value, out var n)) return \"\";\n                    if (n == 1) return encodedPhone;\n                    var idx = n - 1;\n                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? \"\") : \"\";\n                });\n\n                // Validate + normalize absolute URL\n                resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn!.Title ?? \"\", i);\n\n                // Build both options: full tracked URL vs token param (for absolute-base placeholders)\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                // Pinnacle payload shape (kept aligned with Meta)\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = \"url\",\n                    [\"index\"] = i.ToString(),\n                    [\"parameters\"] = new[] {\n                new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend }\n            }\n                });\n\n                // Provider-resolved URL (what the user will open)\n                var providerResolved = ReplaceAllPlaceholdersWith(metaParam ?? \"\", valueToSend);\n                resolvedButtonUrls.Add(providerResolved);\n            }\n\n            return components;\n        }\n\n\n        #region SendImagetemplate\n\n        //public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)\n        //{\n        //    try\n        //    {\n        //        if (campaign == null || campaign.IsDeleted)\n        //            return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n        //        if (campaign.Recipients == null || !campaign.Recipients.Any())\n        //            return ResponseResult.ErrorInfo(\"❌ No recipients to send.\");\n\n        //        var businessId = campaign.BusinessId;\n\n        //        // 🔧 Resolve provider for billing (prefer campaign.Provider, else active setting)\n        //        string? provider = !string.IsNullOrWhiteSpace(campaign.Provider)\n        //            ? campaign.Provider\n        //            : await _context.WhatsAppSettings\n        //                .AsNoTracking()\n        //                .Where(s => s.BusinessId == businessId && s.IsActive)\n        //                .OrderByDescending(s => s.PhoneNumberId != null)          // prefer default sender\n        //                .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n        //                .Select(s => s.Provider)\n        //                .FirstOrDefaultAsync();\n\n        //        if (string.IsNullOrWhiteSpace(provider)) provider = \"META_CLOUD\";\n\n\n        //        // 🔑 Flow entry → template name\n        //        var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n        //        var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n        //            ? entryTemplate!\n        //            : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n\n        //        var language = \"en_US\";\n        //        var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? \"[]\");\n\n        //        int success = 0, failed = 0;\n\n        //        foreach (var r in campaign.Recipients)\n        //        {\n        //            var dto = new ImageTemplateMessageDto\n        //            {\n        //                RecipientNumber = r.Contact.PhoneNumber,\n        //                TemplateName = templateName,\n        //                LanguageCode = language,\n        //                HeaderImageUrl = campaign.ImageUrl,\n        //                TemplateParameters = templateParams,\n        //                ButtonParameters = campaign.MultiButtons\n        //                    .OrderBy(b => b.Position)\n        //                    .Take(3)\n        //                    .Select(b => new CampaignButtonDto\n        //                    {\n        //                        ButtonText = b.Title,\n        //                        ButtonType = b.Type,\n        //                        TargetUrl = b.Value\n        //                    }).ToList()\n        //            };\n\n        //            var res = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n        //            var ok = res.ToString().ToLower().Contains(\"messages\");\n\n        //            // keep ids + raw json for billing\n        //            var payloadJson = JsonConvert.SerializeObject(res);\n        //            var messageLogId = Guid.NewGuid();\n\n        //            _context.MessageLogs.Add(new MessageLog\n        //            {\n        //                Id = messageLogId,\n        //                BusinessId = businessId,\n        //                CampaignId = campaign.Id,\n        //                ContactId = r.ContactId,\n        //                RecipientNumber = r.Contact.PhoneNumber,\n        //                MessageContent = templateName,\n        //                MediaUrl = campaign.ImageUrl,\n        //                Status = ok ? \"Sent\" : \"Failed\",\n        //                ErrorMessage = ok ? null : \"API Failure\",\n        //                RawResponse = payloadJson,\n        //                CreatedAt = DateTime.UtcNow,\n        //                SentAt = DateTime.UtcNow,\n        //                Source = \"campaign\"\n        //            });\n\n        //            // 🔎 Billing capture (send response)\n        //            await _billingIngest.IngestFromSendResponseAsync(\n        //                businessId: businessId,\n        //                messageLogId: messageLogId,\n        //                provider: provider!,\n        //                rawResponseJson: payloadJson\n        //            );\n\n\n        //            //var res = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n        //            //var ok = res.ToString().ToLower().Contains(\"messages\");\n\n        //            //_context.MessageLogs.Add(new MessageLog\n        //            //{\n        //            //    Id = Guid.NewGuid(),\n        //            //    BusinessId = businessId,\n        //            //    CampaignId = campaign.Id,\n        //            //    ContactId = r.ContactId,\n        //            //    RecipientNumber = r.Contact.PhoneNumber,\n        //            //    MessageContent = templateName,\n        //            //    MediaUrl = campaign.ImageUrl,\n        //            //    Status = ok ? \"Sent\" : \"Failed\",\n        //            //    ErrorMessage = ok ? null : \"API Failure\",\n        //            //    RawResponse = JsonConvert.SerializeObject(res),\n        //            //    CreatedAt = DateTime.UtcNow,\n        //            //    SentAt = DateTime.UtcNow,\n        //            //    Source = \"campaign\"\n        //            //});\n\n        //            if (ok) success++; else failed++;\n        //        }\n\n        //        await _context.SaveChangesAsync();\n        //        return ResponseResult.SuccessInfo($\"✅ Sent: {success}, ❌ Failed: {failed}\");\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        return ResponseResult.ErrorInfo(\"❌ Unexpected error during campaign send.\", ex.ToString());\n        //    }\n        //}\n\n        public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                    return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n                if (campaign.Recipients == null || campaign.Recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ No recipients to send.\");\n\n                var businessId = campaign.BusinessId;\n\n                // --- helper identical to text flow ---\n                static string? ResolveRecipientPhone(CampaignRecipient r) =>\n                    r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;\n\n                // Keep only recipients that actually have a phone\n                var recipients = campaign.Recipients\n                    .Where(r => !string.IsNullOrWhiteSpace(ResolveRecipientPhone(r)))\n                    .ToList();\n\n                if (!recipients.Any())\n                    return ResponseResult.ErrorInfo(\"⚠️ No valid recipients with phone numbers (Contact/AudienceMember).\");\n\n                // --- Flow/template selection (same as text flow) ---\n                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                    ? entryTemplate!\n                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n                if (string.IsNullOrWhiteSpace(templateName))\n                    return ResponseResult.ErrorInfo(\"❌ No template selected.\");\n\n                // --- Provider template meta (language, placeholder count, buttons) ---\n                var tmplMeta = await _templateFetcherService.GetTemplateByNameAsync(\n                    businessId, templateName, includeButtons: true);\n                if (tmplMeta == null)\n                    return ResponseResult.ErrorInfo(\"❌ Template metadata not found.\");\n\n                var languageCode = (tmplMeta.Language ?? \"\").Trim();\n                if (string.IsNullOrWhiteSpace(languageCode))\n                    return ResponseResult.ErrorInfo(\"❌ Template language not resolved from provider meta.\");\n\n                // --- Provider normalize (strict) ---\n                string provider;\n                if (!string.IsNullOrWhiteSpace(campaign.Provider))\n                {\n                    var p = campaign.Provider.Trim().ToUpperInvariant();\n                    if (p != \"PINNACLE\" && p != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo(\"❌ Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.\");\n                    provider = p;\n                }\n                else\n                {\n                    var settings = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive)\n                        .OrderByDescending(s => s.PhoneNumberId != null)               // prefer default sender\n                        .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .ToListAsync();\n\n                    if (settings.Count == 0)\n                        return ResponseResult.ErrorInfo(\"❌ WhatsApp settings not found.\");\n                    if (settings.Count > 1 && settings[0].PhoneNumberId == null)\n                        return ResponseResult.ErrorInfo(\"❌ Multiple providers are active but no default sender is set.\");\n\n                    var p = settings[0].Provider?.Trim().ToUpperInvariant();\n                    if (p != \"PINNACLE\" && p != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo($\"❌ Unsupported provider configured: {settings[0].Provider}\");\n                    provider = p!;\n                }\n\n                // --- Sender override (PNI): campaign override → else latest active for this provider ---\n                string? phoneNumberIdOverride = campaign.PhoneNumberId;\n                if (string.IsNullOrWhiteSpace(phoneNumberIdOverride))\n                {\n                    phoneNumberIdOverride = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive && s.Provider == provider && s.PhoneNumberId != null)\n                        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .Select(s => s.PhoneNumberId)\n                        .FirstOrDefaultAsync();\n                }\n\n                // --- Flow entry step id (for logs) ---\n                Guid? entryStepId = null;\n                if (campaign.CTAFlowConfigId.HasValue)\n                {\n                    entryStepId = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)\n                        .OrderBy(s => s.StepOrder)\n                        .Select(s => (Guid?)s.Id)\n                        .FirstOrDefaultAsync();\n                }\n\n                // --- Freeze button bundle (provider meta) for analytics ---\n                string? buttonBundleJson = null;\n                if (tmplMeta.ButtonParams is { Count: > 0 })\n                {\n                    var bundle = tmplMeta.ButtonParams.Take(3)\n                        .Select((b, i) => new { i, position = i + 1, text = (b.Text ?? \"\").Trim(), type = b.Type, subType = b.SubType })\n                        .ToList();\n                    buttonBundleJson = JsonConvert.SerializeObject(bundle);\n                }\n\n                // --- Prefetch AudienceMembers for recipients without Contact ---\n                var neededMemberIds = recipients\n                    .Where(x => x.ContactId == null && x.AudienceMemberId != null)\n                    .Select(x => x.AudienceMemberId!.Value)\n                    .Distinct()\n                    .ToList();\n\n                var audienceLookup = neededMemberIds.Count == 0\n                    ? new Dictionary<Guid, (string Phone, string? Name)>()\n                    : await _context.AudiencesMembers.AsNoTracking()\n                        .Where(m => m.BusinessId == businessId && neededMemberIds.Contains(m.Id))\n                        .Select(m => new { m.Id, m.PhoneE164, m.PhoneRaw, m.Name })\n                        .ToDictionaryAsync(\n                            x => x.Id,\n                            x => (Phone: string.IsNullOrWhiteSpace(x.PhoneE164) ? (x.PhoneRaw ?? \"\") : x.PhoneE164,\n                                  Name: x.Name)\n                        );\n\n                // --- Ordered campaign buttons (align with template) ---\n                var buttons = campaign.MultiButtons?\n                    .Select((b, idx) => new { Btn = b, idx })\n                    .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                    .ThenBy(x => x.idx)\n                    .Select(x => x.Btn)\n                    .ToList() ?? new List<CampaignButton>();\n\n                int successCount = 0, failureCount = 0;\n                var now = DateTime.UtcNow;\n\n                foreach (var r in recipients)\n                {\n                    // Resolve phone + friendly name with Audience fallback\n                    var phone = ResolveRecipientPhone(r);\n                    string? name = r.Contact?.Name;\n\n                    if (string.IsNullOrWhiteSpace(phone) && r.AudienceMemberId != null &&\n                        audienceLookup.TryGetValue(r.AudienceMemberId.Value, out var a) &&\n                        !string.IsNullOrWhiteSpace(a.Phone))\n                    {\n                        phone = a.Phone;\n                        name ??= a.Name ?? \"Customer\";\n                    }\n\n                    if (string.IsNullOrWhiteSpace(phone))\n                    {\n                        failureCount++;\n                        continue; // no destination\n                    }\n\n                    // Synthetic contact to avoid any null derefs downstream\n                    var contactForTemplating = r.Contact ?? new Contact\n                    {\n                        Id = Guid.Empty,\n                        BusinessId = businessId,\n                        PhoneNumber = phone,\n                        Name = name ?? \"Customer\"\n                    };\n\n                    // Per-recipient params (keep CSV/recipient overrides)\n                    var resolvedParams = GetRecipientBodyParams(r, tmplMeta.PlaceholderCount, campaign.TemplateParameters);\n\n                    // Hard guard: if template expects placeholders, refuse to send if any blank (prevents Meta 131008)\n                    if (tmplMeta.PlaceholderCount > 0 && resolvedParams.Any(string.IsNullOrWhiteSpace))\n                    {\n                        failureCount++;\n\n                        var why = $\"Missing body parameter(s): expected {tmplMeta.PlaceholderCount}, got \" +\n                                  $\"{resolvedParams.Count(x => !string.IsNullOrWhiteSpace(x))} filled.\";\n\n                        if (_context.Entry(r).State == EntityState.Detached) _context.Attach(r);\n                        r.MaterializedAt = now;\n                        r.UpdatedAt = now;\n                        r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams);\n\n                        var logIdLocal = Guid.NewGuid();\n                        _context.MessageLogs.Add(new MessageLog\n                        {\n                            Id = logIdLocal,\n                            BusinessId = businessId,\n                            CampaignId = campaign.Id,\n                            ContactId = r.ContactId,\n                            RecipientNumber = phone,\n                            MessageContent = templateName,\n                            MediaUrl = campaign.ImageUrl,\n                            Status = \"Failed\",\n                            ErrorMessage = why,\n                            RawResponse = \"{\\\"local_error\\\":\\\"missing_template_body_params\\\"}\",\n                            CreatedAt = now,\n                            Source = \"campaign\",\n                            CTAFlowConfigId = campaign.CTAFlowConfigId,\n                            CTAFlowStepId = entryStepId,\n                            ButtonBundleJson = buttonBundleJson\n                        });\n\n                        await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaign.Id,\n                            BusinessId = businessId,\n                            ContactId = r.ContactId,\n                            RecipientId = r.Id,\n                            MessageBody = campaign.MessageBody ?? templateName,\n                            TemplateId = templateName,\n                            SendStatus = \"Failed\",\n                            MessageLogId = logIdLocal,\n                            ErrorMessage = why,\n                            CreatedAt = now,\n                            CTAFlowConfigId = campaign.CTAFlowConfigId,\n                            CTAFlowStepId = entryStepId,\n                            ButtonBundleJson = buttonBundleJson\n                        });\n\n                        continue;\n                    }\n\n                    // Build provider-style button components to freeze provider-resolved URLs\n                    var runId = Guid.NewGuid();\n                    var campaignSendLogId = Guid.NewGuid();\n                    List<string> resolvedButtonUrls;\n\n                    _ = (provider == \"PINNACLE\")\n                        ? BuildImageTemplateComponents_Pinnacle(\n                            campaign.ImageUrl, resolvedParams, buttons, tmplMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls)\n                        : BuildImageTemplateComponents_Meta(\n                            campaign.ImageUrl, resolvedParams, buttons, tmplMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls);\n\n                    // Freeze recipient materialization BEFORE send\n                    if (_context.Entry(r).State == EntityState.Detached) _context.Attach(r);\n                    r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams);\n                    r.ResolvedButtonUrlsJson = JsonConvert.SerializeObject(resolvedButtonUrls);\n                    r.MaterializedAt = now;\n                    r.UpdatedAt = now;\n                    r.IdempotencyKey = Idempotency.Sha256(\n                        $\"{campaign.Id}|{phone}|{templateName}|{r.ResolvedParametersJson}|{r.ResolvedButtonUrlsJson}|{campaign.ImageUrl}|{campaign.ImageCaption}\");\n\n                    // Build DTO for engine (engine composes components from dto fields)\n                    var dto = new ImageTemplateMessageDto\n                    {\n                        BusinessId = businessId,\n                        Provider = provider,                 // <<< REQUIRED\n                        PhoneNumberId = phoneNumberIdOverride,    // may be null → provider default sender\n                        RecipientNumber = phone,\n                        TemplateName = templateName,\n                        LanguageCode = languageCode,\n                        HeaderImageUrl = campaign.ImageUrl,\n                        TemplateBody = campaign.MessageBody,     // for RenderedBody\n                        TemplateParameters = resolvedParams,\n                        ButtonParameters = buttons.Take(3).Select(b => new CampaignButtonDto\n                        {\n                            ButtonText = b.Title,\n                            ButtonType = b.Type,\n                            TargetUrl = b.Value\n                        }).ToList(),\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId\n                    };\n\n                    // Send via message engine\n                    var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n                    // Persist logs\n                    var logId = Guid.NewGuid();\n                    _context.MessageLogs.Add(new MessageLog\n                    {\n                        Id = logId,\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = r.ContactId,\n                        RecipientNumber = phone,\n                        MessageContent = templateName,\n                        MediaUrl = campaign.ImageUrl,\n                        Status = result.Success ? \"Sent\" : \"Failed\",\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        RawResponse = result.RawResponse,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        Source = \"campaign\",\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId\n                    });\n\n                    await _billingIngest.IngestFromSendResponseAsync(\n                        businessId: businessId,\n                        messageLogId: logId,\n                        provider: provider,\n                        rawResponseJson: result.RawResponse ?? \"{}\"\n                    );\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = campaignSendLogId,\n                        CampaignId = campaign.Id,\n                        BusinessId = businessId,\n                        ContactId = r.ContactId,\n                        RecipientId = r.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = logId,\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId\n                    });\n\n                    if (result.Success) successCount++; else failureCount++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"📤 Sent to {successCount} recipients. ❌ Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error while sending image template campaign\");\n                return ResponseResult.ErrorInfo(\"🚨 Unexpected error while sending campaign.\", ex.ToString());\n            }\n        }\n\n        private List<object> BuildImageTemplateComponents_Pinnacle(\n       string? imageUrl,\n       List<string> templateParams,\n       List<CampaignButton>? buttonList,\n       TemplateMetadataDto templateMeta,\n       Guid campaignSendLogId,\n       Contact contact,\n       out List<string> resolvedButtonUrls)\n        {\n            var components = new List<object>();\n            resolvedButtonUrls = new List<string>();\n\n            // Header\n            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                new { type = \"image\", image = new { link = imageUrl } }\n                    }\n                });\n            }\n\n            // Body\n            if (templateMeta.PlaceholderCount > 0 && templateParams?.Count > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // Buttons\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            var total = Math.Min(3, Math.Min(buttonList.Count, templateMeta.ButtonParams.Count));\n\n            // phone for optional {{1}}\n            var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber) ? \"\" :\n                        (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n            var encodedPhone = Uri.EscapeDataString(phone);\n\n            for (int i = 0; i < total; i++)\n            {\n                var btn = buttonList[i];\n                var meta = templateMeta.ButtonParams[i];\n                var subtype = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim() ?? string.Empty; // e.g. \"/r/{{1}}\"\n                var isDynamic = metaParam.Contains(\"{{\");\n\n                if (!isDynamic)\n                {\n                    // static provider button at this index — no parameters to send\n                    components.Add(new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subtype,\n                        [\"index\"] = i\n                    });\n                    continue;\n                }\n\n                var valueRaw = btn?.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw)) continue;\n\n                // Optional phone substitution + body params {{n}}\n                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>\n                {\n                    if (!int.TryParse(m.Groups[1].Value, out var n)) return \"\";\n                    if (n == 1) return encodedPhone;\n                    var idx = n - 1;\n                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? \"\") : \"\";\n                });\n\n                // Track + token (same pattern as text path)\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = subtype,\n                    [\"index\"] = i,\n                    [\"parameters\"] = new[] { new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend } }\n                });\n\n                // what the client will actually open once provider composes the URL\n                var providerResolved = ReplaceAllPlaceholdersWith(metaParam, valueToSend);\n                resolvedButtonUrls.Add(providerResolved);\n            }\n\n            return components;\n        }\n\n\n        private List<object> BuildImageTemplateComponents_Meta(\n       string? imageUrl,\n       List<string> templateParams,\n       List<CampaignButton>? buttonList,\n       TemplateMetadataDto templateMeta,\n       Guid campaignSendLogId,\n       Contact contact,\n       out List<string> resolvedButtonUrls)\n        {\n            var components = new List<object>();\n            resolvedButtonUrls = new List<string>();\n\n            // Header\n            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[]\n                    {\n                new { type = \"image\", image = new { link = imageUrl } }\n            }\n                });\n            }\n\n            // Body\n            if (templateMeta.PlaceholderCount > 0 && templateParams?.Count > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // Dynamic URL buttons only\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            var total = Math.Min(3, Math.Min(buttonList.Count, (templateMeta.ButtonParams?.Count() ?? 0)));\n            var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber) ? \"\" :\n                        (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n            var encodedPhone = Uri.EscapeDataString(phone);\n\n            for (int i = 0; i < total; i++)\n            {\n                var meta = templateMeta.ButtonParams[i];\n                var metaParam = meta.ParameterValue?.Trim();\n                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                if (!isDynamic) continue;\n\n                var btn = buttonList[i];\n                var valueRaw = btn.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw)) continue;\n\n                var subtype = (meta.SubType ?? \"url\").ToLowerInvariant();\n\n                // {{n}} substitution ({{1}} := phone)\n                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>\n                {\n                    if (!int.TryParse(m.Groups[1].Value, out var n)) return \"\";\n                    if (n == 1) return encodedPhone;\n                    var idx = n - 1;\n                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? \"\") : \"\";\n                });\n\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = subtype,      // \"url\"\n                    [\"index\"] = i.ToString(), // \"0\"/\"1\"/\"2\" for Meta\n                    [\"parameters\"] = new[] { new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend } }\n                });\n\n                var providerResolved = ReplaceAllPlaceholdersWith(metaParam ?? \"\", valueToSend);\n                resolvedButtonUrls.Add(providerResolved);\n            }\n\n            return components;\n        }\n\n\n\n\n\n\n\n        #endregion\n\n        #endregion\n\n        // Features/CampaignModule/Services/CampaignsService.cs\n\n\n        private List<object> BuildVideoTemplateComponents_Pinnacle(\n            string? videoUrl,\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact)\n        {\n            var components = new List<object>();\n\n            // --- Header (VIDEO) ---\n            // TemplateMetadataDto has no HeaderType/HasVideoHeader → emit header when URL is present.\n            if (!string.IsNullOrWhiteSpace(videoUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                new { type = \"video\", video = new { link = videoUrl } }\n                    }\n                });\n            }\n\n            // --- Body ---\n            var bodyCount = templateMeta?.PlaceholderCount ?? 0;\n            if (templateParams != null && templateParams.Count > 0 && bodyCount > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p ?? string.Empty }).ToArray()\n                });\n            }\n\n            // --- Buttons (URL buttons only; indexes 0..2) ---\n            if (buttonList != null && buttonList.Count > 0)\n            {\n                components.AddRange(BuildPinnacleUrlButtons(buttonList));\n            }\n\n            return components;\n        }\n\n        // Works with either CampaignButton (Type/Value) or CampaignButtonDto (ButtonType/TargetUrl).\n        private static IEnumerable<object> BuildPinnacleUrlButtons(IEnumerable<object> rawButtons)\n        {\n            // keep incoming order; cap at 3\n            var ordered = (rawButtons ?? Enumerable.Empty<object>()).Take(3).ToList();\n            var n = ordered is ICollection<object> col ? col.Count : ordered.Count();\n\n            for (int i = 0; i < n; i++)\n            {\n                var b = ordered[i];\n\n                // Try to read \"Type\" or \"ButtonType\"\n                var typeProp = b.GetType().GetProperty(\"Type\") ?? b.GetType().GetProperty(\"ButtonType\");\n                var typeVal = (typeProp?.GetValue(b) as string)?.Trim().ToLowerInvariant() ?? \"url\";\n                if (typeVal != \"url\") continue;\n\n                // Try to read \"Value\" (CampaignButton) or \"TargetUrl\" (CampaignButtonDto)\n                var valueProp = b.GetType().GetProperty(\"Value\") ?? b.GetType().GetProperty(\"TargetUrl\");\n                var paramText = (valueProp?.GetValue(b) as string) ?? string.Empty;\n\n                // If there is a per-recipient URL param, include it; otherwise emit static URL button (no parameters).\n                if (!string.IsNullOrWhiteSpace(paramText))\n                {\n                    yield return new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i, // 0-based\n                        parameters = new object[]\n                        {\n                    new { type = \"text\", text = paramText }\n                        }\n                    };\n                }\n                else\n                {\n                    yield return new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i\n                    };\n                }\n            }\n        }\n\n        private static List<object> BuildVideoTemplateComponents_Meta(\n                string? videoUrl,\n                List<string>? templateParams,\n                List<CampaignButtonDto>? buttonParams,\n                TemplateMetadataDto? templateMeta)\n        {\n            var components = new List<object>();\n\n            // We’re in the VIDEO sender path, so add header only if a URL is present.\n            if (!string.IsNullOrWhiteSpace(videoUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                new { type = \"video\", video = new { link = videoUrl } }\n                    }\n                });\n            }\n\n            // Body placeholders: use meta.PlaceholderCount if available, otherwise list length.\n            var bodyCount = templateMeta?.PlaceholderCount ?? templateParams?.Count ?? 0;\n            if (bodyCount > 0 && (templateParams?.Count ?? 0) > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams!.Select(p => new { type = \"text\", text = p ?? string.Empty }).ToArray()\n                });\n            }\n\n            // Buttons (URL buttons only). See helper below.\n            if (buttonParams != null && buttonParams.Count > 0)\n            {\n                components.AddRange(BuildMetaTemplateButtons(buttonParams, templateMeta));\n            }\n\n            return components;\n        }\n\n\n        // CampaignButtonDto (your real one)\n\n        private static IEnumerable<object> BuildMetaTemplateButtons(\n            List<CampaignButtonDto> buttons,\n            TemplateMetadataDto? templateMeta)   // meta unused here; kept for future expansion\n        {\n            // Keep incoming order; cap at 3\n            var ordered = (buttons ?? new List<CampaignButtonDto>())\n                .Take(3)\n                .ToList();\n\n            // Avoid Count ambiguity by caching n\n            int n = ordered is ICollection<CampaignButtonDto> col ? col.Count : ordered.Count();\n\n            for (int i = 0; i < n; i++)\n            {\n                var b = ordered[i];\n\n                // Only URL buttons are supported for parameterized Meta buttons\n                var isUrl = string.Equals(b?.ButtonType, \"url\", StringComparison.OrdinalIgnoreCase);\n                if (!isUrl) continue;\n\n                // If we have a per-recipient param (TargetUrl), include a parameter; else emit static button\n                var paramText = b?.TargetUrl ?? string.Empty;\n                var needsParam = !string.IsNullOrWhiteSpace(paramText);\n\n                if (needsParam)\n                {\n                    yield return new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i, // Meta uses 0-based indexes\n                        parameters = new object[]\n                        {\n                    new { type = \"text\", text = paramText }\n                        }\n                    };\n                }\n                else\n                {\n                    yield return new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i\n                    };\n                }\n            }\n        }\n\n\n\n\n        public async Task<List<FlowListItemDto>> GetAvailableFlowsAsync(Guid businessId, bool onlyPublished = true)\n        {\n            return await _context.CTAFlowConfigs\n                .AsNoTracking()\n                .Where(f => f.BusinessId == businessId && f.IsActive && (!onlyPublished || f.IsPublished))\n                .OrderByDescending(f => f.UpdatedAt)\n                .Select(f => new FlowListItemDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    IsPublished = f.IsPublished\n                })\n                .ToListAsync();\n        }\n        // ===================== DRY RUN (Step 2.3) =====================\n\n        public async Task<CampaignDryRunResponseDto> DryRunTemplateCampaignAsync(Guid campaignId, int maxRecipients = 20)\n        {\n            var resp = new CampaignDryRunResponseDto { CampaignId = campaignId };\n\n            // Load campaign + recipients (+Contact +AudienceMember) + buttons\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n                .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)\n                .Include(c => c.MultiButtons)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n            if (campaign == null)\n            {\n                resp.Notes.Add(\"Campaign not found.\");\n                return resp;\n            }\n\n            resp.CampaignType = campaign.CampaignType ?? \"text\";\n\n            // Resolve entry template name from flow if present, else fall back\n            var (_, entryTemplate) = await ResolveFlowEntryAsync(campaign.BusinessId, campaign.CTAFlowConfigId);\n            var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                ? entryTemplate!\n                : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n\n            if (string.IsNullOrWhiteSpace(templateName))\n            {\n                resp.Notes.Add(\"Template name is missing.\");\n                return resp;\n            }\n\n            // Fetch provider template metadata once (language, placeholders, button schema)\n            var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(\n                campaign.BusinessId, templateName, includeButtons: true);\n\n            resp.TemplateName = templateName;\n\n            if (templateMeta == null)\n            {\n                resp.Notes.Add($\"Template metadata not found for business. Name='{templateName}'.\");\n                return resp;\n            }\n\n            resp.Language = (templateMeta.Language ?? \"\").Trim();\n            resp.HasHeaderMedia = templateMeta.HasImageHeader;\n\n            if (string.IsNullOrWhiteSpace(resp.Language))\n                resp.Notes.Add(\"Template language is not specified on metadata.\");\n\n            // Ensure non-null param list for builders (snapshot provided params)\n            var providedParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters)\n                                 ?? new List<string>();\n\n            resp.RequiredPlaceholders = Math.Max(0, templateMeta.PlaceholderCount);\n            resp.ProvidedPlaceholders = providedParams.Count;\n\n            if (resp.RequiredPlaceholders != resp.ProvidedPlaceholders)\n                resp.Notes.Add($\"Placeholder mismatch: template requires {resp.RequiredPlaceholders}, provided {resp.ProvidedPlaceholders}. Consider re-snapshotting parameters.\");\n\n            // Dynamic URL button check (template expects params) vs campaign button values\n            var templButtons = templateMeta.ButtonParams ?? new List<ButtonMetadataDto>();\n            bool templateHasDynamicUrl = templButtons.Any(b =>\n                string.Equals(b.SubType ?? \"url\", \"url\", StringComparison.OrdinalIgnoreCase) &&\n                !string.IsNullOrWhiteSpace(b.ParameterValue) &&\n                b.ParameterValue!.Contains(\"{{\"));\n\n            if (templateHasDynamicUrl)\n            {\n                var hasCampaignUrlValues = (campaign.MultiButtons ?? new List<CampaignButton>())\n                    .Any(cb => !string.IsNullOrWhiteSpace(cb.Value));\n                if (!hasCampaignUrlValues)\n                    resp.Notes.Add(\"Template defines dynamic URL button(s) with placeholders, but campaign has no URL button values configured.\");\n            }\n\n            // Provider normalization for preview\n            var provider = (campaign.Provider ?? \"META_CLOUD\").Trim().ToUpperInvariant();\n            if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n            {\n                resp.Notes.Add($\"Invalid provider on campaign: '{campaign.Provider}'. Dry run will assume META_CLOUD.\");\n                provider = \"META_CLOUD\";\n            }\n\n            // Slice some recipients (prefer latest activity; CreatedAt is not on CampaignRecipient)\n            var recipients = (campaign.Recipients ?? new List<CampaignRecipient>())\n     .OrderByDescending(r => (DateTime?)r.UpdatedAt\n                              ?? r.MaterializedAt\n                              ?? r.SentAt\n                              ?? DateTime.MinValue)\n     .Take(Math.Clamp(maxRecipients, 1, 200))\n     .ToList();\n\n            resp.RecipientsConsidered = recipients.Count;\n\n            // Helper: resolve a phone for a recipient\n            static string? ResolveRecipientPhone(CampaignRecipient r) =>\n                r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;\n\n            int okCount = 0, errCount = 0;\n\n            foreach (var r in recipients)\n            {\n                var phoneResolved = ResolveRecipientPhone(r) ?? \"\";\n                var contactName = r.Contact?.Name ?? r.AudienceMember?.Name;\n\n                var one = new CampaignDryRunRecipientResultDto\n                {\n                    ContactId = r.ContactId,\n                    ContactName = contactName,\n                    PhoneNumber = phoneResolved\n                };\n\n                // Phone checks (presence + basic shape)\n                var phone = (one.PhoneNumber ?? string.Empty).Trim();\n                if (string.IsNullOrEmpty(phone))\n                {\n                    one.Errors.Add(\"Recipient phone missing (no Contact and no AudienceMember phone).\");\n                }\n                else if (!Regex.IsMatch(phone, @\"^\\+?\\d{8,15}$\"))\n                {\n                    one.Warnings.Add(\"Recipient phone may be invalid (basic format check failed).\");\n                }\n\n                try\n                {\n                    // Always synthesize a contact to avoid null derefs in builders\n                    var contactForTemplating = r.Contact ?? new Contact\n                    {\n                        Id = Guid.Empty,\n                        BusinessId = campaign.BusinessId,\n                        PhoneNumber = phoneResolved,\n                        Name = contactName ?? \"Customer\"\n                    };\n\n                    // Buttons ordered like send path: by Position then original index; limit 3\n                    var buttons = (campaign.MultiButtons ?? new List<CampaignButton>())\n                        .Select((b, idx) => new { Btn = b, idx })\n                        .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                        .ThenBy(x => x.idx)\n                        .Select(x => x.Btn)\n                        .Take(3)\n                        .ToList();\n\n                    // Build components for preview (match send path) — single call, discard out URLs\n                    List<object> components;\n                    var isImage = (campaign.CampaignType ?? \"text\")\n                        .Equals(\"image\", StringComparison.OrdinalIgnoreCase);\n\n                    if (isImage)\n                    {\n                        components = (provider == \"PINNACLE\")\n                            ? BuildImageTemplateComponents_Pinnacle(\n                                campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _)\n                            : BuildImageTemplateComponents_Meta(\n                                campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _);\n                    }\n                    else\n                    {\n                        components = (provider == \"PINNACLE\")\n                            ? BuildTextTemplateComponents_Pinnacle(\n                                providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _)\n                            : BuildTextTemplateComponents_Meta(\n                                providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _);\n                    }\n\n                    // Additional validations like the send path: blank required params\n                    if (templateMeta.PlaceholderCount > 0 &&\n                        (providedParams.Count < templateMeta.PlaceholderCount ||\n                         providedParams.Take(templateMeta.PlaceholderCount).Any(string.IsNullOrWhiteSpace)))\n                    {\n                        one.Errors.Add($\"Missing body parameter(s): template requires {templateMeta.PlaceholderCount}, provided {providedParams.Count} (or some blank).\");\n                    }\n\n                    one.ProviderComponents = components;\n                    one.WouldSend = one.Errors.Count == 0;\n                    if (one.WouldSend) okCount++; else errCount++;\n                }\n                catch (Exception ex)\n                {\n                    one.Errors.Add(ex.Message);\n                    one.WouldSend = false;\n                    errCount++;\n                }\n\n                resp.Results.Add(one);\n            }\n\n            resp.WouldSendCount = okCount;\n            resp.ErrorCount = errCount;\n\n            // Billability (best-effort)\n            resp.EstimatedChargeable = true;\n            resp.EstimatedConversationCategory = \"template_outbound\";\n            if (!resp.Notes.Any(n => n.Contains(\"Template messages are typically chargeable\")))\n                resp.Notes.Add(\"Estimation: Template messages are typically chargeable and start a new conversation unless covered by free-entry flows.\");\n\n            return resp;\n        }\n\n        //public async Task<CampaignDryRunResponseDto> DryRunTemplateCampaignAsync(Guid campaignId, int maxRecipients = 20)\n        //{\n        //    var resp = new CampaignDryRunResponseDto { CampaignId = campaignId };\n\n        //    // Load campaign + recipients (+Contact +AudienceMember) + buttons\n        //    var campaign = await _context.Campaigns\n        //        .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n        //        .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)\n        //        .Include(c => c.MultiButtons)\n        //        .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n        //    if (campaign == null)\n        //    {\n        //        resp.Notes.Add(\"Campaign not found.\");\n        //        return resp;\n        //    }\n\n        //    resp.CampaignType = campaign.CampaignType ?? \"text\";\n\n        //    // Resolve entry template name from flow if present, else fall back\n        //    var (_, entryTemplate) = await ResolveFlowEntryAsync(campaign.BusinessId, campaign.CTAFlowConfigId);\n        //    var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n        //        ? entryTemplate!\n        //        : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n\n        //    if (string.IsNullOrWhiteSpace(templateName))\n        //    {\n        //        resp.Notes.Add(\"Template name is missing.\");\n        //        return resp;\n        //    }\n\n        //    // Fetch provider template metadata once (language, placeholders, button schema)\n        //    var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(\n        //        campaign.BusinessId, templateName, includeButtons: true);\n\n        //    resp.TemplateName = templateName;\n\n        //    if (templateMeta == null)\n        //    {\n        //        resp.Notes.Add($\"Template metadata not found for business. Name='{templateName}'.\");\n        //        return resp;\n        //    }\n\n        //    resp.Language = (templateMeta.Language ?? \"\").Trim();\n        //    resp.HasHeaderMedia = templateMeta.HasImageHeader;\n\n        //    if (string.IsNullOrWhiteSpace(resp.Language))\n        //        resp.Notes.Add(\"Template language is not specified on metadata.\");\n\n        //    // Ensure non-null param list for builders (snapshot provided params)\n        //    var providedParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters)\n        //                         ?? new List<string>();\n\n        //    resp.RequiredPlaceholders = Math.Max(0, templateMeta.PlaceholderCount);\n        //    resp.ProvidedPlaceholders = providedParams.Count;\n\n        //    if (resp.RequiredPlaceholders != resp.ProvidedPlaceholders)\n        //        resp.Notes.Add($\"Placeholder mismatch: template requires {resp.RequiredPlaceholders}, provided {resp.ProvidedPlaceholders}. Consider re-snapshotting parameters.\");\n\n        //    // Dynamic URL button check (template expects params) vs campaign button values\n        //    var templButtons = templateMeta.ButtonParams ?? new List<ButtonMetadataDto>();\n        //    bool templateHasDynamicUrl = templButtons.Any(b =>\n        //        string.Equals(b.SubType ?? \"url\", \"url\", StringComparison.OrdinalIgnoreCase) &&\n        //        !string.IsNullOrWhiteSpace(b.ParameterValue) &&\n        //        b.ParameterValue!.Contains(\"{{\"));\n\n        //    if (templateHasDynamicUrl)\n        //    {\n        //        var hasCampaignUrlValues = (campaign.MultiButtons ?? new List<CampaignButton>())\n        //            .Any(cb => !string.IsNullOrWhiteSpace(cb.Value));\n        //        if (!hasCampaignUrlValues)\n        //            resp.Notes.Add(\"Template defines dynamic URL button(s) with placeholders, but campaign has no URL button values configured.\");\n        //    }\n\n        //    // Provider normalization for preview\n        //    var provider = (campaign.Provider ?? \"META_CLOUD\").Trim().ToUpperInvariant();\n        //    if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n        //    {\n        //        resp.Notes.Add($\"Invalid provider on campaign: '{campaign.Provider}'. Dry run will assume META_CLOUD.\");\n        //        provider = \"META_CLOUD\";\n        //    }\n\n        //    // Slice some recipients (prefer most recently updated)\n        //    var recipients = (campaign.Recipients ?? new List<CampaignRecipient>())\n        //        .OrderByDescending(r => r.UpdatedAt ?? r.CreatedAt)\n        //        .Take(Math.Clamp(maxRecipients, 1, 200))\n        //        .ToList();\n\n        //    resp.RecipientsConsidered = recipients.Count;\n\n        //    // Helper: resolve a phone for a recipient\n        //    static string? ResolveRecipientPhone(CampaignRecipient r) =>\n        //        r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;\n\n        //    int okCount = 0, errCount = 0;\n\n        //    foreach (var r in recipients)\n        //    {\n        //        var phoneResolved = ResolveRecipientPhone(r) ?? \"\";\n        //        var contactName = r.Contact?.Name ?? r.AudienceMember?.Name;\n\n        //        var one = new CampaignDryRunRecipientResultDto\n        //        {\n        //            ContactId = r.ContactId,\n        //            ContactName = contactName,\n        //            PhoneNumber = phoneResolved\n        //        };\n\n        //        // Phone checks (presence + basic shape)\n        //        var phone = (one.PhoneNumber ?? string.Empty).Trim();\n        //        if (string.IsNullOrEmpty(phone))\n        //        {\n        //            one.Errors.Add(\"Recipient phone missing (no Contact and no AudienceMember phone).\");\n        //        }\n        //        else if (!Regex.IsMatch(phone, @\"^\\+?\\d{8,15}$\"))\n        //        {\n        //            one.Warnings.Add(\"Recipient phone may be invalid (basic format check failed).\");\n        //        }\n\n        //        try\n        //        {\n        //            // Always synthesize a contact to avoid null derefs in builders\n        //            var contactForTemplating = r.Contact ?? new Contact\n        //            {\n        //                Id = Guid.Empty,\n        //                BusinessId = campaign.BusinessId,\n        //                PhoneNumber = phoneResolved,\n        //                Name = contactName ?? \"Customer\"\n        //            };\n\n        //            // Buttons ordered like send path: by Position then original index; limit 3\n        //            var buttons = (campaign.MultiButtons ?? new List<CampaignButton>())\n        //                .Select((b, idx) => new { Btn = b, idx })\n        //                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n        //                .ThenBy(x => x.idx)\n        //                .Select(x => x.Btn)\n        //                .Take(3)\n        //                .ToList();\n\n        //            // Build components for preview (match send path)\n        //            List<object> components;\n        //            var isImage = (campaign.CampaignType ?? \"text\")\n        //                .Equals(\"image\", StringComparison.OrdinalIgnoreCase);\n\n        //            if (isImage)\n        //            {\n        //                // use the image builders; discard resolvedButtonUrls for dry run\n        //                _ = (provider == \"PINNACLE\")\n        //                    ? BuildImageTemplateComponents_Pinnacle(\n        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _)\n        //                    : BuildImageTemplateComponents_Meta(\n        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _);\n\n        //                // We need the components object; the builders return it\n        //                components = (provider == \"PINNACLE\")\n        //                    ? BuildImageTemplateComponents_Pinnacle(\n        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var __)\n        //                    : BuildImageTemplateComponents_Meta(\n        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var ___);\n        //            }\n        //            else\n        //            {\n        //                components = (provider == \"PINNACLE\")\n        //                    ? BuildTextTemplateComponents_Pinnacle(\n        //                        providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _)\n        //                    : BuildTextTemplateComponents_Meta(\n        //                        providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _);\n        //            }\n\n        //            // Additional validations like the send path: blank required params\n        //            if (templateMeta.PlaceholderCount > 0 &&\n        //                (providedParams.Count < templateMeta.PlaceholderCount ||\n        //                 providedParams.Take(templateMeta.PlaceholderCount).Any(string.IsNullOrWhiteSpace)))\n        //            {\n        //                one.Errors.Add($\"Missing body parameter(s): template requires {templateMeta.PlaceholderCount}, provided {providedParams.Count} (or some blank).\");\n        //            }\n\n        //            one.ProviderComponents = components;\n        //            one.WouldSend = one.Errors.Count == 0;\n        //            if (one.WouldSend) okCount++; else errCount++;\n        //        }\n        //        catch (Exception ex)\n        //        {\n        //            one.Errors.Add(ex.Message);\n        //            one.WouldSend = false;\n        //            errCount++;\n        //        }\n\n        //        resp.Results.Add(one);\n        //    }\n\n        //    resp.WouldSendCount = okCount;\n        //    resp.ErrorCount = errCount;\n\n        //    // Billability (best-effort)\n        //    resp.EstimatedChargeable = true;\n        //    resp.EstimatedConversationCategory = \"template_outbound\";\n        //    if (!resp.Notes.Any(n => n.Contains(\"Template messages are typically chargeable\")))\n        //        resp.Notes.Add(\"Estimation: Template messages are typically chargeable and start a new conversation unless covered by free-entry flows.\");\n\n        //    return resp;\n        //}\n\n        // in your CampaignService (same file as SendVideoTemplateCampaignAsync)\n        private static List<CampaignButtonDto> MapButtonVarsToButtonDtos(Dictionary<string, string>? vars)\n        {\n            var list = new List<CampaignButtonDto>();\n            if (vars == null || vars.Count == 0) return list;\n\n            // We only care about URL buttons 1..3; take the param text\n            for (var i = 1; i <= 3; i++)\n            {\n                if (vars.TryGetValue($\"button{i}.url_param\", out var param) && !string.IsNullOrWhiteSpace(param))\n                {\n                    list.Add(new CampaignButtonDto\n                    {\n                        ButtonText = $\"Button {i}\",   // optional; purely cosmetic\n                        ButtonType = \"url\",\n                        TargetUrl = param\n                    });\n                }\n            }\n            return list;\n        }\n        private async Task<ResponseResult> SendDocumentTemplateCampaignAsync(Campaign campaign)\n        {\n            var sw = System.Diagnostics.Stopwatch.StartNew();\n            _logger.LogInformation(\"[DocSend] Begin. campaignId={CampaignId}\", campaign.Id);\n\n            // force an IEnumerable → List and use a distinct name to avoid symbol collisions\n            var recipientsList = (campaign.Recipients ?? Enumerable.Empty<CampaignRecipient>())\n                    .Where(r =>\n                    !string.IsNullOrWhiteSpace(r.Contact?.PhoneNumber) ||\n                    !string.IsNullOrWhiteSpace(r.AudienceMember?.PhoneE164))\n                         .ToList();\n\n            // Use Any() (robust even if someone shadows Count somewhere)\n            if (!recipientsList.Any())\n                return ResponseResult.ErrorInfo(\"⚠️ No valid recipients with phone numbers.\");\n\n            var templateName = campaign.MessageTemplate;\n            var languageCode = \"en_US\"; // keep consistent with your image/video path\n            var provider = (campaign.Provider ?? \"META\").ToUpperInvariant();\n            var phoneNumberId = campaign.PhoneNumberId;\n\n            // optional static fallback (we don't have Campaign.DocumentUrl in this branch)\n            var staticDocUrl = campaign.ImageUrl;\n\n            var ok = 0; var fail = 0;\n\n            foreach (var r in recipientsList)\n            {\n                var to = r.Contact?.PhoneNumber ?? r.AudienceMember?.PhoneE164 ?? \"\";\n                if (string.IsNullOrWhiteSpace(to)) continue;\n\n                try\n                {\n                    // These helpers were added earlier:\n                    var templateParams = BuildBodyParametersForRecipient(campaign, r);\n                    var buttonVars = BuildButtonParametersForRecipient(campaign, r);\n                    var buttonsDto = MapButtonVarsToButtonDtos(buttonVars);\n                    // Per-recipient doc header; no campaign-level DocumentUrl in this branch\n                    var headerDocUrl = ResolvePerRecipientValue(r, \"header.document_url\") ?? staticDocUrl;\n\n                    var dto = new DocumentTemplateMessageDto\n                    {\n                        BusinessId = campaign.BusinessId,\n                        RecipientNumber = to,\n                        TemplateName = templateName,\n                        LanguageCode = languageCode,\n                        HeaderDocumentUrl = headerDocUrl,\n                        // match your DTO property names exactly — use the ones your MessageEngine expects:\n                        Parameters = templateParams,   // or TemplateParameters if that's your DTO\n                        Buttons = buttonsDto,      // or ButtonParameters if that's your DTO\n                        Provider = provider,\n                        PhoneNumberId = phoneNumberId,\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        TemplateBody = campaign.MessageBody\n                    };\n\n                    var sent = await _messageEngineService.SendDocumentTemplateMessageAsync(dto, campaign.BusinessId);\n                    var success = sent.Success;\n\n                    if (success) ok++; else fail++;\n\n                    await LogSendAsync(campaign, r, to, provider, success, headerDocUrl, \"document\");\n                    _logger.LogInformation(\"[DocSend] to={To} success={Success}\", to, success);\n                }\n                catch (Exception ex)\n                {\n                    fail++;\n                    _logger.LogError(ex, \"[DocSend] failed to={To}\", to);\n                    await LogSendAsync(campaign, r, to, provider, false, staticDocUrl, \"document\", ex.Message);\n                }\n            }\n\n            sw.Stop();\n            var msg = $\"Document campaign finished. Success={ok}, Failed={fail}\";\n            _logger.LogInformation(\"[DocSend] Done. campaignId={CampaignId} {Msg}\", campaign.Id, msg);\n\n            return fail == 0 ? ResponseResult.SuccessInfo(msg) : ResponseResult.ErrorInfo(msg);\n        }\n        private Task LogSendAsync(\n                    Campaign campaign,\n                    CampaignRecipient recipient,\n                    string to,\n                    string provider,\n                    bool success,\n                    string? headerUrl,\n                    string channel,\n                    string? error = null)\n        {\n            _logger.LogInformation(\n                \"[SendLog] campaignId={CampaignId} to={To} provider={Provider} channel={Channel} success={Success} headerUrl={HeaderUrl} error={Error}\",\n                campaign.Id, to, provider, channel, success, headerUrl, error);\n\n            // If/when you have a CampaignSendLogs table, insert there instead.\n            return Task.CompletedTask;\n        }\n\n\n\n        private static string[] ReadResolvedParams(CampaignRecipient r)\n        {\n            var s = r?.ResolvedParametersJson;\n            if (string.IsNullOrWhiteSpace(s)) return Array.Empty<string>();\n            try\n            {\n                return JsonConvert.DeserializeObject<string[]>(s) ?? Array.Empty<string>();\n            }\n            catch\n            {\n                return Array.Empty<string>();\n            }\n        }\n\n        private static Dictionary<string, string> ReadResolvedButtonVars(CampaignRecipient r)\n        {\n            var s = r?.ResolvedButtonUrlsJson;\n            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            if (string.IsNullOrWhiteSpace(s)) return dict;\n            try\n            {\n                return JsonConvert.DeserializeObject<Dictionary<string, string>>(s)\n                       ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n            catch\n            {\n                return dict;\n            }\n        }\n\n        // Optional: unified accessor for header media (image/video/document) if your materializer\n        // saved canonical keys like \"header.image_url\" / \"header.video_url\" / \"header.document_url\".\n        private static string? TryGetHeaderMedia(Dictionary<string, string> vars, params string[] keys)\n        {\n            foreach (var k in keys)\n                if (!string.IsNullOrWhiteSpace(k) && vars.TryGetValue(k, out var v) && !string.IsNullOrWhiteSpace(v))\n                    return v;\n            return null;\n        }\n\n        public Task<object> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId)\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CsvBatchService.cs",
      "sha256": "3f6e3483135477a09f20045397e8dacd67a732221abec7b0e9525164c0ef6c5a",
      "language": "csharp",
      "size": 47608,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CsvBatchService : ICsvBatchService\n    {\n        private readonly AppDbContext _db;\n\n        public CsvBatchService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // ----------------------------\n        // Upload + ingest\n        // ----------------------------\n        public async Task<CsvBatchUploadResultDto> CreateAndIngestAsync(\n            Guid businessId,\n            string fileName,\n            Stream stream,\n            Guid? audienceId = null,\n            CancellationToken ct = default)\n        {\n            // 1) Create batch shell\n            var batch = new CsvBatch\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                AudienceId = audienceId,          // nullable by design (ok if null)\n                FileName = fileName,\n                CreatedAt = DateTime.UtcNow,\n                Status = \"ingesting\",\n                RowCount = 0,\n                SkippedCount = 0,\n                HeadersJson = null\n            };\n\n            _db.CsvBatches.Add(batch);\n            await _db.SaveChangesAsync(ct);\n\n            try\n            {\n                // 2) Parse headers + rows (robust CSV parsing)\n                stream.Position = 0;\n                using var reader = new StreamReader(stream, Encoding.UTF8, detectEncodingFromByteOrderMarks: true, bufferSize: 1024, leaveOpen: true);\n\n                string? headerLine = await reader.ReadLineAsync();\n                if (string.IsNullOrWhiteSpace(headerLine))\n                {\n                    // No header line → fall back to single \"phone\" column\n                    var headers = new List<string> { \"phone\" };\n                    batch.HeadersJson = JsonSerializer.Serialize(headers);\n                    batch.Status = \"ready\";\n                    await _db.SaveChangesAsync(ct);\n\n                    Log.Warning(\"CSV had no header line. Created batch {BatchId} with fallback 'phone' header.\", batch.Id);\n\n                    return new CsvBatchUploadResultDto\n                    {\n                        BatchId = batch.Id,\n                        AudienceId = batch.AudienceId,\n                        FileName = batch.FileName ?? string.Empty,\n                        RowCount = 0,\n                        Headers = headers\n                    };\n                }\n\n                var delim = DetectDelimiter(headerLine);\n                var headersParsed = ParseCsvLine(headerLine, delim)\n                    .Select(h => h.Trim())\n                    .Where(h => !string.IsNullOrEmpty(h))\n                    .ToList();\n\n                if (headersParsed.Count == 0)\n                    headersParsed = new List<string> { \"phone\" };\n\n                batch.HeadersJson = JsonSerializer.Serialize(headersParsed);\n                await _db.SaveChangesAsync(ct);\n\n                // 3) Stream rows into CsvRows\n                var rowsBuffer = new List<CsvRow>(capacity: 1024);\n                int rowIndex = 0;\n\n                while (!reader.EndOfStream)\n                {\n                    var line = await reader.ReadLineAsync();\n                    if (line is null) break;\n                    if (string.IsNullOrWhiteSpace(line)) continue;\n\n                    var cols = ParseCsvLine(line, delim);\n\n                    var dict = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);\n                    for (int i = 0; i < headersParsed.Count; i++)\n                    {\n                        var key = headersParsed[i];\n                        var val = i < cols.Count ? cols[i]?.Trim() : null;\n                        dict[key] = val;\n                    }\n\n                    rowsBuffer.Add(new CsvRow\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,           // IMPORTANT for later queries\n                        BatchId = batch.Id,\n                        RowIndex = rowIndex++,\n                        DataJson = JsonSerializer.Serialize(dict)\n                    });\n\n                    if (rowsBuffer.Count >= 1000)\n                    {\n                        _db.CsvRows.AddRange(rowsBuffer);\n                        await _db.SaveChangesAsync(ct);\n                        rowsBuffer.Clear();\n                    }\n                }\n\n                if (rowsBuffer.Count > 0)\n                {\n                    _db.CsvRows.AddRange(rowsBuffer);\n                    await _db.SaveChangesAsync(ct);\n                    rowsBuffer.Clear();\n                }\n\n                batch.RowCount = rowIndex;\n                batch.Status = \"ready\";\n                await _db.SaveChangesAsync(ct);\n\n                Log.Information(\"CsvBatch {BatchId} ingested: {Rows} rows; headers={HeaderCount}\", batch.Id, batch.RowCount, headersParsed.Count);\n\n                return new CsvBatchUploadResultDto\n                {\n                    BatchId = batch.Id,\n                    AudienceId = batch.AudienceId,\n                    FileName = batch.FileName ?? string.Empty,\n                    RowCount = batch.RowCount,\n                    Headers = headersParsed\n                };\n            }\n            catch (Exception ex)\n            {\n                batch.Status = \"failed\";\n                batch.ErrorMessage = ex.Message;\n                await _db.SaveChangesAsync(ct);\n                Log.Error(ex, \"CSV ingest failed for batch {BatchId}\", batch.Id);\n                throw;\n            }\n        }\n\n        // ----------------------------\n        // Batch info\n        // ----------------------------\n        private async Task<CsvBatchUploadResultDto> IngestCoreAsync(\n            Guid businessId,\n            string fileName,\n            Stream stream,\n            CancellationToken ct)\n        {\n            // Minimal “stage only” helper (kept in case other code calls it)\n            var batch = new CsvBatch\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                FileName = fileName,\n                CreatedAt = DateTime.UtcNow,\n                Status = \"ready\",\n                HeadersJson = null,\n                RowCount = 0,\n                SkippedCount = 0,\n                ErrorMessage = null\n            };\n            _db.CsvBatches.Add(batch);\n            await _db.SaveChangesAsync(ct);\n\n            Log.Information(\"CsvBatch {BatchId} staged for business {Biz}\", batch.Id, businessId);\n\n            return new CsvBatchUploadResultDto\n            {\n                BatchId = batch.Id,\n                AudienceId = null,\n                FileName = fileName,\n                RowCount = 0,\n                Headers = new List<string>(),\n                Message = \"CSV batch created.\"\n            };\n        }\n\n        public async Task<CsvBatchInfoDto?> GetBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)\n        {\n            var batch = await _db.CsvBatches\n                .AsNoTracking()\n                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n\n            if (batch == null) return null;\n\n            var headers = SafeParseHeaderArray(batch.HeadersJson);\n\n            return new CsvBatchInfoDto\n            {\n                BatchId = batch.Id,\n                AudienceId = batch.AudienceId,\n                RowCount = batch.RowCount,\n                Headers = headers,\n                CreatedAt = batch.CreatedAt\n            };\n        }\n\n        // ----------------------------\n        // Samples (single implementation)\n        // ----------------------------\n        public async Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(\n            Guid businessId,\n            Guid batchId,\n            int take = 20,\n            CancellationToken ct = default)\n        {\n            if (take <= 0) take = 20;\n            if (take > 100) take = 100;\n\n            var batch = await _db.CsvBatches\n                .AsNoTracking()\n                .Where(b => b.Id == batchId && b.BusinessId == businessId)\n                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })\n                .FirstOrDefaultAsync(ct);\n\n            if (batch is null)\n                throw new KeyNotFoundException(\"Batch not found.\");\n\n            // If no rows yet, return empty samples gracefully\n            if (batch.RowCount <= 0)\n                return Array.Empty<CsvRowSampleDto>();\n\n            var headerList = SafeParseHeaderArray(batch.HeadersJson);\n\n            var rows = await _db.CsvRows\n                .AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n                .OrderBy(r => r.RowIndex)\n                .Take(take)\n                .Select(r => new { r.RowIndex, r.DataJson })\n                .ToListAsync(ct);\n\n            var result = new List<CsvRowSampleDto>(rows.Count);\n            foreach (var r in rows)\n            {\n                var dict = SafeParseDict(r.DataJson);\n\n                // Ensure consistent header order (fill missing with null)\n                var ordered = new Dictionary<string, string?>(headerList.Count, StringComparer.OrdinalIgnoreCase);\n                foreach (var h in headerList)\n                {\n                    dict.TryGetValue(h, out var v);\n                    ordered[h] = v;\n                }\n\n                result.Add(new CsvRowSampleDto\n                {\n                    RowIndex = r.RowIndex,\n                    Data = ordered\n                });\n            }\n\n            return result;\n        }\n\n        // ----------------------------\n        // List / Page / Delete / Validate\n        // ----------------------------\n        public async Task<List<CsvBatchListItemDto>> ListBatchesAsync(Guid businessId, int limit = 20, CancellationToken ct = default)\n        {\n            if (limit <= 0) limit = 20;\n            if (limit > 100) limit = 100;\n\n            return await _db.CsvBatches\n                .AsNoTracking()\n                .Where(b => b.BusinessId == businessId)\n                .OrderByDescending(b => b.CreatedAt)\n                .Take(limit)\n                .Select(b => new CsvBatchListItemDto\n                {\n                    BatchId = b.Id,\n                    FileName = b.FileName,\n                    RowCount = b.RowCount,\n                    Status = b.Status,\n                    CreatedAt = b.CreatedAt\n                })\n                .ToListAsync(ct);\n        }\n\n        public async Task<CsvBatchRowsPageDto> GetRowsPageAsync(Guid businessId, Guid batchId, int skip, int take, CancellationToken ct = default)\n        {\n            if (take <= 0) take = 50;\n            if (take > 200) take = 200;\n            if (skip < 0) skip = 0;\n\n            var exists = await _db.CsvBatches.AsNoTracking()\n                .AnyAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n            if (!exists) throw new KeyNotFoundException(\"CSV batch not found.\");\n\n            var total = await _db.CsvRows.AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n                .CountAsync(ct);\n\n            var rows = await _db.CsvRows.AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n                .OrderBy(r => r.RowIndex)\n                .Skip(skip)\n                .Take(take)\n                .Select(r => new CsvRowSampleDto\n                {\n                    RowIndex = r.RowIndex,\n                    Data = SafeParseDict(r.DataJson)\n                })\n                .ToListAsync(ct);\n\n            return new CsvBatchRowsPageDto\n            {\n                BatchId = batchId,\n                TotalRows = total,\n                Skip = skip,\n                Take = take,\n                Rows = rows\n            };\n        }\n\n        public async Task<bool> DeleteBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)\n        {\n            var batch = await _db.CsvBatches\n                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n\n            if (batch == null) return false;\n\n            using var tx = await _db.Database.BeginTransactionAsync(ct);\n            try\n            {\n                var rows = _db.CsvRows.Where(r => r.BusinessId == businessId && r.BatchId == batchId);\n                _db.CsvRows.RemoveRange(rows);\n\n                _db.CsvBatches.Remove(batch);\n\n                await _db.SaveChangesAsync(ct);\n                await tx.CommitAsync(ct);\n                return true;\n            }\n            catch\n            {\n                await tx.RollbackAsync(ct);\n                throw;\n            }\n        }\n\n        private static readonly string[] PhoneHeaderCandidates =\n        { \"phone\", \"mobile\", \"whatsapp\", \"msisdn\", \"whatsapp_number\", \"contact\", \"contact_number\" };\n\n        public async Task<CsvBatchValidationResultDto> ValidateAsync(\n            Guid businessId,\n            Guid batchId,\n            CsvBatchValidationRequestDto request,\n            CancellationToken ct = default)\n        {\n            if (request is null) throw new ArgumentNullException(nameof(request));\n            if (request.SampleSize <= 0) request.SampleSize = 20;\n            if (request.SampleSize > 100) request.SampleSize = 100;\n\n            var batch = await _db.CsvBatches.AsNoTracking()\n                .Where(b => b.BusinessId == businessId && b.Id == batchId)\n                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })\n                .FirstOrDefaultAsync(ct);\n\n            if (batch == null) throw new KeyNotFoundException(\"CSV batch not found.\");\n\n            var headers = SafeParseHeaderArray(batch.HeadersJson);\n            var headerSet = new HashSet<string>(headers, StringComparer.OrdinalIgnoreCase);\n\n            var result = new CsvBatchValidationResultDto\n            {\n                BatchId = batchId,\n                TotalRows = batch.RowCount\n            };\n\n            // Required headers check\n            if (request.RequiredHeaders != null && request.RequiredHeaders.Count > 0)\n            {\n                foreach (var req in request.RequiredHeaders)\n                {\n                    if (!headerSet.Contains(req))\n                        result.MissingRequiredHeaders.Add(req);\n                }\n\n                if (result.MissingRequiredHeaders.Count > 0)\n                    result.Errors.Add(\"Required headers are missing.\");\n            }\n\n            // Determine phone field\n            var phoneField = request.PhoneField;\n            if (string.IsNullOrWhiteSpace(phoneField))\n                phoneField = PhoneHeaderCandidates.FirstOrDefault(headerSet.Contains);\n\n            result.PhoneField = phoneField;\n\n            if (string.IsNullOrWhiteSpace(phoneField))\n            {\n                result.Errors.Add(\"No phone field provided or detected.\");\n                return result; // cannot scan rows without a phone column\n            }\n\n            // Scan rows for phone presence & duplicates\n            var seenPhones = new HashSet<string>(StringComparer.Ordinal);\n            var problemSamples = new List<CsvRowSampleDto>();\n\n            var rowsQuery = _db.CsvRows.AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n                .OrderBy(r => r.RowIndex)\n                .Select(r => new { r.RowIndex, r.DataJson });\n\n            await foreach (var row in rowsQuery.AsAsyncEnumerable().WithCancellation(ct))\n            {\n                var dict = SafeParseDict(row.DataJson);\n                dict.TryGetValue(phoneField, out var rawPhone);\n\n                var normalized = NormalizePhoneMaybe(rawPhone, request.NormalizePhones);\n\n                var isProblem = false;\n\n                if (string.IsNullOrWhiteSpace(normalized))\n                {\n                    result.MissingPhoneCount++;\n                    isProblem = true;\n                }\n                else if (request.Deduplicate && !seenPhones.Add(normalized))\n                {\n                    result.DuplicatePhoneCount++;\n                    isProblem = true;\n                }\n\n                if (isProblem && problemSamples.Count < request.SampleSize)\n                {\n                    problemSamples.Add(new CsvRowSampleDto\n                    {\n                        RowIndex = row.RowIndex,\n                        Data = dict\n                    });\n                }\n            }\n\n            result.ProblemSamples = problemSamples;\n\n            if (result.MissingPhoneCount > 0)\n                result.Errors.Add(\"Some rows are missing phone numbers.\");\n            if (result.DuplicatePhoneCount > 0)\n                result.Warnings.Add(\"Duplicate phone numbers detected (after normalization).\");\n\n            return result;\n        }\n\n        // ----------------------------\n        // helpers\n        // ----------------------------\n        private static List<string> SafeParseHeaderArray(string? json)\n        {\n            try\n            {\n                return string.IsNullOrWhiteSpace(json)\n                    ? new List<string>()\n                    : (JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>());\n            }\n            catch { return new List<string>(); }\n        }\n\n        private static Dictionary<string, string?> SafeParseDict(string? json)\n        {\n            try\n            {\n                return string.IsNullOrWhiteSpace(json)\n                    ? new Dictionary<string, string?>()\n                    : (JsonSerializer.Deserialize<Dictionary<string, string?>>(json) ??\n                       new Dictionary<string, string?>());\n            }\n            catch { return new Dictionary<string, string?>(); }\n        }\n\n        private static char DetectDelimiter(string headerLine)\n        {\n            var candidates = new[] { ',', ';', '\\t' };\n            var counts = candidates.Select(c => (c, count: headerLine.Count(ch => ch == c))).ToList();\n            var best = counts.OrderByDescending(x => x.count).First();\n            return best.count > 0 ? best.c : ',';\n        }\n\n        /// <summary>\n        /// CSV parser with delimiter support: handles commas/semicolons/tabs, double quotes,\n        /// and escaped quotes (\"\"). It does NOT support embedded newlines inside quoted fields.\n        /// </summary>\n        private static List<string> ParseCsvLine(string line, char delimiter)\n        {\n            var result = new List<string>();\n            if (line == null) return result;\n\n            var sb = new StringBuilder();\n            bool inQuotes = false;\n\n            for (int i = 0; i < line.Length; i++)\n            {\n                var c = line[i];\n\n                if (inQuotes)\n                {\n                    if (c == '\"')\n                    {\n                        // Handle escaped quote \"\"\n                        if (i + 1 < line.Length && line[i + 1] == '\"')\n                        {\n                            sb.Append('\"');\n                            i++;\n                        }\n                        else\n                        {\n                            inQuotes = false;\n                        }\n                    }\n                    else\n                    {\n                        sb.Append(c);\n                    }\n                }\n                else\n                {\n                    if (c == delimiter)\n                    {\n                        result.Add(sb.ToString());\n                        sb.Clear();\n                    }\n                    else if (c == '\"')\n                    {\n                        inQuotes = true;\n                    }\n                    else\n                    {\n                        sb.Append(c);\n                    }\n                }\n            }\n\n            result.Add(sb.ToString());\n            return result;\n        }\n\n        private static string? NormalizePhoneMaybe(string? raw, bool normalize)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var trimmed = raw.Trim();\n            if (!normalize) return trimmed;\n\n            var digits = Regex.Replace(trimmed, \"[^0-9]\", \"\");\n            digits = digits.TrimStart('0');\n\n            // Heuristic for India: add 91 for 10-digit local numbers\n            if (digits.Length == 10) digits = \"91\" + digits;\n\n            return digits.Length >= 10 ? digits : trimmed;\n        }\n    }\n}\n\n\n//using System;\n//using System.Collections.Generic;\n//using System.IO;\n//using System.Linq;\n//using System.Text;\n//using System.Text.Json;\n//using System.Text.RegularExpressions;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Serilog;\n//using xbytechat.api;\n//using xbytechat.api.Features.CampaignModule.DTOs;\n//using xbytechat.api.Features.CampaignModule.Models;\n\n//namespace xbytechat.api.Features.CampaignModule.Services\n//{\n//    public class CsvBatchService : ICsvBatchService\n//    {\n//        private readonly AppDbContext _db;\n\n//        public CsvBatchService(AppDbContext db)\n//        {\n//            _db = db;\n//        }\n\n//        // ----------------------------\n//        // Upload + ingest\n//        // ----------------------------\n//        public async Task<CsvBatchUploadResultDto> CreateAndIngestAsync(\n//             Guid businessId,\n//             string fileName,\n//             Stream stream,\n//             Guid? audienceId = null,\n//             CancellationToken ct = default)\n//        {\n//            // 1) Create batch shell\n//            var batch = new CsvBatch\n//            {\n//                Id = Guid.NewGuid(),\n//                BusinessId = businessId,\n//                AudienceId = audienceId,          // nullable by design (ok if null)\n//                FileName = fileName,\n//                CreatedAt = DateTime.UtcNow,\n//                Status = \"ingesting\",\n//                RowCount = 0,\n//                SkippedCount = 0,\n//                HeadersJson = null\n//            };\n\n//            _db.CsvBatches.Add(batch);\n//            await _db.SaveChangesAsync(ct);\n\n//            try\n//            {\n//                // 2) Parse headers + rows (minimal robust ingest; replace with your existing parser if present)\n//                //    Detect delimiter (very simple: try ',', then ';', then '\\t')\n//                stream.Position = 0;\n//                using var reader = new StreamReader(stream, Encoding.UTF8, detectEncodingFromByteOrderMarks: true, bufferSize: 1024, leaveOpen: true);\n\n//                string? headerLine = await reader.ReadLineAsync();\n//                if (string.IsNullOrWhiteSpace(headerLine))\n//                {\n//                    // No header line → write a single phone column as fallback so UI won’t explode\n//                    var headers = new List<string> { \"phone\" };\n//                    batch.HeadersJson = JsonSerializer.Serialize(headers);\n//                    batch.Status = \"ready\";\n//                    await _db.SaveChangesAsync(ct);\n\n//                    Log.Warning(\"CSV had no header line. Created batch {BatchId} with fallback 'phone' header.\", batch.Id);\n\n//                    return new CsvBatchUploadResultDto\n//                    {\n//                        BatchId = batch.Id,\n//                        AudienceId = batch.AudienceId,\n//                        FileName = batch.FileName ?? string.Empty,\n//                        RowCount = 0,\n//                        Headers = headers\n//                    };\n//                }\n\n//                char[] candidates = new[] { ',', ';', '\\t' };\n//                char delim = candidates.OrderByDescending(d => headerLine.Count(ch => ch == d)).First();\n\n//                var headersParsed = headerLine.Split(delim).Select(h => h.Trim()).Where(h => !string.IsNullOrEmpty(h)).ToList();\n//                if (headersParsed.Count == 0)\n//                {\n//                    headersParsed = new List<string> { \"phone\" };\n//                }\n\n//                batch.HeadersJson = JsonSerializer.Serialize(headersParsed);\n\n//                // 3) Stream rows into CsvRows (first 5k for now; adapt to your chunking if needed)\n//                //    If you already have a chunked/efficient parser in this class, call it instead.\n//                var rowsBuffer = new List<CsvRow>(capacity: 1024);\n//                int rowIndex = 0;\n\n//                while (!reader.EndOfStream)\n//                {\n//                    var line = await reader.ReadLineAsync();\n//                    if (line is null) break;\n//                    if (string.IsNullOrWhiteSpace(line)) continue;\n\n//                    var cols = line.Split(delim);\n\n//                    var dict = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);\n//                    for (int i = 0; i < headersParsed.Count; i++)\n//                    {\n//                        var key = headersParsed[i];\n//                        var val = i < cols.Length ? cols[i]?.Trim() : null;\n//                        dict[key] = val;\n//                    }\n\n//                    rowsBuffer.Add(new CsvRow\n//                    {\n//                        Id = Guid.NewGuid(),\n//                        BatchId = batch.Id,\n//                        RowIndex = rowIndex++,\n//                        DataJson = JsonSerializer.Serialize(dict)\n//                    });\n\n//                    // bulk flush in chunks\n//                    if (rowsBuffer.Count >= 1000)\n//                    {\n//                        _db.CsvRows.AddRange(rowsBuffer);\n//                        await _db.SaveChangesAsync(ct);\n//                        rowsBuffer.Clear();\n//                    }\n//                }\n\n//                if (rowsBuffer.Count > 0)\n//                {\n//                    _db.CsvRows.AddRange(rowsBuffer);\n//                    await _db.SaveChangesAsync(ct);\n//                    rowsBuffer.Clear();\n//                }\n\n//                batch.RowCount = rowIndex;\n//                batch.Status = \"ready\";\n//                await _db.SaveChangesAsync(ct);\n\n//                Log.Information(\"CsvBatch {BatchId} ingested: {Rows} rows; headers={HeaderCount}\", batch.Id, batch.RowCount, headersParsed.Count);\n\n//                return new CsvBatchUploadResultDto\n//                {\n//                    BatchId = batch.Id,\n//                    AudienceId = batch.AudienceId,\n//                    FileName = batch.FileName ?? string.Empty,\n//                    RowCount = batch.RowCount,\n//                    Headers = headersParsed\n//                };\n//            }\n//            catch (Exception ex)\n//            {\n//                batch.Status = \"failed\";\n//                batch.ErrorMessage = ex.Message;\n//                await _db.SaveChangesAsync(ct);\n//                Log.Error(ex, \"CSV ingest failed for batch {BatchId}\", batch.Id);\n//                throw;\n//            }\n//        }\n\n//        // ===========================================================================================\n\n//        // Your existing methods below…\n//        public async Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(\n//            Guid businessId,\n//            Guid batchId,\n//            int take = 20,\n//            CancellationToken ct = default)\n//        {\n//            // First ensure the batch exists and belongs to the tenant\n//            var batch = await _db.CsvBatches\n//                .AsNoTracking()\n//                .Where(b => b.Id == batchId && b.BusinessId == businessId)\n//                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })\n//                .FirstOrDefaultAsync(ct);\n\n//            if (batch is null)\n//                throw new KeyNotFoundException(\"Batch not found.\"); // 404 semantics in your middleware\n\n//            // If no rows yet, return empty samples gracefully (do NOT throw)\n//            if (batch.RowCount <= 0)\n//                return Array.Empty<CsvRowSampleDto>();\n\n//            var headers = (string[])(JsonSerializer.Deserialize<string[]>(batch.HeadersJson ?? \"[]\") ?? Array.Empty<string>());\n\n//            var rows = await _db.CsvRows\n//                .AsNoTracking()\n//                .Where(r => r.BatchId == batchId)\n//                .OrderBy(r => r.RowIndex)\n//                .Take(Math.Max(1, take))\n//                .Select(r => new { r.RowIndex, r.DataJson })\n//                .ToListAsync(ct);\n\n//            var result = new List<CsvRowSampleDto>(rows.Count);\n//            foreach (var r in rows)\n//            {\n//                var dict = JsonSerializer.Deserialize<Dictionary<string, string?>>(r.DataJson ?? \"{}\")\n//                           ?? new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);\n\n//                // Ensure all header keys exist\n//                foreach (var h in headers)\n//                    if (!dict.ContainsKey(h)) dict[h] = null;\n\n//                result.Add(new CsvRowSampleDto\n//                {\n//                    RowIndex = r.RowIndex,\n//                    Data = dict\n//                });\n//            }\n\n//            return result;\n//        }\n\n//        //private async Task<CsvBatchUploadResultDto> IngestCoreAsync(\n//        //    Guid businessId,\n//        //    string fileName,\n//        //    Stream stream,\n//        //    CancellationToken ct)\n//        //{\n//        //    // This method should match what you already implemented previously.\n//        //    // Below is a minimal skeleton to indicate intent.\n\n//        //    // 1) Create CsvBatch (BusinessId only)\n//        //    var batch = new CsvBatch\n//        //    {\n//        //        Id = Guid.NewGuid(),\n//        //        BusinessId = businessId,\n//        //        FileName = fileName,\n//        //        CreatedAt = DateTime.UtcNow,\n//        //        HeaderJson = null, // set after parsing\n//        //    };\n//        //    _db.CsvBatches.Add(batch);\n//        //    await _db.SaveChangesAsync(ct);\n\n//        //    // 2) Parse & store (re-use your existing parser util)\n//        //    // var (headers, rows) = await _yourParser.ParseAsync(stream, ct);\n//        //    // batch.HeaderJson = JsonSerializer.Serialize(headers);\n//        //    // await _db.SaveChangesAsync(ct);\n//        //    // await BulkInsertRowsAsync(batch.Id, rows, ct);\n\n//        //    // -- placeholder; call your real implementation here --\n//        //    Log.Information(\"CsvBatch {BatchId} ingested for business {Biz}\", batch.Id, businessId);\n\n//        //    // 3) Build DTO (AudienceId intentionally null)\n//        //    return new CsvBatchUploadResultDto\n//        //    {\n//        //        BatchId = batch.Id,\n//        //        AudienceId = null,\n//        //        FileName = fileName,\n//        //        // Headers = headers, Sample = first few rows, etc.\n//        //    };\n//        //}\n\n//        // ----------------------------\n//        // Batch info\n//        // ----------------------------\n\n//        private async Task<CsvBatchUploadResultDto> IngestCoreAsync(\n//            Guid businessId,\n//            string fileName,\n//            Stream stream,\n//            CancellationToken ct)\n//        {\n//            // 1) Create CsvBatch (BusinessId only) — audience-agnostic by design\n//            var batch = new CsvBatch\n//            {\n//                Id = Guid.NewGuid(),\n//                BusinessId = businessId,\n//                FileName = fileName,\n//                CreatedAt = DateTime.UtcNow,\n//                Status = \"ingesting\",     // optional: mark while parsing\n//                HeadersJson = null,       // <-- correct property name (plural)\n//                RowCount = 0,\n//                SkippedCount = 0,\n//                ErrorMessage = null\n//            };\n//            _db.CsvBatches.Add(batch);\n//            await _db.SaveChangesAsync(ct);\n\n//            // 2) Parse & store (re-use your existing parser / chunking logic)\n//            //    NOTE: Keep your existing implementation that detects delimiter,\n//            //    streams rows, and writes CsvRow(DataJson) in chunks.\n//            //\n//            // var (headers, rowsWritten, skipped) = await _yourParser.ParseAsync(batch.Id, stream, ct);\n//            // batch.HeadersJson = JsonSerializer.Serialize(headers);\n//            // batch.RowCount = rowsWritten;\n//            // batch.SkippedCount = skipped;\n\n//            // -- placeholder; call your real implementation above --\n//            Log.Information(\"CsvBatch {BatchId} staged for business {Biz}\", batch.Id, businessId);\n\n//            // Mark ready once parsing completes successfully\n//            batch.Status = \"ready\";\n//            await _db.SaveChangesAsync(ct);\n\n//            // 3) Build DTO (AudienceId intentionally null)\n//            return new CsvBatchUploadResultDto\n//            {\n//                BatchId = batch.Id,\n//                AudienceId = null,                 // by design\n//                RowCount = batch.RowCount,         // or rowsWritten if you have it\n//                Headers = /* headers != null ? headers.ToList() : */ new List<string>(),\n//                Message = \"CSV batch created.\"\n//            };\n//        }\n\n//        public async Task<CsvBatchInfoDto?> GetBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)\n//        {\n//            var batch = await _db.CsvBatches\n//                .AsNoTracking()\n//                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n\n//            if (batch == null) return null;\n\n//            var headers = SafeParseHeaderArray(batch.HeadersJson);\n\n//            return new CsvBatchInfoDto\n//            {\n//                BatchId = batch.Id,\n//                AudienceId = null, // see item #2 below\n//                RowCount = batch.RowCount,\n//                Headers = headers,\n//                CreatedAt = batch.CreatedAt\n//            };\n//        }\n\n//        // Kept (existing) — quick sample helper\n//        public async Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(Guid businessId, Guid batchId, int take = 20, CancellationToken ct = default)\n//        {\n//            if (take <= 0) take = 20;\n//            if (take > 100) take = 100;\n\n//            var headers = await _db.CsvBatches\n//                .AsNoTracking()\n//                .Where(b => b.Id == batchId && b.BusinessId == businessId)\n//                .Select(b => b.HeadersJson)\n//                .FirstOrDefaultAsync(ct);\n\n//            if (headers == null) throw new KeyNotFoundException(\"Batch not found.\");\n\n//            var headerList = SafeParseHeaderArray(headers);\n\n//            var rows = await _db.CsvRows\n//                .AsNoTracking()\n//                .Where(r => r.BatchId == batchId && r.BusinessId == businessId)\n//                .OrderBy(r => r.RowIndex)\n//                .Take(take)\n//                .Select(r => new { r.RowIndex, r.DataJson })\n//                .ToListAsync(ct);\n\n//            var result = new List<CsvRowSampleDto>(rows.Count);\n//            foreach (var r in rows)\n//            {\n//                var dict = SafeParseDict(r.DataJson);\n//                // Ensure consistent header order in sample (fill missing with null)\n//                var ordered = new Dictionary<string, string?>(headerList.Count, StringComparer.OrdinalIgnoreCase);\n//                foreach (var h in headerList)\n//                {\n//                    dict.TryGetValue(h, out var v);\n//                    ordered[h] = v;\n//                }\n\n//                result.Add(new CsvRowSampleDto\n//                {\n//                    RowIndex = r.RowIndex,\n//                    Data = ordered\n//                });\n//            }\n\n//            return result;\n//        }\n\n//        // ----------------------------\n//        // List / Page / Delete / Validate\n//        // ----------------------------\n//        public async Task<List<CsvBatchListItemDto>> ListBatchesAsync(Guid businessId, int limit = 20, CancellationToken ct = default)\n//        {\n//            if (limit <= 0) limit = 20;\n//            if (limit > 100) limit = 100;\n\n//            return await _db.CsvBatches\n//                .AsNoTracking()\n//                .Where(b => b.BusinessId == businessId)\n//                .OrderByDescending(b => b.CreatedAt)\n//                .Take(limit)\n//                .Select(b => new CsvBatchListItemDto\n//                {\n//                    BatchId = b.Id,\n//                    FileName = b.FileName,\n//                    RowCount = b.RowCount,\n//                    Status = b.Status,\n//                    CreatedAt = b.CreatedAt\n//                })\n//                .ToListAsync(ct);\n//        }\n\n//        public async Task<CsvBatchRowsPageDto> GetRowsPageAsync(Guid businessId, Guid batchId, int skip, int take, CancellationToken ct = default)\n//        {\n//            if (take <= 0) take = 50;\n//            if (take > 200) take = 200;\n//            if (skip < 0) skip = 0;\n\n//            var exists = await _db.CsvBatches.AsNoTracking()\n//                .AnyAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n//            if (!exists) throw new KeyNotFoundException(\"CSV batch not found.\");\n\n//            var total = await _db.CsvRows.AsNoTracking()\n//                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n//                .CountAsync(ct);\n\n//            var rows = await _db.CsvRows.AsNoTracking()\n//                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n//                .OrderBy(r => r.RowIndex)\n//                .Skip(skip)\n//                .Take(take)\n//                .Select(r => new CsvRowSampleDto\n//                {\n//                    RowIndex = r.RowIndex,\n//                    Data = SafeParseDict(r.DataJson)\n//                })\n//                .ToListAsync(ct);\n\n//            return new CsvBatchRowsPageDto\n//            {\n//                BatchId = batchId,\n//                TotalRows = total,\n//                Skip = skip,\n//                Take = take,\n//                Rows = rows\n//            };\n//        }\n\n//        public async Task<bool> DeleteBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)\n//        {\n//            var batch = await _db.CsvBatches\n//                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n\n//            if (batch == null) return false;\n\n//            using var tx = await _db.Database.BeginTransactionAsync(ct);\n//            try\n//            {\n//                var rows = _db.CsvRows.Where(r => r.BusinessId == businessId && r.BatchId == batchId);\n//                _db.CsvRows.RemoveRange(rows);\n\n//                _db.CsvBatches.Remove(batch);\n\n//                await _db.SaveChangesAsync(ct);\n//                await tx.CommitAsync(ct);\n//                return true;\n//            }\n//            catch\n//            {\n//                await tx.RollbackAsync(ct);\n//                throw;\n//            }\n//        }\n\n//        private static readonly string[] PhoneHeaderCandidates =\n//            { \"phone\", \"mobile\", \"whatsapp\", \"msisdn\", \"whatsapp_number\", \"contact\", \"contact_number\" };\n\n//        public async Task<CsvBatchValidationResultDto> ValidateAsync(\n//            Guid businessId,\n//            Guid batchId,\n//            CsvBatchValidationRequestDto request,\n//            CancellationToken ct = default)\n//        {\n//            if (request is null) throw new ArgumentNullException(nameof(request));\n//            if (request.SampleSize <= 0) request.SampleSize = 20;\n//            if (request.SampleSize > 100) request.SampleSize = 100;\n\n//            var batch = await _db.CsvBatches.AsNoTracking()\n//                .Where(b => b.BusinessId == businessId && b.Id == batchId)\n//                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })\n//                .FirstOrDefaultAsync(ct);\n\n//            if (batch == null) throw new KeyNotFoundException(\"CSV batch not found.\");\n\n//            var headers = SafeParseHeaderArray(batch.HeadersJson);\n//            var headerSet = new HashSet<string>(headers, StringComparer.OrdinalIgnoreCase);\n\n//            var result = new CsvBatchValidationResultDto\n//            {\n//                BatchId = batchId,\n//                TotalRows = batch.RowCount\n//            };\n\n//            // Required headers check\n//            if (request.RequiredHeaders != null && request.RequiredHeaders.Count > 0)\n//            {\n//                foreach (var req in request.RequiredHeaders)\n//                {\n//                    if (!headerSet.Contains(req))\n//                        result.MissingRequiredHeaders.Add(req);\n//                }\n\n//                if (result.MissingRequiredHeaders.Count > 0)\n//                    result.Errors.Add(\"Required headers are missing.\");\n//            }\n\n//            // Determine phone field\n//            var phoneField = request.PhoneField;\n//            if (string.IsNullOrWhiteSpace(phoneField))\n//                phoneField = PhoneHeaderCandidates.FirstOrDefault(headerSet.Contains);\n\n//            result.PhoneField = phoneField;\n\n//            if (string.IsNullOrWhiteSpace(phoneField))\n//            {\n//                result.Errors.Add(\"No phone field provided or detected.\");\n//                return result; // no row scan possible without a phone column\n//            }\n\n//            // Scan rows for phone presence & duplicates\n//            var seenPhones = new HashSet<string>(StringComparer.Ordinal);\n//            var problemSamples = new List<CsvRowSampleDto>();\n\n//            var rowsQuery = _db.CsvRows.AsNoTracking()\n//                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n//                .OrderBy(r => r.RowIndex)\n//                .Select(r => new { r.RowIndex, r.DataJson });\n\n//            await foreach (var row in rowsQuery.AsAsyncEnumerable().WithCancellation(ct))\n//            {\n//                var dict = SafeParseDict(row.DataJson);\n//                dict.TryGetValue(phoneField, out var rawPhone);\n\n//                var normalized = NormalizePhoneMaybe(rawPhone, request.NormalizePhones);\n\n//                var isProblem = false;\n\n//                if (string.IsNullOrWhiteSpace(normalized))\n//                {\n//                    result.MissingPhoneCount++;\n//                    isProblem = true;\n//                }\n//                else if (request.Deduplicate && !seenPhones.Add(normalized))\n//                {\n//                    result.DuplicatePhoneCount++;\n//                    isProblem = true;\n//                }\n\n//                if (isProblem && problemSamples.Count < request.SampleSize)\n//                {\n//                    problemSamples.Add(new CsvRowSampleDto\n//                    {\n//                        RowIndex = row.RowIndex,\n//                        Data = dict\n//                    });\n//                }\n//            }\n\n//            result.ProblemSamples = problemSamples;\n\n//            if (result.MissingPhoneCount > 0)\n//                result.Errors.Add(\"Some rows are missing phone numbers.\");\n//            if (result.DuplicatePhoneCount > 0)\n//                result.Warnings.Add(\"Duplicate phone numbers detected (after normalization).\");\n\n//            return result;\n//        }\n\n//        // ----------------------------\n//        // helpers\n//        // ----------------------------\n//        private static List<string> SafeParseHeaderArray(string? json)\n//        {\n//            try\n//            {\n//                return string.IsNullOrWhiteSpace(json)\n//                    ? new List<string>()\n//                    : (JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>());\n//            }\n//            catch { return new List<string>(); }\n//        }\n\n//        private static Dictionary<string, string?> SafeParseDict(string? json)\n//        {\n//            try\n//            {\n//                return string.IsNullOrWhiteSpace(json)\n//                    ? new Dictionary<string, string?>()\n//                    : (JsonSerializer.Deserialize<Dictionary<string, string?>>(json) ??\n//                       new Dictionary<string, string?>());\n//            }\n//            catch { return new Dictionary<string, string?>(); }\n//        }\n\n//        private static char DetectDelimiter(string headerLine)\n//        {\n//            var candidates = new[] { ',', ';', '\\t' };\n//            var counts = candidates.Select(c => (c, count: headerLine.Count(ch => ch == c))).ToList();\n//            var best = counts.OrderByDescending(x => x.count).First();\n//            return best.count > 0 ? best.c : ',';\n//        }\n\n//        /// <summary>\n//        /// CSV parser with delimiter support: handles commas/semicolons/tabs, double quotes,\n//        /// and escaped quotes (\"\"). It does NOT support embedded newlines inside quoted fields.\n//        /// </summary>\n//        private static List<string> ParseCsvLine(string line, char delimiter)\n//        {\n//            var result = new List<string>();\n//            if (line == null) return result;\n\n//            var sb = new StringBuilder();\n//            bool inQuotes = false;\n\n//            for (int i = 0; i < line.Length; i++)\n//            {\n//                var c = line[i];\n\n//                if (inQuotes)\n//                {\n//                    if (c == '\"')\n//                    {\n//                        // Handle escaped quote \"\"\n//                        if (i + 1 < line.Length && line[i + 1] == '\"')\n//                        {\n//                            sb.Append('\"');\n//                            i++;\n//                        }\n//                        else\n//                        {\n//                            inQuotes = false;\n//                        }\n//                    }\n//                    else\n//                    {\n//                        sb.Append(c);\n//                    }\n//                }\n//                else\n//                {\n//                    if (c == delimiter)\n//                    {\n//                        result.Add(sb.ToString());\n//                        sb.Clear();\n//                    }\n//                    else if (c == '\"')\n//                    {\n//                        inQuotes = true;\n//                    }\n//                    else\n//                    {\n//                        sb.Append(c);\n//                    }\n//                }\n//            }\n\n//            result.Add(sb.ToString());\n//            return result;\n//        }\n\n//        private static string? NormalizePhoneMaybe(string? raw, bool normalize)\n//        {\n//            if (string.IsNullOrWhiteSpace(raw)) return null;\n//            var trimmed = raw.Trim();\n//            if (!normalize) return trimmed;\n\n//            var digits = Regex.Replace(trimmed, \"[^0-9]\", \"\");\n//            digits = digits.TrimStart('0');\n\n//            // Heuristic for India: add 91 for 10-digit local numbers\n//            if (digits.Length == 10) digits = \"91\" + digits;\n\n//            return digits.Length >= 10 ? digits : trimmed;\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CsvExportService.cs",
      "sha256": "98366ed493eba2967478ea12bedd43b2d0c3a355667e89f23db3a6dd734554a9",
      "language": "csharp",
      "size": 7057,
      "content": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICsvExportService\n    {\n        Task<byte[]> BuildMaterializedCsvAsync(Guid businessId, Guid campaignId, int limit = 200, CancellationToken ct = default);\n        Task<byte[]> BuildDispatchPlanCsvAsync(Guid businessId, Guid campaignId, int limit = 2000, CancellationToken ct = default);\n    }\n\n    /// <summary>\n    /// Small CSV builder for exporting materialized rows and dispatch plans.\n    /// Uses UTF-8 with BOM for Excel friendliness. Escapes fields per RFC4180.\n    /// </summary>\n    public class CsvExportService : ICsvExportService\n    {\n        private readonly ICampaignMaterializationService _materializer;\n        private readonly ICampaignDispatchPlannerService _planner;\n\n        public CsvExportService(\n            ICampaignMaterializationService materializer,\n            ICampaignDispatchPlannerService planner)\n        {\n            _materializer = materializer;\n            _planner = planner;\n        }\n\n        public async Task<byte[]> BuildMaterializedCsvAsync(Guid businessId, Guid campaignId, int limit = 200, CancellationToken ct = default)\n        {\n            var data = await _materializer.MaterializeAsync(businessId, campaignId, limit, ct);\n\n            // Header is dynamic based on placeholder count and button count.\n            // Columns:\n            // RecipientId,ContactId,Phone,Param1..ParamN,Btn1Text,Btn1Url,...,Warnings,Errors\n            var maxParam = data.PlaceholderCount;\n            var maxButtons = data.Rows.Max(r => r.Buttons.Count);\n\n            var sb = new StringBuilder();\n            using var writer = new StringWriter(sb);\n\n            // Write header\n            writer.Write(\"RecipientId,ContactId,Phone\");\n            for (int i = 1; i <= maxParam; i++) writer.Write($\",Param{i}\");\n            for (int b = 1; b <= maxButtons; b++) writer.Write($\",Btn{b}Text,Btn{b}Url\");\n            writer.Write(\",Warnings,Errors\");\n            writer.WriteLine();\n\n            foreach (var row in data.Rows)\n            {\n                WriteCsv(writer, row.RecipientId?.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, row.ContactId?.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, row.Phone);\n\n                // Params 1..N (pad missing)\n                for (int i = 1; i <= maxParam; i++)\n                {\n                    writer.Write(\",\");\n                    var val = row.Parameters.FirstOrDefault(p => p.Index == i)?.Value;\n                    WriteCsv(writer, val);\n                }\n\n                // Buttons (pad missing)\n                for (int b = 0; b < maxButtons; b++)\n                {\n                    var btn = b < row.Buttons.Count ? row.Buttons[b] : null;\n                    writer.Write(\",\");\n                    WriteCsv(writer, btn?.ButtonText);\n                    writer.Write(\",\");\n                    WriteCsv(writer, btn?.ResolvedUrl);\n                }\n\n                writer.Write(\",\");\n                WriteCsv(writer, string.Join(\" | \", row.Warnings));\n                writer.Write(\",\");\n                WriteCsv(writer, string.Join(\" | \", row.Errors));\n                writer.WriteLine();\n            }\n\n            // Return as UTF-8 with BOM for Excel compatibility\n            var utf8withBom = new UTF8Encoding(encoderShouldEmitUTF8Identifier: true);\n            return utf8withBom.GetBytes(sb.ToString());\n        }\n\n        public async Task<byte[]> BuildDispatchPlanCsvAsync(Guid businessId, Guid campaignId, int limit = 2000, CancellationToken ct = default)\n        {\n            var plan = await _planner.PlanAsync(businessId, campaignId, limit, ct);\n\n            var sb = new StringBuilder();\n            using var writer = new StringWriter(sb);\n\n            // Plan metadata preface (comment-style rows start with '#')\n            writer.WriteLine($\"# CampaignId,{plan.CampaignId}\");\n            writer.WriteLine($\"# TemplateName,{Escape(plan.TemplateName)}\");\n            writer.WriteLine($\"# Language,{Escape(plan.Language)}\");\n            writer.WriteLine($\"# PlaceholderCount,{plan.PlaceholderCount}\");\n            writer.WriteLine($\"# TotalRecipients,{plan.TotalRecipients}\");\n            writer.WriteLine($\"# ProviderPlan,{Escape(plan.Throttle.Plan)}\");\n            writer.WriteLine($\"# Provider,{Escape(plan.Throttle.Provider)}\");\n            writer.WriteLine($\"# MaxBatchSize,{plan.Throttle.MaxBatchSize}\");\n            writer.WriteLine($\"# MaxPerMinute,{plan.Throttle.MaxPerMinute}\");\n            writer.WriteLine($\"# ComputedBatches,{plan.Throttle.ComputedBatches}\");\n            writer.WriteLine($\"# EstimatedMinutes,{plan.Throttle.EstimatedMinutes}\");\n            if (plan.GlobalWarnings.Any())\n                writer.WriteLine($\"# GlobalWarnings,{Escape(string.Join(\" | \", plan.GlobalWarnings))}\");\n            if (plan.Throttle.Warnings.Any())\n                writer.WriteLine($\"# ThrottleWarnings,{Escape(string.Join(\" | \", plan.Throttle.Warnings))}\");\n\n            writer.WriteLine(); // blank line\n\n            // Batches table header\n            writer.WriteLine(\"BatchNumber,OffsetSeconds,StartIndex,Count,ApproxBytes,Phones,RecipientIds,Notes\");\n\n            foreach (var b in plan.Batches)\n            {\n                WriteCsv(writer, b.BatchNumber.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, b.OffsetSeconds.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, b.StartIndex.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, b.Count.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, b.ApproxBytes.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, string.Join(\" \", b.Phones.Select(p => p ?? \"\")));\n                writer.Write(\",\");\n                WriteCsv(writer, string.Join(\" \", b.RecipientIds.Select(id => id?.ToString() ?? \"\")));\n                writer.Write(\",\");\n                WriteCsv(writer, string.Join(\" | \", b.Notes));\n                writer.WriteLine();\n            }\n\n            var utf8withBom = new UTF8Encoding(encoderShouldEmitUTF8Identifier: true);\n            return utf8withBom.GetBytes(sb.ToString());\n        }\n\n        private static void WriteCsv(TextWriter writer, string? value)\n        {\n            writer.Write(Escape(value ?? \"\"));\n        }\n\n        private static string Escape(string input)\n        {\n            // RFC4180-style: quote if contains comma, quote or newline; escape quotes by doubling\n            var needsQuote = input.Contains(',') || input.Contains('\"') || input.Contains('\\n') || input.Contains('\\r');\n            if (!needsQuote) return input;\n            return $\"\\\"{input.Replace(\"\\\"\", \"\\\"\\\"\")}\\\"\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignDispatcher.cs",
      "sha256": "7ea08b6385a5f9c2861a417d0ba9ed59f386c613614b462ffbaa53ace5cb56e8",
      "language": "csharp",
      "size": 652,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignDispatcher\n    {\n        /// <summary>\n        /// mode: \"canary\" (use count) or \"full\" (ignore count, select all ready).\n        /// count: when mode=canary, number of recipients to enqueue (default 25).\n        /// </summary>\n        Task<CampaignDispatchResponseDto> DispatchAsync(\n            Guid businessId,\n            Guid campaignId,\n            string mode,\n            int count,\n            CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignDryRunService.cs",
      "sha256": "8ee4671e2a7d2ac659e127e72121295904129c5d31e82fad35401dc50f10a717",
      "language": "csharp",
      "size": 662,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Validates a campaign for send safety without actually sending any message.\n    /// </summary>\n    public interface ICampaignDryRunService\n    {\n        /// <summary>\n        /// Run dry-run validation for a campaign. Should not mutate state.\n        /// </summary>\n        Task<CampaignDryRunResultDto> ValidateAsync(\n            Guid businessId,\n            Guid campaignId,\n            int limit = 200,\n            CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignMaterializationService.cs",
      "sha256": "45174c0e9b318f8f145ffd682ecf042a166872989ec0a9637342c3fe47d8fa6d",
      "language": "csharp",
      "size": 358,
      "content": "using xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignMaterializationService\n    {\n        Task<CampaignMaterializeResultDto> MaterializeAsync(\n        Guid businessId,\n        Guid campaignId,\n        int limit = 200,\n            CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignMaterializer.cs",
      "sha256": "dba2b5d0e2d4d8e08bc87cc00a353a7636cb5dc7f30e4f1af1620c0b1ba69cde",
      "language": "csharp",
      "size": 434,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignMaterializer\n    {\n        Task<CampaignCsvMaterializeResponseDto> CreateAsync(\n       Guid businessId,\n       Guid campaignId,\n       CampaignCsvMaterializeRequestDto request,\n       CancellationToken ct = default);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignRecipientService.cs",
      "sha256": "a2bb5bdb9f8a87dc2436bac017a79dc02ec48bdc1fd425cb6c701807234d4dd3",
      "language": "csharp",
      "size": 729,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignRecipientService\n    {\n        Task<CampaignRecipientDto> GetByIdAsync(Guid id);\n        Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId);\n\n        Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus);\n        Task<bool> TrackReplyAsync(Guid recipientId, string replyText);\n        Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null);\n\n        Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignRetryService.cs",
      "sha256": "77b2d8c8b67c691891ba7e6e1b014af847932714edcd60acfd419c092aa3c4bc",
      "language": "csharp",
      "size": 274,
      "content": "using xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignRetryService\n    {\n        Task<CampaignRetryResultDto> RetryFailedAsync(Guid businessId, Guid campaignId, int limit = 200);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignService.cs",
      "sha256": "a0f11b350934aa6e618db54ddae6bf6b6238b35c9135a56d913cf9302a5263f6",
      "language": "csharp",
      "size": 2450,
      "content": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignService\n    {\n        /// 🆕 Create a new campaign with recipients\n        Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy);\n\n        /// ✏️ Update an existing draft campaign\n        Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto);\n\n        /// 🗑️ Soft-delete a draft campaign\n        Task<bool> DeleteCampaignAsync(Guid id);\n\n        /// 📋 Get all campaigns for the business\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId);\n\n        /// 📄 Get paginated campaigns\n        Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request);\n        /// 🚀 Trigger campaign send flow (template message to all recipients)\n        Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent);\n        Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy);\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null);\n        Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId);\n        Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds);\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign);\n        Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign);\n\n        Task<List<FlowListItemDto>> GetAvailableFlowsAsync(Guid businessId, bool onlyPublished = true);\n\n        Task<CampaignDryRunResponseDto> DryRunTemplateCampaignAsync(Guid campaignId, int maxRecipients = 20);\n        Task<object> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICsvBatchService.cs",
      "sha256": "8f508ac0d6516126de4a02a11af6466f8dc7a0250850200199944f3ca401c41d",
      "language": "csharp",
      "size": 1283,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICsvBatchService\n    {\n        Task<CsvBatchUploadResultDto> CreateAndIngestAsync(\n            Guid businessId,\n            string fileName,\n            Stream stream,\n            Guid? audienceId = null,\n            CancellationToken ct = default\n        );\n\n        Task<CsvBatchInfoDto?> GetBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default);\n        Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(Guid businessId, Guid batchId, int take = 20, CancellationToken ct = default);\n        Task<CsvBatchValidationResultDto> ValidateAsync(Guid businessId, Guid batchId, CsvBatchValidationRequestDto request, CancellationToken ct = default);\n        Task<List<CsvBatchListItemDto>> ListBatchesAsync(Guid businessId, int limit = 20, CancellationToken ct = default);\n        Task<CsvBatchRowsPageDto> GetRowsPageAsync(Guid businessId, Guid batchId, int skip, int take, CancellationToken ct = default);\n        Task<bool> DeleteBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/IMappingSuggestionService.cs",
      "sha256": "010ea9f12699609fa3addd18141bfba7bcf3ec585a43200b86cf3a2f8f0ef038",
      "language": "csharp",
      "size": 641,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Suggests a token->source mapping (\"csv:Header\" or \"static:\") given a campaign and CSV batch.\n    /// Uses Campaign.TemplateParameters if present; otherwise derives tokens from CSV headers.\n    /// </summary>\n    public interface IMappingSuggestionService\n    {\n        Task<Dictionary<string, string>> SuggestAsync(\n            Guid businessId,\n            Guid campaignId,\n            Guid batchId,\n            CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/Interface.cs",
      "sha256": "b499bed78d394052736ab9f463d1f5737462a52f755329e27050b2f72a1b846c",
      "language": "csharp",
      "size": 104,
      "content": "namespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface Interface\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/IOutboundCampaignQueueService.cs",
      "sha256": "a085fb2166af4a18a8f3499aa61280313e0c0dbd358fbaa54eb9562e8337fc80",
      "language": "csharp",
      "size": 1044,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.Queueing.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface IOutboundCampaignQueueService\n    {\n        Task<Guid> EnqueueAsync(Guid businessId, Guid campaignId, bool forceDuplicate = false);\n        Task<bool> MarkSucceededAsync(Guid jobId);\n        Task<bool> MarkFailedAsync(Guid jobId, string error, bool scheduleRetry = true);\n\n        Task<List<OutboundCampaignJob>> GetJobsForCampaignAsync(Guid businessId, Guid campaignId);\n        Task<OutboundCampaignJob?> GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId);\n        Task<bool> CancelAsync(Guid businessId, Guid jobId);     // set to \"canceled\" (if queued/running)\n        Task<bool> ForceRetryNowAsync(Guid businessId, Guid jobId); // set to \"queued\", NextAttemptAt=now (no attempt++)\n        Task<int> EnqueueBulkAsync(IEnumerable<OutboundCampaignJobCreateDto> jobs, CancellationToken ct = default);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/IVariableMappingService.cs",
      "sha256": "dcf57112809de6e4dc9c3b7957cc9d591c65cace2d51cd24fc0795b6b12b8c5a",
      "language": "csharp",
      "size": 992,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Loads saved variable mappings for a campaign (e.g., token -> CSV header or \"constant:...\").\n    /// Current project does not require this to complete 2.4; this is a seam for future use.\n    /// </summary>\n    public interface IVariableMappingService\n    {\n        /// <returns>\n        /// Dictionary mapping variable token -> source (CSV header name or \"constant:Value\").\n        /// Return an empty dictionary when nothing is saved.\n        /// </returns>\n        Task<Dictionary<string, string>> GetForCampaignAsync(\n            Guid businessId,\n            Guid campaignId,\n            CancellationToken ct = default);\n        Task SaveAsync(\n           Guid businessId,\n           Guid campaignId,\n           Dictionary<string, string> mappings,\n           CancellationToken ct = default);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/MappingSuggestionService.cs",
      "sha256": "e6a82a860c5406f0e22ef3c89577a8c06081e49d21add5f9bc6682c0dc974dd3",
      "language": "csharp",
      "size": 5965,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Heuristics:\n    /// - If Campaign.TemplateParameters is a JSON array of tokens, suggest for those tokens.\n    /// - Else, derive tokens by normalizing CSV headers (lowercase, alnum only, '_' joined).\n    /// - Match by normalized equality/contains; special-case phone names.\n    /// - Unmatched tokens get \"static:\" so UI shows a clear placeholder.\n    /// </summary>\n    public sealed class MappingSuggestionService : IMappingSuggestionService\n    {\n        private readonly AppDbContext _db;\n\n        private static readonly string[] PhoneHeaderCandidates =\n        {\n            \"phone\", \"mobile\", \"whatsapp\", \"msisdn\", \"whatsapp_number\", \"contact\", \"contact_number\"\n        };\n\n        public MappingSuggestionService(AppDbContext db) => _db = db;\n\n        public async Task<Dictionary<string, string>> SuggestAsync(\n            Guid businessId,\n            Guid campaignId,\n            Guid batchId,\n            CancellationToken ct = default)\n        {\n            // Load campaign to read TemplateParameters (if present)\n            var campaign = await _db.Campaigns.AsNoTracking()\n                .Where(c => c.Id == campaignId && c.BusinessId == businessId)\n                .Select(c => new { c.Id, c.BusinessId, c.TemplateParameters })\n                .FirstOrDefaultAsync(ct);\n\n            if (campaign == null) throw new KeyNotFoundException(\"Campaign not found.\");\n\n            // Load batch headers\n            var batch = await _db.CsvBatches.AsNoTracking()\n                .Where(b => b.Id == batchId && b.BusinessId == businessId)\n                .Select(b => new { b.HeadersJson })\n                .FirstOrDefaultAsync(ct);\n\n            if (batch == null) throw new KeyNotFoundException(\"CSV batch not found.\");\n\n            var headers = ParseHeaders(batch.HeadersJson);\n            var normHeaders = headers.ToDictionary(h => Normalize(h), h => h, StringComparer.OrdinalIgnoreCase);\n\n            // Determine tokens\n            var tokens = ParseTemplateTokens(campaign.TemplateParameters);\n            if (tokens.Count == 0)\n            {\n                // Fall back: derive tokens directly from headers\n                tokens = headers.Select(Normalize).Where(s => !string.IsNullOrWhiteSpace(s)).Distinct(StringComparer.OrdinalIgnoreCase).ToList();\n            }\n\n            // Suggestion: token -> source\n            var suggestions = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n\n            foreach (var token in tokens)\n            {\n                var normToken = Normalize(token);\n\n                // 1) direct equality with header\n                if (normHeaders.TryGetValue(normToken, out var exactHeader))\n                {\n                    suggestions[token] = $\"csv:{exactHeader}\";\n                    continue;\n                }\n\n                // 2) phone special-case\n                if (IsPhoneToken(normToken))\n                {\n                    var headerPick = headers.FirstOrDefault(h => PhoneHeaderCandidates.Contains(Normalize(h)));\n                    if (!string.IsNullOrEmpty(headerPick))\n                    {\n                        suggestions[token] = $\"csv:{headerPick}\";\n                        continue;\n                    }\n                }\n\n                // 3) contains / fuzzy-lite\n                var contains = headers.FirstOrDefault(h => Normalize(h).Contains(normToken, StringComparison.OrdinalIgnoreCase));\n                if (!string.IsNullOrEmpty(contains))\n                {\n                    suggestions[token] = $\"csv:{contains}\";\n                    continue;\n                }\n\n                // 4) default: static placeholder (UI can highlight to user)\n                suggestions[token] = \"static:\";\n            }\n\n            return suggestions;\n        }\n\n        private static List<string> ParseHeaders(string? headersJson)\n        {\n            if (string.IsNullOrWhiteSpace(headersJson)) return new List<string>();\n            try\n            {\n                var arr = JsonSerializer.Deserialize<List<string>>(headersJson);\n                return arr?.Where(h => !string.IsNullOrWhiteSpace(h)).ToList() ?? new List<string>();\n            }\n            catch\n            {\n                // Fallback: maybe comma-separated\n                return headersJson.Split(',').Select(s => s.Trim()).Where(s => s.Length > 0).ToList();\n            }\n        }\n\n        private static List<string> ParseTemplateTokens(string? templateParametersJson)\n        {\n            if (string.IsNullOrWhiteSpace(templateParametersJson)) return new List<string>();\n            try\n            {\n                var arr = JsonSerializer.Deserialize<List<string>>(templateParametersJson);\n                return arr?.Where(t => !string.IsNullOrWhiteSpace(t)).ToList() ?? new List<string>();\n            }\n            catch\n            {\n                return new List<string>();\n            }\n        }\n\n        private static bool IsPhoneToken(string normToken)\n        {\n            if (string.IsNullOrWhiteSpace(normToken)) return false;\n            if (PhoneHeaderCandidates.Contains(normToken)) return true;\n            return normToken.Contains(\"phone\") || normToken.Contains(\"mobile\") || normToken.Contains(\"whatsapp\");\n        }\n\n        private static string Normalize(string s)\n        {\n            var lowered = (s ?? \"\").Trim().ToLowerInvariant();\n            if (lowered.Length == 0) return lowered;\n            var alnum = Regex.Replace(lowered, @\"[^a-z0-9]+\", \"_\");\n            alnum = Regex.Replace(alnum, \"_{2,}\", \"_\").Trim('_');\n            return alnum;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/NoopOutboundCampaignQueueService.cs",
      "sha256": "65d4579de7471d6bc130a5c534b4c78a34e4486be9a602bd1c493bdc47dce86b",
      "language": "csharp",
      "size": 3579,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;     // OutboundCampaignJobDto\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignModule.Services; // IOutboundCampaignQueueService\nusing xbytechat.api.Features.Queueing.DTOs;           // OutboundCampaignJobCreateDto\n\nnamespace xbytechat.api.Features.Queueing.Services\n{\n    /// <summary>\n    /// No-op queue adapter so the dispatcher compiles & runs. Swap for a real queue later.\n    /// </summary>\n    public sealed class NoopOutboundCampaignQueueService : IOutboundCampaignQueueService\n    {\n        public Task<Guid> EnqueueAsync(Guid businessId, Guid campaignId, bool forceDuplicate = false)\n        {\n            var id = Guid.NewGuid();\n            Log.Information(\"Noop queue: EnqueueAsync business={BusinessId} campaign={CampaignId} forceDup={Force} -> {JobId}\",\n                businessId, campaignId, forceDuplicate, id);\n            return Task.FromResult(id);\n        }\n\n        public Task<bool> MarkSucceededAsync(Guid jobId)\n        {\n            Log.Information(\"Noop queue: MarkSucceededAsync job={JobId}\", jobId);\n            return Task.FromResult(true);\n        }\n\n        public Task<bool> MarkFailedAsync(Guid jobId, string error, bool scheduleRetry = true)\n        {\n            Log.Warning(\"Noop queue: MarkFailedAsync job={JobId} retry={Retry} error={Error}\",\n                jobId, scheduleRetry, error);\n            return Task.FromResult(true);\n        }\n\n        public Task<List<OutboundCampaignJobDto>> GetJobsForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            Log.Information(\"Noop queue: GetJobsForCampaignAsync business={BusinessId} campaign={CampaignId}\",\n                businessId, campaignId);\n            return Task.FromResult(new List<OutboundCampaignJobDto>());\n        }\n\n        public Task<OutboundCampaignJobDto?> GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            Log.Information(\"Noop queue: GetActiveJobForCampaignAsync business={BusinessId} campaign={CampaignId}\",\n                businessId, campaignId);\n            return Task.FromResult<OutboundCampaignJobDto?>(null);\n        }\n\n        public Task<bool> CancelAsync(Guid businessId, Guid jobId)\n        {\n            Log.Information(\"Noop queue: CancelAsync business={BusinessId} job={JobId}\", businessId, jobId);\n            return Task.FromResult(true);\n        }\n\n        public Task<bool> ForceRetryNowAsync(Guid businessId, Guid jobId)\n        {\n            Log.Information(\"Noop queue: ForceRetryNowAsync business={BusinessId} job={JobId}\", businessId, jobId);\n            return Task.FromResult(true);\n        }\n\n        public Task<int> EnqueueBulkAsync(IEnumerable<OutboundCampaignJobCreateDto> jobs, CancellationToken ct = default)\n        {\n            var list = jobs?.ToList() ?? new List<OutboundCampaignJobCreateDto>();\n            Log.Information(\"Noop queue: EnqueueBulkAsync received {Count} jobs\", list.Count);\n            return Task.FromResult(list.Count);\n        }\n\n        Task<List<OutboundCampaignJob>> IOutboundCampaignQueueService.GetJobsForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            throw new NotImplementedException();\n        }\n\n        Task<OutboundCampaignJob?> IOutboundCampaignQueueService.GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/NoopVariableMappingService.cs",
      "sha256": "24a343d03f2ab867121a8ebfe09ebcf7672fb7a3261095b6dc2322633e1ae722",
      "language": "csharp",
      "size": 984,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Default stub: returns no saved mappings.\n    /// Swap this out later with a DB-backed implementation that reads CampaignVariableMap.\n    /// </summary>\n    public sealed class NoopVariableMappingService : IVariableMappingService\n    {\n        public Task<Dictionary<string, string>> GetForCampaignAsync(\n            Guid businessId,\n            Guid campaignId,\n            CancellationToken ct = default)\n        {\n            return Task.FromResult(new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase));\n        }\n\n        public Task SaveAsync(\n           Guid businessId,\n           Guid campaignId,\n           Dictionary<string, string> mappings,\n           CancellationToken ct = default)\n        {\n            // no-op\n            return Task.CompletedTask;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/OutboundCampaignQueueService.cs",
      "sha256": "b81f57bff9d0409d1f72e2347814800b56d2a94f6696ce7a5ae1500b38c9648b",
      "language": "csharp",
      "size": 8110,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;                       // <-- add\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.Queueing.DTOs;    // <-- add for OutboundCampaignJobCreateDto\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class OutboundCampaignQueueService : IOutboundCampaignQueueService\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<OutboundCampaignQueueService> _log;\n\n        public OutboundCampaignQueueService(AppDbContext db, ILogger<OutboundCampaignQueueService> log)\n        {\n            _db = db; _log = log;\n        }\n\n        public async Task<Guid> EnqueueAsync(Guid businessId, Guid campaignId, bool forceDuplicate = false)\n        {\n            if (!forceDuplicate)\n            {\n                var existing = await _db.OutboundCampaignJobs\n                    .Where(j => j.CampaignId == campaignId && (j.Status == \"queued\" || j.Status == \"running\"))\n                    .OrderByDescending(j => j.CreatedAt)\n                    .FirstOrDefaultAsync();\n\n                if (existing != null)\n                {\n                    var found = await _db.Campaigns\n                        .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n                    if (found != null && found.Status != \"Queued\")\n                    {\n                        found.Status = \"Queued\";\n                        found.UpdatedAt = DateTime.UtcNow;\n                        await _db.SaveChangesAsync();\n                    }\n\n                    _log.LogInformation(\"Campaign {CampaignId} already queued/running. Job={JobId}\", campaignId, existing.Id);\n                    return existing.Id;\n                }\n            }\n\n            var job = new OutboundCampaignJob\n            {\n                BusinessId = businessId,\n                CampaignId = campaignId,\n                Status = \"queued\",\n                Attempt = 0,\n                MaxAttempts = 5,\n                NextAttemptAt = DateTimeOffset.UtcNow\n            };\n\n            _db.OutboundCampaignJobs.Add(job);\n\n            var row = await _db.Campaigns\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (row != null)\n            {\n                row.Status = \"Queued\";\n                row.UpdatedAt = DateTime.UtcNow;\n            }\n\n            await _db.SaveChangesAsync();\n            return job.Id;\n        }\n\n        public async Task<bool> MarkSucceededAsync(Guid jobId)\n        {\n            var j = await _db.OutboundCampaignJobs.FindAsync(jobId);\n            if (j == null) return false;\n\n            j.Attempt += 1;\n            j.Status = \"succeeded\";\n            j.UpdatedAt = DateTime.UtcNow;\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> MarkFailedAsync(Guid jobId, string error, bool scheduleRetry = true)\n        {\n            var j = await _db.OutboundCampaignJobs.FindAsync(jobId);\n            if (j == null) return false;\n\n            j.Attempt += 1;\n            j.LastError = Truncate(error, 3900);\n            j.UpdatedAt = DateTime.UtcNow;\n\n            if (!scheduleRetry || j.Attempt >= j.MaxAttempts)\n            {\n                j.Status = \"failed\";\n            }\n            else\n            {\n                var backoff = j.Attempt switch\n                {\n                    1 => TimeSpan.FromMinutes(1),\n                    2 => TimeSpan.FromMinutes(5),\n                    3 => TimeSpan.FromMinutes(15),\n                    4 => TimeSpan.FromMinutes(60),\n                    _ => TimeSpan.FromMinutes(180)\n                };\n                j.Status = \"queued\";\n                j.NextAttemptAt = DateTimeOffset.UtcNow.Add(backoff);\n            }\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<List<OutboundCampaignJob>> GetJobsForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            return await _db.OutboundCampaignJobs\n                .Where(j => j.BusinessId == businessId && j.CampaignId == campaignId)\n                .OrderByDescending(j => j.CreatedAt)\n                .ToListAsync();\n        }\n\n        public async Task<OutboundCampaignJob?> GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            return await _db.OutboundCampaignJobs\n                .Where(j => j.BusinessId == businessId && j.CampaignId == campaignId &&\n                            (j.Status == \"queued\" || j.Status == \"running\"))\n                .OrderBy(j => j.CreatedAt)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task<bool> CancelAsync(Guid businessId, Guid jobId)\n        {\n            var j = await _db.OutboundCampaignJobs.FirstOrDefaultAsync(x => x.Id == jobId && x.BusinessId == businessId);\n            if (j == null) return false;\n\n            if (j.Status == \"queued\" || j.Status == \"running\")\n            {\n                j.Status = \"canceled\";\n                j.UpdatedAt = DateTime.UtcNow;\n                await _db.SaveChangesAsync();\n\n                var campaign = await _db.Campaigns.FirstOrDefaultAsync(c => c.Id == j.CampaignId && c.BusinessId == businessId);\n                if (campaign != null)\n                {\n                    var hasActive = await _db.OutboundCampaignJobs.AnyAsync(x =>\n                        x.CampaignId == j.CampaignId &&\n                        x.BusinessId == businessId &&\n                        (x.Status == \"queued\" || x.Status == \"running\"));\n\n                    if (!hasActive && (campaign.Status == \"Queued\" || campaign.Status == \"Sending\"))\n                    {\n                        campaign.Status = \"Draft\";\n                        campaign.UpdatedAt = DateTime.UtcNow;\n                        await _db.SaveChangesAsync();\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        public async Task<bool> ForceRetryNowAsync(Guid businessId, Guid jobId)\n        {\n            var j = await _db.OutboundCampaignJobs.FirstOrDefaultAsync(x => x.Id == jobId && x.BusinessId == businessId);\n            if (j == null) return false;\n\n            j.Status = \"queued\";\n            j.NextAttemptAt = DateTimeOffset.UtcNow;\n            j.UpdatedAt = DateTime.UtcNow;\n\n            var campaign = await _db.Campaigns.FirstOrDefaultAsync(c => c.Id == j.CampaignId && c.BusinessId == businessId);\n            if (campaign != null && campaign.Status != \"Queued\")\n            {\n                campaign.Status = \"Queued\";\n                campaign.UpdatedAt = DateTime.UtcNow;\n            }\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        // NEW: bulk enqueue used by CampaignDispatcher\n        public Task<int> EnqueueBulkAsync(IEnumerable<OutboundCampaignJobCreateDto> jobs, CancellationToken ct = default)\n        {\n            // For now, just log & return a deduped count. Replace with real queue later.\n            var list = (jobs ?? Enumerable.Empty<OutboundCampaignJobCreateDto>()).ToList();\n\n            // Deduplicate by provided IdempotencyKey (or fallback to a stable composite)\n            var enqueuedCount = list\n                .GroupBy(j => string.IsNullOrWhiteSpace(j.IdempotencyKey)\n                                ? $\"{j.CampaignId}:{j.CampaignRecipientId}\"\n                                : j.IdempotencyKey)\n                .Count();\n\n            _log.LogInformation(\"Bulk enqueue requested: {Requested} jobs, deduped to {Enqueued}\",\n                list.Count, enqueuedCount);\n\n            // TODO: push to a real queue/bus and persist queue records as needed.\n            return Task.FromResult(enqueuedCount);\n        }\n\n        private static string Truncate(string s, int max) =>\n            string.IsNullOrEmpty(s) ? s : (s.Length <= max ? s : s.Substring(0, max));\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/OutboundCampaignSendWorker.cs",
      "sha256": "d43bb1f4903bda4bd3fdba0ecaca4610dcd6da68906ac1cfb90c57e3949cc5e6",
      "language": "csharp",
      "size": 5846,
      "content": "using System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Background worker that claims due jobs and invokes CampaignService to send.\n    /// Flips Campaign.Status for truthful UI: Queued -> Sending -> Sent / Queued / Failed\n    /// </summary>\n    public class OutboundCampaignSendWorker : BackgroundService\n    {\n        private readonly IServiceProvider _sp;\n        private readonly ILogger<OutboundCampaignSendWorker> _log;\n\n        // Simple global concurrency cap & polling cadence\n        private const int MaxParallel = 3;\n        private static readonly TimeSpan SweepEvery = TimeSpan.FromSeconds(10);\n\n        public OutboundCampaignSendWorker(IServiceProvider sp, ILogger<OutboundCampaignSendWorker> log)\n        {\n            _sp = sp; _log = log;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            await Task.Delay(TimeSpan.FromSeconds(5), stoppingToken);\n\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                try\n                {\n                    using var scope = _sp.CreateScope();\n                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    var now = DateTimeOffset.UtcNow;\n\n                    // Find up to MaxParallel due jobs\n                    var due = await db.OutboundCampaignJobs\n                        .Where(j => j.Status == \"queued\" && j.NextAttemptAt <= now)\n                        .OrderBy(j => j.NextAttemptAt)\n                        .ThenBy(j => j.CreatedAt)\n                        .Take(MaxParallel)\n                        .ToListAsync(stoppingToken);\n\n                    // Claim jobs (do NOT increment Attempt here)\n                    foreach (var job in due)\n                    {\n                        job.Status = \"running\";\n                        job.UpdatedAt = DateTime.UtcNow;\n                    }\n                    if (due.Count > 0)\n                        await db.SaveChangesAsync(stoppingToken);\n\n                    var tasks = due.Select(job => ProcessJobAsync(job.Id, stoppingToken)).ToArray();\n                    await Task.WhenAll(tasks);\n                }\n                catch (Exception ex)\n                {\n                    _log.LogWarning(ex, \"Send queue sweep failed\");\n                }\n\n                await Task.Delay(SweepEvery, stoppingToken);\n            }\n        }\n\n        private async Task ProcessJobAsync(Guid jobId, CancellationToken ct)\n        {\n            using var scope = _sp.CreateScope();\n            var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n            var queue = scope.ServiceProvider.GetRequiredService<IOutboundCampaignQueueService>();\n            var campaignService = scope.ServiceProvider.GetRequiredService<ICampaignService>();\n            var log = scope.ServiceProvider.GetRequiredService<ILogger<OutboundCampaignSendWorker>>();\n\n            var job = await db.OutboundCampaignJobs.FirstOrDefaultAsync(j => j.Id == jobId, ct);\n            if (job == null) return;\n\n            // Mark Campaign -> Sending\n            var campaign = await db.Campaigns\n                .FirstOrDefaultAsync(c => c.Id == job.CampaignId && c.BusinessId == job.BusinessId, ct);\n\n            if (campaign != null && campaign.Status != \"Sending\")\n            {\n                campaign.Status = \"Sending\";\n                campaign.UpdatedAt = DateTime.UtcNow;\n                await db.SaveChangesAsync(ct);\n            }\n\n            try\n            {\n                var result = await campaignService.SendTemplateCampaignWithTypeDetectionAsync(job.CampaignId);\n\n                if (result.Success)\n                {\n                    if (campaign != null)\n                    {\n                        campaign.Status = \"Sent\";\n                        campaign.UpdatedAt = DateTime.UtcNow;\n                        await db.SaveChangesAsync(ct);\n                    }\n\n                    await queue.MarkSucceededAsync(job.Id);\n                    log.LogInformation(\"Job {Job} succeeded for campaign {Campaign}\", jobId, job.CampaignId);\n                }\n                else\n                {\n                    // Compute whether we will retry BEFORE calling MarkFailed (Attempt not yet incremented)\n                    var willRetry = job.Attempt + 1 < job.MaxAttempts;\n\n                    if (campaign != null)\n                    {\n                        campaign.Status = willRetry ? \"Queued\" : \"Failed\";\n                        campaign.UpdatedAt = DateTime.UtcNow;\n                        await db.SaveChangesAsync(ct);\n                    }\n\n                    await queue.MarkFailedAsync(job.Id, result.Message ?? \"Unknown send error\", scheduleRetry: true);\n                    log.LogWarning(\"Job {Job} failed for campaign {Campaign}: {Msg}\", jobId, job.CampaignId, result.Message);\n                }\n            }\n            catch (Exception ex)\n            {\n                var willRetry = job.Attempt + 1 < job.MaxAttempts;\n\n                if (campaign != null)\n                {\n                    campaign.Status = willRetry ? \"Queued\" : \"Failed\";\n                    campaign.UpdatedAt = DateTime.UtcNow;\n                    await db.SaveChangesAsync(ct);\n                }\n\n                await queue.MarkFailedAsync(job.Id, ex.ToString(), scheduleRetry: true);\n                log.LogWarning(ex, \"Job {Job} exception for campaign {Campaign}\", jobId, job.CampaignId);\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Config/TrackingOptions.cs",
      "sha256": "76b42450eeb28f2d73ad6fc86ec956bc6e278f17ee17f5e517e0689e8a247483",
      "language": "csharp",
      "size": 337,
      "content": "// 📄 Features/CampaignTracking/Config/TrackingOptions.cs\nnamespace xbytechat.api.Features.CampaignTracking.Config\n{\n    public class TrackingOptions\n    {\n        public string BaseUrl { get; set; } = \"\";\n        public string Secret { get; set; } = \"\";\n        public TimeSpan TokenTtl { get; set; } = TimeSpan.FromDays(30);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignAnalyticsController.cs",
      "sha256": "7542c47e6bbe6d8117004542788bb0f078570eeae04c8045b385fc3b7eb5dde4",
      "language": "csharp",
      "size": 2494,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.CampaignTracking.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class CampaignAnalyticsController : BusinessControllerBase\n    {\n        private readonly ICampaignAnalyticsService _campaignAnalyticsService;\n        public CampaignAnalyticsController(ICampaignAnalyticsService svc) => _campaignAnalyticsService = svc;\n\n        [HttpGet(\"top-campaigns\")]\n        public async Task<IActionResult> GetTopCampaigns([FromQuery] int count = 5)\n            => Ok(await _campaignAnalyticsService.GetTopCampaignsAsync(BusinessId, count));\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using System.Security.Claims;\n//using xbytechat.api.Features.CampaignTracking.Services;\n\n//namespace xbytechat.api.Features.CampaignTracking.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    [Authorize]\n//    public class CampaignAnalyticsController : ControllerBase\n//    {\n//        private readonly ICampaignAnalyticsService _campaignAnalyticsService;\n\n//        public CampaignAnalyticsController(ICampaignAnalyticsService campaignAnalyticsService)\n//        {\n//            _campaignAnalyticsService = campaignAnalyticsService;\n//        }\n\n//        [HttpGet(\"status-dashboard\")]\n//        //public async Task<IActionResult> GetStatusDashboard()\n//        //{\n//        //    var businessIdString = User.FindFirstValue(\"BusinessId\");\n//        //    if (!Guid.TryParse(businessIdString, out var businessId))\n//        //    {\n//        //        return Unauthorized(\"Invalid business identifier.\");\n//        //    }\n//        //    var result = await _campaignAnalyticsService.GetStatusDashboardAsync(businessId);\n//        //    return Ok(result);\n//        //}\n\n//        [HttpGet(\"top-campaigns\")]\n//        public async Task<IActionResult> GetTopCampaigns([FromQuery] int count = 5)\n//        {\n//            var businessIdString = User.FindFirstValue(\"BusinessId\");\n//            if (!Guid.TryParse(businessIdString, out var businessId))\n//            {\n//                return Unauthorized(\"Invalid business identifier.\");\n//            }\n//            var result = await _campaignAnalyticsService.GetTopCampaignsAsync(businessId, count);\n//            return Ok(result);\n//        }\n//    }\n//}"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignRetryController.cs",
      "sha256": "7fb4bd32c18410353886a39bebaf5c0c6e24ea48ce01a75d6bb0c553613438f8",
      "language": "csharp",
      "size": 1241,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Authorize] // ✅ add this\n    [Route(\"api/campaign-retry\")]\n    public class CampaignRetryController : ControllerBase\n    {\n        private readonly ICampaignTrackingRetryService _retryService;\n\n        public CampaignRetryController(ICampaignTrackingRetryService retryService)\n        {\n            _retryService = retryService;\n        }\n\n        [HttpPost(\"{logId}/retry\")]\n        public async Task<IActionResult> RetrySingle(Guid logId)\n        {\n            var success = await _retryService.RetrySingleAsync(logId);\n            if (!success) return BadRequest(new { message = \"Retry failed or not allowed for this log.\" });\n            return Ok(new { success = true, message = \"Retry completed.\" });\n        }\n\n        [HttpPost(\"campaign/{campaignId}/retry-all\")]\n        public async Task<IActionResult> RetryAllInCampaign(Guid campaignId)\n            => Ok(new { success = true, retriedCount = await _retryService.RetryFailedInCampaignAsync(campaignId) });\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignSendLogController.cs",
      "sha256": "95a189e3fdcff8f648aef7e688a3e3ee83fb7147e59f77d78259862f9b99d84b",
      "language": "csharp",
      "size": 4499,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaign-logs\")]\n    public class CampaignSendLogController : ControllerBase\n    {\n        private readonly ICampaignSendLogService _logService;\n        private readonly ICampaignTrackingRetryService _retryService;\n\n        public CampaignSendLogController(\n            ICampaignSendLogService logService,\n            ICampaignTrackingRetryService retryService\n        )\n        {\n            _logService = logService;\n            _retryService = retryService;\n        }\n\n        //[HttpGet(\"campaign/{campaignId}\")]\n        //public async Task<IActionResult> GetLogsByCampaign(Guid campaignId)\n        //{\n        //    var logs = await _logService.GetLogsByCampaignIdAsync(campaignId);\n        //    return Ok(logs);\n        //}\n        [HttpGet(\"campaign/{campaignId}\")]\n        public async Task<IActionResult> GetLogsByCampaign(\n         Guid campaignId,\n         [FromQuery] string? status,\n         [FromQuery] string? search,\n         [FromQuery] int page = 1,\n         [FromQuery] int pageSize = 10)\n        {\n            var result = await _logService.GetLogsByCampaignIdAsync(campaignId, status, search, page, pageSize);\n            return Ok(result);\n        }\n        [HttpGet(\"campaign/{campaignId}/contact/{contactId}\")]\n        public async Task<IActionResult> GetLogsForContact(Guid campaignId, Guid contactId)\n        {\n            var logs = await _logService.GetLogsForContactAsync(campaignId, contactId);\n            return Ok(logs);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddSendLog([FromBody] CampaignSendLogDto dto)\n        {\n            var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n            var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n            var result = await _logService.AddSendLogAsync(dto, ipAddress, userAgent);\n            if (!result)\n                return BadRequest(new { message = \"Failed to add send log\" });\n\n            return Ok(new { success = true });\n        }\n\n        [HttpPut(\"{logId}/status\")]\n        public async Task<IActionResult> UpdateDeliveryStatus(Guid logId, [FromBody] DeliveryStatusUpdateDto dto)\n        {\n            var result = await _logService.UpdateDeliveryStatusAsync(logId, dto.Status, dto.DeliveredAt, dto.ReadAt);\n            if (!result)\n                return NotFound(new { message = \"Log not found\" });\n\n            return Ok(new { success = true });\n        }\n\n        [HttpPut(\"{logId}/track-click\")]\n        public async Task<IActionResult> TrackClick(Guid logId, [FromBody] ClickTrackDto dto)\n        {\n            var result = await _logService.TrackClickAsync(logId, dto.ClickType);\n            if (!result)\n                return NotFound(new { message = \"Log not found\" });\n\n            return Ok(new { success = true });\n        }\n\n        // ✅ FIXED: Retry a single log using correct interface method\n        [HttpPost(\"{logId}/retry\")]\n        public async Task<IActionResult> RetrySingle(Guid logId)\n        {\n            var result = await _retryService.RetrySingleAsync(logId);\n            if (!result)\n                return BadRequest(new { message = \"Retry failed\" });\n\n            return Ok(new { success = true });\n        }\n\n        // ✅ FIXED: Retry all failed logs using correct interface method\n        [HttpPost(\"campaign/{campaignId}/retry-all\")]\n        public async Task<IActionResult> RetryAll(Guid campaignId)\n        {\n            var result = await _retryService.RetryFailedInCampaignAsync(campaignId);\n            return Ok(new { success = true, retried = result });\n        }\n        // ✅ FIXED: Get summary of campaign logs as per Campaign ID\n        [HttpGet(\"campaign/{campaignId}/summary\")]\n        public async Task<IActionResult> GetCampaignSummary(Guid campaignId)\n        {\n            var summary = await _logService.GetCampaignSummaryAsync(campaignId);\n            return Ok(summary);\n        }\n\n    }\n\n    public class DeliveryStatusUpdateDto\n    {\n        public string Status { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n    }\n\n    public class ClickTrackDto\n    {\n        public string ClickType { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignTrackingController.cs",
      "sha256": "1e3e2b1e60144ec933cafdb53414ae6fad20463810533d32b90327dba457fde6",
      "language": "csharp",
      "size": 25258,
      "content": "// 📄 Features/CampaignTracking/Controllers/CampaignTrackingController.cs\nusing System.Text.Encodings.Web;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignTracking.Services;\nusing xbytechat.api.Features.CampaignTracking.Worker;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"r\")] // /r/{token}\n    public class CampaignTrackingController : ControllerBase\n    {\n        private static readonly HtmlEncoder HtmlEnc = HtmlEncoder.Default;\n\n        private readonly ILogger<CampaignTrackingController> _log;\n        private readonly IClickTokenService _token;\n        private readonly IClickEventQueue _queue;\n        private readonly AppDbContext _db;\n\n        public CampaignTrackingController(\n            ILogger<CampaignTrackingController> log,\n            IClickTokenService token,\n            IClickEventQueue queue,\n            AppDbContext db)\n        {\n            _log = log;\n            _token = token;\n            _queue = queue;\n            _db = db;\n        }\n\n        //[HttpGet(\"{token}\")]\n        //[AllowAnonymous]\n        //public async Task<IActionResult> RedirectByToken([FromRoute] string token, CancellationToken ct)\n        //{\n        //    // 1) Validate token\n        //    if (!_token.TryValidate(token, out var p, out var reason))\n        //    {\n        //        _log.LogWarning(\"Tracking token rejected. reason={Reason}\", reason);\n        //        return BadRequest(\"Invalid token.\");\n        //    }\n\n        //    // 2) Normalize + classify destination\n        //    if (!TryNormalizeAllowedDestination(p!.to, out var safeDest, out var scheme))\n        //    {\n        //        _log.LogWarning(\"Rejected destination for cid {Cid}: {Dest}\", p.cid, p.to);\n        //        return BadRequest(\"Invalid destination.\");\n        //    }\n\n        //    // 3) Capture client info\n        //    var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"0.0.0.0\";\n        //    var ua = Request.Headers.UserAgent.ToString();\n        //    var now = DateTime.UtcNow;\n\n        //    // 4) Determine click type (web | call | whatsapp)\n        //    var clickType = ClassifyClickType(safeDest, scheme);\n\n        //    // 4.1) Fetch related ids from the send log (for ContactId & CampaignId)\n        //    Guid? contactId = null;\n        //    Guid campaignId = Guid.Empty;\n        //    try\n        //    {\n        //        var sendLog = await _db.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(x => x.Id == p.cid)\n        //            .Select(x => new { x.ContactId, x.CampaignId })\n        //            .FirstOrDefaultAsync(ct);\n\n        //        if (sendLog is not null)\n        //        {\n        //            contactId = sendLog.ContactId;\n        //            campaignId = sendLog.CampaignId;\n        //        }\n        //        else\n        //        {\n        //            _log.LogWarning(\"SendLog not found for click cid={Cid}\", p.cid);\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Failed to fetch ContactId/CampaignId for cid={Cid}\", p.cid);\n        //    }\n\n        //    // 5) Write-through (guaranteed persistence)\n        //    try\n        //    {\n        //        await _db.CampaignClickLogs.AddAsync(new CampaignClickLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            CampaignSendLogId = p.cid,\n        //            CampaignId = campaignId,        // <-- populated if available (else Guid.Empty)\n        //            ContactId = contactId,          // <-- populated if available (nullable)\n        //            ButtonIndex = p.bi,\n        //            ButtonTitle = p.bt,\n        //            Destination = safeDest,\n        //            ClickedAt = now,\n        //            Ip = ip,\n        //            UserAgent = ua,\n        //            ClickType = clickType,\n        //            RunId = csl?.RunId\n        //        }, ct);\n\n        //        await _db.SaveChangesAsync(ct);\n\n        //        _log.LogInformation(\n        //            \"CLICK WRITE-THROUGH cid={Cid} idx={Idx} type={Type} dest={Dest}\",\n        //            p.cid, p.bi, clickType, safeDest);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Write-through insert failed. cid={Cid}\", p.cid);\n        //    }\n\n        //    // 6) Enqueue for async worker (best effort) — keeps existing ClickEvent signature\n        //    try\n        //    {\n        //        var enq = _queue.TryWrite(new ClickEvent(\n        //            CampaignSendLogId: p.cid,\n        //            ButtonIndex: p.bi,\n        //            ButtonTitle: p.bt,\n        //            Destination: safeDest,\n        //            ClickedAtUtc: now,\n        //            Ip: ip,\n        //            UserAgent: ua,\n        //            ClickType: clickType\n        //        ));\n        //        _log.LogInformation(\"CLICK ENQUEUE cid={Cid} idx={Idx} enqueued={Enqueued}\", p.cid, p.bi, enq);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Queue write threw. cid={Cid}\", p.cid);\n        //    }\n\n        //    // 7) First-click fast path\n        //    try\n        //    {\n        //        await _db.Database.ExecuteSqlRawAsync(\n        //            @\"update \"\"CampaignSendLogs\"\"\n        //                set \"\"IsClicked\"\"=TRUE, \"\"ClickedAt\"\"=NOW() at time zone 'utc'\n        //              where \"\"Id\"\"={0} and \"\"IsClicked\"\"=FALSE;\",\n        //            p.cid);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogDebug(ex, \"First-click update skipped.\");\n        //    }\n\n        //    // 8) Redirect handling\n        //    if (clickType is \"call\" or \"whatsapp\")\n        //    {\n        //        // Deep link → return an HTML/JS shim to trigger immediately, with a safe fallback link.\n        //        var destHtml = HtmlEnc.Encode(safeDest);\n        //        var destJs = JsEscape(safeDest);\n\n        //        var html = $@\"<!doctype html>\n        //        <html lang=\"\"en\"\">\n        //        <head>\n        //          <meta charset=\"\"utf-8\"\">\n        //          <meta http-equiv=\"\"x-ua-compatible\"\" content=\"\"ie=edge\"\">\n        //          <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n        //          <meta http-equiv=\"\"refresh\"\" content=\"\"0;url={destHtml}\"\">\n        //          <title>Redirecting…</title>\n        //          <style>\n        //            body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;padding:24px;}}\n        //            a{{color:#2563eb;text-decoration:underline;}}\n        //          </style>\n        //          <script>\n        //            // Trigger deep link immediately; reveal fallback if blocked by the browser.\n        //            window.addEventListener('load', function() {{\n        //              try {{ window.location.replace('{destJs}'); }} catch (e) {{}}\n        //              setTimeout(function() {{\n        //                var f = document.getElementById('fallback');\n        //                if (f) f.style.display = 'inline';\n        //              }}, 1200);\n        //            }});\n        //          </script>\n        //        </head>\n        //        <body>\n        //          <p>Redirecting… If you are not redirected automatically, <a id=\"\"fallback\"\" style=\"\"display:none\"\" href=\"\"{destHtml}\"\">tap here</a>.</p>\n        //        </body>\n        //        </html>\";\n\n        //        Response.Headers[\"Cache-Control\"] = \"no-store, max-age=0\";\n        //        Response.Headers[\"Pragma\"] = \"no-cache\";\n        //        Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n        //        Response.Headers[\"Referrer-Policy\"] = \"no-referrer\";\n        //        Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n        //        Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n        //        Response.Headers[\"Content-Security-Policy\"] =\n        //            \"default-src 'none'; script-src 'unsafe-inline'; style-src 'unsafe-inline'; base-uri 'none'; frame-ancestors 'none'\";\n\n        //        return new ContentResult\n        //        {\n        //            Content = html,\n        //            ContentType = \"text/html; charset=utf-8\",\n        //            StatusCode = 200\n        //        };\n        //    }\n\n        //    // Regular web links → normal 302\n        //    return Redirect(safeDest);\n        //}\n\n        // --- helpers ---\n\n\n        //[HttpGet(\"{token}\")]\n        //[AllowAnonymous]\n\n\n        //[HttpGet(\"{token}\")]\n        //[AllowAnonymous]\n\n        [HttpGet(\"{token}\")]\n        [AllowAnonymous]\n        public async Task<IActionResult> RedirectByToken([FromRoute] string token, CancellationToken ct)\n        {\n            // 1) Validate token\n            if (!_token.TryValidate(token, out var p, out var reason))\n            {\n                _log.LogWarning(\"Tracking token rejected. reason={Reason}\", reason);\n                return BadRequest(\"Invalid token.\");\n            }\n\n            // 2) Normalize + classify destination\n            if (!TryNormalizeAllowedDestination(p!.to, out var safeDest, out var scheme))\n            {\n                _log.LogWarning(\"Rejected destination for cid {Cid}: {Dest}\", p.cid, p.to);\n                return BadRequest(\"Invalid destination.\");\n            }\n\n            // 3) Capture client info\n            var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"0.0.0.0\";\n            var ua = Request.Headers.UserAgent.ToString();\n            var now = DateTime.UtcNow;\n\n            // 4) Determine click type (web | call | whatsapp)\n            var clickType = ClassifyClickType(safeDest, scheme);\n\n            // 4.1) Fetch related ids from the send log (ContactId, CampaignId, RunId)\n            Guid? contactId = null;\n            Guid? campaignId = null;   // <- make this nullable\n            Guid? runId = null;\n\n            try\n            {\n                var sendLog = await _db.CampaignSendLogs\n                    .AsNoTracking()\n                    .Where(x => x.Id == p.cid)\n                    .Select(x => new { x.ContactId, x.CampaignId, x.RunId })\n                    .FirstOrDefaultAsync(ct);\n\n                if (sendLog is not null)\n                {\n                    contactId = sendLog.ContactId;   // Guid?\n                    campaignId = sendLog.CampaignId;  // Guid?\n                    runId = sendLog.RunId;       // Guid?\n                }\n                else\n                {\n                    _log.LogWarning(\"SendLog not found for click cid={Cid}\", p.cid);\n                }\n            }\n            catch (Exception ex)\n            {\n                _log.LogError(ex, \"Failed to fetch ContactId/CampaignId/RunId for cid={Cid}\", p.cid);\n            }\n\n            // 5) Write-through (guaranteed persistence)\n            try\n            {\n                await _db.CampaignClickLogs.AddAsync(new CampaignClickLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignSendLogId = p.cid,\n                    // If the column is NON-nullable, coalesce to Guid.Empty; if you've made it nullable, assign campaignId directly.\n                    CampaignId = campaignId ?? Guid.Empty,\n                    ContactId = contactId,    // nullable OK\n                    ButtonIndex = p.bi,\n                    ButtonTitle = p.bt,\n                    Destination = safeDest,\n                    ClickedAt = now,\n                    Ip = ip,\n                    UserAgent = ua,\n                    ClickType = clickType,\n                    RunId = runId\n                }, ct);\n\n                await _db.SaveChangesAsync(ct);\n\n                _log.LogInformation(\"CLICK WRITE-THROUGH cid={Cid} idx={Idx} type={Type} dest={Dest}\",\n                    p.cid, p.bi, clickType, safeDest);\n            }\n            catch (Exception ex)\n            {\n                _log.LogError(ex, \"Write-through insert failed. cid={Cid}\", p.cid);\n            }\n\n            // 6) Enqueue for async worker (best effort)\n            try\n            {\n                var enq = _queue.TryWrite(new ClickEvent(\n                    CampaignSendLogId: p.cid,\n                    ButtonIndex: p.bi,\n                    ButtonTitle: p.bt,\n                    Destination: safeDest,\n                    ClickedAtUtc: now,\n                    Ip: ip,\n                    UserAgent: ua,\n                    ClickType: clickType\n                ));\n                _log.LogInformation(\"CLICK ENQUEUE cid={Cid} idx={Idx} enqueued={Enqueued}\", p.cid, p.bi, enq);\n            }\n            catch (Exception ex)\n            {\n                _log.LogError(ex, \"Queue write threw. cid={Cid}\", p.cid);\n            }\n\n            // 7) First-click fast path\n            try\n            {\n                await _db.Database.ExecuteSqlRawAsync(\n                    @\"update \"\"CampaignSendLogs\"\"\n              set \"\"IsClicked\"\"=TRUE,\n                  \"\"ClickedAt\"\"=NOW() at time zone 'utc',\n                  \"\"ClickType\"\"={1}\n              where \"\"Id\"\"={0} and \"\"IsClicked\"\"=FALSE;\",\n                    p.cid, clickType);\n            }\n            catch (Exception ex)\n            {\n                _log.LogDebug(ex, \"First-click update skipped.\");\n            }\n\n            // 8) Redirect handling\n            if (clickType is \"call\" or \"whatsapp\")\n            {\n                // ... (unchanged deep-link HTML)\n            }\n\n            return Redirect(safeDest);\n        }\n\n        //public async Task<IActionResult> RedirectByToken([FromRoute] string token, CancellationToken ct)\n        //{\n        //    // 1) Validate token\n        //    if (!_token.TryValidate(token, out var p, out var reason))\n        //    {\n        //        _log.LogWarning(\"Tracking token rejected. reason={Reason}\", reason);\n        //        return BadRequest(\"Invalid token.\");\n        //    }\n\n        //    // 2) Normalize + classify destination\n        //    if (!TryNormalizeAllowedDestination(p!.to, out var safeDest, out var scheme))\n        //    {\n        //        _log.LogWarning(\"Rejected destination for cid {Cid}: {Dest}\", p.cid, p.to);\n        //        return BadRequest(\"Invalid destination.\");\n        //    }\n\n        //    // 3) Capture client info\n        //    var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"0.0.0.0\";\n        //    var ua = Request.Headers.UserAgent.ToString();\n        //    var now = DateTime.UtcNow;\n\n        //    // 4) Determine click type (web | call | whatsapp)\n        //    var clickType = ClassifyClickType(safeDest, scheme);\n\n        //    // 4.1) Fetch related ids from the send log (ContactId, CampaignId, **RunId**)\n        //    Guid? contactId = null;\n        //    Guid campaignId = Guid.Empty;\n        //    Guid? runId = null; // 👈 NEW\n\n        //    try\n        //    {\n        //        var sendLog = await _db.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(x => x.Id == p.cid)\n        //            .Select(x => new { x.ContactId, x.CampaignId, x.RunId })\n        //            .FirstOrDefaultAsync(ct);\n\n        //        if (sendLog is not null)\n        //        {\n        //            contactId = sendLog.ContactId;\n        //            campaignId = sendLog.CampaignId;\n        //            runId = sendLog.RunId; // 👈 carry through to click log\n        //        }\n        //        else\n        //        {\n        //            _log.LogWarning(\"SendLog not found for click cid={Cid}\", p.cid);\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Failed to fetch ContactId/CampaignId/RunId for cid={Cid}\", p.cid);\n        //    }\n\n        //    // 5) Write-through (guaranteed persistence)\n        //    try\n        //    {\n        //        await _db.CampaignClickLogs.AddAsync(new CampaignClickLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            CampaignSendLogId = p.cid,\n        //            CampaignId = campaignId,   // populated if available (else Guid.Empty)\n        //            ContactId = contactId,     // nullable\n        //            ButtonIndex = p.bi,\n        //            ButtonTitle = p.bt,\n        //            Destination = safeDest,\n        //            ClickedAt = now,\n        //            Ip = ip,\n        //            UserAgent = ua,\n        //            ClickType = clickType,\n        //            RunId = runId              // 👈 bind click to the same run/session\n        //        }, ct);\n\n        //        await _db.SaveChangesAsync(ct);\n\n        //        _log.LogInformation(\n        //            \"CLICK WRITE-THROUGH cid={Cid} idx={Idx} type={Type} dest={Dest}\",\n        //            p.cid, p.bi, clickType, safeDest);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Write-through insert failed. cid={Cid}\", p.cid);\n        //    }\n\n        //    // 6) Enqueue for async worker (best effort) — keeps existing ClickEvent signature\n        //    try\n        //    {\n        //        var enq = _queue.TryWrite(new ClickEvent(\n        //            CampaignSendLogId: p.cid,\n        //            ButtonIndex: p.bi,\n        //            ButtonTitle: p.bt,\n        //            Destination: safeDest,\n        //            ClickedAtUtc: now,\n        //            Ip: ip,\n        //            UserAgent: ua,\n        //            ClickType: clickType\n        //        ));\n        //        _log.LogInformation(\"CLICK ENQUEUE cid={Cid} idx={Idx} enqueued={Enqueued}\", p.cid, p.bi, enq);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Queue write threw. cid={Cid}\", p.cid);\n        //    }\n\n        //    // 7) First-click fast path (also writes ClickType)\n        //    try\n        //    {\n        //        await _db.Database.ExecuteSqlRawAsync(\n        //            @\"update \"\"CampaignSendLogs\"\"\n        //        set \"\"IsClicked\"\"=TRUE,\n        //            \"\"ClickedAt\"\"=NOW() at time zone 'utc',\n        //            \"\"ClickType\"\"={1}\n        //      where \"\"Id\"\"={0} and \"\"IsClicked\"\"=FALSE;\",\n        //            p.cid, clickType);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogDebug(ex, \"First-click update skipped.\");\n        //    }\n\n        //    // 8) Redirect handling\n        //    if (clickType is \"call\" or \"whatsapp\")\n        //    {\n        //        // Deep link → return an HTML/JS shim to trigger immediately, with a safe fallback link.\n        //        var destHtml = HtmlEnc.Encode(safeDest);\n        //        var destJs = JsEscape(safeDest);\n\n        //        var html = $@\"<!doctype html>\n        //                <html lang=\"\"en\"\">\n        //                <head>\n        //                  <meta charset=\"\"utf-8\"\">\n        //                  <meta http-equiv=\"\"x-ua-compatible\"\" content=\"\"ie=edge\"\">\n        //                  <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n        //                  <meta http-equiv=\"\"refresh\"\" content=\"\"0;url={destHtml}\"\">\n        //                  <title>Redirecting…</title>\n        //                  <style>\n        //                    body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;padding:24px;}}\n        //                    a{{color:#2563eb;text-decoration:underline;}}\n        //                  </style>\n        //                  <script>\n        //                    // Trigger deep link immediately; reveal fallback if blocked by the browser.\n        //                    window.addEventListener('load', function() {{\n        //                      try {{ window.location.replace('{destJs}'); }} catch (e) {{}}\n        //                      setTimeout(function() {{\n        //                        var f = document.getElementById('fallback');\n        //                        if (f) f.style.display = 'inline';\n        //                      }}, 1200);\n        //                    }});\n        //                  </script>\n        //                </head>\n        //                <body>\n        //                  <p>Redirecting… If you are not redirected automatically, <a id=\"\"fallback\"\" style=\"\"display:none\"\" href=\"\"{destHtml}\"\">tap here</a>.</p>\n        //                </body>\n        //                </html>\";\n\n        //        Response.Headers[\"Cache-Control\"] = \"no-store, max-age=0\";\n        //        Response.Headers[\"Pragma\"] = \"no-cache\";\n        //        Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n        //        Response.Headers[\"Referrer-Policy\"] = \"no-referrer\";\n        //        Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n        //        Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n        //        Response.Headers[\"Content-Security-Policy\"] =\n        //            \"default-src 'none'; script-src 'unsafe-inline'; style-src 'unsafe-inline'; base-uri 'none'; frame-ancestors 'none'\";\n\n        //        return new ContentResult\n        //        {\n        //            Content = html,\n        //            ContentType = \"text/html; charset=utf-8\",\n        //            StatusCode = 200\n        //        };\n        //    }\n\n        //    // Regular web links → normal 302\n        //    return Redirect(safeDest);\n        //}\n\n\n        private static string ClassifyClickType(string normalizedDest, string scheme)\n        {\n            // scheme is pre-normalized by TryNormalizeAllowedDestination\n            if (string.Equals(scheme, \"tel\", StringComparison.OrdinalIgnoreCase)) return \"call\";\n            if (string.Equals(scheme, \"wa\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n            if (string.Equals(scheme, \"whatsapp\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n\n            // http/https → still treat WhatsApp hosts as whatsapp\n            if (normalizedDest.StartsWith(\"https://wa.me/\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n            if (normalizedDest.StartsWith(\"https://api.whatsapp.com/\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n\n            return \"web\";\n        }\n\n        private static string JsEscape(string s) =>\n            s.Replace(\"\\\\\", \"\\\\\\\\\").Replace(\"'\", \"\\\\'\").Replace(\"\\r\", \"\").Replace(\"\\n\", \"\");\n\n        /// <summary>\n        /// Accepts: http/https/tel/wa/whatsapp, plus shorthand wa.me/... and api.whatsapp.com/...\n        /// Returns normalized absolute string and a normalized scheme hint (\"http\",\"https\",\"tel\",\"wa\",\"whatsapp\").\n        /// </summary>\n        private static bool TryNormalizeAllowedDestination(string? input, out string normalized, out string scheme)\n        {\n            normalized = string.Empty;\n            scheme = string.Empty;\n            if (string.IsNullOrWhiteSpace(input)) return false;\n\n            var cleaned = new string(input.Trim().Where(c => !char.IsControl(c)).ToArray());\n\n            // Shorthand WhatsApp hosts without scheme → prefix https://\n            if (!cleaned.Contains(\"://\", StringComparison.Ordinal))\n            {\n                if (cleaned.StartsWith(\"wa.me/\", StringComparison.OrdinalIgnoreCase) ||\n                    cleaned.StartsWith(\"api.whatsapp.com/\", StringComparison.OrdinalIgnoreCase))\n                {\n                    var guess = \"https://\" + cleaned;\n                    if (Uri.TryCreate(guess, UriKind.Absolute, out var waAbs))\n                    {\n                        normalized = waAbs.AbsoluteUri;\n                        scheme = \"https\";\n                        return true;\n                    }\n                }\n            }\n\n            // WhatsApp custom schemes (wa:, whatsapp:)\n            if (cleaned.StartsWith(\"wa:\", StringComparison.OrdinalIgnoreCase))\n            {\n                normalized = cleaned; scheme = \"wa\"; return true;\n            }\n            if (cleaned.StartsWith(\"whatsapp:\", StringComparison.OrdinalIgnoreCase))\n            {\n                normalized = cleaned; scheme = \"whatsapp\"; return true;\n            }\n\n            // Absolute URIs\n            if (Uri.TryCreate(cleaned, UriKind.Absolute, out var uri))\n            {\n                // tel:\n                if (uri.Scheme.Equals(\"tel\", StringComparison.OrdinalIgnoreCase))\n                {\n                    normalized = uri.ToString(); scheme = \"tel\"; return true;\n                }\n\n                // http/https (including WhatsApp hosts)\n                if (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase))\n                {\n                    normalized = uri.AbsoluteUri;\n                    scheme = uri.Scheme; // \"http\" or \"https\"\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignLogSummaryDto.cs",
      "sha256": "57aa29e375f6dda32b73602de1a84e9d5e89e3f8bf103914b21bfa14f0b786a9",
      "language": "csharp",
      "size": 415,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignLogSummaryDto\n    {\n        public int TotalSent { get; set; }\n        public int FailedCount { get; set; }\n        public int ClickedCount { get; set; }\n        public DateTime? LastSentAt { get; set; }\n\n        public int Delivered { get; set; }\n        public int Read { get; set; }\n        public int Sent { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignSendLogDto.cs",
      "sha256": "e4401d635c37b8b9990e5b0b8137ffe065550330c45ccf4638e336b803e6c5cf",
      "language": "csharp",
      "size": 1730,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignSendLogDto\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Relationships\n        public Guid CampaignId { get; set; }\n        public Guid? ContactId { get; set; }\n        public string ContactName { get; set; }\n        public string ContactPhone { get; set; }\n\n        public string? RecipientNumber { get; set; }\n        // 📤 Message Info\n        public Guid RecipientId { get; set; }\n        public string MessageBody { get; set; }\n        public string? TemplateId { get; set; }\n        public string? SendStatus { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        // 🕒 Timestamps\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // 🌐 Metadata\n        public string? SourceChannel { get; set; }\n        public string? IpAddress { get; set; }\n        public string? DeviceInfo { get; set; }\n        public string? MacAddress { get; set; }\n\n        // ✅ Enriched metadata\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 📈 Click Tracking\n        public bool IsClicked { get; set; }\n        public DateTime? ClickedAt { get; set; }\n        public string? ClickType { get; set; }\n\n        // 🔁 Retry Info\n        public string? RetryStatus { get; set; }     // Pending, Retried, Skipped\n        public int RetryCount { get; set; }\n        public DateTime? LastRetryAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignStatusDashboardDto.cs",
      "sha256": "21979b3b1de98ab2567e6485c9c0e4684b848735d36743226caaca66504e9b7b",
      "language": "csharp",
      "size": 1038,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignStatusDashboardDto\n    {\n        public Guid CampaignId { get; set; }\n\n        // 📊 Overall Stats\n        public int TotalRecipients { get; set; }\n        public int SentCount { get; set; }\n        public int DeliveredCount { get; set; }\n        public int ReadCount { get; set; }\n        public int FailedCount { get; set; }\n\n        // 🕒 Delivery Timing (optional but insightful)\n        public DateTime? FirstSentAt { get; set; }\n        public DateTime? LastSentAt { get; set; }\n        public DateTime? FirstReadAt { get; set; }\n        public DateTime? LastReadAt { get; set; }\n\n        // 📉 Delivery Rates\n        public double DeliveryRate => TotalRecipients == 0 ? 0 : (double)DeliveredCount / TotalRecipients * 100;\n        public double ReadRate => TotalRecipients == 0 ? 0 : (double)ReadCount / TotalRecipients * 100;\n        public double FailureRate => TotalRecipients == 0 ? 0 : (double)FailedCount / TotalRecipients * 100;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/TopCampaignDto.cs",
      "sha256": "deebf224725de4a79f8363405623b0761fed9b776ec86cc8d6a9b05c5f79940e",
      "language": "csharp",
      "size": 295,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class TopCampaignDto\n    {\n        public Guid CampaignId { get; set; }\n        public string CampaignName { get; set; }\n        public double ReadRate { get; set; }\n        public double ClickThroughRate { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Models/CampaignClickDailyAgg.cs",
      "sha256": "f73f8e07824860d62b98ba1112933870fd6c223a3a75ca759bccf5899d9e9ffd",
      "language": "csharp",
      "size": 571,
      "content": "// 📄 Features/CampaignTracking/Models/CampaignClickDailyAgg.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    [Table(\"CampaignClickDailyAgg\")]\n    public class CampaignClickDailyAgg\n    {\n        [Key] public Guid Id { get; set; }\n        public Guid CampaignId { get; set; }\n        public DateTime Day { get; set; } // date-only (store as date in migration)\n        public int ButtonIndex { get; set; }\n        public long Clicks { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Models/CampaignClickLog.cs",
      "sha256": "c955c29fed1ef4d960a247c80426a21493ab53a3b657a4a21083d2f617d309cb",
      "language": "csharp",
      "size": 1205,
      "content": "// 📄 Features/CampaignTracking/Models/CampaignClickLog.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    [Table(\"CampaignClickLogs\")]\n    public class CampaignClickLog\n    {\n        [Key] public Guid Id { get; set; }\n\n        public Guid? RunId { get; set; }\n        // FK through CampaignSendLog to CampaignId & ContactId\n        public Guid CampaignSendLogId { get; set; }\n\n        public Guid CampaignId { get; set; }      // denormalized for fast filtering\n        public Guid? ContactId { get; set; }      // denormalized if available\n\n        public int ButtonIndex { get; set; }\n\n        [MaxLength(120)]\n        public string ButtonTitle { get; set; } = \"\";\n\n        // NEW: \"web\" | \"call\" | \"whatsapp\" (lowercase)\n        [MaxLength(16)]\n        public string ClickType { get; set; } = \"web\";\n\n        [MaxLength(2048)]\n        public string Destination { get; set; } = \"\";\n\n        [MaxLength(64)]\n        public string Ip { get; set; } = \"\";\n\n        [MaxLength(512)]\n        public string UserAgent { get; set; } = \"\";\n\n        public DateTime ClickedAt { get; set; }\n    }\n}\n"
    }
  ]
}
