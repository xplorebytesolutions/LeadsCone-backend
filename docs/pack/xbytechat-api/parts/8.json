{
  "name": "xbytechat-api",
  "part": 8,
  "of": 9,
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Migrations/20251002055351_ContactJourneyStateHostinger.Designer.cs",
      "sha256": "58b9ff43cbbd611e40a224e20e1fa7ba4e3aebd01a8bd02b0d13ff6a88ce0358",
      "language": "csharp",
      "size": 155847,
      "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20251002055351_ContactJourneyStateHostinger\")]\n    partial class ContactJourneyStateHostinger\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.18\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonBundleJson\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConversationCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ConversationId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTimeOffset?>(\"ConversationStartedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"FlowVersion\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<bool?>(\"IsChargeable\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"MessageTime\")\n                        .ValueGeneratedOnAddOrUpdate()\n                        .HasColumnType(\"timestamp with time zone\")\n                        .HasComputedColumnSql(\"COALESCE(\\\"SentAt\\\", \\\"CreatedAt\\\")\", true);\n\n                    b.Property<decimal?>(\"PriceAmount\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<string>(\"PriceCurrency\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProviderMessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageId\");\n\n                    b.HasIndex(\"RunId\");\n\n                    b.HasIndex(\"BusinessId\", \"ConversationId\")\n                        .HasDatabaseName(\"IX_MessageLogs_BizConversation\")\n                        .HasFilter(\"\\\"ConversationId\\\" IS NOT NULL\");\n\n                    b.HasIndex(\"BusinessId\", \"CreatedAt\")\n                        .HasDatabaseName(\"IX_MessageLogs_BizCreatedAt\");\n\n                    b.HasIndex(\"BusinessId\", \"MessageId\")\n                        .HasDatabaseName(\"IX_MessageLogs_Business_MessageId\");\n\n                    b.HasIndex(\"BusinessId\", \"ProviderMessageId\")\n                        .HasDatabaseName(\"IX_MessageLogs_BizProviderMessage\")\n                        .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n\n                    b.HasIndex(\"BusinessId\", \"RecipientNumber\")\n                        .HasDatabaseName(\"IX_MessageLogs_Business_Recipient\");\n\n                    b.HasIndex(\"BusinessId\", \"IsIncoming\", \"ContactId\", \"MessageTime\")\n                        .HasDatabaseName(\"ix_msglogs_biz_in_contact_msgtime\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"62858aa2-3a54-4fd5-8696-c343d9af7634\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Email = \"admin@xbytechat.com\",\n                            IsDeleted = false,\n                            Name = \"Super Admin\",\n                            PasswordHash = \"JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk=\",\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            Status = \"active\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.WhatsAppTemplate\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Body\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonsJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasMaxLength(40)\n                        .HasColumnType(\"character varying(40)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ExternalId\")\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<bool>(\"HasImageHeader\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Language\")\n                        .IsRequired()\n                        .HasMaxLength(16)\n                        .HasColumnType(\"character varying(16)\");\n\n                    b.Property<DateTime>(\"LastSyncedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(160)\n                        .HasColumnType(\"character varying(160)\");\n\n                    b.Property<int>(\"PlaceholderCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasMaxLength(40)\n                        .HasColumnType(\"character varying(40)\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"Name\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\");\n\n                    b.HasIndex(\"BusinessId\", \"Name\", \"Language\", \"Provider\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppTemplates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"ProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ProfileNameUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"PhoneNumber\")\n                        .IsUnique()\n                        .HasDatabaseName(\"IX_Contacts_BusinessId_PhoneNumber\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Dashboard\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Campaign\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Campaign\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Campaign\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Catalog\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Catalog\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Catalog\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"CRM\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000011\"),\n                            Code = \"admin.plans.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.plans.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000012\"),\n                            Code = \"admin.plans.create\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.plans.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000013\"),\n                            Code = \"admin.plans.update\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.plans.update\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000014\"),\n                            Code = \"admin.plans.delete\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.plans.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"74c8034f-d9cb-4a17-8578-a9f765bd845c\"),\n                            Code = \"messaging.report.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.report.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"c819f1bd-422d-4609-916c-cc185fe44ab0\"),\n                            Code = \"messaging.status.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.status.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"eecd0fac-223c-4dba-9fa1-2a6e973d61d1\"),\n                            Code = \"messaging.inbox.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.inbox.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"974af1f9-3caa-4857-a1a7-48462c389332\"),\n                            Code = \"messaging.send.text\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.send.text\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0485154c-dde5-4732-a7aa-a379c77a5b27\"),\n                            Code = \"messaging.send.template\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.send.template\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"29461562-ef9c-48c0-a606-482ff57b8f95\"),\n                            Code = \"messaging.send\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.send\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"bbc5202a-eac9-40bb-aa78-176c677dbf5b\"),\n                            Code = \"messaging.whatsappsettings.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.whatsappsettings.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"205b87c7-b008-4e51-9fea-798c2dc4f9c2\"),\n                            Code = \"admin.whatsappsettings.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.whatsappsettings.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"6e4d3a86-7cf9-4ac2-b8a7-ed10c9f0173d\"),\n                            Code = \"settings.whatsapp.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Settings\",\n                            IsActive = true,\n                            Name = \"Settings - WhatsApp View\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ad36cdb7-5221-448b-a6a6-c35c9f88d021\"),\n                            Code = \"inbox.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Inbox\",\n                            IsActive = true,\n                            Name = \"inbox.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"74828fc0-e358-4cfc-b924-13719a0d9f50\"),\n                            Code = \"inbox.menu\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Inbox\",\n                            IsActive = true,\n                            Name = \"inbox.menu\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"98572fe7-d142-475a-b990-f248641809e2\"),\n                            Code = \"settings.profile.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Settings\",\n                            IsActive = true,\n                            Name = \"settings.profile.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"821480c6-1464-415e-bba8-066fcb4e7e63\"),\n                            Code = \"automation.menu\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.menu\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"918a61d0-5ab6-46af-a3d3-41e37b7710f9\"),\n                            Code = \"automation.Create.Template.Flow\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.Create.Template.Flow\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9ae90cfe-3fea-4307-b024-3083c2728148\"),\n                            Code = \"automation.View.Template.Flow\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.View.Template.Flow\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"93c5d5a7-f8dd-460a-8c7b-e3788440ba3a\"),\n                            Code = \"automation.Create.TemplatePlusFreetext.Flow\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.Create.TemplatePlusFreetext.Flow\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7d7cbceb-4ce7-4835-85cd-59562487298d\"),\n                            Code = \"automation.View.TemplatePlusFreetext.Flow\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.View.TemplatePlusFreetext.Flow\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"636b17f2-1c54-4e26-a8cd-dbf561dcb522\"),\n                            Code = \"automation.View.Template.Flow_analytics\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.View.Template.Flow_analytics\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"adfa8490-9705-4a36-a86e-d5bff7ddc220\"),\n                            Code = \"automation.View.TemplatePlusFreeText.Flow_analytics\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.View.TemplatePlusFreeText.Flow_analytics\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0dedac5b-81c8-44c3-8cfe-76c58e29c6db\"),\n                            Code = \"automation_trigger_test\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation_trigger_test\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"5f9f5de1-a0b2-48ba-b03d-77b27345613f\"),\n                            Code = \"basic\",\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Default free plan\",\n                            IsActive = true,\n                            Name = \"Basic\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FlowName\", \"IsActive\")\n                        .IsUnique();\n\n                    b.HasIndex(\"BusinessId\", \"IsActive\", \"FlowName\")\n                        .HasDatabaseName(\"ix_ctaflowconfigs_biz_active_name\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<int?>(\"ProfileNameSlot\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"UseProfileName\")\n                        .HasColumnType(\"boolean\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<short>(\"ButtonIndex\")\n                        .HasColumnType(\"smallint\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<short?>(\"ButtonIndex\")\n                        .HasColumnType(\"smallint\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RequestId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Audience\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"CreatedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CsvBatchId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Description\")\n                        .HasMaxLength(512)\n                        .HasColumnType(\"character varying(512)\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(160)\n                        .HasColumnType(\"character varying(160)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CsvBatchId\");\n\n                    b.HasIndex(\"BusinessId\", \"CampaignId\");\n\n                    b.HasIndex(\"BusinessId\", \"CsvBatchId\");\n\n                    b.HasIndex(\"BusinessId\", \"IsDeleted\")\n                        .HasDatabaseName(\"ix_audiences_biz_deleted\");\n\n                    b.ToTable(\"Audiences\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.AudienceMember\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"AttributesJson\")\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<Guid>(\"AudienceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"CreatedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"character varying(256)\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsTransientContact\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .HasMaxLength(160)\n                        .HasColumnType(\"character varying(160)\");\n\n                    b.Property<string>(\"PhoneE164\")\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<string>(\"PhoneRaw\")\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<DateTime?>(\"PromotedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\")\n                        .HasDatabaseName(\"ix_audmember_contact\");\n\n                    b.HasIndex(\"AudienceId\", \"PhoneE164\")\n                        .IsUnique()\n                        .HasDatabaseName(\"ux_audmember_audience_phone\");\n\n                    b.ToTable(\"AudienceMembers\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AudienceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DocumentUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateSchemaSnapshot\")\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"VideoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AudienceMemberId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"IdempotencyKey\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"MaterializedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ResolvedButtonUrlsJson\")\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<string>(\"ResolvedParametersJson\")\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"AudienceMemberId\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"IdempotencyKey\")\n                        .HasDatabaseName(\"ix_campaignrecipients_idempotency\");\n\n                    b.HasIndex(\"CampaignId\", \"ContactId\")\n                        .HasDatabaseName(\"ix_recipients_campaign_contact\");\n\n                    b.ToTable(\"CampaignRecipients\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignVariableMap\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Component\")\n                        .IsRequired()\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"CreatedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"DefaultValue\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Expression\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Index\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<bool>(\"IsRequired\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"SourceKey\")\n                        .HasMaxLength(128)\n                        .HasColumnType(\"character varying(128)\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<string>(\"StaticValue\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignVariableMaps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CsvBatch\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AudienceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Checksum\")\n                        .HasMaxLength(128)\n                        .HasColumnType(\"character varying(128)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"CreatedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FileName\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"character varying(256)\");\n\n                    b.Property<string>(\"HeadersJson\")\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<int>(\"RowCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"SkippedCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"AudienceId\");\n\n                    b.HasIndex(\"Checksum\")\n                        .HasDatabaseName(\"ix_csvbatch_checksum\");\n\n                    b.HasIndex(\"BusinessId\", \"AudienceId\");\n\n                    b.HasIndex(\"BusinessId\", \"CreatedAt\")\n                        .HasDatabaseName(\"ix_csvbatch_biz_created\");\n\n                    b.ToTable(\"CsvBatches\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CsvRow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BatchId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"PhoneE164\")\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<string>(\"PhoneRaw\")\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<int>(\"RowIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RowJson\")\n                        .IsRequired()\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<string>(\"ValidationError\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PhoneE164\")\n                        .HasDatabaseName(\"ix_csvrow_phone\");\n\n                    b.HasIndex(\"BatchId\", \"RowIndex\")\n                        .IsUnique()\n                        .HasDatabaseName(\"ux_csvrow_batch_rowidx\");\n\n                    b.HasIndex(\"BusinessId\", \"BatchId\");\n\n                    b.ToTable(\"CsvRows\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.OutboundCampaignJob\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"Attempt\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastError\")\n                        .HasMaxLength(4000)\n                        .HasColumnType(\"character varying(4000)\");\n\n                    b.Property<int>(\"MaxAttempts\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTimeOffset>(\"NextAttemptAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"Status\", \"NextAttemptAt\");\n\n                    b.ToTable(\"OutboundCampaignJobs\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonBundleJson\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"RunId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.HasIndex(\"BusinessId\", \"MessageId\")\n                        .HasDatabaseName(\"IX_CampaignSendLogs_Business_MessageId\");\n\n                    b.HasIndex(\"BusinessId\", \"SendStatus\", \"SentAt\")\n                        .HasDatabaseName(\"IX_CampaignSendLogs_StatusTime\");\n\n                    b.ToTable(\"CampaignSendLogs\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Worker.CampaignClickDailyAgg\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ButtonIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<long>(\"Clicks\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<DateTime>(\"Day\")\n                        .HasColumnType(\"date\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\", \"Day\", \"ButtonIndex\")\n                        .IsUnique();\n\n                    b.ToTable(\"CampaignClickDailyAgg\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Worker.CampaignClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ButtonIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ButtonTitle\")\n                        .IsRequired()\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ClickType\")\n                        .IsRequired()\n                        .HasMaxLength(16)\n                        .HasColumnType(\"character varying(16)\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Destination\")\n                        .IsRequired()\n                        .HasMaxLength(2048)\n                        .HasColumnType(\"character varying(2048)\");\n\n                    b.Property<string>(\"Ip\")\n                        .IsRequired()\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .IsRequired()\n                        .HasMaxLength(512)\n                        .HasColumnType(\"character varying(512)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\", \"ButtonIndex\");\n\n                    b.HasIndex(\"CampaignId\", \"ContactId\");\n\n                    b.HasIndex(\"CampaignId\", \"ClickType\", \"ClickedAt\");\n\n                    b.ToTable(\"CampaignClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CustomeApi.Models.ApiKey\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ExpiresAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Prefix\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Scopes\")\n                        .IsRequired()\n                        .HasMaxLength(512)\n                        .HasColumnType(\"character varying(512)\");\n\n                    b.Property<string>(\"SecretHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"Prefix\")\n                        .IsUnique();\n\n                    b.ToTable(\"ApiKeys\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CustomeApi.Models.ContactJourneyState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ClickCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"JourneyText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastButtonText\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"character varying(256)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FlowId\", \"ContactPhone\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactJourneyStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CustomeApi.Models.CustomerWebhookConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BearerToken\")\n                        .HasMaxLength(2048)\n                        .HasColumnType(\"character varying(2048)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Url\")\n                        .IsRequired()\n                        .HasMaxLength(1024)\n                        .HasColumnType(\"character varying(1024)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CustomerWebhookConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.HasIndex(\"BusinessId\", \"UserId\", \"ContactId\")\n                        .IsUnique()\n                        .HasDatabaseName(\"ux_contactreads_biz_user_contact\");\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.QuickReply\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Body\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Language\")\n                        .HasMaxLength(8)\n                        .HasColumnType(\"character varying(8)\");\n\n                    b.Property<Guid?>(\"OwnerUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"Scope\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TagsCsv\")\n                        .HasMaxLength(240)\n                        .HasColumnType(\"character varying(240)\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"timestamp with time zone\")\n                        .HasDefaultValueSql(\"NOW()\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"UpdatedAt\");\n\n                    b.HasIndex(\"BusinessId\", \"OwnerUserId\", \"IsActive\");\n\n                    b.HasIndex(\"BusinessId\", \"Scope\", \"IsActive\");\n\n                    b.ToTable(\"QuickReplies\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.WhatsAppSettings.Models.WhatsAppPhoneNumber\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefault\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\", \"PhoneNumberId\")\n                        .IsUnique()\n                        .HasDatabaseName(\"IX_WhatsAppPhoneNumbers_BizProviderPhone\");\n\n                    b.ToTable(\"WhatsAppPhoneNumbers\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.Features.Billing.Models.ProviderBillingEvent\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConversationCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ConversationId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTimeOffset>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool?>(\"IsChargeable\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTimeOffset>(\"OccurredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"PayloadJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal?>(\"PriceAmount\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<string>(\"PriceCurrency\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProviderMessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"ConversationId\")\n                        .HasDatabaseName(\"IX_Billing_BizConversation\")\n                        .HasFilter(\"\\\"ConversationId\\\" IS NOT NULL\");\n\n                    b.HasIndex(\"BusinessId\", \"ProviderMessageId\")\n                        .HasDatabaseName(\"IX_Billing_BizProviderMessage\")\n                        .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n\n                    b.HasIndex(\"BusinessId\", \"EventType\", \"OccurredAt\")\n                        .HasDatabaseName(\"IX_Billing_BizEventTime\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\", \"ProviderMessageId\", \"EventType\")\n                        .IsUnique()\n                        .HasDatabaseName(\"UX_ProviderBillingEvents_UniqueEvent\")\n                        .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n\n                    b.ToTable(\"ProviderBillingEvents\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiKey\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WebhookCallbackUrl\")\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"WebhookSecret\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"WebhookVerifyToken\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasAlternateKey(\"BusinessId\", \"Provider\")\n                        .HasName(\"AK_WhatsAppSettings_BusinessId_Provider\");\n\n                    b.HasIndex(\"Provider\", \"PhoneNumberId\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_PhoneNumberId\");\n\n                    b.HasIndex(\"Provider\", \"WabaId\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_WabaId\");\n\n                    b.HasIndex(\"Provider\", \"WebhookCallbackUrl\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_CallbackUrl\");\n\n                    b.HasIndex(\"Provider\", \"WhatsAppBusinessNumber\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_BusinessNumber\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\", \"IsActive\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_BizProviderActive\");\n\n                    b.ToTable(\"WhatsAppSettings\", (string)null);\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"Businesses\")\n                        .HasForeignKey(\"PlanId\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Audience\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Audiences\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CsvBatch\", \"CsvBatch\")\n                        .WithMany()\n                        .HasForeignKey(\"CsvBatchId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CsvBatch\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.AudienceMember\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Audience\", \"Audience\")\n                        .WithMany(\"Members\")\n                        .HasForeignKey(\"AudienceId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Audience\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"CTAFlowConfig\")\n                        .WithMany()\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"CTAFlowConfig\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.AudienceMember\", \"AudienceMember\")\n                        .WithMany()\n                        .HasForeignKey(\"AudienceMemberId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n\n                    b.Navigation(\"AudienceMember\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignVariableMap\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"VariableMaps\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CsvBatch\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Audience\", null)\n                        .WithMany()\n                        .HasForeignKey(\"AudienceId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CsvRow\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CsvBatch\", \"Batch\")\n                        .WithMany()\n                        .HasForeignKey(\"BatchId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Batch\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.WhatsAppSettings.Models.WhatsAppPhoneNumber\", b =>\n                {\n                    b.HasOne(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", null)\n                        .WithMany(\"WhatsAppBusinessNumbers\")\n                        .HasForeignKey(\"BusinessId\", \"Provider\")\n                        .HasPrincipalKey(\"BusinessId\", \"Provider\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithMany(\"WhatsAppSettings\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"Businesses\");\n\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Audience\", b =>\n                {\n                    b.Navigation(\"Members\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"Audiences\");\n\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"VariableMaps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Navigation(\"WhatsAppBusinessNumbers\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Migrations/AppDbContextModelSnapshot.cs",
      "sha256": "ed62eb5bec99d41f4a0e23475cce8f3c2a46cfa97c73148ab33f66abe4b6bf7d",
      "language": "csharp",
      "size": 155716,
      "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    partial class AppDbContextModelSnapshot : ModelSnapshot\n    {\n        protected override void BuildModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.18\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonBundleJson\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConversationCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ConversationId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTimeOffset?>(\"ConversationStartedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"FlowVersion\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<bool?>(\"IsChargeable\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"MessageTime\")\n                        .ValueGeneratedOnAddOrUpdate()\n                        .HasColumnType(\"timestamp with time zone\")\n                        .HasComputedColumnSql(\"COALESCE(\\\"SentAt\\\", \\\"CreatedAt\\\")\", true);\n\n                    b.Property<decimal?>(\"PriceAmount\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<string>(\"PriceCurrency\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProviderMessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageId\");\n\n                    b.HasIndex(\"RunId\");\n\n                    b.HasIndex(\"BusinessId\", \"ConversationId\")\n                        .HasDatabaseName(\"IX_MessageLogs_BizConversation\")\n                        .HasFilter(\"\\\"ConversationId\\\" IS NOT NULL\");\n\n                    b.HasIndex(\"BusinessId\", \"CreatedAt\")\n                        .HasDatabaseName(\"IX_MessageLogs_BizCreatedAt\");\n\n                    b.HasIndex(\"BusinessId\", \"MessageId\")\n                        .HasDatabaseName(\"IX_MessageLogs_Business_MessageId\");\n\n                    b.HasIndex(\"BusinessId\", \"ProviderMessageId\")\n                        .HasDatabaseName(\"IX_MessageLogs_BizProviderMessage\")\n                        .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n\n                    b.HasIndex(\"BusinessId\", \"RecipientNumber\")\n                        .HasDatabaseName(\"IX_MessageLogs_Business_Recipient\");\n\n                    b.HasIndex(\"BusinessId\", \"IsIncoming\", \"ContactId\", \"MessageTime\")\n                        .HasDatabaseName(\"ix_msglogs_biz_in_contact_msgtime\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"62858aa2-3a54-4fd5-8696-c343d9af7634\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Email = \"admin@xbytechat.com\",\n                            IsDeleted = false,\n                            Name = \"Super Admin\",\n                            PasswordHash = \"JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk=\",\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            Status = \"active\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.WhatsAppTemplate\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Body\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonsJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasMaxLength(40)\n                        .HasColumnType(\"character varying(40)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ExternalId\")\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<bool>(\"HasImageHeader\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Language\")\n                        .IsRequired()\n                        .HasMaxLength(16)\n                        .HasColumnType(\"character varying(16)\");\n\n                    b.Property<DateTime>(\"LastSyncedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(160)\n                        .HasColumnType(\"character varying(160)\");\n\n                    b.Property<int>(\"PlaceholderCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasMaxLength(40)\n                        .HasColumnType(\"character varying(40)\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"Name\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\");\n\n                    b.HasIndex(\"BusinessId\", \"Name\", \"Language\", \"Provider\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppTemplates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"ProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ProfileNameUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"PhoneNumber\")\n                        .IsUnique()\n                        .HasDatabaseName(\"IX_Contacts_BusinessId_PhoneNumber\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Dashboard\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Campaign\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Campaign\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Campaign\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Catalog\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Catalog\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Catalog\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"CRM\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000011\"),\n                            Code = \"admin.plans.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.plans.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000012\"),\n                            Code = \"admin.plans.create\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.plans.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000013\"),\n                            Code = \"admin.plans.update\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.plans.update\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000014\"),\n                            Code = \"admin.plans.delete\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.plans.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"74c8034f-d9cb-4a17-8578-a9f765bd845c\"),\n                            Code = \"messaging.report.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.report.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"c819f1bd-422d-4609-916c-cc185fe44ab0\"),\n                            Code = \"messaging.status.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.status.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"eecd0fac-223c-4dba-9fa1-2a6e973d61d1\"),\n                            Code = \"messaging.inbox.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.inbox.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"974af1f9-3caa-4857-a1a7-48462c389332\"),\n                            Code = \"messaging.send.text\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.send.text\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0485154c-dde5-4732-a7aa-a379c77a5b27\"),\n                            Code = \"messaging.send.template\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.send.template\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"29461562-ef9c-48c0-a606-482ff57b8f95\"),\n                            Code = \"messaging.send\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.send\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"bbc5202a-eac9-40bb-aa78-176c677dbf5b\"),\n                            Code = \"messaging.whatsappsettings.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Messaging\",\n                            IsActive = true,\n                            Name = \"messaging.whatsappsettings.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"205b87c7-b008-4e51-9fea-798c2dc4f9c2\"),\n                            Code = \"admin.whatsappsettings.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Admin\",\n                            IsActive = true,\n                            Name = \"admin.whatsappsettings.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"6e4d3a86-7cf9-4ac2-b8a7-ed10c9f0173d\"),\n                            Code = \"settings.whatsapp.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Settings\",\n                            IsActive = true,\n                            Name = \"Settings - WhatsApp View\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ad36cdb7-5221-448b-a6a6-c35c9f88d021\"),\n                            Code = \"inbox.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Inbox\",\n                            IsActive = true,\n                            Name = \"inbox.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"74828fc0-e358-4cfc-b924-13719a0d9f50\"),\n                            Code = \"inbox.menu\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Inbox\",\n                            IsActive = true,\n                            Name = \"inbox.menu\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"98572fe7-d142-475a-b990-f248641809e2\"),\n                            Code = \"settings.profile.view\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Settings\",\n                            IsActive = true,\n                            Name = \"settings.profile.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"821480c6-1464-415e-bba8-066fcb4e7e63\"),\n                            Code = \"automation.menu\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.menu\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"918a61d0-5ab6-46af-a3d3-41e37b7710f9\"),\n                            Code = \"automation.Create.Template.Flow\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.Create.Template.Flow\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9ae90cfe-3fea-4307-b024-3083c2728148\"),\n                            Code = \"automation.View.Template.Flow\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.View.Template.Flow\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"93c5d5a7-f8dd-460a-8c7b-e3788440ba3a\"),\n                            Code = \"automation.Create.TemplatePlusFreetext.Flow\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.Create.TemplatePlusFreetext.Flow\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7d7cbceb-4ce7-4835-85cd-59562487298d\"),\n                            Code = \"automation.View.TemplatePlusFreetext.Flow\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.View.TemplatePlusFreetext.Flow\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"636b17f2-1c54-4e26-a8cd-dbf561dcb522\"),\n                            Code = \"automation.View.Template.Flow_analytics\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.View.Template.Flow_analytics\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"adfa8490-9705-4a36-a86e-d5bff7ddc220\"),\n                            Code = \"automation.View.TemplatePlusFreeText.Flow_analytics\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation.View.TemplatePlusFreeText.Flow_analytics\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0dedac5b-81c8-44c3-8cfe-76c58e29c6db\"),\n                            Code = \"automation_trigger_test\",\n                            CreatedAt = new DateTime(2025, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Group = \"Automation\",\n                            IsActive = true,\n                            Name = \"automation_trigger_test\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"5f9f5de1-a0b2-48ba-b03d-77b27345613f\"),\n                            Code = \"basic\",\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Default free plan\",\n                            IsActive = true,\n                            Name = \"Basic\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FlowName\", \"IsActive\")\n                        .IsUnique();\n\n                    b.HasIndex(\"BusinessId\", \"IsActive\", \"FlowName\")\n                        .HasDatabaseName(\"ix_ctaflowconfigs_biz_active_name\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<int?>(\"ProfileNameSlot\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"UseProfileName\")\n                        .HasColumnType(\"boolean\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<short>(\"ButtonIndex\")\n                        .HasColumnType(\"smallint\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<short?>(\"ButtonIndex\")\n                        .HasColumnType(\"smallint\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RequestId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Audience\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"CreatedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CsvBatchId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Description\")\n                        .HasMaxLength(512)\n                        .HasColumnType(\"character varying(512)\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(160)\n                        .HasColumnType(\"character varying(160)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CsvBatchId\");\n\n                    b.HasIndex(\"BusinessId\", \"CampaignId\");\n\n                    b.HasIndex(\"BusinessId\", \"CsvBatchId\");\n\n                    b.HasIndex(\"BusinessId\", \"IsDeleted\")\n                        .HasDatabaseName(\"ix_audiences_biz_deleted\");\n\n                    b.ToTable(\"Audiences\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.AudienceMember\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"AttributesJson\")\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<Guid>(\"AudienceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"CreatedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"character varying(256)\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsTransientContact\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .HasMaxLength(160)\n                        .HasColumnType(\"character varying(160)\");\n\n                    b.Property<string>(\"PhoneE164\")\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<string>(\"PhoneRaw\")\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<DateTime?>(\"PromotedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\")\n                        .HasDatabaseName(\"ix_audmember_contact\");\n\n                    b.HasIndex(\"AudienceId\", \"PhoneE164\")\n                        .IsUnique()\n                        .HasDatabaseName(\"ux_audmember_audience_phone\");\n\n                    b.ToTable(\"AudienceMembers\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AudienceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DocumentUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateSchemaSnapshot\")\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"VideoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AudienceMemberId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"IdempotencyKey\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"MaterializedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ResolvedButtonUrlsJson\")\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<string>(\"ResolvedParametersJson\")\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"AudienceMemberId\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"IdempotencyKey\")\n                        .HasDatabaseName(\"ix_campaignrecipients_idempotency\");\n\n                    b.HasIndex(\"CampaignId\", \"ContactId\")\n                        .HasDatabaseName(\"ix_recipients_campaign_contact\");\n\n                    b.ToTable(\"CampaignRecipients\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignVariableMap\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Component\")\n                        .IsRequired()\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"CreatedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"DefaultValue\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Expression\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Index\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<bool>(\"IsRequired\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"SourceKey\")\n                        .HasMaxLength(128)\n                        .HasColumnType(\"character varying(128)\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<string>(\"StaticValue\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignVariableMaps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CsvBatch\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AudienceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Checksum\")\n                        .HasMaxLength(128)\n                        .HasColumnType(\"character varying(128)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"CreatedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FileName\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"character varying(256)\");\n\n                    b.Property<string>(\"HeadersJson\")\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<int>(\"RowCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"SkippedCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"AudienceId\");\n\n                    b.HasIndex(\"Checksum\")\n                        .HasDatabaseName(\"ix_csvbatch_checksum\");\n\n                    b.HasIndex(\"BusinessId\", \"AudienceId\");\n\n                    b.HasIndex(\"BusinessId\", \"CreatedAt\")\n                        .HasDatabaseName(\"ix_csvbatch_biz_created\");\n\n                    b.ToTable(\"CsvBatches\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CsvRow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BatchId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"PhoneE164\")\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<string>(\"PhoneRaw\")\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<int>(\"RowIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RowJson\")\n                        .IsRequired()\n                        .HasColumnType(\"jsonb\");\n\n                    b.Property<string>(\"ValidationError\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PhoneE164\")\n                        .HasDatabaseName(\"ix_csvrow_phone\");\n\n                    b.HasIndex(\"BatchId\", \"RowIndex\")\n                        .IsUnique()\n                        .HasDatabaseName(\"ux_csvrow_batch_rowidx\");\n\n                    b.HasIndex(\"BusinessId\", \"BatchId\");\n\n                    b.ToTable(\"CsvRows\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.OutboundCampaignJob\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"Attempt\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastError\")\n                        .HasMaxLength(4000)\n                        .HasColumnType(\"character varying(4000)\");\n\n                    b.Property<int>(\"MaxAttempts\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTimeOffset>(\"NextAttemptAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"Status\", \"NextAttemptAt\");\n\n                    b.ToTable(\"OutboundCampaignJobs\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonBundleJson\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"RunId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.HasIndex(\"BusinessId\", \"MessageId\")\n                        .HasDatabaseName(\"IX_CampaignSendLogs_Business_MessageId\");\n\n                    b.HasIndex(\"BusinessId\", \"SendStatus\", \"SentAt\")\n                        .HasDatabaseName(\"IX_CampaignSendLogs_StatusTime\");\n\n                    b.ToTable(\"CampaignSendLogs\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Worker.CampaignClickDailyAgg\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ButtonIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<long>(\"Clicks\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<DateTime>(\"Day\")\n                        .HasColumnType(\"date\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\", \"Day\", \"ButtonIndex\")\n                        .IsUnique();\n\n                    b.ToTable(\"CampaignClickDailyAgg\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Worker.CampaignClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ButtonIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ButtonTitle\")\n                        .IsRequired()\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ClickType\")\n                        .IsRequired()\n                        .HasMaxLength(16)\n                        .HasColumnType(\"character varying(16)\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Destination\")\n                        .IsRequired()\n                        .HasMaxLength(2048)\n                        .HasColumnType(\"character varying(2048)\");\n\n                    b.Property<string>(\"Ip\")\n                        .IsRequired()\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .IsRequired()\n                        .HasMaxLength(512)\n                        .HasColumnType(\"character varying(512)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\", \"ButtonIndex\");\n\n                    b.HasIndex(\"CampaignId\", \"ContactId\");\n\n                    b.HasIndex(\"CampaignId\", \"ClickType\", \"ClickedAt\");\n\n                    b.ToTable(\"CampaignClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CustomeApi.Models.ApiKey\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ExpiresAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Prefix\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Scopes\")\n                        .IsRequired()\n                        .HasMaxLength(512)\n                        .HasColumnType(\"character varying(512)\");\n\n                    b.Property<string>(\"SecretHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"Prefix\")\n                        .IsUnique();\n\n                    b.ToTable(\"ApiKeys\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CustomeApi.Models.ContactJourneyState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ClickCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"JourneyText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastButtonText\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"character varying(256)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FlowId\", \"ContactPhone\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactJourneyStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CustomeApi.Models.CustomerWebhookConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BearerToken\")\n                        .HasMaxLength(2048)\n                        .HasColumnType(\"character varying(2048)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Url\")\n                        .IsRequired()\n                        .HasMaxLength(1024)\n                        .HasColumnType(\"character varying(1024)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CustomerWebhookConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.HasIndex(\"BusinessId\", \"UserId\", \"ContactId\")\n                        .IsUnique()\n                        .HasDatabaseName(\"ux_contactreads_biz_user_contact\");\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.QuickReply\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Body\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Language\")\n                        .HasMaxLength(8)\n                        .HasColumnType(\"character varying(8)\");\n\n                    b.Property<Guid?>(\"OwnerUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"Scope\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TagsCsv\")\n                        .HasMaxLength(240)\n                        .HasColumnType(\"character varying(240)\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"timestamp with time zone\")\n                        .HasDefaultValueSql(\"NOW()\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"UpdatedAt\");\n\n                    b.HasIndex(\"BusinessId\", \"OwnerUserId\", \"IsActive\");\n\n                    b.HasIndex(\"BusinessId\", \"Scope\", \"IsActive\");\n\n                    b.ToTable(\"QuickReplies\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.WhatsAppSettings.Models.WhatsAppPhoneNumber\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefault\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\", \"PhoneNumberId\")\n                        .IsUnique()\n                        .HasDatabaseName(\"IX_WhatsAppPhoneNumbers_BizProviderPhone\");\n\n                    b.ToTable(\"WhatsAppPhoneNumbers\", (string)null);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.Features.Billing.Models.ProviderBillingEvent\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConversationCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ConversationId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTimeOffset>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool?>(\"IsChargeable\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTimeOffset>(\"OccurredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"PayloadJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal?>(\"PriceAmount\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<string>(\"PriceCurrency\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProviderMessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"ConversationId\")\n                        .HasDatabaseName(\"IX_Billing_BizConversation\")\n                        .HasFilter(\"\\\"ConversationId\\\" IS NOT NULL\");\n\n                    b.HasIndex(\"BusinessId\", \"ProviderMessageId\")\n                        .HasDatabaseName(\"IX_Billing_BizProviderMessage\")\n                        .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n\n                    b.HasIndex(\"BusinessId\", \"EventType\", \"OccurredAt\")\n                        .HasDatabaseName(\"IX_Billing_BizEventTime\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\", \"ProviderMessageId\", \"EventType\")\n                        .IsUnique()\n                        .HasDatabaseName(\"UX_ProviderBillingEvents_UniqueEvent\")\n                        .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n\n                    b.ToTable(\"ProviderBillingEvents\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiKey\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WebhookCallbackUrl\")\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"WebhookSecret\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"WebhookVerifyToken\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasAlternateKey(\"BusinessId\", \"Provider\")\n                        .HasName(\"AK_WhatsAppSettings_BusinessId_Provider\");\n\n                    b.HasIndex(\"Provider\", \"PhoneNumberId\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_PhoneNumberId\");\n\n                    b.HasIndex(\"Provider\", \"WabaId\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_WabaId\");\n\n                    b.HasIndex(\"Provider\", \"WebhookCallbackUrl\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_CallbackUrl\");\n\n                    b.HasIndex(\"Provider\", \"WhatsAppBusinessNumber\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_BusinessNumber\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\", \"IsActive\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_BizProviderActive\");\n\n                    b.ToTable(\"WhatsAppSettings\", (string)null);\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"Businesses\")\n                        .HasForeignKey(\"PlanId\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Audience\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Audiences\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CsvBatch\", \"CsvBatch\")\n                        .WithMany()\n                        .HasForeignKey(\"CsvBatchId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CsvBatch\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.AudienceMember\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Audience\", \"Audience\")\n                        .WithMany(\"Members\")\n                        .HasForeignKey(\"AudienceId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Audience\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"CTAFlowConfig\")\n                        .WithMany()\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"CTAFlowConfig\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.AudienceMember\", \"AudienceMember\")\n                        .WithMany()\n                        .HasForeignKey(\"AudienceMemberId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n\n                    b.Navigation(\"AudienceMember\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignVariableMap\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"VariableMaps\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CsvBatch\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Audience\", null)\n                        .WithMany()\n                        .HasForeignKey(\"AudienceId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CsvRow\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CsvBatch\", \"Batch\")\n                        .WithMany()\n                        .HasForeignKey(\"BatchId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Batch\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.SetNull);\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.WhatsAppSettings.Models.WhatsAppPhoneNumber\", b =>\n                {\n                    b.HasOne(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", null)\n                        .WithMany(\"WhatsAppBusinessNumbers\")\n                        .HasForeignKey(\"BusinessId\", \"Provider\")\n                        .HasPrincipalKey(\"BusinessId\", \"Provider\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithMany(\"WhatsAppSettings\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"Businesses\");\n\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Audience\", b =>\n                {\n                    b.Navigation(\"Members\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"Audiences\");\n\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"VariableMaps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Navigation(\"WhatsAppBusinessNumbers\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Models/ApiKey.cs",
      "sha256": "b569e20fb3e20480ea2bdaa70a3443985ddefb22b2ec7de4c6ae6d43792098a6",
      "language": "csharp",
      "size": 830,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CustomeApi.Models\n{\n    public sealed class ApiKey\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n\n        public string Name { get; set; } = string.Empty;   // e.g. \"Zapier Prod Key\"\n        public string Prefix { get; set; } = string.Empty; // e.g. \"live_ABCD\"\n        public string SecretHash { get; set; } = string.Empty;\n\n        public string Scopes { get; set; } = \"direct.send\"; // comma- or space-separated scopes\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? ExpiresAt { get; set; }\n        public DateTime? LastUsedAt { get; set; }\n        public bool IsRevoked { get; set; } = false;\n\n        public string? CreatedBy { get; set; }\n        public string? Notes { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Models/MessagesModel/MessageLog.cs",
      "sha256": "50eb32ef44ea2d8ffba6171f73e98847047c76dc619adb1ec7820eee0a229702",
      "language": "csharp",
      "size": 2823,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\npublic class MessageLog\n{\n    public Guid Id { get; set; }\n\n    public string? MessageId { get; set; } // WAMID from WhatsApp — alternate key\n                                           // public ICollection<MessageStatusLog> StatusUpdates { get; set; } = new List<MessageStatusLog>();\n    public Guid? RunId { get; set; }\n    // 🔗 FK to Business\n    public Guid BusinessId { get; set; }\n    public Business Business { get; set; }\n\n    // 📨 Message Info\n    public string RecipientNumber { get; set; }\n    public string MessageContent { get; set; }\n    public string? MediaUrl { get; set; }\n\n    // 🧾 Status Info\n    public string Status { get; set; } = \"Queued\";\n    public string? ErrorMessage { get; set; }\n    public string? RawResponse { get; set; }\n\n    // 🕒 Timestamps\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    public DateTime? SentAt { get; set; }\n\n    // 🔗 Contact (optional)\n    public Guid? ContactId { get; set; }\n    public Contact? Contact { get; set; }\n\n    // 🔗 Campaign (optional)\n    public Guid? CampaignId { get; set; }\n\n    // 🔗 CTA Flow Tracking\n    public Guid? CTAFlowConfigId { get; set; }  // Which visual flow config this message belongs to\n    public Guid? CTAFlowStepId { get; set; }    // Which flow step (template) this message originated from\n\n    public int? FlowVersion { get; set; }                // which version of the flow this message belongs to\n    public string? ButtonBundleJson { get; set; }\n\n    public Campaign? SourceCampaign { get; set; } // renamed from \"Campaign\" to avoid name conflict\n\n    public bool IsIncoming { get; set; }\n\n    public string? RenderedBody { get; set; } // actual resolved message with parameters\n\n    public Guid? RefMessageId { get; set; }\n    public string? Source { get; set; } // e.g., \"campaign\", \"flow\", \"manual\"\n\n\n    public string? Provider { get; set; }                     // \"Meta_cloud\", \"Pinnacle\", etc.\n    public string? ProviderMessageId { get; set; }            // e.g., \"wamid.HBg...\"; indexed\n    public bool? IsChargeable { get; set; }                 // true/false/unknown\n    public string? ConversationId { get; set; }               // provider conv id (Meta)\n    public string? ConversationCategory { get; set; }         // \"marketing\" | \"utility\" | \"authentication\" | \"service\" | \"free_entry\" | \"unknown\"\n    public DateTimeOffset? ConversationStartedAt { get; set; }\n    public decimal? PriceAmount { get; set; }                 // nullable until known\n    public string? PriceCurrency { get; set; }                // \"USD\", \"INR\", etc.\n}\n"
    },
    {
      "path": "xbytechat-api/Models/WhatsAppResult.cs",
      "sha256": "cd627fc7d90a4da1360bb14f8be3109068a83b746a1b782f257095f68ea5279d",
      "language": "csharp",
      "size": 220,
      "content": "namespace xbytechat.api.Models\n{\n    public class WhatsAppResult\n    {\n        public bool Success { get; set; }\n        public string? ErrorMessage { get; set; }\n        public string? RawResponse { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/ImageMessagePayloadBuilder.cs",
      "sha256": "71c13746d4e6cc70735324c5c2c755b80e4c7d032e71a97969c3efe007aa68ae",
      "language": "csharp",
      "size": 680,
      "content": "using xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    /// <summary>\n    /// Builds payload for sending image messages with media URL.\n    /// </summary>\n    public class ImageMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var imageDto = dto as ImageMessageDto;\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = imageDto.RecipientNumber,\n                type = \"image\",\n                image = new\n                {\n                    link = imageDto.MediaUrl\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/IWhatsAppPayloadBuilder.cs",
      "sha256": "2a2ff0592129a93fea8aa20df5fe1e8454dbfbe1640d5a1e15963af93dcd7922",
      "language": "csharp",
      "size": 190,
      "content": "namespace xbytechat.api.PayloadBuilders\n{\n    using xbytechat.api.DTOs.Messages;\n\n    public interface IWhatsAppPayloadBuilder\n    {\n        object BuildPayload(BaseMessageDto dto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/TemplateMessagePayloadBuilder.cs",
      "sha256": "70f39daad2789c61f03ade184abdf96a43221189b751178dfa1955c123b5f884",
      "language": "csharp",
      "size": 2013,
      "content": "using xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var templateDto = dto as TemplateMessageDto;\n            if (templateDto == null)\n                throw new InvalidCastException(\"DTO is not of type TemplateMessageDto.\");\n\n            var components = new List<object>();\n\n            // 🧠 Body parameters\n            if (templateDto.TemplateParameters != null && templateDto.TemplateParameters.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateDto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToList()\n                });\n            }\n\n            // ✅ Add button placeholders (Meta requires them for static buttons too)\n            components.Add(new\n            {\n                type = \"button\",\n                sub_type = \"url\",\n                index = \"0\",\n                parameters = new object[] { }  // 👈 no parameters if static URL\n            });\n\n            components.Add(new\n            {\n                type = \"button\",\n                sub_type = \"phone_number\",\n                index = \"1\",\n                parameters = new object[] { }  // 👈 no parameters if static phone\n            });\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = templateDto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = templateDto.TemplateName,\n                    language = new\n                    {\n                        code = templateDto.LanguageCode ?? \"en_US\"\n                    },\n                    components\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/TextMessagePayloadBuilder.cs",
      "sha256": "ce8e2e75c7865d9b08bebb267ceb84f7cdd0e77bd971c609576979b02726a590",
      "language": "csharp",
      "size": 750,
      "content": "// File: PayloadBuilders/TextMessagePayloadBuilder.cs\nusing xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    public class TextMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var textDto = dto as TextMessageDto;\n\n            if (textDto == null)\n                throw new InvalidCastException(\"DTO is not of type TextMessageDto.\");\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = textDto.RecipientNumber,\n                type = \"text\",\n                text = new\n                {\n                    body = textDto.MessageContent\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Program.cs",
      "sha256": "20320fd601476185b3cc2d430e8963e5cdedecc25733c11799834d1041ba9b42",
      "language": "csharp",
      "size": 26841,
      "content": "using FluentValidation;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.IdentityModel.Tokens;\nusing Serilog;\nusing Serilog.Exceptions;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing xbytechat.api;\nusing xbytechat.api.AuthModule.Services;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.AccessControl.Services;\nusing xbytechat.api.Features.AuditTrail.Services;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.CampaignTracking.Services;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Features.MessageManagement.Services;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Features.TemplateModule.Services;\nusing xbytechat.api.Features.Webhooks.Services;\nusing xbytechat.api.Features.Webhooks.Services.Processors;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.xbTimelines.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Middlewares;\nusing xbytechat.api.PayloadBuilders;\nusing xbytechat.api.Repositories.Implementations;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Services;\nusing xbytechat.api.Services.Messages.Implementations;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat_api.WhatsAppSettings.Validators;\nusing EnginePayloadBuilders = xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.CTAManagement.Services;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Webhooks.BackgroundWorkers;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing xbytechat.api.Features.FlowAnalytics.Services;\nusing xbytechat.api.Features.Inbox.Repositories;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.SignalR;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Services;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.FeatureAccessModule.Services;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Features.Automation.Services;\nusing Npgsql;\nusing System.Net;\nusing xbytechat.api.WhatsAppSettings.Providers;\nusing xbytechat.api.Features.CampaignTracking.Config;\nusing xbytechat.api.Features.CampaignTracking.Worker;\nusing xbytechat.api.Infrastructure.Flows;\nusing xbytechat.api.Features.Webhooks.Pinnacle.Services.Adapters;\nusing xbytechat.api.Features.Webhooks.Directory;\nusing xbytechat.api.Features.Webhooks.Status;\nusing xbytechat.api.Features.WhatsAppSettings.Services;\nusing xbytechat.api.WhatsAppSettings.Services;\nusing xbytechat_api.Features.Billing.Services;\nusing xbytechat.api.Features.Audiences.Services;\nusing xbytechat.api.Features.CampaignModule.Helpers;\nusing xbytechat.api.Features.Queueing.Services;\nusing xbytechat.api.Features.Contacts.Services;\nusing Microsoft.AspNetCore.HttpOverrides;\nusing xbytechat.api.Features.CustomeApi.Services;\nusing Microsoft.AspNetCore.Authentication;\nusing xbytechat.api.Features.CustomeApi.Auth;\nusing Microsoft.OpenApi.Models;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n#region 🔷 Serilog Configuration\nLog.Logger = new LoggerConfiguration()\n    .Enrich.WithExceptionDetails()\n    .Enrich.FromLogContext()\n    .MinimumLevel.Information()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/log-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\nbuilder.Host.UseSerilog();\n#endregion\n\n#region 🔷 Database Setup (PostgreSQL)\nvar connStr = builder.Configuration.GetConnectionString(\"DefaultConnection\");\nbuilder.Services.AddDbContext<AppDbContext>(options =>\n    options.UseNpgsql(connStr).EnableSensitiveDataLogging()\n);\n//Console.WriteLine($\"[DEBUG] Using Connection String: {connStr}\");\n#endregion\n\n#region 🔷 Generic Repository Pattern\nbuilder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));\n#endregion\n\n#region 🔷 Core Modules (Business/Auth)\nbuilder.Services.AddScoped<IBusinessService, BusinessService>();\nbuilder.Services.AddScoped<IAuthService, AuthService>();\nbuilder.Services.AddScoped<IJwtTokenService, JwtTokenService>();\n#endregion\n\n#region 🔷 Messaging Services & WhatsApp\nbuilder.Services.AddScoped<IMessageEngineService, MessageEngineService>();\nbuilder.Services.AddHttpClient<IMessageService, MessageService>();\nbuilder.Services.AddScoped<WhatsAppService>();\nbuilder.Services.AddScoped<IMessageStatusService, MessageStatusService>();\nbuilder.Services.AddScoped<ITemplateMessageSender, TemplateMessageSender>();\n#endregion\nbuilder.Services.AddHttpClient();\n#region 🔷 Payload Builders\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TextMessagePayloadBuilder>();\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.ImageMessagePayloadBuilder>();\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TemplateMessagePayloadBuilder>();\n#endregion\n\n#region 🔷 Catalog & CRM Modules\nbuilder.Services.AddScoped<IProductService, ProductService>();\nbuilder.Services.AddScoped<ICatalogTrackingService, CatalogTrackingService>();\nbuilder.Services.AddScoped<ICatalogDashboardService, CatalogDashboardService>();\nbuilder.Services.AddScoped<IContactService, ContactService>();\nbuilder.Services.AddScoped<ITagService, TagService>();\nbuilder.Services.AddScoped<IReminderService, ReminderService>();\nbuilder.Services.AddScoped<INoteService, NoteService>();\nbuilder.Services.AddScoped<ITimelineService, TimelineService>();\n#endregion\n\n#region 🔷 Billing \nbuilder.Services.AddScoped<IBillingIngestService, BillingIngestService>();\nbuilder.Services.AddScoped<IBillingReadService, BillingReadService>();\nbuilder.Services.AddScoped<IOutboundCampaignQueueService, OutboundCampaignQueueService>();\n#endregion\n\n#region 🔷 Campaign Management\nbuilder.Services.AddScoped<ICampaignService, CampaignService>();\nbuilder.Services.AddScoped<ICampaignSendLogService, CampaignSendLogService>();\nbuilder.Services.AddScoped<ICampaignSendLogEnricher, CampaignSendLogEnricher>();\nbuilder.Services.AddScoped<ICampaignAnalyticsService, CampaignAnalyticsService>();\nbuilder.Services.AddScoped<ICampaignRetryService, CampaignRetryService>();\nbuilder.Services.AddScoped<ICampaignTrackingRetryService, CampaignTrackingRetryService>();\nbuilder.Services.AddHttpClient<IWhatsAppTemplateService, WhatsAppTemplateService>();\nbuilder.Services.AddScoped<ICampaignRecipientService, CampaignRecipientService>();\nbuilder.Services.AddScoped<IPlanService, PlanService>();\nbuilder.Services.AddScoped<ITemplatePreviewService, TemplatePreviewService>();\nbuilder.Services.AddScoped<IOutboundCampaignQueueService, OutboundCampaignQueueService>();\nbuilder.Services.AddScoped<ICampaignPreviewService, CampaignPreviewService>();\nbuilder.Services.AddScoped<IAudienceService, AudienceService>();\nbuilder.Services.AddScoped<ICampaignVariableMapService, CampaignVariableMapService>();\nbuilder.Services.AddScoped<IAudienceImportService, AudienceImportService>();\nbuilder.Services.AddScoped<ICampaignMaterializationService, CampaignMaterializationService>();\nbuilder.Services.AddScoped<ICampaignDispatchPlannerService, CampaignDispatchPlannerService>();\nbuilder.Services.AddScoped<ICsvExportService, CsvExportService>();\n\nbuilder.Services.AddScoped<ICampaignDryRunService, CampaignDryRunService>();\n// API\nbuilder.Services.AddScoped<ICustomApiService, CustomApiService>();\n// CSV ingest\nbuilder.Services.AddScoped<ICsvBatchService, CsvBatchService>();\nbuilder.Services.AddScoped<IVariableResolver, VariableResolver>();\nbuilder.Services.AddScoped<ICampaignMaterializer, CampaignMaterializer>();\nbuilder.Services.AddScoped<ICampaignDispatcher, CampaignDispatcher>();\nbuilder.Services.AddScoped<IVariableMappingService, NoopVariableMappingService>();\nbuilder.Services.AddScoped<IOutboundCampaignQueueService, NoopOutboundCampaignQueueService>();\nbuilder.Services.AddScoped<IMappingSuggestionService, MappingSuggestionService>();\n#endregion\n\n#region 🔷 Webhook Management\nbuilder.Services.AddScoped<IWhatsAppWebhookService, WhatsAppWebhookService>();\nbuilder.Services.AddScoped<IWhatsAppWebhookDispatcher, WhatsAppWebhookDispatcher>();\nbuilder.Services.AddScoped<IStatusWebhookProcessor, StatusWebhookProcessor>();\nbuilder.Services.AddScoped<ITemplateWebhookProcessor, TemplateWebhookProcessor>();\nbuilder.Services.AddScoped<IMessageIdResolver, MessageIdResolver>();\nbuilder.Services.AddScoped<IClickWebhookProcessor, ClickWebhookProcessor>();\nbuilder.Services.AddScoped<ILeadTimelineService, LeadTimelineService>();\nbuilder.Services.AddScoped<IFailedWebhookLogService, FailedWebhookLogService>();\nbuilder.Services.AddSingleton<IWebhookQueueService, WebhookQueueService>();\nbuilder.Services.AddHostedService<WebhookQueueWorker>();\nbuilder.Services.AddHostedService<FailedWebhookLogCleanupService>();\nbuilder.Services.AddScoped<IMaintenanceService, MaintenanceService>();\nbuilder.Services.AddHostedService<WebhookAutoCleanupWorker>();\nbuilder.Services.AddScoped<IProviderDirectory, ProviderDirectory>();\nbuilder.Services.AddScoped<IMessageStatusUpdater, MessageStatusUpdater>();\nbuilder.Services.AddScoped<IPinnacleToMetaAdapter, PinnacleToMetaAdapter>();\n\n\n#endregion\n\n#region 🔷 Access Control & Permission\nbuilder.Services.AddScoped<IAccessControlService, AccessControlService>();\nbuilder.Services.AddScoped<IFeatureAccessEvaluator, FeatureAccessEvaluator>();\nbuilder.Services.AddScoped<IFeatureAccessService, FeatureAccessService>();\n#endregion\n\n#region 🔷 Tracking\nbuilder.Services.AddScoped<ITrackingService, TrackingService>();\nbuilder.Services.AddScoped<IMessageAnalyticsService, MessageAnalyticsService>();\nbuilder.Services.AddScoped<IUrlBuilderService, UrlBuilderService>();\nbuilder.Services.AddScoped<IContactJourneyService, ContactJourneyService>();\n\nbuilder.Services.Configure<TrackingOptions>(builder.Configuration.GetSection(\"Tracking\"));\nbuilder.Services.AddSingleton<IClickTokenService, ClickTokenService>();\nbuilder.Services.AddSingleton<IClickEventQueue, InProcessClickEventQueue>();\nbuilder.Services.AddHostedService<ClickLogWorker>();\n\nbuilder.Services.AddScoped<IMessageLogsReportService, MessageLogsReportService>();\n\n#endregion\n\n#region 🔷 Flow Builder\nbuilder.Services.AddScoped<ICTAFlowService, CTAFlowService>();\n\n//builder.Services.Configure<FlowClickTokenOptions>(\n//    builder.Configuration.GetSection(\"FlowClickTokens\"));\n\nbuilder.Services.AddOptions<FlowClickTokenOptions>()\n    .BindConfiguration(\"FlowClickTokens\")\n    .Validate(o => !string.IsNullOrWhiteSpace(o.Secret) && o.Secret.Length >= 32,\n              \"Secret required (≥32 chars).\")\n    .Validate(o => Uri.TryCreate(o.BaseUrl, UriKind.Absolute, out var u) && u.Scheme == Uri.UriSchemeHttps,\n              \"BaseUrl must be an absolute https URL.\")\n    .Validate(o => o.TtlHours > 0, \"TtlHours must be positive.\")\n    .ValidateOnStart();\n\nbuilder.Services.AddSingleton<IFlowClickTokenService, FlowClickTokenService>();\nbuilder.Services.AddScoped<IFlowRuntimeService, FlowRuntimeService>();  //\n#endregion\n\n#region 🔷 Audit Trail Logging\nbuilder.Services.AddHttpContextAccessor();\nbuilder.Services.AddScoped<IAuditLogService, AuditLogService>();\n#endregion\nbuilder.Services.AddScoped<IContactProfileService, ContactProfileService>();\n#region 🔷 WhatsApp settings\nbuilder.Services.AddScoped<IWhatsAppSettingsService, WhatsAppSettingsService>();\nbuilder.Services.AddValidatorsFromAssemblyContaining<SaveWhatsAppSettingValidator>();\nbuilder.Services.AddHttpClient<IMessageEngineService, MessageEngineService>();\nbuilder.Services.AddScoped<IWhatsAppTemplateFetcherService, WhatsAppTemplateFetcherService>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.TextMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.ImageMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.TemplateMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.CtaMessagePayloadBuilder>();\nbuilder.Services.AddScoped<IPlanManager, PlanManager>();\nbuilder.Services.AddScoped<ICTAManagementService, CTAManagementService>();\n//builder.Services.AddScoped<IWhatsAppProviderFactory, WhatsAppProviderFactory>();\nbuilder.Services.AddScoped<xbytechat.api.Features.MessagesEngine.Factory.IWhatsAppProviderFactory,\n                           xbytechat.api.Features.MessagesEngine.Factory.WhatsAppProviderFactory>();\nbuilder.Services.AddScoped<IWhatsAppSenderService, WhatsAppSenderService>();\n\nbuilder.Services.AddHttpClient(\"wa:pincale\", c =>\n{\n    c.Timeout = TimeSpan.FromSeconds(20);\n});\n\nbuilder.Services.AddHttpClient(\"wa:meta_cloud\", c =>\n{\n    c.Timeout = TimeSpan.FromSeconds(20);\n});\nbuilder.Services.AddScoped<MetaTemplateCatalogProvider>();\nbuilder.Services.AddScoped<PinnacleTemplateCatalogProvider>();\nbuilder.Services.AddScoped<ITemplateSyncService, TemplateSyncService>();\n\n// WhatsApp phone number management\nbuilder.Services.AddScoped<IWhatsAppPhoneNumberService, WhatsAppPhoneNumberService>();\n\n#endregion\n\n#region Worker\nbuilder.Services.AddHostedService<TemplateSyncWorker>();\nbuilder.Services.AddHostedService<OutboundCampaignSendWorker>();\n\n#endregion\n#region 🔷 Inbox\nbuilder.Services.AddScoped<IUnreadCountService, UnreadCountService>();\n\nbuilder.Services.AddScoped<IFlowAnalyticsService, FlowAnalyticsService>();\nbuilder.Services.AddScoped<IInboxService, InboxService>();\nbuilder.Services.AddScoped<IInboundMessageProcessor, InboundMessageProcessor>();\nbuilder.Services.AddScoped<IInboxRepository, InboxRepository>();\nbuilder.Services.AddScoped<IQuickReplyService, QuickReplyService>();\n#endregion\n\n#region 🔷 Access Control\nbuilder.Services.AddScoped<IPermissionService, PermissionService>();\nbuilder.Services.AddMemoryCache();\nbuilder.Services.AddScoped<IPermissionCacheService, PermissionCacheService>();\n#endregion\n\n#region 🔷 AutoReplyBuilder Module\nbuilder.Services.AddScoped<IAutoReplyRepository, AutoReplyRepository>();\nbuilder.Services.AddScoped<IAutoReplyService, AutoReplyService>();\nbuilder.Services.AddScoped<IAutoReplyFlowRepository, AutoReplyFlowRepository>();\nbuilder.Services.AddScoped<IAutoReplyFlowService, AutoReplyFlowService>();\nbuilder.Services.AddScoped<IAutoReplyRuntimeService, AutoReplyRuntimeService>();\nbuilder.Services.AddScoped<IChatSessionStateService, ChatSessionStateService>();\nbuilder.Services.AddScoped<IAgentAssignmentService, AgentAssignmentService>();\n#endregion\n\n#region 🔷 Automation Module\nbuilder.Services.AddScoped<IAutomationFlowRepository, AutomationFlowRepository>();\nbuilder.Services.AddScoped<IAutomationRunner, AutomationRunner>();\nbuilder.Services.AddScoped<IAutomationService, AutomationService>();\n#endregion\n\n\n#region 🔐 JWT Authentication (Bearer token only, no cookies)\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\");\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidateAudience = true,\n            ValidateLifetime = true,\n            ValidateIssuerSigningKey = true,\n            ValidIssuer = jwtSettings[\"Issuer\"],\n            ValidAudience = jwtSettings[\"Audience\"],\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])),\n            ClockSkew = TimeSpan.Zero\n        };\n\n        options.Events = new JwtBearerEvents\n        {\n            OnAuthenticationFailed = context =>\n            {\n                if (context.Exception is SecurityTokenExpiredException)\n                {\n                    context.Response.StatusCode = 401;\n                    context.Response.ContentType = \"application/json\";\n                    return context.Response.WriteAsync(\"{\\\"success\\\":false,\\\"message\\\":\\\"❌ Token expired. Please login again.\\\"}\");\n                }\n                return Task.CompletedTask;\n            }\n        };\n        options.Events = new JwtBearerEvents\n        {\n            OnMessageReceived = context =>\n            {\n                var accessToken = context.Request.Query[\"access_token\"];\n\n                // If the request is for our hub...\n                var path = context.HttpContext.Request.Path;\n                if (!string.IsNullOrEmpty(accessToken) &&\n                    (path.StartsWithSegments(\"/hubs/inbox\")))\n                {\n                    // Read the token from the query string\n                    context.Token = accessToken;\n                }\n                return Task.CompletedTask;\n            }\n        };\n    });\n\nbuilder.Services.AddAuthorization();\n#endregion\nbuilder.Services.Configure<StaticApiKeyOptions>(\n    builder.Configuration.GetSection(\"ApiKeys:Static\"));\n\n\n//builder.Services.Configure<xbytechat.api.Features.CustomeApi.Auth.StaticApiKeyOptions>(\n//    builder.Configuration.GetSection(\"ApiKeys:Static\"));\n\n\n//builder.Services\n//    .AddAuthentication(options =>\n//    {\n//        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n//        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n//    })\n//    .AddJwtBearer(options =>\n//    {\n//        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\");\n\n//        options.TokenValidationParameters = new TokenValidationParameters\n//        {\n//            ValidateIssuer = true,\n//            ValidateAudience = true,\n//            ValidateLifetime = true,\n//            ValidateIssuerSigningKey = true,\n//            ValidIssuer = jwtSettings[\"Issuer\"],\n//            ValidAudience = jwtSettings[\"Audience\"],\n//            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])),\n//            ClockSkew = TimeSpan.Zero\n//        };\n\n//        options.Events = new JwtBearerEvents\n//        {\n//            OnAuthenticationFailed = context =>\n//            {\n//                if (context.Exception is SecurityTokenExpiredException)\n//                {\n//                    context.Response.StatusCode = 401;\n//                    context.Response.ContentType = \"application/json\";\n//                    return context.Response.WriteAsync(\"{\\\"success\\\":false,\\\"message\\\":\\\"❌ Token expired. Please login again.\\\"}\");\n//                }\n//                return Task.CompletedTask;\n//            },\n//            OnMessageReceived = context =>\n//            {\n//                var accessToken = context.Request.Query[\"access_token\"];\n//                var path = context.HttpContext.Request.Path;\n//                if (!string.IsNullOrEmpty(accessToken) && path.StartsWithSegments(\"/hubs/inbox\"))\n//                    context.Token = accessToken; // SignalR\n//                return Task.CompletedTask;\n//            }\n//        };\n//    });\n\n\n//builder.Services.AddAuthorization();\n//#endregion\n\n\n#region 🌐 CORS Setup (Bearer mode, no credentials)\n\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>();\nif (allowedOrigins == null || allowedOrigins.Length == 0)\n{\n    var raw = builder.Configuration[\"Cors:AllowedOrigins\"];\n    if (!string.IsNullOrWhiteSpace(raw))\n        allowedOrigins = raw.Split(new[] { ',', ';', ' ' }, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);\n}\nConsole.WriteLine(\"[CORS] Allowed origins => \" + string.Join(\", \", allowedOrigins ?? Array.Empty<string>()));\n\n\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy\n            .WithOrigins(allowedOrigins ?? Array.Empty<string>())\n            .AllowAnyHeader()\n            .AllowAnyMethod()\n            .AllowCredentials();\n    });\n});\n#endregion\n\n#region ✅ MVC + Swagger + Middleware\nbuilder.Services.AddControllers()\n    .AddJsonOptions(opts =>\n    {\n        opts.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter(JsonNamingPolicy.CamelCase));\n    });\n\nbuilder.Services.AddEndpointsApiExplorer();\n\n//builder.Services.AddSwaggerGen(options =>\n//{\n//    options.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo\n//    {\n//        Title = \"xByteChat API\",\n//        Version = \"v1\",\n//        Description = \"API documentation for xByteChat project\"\n//    });\n//});\nbuilder.Services.AddSwaggerGen(options =>\n{\n    options.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo\n    {\n        Title = \"xByteChat API\",\n        Version = \"v1\",\n        Description = \"API documentation for xByteChat project\"\n    });\n\n    options.AddSecurityDefinition(\"Bearer\", new Microsoft.OpenApi.Models.OpenApiSecurityScheme\n    {\n        Description = \"JWT Authorization header. Example: Bearer {token}\",\n        Name = \"Authorization\",\n        In = Microsoft.OpenApi.Models.ParameterLocation.Header,\n        Type = Microsoft.OpenApi.Models.SecuritySchemeType.Http,\n        Scheme = \"bearer\",\n        BearerFormat = \"JWT\"\n    });\n\n    options.AddSecurityDefinition(\"ApiKey\", new OpenApiSecurityScheme\n    {\n        Description = \"Paste your static key (no quotes). Example: api_live_DEV_xxx\",\n        In = ParameterLocation.Header,\n        Name = \"X-Auth-Key\",\n        Type = SecuritySchemeType.ApiKey\n    });\n\n    options.AddSecurityRequirement(new Microsoft.OpenApi.Models.OpenApiSecurityRequirement\n    {\n        {\n            new Microsoft.OpenApi.Models.OpenApiSecurityScheme\n            {\n                Reference = new Microsoft.OpenApi.Models.OpenApiReference\n                { Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme, Id = \"Bearer\" }\n            },\n            Array.Empty<string>()\n        },\n        {\n            new Microsoft.OpenApi.Models.OpenApiSecurityScheme\n            {\n                Reference = new Microsoft.OpenApi.Models.OpenApiReference\n                { Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme, Id = \"ApiKey\" }\n            },\n            Array.Empty<string>()\n        }\n    });\n});\n\n#endregion\n\nbuilder.Services.Configure<HostOptions>(o =>\n    o.BackgroundServiceExceptionBehavior = BackgroundServiceExceptionBehavior.Ignore);\n\nbuilder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n\n#region SignalR\nbuilder.Services.AddSignalR();\nbuilder.Services.AddSingleton<IUserIdProvider, NameUserIdProvider>();\n#endregion\n\nbuilder.Services.AddHttpClient(\"customapi-webhooks\", c =>\n{\n    c.Timeout = TimeSpan.FromSeconds(10);\n});\nbuilder.Services.AddScoped<ICtaJourneyPublisher, CtaJourneyPublisher>();\nbuilder.Services.AddScoped<CtaJourneyPublisher>();\n//builder.Services.Configure<HostOptions>(o =>\n//{\n//    o.BackgroundServiceExceptionBehavior = BackgroundServiceExceptionBehavior.Ignore;\n//});\n\nAppDomain.CurrentDomain.UnhandledException += (_, e) =>\n    Log.Error(e.ExceptionObject as Exception, \"Unhandled exception (AppDomain)\");\n//builder.Services.Configure<ForwardedHeadersOptions>(o =>\n//{\n//    o.ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto;\n//    o.KnownNetworks.Clear();\n//    o.KnownProxies.Clear();\n//});\n\nTaskScheduler.UnobservedTaskException += (_, e) =>\n{\n    Log.Error(e.Exception, \"Unobserved task exception\");\n    e.SetObserved();\n};\nvar app = builder.Build();\n\n\n\napp.MapGet(\"/api/debug/cors\", () => Results.Ok(new\n{\n    Allowed = app.Services.GetRequiredService<IConfiguration>()\n              .GetSection(\"Cors:AllowedOrigins\").Get<string[]>()\n}));\napp.MapGet(\"/api/debug/db\", async (AppDbContext db) =>\n{\n    try\n    {\n        await db.Database.OpenConnectionAsync();\n        await db.Database.CloseConnectionAsync();\n        return Results.Ok(\"ok\");\n    }\n    catch (Exception ex) { return Results.Problem(ex.Message); }\n});\napp.MapGet(\"/api/debug/_dbping\", async (IConfiguration cfg) =>\n{\n    try\n    {\n        var cs = cfg.GetConnectionString(\"DefaultConnection\");\n        await using var conn = new Npgsql.NpgsqlConnection(cs);\n        await conn.OpenAsync();\n        await using var cmd = new Npgsql.NpgsqlCommand(\"select version()\", conn);\n        var ver = (string?)await cmd.ExecuteScalarAsync();\n        return Results.Ok(new { ok = true, version = ver });\n    }\n    catch (Exception ex)\n    {\n        return Results.Problem(title: \"DB ping failed\", detail: ex.ToString(), statusCode: 500);\n    }\n});\napp.MapGet(\"/api/debug/conn\", (IConfiguration cfg) =>\n{\n    var cs = cfg.GetConnectionString(\"DefaultConnection\") ?? \"\";\n    var b = new NpgsqlConnectionStringBuilder(cs);\n    return Results.Ok(new\n    {\n        host = b.Host,\n        port = b.Port,\n        database = b.Database,\n        username = b.Username,\n        sslmode = b.SslMode.ToString(),\n        hasPassword = !string.IsNullOrEmpty(b.Password)\n    });\n});\n// Try DNS resolution of the DB host that /api/debug/conn reports\napp.MapGet(\"/api/debug/dns\", (IConfiguration cfg) =>\n{\n    var cs = cfg.GetConnectionString(\"DefaultConnection\") ?? \"\";\n    var b = new NpgsqlConnectionStringBuilder(cs);\n    try\n    {\n        var ips = Dns.GetHostAddresses(b.Host);\n        return Results.Ok(new { host = b.Host, addresses = ips.Select(i => i.ToString()).ToArray() });\n    }\n    catch (Exception ex)\n    {\n        return Results.Problem($\"DNS failed for host '{b.Host}': {ex.Message}\");\n    }\n});\n\n\n#region 🌐 Middleware Pipeline Setup\nAuditLoggingHelper.Configure(app.Services);\n\napp.UseMiddleware<GlobalExceptionMiddleware>();\n\nif (app.Environment.IsDevelopment())\n{\n    // Dev-specific configs\n}\n\napp.UseSwagger();\napp.UseSwaggerUI();\nif (!app.Environment.IsDevelopment())\n    app.UseHsts();\napp.UseHttpsRedirection();\n\n// Security headers\n//app.Use(async (context, next) =>\n//{\n//    context.Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n//    context.Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n//    context.Response.Headers[\"X-XSS-Protection\"] = \"1; mode=block\";\n//    context.Response.Headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\";\n//    context.Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n//    await next();\n//});\n\napp.UseRouting();\napp.UseCors(\"AllowFrontend\");\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\napp.MapHub<InboxHub>(\"/hubs/inbox\");\n\napp.Run();\n#endregion\n\n\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Properties/launchSettings.json",
      "sha256": "3374c65b7338b8a459db1242f356b2dd07d3dfd4cded988482a8f34fbe64e62e",
      "language": "json",
      "size": 1102,
      "content": "{\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:18939\",\n      \"sslPort\": 44375\n    }\n  },\n  \"profiles\": {\n    \"http\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:5295;http://localhost:7113\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:7113;http://localhost:5295\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n"
    },
    {
      "path": "xbytechat-api/RepositoriesGen/Implementations/GenericRepository.cs",
      "sha256": "68fdbced75094ad69adcf2073501cec37b1745f7b4d6206826d6aedc33fe0a46",
      "language": "csharp",
      "size": 2091,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Repositories.Interfaces;\n\nnamespace xbytechat.api.Repositories.Implementations\n{\n    public class GenericRepository<T> : IGenericRepository<T> where T : class\n    {\n        private readonly AppDbContext _context;\n        private readonly DbSet<T> _dbSet;\n\n        public GenericRepository(AppDbContext context)\n        {\n            _context = context;\n            _dbSet = _context.Set<T>();\n        }\n\n        public async Task<IEnumerable<T>> GetAllAsync()\n        {\n            return await _dbSet.ToListAsync();\n        }\n\n        public async Task<T?> FindByIdAsync(Guid id)\n        {\n            return await _dbSet.FindAsync(id);\n        }\n\n        public async Task AddAsync(T entity)\n        {\n            await _dbSet.AddAsync(entity);\n        }\n\n        public void Update(T entity)\n        {\n            _dbSet.Update(entity);\n        }\n\n        public void Delete(T entity)\n        {\n            _dbSet.Remove(entity);\n        }\n\n        public async Task<T?> FirstOrDefaultAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.FirstOrDefaultAsync(predicate);\n        }\n\n        public async Task<IEnumerable<T>> FindAllAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.Where(predicate).ToListAsync();\n        }\n\n        public async Task<bool> ExistsAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.AnyAsync(predicate);\n        }\n\n        public async Task SaveAsync()\n        {\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<List<T>> WhereAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _context.Set<T>().Where(predicate).ToListAsync();\n        }\n\n        // ✅ NEW: Enables .Include(), .ThenInclude(), etc.\n        public IQueryable<T> AsQueryable()\n        {\n            return _dbSet.AsQueryable();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/RepositoriesGen/Interfaces/IGenericRepository.cs",
      "sha256": "dce9a4518c5e6db0da8996246969bbc864c23c5ec0eeb93ac053cc16a33bc920",
      "language": "csharp",
      "size": 941,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Repositories.Interfaces\n{\n    public interface IGenericRepository<T> where T : class\n    {\n        // 🔍 Basic Reads\n        Task<IEnumerable<T>> GetAllAsync();\n        Task<T?> FindByIdAsync(Guid id);\n        Task<T?> FirstOrDefaultAsync(Expression<Func<T, bool>> predicate);\n        Task<IEnumerable<T>> FindAllAsync(Expression<Func<T, bool>> predicate);\n\n        // 🔐 Checks\n        Task<bool> ExistsAsync(Expression<Func<T, bool>> predicate);\n\n        // ✍️ Commands\n        Task AddAsync(T entity);\n        void Update(T entity);\n        void Delete(T entity);\n        Task SaveAsync();\n\n        Task<List<T>> WhereAsync(Expression<Func<T, bool>> predicate);\n\n        // ✅ New: Supports advanced LINQ operations like Include()\n        IQueryable<T> AsQueryable();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Services/MessageModule/Implementations/MessageService.cs",
      "sha256": "4a9530274bcc8a60c09a984dfd7c120424ee9f5b32a1d430a4f393b0ebd5d45c",
      "language": "csharp",
      "size": 9833,
      "content": "using System.Text;\nusing System.Net.Http.Headers;\nusing Newtonsoft.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nusing xbytechat.api.PayloadBuilders;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.Services.Messages.Implementations\n{\n    public class MessageService : IMessageService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _config;\n        private readonly IGenericRepository<MessageLog> _messageLogRepo;\n        private readonly Dictionary<string, IWhatsAppPayloadBuilder> _payloadBuilders;\n        private readonly ILogger<MessageService> _logger;\n\n        public MessageService(\n            AppDbContext dbContext,\n            HttpClient httpClient,\n            IConfiguration config,\n            IGenericRepository<MessageLog> messageLogRepo,\n            IEnumerable<IWhatsAppPayloadBuilder> builders,\n            ILogger<MessageService> logger)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _config = config;\n            _messageLogRepo = messageLogRepo;\n            _logger = logger;\n\n            _payloadBuilders = builders.ToDictionary(\n                b => b.GetType().Name.Replace(\"MessagePayloadBuilder\", \"\").ToLower(),\n                b => b\n            );\n        }\n\n        public async Task SendFollowUpAsync(string recipientNumber, string messageContent)\n        {\n            var dto = new TextMessageDto\n            {\n                RecipientNumber = recipientNumber,\n                MessageContent = messageContent,\n                BusinessId = Guid.Empty // Optional: Set dynamically if needed\n            };\n\n            await SendMessageAsync(dto); // ✅ You already have this method\n        }\n\n\n        public async Task<SendResultExtended> SendMessageAsync(BaseMessageDto dto)\n        {\n            var messageType = dto.GetType().Name.Replace(\"MessageDto\", \"\").ToLower();\n\n            // 🧠 Get the right builder (e.g., for text, image)\n            if (!_payloadBuilders.TryGetValue(messageType, out var builder))\n            {\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Unsupported message type: \" + messageType\n                };\n            }\n\n            var apiUrl = _config[\"WhatsApp:ApiUrl\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            var payload = builder.BuildPayload(dto);\n            var json = JsonConvert.SerializeObject(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            _logger.LogInformation(\"📦 Sending Payload: {Payload}\", json);\n\n            try\n\n\n            {\n                // 🛠️ Log the payload for debugging\n                _logger.LogInformation(\"📤 Final WhatsApp Payload:\\n\" + JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                var response = await _httpClient.PostAsync(apiUrl, content);\n                var rawResponse = await response.Content.ReadAsStringAsync();\n\n                string? messageId = null;\n\n                // 🧾 Try extracting messageId (WAMID) from response\n                if (response.IsSuccessStatusCode)\n                {\n                    try\n                    {\n                        var jsonObj = JsonConvert.DeserializeObject<dynamic>(rawResponse);\n                        messageId = jsonObj?.messages?[0]?.id;\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(\"✅ Message sent but failed to parse WAMID: \" + ex.Message);\n                    }\n                }\n\n                // 📝 Log message for tracking\n                var log = new MessageLog\n                {\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto is TextMessageDto textDto && !string.IsNullOrEmpty(textDto.MessageContent)\n                        ? textDto.MessageContent\n                        : \"[Empty or Non-Text]\",\n                    MediaUrl = (dto as ImageMessageDto)?.MediaUrl,\n                    Status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\",\n                    ErrorMessage = response.IsSuccessStatusCode ? null : response.ReasonPhrase,\n                    RawResponse = rawResponse,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _messageLogRepo.AddAsync(log);\n                await _messageLogRepo.SaveAsync();\n\n                return new SendResultExtended\n                {\n                    Success = response.IsSuccessStatusCode,\n                    Message = response.IsSuccessStatusCode ? \"✅ Message sent successfully\" : \"❌ Failed to send message\",\n                    MessageId = messageId,\n                    RawResponse = rawResponse,\n                    MessageLogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception during message send\");\n\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Exception while sending\",\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n        public async Task<SendResultExtended> SendInteractiveMessageAsync(string recipientPhone, string bodyText, List<string> buttons)\n        {\n            var apiUrl = _config[\"WhatsApp:ApiUrl\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            var payload = new\n            {\n                messaging_product = \"whatsapp\",\n                to = recipientPhone,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = bodyText },\n                    action = new\n                    {\n                        buttons = buttons.Select((text, index) => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = $\"cta_{index + 1}\",\n                                title = text\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n\n            var json = JsonConvert.SerializeObject(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            _logger.LogInformation(\"🚀 Sending CTA Message: \" + json);\n\n            try\n            {\n                var response = await _httpClient.PostAsync(apiUrl, content);\n                var rawResponse = await response.Content.ReadAsStringAsync();\n                // Message send here successfully \n                string? messageId = null;\n                if (response.IsSuccessStatusCode)\n                {\n                    try\n                    {\n                        dynamic jsonObj = JsonConvert.DeserializeObject<dynamic>(rawResponse);\n                        messageId = jsonObj?.messages?[0]?.id;\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(\"⚠️ Sent, but failed to parse messageId: \" + ex.Message);\n                    }\n                }\n\n                // Log to MessageLogs table (optional: use a dummy entry)\n\n                var log = new MessageLog\n                {\n\n                    //BusinessId = Guid.Parse(\"put-a-valid-business-guid-here\"), //Guid.Empty, // set properly if you want to track\n                    BusinessId = Guid.TryParse(\"45262049-0127-4658-93e1-b3ffea645f4f\", out var parsedId)\n    ? parsedId\n    : throw new FormatException(\"❌ Invalid GUID format used for BusinessId.\"),\n                    RecipientNumber = recipientPhone,\n                    MessageContent = bodyText,\n                    Status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\",\n                    ErrorMessage = response.IsSuccessStatusCode ? null : response.ReasonPhrase,\n                    RawResponse = rawResponse,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _messageLogRepo.AddAsync(log);\n                await _messageLogRepo.SaveAsync();\n\n                return new SendResultExtended\n                {\n                    Success = response.IsSuccessStatusCode,\n                    Message = response.IsSuccessStatusCode ? \"✅ CTA message sent\" : \"❌ Failed to send CTA\",\n                    MessageId = messageId,\n                    RawResponse = rawResponse,\n                    MessageLogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception while sending CTA\");\n\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Exception while sending CTA\",\n                    ErrorMessage = ex.InnerException?.Message ?? ex.Message // ✅ this is critical\n                };\n            }\n\n        }\n\n    }\n}\n\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Services/MessageModule/Interfaces/IMessageService.cs",
      "sha256": "7592cb1c94c37bab95a7c1a34fbc22e00b2fa0428bc1a23a4c2626a437314c30",
      "language": "csharp",
      "size": 846,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Services.Messages.Interfaces\n{\n    public interface IMessageService\n    {\n        /// <summary>\n        /// Sends a message of any supported type (Text, Image, Template).\n        /// </summary>\n        /// <param name=\"dto\">Base DTO representing message details.</param>\n        /// <returns>Standardized result with status, error info, and raw response.</returns>\n        Task<SendResultExtended> SendMessageAsync(BaseMessageDto dto);\n        //Task<SendResultExtended> SendBulkMessagesAsync(BulkMessageDto dto);\n        Task SendFollowUpAsync(string recipientNumber, string messageContent);\n        Task<SendResultExtended> SendInteractiveMessageAsync(string recipientPhone, string bodyText, List<string> buttons);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Services/WhatsAppService.cs",
      "sha256": "239db95488943944c9836125a53c4ede14522f2bc4914748e07350d86cc0051f",
      "language": "csharp",
      "size": 2917,
      "content": "using System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing Microsoft.Extensions.Configuration;\nusing xbytechat.api.Models;\n\nnamespace xbytechat.api.Services\n{\n    public class WhatsAppService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly string _whatsAppToken;\n        private readonly string _whatsAppPhoneId;\n\n        public WhatsAppService(IConfiguration configuration)\n        {\n            _httpClient = new HttpClient();\n\n            _whatsAppToken = configuration[\"WhatsApp:apiToken\"];\n            _whatsAppPhoneId = configuration[\"WhatsApp:PhoneNumberId\"];\n\n            if (string.IsNullOrEmpty(_whatsAppToken))\n                Console.WriteLine(\"❌ Token is NULL or EMPTY from config!\");\n\n            if (string.IsNullOrEmpty(_whatsAppPhoneId))\n                Console.WriteLine(\"❌ Phone ID is NULL or EMPTY from config!\");\n        }\n\n        public async Task<WhatsAppResult> SendMessageAsync(string recipientPhone, string messageText)\n        {\n            try\n            {\n                Console.WriteLine(\"👉 Preparing to send WhatsApp message...\");\n                var url = $\"https://graph.facebook.com/v22.0/{_whatsAppPhoneId}/messages\";\n\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = recipientPhone,\n                    type = \"text\",\n                    text = new { body = messageText }\n                };\n\n                var json = JsonSerializer.Serialize(payload);\n                var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", _whatsAppToken);\n\n                var response = await _httpClient.PostAsync(url, content);\n                var responseBody = await response.Content.ReadAsStringAsync();\n\n                Console.WriteLine($\"✅ Status: {response.StatusCode}\");\n                Console.WriteLine($\"📥 Response: {responseBody}\");\n\n                if (response.IsSuccessStatusCode)\n                {\n                    return new WhatsAppResult { Success = true, RawResponse = responseBody };\n                }\n                else\n                {\n                    return new WhatsAppResult\n                    {\n                        Success = false,\n                        ErrorMessage = $\"Meta API Error: {response.StatusCode}\",\n                        RawResponse = responseBody\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Exception while sending:\");\n                Console.WriteLine(ex.Message);\n\n                return new WhatsAppResult\n                {\n                    Success = false,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/AutoMapperProfile.cs",
      "sha256": "989f0b9b654be427f90cea952c56afc87d0c6b647e71bae60f9694b4e21bacf2",
      "language": "csharp",
      "size": 708,
      "content": "using AutoMapper;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Shared\n{\n    public class AutoMapperProfile : Profile\n    {\n        public AutoMapperProfile()\n        {\n            CreateMap<Contact, ContactDto>();\n            CreateMap<Campaign, CampaignDto>();\n            CreateMap<MessageLog, MessageLogDto>();\n            CreateMap<TrackingLog, TrackingLogDto>();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/BusinessControllerBase.cs",
      "sha256": "ae04266e74cbbdfb58a81d85d24db83b9151ebef9e42b000430e8853ac2aa32f",
      "language": "csharp",
      "size": 343,
      "content": "using System;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace xbytechat.api.Shared\n{\n    // Do NOT add [ApiController] here; keep it on concrete controllers.\n    public abstract class BusinessControllerBase : ControllerBase\n    {\n        protected Guid BusinessId => User.GetBusinessId();\n        protected Guid UserId => User.GetUserId();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/ClaimsBusinessDetails.cs",
      "sha256": "c2e6949a61ef96fc2c06636f297b8d8d033f3f29fa5d7b57230743db945ed0a2",
      "language": "csharp",
      "size": 939,
      "content": "using System;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.Shared\n{\n    public static class ClaimsBusinessDetails\n    {\n        public static Guid GetBusinessId(this ClaimsPrincipal user)\n        {\n            var businessIdClaim = user.FindFirst(\"businessId\")?.Value; // lowercase only!\n            if (string.IsNullOrEmpty(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                throw new UnauthorizedAccessException(\"Invalid or missing businessId in token.\");\n            return businessId;\n        }\n\n        public static Guid GetUserId(this ClaimsPrincipal user)\n        {\n            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))\n                throw new UnauthorizedAccessException(\"Invalid or missing userId in token.\");\n            return userId;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/ClaimsPrincipalExtensions.cs",
      "sha256": "aceea513e3338cb16f3558e4dea2d6cafd833f7786da41a6c718b9b2c7294670",
      "language": "csharp",
      "size": 90,
      "content": "namespace xbytechat.api.Shared\n{\n    public class ClaimsPrincipalExtensions\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/PaginatedRequest.cs",
      "sha256": "af6fceb743c7fcb6bbb984e08b2bb8e696a447e38e61b6fc85a7b9dd48a0fb04",
      "language": "csharp",
      "size": 363,
      "content": "namespace xbytechat.api.Shared\n{\n    public class PaginatedRequest\n    {\n        public int Page { get; set; } = 1;       // Page number (1-based)\n        public int PageSize { get; set; } = 10;  // Items per page\n\n        // Optional filter (can be extended later)\n        public string? Status { get; set; }\n        public string? Search { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Shared/PaginatedResponse.cs",
      "sha256": "d59aca9b4129006df5c4ec39b4e6793672e9493f4581e7963b6c215465d1b113",
      "language": "csharp",
      "size": 296,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Shared\n{\n    public class PaginatedResponse<T>\n    {\n        public List<T> Items { get; set; } = new();\n        public int TotalCount { get; set; }\n        public int Page { get; set; }\n        public int PageSize { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/TrackingUtils/DeviceHelper.cs",
      "sha256": "70ad5b3deb3b07358a3ce61a514b3a9c3f4bb78007752bd0f4106ef8a3f27b32",
      "language": "csharp",
      "size": 748,
      "content": "// File: Features/CTATracking/Utils/DeviceHelper.cs\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class DeviceHelper\n    {\n        public static string GetDeviceType(string userAgent)\n        {\n            if (string.IsNullOrEmpty(userAgent)) return \"Unknown\";\n\n            userAgent = userAgent.ToLower();\n\n            if (userAgent.Contains(\"mobile\") || userAgent.Contains(\"android\") || userAgent.Contains(\"iphone\"))\n                return \"Mobile\";\n\n            if (userAgent.Contains(\"ipad\") || userAgent.Contains(\"tablet\"))\n                return \"Tablet\";\n\n            if (userAgent.Contains(\"windows\") || userAgent.Contains(\"macintosh\"))\n                return \"Desktop\";\n\n            return \"Unknown\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/TrackingUtils/GeoHelper.cs",
      "sha256": "359da4b5f8939751d00d9137b41774e466af302ccaf60e203c1b0f0827a9eafd",
      "language": "csharp",
      "size": 952,
      "content": "// File: Features/CTATracking/Utils/GeoHelper.cs\n\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class GeoHelper\n    {\n        public static async Task<string> GetCountryFromIP(string ipAddress)\n        {\n            try\n            {\n                if (string.IsNullOrWhiteSpace(ipAddress) || ipAddress == \"::1\")\n                    return \"Localhost\";\n\n                using var client = new HttpClient();\n                var response = await client.GetStringAsync($\"https://ipapi.co/{ipAddress}/json/\");\n\n                var doc = JsonDocument.Parse(response);\n                if (doc.RootElement.TryGetProperty(\"country_name\", out var countryProp))\n                    return countryProp.GetString() ?? \"Unknown\";\n            }\n            catch\n            {\n                // fallback\n            }\n\n            return \"Unknown\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/TrackingUtils/TrackingUrlBuilder.cs",
      "sha256": "d944abb54aa2863bcad184f9d8bbd42d683f5d0b0b07474ea3f26903e7cc13d5",
      "language": "csharp",
      "size": 1370,
      "content": "using System;\nusing System.Web;\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class TrackingUrlBuilder\n    {\n        public static string BuildTrackingUrl(\n            Guid businessId,\n            string sourceType,\n            Guid sourceId,\n            string buttonText,\n            string redirectUrl,\n            Guid? messageId = null,\n            Guid? contactId = null,\n            string contactPhone = null,\n            string sessionId = null,\n            string threadId = null)\n        {\n            var query = HttpUtility.ParseQueryString(string.Empty);\n            query[\"src\"] = sourceType;\n            query[\"id\"] = sourceId.ToString();\n            query[\"btn\"] = buttonText;\n            query[\"to\"] = redirectUrl;\n            query[\"type\"] = buttonText;\n            if (messageId != null) query[\"msg\"] = messageId.ToString();\n            if (contactId != null) query[\"contact\"] = contactId.ToString();\n            if (!string.IsNullOrEmpty(contactPhone)) query[\"phone\"] = contactPhone;\n            if (!string.IsNullOrEmpty(sessionId)) query[\"session\"] = sessionId;\n            if (!string.IsNullOrEmpty(threadId)) query[\"thread\"] = threadId;\n\n            var baseUrl = Environment.GetEnvironmentVariable(\"API_BASE_URL\") ?? \"https://yourdomain.com\";\n            return $\"{baseUrl}/api/tracking/redirect?{query}\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/utility/TemplateParameterHelper.cs",
      "sha256": "51753bdf8ce7b9964913d5a501bee92803cf58d23cc315def80b8c69561dfbe1",
      "language": "csharp",
      "size": 1252,
      "content": "using Newtonsoft.Json;\nusing System.Text.RegularExpressions;\n\nnamespace xbytechat.api.Shared.utility\n{\n    public static class TemplateParameterHelper\n    {\n        // ✅ Used when parsing stored JSON parameters\n        public static List<string> ParseTemplateParams(string? jsonString)\n        {\n            if (string.IsNullOrWhiteSpace(jsonString)) return new List<string>();\n            try\n            {\n                return JsonConvert.DeserializeObject<List<string>>(jsonString) ?? new List<string>();\n            }\n            catch\n            {\n                return new List<string>();\n            }\n        }\n\n        // ✅ NEW: Fills {{1}}, {{2}} with parameter values\n        public static string FillPlaceholders(string template, List<string> parameters)\n        {\n            if (string.IsNullOrWhiteSpace(template) || parameters == null || parameters.Count == 0)\n                return template;\n\n            // Replace {{1}}, {{2}} ... with values\n            return Regex.Replace(template, @\"\\{\\{(\\d+)\\}\\}\", match =>\n            {\n                var index = int.Parse(match.Groups[1].Value) - 1;\n                return index >= 0 && index < parameters.Count ? parameters[index] : match.Value;\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Validators/MessageTypeValidator.cs",
      "sha256": "a9accea936700f5fa40d270dffc11079bdce7a4ede1f30f968b41436460b80b2",
      "language": "csharp",
      "size": 871,
      "content": "namespace xbytechat.api.Validators\n{\n    /// <summary>\n    /// Centralized validator for supported message types (text, image, template, etc.)\n    /// </summary>\n    public static class MessageTypeValidator\n    {\n        private static readonly HashSet<string> SupportedTypes = new()\n        {\n            \"text\", \"image\", \"template\"\n        };\n\n        /// <summary>\n        /// Checks whether a messageType is supported.\n        /// </summary>\n        public static bool IsValid(string? messageType)\n        {\n            return !string.IsNullOrWhiteSpace(messageType) &&\n                   SupportedTypes.Contains(messageType.ToLower());\n        }\n\n        /// <summary>\n        /// Returns all supported message types.\n        /// </summary>\n        public static IEnumerable<string> GetSupportedTypes()\n        {\n            return SupportedTypes;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Abstractions/ITemplateCatalogProvider.cs",
      "sha256": "013b4df521e161fb281c651f252a270d851bffe7b430900f96386d0c9b4ccf18",
      "language": "csharp",
      "size": 420,
      "content": "using xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Abstractions\n{\n    public interface ITemplateCatalogProvider\n    {\n        Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity setting, CancellationToken ct = default);\n        Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity setting, string templateName, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Abstractions/TemplateCatalogItem.cs",
      "sha256": "27edec7875c999037dd77d4d6af4a309baf8a5a1f130ec53f86f9dc12757ef76",
      "language": "csharp",
      "size": 414,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.WhatsAppSettings.Abstractions\n{\n    public record TemplateCatalogItem(\n       string Name,\n       string Language,\n       string Body,\n       int PlaceholderCount,\n       bool HasImageHeader,\n       IReadOnlyList<ButtonMetadataDto> Buttons,\n       string Status,\n       string? Category,\n       string? ExternalId,\n       string RawJson\n   );\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Common/Providers.cs",
      "sha256": "f28418126b45e299564664005d25a4c33d566f9deeb455d10358c28c54ccc6bc",
      "language": "csharp",
      "size": 801,
      "content": "namespace xbytechat.api.WhatsAppSettings.Common\n{\n    public static class Providers\n    {\n        public const string PINNACLE = \"PINNACLE\";\n        public const string META_CLOUD = \"META_CLOUD\";\n\n        public static string NormalizeToUpper(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return PINNACLE;\n            var s = raw.Trim().ToUpperInvariant();\n            return s switch\n            {\n                \"META\" => META_CLOUD,\n                \"META_CLOUD\" => META_CLOUD,\n                \"PINNACLE\" => PINNACLE,\n                _ => s // future providers just uppercase\n            };\n        }\n        public static bool IsValid(string? raw)\n        {\n            var s = NormalizeToUpper(raw);\n            return s == PINNACLE || s == META_CLOUD;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/TemplateMetaController.cs",
      "sha256": "9433fd4ad9e26ee026e9f9de320b2ce1e51a5c654e122aff25ca78b43cf2b761",
      "language": "csharp",
      "size": 1694,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates/meta\")]\n    [Authorize]\n    public sealed class TemplateMetaController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateFetcherService _fetcher;\n\n        public TemplateMetaController(IWhatsAppTemplateFetcherService fetcher)\n        {\n            _fetcher = fetcher;\n        }\n\n        // GET /api/templates/meta/list/{businessId}?provider=META_CLOUD\n        [HttpGet(\"list/{businessId:guid}\")]\n        public async Task<IActionResult> List(Guid businessId, [FromQuery] string? provider = null)\n        {\n            if (businessId == Guid.Empty) return BadRequest(new { message = \"Invalid businessId\" });\n            var list = await _fetcher.GetTemplatesMetaAsync(businessId, provider);\n            return Ok(list);\n        }\n\n        // GET /api/templates/meta/{businessId}/{templateName}?language=en_US&provider=META_CLOUD\n        [HttpGet(\"{businessId:guid}/{templateName}\")]\n        public async Task<IActionResult> One(Guid businessId, string templateName, [FromQuery] string? language = null, [FromQuery] string? provider = null)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(templateName))\n                return BadRequest(new { message = \"Invalid parameters\" });\n\n            var meta = await _fetcher.GetTemplateMetaAsync(businessId, templateName, language, provider);\n            if (meta is null) return NotFound();\n            return Ok(meta);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/TemplatePreviewController.cs",
      "sha256": "324fe9674584ea37ac35777789833321459191bddffa3095e601c9547373f20c",
      "language": "csharp",
      "size": 1204,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates/preview\")]\n    [Authorize]\n    public sealed class TemplatePreviewController : ControllerBase\n    {\n        private readonly ITemplatePreviewService _svc;\n\n        public TemplatePreviewController(ITemplatePreviewService svc)\n        {\n            _svc = svc;\n        }\n\n        // POST /api/templates/preview/{businessId}\n        [HttpPost(\"{businessId:guid}\")]\n        public async Task<IActionResult> Preview([FromRoute] Guid businessId, [FromBody] TemplatePreviewRequestDto request)\n        {\n            if (businessId == Guid.Empty) return BadRequest(new { message = \"Invalid businessId\" });\n            if (request == null || string.IsNullOrWhiteSpace(request.TemplateName))\n                return BadRequest(new { message = \"TemplateName is required.\" });\n\n            var result = await _svc.PreviewAsync(businessId, request);\n            return Ok(result);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/TemplatesController.cs",
      "sha256": "c4ef0cc4f3fb7d6d28f3e9213f4b09359c245c895296a8de08578e27098d2377",
      "language": "csharp",
      "size": 5328,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.FileSystemGlobbing;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat_api.WhatsAppSettings.Services;\nnamespace xbytechat.api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates\")]\n    public class TemplatesController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        private readonly ITemplateSyncService _sync;\n        private readonly IWhatsAppTemplateFetcherService _fetcher;\n\n        public TemplatesController(AppDbContext db, ITemplateSyncService sync, IWhatsAppTemplateFetcherService fetcher)\n        { _db = db; _sync = sync; _fetcher = fetcher; }\n\n        [HttpPost(\"sync/{businessId:guid}\")]\n        [Authorize]\n        public async Task<IActionResult> Sync(Guid businessId, [FromQuery] bool force = false)\n        {\n            if (businessId == Guid.Empty) return BadRequest(new { success = false, message = \"Invalid businessId\" });\n            var result = await _sync.SyncBusinessTemplatesAsync(businessId, force);\n            return Ok(new { success = true, result });\n        }\n\n        [HttpGet(\"{businessId:guid}\")]\n        [Authorize]\n        public async Task<IActionResult> List(Guid businessId, [FromQuery] string? q = null,\n            [FromQuery] string? status = \"APPROVED\", [FromQuery] string? language = null,\n            [FromQuery] string? provider = null)\n        {\n            var query = _db.WhatsAppTemplates.AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.IsActive);\n\n            if (!string.IsNullOrWhiteSpace(status))\n                query = query.Where(x => x.Status == status);\n\n            if (!string.IsNullOrWhiteSpace(language))\n                query = query.Where(x => x.Language == language);\n\n            if (!string.IsNullOrWhiteSpace(provider))\n                query = query.Where(x => x.Provider == provider);\n\n            if (!string.IsNullOrWhiteSpace(q))\n                query = query.Where(x => x.Name.Contains(q) || x.Body.Contains(q));\n\n            var items = await query\n                .OrderBy(x => x.Name)\n                .Select(x => new\n                {\n                    x.Name,\n                    x.Language,\n                    x.Status,\n                    x.Category,\n                    x.PlaceholderCount,\n                    x.HasImageHeader,\n                    x.ButtonsJson\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, templates = items });\n        }\n\n        [HttpGet(\"{businessId:guid}/{name}\")]\n        [Authorize]\n        //public async Task<IActionResult> GetOne(Guid businessId, string name, [FromQuery] string? language = null)\n        //{\n        //    var tpl = await _db.WhatsAppTemplates.AsNoTracking()\n        //        .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.Name == name &&\n        //                                  (language == null || x.Language == language));\n        //    if (tpl == null) return NotFound();\n        //    return Ok(new\n        //    {\n        //        tpl.Name,\n        //        tpl.Language,\n        //        tpl.Status,\n        //        tpl.Category,\n        //        tpl.Body,\n        //        tpl.PlaceholderCount,\n        //        tpl.HasImageHeader,\n        //        tpl.ButtonsJson\n        //    });\n        //}\n\n        public async Task<IActionResult> GetOne(Guid businessId, string name, [FromQuery] string? language = null)\n        {\n            var tpl = await _db.WhatsAppTemplates.AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.Name == name &&\n                                          (language == null || x.Language == language));\n            if (tpl == null) return NotFound();\n\n            // 🔎 Ask meta service for precise header info (covers IMAGE/VIDEO/DOCUMENT/TEXT/none)\n            string headerKind = \"none\";\n            bool requiresHeaderMediaUrl = false;\n            try\n            {\n                var meta = await _fetcher.GetTemplateMetaAsync(businessId, tpl.Name, tpl.Language, provider: null);\n                var ht = meta?.HeaderType?.ToUpperInvariant();\n                headerKind = ht switch\n                {\n                    \"IMAGE\" => \"image\",\n                    \"VIDEO\" => \"video\",\n                    \"DOCUMENT\" => \"document\",\n                    \"TEXT\" => \"text\",\n                    _ => (tpl.HasImageHeader ? \"image\" : \"none\")\n                };\n                requiresHeaderMediaUrl = headerKind is \"image\" or \"video\" or \"document\";\n            }\n            catch\n            {\n                // fallback to legacy flag\n                headerKind = tpl.HasImageHeader ? \"image\" : \"none\";\n                requiresHeaderMediaUrl = headerKind == \"image\";\n            }\n\n            return Ok(new\n            {\n                tpl.Name,\n                tpl.Language,\n                tpl.Status,\n                tpl.Category,\n                tpl.Body,\n                tpl.PlaceholderCount,\n                tpl.HasImageHeader,\n                tpl.ButtonsJson,\n                headerKind,                // 👈 NEW for UI\n                requiresHeaderMediaUrl     // 👈 NEW for UI\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppNumbersController.cs",
      "sha256": "01794db6b95cd8ca597c3eec77ffa933ee4aae5de022224a1097d0bee842305a",
      "language": "csharp",
      "size": 5952,
      "content": "using System;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.WhatsAppSettings.Services;\nusing xbytechat.api.Features.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/whatsappsettings/{provider}/numbers\")]\n    public class WhatsAppNumbersController : ControllerBase\n    {\n        private readonly IWhatsAppPhoneNumberService _svc;\n        private readonly ILogger<WhatsAppNumbersController> _logger;\n\n        public WhatsAppNumbersController(\n            IWhatsAppPhoneNumberService svc,\n            ILogger<WhatsAppNumbersController> logger)\n        {\n            _svc = svc;\n            _logger = logger;\n        }\n\n        // Helper to resolve BusinessId from claims/header/query (adjust to your auth)\n        private bool TryGetBusinessId(out Guid businessId)\n        {\n            businessId = Guid.Empty;\n\n            // 1) Claim (preferred)\n            var claim = User?.FindFirst(\"BusinessId\") ?? User?.FindFirst(\"businessId\");\n            if (claim != null && Guid.TryParse(claim.Value, out businessId))\n                return true;\n\n            // 2) Header fallback\n            if (Request.Headers.TryGetValue(\"X-Business-Id\", out var h)\n                && Guid.TryParse(h.ToString(), out businessId))\n                return true;\n\n            // 3) Query fallback\n            if (Guid.TryParse(HttpContext.Request.Query[\"businessId\"], out businessId))\n                return true;\n\n            return false;\n        }\n\n        // GET /api/whatsappsettings/{provider}/numbers\n        [HttpGet]\n        [ProducesResponseType(StatusCodes.Status200OK)]\n        [ProducesResponseType(StatusCodes.Status400BadRequest)]\n        public async Task<IActionResult> List([FromRoute] string provider)\n        {\n            if (!TryGetBusinessId(out var businessId))\n                return BadRequest(\"BusinessId is required (claim/header/query).\");\n\n            var items = await _svc.ListAsync(businessId, provider);\n            return Ok(items);\n        }\n\n        public sealed class UpsertRequest\n        {\n            public string PhoneNumberId { get; set; } = null!;\n            public string WhatsAppBusinessNumber { get; set; } = null!;\n            public string? SenderDisplayName { get; set; }\n            public bool? IsActive { get; set; }\n            public bool? IsDefault { get; set; }\n        }\n\n        // POST /api/whatsappsettings/{provider}/numbers\n        [HttpPost(\"\")]\n        [ProducesResponseType(typeof(WhatsAppPhoneNumber), StatusCodes.Status200OK)]\n        [ProducesResponseType(StatusCodes.Status400BadRequest)]\n       // [HttpPost(\"\")]\n        public async Task<IActionResult> Upsert([FromRoute] string provider, [FromBody] UpsertRequest req)\n        {\n            if (!TryGetBusinessId(out var businessId))\n                return BadRequest(\"BusinessId is required (claim/header/query).\");\n\n            if (string.IsNullOrWhiteSpace(req.PhoneNumberId))\n                return BadRequest(\"phoneNumberId is required.\");\n            if (string.IsNullOrWhiteSpace(req.WhatsAppBusinessNumber))\n                return BadRequest(\"whatsAppBusinessNumber is required.\");\n\n            try\n            {\n                var saved = await _svc.UpsertAsync(\n                    businessId,\n                    provider, // service normalizes\n                    req.PhoneNumberId,\n                    req.WhatsAppBusinessNumber,\n                    req.SenderDisplayName,\n                    req.IsActive,\n                    req.IsDefault\n                );\n                return Ok(saved);\n            }\n            catch (InvalidOperationException ex) when (ex.InnerException is Npgsql.NpgsqlException npg)\n            {\n                // Bubble up constraint codes if useful\n                // 23505 unique_violation, 23503 foreign_key_violation, 23502 not_null_violation\n                return StatusCode(StatusCodes.Status409Conflict, new\n                {\n                    statusCode = 409,\n                    code = npg.SqlState,\n                    message = ex.Message\n                });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(StatusCodes.Status500InternalServerError, new\n                {\n                    statusCode = 500,\n                    message = ex.Message\n                });\n            }\n        }\n\n        // DELETE /api/whatsappsettings/{provider}/numbers/{id}\n        [HttpDelete(\"{id:guid}\")]\n        [ProducesResponseType(StatusCodes.Status204NoContent)]\n        [ProducesResponseType(StatusCodes.Status404NotFound)]\n        [ProducesResponseType(StatusCodes.Status400BadRequest)]\n        public async Task<IActionResult> Delete([FromRoute] string provider, [FromRoute] Guid id)\n        {\n            if (!TryGetBusinessId(out var businessId))\n                return BadRequest(\"BusinessId is required (claim/header/query).\");\n\n            var ok = await _svc.DeleteAsync(businessId, provider, id);\n            if (!ok) return NotFound();\n\n            return NoContent();\n        }\n\n        // PATCH /api/whatsappsettings/{provider}/numbers/{id}/default\n        [HttpPatch(\"{id:guid}/default\")]\n        [ProducesResponseType(StatusCodes.Status204NoContent)]\n        [ProducesResponseType(StatusCodes.Status404NotFound)]\n        [ProducesResponseType(StatusCodes.Status400BadRequest)]\n        public async Task<IActionResult> SetDefault([FromRoute] string provider, [FromRoute] Guid id)\n        {\n            if (!TryGetBusinessId(out var businessId))\n                return BadRequest(\"BusinessId is required (claim/header/query).\");\n\n            var ok = await _svc.SetDefaultAsync(businessId, provider, id);\n            if (!ok) return NotFound();\n\n            return NoContent();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppSettingsController.cs",
      "sha256": "813a4158ec3c4a50c2fc04f548697062c9f8300610b1464422cb3bf8d9b31bb8",
      "language": "csharp",
      "size": 14803,
      "content": "// 📄 File: WhatsAppSettings/Controllers/WhatsAppSettingsController.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing xbytechat.api.Shared; // for User.GetBusinessId()\nusing xbytechat.api.WhatsAppSettings.Services;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class WhatsAppSettingsController : ControllerBase\n    {\n        private readonly IWhatsAppSettingsService _svc;\n        private readonly ILogger<WhatsAppSettingsController> _logger;\n        private readonly IWhatsAppSenderService _whatsAppSenderService;\n       \n        public WhatsAppSettingsController(\n            IWhatsAppSettingsService svc,\n            ILogger<WhatsAppSettingsController> logger, IWhatsAppSenderService whatsAppSenderService)\n        {\n            _svc = svc;\n            _logger = logger;\n            _whatsAppSenderService = whatsAppSenderService;\n\n        }\n\n \n        [HttpPut(\"update\")]\n        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(new { message = \"Invalid input.\", errors = ModelState });\n\n            Guid businessId;\n            try { businessId = User.GetBusinessId(); dto.BusinessId = businessId; }\n            catch { return Unauthorized(new { message = \"BusinessId missing or invalid in token.\" }); }\n\n            await _svc.SaveOrUpdateSettingAsync(dto);\n            return Ok(new { message = \"Settings saved/updated.\" });\n        }\n\n        // ----------------------------\n        // Get the current user's saved settings\n        // ----------------------------\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMySettings()\n        {\n            var businessId = User.GetBusinessId();\n            var setting = await _svc.GetSettingsByBusinessIdAsync(businessId);\n            if (setting == null)\n                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n            return Ok(setting);\n        }\n\n        // ----------------------------\n        // Test connection using values sent in the body (not necessarily saved)\n        // Accepts Provider = \"Pinnacle\" or \"Meta_cloud\"\n        // ----------------------------\n        [HttpPost(\"test-connection\")]\n        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            if (dto is null)\n                return BadRequest(new { message = \"❌ Missing request body.\" });\n\n            var provider = NormalizeProvider(dto.Provider);\n            if (provider is null)\n                return BadRequest(new { message = \"❌ Provider is required (Pinnacle | Meta_cloud).\" });\n\n            dto.Provider = provider; // use canonical\n\n            // Minimal provider-specific validation (service will validate again)\n            if (provider == \"Meta_cloud\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiUrl) ||\n                    string.IsNullOrWhiteSpace(dto.ApiKey) ||\n                    string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                {\n                    return BadRequest(new { message = \"❌ API URL, Token and Phone Number ID are required for Meta Cloud test.\" });\n                }\n            }\n            else if (provider == \"Pinnacle\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiUrl) ||\n                    string.IsNullOrWhiteSpace(dto.ApiKey) ||\n                    (string.IsNullOrWhiteSpace(dto.WabaId) && string.IsNullOrWhiteSpace(dto.PhoneNumberId)) ||\n                    string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                {\n                    return BadRequest(new\n                    {\n                        message = \"❌ API URL, API Key, (WABA ID or Phone Number ID), and Business Number are required for Pinnacle test.\"\n                    });\n                }\n            }\n\n            try\n            {\n                var message = await _svc.TestConnectionAsync(dto);\n\n                // Convention: service returns a human string; we 200 on success (starts with ✅), 400 otherwise\n                if (!string.IsNullOrEmpty(message) && message.StartsWith(\"✅\"))\n                    return Ok(new { message });\n\n                return BadRequest(new { message = string.IsNullOrEmpty(message) ? \"❌ Test failed.\" : message });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ [TestConnection] Failed\");\n                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        // ----------------------------\n        // Test connection against the SAVED settings for this business\n        // ----------------------------\n        //[HttpPost(\"test-connection/current\")]\n        //public async Task<IActionResult> TestConnectionCurrent()\n        //{\n        //    var businessId = User.GetBusinessId();\n        //    var saved = await _svc.GetSettingsByBusinessIdAsync(businessId);\n        //    if (saved is null)\n        //        return NotFound(new { message = \"❌ No saved WhatsApp settings found.\" });\n\n        //    var dto = new SaveWhatsAppSettingDto\n        //    {\n        //        BusinessId = businessId,\n        //        Provider = NormalizeProvider(saved.Provider) ?? saved.Provider,\n        //        ApiUrl = saved.ApiUrl,\n        //        ApiKey = saved.ApiKey,\n        //       // ApiToken = saved.ApiToken,\n        //        PhoneNumberId = saved.PhoneNumberId,\n        //        WabaId = saved.WabaId,\n        //        WhatsAppBusinessNumber = saved.WhatsAppBusinessNumber,\n        //        SenderDisplayName = saved.SenderDisplayName,\n        //        WebhookSecret = saved.WebhookSecret,\n        //        WebhookVerifyToken = saved.WebhookVerifyToken,\n        //        IsActive = saved.IsActive\n        //    };\n\n        //    try\n        //    {\n        //        var message = await _svc.TestConnectionAsync(dto);\n        //        if (!string.IsNullOrEmpty(message) && message.StartsWith(\"✅\"))\n        //            return Ok(new { message });\n\n        //        return BadRequest(new { message = string.IsNullOrEmpty(message) ? \"❌ Test failed.\" : message });\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"❌ [TestConnectionCurrent] Failed\");\n        //        return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n        //    }\n        //}\n\n        // ----------------------------\n        // Delete current user's settings\n        // ----------------------------\n\n        [HttpPost(\"test-connection/current\")]\n        public async Task<IActionResult> TestConnectionCurrent()\n        {\n            // ---- local helpers (scoped only to this action) ----\n            static string? NormalizeProvider(string? raw)\n            {\n                if (string.IsNullOrWhiteSpace(raw)) return null;\n                var s = raw.Trim().ToLowerInvariant().Replace(\"-\", \"_\").Replace(\" \", \"_\");\n                if (s is \"meta_cloud\" or \"meta\" or \"wa_cloud\" or \"facebook\" or \"whatsapp_cloud\")\n                    return \"META_CLOUD\";\n                if (s is \"pinnacle\" or \"pinnacle_official\" or \"pinbot\")\n                    return \"PINNACLE\";\n                return null; // unknown → let original pass through\n            }\n\n            static string NormalizeApiUrl(string? apiUrl, string? provider)\n            {\n                if (string.Equals(provider, \"META_CLOUD\", StringComparison.Ordinal))\n                    return string.IsNullOrWhiteSpace(apiUrl) ? \"https://graph.facebook.com/v22.0\" : apiUrl.Trim();\n                return string.IsNullOrWhiteSpace(apiUrl) ? string.Empty : apiUrl.Trim();\n            }\n\n            static string? T(string? s) => string.IsNullOrWhiteSpace(s) ? null : s.Trim();\n            // ---- /helpers ----\n\n            var businessId = User.GetBusinessId();\n            var saved = await _svc.GetSettingsByBusinessIdAsync(businessId);\n            if (saved is null)\n                return NotFound(new { message = \"❌ No saved WhatsApp settings found.\" });\n\n            // defensive normalization (safe even if FE already sends uppercase)\n            var provider = NormalizeProvider(saved.Provider) ?? saved.Provider?.Trim();\n            var apiUrl = NormalizeApiUrl(saved.ApiUrl, provider);\n            var apiKey = T(saved.ApiKey);\n            var phoneId = T(saved.PhoneNumberId);\n            var wabaId = T(saved.WabaId);\n\n            var dto = new SaveWhatsAppSettingDto\n            {\n                BusinessId = businessId,\n                Provider = provider ?? saved.Provider, // keep original if we couldn't map\n                ApiUrl = apiUrl,\n                ApiKey = apiKey,\n                PhoneNumberId = phoneId,\n                WabaId = wabaId,\n                WhatsAppBusinessNumber = T(saved.WhatsAppBusinessNumber),\n                SenderDisplayName = T(saved.SenderDisplayName),\n                WebhookSecret = T(saved.WebhookSecret),\n                WebhookVerifyToken = T(saved.WebhookVerifyToken),\n                IsActive = saved.IsActive\n            };\n\n            // Provider-specific guardrails (clear errors instead of failing deep inside)\n            if (dto.Provider == \"META_CLOUD\")\n            {\n                if (string.IsNullOrEmpty(dto.ApiKey))\n                    return BadRequest(new { message = \"❌ Missing Meta access token (ApiKey).\" });\n                // apiUrl defaulted above if empty\n            }\n            else if (dto.Provider == \"PINNACLE\")\n            {\n                if (string.IsNullOrEmpty(dto.ApiKey))\n                    return BadRequest(new { message = \"❌ Missing Pinnacle API key.\" });\n                if (string.IsNullOrEmpty(dto.ApiUrl))\n                    return BadRequest(new { message = \"❌ Missing Pinnacle API URL.\" });\n            }\n            else\n            {\n                return BadRequest(new { message = $\"❌ Unsupported provider: {dto.Provider}\" });\n            }\n\n            try\n            {\n                var message = await _svc.TestConnectionAsync(dto);\n\n                if (!string.IsNullOrEmpty(message) && message.StartsWith(\"✅\"))\n                    return Ok(new { message });\n\n                return BadRequest(new { message = string.IsNullOrEmpty(message) ? \"❌ Test failed.\" : message });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ [TestConnectionCurrent] Failed\");\n                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"delete\")]\n        public async Task<IActionResult> DeleteSetting()\n        {\n            var businessId = User.GetBusinessId();\n            var deleted = await _svc.DeleteSettingsAsync(businessId);\n            if (!deleted) return NotFound(new { message = \"❌ No WhatsApp settings found to delete.\" });\n            return Ok(new { message = \"🗑️ WhatsApp settings deleted successfully.\" });\n        }\n\n        // Optional alias for FE routes that call /delete-current\n        [HttpDelete(\"delete-current\")]\n        public Task<IActionResult> DeleteSettingAlias() => DeleteSetting();\n\n        /// <summary>\n        /// Maps any incoming text to the canonical provider values we support.\n        /// Returns null if unrecognized.\n        /// </summary>\n        private static string? NormalizeProvider(string? providerRaw)\n        {\n            if (string.IsNullOrWhiteSpace(providerRaw)) return null;\n\n            var p = providerRaw.Trim();\n\n            // Accept canonical values exactly and a few common variants\n            if (string.Equals(p, \"Pinnacle\", StringComparison.Ordinal)) return \"Pinnacle\";\n            if (string.Equals(p, \"Meta_cloud\", StringComparison.Ordinal)) return \"Meta_cloud\";\n\n            // tolerate some user/legacy variants from older UIs\n            var lower = p.ToLowerInvariant();\n            if (lower is \"pinbot\" or \"pinnacle (official)\" or \"pinnacle (pinnacle)\" or \"pinnacle official\")\n                return \"Pinnacle\";\n            if (lower is \"meta cloud\" or \"meta\" or \"meta-cloud\")\n                return \"Meta_cloud\";\n\n            return null;\n        }\n\n        [HttpGet(\"callback-url\")]\n        public async Task<IActionResult> GetMyCallbackUrl([FromServices] IConfiguration cfg)\n        {\n            var businessId = User.GetBusinessId();\n            var baseUrl = cfg[\"App:PublicBaseUrl\"] ?? string.Empty;\n            var url = await _svc.GetCallbackUrlAsync(businessId, baseUrl);\n            return Ok(new { callbackUrl = url });\n        }\n\n        [HttpGet(\"all\")]\n        public async Task<IActionResult> GetAllForBusinessAsync([FromServices] IWhatsAppSettingsService settingsService)\n        {\n            // Resolve BusinessId from claim/header/query (same pattern used elsewhere)\n            if (!TryResolveBusinessId(HttpContext, User, out var businessId))\n                return BadRequest(\"BusinessId is required (claim/header/query).\");\n\n            var items = await settingsService.GetAllForBusinessAsync(businessId);\n            return Ok(items);\n        }\n\n        // local helper (add once in this controller if you don’t already have it)\n        private static bool TryResolveBusinessId(HttpContext ctx, ClaimsPrincipal user, out Guid businessId)\n        {\n            businessId = Guid.Empty;\n\n            var claim = user?.FindFirst(\"BusinessId\") ?? user?.FindFirst(\"businessId\");\n            if (claim != null && Guid.TryParse(claim.Value, out businessId))\n                return true;\n\n            if (ctx.Request.Headers.TryGetValue(\"X-Business-Id\", out var h)\n                && Guid.TryParse(h.ToString(), out businessId))\n                return true;\n\n            if (Guid.TryParse(ctx.Request.Query[\"businessId\"], out businessId))\n                return true;\n\n            return false;\n        }\n\n        // GET /api/whatsapp/senders/{businessId}\n        [HttpGet(\"senders/{businessId:guid}\")]     // <-- align action path\n        public async Task<IActionResult> GetSenders(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"Invalid businessId.\" });\n\n            var items = await _whatsAppSenderService.GetBusinessSendersAsync(businessId);\n            return Ok(items);\n        }\n    }\n\n}\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppTemplateFetcherController.cs",
      "sha256": "423175eb5cd31766ee4c3fe215cb17108c3cf6bc44948fc0f52a88e8a000ad39",
      "language": "csharp",
      "size": 3072,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WhatsAppTemplateFetcherController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public WhatsAppTemplateFetcherController(IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _templateFetcherService = templateFetcherService;\n        }\n\n        [HttpGet(\"get-template/{businessId}\")]\n        [Authorize] // ✅ Optional: Require authentication if your project uses JWT auth\n        public async Task<IActionResult> FetchTemplates(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"❌ Invalid BusinessId.\" });\n\n            var templates = await _templateFetcherService.FetchTemplatesAsync(businessId); // comment this line to stop fetch template as per businessid\n            //var templates = await _templateFetcherService.FetchAllTemplatesAsync(); // comment this line to stop fetch template as per businessid\n\n            return Ok(new\n            {\n                success = true,\n                templates = templates\n            });\n        }\n\n      \n\n        [HttpGet(\"get-template-all\")]\n        public async Task<IActionResult> GetAllTemplatesAsync()\n        {\n            try\n            {\n                var templates = await _templateFetcherService.FetchAllTemplatesAsync();\n                return Ok(new { success = true, templates });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"Error fetching templates\",\n                    detail = ex.Message\n                });\n            }\n        }\n\n        [HttpGet(\"get-template-by-name\")]\n        public async Task<IActionResult> GetTemplateByName([FromQuery] string name)\n        {\n            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value);\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, name, true);\n            return template == null ? NotFound() : Ok(template);\n        }\n        [HttpGet(\"get-by-name/{businessId}/{templateName}\")]\n        public async Task<IActionResult> GetByName(Guid businessId, string templateName, [FromQuery] bool includeButtons = true)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(templateName))\n                return BadRequest(new { success = false, message = \"❌ Missing or invalid parameters.\" });\n\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons);\n\n            if (template == null)\n                return NotFound();\n\n            return Ok(new\n            {\n                success = true,\n                template\n            });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/ButtonMetadataDto.cs",
      "sha256": "55b2b89dbf3f8b8f16bb134711c23334c37a60c9543a1ea34325fb89506a6dce",
      "language": "csharp",
      "size": 536,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class ButtonMetadataDto\n    {\n        public string Type { get; set; } // Example: \"URL\" or \"PHONE_NUMBER\"\n        public string Text { get; set; } // Button Text\n        public string SubType { get; set; } // (optional) for URL, Phone Number etc\n        public int Index { get; set; } // Index like 0, 1\n                                       // Optional: dynamic parameter value for validation\n        public string? ParameterValue { get; set; } // e.g. coupon_code\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs",
      "sha256": "9c7ba8be0ccb6695a19a15e08fa4ef3542ae0978f21c1129b75fb4975cf74a32",
      "language": "csharp",
      "size": 1324,
      "content": "// 📄 File: WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.DTOs\n{\n    public class SaveWhatsAppSettingDto\n    {\n        public Guid BusinessId { get; set; }\n\n        // Which provider: \"pinnacle\" | \"meta_cloud\"\n        [Required, MaxLength(50)]\n        public string Provider { get; set; } = string.Empty;\n\n        [Required, MaxLength(500)]\n        public string ApiUrl { get; set; } = string.Empty;\n\n        [MaxLength(1000)]\n        public string? ApiKey { get; set; } // Pinnacle\n\n      \n        [MaxLength(100)]\n        public string? PhoneNumberId { get; set; } // Meta Cloud\n\n        [MaxLength(100)]\n        public string? WabaId { get; set; } // Optional (Pinnacle/Meta)\n\n        [MaxLength(50)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        [MaxLength(200)]\n        public string? WebhookSecret { get; set; }\n\n        [MaxLength(200)]\n        public string? WebhookVerifyToken { get; set; }\n\n        // 👇 NEW: per-provider callback URL (optional, stored in DB)\n        [MaxLength(1000)]\n        public string? WebhookCallbackUrl { get; set; }\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateForUIResponseDto.cs",
      "sha256": "954d4bddaa8450da19f714aec8f819d5affa5edcee6a6e078759e3bcb04b47be",
      "language": "csharp",
      "size": 427,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class TemplateForUIResponseDto\n    {\n        public string Name { get; set; } = \"\";\n        public string Language { get; set; } = \"en_US\";\n        public string Body { get; set; } = \"\";\n        public int ParametersCount { get; set; }\n        public bool HasImageHeader { get; set; }\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateMetadataDto.cs",
      "sha256": "ee243eac02e205bf965753cb204d12e1548d23a7d43b9b21717744b30b5845e5",
      "language": "csharp",
      "size": 911,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    /// <summary>\n    /// DTO representing a simplified view of WhatsApp template metadata.\n    /// </summary>\n    public class TemplateMetadataDto\n    {\n        /// Unique name of the template.\n        public string Name { get; set; } = string.Empty;\n\n        /// Language code used when creating the template (e.g., en_US, hi_IN).\n        public string Language { get; set; } = \"en_US\";\n\n        /// The message body content with placeholders (e.g., \"Hi {{1}}, your order is ready\").\n        public string Body { get; set; } = string.Empty;\n\n        /// Number of dynamic parameters required (e.g., 2 for {{1}} and {{2}}).\n        public int PlaceholderCount { get; set; }\n\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new List<ButtonMetadataDto>(); // ✅ Added Buttons\n        public bool HasImageHeader { get; set; } = false;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateMetaDto.cs",
      "sha256": "2806aa041b83e7e1ef645c67f18f7d455aac9bdd1fcce9c4538b76786132c9ff",
      "language": "csharp",
      "size": 1516,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    // Normalized snapshot of a provider template for FE + snapshots\n    public sealed class TemplateMetaDto\n    {\n        public string Provider { get; set; } = \"\";     // \"META_CLOUD\" | \"PINNACLE\"\n        public string TemplateId { get; set; } = \"\";   // provider’s id if you store it\n        public string TemplateName { get; set; } = \"\";\n        public string Language { get; set; } = \"\";     // e.g., \"en_US\"\n\n        public bool HasHeaderMedia { get; set; }\n        public string? HeaderType { get; set; }        // \"IMAGE\" | \"VIDEO\" | \"DOCUMENT\" (future)\n\n        // 1-based placeholder slots for BODY\n        public List<PlaceholderSlot> BodyPlaceholders { get; set; } = new();\n\n        // Up to 3 buttons in template order\n        public List<TemplateButtonMeta> Buttons { get; set; } = new();\n\n    }\n\n    public sealed class TemplateButtonMeta\n    {\n        // Provider-level type (e.g., \"URL\", \"PHONE_NUMBER\", \"QUICK_REPLY\")\n        public string Type { get; set; } = \"\";\n        public string Text { get; set; } = \"\";         // label\n        public string? Value { get; set; }             // ParameterValue from provider (may contain \"{{1}}\")\n        public int Order { get; set; }                 // 0..2\n    }\n\n    public sealed class PlaceholderSlot\n    {\n        public int Index { get; set; }                 // 1..N\n        public string? Label { get; set; }\n        public string? Example { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplatePreviewDto.cs",
      "sha256": "ea9fe018139bee52670ef4b1030e185040a735c6eb91257088e675e75a40e3e1",
      "language": "csharp",
      "size": 2223,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public sealed class TemplatePreviewRequestDto\n    {\n        public string TemplateName { get; set; } = \"\";\n        public string? Provider { get; set; }          // \"META_CLOUD\" | \"PINNACLE\" (optional)\n        public string? Language { get; set; }          // e.g., \"en_US\" (optional)\n        public string? HeaderImageUrl { get; set; }    // for image-header previews\n        public List<string> TemplateParameters { get; set; } = new();  // BODY params in order\n        public List<PreviewButtonInputDto> Buttons { get; set; } = new(); // up to 3\n    }\n\n    public sealed class PreviewButtonInputDto\n    {\n        public int Position { get; set; }              // 1..3 aligns with template button order\n        public string? Type { get; set; }              // e.g., \"URL\"\n        public string? Title { get; set; }             // label shown to user (optional)\n        public string? Value { get; set; }             // for dynamic URL value or tel/wa deep link\n    }\n\n    public sealed class TemplatePreviewResponseDto\n    {\n        public bool FoundTemplate { get; set; }\n        public string TemplateName { get; set; } = \"\";\n        public string? Language { get; set; }\n        public bool HasHeaderMedia { get; set; }\n        public string HeaderType { get; set; } = \"\";   // \"IMAGE\", \"VIDEO\", etc.\n\n        public int RequiredPlaceholderCount { get; set; }\n        public int ProvidedPlaceholderCount { get; set; }\n        public List<int> MissingPlaceholderIndices { get; set; } = new(); // 1-based\n        public List<string> Warnings { get; set; } = new();\n        public List<string> Errors { get; set; } = new();\n\n        // A provider-shaped preview of what we'd send (Meta/Pinnacle use the same component shape)\n        // Example:\n        // [\n        //   { type:\"header\", parameters:[{ type:\"image\", image:{ link:\"...\"}}]},\n        //   { type:\"body\", parameters:[{type:\"text\",text:\"..\"}, ...] },\n        //   { type:\"button\", sub_type:\"url\", index:\"0\", parameters:[{ type:\"text\", text:\"TOKEN_OR_URL\"}] }\n        // ]\n        public List<object> ProviderComponentsPreview { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/WhatsAppSenderDto.cs",
      "sha256": "8c113389ea7e922d92ef3a6f8538003ea60f8a62298e0622300bf845f290668c",
      "language": "csharp",
      "size": 869,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class WhatsAppSenderDto\n    {\n        public Guid Id { get; set; }                         // row id in WhatsAppPhoneNumbers\n        public Guid BusinessId { get; set; }\n        public string Provider { get; set; } = string.Empty; // \"PINNACLE\" | \"META_CLOUD\"\n        public string PhoneNumberId { get; set; } = string.Empty;\n        public string WhatsAppBusinessNumber { get; set; } = string.Empty; // E.164 printable\n        public string? SenderDisplayName { get; set; }\n        public bool IsActive { get; set; }\n        public bool IsDefault { get; set; }\n        public string DisplayLabel =>\n            string.IsNullOrWhiteSpace(SenderDisplayName)\n                ? $\"{WhatsAppBusinessNumber} • {Provider}\"\n                : $\"{SenderDisplayName} ({WhatsAppBusinessNumber}) • {Provider}\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Models/WhatsAppPhoneNumber.cs",
      "sha256": "fbcd435532eb4acfc7bf5ec1191078f2598e733541f44cd2a3b768e96436ce0c",
      "language": "csharp",
      "size": 827,
      "content": "using System;\n\nnamespace xbytechat.api.Features.WhatsAppSettings.Models\n{\n    public class WhatsAppPhoneNumber\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        public Guid BusinessId { get; set; }\n        public string Provider { get; set; } = null!;                 // \"Meta_cloud\" | \"Pinnacle\" | etc.\n\n        public string PhoneNumberId { get; set; } = null!;            // provider-specific id (e.g., Meta phone_number_id)\n        public string WhatsAppBusinessNumber { get; set; } = null!;   // e.g., \"+15551234567\"\n        public string? SenderDisplayName { get; set; }\n\n        public bool IsActive { get; set; } = true;\n        public bool IsDefault { get; set; } = false;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Models/WhatsAppSettingEntity.cs",
      "sha256": "4e6f77b1e10a72e8bfad42515bb36f9e627a73ce4a898ed46c476333b457e008",
      "language": "csharp",
      "size": 2973,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Models\n{\n    public class WhatsAppSettingEntity\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        // NEW: which provider this row belongs to (\"pinnacle\", \"meta_cloud\", \"twilio\", etc.)\n        [Required]\n        [MaxLength(50)]\n        public string Provider { get; set; } //= \"pinnacle\";\n\n        [Required]\n        [MaxLength(500)]\n        public string ApiUrl { get; set; }  // e.g. https://partnersv1.pinbot.ai/v3\n\n        [MaxLength(1000)]\n        public string ApiKey { get; set; }\n\n        //[Required]\n        //[MaxLength(1000)]\n        //public string ApiToken { get; set; } // store encrypted\n\n        [MaxLength(20)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        public string? PhoneNumberId { get; set; } // used by Meta Cloud; Pinbot doesn't need it\n        public string? WabaId { get; set; } = string.Empty;\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        // Optional: for webhook signature/verification if provider supports it\n        [MaxLength(200)]\n        public string? WebhookSecret { get; set; }\n\n        [MaxLength(200)]\n\n\n        public string? WebhookVerifyToken { get; set; }\n\n        [MaxLength(1000)]\n        public string? WebhookCallbackUrl { get; set; }\n\n\n        [Required]\n        public bool IsActive { get; set; } = true;\n\n        [Required]\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public ICollection<WhatsAppPhoneNumber> WhatsAppBusinessNumbers { get; set; } = new List<WhatsAppPhoneNumber>();\n\n    }\n}\n\n\n//using System;\n//using System.ComponentModel.DataAnnotations;\n\n//namespace xbytechat_api.WhatsAppSettings.Models\n//{\n//    public class WhatsAppSettingEntity\n//    {\n//        [Key]\n//        public Guid Id { get; set; }\n\n//        [Required]\n//        public Guid BusinessId { get; set; }\n\n//        [Required]\n//        [MaxLength(500)]\n//        public string ApiUrl { get; set; }\n\n//        [Required]\n//        [MaxLength(1000)]\n//        public string ApiToken { get; set; }\n\n//        [Required]\n//        [MaxLength(20)]\n//        public string? WhatsAppBusinessNumber { get; set; }\n\n//        public string? PhoneNumberId { get; set; } //Meta Business phone number ID\n//        public string? WabaId { get; set; } = string.Empty; //WhatsApp Business Account ID\n\n//        [MaxLength(100)]\n//        public string? SenderDisplayName { get; set; }\n\n//        [Required]\n//        public bool IsActive { get; set; } = true;\n\n//        [Required]\n//        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n//        public DateTime? UpdatedAt { get; set; }\n\n//        // string ApiVersion { get; set; } = \"v18.0\";\n\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Providers/MetaTemplateCatalogProvider.cs",
      "sha256": "061dae1c5c25df66ba29434ead260a8f36273f4c61f3083542142fd6058fff4f",
      "language": "csharp",
      "size": 6490,
      "content": "using Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Providers\n{\n    public sealed class MetaTemplateCatalogProvider : ITemplateCatalogProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<MetaTemplateCatalogProvider> _log;\n\n        public MetaTemplateCatalogProvider(HttpClient http, ILogger<MetaTemplateCatalogProvider> log)\n        { _http = http; _log = log; }\n\n        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n        {\n            var items = new List<TemplateCatalogItem>();\n            if (string.IsNullOrWhiteSpace(s.ApiKey) || string.IsNullOrWhiteSpace(s.WabaId))\n                return items;\n\n            var baseUrl = s.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v22.0\";\n            var next = $\"{baseUrl}/{s.WabaId}/message_templates?limit=100\";\n\n            _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", s.ApiKey);\n\n            while (!string.IsNullOrWhiteSpace(next))\n            {\n                var res = await _http.GetAsync(next, ct);\n                var json = await res.Content.ReadAsStringAsync(ct);\n                if (!res.IsSuccessStatusCode) break;\n\n                dynamic parsed = JsonConvert.DeserializeObject(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    // Filter APPROVED/ACTIVE\n                    string status = (tpl.status?.ToString() ?? \"\").ToUpperInvariant();\n                    if (status != \"APPROVED\" && status != \"ACTIVE\") continue;\n\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n                    bool hasImageHeader = false;\n                    var buttons = new List<ButtonMetadataDto>();\n\n                    foreach (var comp in tpl.components)\n                    {\n                        string type = comp.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                            body = comp.text?.ToString() ?? \"\";\n\n                        if (type == \"HEADER\" && (comp.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                            hasImageHeader = true;\n\n                        if (type == \"BUTTONS\")\n                        {\n                            foreach (var b in comp.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = b.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = b.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? param = b.url != null ? b.url.ToString()\n                                                 : b.phone_number != null ? b.phone_number.ToString()\n                                                 : b.coupon_code != null ? b.coupon_code.ToString()\n                                                 : b.flow_id != null ? b.flow_id.ToString()\n                                                 : null;\n\n                                    bool hasExample = b.example != null;\n                                    bool isDynamic = hasExample && Regex.IsMatch(b.example.ToString(), @\"\\{\\{[0-9]+\\}\\}\");\n                                    bool requiresParam = new[] { \"url\", \"flow\", \"copy_code\", \"catalog\", \"reminder\" }.Contains(subType);\n                                    bool needsRuntimeValue = requiresParam && isDynamic;\n                                    if (subType == \"unknown\" || (param == null && needsRuntimeValue)) continue;\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = param ?? \"\"\n                                    });\n                                }\n                                catch (Exception ex)\n                                { _log.LogWarning(ex, \"Button parse failed for template {Name}\", (string)name); }\n                            }\n                        }\n                    }\n\n                    int placeholders = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n                    var raw = JsonConvert.SerializeObject(tpl);\n\n                    items.Add(new TemplateCatalogItem(\n                        Name: name,\n                        Language: language,\n                        Body: body,\n                        PlaceholderCount: placeholders,\n                        HasImageHeader: hasImageHeader,\n                        Buttons: buttons,\n                        Status: status,\n                        Category: tpl.category?.ToString(),\n                        ExternalId: tpl.id?.ToString(),\n                        RawJson: raw\n                    ));\n                }\n\n                next = parsed?.paging?.next?.ToString();\n            }\n\n            return items;\n        }\n\n        public async Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n            => (await ListAsync(s, ct)).FirstOrDefault(t => t.Name.Equals(templateName, StringComparison.OrdinalIgnoreCase));\n    }\n}"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Providers/PinnacleTemplateCatalogProvider.cs",
      "sha256": "3060d7531506978583fc9d7ca9ca3d2a2f4363a469846efcfcf97ae005ce30da",
      "language": "csharp",
      "size": 9679,
      "content": "using Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Providers\n{\n    public sealed class PinnacleTemplateCatalogProvider : ITemplateCatalogProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<PinnacleTemplateCatalogProvider> _log;\n\n        public PinnacleTemplateCatalogProvider(HttpClient http, ILogger<PinnacleTemplateCatalogProvider> log)\n        { _http = http; _log = log; }\n\n        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n        {\n            var items = new List<TemplateCatalogItem>();\n\n            if (string.IsNullOrWhiteSpace(s.ApiKey))\n            {\n                _log.LogWarning(\"Pinnacle: missing ApiKey for BusinessId {BusinessId}\", s.BusinessId);\n                return items;\n            }\n\n            var baseUrl = (s.ApiUrl ?? \"https://partnersv1.pinbot.ai/v3\").TrimEnd('/');\n            var pathId = !string.IsNullOrWhiteSpace(s.WabaId) ? s.WabaId!.Trim()\n                        : !string.IsNullOrWhiteSpace(s.PhoneNumberId) ? s.PhoneNumberId!.Trim()\n                        : null;\n\n            if (string.IsNullOrWhiteSpace(pathId))\n            {\n                _log.LogWarning(\"Pinnacle: missing WabaId/PhoneNumberId for BusinessId {BusinessId}\", s.BusinessId);\n                return items;\n            }\n\n            // set header\n            _http.DefaultRequestHeaders.Remove(\"apikey\");\n            _http.DefaultRequestHeaders.TryAddWithoutValidation(\"apikey\", s.ApiKey);\n\n            string? nextUrl = $\"{baseUrl}/{pathId}/message_templates?limit=100\";\n\n            while (!string.IsNullOrWhiteSpace(nextUrl))\n            {\n                using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                var res = await _http.SendAsync(req, ct);\n                var json = await res.Content.ReadAsStringAsync(ct);\n\n                if (!res.IsSuccessStatusCode)\n                {\n                    _log.LogError(\"❌ Pinnacle list failed ({Status}): {Body}\", (int)res.StatusCode, json);\n                    break;\n                }\n\n                dynamic parsed = JsonConvert.DeserializeObject(json);\n                var collection = parsed?.data ?? parsed?.templates;\n                if (collection == null)\n                {\n                    _log.LogInformation(\"Pinnacle: no data/templates array.\");\n                    break;\n                }\n\n                foreach (var tpl in collection)\n                {\n                    try\n                    {\n                        string name = tpl.name?.ToString() ?? \"\";\n                        string language = tpl.language?.ToString() ?? \"en_US\";\n                        string status = (tpl.status?.ToString() ?? \"APPROVED\").ToUpperInvariant();\n                        string category = tpl.category?.ToString();\n                        string externalId = tpl.id?.ToString();\n\n                        string body = \"\";\n                        bool hasImageHeader = false;\n                        var buttons = new List<ButtonMetadataDto>();\n\n                        var components = tpl.components;\n                        if (components != null)\n                        {\n                            foreach (var c in components)\n                            {\n                                string type = c.type?.ToString()?.ToUpperInvariant();\n\n                                if (type == \"BODY\")\n                                    body = c.text?.ToString() ?? \"\";\n\n                                if (type == \"HEADER\" &&\n                                    (c.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                                    hasImageHeader = true;\n\n                                if (type == \"BUTTONS\" && c.buttons != null)\n                                {\n                                    foreach (var b in c.buttons)\n                                    {\n                                        string btnType = b.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                        string text = b.text?.ToString() ?? \"\";\n                                        int index = buttons.Count;\n\n                                        string subType = btnType switch\n                                        {\n                                            \"URL\" => \"url\",\n                                            \"PHONE_NUMBER\" => \"voice_call\",\n                                            \"QUICK_REPLY\" => \"quick_reply\",\n                                            \"COPY_CODE\" => \"copy_code\",\n                                            \"CATALOG\" => \"catalog\",\n                                            \"FLOW\" => \"flow\",\n                                            \"REMINDER\" => \"reminder\",\n                                            \"ORDER_DETAILS\" => \"order_details\",\n                                            _ => \"unknown\"\n                                        };\n\n                                        string? param =\n                                            b.url != null ? b.url.ToString() :\n                                            b.phone_number != null ? b.phone_number.ToString() :\n                                            b.coupon_code != null ? b.coupon_code.ToString() :\n                                            b.flow_id != null ? b.flow_id.ToString() :\n                                            null;\n\n                                        buttons.Add(new ButtonMetadataDto\n                                        {\n                                            Text = text,\n                                            Type = btnType,\n                                            SubType = subType,\n                                            Index = index,\n                                            ParameterValue = param ?? \"\"\n                                        });\n                                    }\n                                }\n                            }\n                        }\n\n                        int placeholders = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n                        var raw = JsonConvert.SerializeObject(tpl);\n\n                        // Only persist APPROVED/ACTIVE (match Meta behavior)\n                        if (status is \"APPROVED\" or \"ACTIVE\")\n                        {\n                            items.Add(new TemplateCatalogItem(\n                                Name: name,\n                                Language: language,\n                                Body: body,\n                                PlaceholderCount: placeholders,\n                                HasImageHeader: hasImageHeader,\n                                Buttons: buttons,\n                                Status: status,\n                                Category: category,\n                                ExternalId: externalId,\n                                RawJson: raw\n                            ));\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        _log.LogWarning(ex, \"Pinnacle: failed to map a template item.\");\n                    }\n                }\n\n                // try to follow paging like Meta\n                nextUrl = parsed?.paging?.next?.ToString();\n                if (string.IsNullOrWhiteSpace(nextUrl))\n                    break;\n            }\n\n            return items;\n        }\n\n        public Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n            => Task.FromResult<TemplateCatalogItem?>(null); // not needed for sync path\n    }\n}\n\n\n//using xbytechat.api.WhatsAppSettings.Abstractions;\n//using xbytechat_api.WhatsAppSettings.Models;\n\n//namespace xbytechat.api.WhatsAppSettings.Providers\n//{\n//    public sealed class PinnacleTemplateCatalogProvider : ITemplateCatalogProvider\n//    {\n//        private readonly HttpClient _http;\n//        private readonly ILogger<PinnacleTemplateCatalogProvider> _log;\n\n//        public PinnacleTemplateCatalogProvider(HttpClient http, ILogger<PinnacleTemplateCatalogProvider> log)\n//        { _http = http; _log = log; }\n\n//        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n//        {\n//            // If your BSP supports listing:\n//            // var baseUrl = (s.ApiUrl ?? \"\").TrimEnd('/');\n//            // var url = $\"{baseUrl}/templates?limit=100\";\n//            // using var req = new HttpRequestMessage(HttpMethod.Get, url);\n//            // req.Headers.Add(\"x-api-key\", s.ApiKey);\n//            // var res = await _http.SendAsync(req, ct);\n//            // var json = await res.Content.ReadAsStringAsync(ct);\n//            // if (!res.IsSuccessStatusCode) return Array.Empty<TemplateCatalogItem>();\n//            // dynamic parsed = JsonConvert.DeserializeObject(json);\n//            // map to TemplateCatalogItem and return\n\n//            // If not supported (common): return empty to trigger UI fallback\n//            _log.LogInformation(\"Pinnacle does not expose template listing (returning empty).\");\n//            return Array.Empty<TemplateCatalogItem>();\n//        }\n\n//        public Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n//            => Task.FromResult<TemplateCatalogItem?>(null);\n//    }\n//}"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/ITemplatePreviewService.cs",
      "sha256": "a3a93cd8e29af752b16c49daadd82a6a419069bc5933177e663d030e47304f4e",
      "language": "csharp",
      "size": 306,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface ITemplatePreviewService\n    {\n        Task<TemplatePreviewResponseDto> PreviewAsync(Guid businessId, TemplatePreviewRequestDto request);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppPhoneNumberService.cs",
      "sha256": "7b5491dda93e984f323f6d6d8ab811da9981c2736d7e758a0446f65773961c97",
      "language": "csharp",
      "size": 1505,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.WhatsAppSettings.Services\n{\n    public interface IWhatsAppPhoneNumberService\n    {\n        // List all numbers for a business/provider\n        //Task<IReadOnlyList<WhatsAppPhoneNumber>> ListAsync(Guid businessId, string provider);\n        Task<IReadOnlyList<WhatsAppPhoneNumber>> ListAsync(Guid businessId, string provider, CancellationToken ct = default);\n\n        // Create or update a number (matched by BusinessId+provider+PhoneNumberId)\n        Task<WhatsAppPhoneNumber> UpsertAsync(\n            Guid businessId,\n            string provider,\n            string phoneNumberId,\n            string whatsAppBusinessNumber,\n            string? senderDisplayName,\n            bool? isActive = null,\n            bool? isDefault = null);\n\n        // Delete by entity Id (GUID)\n        Task<bool> DeleteAsync(Guid businessId, string provider, Guid id);\n\n        // Set one number as default (enforces “one default per (business, provider)”)\n        Task<bool> SetDefaultAsync(Guid businessId, string provider, Guid id);\n\n        // Find a specific number by PhoneNumberId\n        Task<WhatsAppPhoneNumber?> FindAsync(Guid businessId, string provider, string phoneNumberId);\n\n        // Get the default number for a provider (or null if not set)\n        Task<WhatsAppPhoneNumber?> GetDefaultAsync(Guid businessId, string provider);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppSenderService.cs",
      "sha256": "4a69978c8896455ff564833449e3acf06b231ce7fdc20164debb55af0375b8ca",
      "language": "csharp",
      "size": 516,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppSenderService\n    {\n       // Task<IReadOnlyList<WhatsAppSenderDto>> GetBusinessSendersAsync(Guid businessId);\n        Task<IReadOnlyList<WhatsAppSenderDto>> GetBusinessSendersAsync(Guid businessId, CancellationToken ct = default);\n        Task<(string Provider, string PhoneNumberId)?> ResolveSenderPairAsync(Guid businessId, string phoneNumberId, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppSettingsService.cs",
      "sha256": "28ea8752a30f3e0c0c9ae015df7d5b31986739355681be2024ccad0c1f50ee09",
      "language": "csharp",
      "size": 873,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppSettingsService\n    {\n        Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto);\n        Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId);\n        Task<bool> DeleteSettingsAsync(Guid businessId);\n        Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto);\n        Task<string?> GetSenderNumberAsync(Guid businessId);\n        Task<string> GetCallbackUrlAsync(Guid businessId, string appBaseUrl);\n        Task<IReadOnlyList<WhatsAppSettingEntity>> GetAllForBusinessAsync(Guid businessId);\n        Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAndProviderAsync(Guid businessId, string provider);\n      \n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppTemplateFetcherService.cs",
      "sha256": "b4b6d062f1e9436dac737fc7ed40b0c3f98f2e26bb353261eedf997e16f69583",
      "language": "csharp",
      "size": 844,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppTemplateFetcherService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId);\n        // 🔹 (NEW) Load all templates across all businesses (admin/debug mode)\n        Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync();\n        Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons);\n\n        Task<IReadOnlyList<TemplateMetaDto>> GetTemplatesMetaAsync(Guid businessId, string? provider = null);\n        Task<TemplateMetaDto?> GetTemplateMetaAsync(Guid businessId, string templateName, string? language = null, string? provider = null);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/TemplatePreviewService.cs",
      "sha256": "2d74ee2dc7451e831617f0fd4d1eb33c05a082ff505d7ccca8df44b66cf67ccd",
      "language": "csharp",
      "size": 7844,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public sealed class TemplatePreviewService : ITemplatePreviewService\n    {\n        private readonly IWhatsAppTemplateFetcherService _fetcher;\n        private readonly ILogger<TemplatePreviewService> _log;\n\n        public TemplatePreviewService(IWhatsAppTemplateFetcherService fetcher, ILogger<TemplatePreviewService> log)\n        {\n            _fetcher = fetcher;\n            _log = log;\n        }\n\n        public async Task<TemplatePreviewResponseDto> PreviewAsync(Guid businessId, TemplatePreviewRequestDto request)\n        {\n            var resp = new TemplatePreviewResponseDto\n            {\n                TemplateName = request.TemplateName,\n                Language = request.Language\n            };\n\n            // 1) Fetch meta (from our catalog)\n            var meta = await _fetcher.GetTemplateMetaAsync(\n                businessId,\n                request.TemplateName,\n                language: request.Language,\n                provider: request.Provider\n            );\n\n            if (meta == null)\n            {\n                resp.FoundTemplate = false;\n                resp.Errors.Add(\"Template not found for this business/provider/language.\");\n                return resp;\n            }\n\n            resp.FoundTemplate = true;\n            resp.Language = meta.Language;\n            resp.HasHeaderMedia = meta.HasHeaderMedia;\n            resp.HeaderType = meta.HeaderType ?? \"\";\n\n            // 2) Placeholder validation\n            var required = Math.Max(0, meta.BodyPlaceholders?.Count ?? 0);\n            var provided = request.TemplateParameters?.Count ?? 0;\n\n            resp.RequiredPlaceholderCount = required;\n            resp.ProvidedPlaceholderCount = provided;\n\n            if (provided < required)\n            {\n                for (int i = provided + 1; i <= required; i++) resp.MissingPlaceholderIndices.Add(i);\n                resp.Errors.Add($\"Missing {required - provided} body parameter(s).\");\n            }\n            else if (provided > required)\n            {\n                resp.Warnings.Add($\"Ignored {provided - required} extra body parameter(s).\");\n            }\n\n            // 3) Build provider-like components preview\n            var comps = new List<object>();\n\n            // Header (image) preview only when template supports it and caller provided a URL\n            if (meta.HasHeaderMedia && !string.IsNullOrWhiteSpace(request.HeaderImageUrl))\n            {\n                comps.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                        new { type = \"image\", image = new { link = request.HeaderImageUrl } }\n                    }\n                });\n            }\n\n            // Body parameters: trim/pad to 'required'\n            if (required > 0)\n            {\n                var src = (request.TemplateParameters ?? new List<string>()).Select(s => s ?? string.Empty).ToList();\n                if (src.Count > required) src = src.Take(required).ToList();\n                while (src.Count < required) src.Add(string.Empty);\n\n                var bodyParams = src.Select(p => (object)new { type = \"text\", text = p }).ToArray();\n                comps.Add(new { type = \"body\", parameters = bodyParams });\n            }\n\n            // 4) Buttons validation (only dynamic URL buttons require parameters in payload)\n            // Template order is authoritative. We'll check at most 3.\n            var inputByPos = (request.Buttons ?? new List<PreviewButtonInputDto>())\n                             .Where(b => b.Position >= 1 && b.Position <= 3)\n                             .ToDictionary(b => b.Position, b => b);\n\n            var templateButtons = (meta.Buttons ?? new List<TemplateButtonMeta>())\n                                  .OrderBy(b => b.Order)\n                                  .Take(3)\n                                  .ToList();\n\n            for (int i = 0; i < templateButtons.Count; i++)\n            {\n                var tb = templateButtons[i];\n                var subType = (tb.Type ?? tb.Text ?? \"\").ToUpperInvariant(); // tb.Type from Step 2.1 mapper; sub-type is treated as URL family\n                var paramPattern = tb.Value ?? \"\"; // came from ButtonsJson ParameterValue (may contain \"{{1}}\")\n                var isUrlFamily = (tb.Type ?? \"\").Equals(\"URL\", StringComparison.OrdinalIgnoreCase);\n                var isDynamic = isUrlFamily && paramPattern.Contains(\"{{\");\n\n                if (!isUrlFamily || !isDynamic)\n                {\n                    // For static buttons (or non-URL), we preview a button component without parameters\n                    comps.Add(new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = \"url\",\n                        [\"index\"] = i.ToString()\n                    });\n                    continue;\n                }\n\n                // Dynamic URL → expect input at this position\n                if (!inputByPos.TryGetValue(i + 1, out var userBtn) || string.IsNullOrWhiteSpace(userBtn.Value))\n                {\n                    resp.Errors.Add($\"Dynamic URL required for button position {i + 1} but no value was provided.\");\n                    continue;\n                }\n\n                var value = userBtn.Value.Trim();\n\n                // Accept absolute http/https and tel/wa deep links in preview\n                var ok = LooksValidDestination(value);\n                if (!ok)\n                {\n                    resp.Errors.Add($\"Button {i + 1} destination must be absolute http/https or tel/wa link.\");\n                    continue;\n                }\n\n                // NOTE: In live send we tokenise tracked URLs. For preview we show the **value** directly.\n                var parameters = new[] { new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = value } };\n\n                comps.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = \"url\",\n                    [\"index\"] = i.ToString(),\n                    [\"parameters\"] = parameters\n                });\n            }\n\n            resp.ProviderComponentsPreview = comps;\n            return resp;\n        }\n\n        private static bool LooksValidDestination(string input)\n        {\n            if (string.IsNullOrWhiteSpace(input)) return false;\n            var s = input.Trim();\n            if (s.StartsWith(\"tel:\", StringComparison.OrdinalIgnoreCase)) return true;\n            if (s.StartsWith(\"wa:\", StringComparison.OrdinalIgnoreCase)) return true;\n            if (s.StartsWith(\"https://wa.me/\", StringComparison.OrdinalIgnoreCase)) return true;\n\n            if (Uri.TryCreate(s, UriKind.Absolute, out var uri))\n                return uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase)\n                    || uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase);\n\n            return false;\n        }\n    }\n\n    // Mirror Step 2.1 mapped types to avoid namespace churn\n    //public sealed class TemplateButtonMeta\n    //{\n    //    public string Type { get; set; } = \"\";     // \"URL\", etc.\n    //    public string Text { get; set; } = \"\";\n    //    public string? Value { get; set; }         // ParameterValue from mapper (may contain {{1}})\n    //    public int Order { get; set; }             // 0..2\n    //}\n\n    //public sealed class PlaceholderSlot\n    //{\n    //    public int Index { get; set; }\n    //    public string? Label { get; set; }\n    //    public string? Example { get; set; }\n    //}\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/TemplateSyncService.cs",
      "sha256": "248f793d0a6a543a07fa3be46e06e420bf4d386300056a71e89f732da1f26f6e",
      "language": "csharp",
      "size": 14143,
      "content": "// 📄 Features/TemplateCatalog/Services/TemplateSyncService.cs\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat.api.WhatsAppSettings.Providers;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.AuthModule.Models;\n\npublic record TemplateSyncResult(int Added, int Updated, int Skipped, DateTime SyncedAt);\n\npublic interface ITemplateSyncService\n{\n    /// <summary>\n    /// Sync templates for a business. When force=false, a 12h TTL short-circuit is applied.\n    /// Use force=true for the \"Sync Template\" button to bypass TTL.\n    /// </summary>\n    Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default);\n}\n\npublic sealed class TemplateSyncService : ITemplateSyncService\n{\n    private readonly AppDbContext _db;\n    private readonly MetaTemplateCatalogProvider _meta;\n    private readonly PinnacleTemplateCatalogProvider _pinnacle;\n    private readonly ILogger<TemplateSyncService> _log;\n\n    // Background/automatic runs are TTL-gated; manual button should call with force=true.\n    private static readonly TimeSpan TTL = TimeSpan.FromHours(12);\n\n    public TemplateSyncService(\n        AppDbContext db,\n        MetaTemplateCatalogProvider meta,\n        PinnacleTemplateCatalogProvider pinnacle,\n        ILogger<TemplateSyncService> log)\n    {\n        _db = db; _meta = meta; _pinnacle = pinnacle; _log = log;\n    }\n\n    public async Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default)\n    {\n        var setting = await _db.WhatsAppSettings\n            .AsNoTracking()\n            .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive, ct)\n            ?? throw new InvalidOperationException(\"Active WhatsApp settings not found.\");\n\n        var now = DateTime.UtcNow;\n\n        // ----- TTL short-circuit (only when NOT forced) -----\n        if (!force)\n        {\n            var recent = await _db.WhatsAppTemplates\n                .AsNoTracking()\n                .Where(t => t.BusinessId == businessId)\n                .OrderByDescending(t => t.LastSyncedAt)\n                .Select(t => t.LastSyncedAt)\n                .FirstOrDefaultAsync(ct);\n\n            if (recent != default && now - recent < TTL)\n            {\n                _log.LogInformation(\"⏭️ Skipping sync for {BusinessId}; TTL not expired.\", businessId);\n                return new TemplateSyncResult(0, 0, 0, recent);\n            }\n        }\n\n        // ----- Resolve provider & fetch all templates (ensure your provider LIST paginates) -----\n        var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n\n        IReadOnlyList<TemplateCatalogItem> incoming = providerKey switch\n        {\n            \"meta_cloud\" => await _meta.ListAsync(setting, ct),   // should page through all results\n            \"pinnacle\" => await _pinnacle.ListAsync(setting, ct),\n            _ => Array.Empty<TemplateCatalogItem>()\n        };\n\n        // Fast exit on empty provider response (don’t archive everything on a transient provider issue)\n        if (incoming == null) incoming = Array.Empty<TemplateCatalogItem>();\n\n        // ----- Load existing once (fast) -----\n        var existing = await _db.WhatsAppTemplates\n            .Where(t => t.BusinessId == businessId && t.Provider == providerKey)\n            .ToListAsync(ct);\n\n        // Index by ExternalId when present; fallback key = $\"{Name}::{Language}\"\n        var byExtId = existing\n            .Where(e => !string.IsNullOrWhiteSpace(e.ExternalId))\n            .ToDictionary(e => e.ExternalId!, e => e);\n\n        static string NLKey(string name, string? lang) => $\"{name}::{(lang ?? \"\").Trim().ToLowerInvariant()}\";\n\n        var byNameLang = existing.ToDictionary(\n            e => NLKey(e.Name, e.Language),\n            e => e,\n            StringComparer.Ordinal);\n\n        int added = 0, updated = 0, unchanged = 0;\n\n        // Track “seen” to support optional archival\n        var seenExtIds = new HashSet<string>(StringComparer.Ordinal);\n        var seenNLKeys = new HashSet<string>(StringComparer.Ordinal);\n\n        foreach (var it in incoming)\n        {\n            ct.ThrowIfCancellationRequested();\n\n            var extId = it.ExternalId?.Trim();\n            var nlKey = NLKey(it.Name, it.Language);\n\n            seenNLKeys.Add(nlKey);\n            if (!string.IsNullOrWhiteSpace(extId)) seenExtIds.Add(extId);\n\n            var buttonsJson = JsonConvert.SerializeObject(it.Buttons);\n\n            WhatsAppTemplate? row = null;\n\n            // Prefer ExternalId match\n            if (!string.IsNullOrWhiteSpace(extId) && byExtId.TryGetValue(extId, out var foundByExt))\n            {\n                row = foundByExt;\n            }\n            else if (byNameLang.TryGetValue(nlKey, out var foundByNL))\n            {\n                row = foundByNL;\n\n                // If provider now returns an ExternalId, attach it so future runs match by ExternalId\n                if (!string.IsNullOrWhiteSpace(extId) && string.IsNullOrWhiteSpace(row.ExternalId))\n                {\n                    row.ExternalId = extId;\n                    updated++;\n                }\n            }\n\n            if (row == null)\n            {\n                // INSERT\n                var newRow = new WhatsAppTemplate\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Provider = providerKey,\n                    ExternalId = extId,\n                    Name = it.Name,\n                    Language = it.Language,\n                    Status = string.IsNullOrWhiteSpace(it.Status) ? \"APPROVED\" : it.Status,\n                    Category = it.Category,\n                    Body = it.Body ?? \"\",\n                    HasImageHeader = it.HasImageHeader,\n                    PlaceholderCount = it.PlaceholderCount,\n                    ButtonsJson = buttonsJson,\n                    RawJson = it.RawJson,\n                    IsActive = true,\n                    CreatedAt = now,\n                    UpdatedAt = now,\n                    LastSyncedAt = now\n                };\n\n                _db.WhatsAppTemplates.Add(newRow);\n                added++;\n\n                // Update indexes so subsequent items in this batch see it\n                if (!string.IsNullOrWhiteSpace(extId)) byExtId[extId] = newRow;\n                byNameLang[nlKey] = newRow;\n            }\n            else\n            {\n                // UPDATE (only if something important changed)\n                bool changed = false;\n\n                string? newStatus = string.IsNullOrWhiteSpace(it.Status) ? row.Status : it.Status;\n                string newBody = it.Body ?? row.Body ?? \"\";\n                string newButtonsJson = buttonsJson ?? row.ButtonsJson ?? \"\";\n\n                if (!string.Equals(row.Status, newStatus, StringComparison.Ordinal)) { row.Status = newStatus; changed = true; }\n                if (!string.Equals(row.Category, it.Category, StringComparison.Ordinal)) { row.Category = it.Category; changed = true; }\n                if (!string.Equals(row.Body ?? \"\", newBody, StringComparison.Ordinal)) { row.Body = newBody; changed = true; }\n                if (row.HasImageHeader != it.HasImageHeader) { row.HasImageHeader = it.HasImageHeader; changed = true; }\n                if (row.PlaceholderCount != it.PlaceholderCount) { row.PlaceholderCount = it.PlaceholderCount; changed = true; }\n                if (!string.Equals(row.ButtonsJson ?? \"\", newButtonsJson, StringComparison.Ordinal)) { row.ButtonsJson = newButtonsJson; changed = true; }\n                if (!string.IsNullOrWhiteSpace(it.RawJson) && !string.Equals(row.RawJson, it.RawJson, StringComparison.Ordinal))\n                { row.RawJson = it.RawJson; changed = true; }\n\n                // Always mark active + bump sync timestamp; bump UpdatedAt only when changed\n                row.IsActive = true;\n                row.LastSyncedAt = now;\n                if (changed) { row.UpdatedAt = now; updated++; } else { unchanged++; }\n            }\n        }\n\n        // ----- Optional: archive templates not returned this run (safe cleanup) -----\n        // Only do this if provider returned at least 1 item (avoid mass-archive on provider outage)\n        if (incoming.Count > 0)\n        {\n            foreach (var e in existing)\n            {\n                // Match by ExternalId when present, else by Name+Language\n                bool stillThere =\n                    (!string.IsNullOrWhiteSpace(e.ExternalId) && seenExtIds.Contains(e.ExternalId)) ||\n                    seenNLKeys.Contains(NLKey(e.Name, e.Language));\n\n                if (!stillThere && e.IsActive)\n                {\n                    e.IsActive = false;\n                    e.LastSyncedAt = now;\n                    e.UpdatedAt = now;\n                    updated++; // count as an update\n                }\n            }\n        }\n\n        await _db.SaveChangesAsync(ct);\n\n        return new TemplateSyncResult(added, updated, unchanged, now);\n    }\n}\n\n\n//// 📄 Features/TemplateCatalog/Services/TemplateSyncService.cs\n//using Microsoft.EntityFrameworkCore;\n//using Newtonsoft.Json;\n//using xbytechat.api.AuthModule.Models;\n//using xbytechat.api;\n//using xbytechat.api.WhatsAppSettings.Abstractions;\n//using xbytechat.api.WhatsAppSettings.Providers;\n//using xbytechat_api.WhatsAppSettings.Models;\n\n//public record TemplateSyncResult(int Added, int Updated, int Skipped, DateTime SyncedAt);\n\n//public interface ITemplateSyncService\n//{\n//    Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default);\n//}\n\n//public sealed class TemplateSyncService : ITemplateSyncService\n//{\n//    private readonly AppDbContext _db;\n//    private readonly MetaTemplateCatalogProvider _meta;\n//    private readonly PinnacleTemplateCatalogProvider _pinnacle;\n//    private readonly ILogger<TemplateSyncService> _log;\n\n//    private static readonly TimeSpan TTL = TimeSpan.FromHours(12);\n\n//    public TemplateSyncService(AppDbContext db,\n//        MetaTemplateCatalogProvider meta,\n//        PinnacleTemplateCatalogProvider pinnacle,\n//        ILogger<TemplateSyncService> log)\n//    { _db = db; _meta = meta; _pinnacle = pinnacle; _log = log; }\n\n//    public async Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default)\n//    {\n//        var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive, ct)\n//                      ?? throw new InvalidOperationException(\"Active WhatsApp settings not found.\");\n\n//        var now = DateTime.UtcNow;\n\n//        // TTL short-circuit\n//        if (!force)\n//        {\n//            var recent = await _db.WhatsAppTemplates\n//                .Where(t => t.BusinessId == businessId)\n//                .OrderByDescending(t => t.LastSyncedAt)\n//                .Select(t => t.LastSyncedAt)\n//                .FirstOrDefaultAsync(ct);\n\n//            if (recent != default && now - recent < TTL)\n//            {\n//                _log.LogInformation(\"⏭️ Skipping sync for {BusinessId}; TTL not expired.\", businessId);\n//                return new TemplateSyncResult(0, 0, 0, recent);\n//            }\n//        }\n\n//        var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n//        IReadOnlyList<TemplateCatalogItem> incoming = providerKey switch\n//        {\n//            \"meta_cloud\" => await _meta.ListAsync(setting, ct),\n//            \"pinnacle\" => await _pinnacle.ListAsync(setting, ct),\n//            _ => Array.Empty<TemplateCatalogItem>()\n//        };\n\n//        int added = 0, updated = 0, skipped = 0;\n\n//        foreach (var it in incoming)\n//        {\n//            var existing = await _db.WhatsAppTemplates.FirstOrDefaultAsync(t =>\n//                t.BusinessId == businessId &&\n//                t.Provider == providerKey &&\n//                t.Name == it.Name &&\n//                t.Language == it.Language, ct);\n\n//            var buttonsJson = JsonConvert.SerializeObject(it.Buttons);\n\n//            if (existing == null)\n//            {\n//                await _db.WhatsAppTemplates.AddAsync(new WhatsAppTemplate\n//                {\n//                    BusinessId = businessId,\n//                    Provider = providerKey,\n//                    ExternalId = it.ExternalId,\n//                    Name = it.Name,\n//                    Language = it.Language,\n//                    Status = string.IsNullOrWhiteSpace(it.Status) ? \"APPROVED\" : it.Status,\n//                    Category = it.Category,\n//                    Body = it.Body ?? \"\",\n//                    HasImageHeader = it.HasImageHeader,\n//                    PlaceholderCount = it.PlaceholderCount,\n//                    ButtonsJson = buttonsJson,\n//                    RawJson = it.RawJson,\n//                    LastSyncedAt = now,\n//                    CreatedAt = now,\n//                    UpdatedAt = now,\n//                    IsActive = true\n//                }, ct);\n//                added++;\n//            }\n//            else\n//            {\n//                existing.ExternalId = it.ExternalId ?? existing.ExternalId;\n//                existing.Status = string.IsNullOrWhiteSpace(it.Status) ? existing.Status : it.Status;\n//                existing.Category = it.Category ?? existing.Category;\n//                existing.Body = it.Body ?? existing.Body;\n//                existing.HasImageHeader = it.HasImageHeader;\n//                existing.PlaceholderCount = it.PlaceholderCount;\n//                existing.ButtonsJson = buttonsJson;\n//                existing.RawJson = it.RawJson ?? existing.RawJson;\n//                existing.LastSyncedAt = now;\n//                existing.UpdatedAt = now;\n//                existing.IsActive = true;\n//                updated++;\n//            }\n//        }\n\n//        await _db.SaveChangesAsync(ct);\n\n//        return new TemplateSyncResult(added, updated, skipped, now);\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/TemplateSyncWorker.cs",
      "sha256": "70427556d8ed5f1c68348a414a166b4bcdd07911b8f9f8d63bb05f3897d30a04",
      "language": "csharp",
      "size": 8915,
      "content": "using System;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api; // AppDbContext\n\nnamespace xbytechat.api.WhatsAppSettings.Services\n{\n    /// <summary>\n    /// Periodically refreshes WhatsApp template catalogs for all businesses\n    /// that have an active WhatsAppSettings row. Uses ITemplateSyncService\n    /// which is TTL-aware to avoid unnecessary work.\n    /// </summary>\n    public sealed class TemplateSyncWorker : BackgroundService\n    {\n        private readonly IServiceProvider _sp;\n        private readonly ILogger<TemplateSyncWorker> _log;\n        private readonly TimeSpan _interval;\n        private readonly int _maxParallel;\n        private readonly int _jitterSeconds;\n\n        public TemplateSyncWorker(IServiceProvider sp, ILogger<TemplateSyncWorker> log, IConfiguration cfg)\n        {\n            _sp = sp;\n            _log = log;\n\n            // Defaults chosen to be light on the system.\n            // appsettings.json example:\n            // \"WhatsApp\": {\n            //   \"Templates\": {\n            //     \"SyncIntervalMinutes\": 360,\n            //     \"MaxParallel\": 1,\n            //     \"JitterSeconds\": 60\n            //   }\n            // }\n            var minutes = Math.Max(15, cfg.GetValue<int?>(\"WhatsApp:Templates:SyncIntervalMinutes\") ?? 360);\n            _interval = TimeSpan.FromMinutes(minutes);\n\n            _maxParallel = Math.Clamp(cfg.GetValue<int?>(\"WhatsApp:Templates:MaxParallel\") ?? 1, 1, 8);\n            _jitterSeconds = Math.Clamp(cfg.GetValue<int?>(\"WhatsApp:Templates:JitterSeconds\") ?? 60, 0, 300);\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            // small delay after startup\n            await Task.Delay(TimeSpan.FromSeconds(10), stoppingToken);\n\n            var rnd = new Random();\n\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                var sweepStart = DateTime.UtcNow;\n                var sw = Stopwatch.StartNew();\n                int processed = 0;\n\n                try\n                {\n                    using var scope = _sp.CreateScope();\n                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    // Get active business IDs once per sweep\n                    var bizIds = await db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(s => s.IsActive)\n                        .Select(s => s.BusinessId)\n                        .Distinct()\n                        .ToListAsync(stoppingToken);\n\n                    if (bizIds.Count == 0)\n                    {\n                        _log.LogInformation(\"TemplateSyncWorker: no active WhatsApp settings found.\");\n                    }\n                    else\n                    {\n                        var sem = new SemaphoreSlim(_maxParallel);\n                        var tasks = bizIds.Select(async biz =>\n                        {\n                            await sem.WaitAsync(stoppingToken);\n                            try\n                            {\n                                // New scope per business to keep DbContexts short-lived\n                                using var inner = _sp.CreateScope();\n                                var sync = inner.ServiceProvider.GetRequiredService<ITemplateSyncService>();\n\n                                // TTL-aware; manual button should call force:true instead\n                                var res = await sync.SyncBusinessTemplatesAsync(biz, force: false, ct: stoppingToken);\n                                Interlocked.Increment(ref processed);\n\n                                _log.LogInformation(\n                                    \"TemplateSyncWorker: biz={Biz} added={A} updated={U} skipped={S} syncedAt={At}\",\n                                    biz, res.Added, res.Updated, res.Skipped, res.SyncedAt);\n                            }\n                            catch (OperationCanceledException) { /* shutting down */ }\n                            catch (Exception exBiz)\n                            {\n                                _log.LogWarning(exBiz, \"TemplateSyncWorker: sync failed for biz {Biz}\", biz);\n                            }\n                            finally\n                            {\n                                sem.Release();\n                            }\n                        });\n\n                        await Task.WhenAll(tasks);\n                    }\n                }\n                catch (OperationCanceledException) { /* shutting down */ }\n                catch (Exception ex)\n                {\n                    _log.LogWarning(ex, \"TemplateSyncWorker sweep failed\");\n                }\n                finally\n                {\n                    sw.Stop();\n                    _log.LogInformation(\"TemplateSyncWorker: sweep finished in {ElapsedMs} ms; processed={Processed}; next run ~{NextRun}\",\n                        sw.ElapsedMilliseconds, processed, sweepStart.Add(_interval));\n                }\n\n                // Add small jitter to avoid multiple instances syncing at the exact same time\n                var jitter = _jitterSeconds > 0 ? TimeSpan.FromSeconds(rnd.Next(0, _jitterSeconds + 1)) : TimeSpan.Zero;\n                var delay = _interval + jitter;\n\n                await Task.Delay(delay, stoppingToken);\n            }\n        }\n    }\n}\n\n\n//using System;\n//using System.Linq;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.Configuration;\n//using Microsoft.Extensions.DependencyInjection;\n//using Microsoft.Extensions.Hosting;\n//using Microsoft.Extensions.Logging;\n//using xbytechat.api; // AppDbContext\n\n//namespace xbytechat.api.WhatsAppSettings.Services\n//{\n//    /// <summary>\n//    /// Periodically refreshes WhatsApp template catalogs for all businesses\n//    /// that have an active WhatsAppSettings row. Uses your existing\n//    /// ITemplateSyncService (TTL-aware) so this is safe to run frequently.\n//    /// </summary>\n//    public sealed class TemplateSyncWorker : BackgroundService\n//    {\n//        private readonly IServiceProvider _sp;\n//        private readonly ILogger<TemplateSyncWorker> _log;\n//        private readonly TimeSpan _interval;\n\n//        public TemplateSyncWorker(IServiceProvider sp, ILogger<TemplateSyncWorker> log, IConfiguration cfg)\n//        {\n//            _sp = sp;\n//            _log = log;\n\n//            // Default: every 6 hours; override in appsettings:\n//            // \"WhatsApp\": { \"Templates\": { \"SyncIntervalMinutes\": 360 } }\n//            var minutes = Math.Max(15, cfg.GetValue<int?>(\"WhatsApp:Templates:SyncIntervalMinutes\") ?? 360);\n//            _interval = TimeSpan.FromMinutes(minutes);\n//        }\n\n//        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n//        {\n//            // small delay after startup\n//            await Task.Delay(TimeSpan.FromSeconds(10), stoppingToken);\n\n//            while (!stoppingToken.IsCancellationRequested)\n//            {\n//                try\n//                {\n//                    using var scope = _sp.CreateScope();\n//                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n//                    var sync = scope.ServiceProvider.GetRequiredService<ITemplateSyncService>();\n\n//                    var bizIds = await db.WhatsAppSettings\n//                        .AsNoTracking()\n//                        .Where(s => s.IsActive)\n//                        .Select(s => s.BusinessId)\n//                        .Distinct()\n//                        .ToListAsync(stoppingToken);\n\n//                    foreach (var biz in bizIds)\n//                    {\n//                        try\n//                        {\n//                            var res = await sync.SyncBusinessTemplatesAsync(biz, force: false, ct: stoppingToken);\n//                            _log.LogInformation(\"TemplateSyncWorker: biz={Biz} added={A} updated={U} syncedAt={At}\",\n//                                biz, res.Added, res.Updated, res.SyncedAt);\n//                        }\n//                        catch (Exception exBiz)\n//                        {\n//                            _log.LogWarning(exBiz, \"TemplateSyncWorker: sync failed for biz {Biz}\", biz);\n//                        }\n//                    }\n//                }\n//                catch (Exception ex)\n//                {\n//                    _log.LogWarning(ex, \"TemplateSyncWorker sweep failed\");\n//                }\n\n//                await Task.Delay(_interval, stoppingToken);\n//            }\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppPhoneNumberService.cs",
      "sha256": "330f37f204375e474f630e5d14b23708867f7504bfcacadf506ee263a8a47a8e",
      "language": "csharp",
      "size": 14966,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.WhatsAppSettings.Models;\nusing xbytechat.api.Features.WhatsAppSettings.Services;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.WhatsAppSettings.Services\n{\n    public sealed class WhatsAppPhoneNumberService : IWhatsAppPhoneNumberService\n    {\n        private readonly AppDbContext _db;\n\n        public WhatsAppPhoneNumberService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        //public async Task<IReadOnlyList<WhatsAppPhoneNumber>> ListAsync(Guid businessId, string provider)\n        //{\n        //    var prov = provider?.Trim() ?? string.Empty;\n        //    return await _db.WhatsAppPhoneNumbers\n        //        .Where(x => x.BusinessId == businessId && x.Provider.ToLower() == prov.ToLower())\n        //        .OrderByDescending(x => x.IsDefault)\n        //        .ThenBy(x => x.WhatsAppBusinessNumber)\n        //        .ToListAsync();\n        //}\n        public async Task<IReadOnlyList<WhatsAppPhoneNumber>> ListAsync(\n    Guid businessId,\n    string provider,\n    CancellationToken ct = default)\n        {\n            if (string.IsNullOrWhiteSpace(provider))\n                throw new ArgumentException(\"Provider is required.\", nameof(provider));\n\n            // Enforce your uppercase-only contract (no normalization here)\n            if (provider is not \"PINNACLE\" and not \"META_CLOUD\")\n                throw new ArgumentOutOfRangeException(nameof(provider),\n                    \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n\n            var list = await _db.WhatsAppPhoneNumbers\n                .AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.Provider == provider) // exact, case-sensitive\n                .OrderByDescending(x => x.IsDefault)\n                .ThenBy(x => x.WhatsAppBusinessNumber)\n                .ToListAsync(ct);\n\n            return list; // List<T> implements IReadOnlyList<T>\n        }\n\n        private static string NormalizeProvider(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return \"Pinnacle\";\n            var s = raw.Trim();\n            if (string.Equals(s, \"Pinnacle\", StringComparison.OrdinalIgnoreCase)) return \"Pinnacle\";\n            if (string.Equals(s, \"Meta_cloud\", StringComparison.OrdinalIgnoreCase) ||\n                string.Equals(s, \"meta_cloud\", StringComparison.OrdinalIgnoreCase) ||\n                string.Equals(s, \"meta\", StringComparison.OrdinalIgnoreCase))\n                return \"Meta_cloud\";\n            return s;\n        }\n\n\n\n        //public async Task<WhatsAppPhoneNumber> UpsertAsync(\n        //    Guid businessId,\n        //    string provider,\n        //    string phoneNumberId,\n        //    string whatsAppBusinessNumber,\n        //    string? senderDisplayName,\n        //    bool? isActive = null,\n        //    bool? isDefault = null)\n        //    {\n        //        if (string.IsNullOrWhiteSpace(provider)) throw new ArgumentException(\"provider is required\");\n        //        if (string.IsNullOrWhiteSpace(phoneNumberId)) throw new ArgumentException(\"phoneNumberId is required\");\n        //        if (string.IsNullOrWhiteSpace(whatsAppBusinessNumber)) throw new ArgumentException(\"whatsAppBusinessNumber is required\");\n\n        //        var prov = NormalizeProvider(provider);\n        //        var provLc = prov.ToLowerInvariant();\n        //        var now = DateTime.UtcNow;\n\n        //        // DEBUG LOG (temporary): see what we’re matching\n        //        Console.WriteLine($\"[Upsert] biz={businessId} provider={prov}\");\n\n        //        // 1) Case/whitespace-insensitive match for settings\n        //        var setting = await _db.WhatsAppSettings\n        //            .FirstOrDefaultAsync(s =>\n        //                s.BusinessId == businessId &&\n        //                s.Provider.ToLower() == provLc);        // <= robust match\n\n        //        // Optional extra safety: if still null, try a trimmed “like” query\n        //        if (setting == null)\n        //        {\n        //            setting = await _db.WhatsAppSettings\n        //                .FromSqlRaw(\n        //                    @\"select * from \"\"WhatsAppSettings\"\"\n        //                  where \"\"BusinessId\"\" = {0}\n        //                    and lower(trim(\"\"Provider\"\")) = {1}\", businessId, provLc)\n        //                .AsNoTracking()\n        //                .FirstOrDefaultAsync();\n        //            if (setting != null)\n        //            {\n        //                // reattach tracked entity\n        //                setting = await _db.WhatsAppSettings\n        //                    .FirstAsync(s => s.Id == setting.Id);\n        //            }\n        //        }\n\n        //        if (setting == null)\n        //        {\n        //            // STUB: satisfy NOT NULLs (ApiUrl was failing before)\n        //            setting = new WhatsAppSettingEntity\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                Provider = prov,\n        //                ApiKey = string.Empty,\n        //                ApiUrl = string.Empty,                 // <-- important if column is NOT NULL\n        //                IsActive = true,\n        //                CreatedAt = now\n        //            };\n        //            _db.WhatsAppSettings.Add(setting);\n        //            Console.WriteLine($\"[Upsert] created stub settings for biz={businessId} provider={prov}\");\n        //        }\n\n        //        // 2) Upsert the number (same robust provider compare)\n        //        var entity = await _db.WhatsAppPhoneNumbers\n        //            .FirstOrDefaultAsync(x =>\n        //                x.BusinessId == businessId &&\n        //                x.Provider.ToLower() == provLc &&\n        //                x.PhoneNumberId == phoneNumberId);\n\n        //        if (entity == null)\n        //        {\n        //            entity = new WhatsAppPhoneNumber\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                Provider = prov,\n        //                PhoneNumberId = phoneNumberId,\n        //                WhatsAppBusinessNumber = whatsAppBusinessNumber,\n        //                SenderDisplayName = senderDisplayName,\n        //                IsActive = isActive ?? true,\n        //                IsDefault = isDefault ?? false,\n        //                CreatedAt = now\n        //            };\n        //            _db.WhatsAppPhoneNumbers.Add(entity);\n        //        }\n        //        else\n        //        {\n        //            entity.WhatsAppBusinessNumber = whatsAppBusinessNumber;\n        //            entity.SenderDisplayName = senderDisplayName;\n        //            if (isActive.HasValue) entity.IsActive = isActive.Value;\n        //            if (isDefault.HasValue) entity.IsDefault = isDefault.Value;\n        //            entity.UpdatedAt = now;\n        //        }\n\n        //        var setDefault = (isDefault == true) || entity.IsDefault;\n\n        //        await using var tx = await _db.Database.BeginTransactionAsync();\n        //        try\n        //        {\n        //            await _db.SaveChangesAsync();\n\n        //            if (setDefault)\n        //            {\n        //                await _db.WhatsAppPhoneNumbers\n        //                    .Where(x => x.BusinessId == businessId &&\n        //                                x.Provider.ToLower() == provLc &&\n        //                                x.Id != entity.Id)\n        //                    .ExecuteUpdateAsync(s => s.SetProperty(p => p.IsDefault, false));\n\n        //                // Mirror legacy columns\n        //                setting.PhoneNumberId = entity.PhoneNumberId;\n        //                setting.WhatsAppBusinessNumber = entity.WhatsAppBusinessNumber;\n        //                setting.UpdatedAt = now;\n        //                await _db.SaveChangesAsync();\n        //            }\n\n        //            await tx.CommitAsync();\n        //        }\n        //        catch (DbUpdateException ex)\n        //        {\n        //            await tx.RollbackAsync();\n        //            var root = ex.InnerException?.Message ?? ex.Message;\n        //            throw new InvalidOperationException($\"Failed to save WhatsApp number: {root}\", ex);\n        //        }\n\n        //        return entity;\n        //    }\n\n        public async Task<WhatsAppPhoneNumber> UpsertAsync(\n            Guid businessId, string provider, string phoneNumberId, string whatsAppBusinessNumber,\n            string? senderDisplayName, bool? isActive = null, bool? isDefault = null)\n        {\n            if (string.IsNullOrWhiteSpace(provider)) throw new ArgumentException(\"provider is required\");\n            if (string.IsNullOrWhiteSpace(phoneNumberId)) throw new ArgumentException(\"phoneNumberId is required\");\n            if (string.IsNullOrWhiteSpace(whatsAppBusinessNumber)) throw new ArgumentException(\"whatsAppBusinessNumber is required\");\n\n            var now = DateTime.UtcNow;\n\n            await using var tx = await _db.Database.BeginTransactionAsync();\n\n            // 1) Ensure parent exists (EXACT match)\n            var setting = await _db.WhatsAppSettings\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.Provider == provider);\n\n            if (setting == null)\n            {\n                setting = new WhatsAppSettingEntity\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Provider = provider,           // 'META_CLOUD' | 'PINNACLE'\n                    ApiUrl = string.Empty,         // keep NOT NULL-safe\n                    ApiKey = string.Empty,\n                    IsActive = true,\n                    CreatedAt = now\n                };\n                _db.WhatsAppSettings.Add(setting);\n                await _db.SaveChangesAsync();     // FLUSH parent BEFORE child (prevents 23503)\n            }\n\n            var providerForChild = setting.Provider; // ensure FK matches exactly\n\n            // 2) Upsert the number\n            var entity = await _db.WhatsAppPhoneNumbers.FirstOrDefaultAsync(x =>\n                x.BusinessId == businessId && x.Provider == providerForChild && x.PhoneNumberId == phoneNumberId);\n\n            if (entity == null)\n            {\n                entity = new WhatsAppPhoneNumber\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Provider = providerForChild,\n                    PhoneNumberId = phoneNumberId,\n                    WhatsAppBusinessNumber = whatsAppBusinessNumber,\n                    SenderDisplayName = senderDisplayName,\n                    IsActive = isActive ?? true,\n                    IsDefault = isDefault ?? false,\n                    CreatedAt = now\n                };\n                _db.WhatsAppPhoneNumbers.Add(entity);\n            }\n            else\n            {\n                entity.WhatsAppBusinessNumber = whatsAppBusinessNumber;\n                entity.SenderDisplayName = senderDisplayName;\n                if (isActive.HasValue) entity.IsActive = isActive.Value;\n                if (isDefault.HasValue) entity.IsDefault = isDefault.Value;\n                entity.UpdatedAt = now;\n            }\n\n            await _db.SaveChangesAsync(); // child saved\n\n            // 3) Default + mirror\n            if (isDefault == true || entity.IsDefault)\n            {\n                await _db.WhatsAppPhoneNumbers\n                    .Where(x => x.BusinessId == businessId && x.Provider == providerForChild && x.Id != entity.Id)\n                    .ExecuteUpdateAsync(s => s.SetProperty(p => p.IsDefault, false));\n\n                setting.PhoneNumberId = entity.PhoneNumberId;\n                setting.WhatsAppBusinessNumber = entity.WhatsAppBusinessNumber;\n                setting.UpdatedAt = now;\n                await _db.SaveChangesAsync();\n            }\n\n            await tx.CommitAsync();\n            return entity;\n        }\n\n\n        public async Task<bool> DeleteAsync(Guid businessId, string provider, Guid id)\n        {\n            var prov = provider?.Trim() ?? string.Empty;\n\n            var entity = await _db.WhatsAppPhoneNumbers\n                .FirstOrDefaultAsync(x => x.Id == id && x.BusinessId == businessId && x.Provider.ToLower() == prov.ToLower());\n\n            if (entity == null) return false;\n\n            _db.WhatsAppPhoneNumbers.Remove(entity);\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> SetDefaultAsync(Guid businessId, string provider, Guid id)\n        {\n            var prov = provider?.Trim() ?? string.Empty;\n\n            await _db.Database.BeginTransactionAsync();\n            try\n            {\n                // ensure target exists and belongs to (business, provider)\n                var target = await _db.WhatsAppPhoneNumbers\n                    .FirstOrDefaultAsync(x => x.Id == id && x.BusinessId == businessId && x.Provider.ToLower() == prov.ToLower());\n                if (target == null) return false;\n\n                await _db.WhatsAppPhoneNumbers\n                    .Where(x => x.BusinessId == businessId && x.Provider.ToLower() == prov.ToLower())\n                    .ExecuteUpdateAsync(s => s.SetProperty(p => p.IsDefault, false));\n\n                target.IsDefault = true;\n                target.UpdatedAt = DateTime.UtcNow;\n                await _db.SaveChangesAsync();\n\n                await _db.Database.CommitTransactionAsync();\n                return true;\n            }\n            catch\n            {\n                await _db.Database.RollbackTransactionAsync();\n                throw;\n            }\n        }\n\n        public async Task<WhatsAppPhoneNumber?> FindAsync(Guid businessId, string provider, string phoneNumberId)\n        {\n            var prov = provider?.Trim() ?? string.Empty;\n\n            return await _db.WhatsAppPhoneNumbers\n                .FirstOrDefaultAsync(x =>\n                    x.BusinessId == businessId &&\n                    x.Provider.ToLower() == prov.ToLower() &&\n                    x.PhoneNumberId == phoneNumberId);\n        }\n\n        public async Task<WhatsAppPhoneNumber?> GetDefaultAsync(Guid businessId, string provider)\n        {\n            var prov = provider?.Trim() ?? string.Empty;\n\n            // covered by partial unique index: at most one IsDefault per (biz, provider)\n            return await _db.WhatsAppPhoneNumbers\n                .FirstOrDefaultAsync(x =>\n                    x.BusinessId == businessId &&\n                    x.Provider.ToLower() == prov.ToLower() &&\n                    x.IsDefault);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppSenderService.cs",
      "sha256": "aaebef136613d7398b333d2656e37f6acb8457e8a2b03f214b7e423a942ddd85",
      "language": "csharp",
      "size": 3059,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.WhatsAppSettings.DTOs;     // WhatsAppSenderDto\nusing xbytechat.api.WhatsAppSettings.Services; // IWhatsAppSenderService\nusing xbytechat.api.Infrastructure;            // AppDbContext (adjust if needed)\n\nnamespace xbytechat.api.WhatsAppSettings.Services\n{\n    public sealed class WhatsAppSenderService : IWhatsAppSenderService\n    {\n        private readonly AppDbContext _db;\n        public WhatsAppSenderService(AppDbContext db) => _db = db;\n\n        public async Task<IReadOnlyList<WhatsAppSenderDto>> GetBusinessSendersAsync(\n            Guid businessId,\n            CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty) return Array.Empty<WhatsAppSenderDto>();\n\n            var rows = await _db.WhatsAppPhoneNumbers\n                .AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.IsActive)\n                .OrderByDescending(x => x.IsDefault)\n                .ThenBy(x => x.WhatsAppBusinessNumber)\n                .ToListAsync(ct);\n\n            return rows.Select(x =>\n            {\n                // inline normalize: uppercase; map META -> META_CLOUD\n                var prov = (x.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                if (prov == \"META\") prov = \"META_CLOUD\";\n\n                return new WhatsAppSenderDto\n                {\n                    Id = x.Id,\n                    BusinessId = x.BusinessId,\n                    Provider = prov, // \"PINNACLE\" | \"META_CLOUD\" (ideally)\n                    PhoneNumberId = x.PhoneNumberId,\n                    WhatsAppBusinessNumber = x.WhatsAppBusinessNumber,\n                    SenderDisplayName = x.SenderDisplayName,\n                    IsActive = x.IsActive,\n                    IsDefault = x.IsDefault\n                };\n            }).ToList();\n        }\n\n        /// <summary>\n        /// Validates that the given phoneNumberId belongs to this business and is active.\n        /// Returns (normalizedProvider, phoneNumberId) or null.\n        /// </summary>\n        public async Task<(string Provider, string PhoneNumberId)?> ResolveSenderPairAsync(\n            Guid businessId,\n            string phoneNumberId,\n            CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(phoneNumberId))\n                return null;\n\n            var row = await _db.WhatsAppPhoneNumbers\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x =>\n                    x.BusinessId == businessId &&\n                    x.PhoneNumberId == phoneNumberId &&\n                    x.IsActive, ct);\n\n            if (row == null) return null;\n\n            // inline normalize here too\n            var prov = (row.Provider ?? string.Empty).Trim().ToUpperInvariant();\n            if (prov == \"META\") prov = \"META_CLOUD\";\n\n            return (prov, row.PhoneNumberId);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppSettingsService.cs",
      "sha256": "1b02c0b897c1c77ef22e8836d4a19ff86b14dbfb5e790f663b9fcf9e2af0d5d2",
      "language": "csharp",
      "size": 18956,
      "content": "// 📄 xbytechat_api/WhatsAppSettings/Services/WhatsAppSettingsService.cs\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public class WhatsAppSettingsService : IWhatsAppSettingsService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _http;                    // kept for any other callers you may have\n        private readonly IHttpClientFactory _httpClientFactory;\n\n        public WhatsAppSettingsService(\n            AppDbContext dbContext,\n            HttpClient http,\n            IHttpClientFactory httpClientFactory)\n        {\n            _dbContext = dbContext;\n            _http = http;\n            _httpClientFactory = httpClientFactory;\n        }\n\n        //public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        //{\n        //    if (dto.BusinessId == Guid.Empty)\n        //        throw new ArgumentException(\"Invalid BusinessId provided.\", nameof(dto.BusinessId));\n\n        //    // Normalize provider (store lower-case for consistency)\n        //    var provider = (dto.Provider ?? \"pinnacle\").Trim();\n        //    if (string.IsNullOrWhiteSpace(provider))\n        //        provider = \"pinnacle\";\n        //    var providerNorm = provider.ToLowerInvariant();\n\n        //    // Look up by BusinessId + Provider (case-insensitive)\n        //    var existing = await _dbContext.WhatsAppSettings\n        //        .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId && x.Provider.ToLower() == providerNorm);\n\n        //    if (existing != null)\n        //    {\n        //        // keep provider normalized\n        //        existing.Provider = providerNorm;\n\n        //        // Only overwrite when incoming value is non-empty (avoid wiping secrets/tokens accidentally)\n        //        if (!string.IsNullOrWhiteSpace(dto.ApiUrl)) existing.ApiUrl = dto.ApiUrl.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.ApiKey)) existing.ApiKey = dto.ApiKey.Trim();\n        //       // if (!string.IsNullOrWhiteSpace(dto.ApiToken)) existing.ApiToken = dto.ApiToken!.Trim();\n\n        //        if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId)) existing.PhoneNumberId = dto.PhoneNumberId!.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber)) existing.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber!.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName)) existing.SenderDisplayName = dto.SenderDisplayName!.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WabaId)) existing.WabaId = dto.WabaId!.Trim();\n\n        //        // 🔐 Webhook auth fields (optional)\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookSecret)) existing.WebhookSecret = dto.WebhookSecret!.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookVerifyToken)) existing.WebhookVerifyToken = dto.WebhookVerifyToken!.Trim();\n\n        //        // 🌐 NEW: provider callback URL (optional)\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl)) existing.WebhookCallbackUrl = dto.WebhookCallbackUrl!.Trim();\n\n        //        existing.IsActive = dto.IsActive;\n        //        existing.UpdatedAt = DateTime.UtcNow;\n        //    }\n        //    else\n        //    {\n        //        var newSetting = new WhatsAppSettingEntity\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = dto.BusinessId,\n        //            Provider = providerNorm,\n        //            ApiUrl = (dto.ApiUrl ?? string.Empty).Trim(),\n        //            ApiKey = string.IsNullOrWhiteSpace(dto.ApiKey) ? null : dto.ApiKey!.Trim(),\n        //           // ApiToken = string.IsNullOrWhiteSpace(dto.ApiToken) ? null : dto.ApiToken!.Trim(),\n        //            PhoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? null : dto.PhoneNumberId!.Trim(),\n        //            WhatsAppBusinessNumber = string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber) ? null : dto.WhatsAppBusinessNumber!.Trim(),\n        //            SenderDisplayName = string.IsNullOrWhiteSpace(dto.SenderDisplayName) ? null : dto.SenderDisplayName!.Trim(),\n        //            WabaId = string.IsNullOrWhiteSpace(dto.WabaId) ? null : dto.WabaId!.Trim(),\n\n        //            // 🔐 Webhook auth fields (optional)\n        //            WebhookSecret = string.IsNullOrWhiteSpace(dto.WebhookSecret) ? null : dto.WebhookSecret!.Trim(),\n        //            WebhookVerifyToken = string.IsNullOrWhiteSpace(dto.WebhookVerifyToken) ? null : dto.WebhookVerifyToken!.Trim(),\n\n        //            // 🌐 NEW: provider callback URL (optional)\n        //            WebhookCallbackUrl = string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl) ? null : dto.WebhookCallbackUrl!.Trim(),\n\n        //            IsActive = dto.IsActive,\n        //            CreatedAt = DateTime.UtcNow\n        //        };\n\n        //        await _dbContext.WhatsAppSettings.AddAsync(newSetting);\n        //    }\n\n        //    await _dbContext.SaveChangesAsync();\n        //}\n        public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (dto.BusinessId == Guid.Empty) throw new ArgumentException(\"BusinessId required\");\n\n            var existing = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId && x.Provider == dto.Provider);\n\n            if (existing != null)\n            {\n                if (!string.IsNullOrWhiteSpace(dto.ApiUrl)) existing.ApiUrl = dto.ApiUrl.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.ApiKey)) existing.ApiKey = dto.ApiKey.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId)) existing.PhoneNumberId = dto.PhoneNumberId.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber)) existing.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName)) existing.SenderDisplayName = dto.SenderDisplayName.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WabaId)) existing.WabaId = dto.WabaId.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WebhookSecret)) existing.WebhookSecret = dto.WebhookSecret.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WebhookVerifyToken)) existing.WebhookVerifyToken = dto.WebhookVerifyToken.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl)) existing.WebhookCallbackUrl = dto.WebhookCallbackUrl.Trim();\n                existing.IsActive = dto.IsActive;\n                existing.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                var s = new WhatsAppSettingEntity\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    Provider = dto.Provider,                           // must be 'META_CLOUD' or 'PINNACLE'\n                    ApiUrl = (dto.ApiUrl ?? string.Empty).Trim(),      // avoid NOT NULL violations\n                    ApiKey = (dto.ApiKey ?? string.Empty).Trim(),\n                    PhoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? null : dto.PhoneNumberId.Trim(),\n                    WhatsAppBusinessNumber = string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber) ? null : dto.WhatsAppBusinessNumber.Trim(),\n                    SenderDisplayName = string.IsNullOrWhiteSpace(dto.SenderDisplayName) ? null : dto.SenderDisplayName.Trim(),\n                    WabaId = string.IsNullOrWhiteSpace(dto.WabaId) ? null : dto.WabaId.Trim(),\n                    WebhookSecret = string.IsNullOrWhiteSpace(dto.WebhookSecret) ? null : dto.WebhookSecret.Trim(),\n                    WebhookVerifyToken = string.IsNullOrWhiteSpace(dto.WebhookVerifyToken) ? null : dto.WebhookVerifyToken.Trim(),\n                    WebhookCallbackUrl = string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl) ? null : dto.WebhookCallbackUrl.Trim(),\n                    IsActive = dto.IsActive,\n                    CreatedAt = DateTime.UtcNow\n                };\n                await _dbContext.WhatsAppSettings.AddAsync(s);\n            }\n\n            await _dbContext.SaveChangesAsync();\n        }\n\n        //public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        //{\n        //    if (dto.BusinessId == Guid.Empty)\n        //        throw new ArgumentException(\"Invalid BusinessId provided.\", nameof(dto.BusinessId));\n\n        //    // Controller already called NormalizeProvider; do it again here to be defensive.\n        //    // NormalizeProvider MUST return canonical values: \"Pinnacle\" or \"Meta_cloud\".\n        //    var providerCanon = NormalizeProvider(dto.Provider);\n        //    var providerLc = providerCanon.ToLowerInvariant();\n\n        //    // Look up case-insensitively so legacy rows still match\n        //    var existing = await _dbContext.WhatsAppSettings\n        //        .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId && x.Provider.ToLower() == providerLc);\n\n        //    if (existing != null)\n        //    {\n        //        // Enforce canonical provider in DB (prevents future FK mismatches)\n        //        if (!string.Equals(existing.Provider, providerCanon, StringComparison.Ordinal))\n        //            existing.Provider = providerCanon;\n\n        //        // Only overwrite when incoming value is non-empty (avoid nuking secrets)\n        //        if (!string.IsNullOrWhiteSpace(dto.ApiUrl)) existing.ApiUrl = dto.ApiUrl.Trim();\n\n        //        // IMPORTANT: keep ApiKey if input is empty\n        //        if (!string.IsNullOrWhiteSpace(dto.ApiKey)) existing.ApiKey = dto.ApiKey.Trim();\n\n        //        if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId)) existing.PhoneNumberId = dto.PhoneNumberId.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber)) existing.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName)) existing.SenderDisplayName = dto.SenderDisplayName.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WabaId)) existing.WabaId = dto.WabaId.Trim();\n\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookSecret)) existing.WebhookSecret = dto.WebhookSecret.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookVerifyToken)) existing.WebhookVerifyToken = dto.WebhookVerifyToken.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl)) existing.WebhookCallbackUrl = dto.WebhookCallbackUrl.Trim();\n\n        //        existing.IsActive = dto.IsActive;\n        //        existing.UpdatedAt = DateTime.UtcNow;\n        //    }\n        //    else\n        //    {\n        //        // Create canonical, NOT NULL-safe stub/row\n        //        var newSetting = new WhatsAppSettingEntity\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = dto.BusinessId,\n        //            Provider = providerCanon,                         // canonical only\n        //            ApiUrl = (dto.ApiUrl ?? string.Empty).Trim(),     // keep NOT NULL safe\n        //            ApiKey = string.IsNullOrWhiteSpace(dto.ApiKey) ? string.Empty : dto.ApiKey.Trim(), // avoid null\n        //            PhoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? null : dto.PhoneNumberId.Trim(),\n        //            WhatsAppBusinessNumber = string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber) ? null : dto.WhatsAppBusinessNumber.Trim(),\n        //            SenderDisplayName = string.IsNullOrWhiteSpace(dto.SenderDisplayName) ? null : dto.SenderDisplayName.Trim(),\n        //            WabaId = string.IsNullOrWhiteSpace(dto.WabaId) ? null : dto.WabaId.Trim(),\n        //            WebhookSecret = string.IsNullOrWhiteSpace(dto.WebhookSecret) ? null : dto.WebhookSecret.Trim(),\n        //            WebhookVerifyToken = string.IsNullOrWhiteSpace(dto.WebhookVerifyToken) ? null : dto.WebhookVerifyToken.Trim(),\n        //            WebhookCallbackUrl = string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl) ? null : dto.WebhookCallbackUrl.Trim(),\n        //            IsActive = dto.IsActive,\n        //            CreatedAt = DateTime.UtcNow\n        //        };\n\n        //        await _dbContext.WhatsAppSettings.AddAsync(newSetting);\n        //    }\n\n        //    await _dbContext.SaveChangesAsync();\n        //}\n\n        public async Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId)\n        {\n            return await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n        }\n\n        public async Task<bool> DeleteSettingsAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId);\n\n            if (setting == null) return false;\n\n            _dbContext.WhatsAppSettings.Remove(setting);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        /// <summary>\n        /// Provider-aware test connection. Returns a short message (✅/❌ …).\n        /// The controller may convert non-✅ messages to 400, etc.\n        /// </summary>\n        public async Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Provider))\n                throw new ArgumentException(\"Provider is required.\");\n\n            // normalize provider and baseUrl\n            var provider = dto.Provider.Trim();\n            var lower = provider.ToLowerInvariant();\n            var baseUrl = (dto.ApiUrl ?? string.Empty).Trim().TrimEnd('/');\n\n            if (string.IsNullOrWhiteSpace(baseUrl))\n                throw new ArgumentException(\"ApiUrl is required.\");\n\n            var http = _httpClientFactory.CreateClient();\n\n            // ----- Meta Cloud -----\n            if (lower == \"meta_cloud\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiKey))\n                    throw new ArgumentException(\"ApiKey is required for Meta Cloud.\");\n                if (string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                    throw new ArgumentException(\"PhoneNumberId is required for Meta Cloud.\");\n\n                http.DefaultRequestHeaders.Authorization =\n                    new AuthenticationHeaderValue(\"Bearer\", dto.ApiKey);\n\n                var url = $\"{baseUrl}/{dto.PhoneNumberId}\";\n                var res = await http.GetAsync(url);\n                var body = await res.Content.ReadAsStringAsync();\n\n                if (!res.IsSuccessStatusCode)\n                    return $\"❌ Meta Cloud test failed ({(int)res.StatusCode}). Body: {body}\";\n\n                return \"✅ Meta Cloud token & phone number ID are valid.\";\n            }\n\n            // ----- Pinnacle (formerly Pinbot) -----\n            if (lower == \"pinnacle\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiKey))\n                    return \"❌ API Key is required for Pinnacle.\";\n\n                // Pinnacle requires either phone number id OR WABA id in the path\n                var pathId =\n                    !string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? dto.PhoneNumberId!.Trim() :\n                    !string.IsNullOrWhiteSpace(dto.WabaId) ? dto.WabaId!.Trim() :\n                    null;\n\n                if (string.IsNullOrWhiteSpace(pathId))\n                    return \"❌ Provide PhoneNumberId or WabaId for Pinnacle.\";\n\n                if (string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                    return \"❌ WhatsApp Business Number is required for Pinnacle test.\";\n\n                var url = $\"{baseUrl}/{pathId}/messages\";\n                var payload = new\n                {\n                    to = dto.WhatsAppBusinessNumber,\n                    type = \"text\",\n                    text = new { body = \"Test message\" },\n                    messaging_product = \"whatsapp\"\n                };\n\n                using var req = new HttpRequestMessage(HttpMethod.Post, url);\n                req.Headers.TryAddWithoutValidation(\"apikey\", dto.ApiKey);\n                req.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n\n                var res = await http.SendAsync(req);\n                var body = await res.Content.ReadAsStringAsync();\n\n                if (!res.IsSuccessStatusCode)\n                {\n                    if ((int)res.StatusCode == 401 || (int)res.StatusCode == 403)\n                        return $\"❌ Pinnacle rejected the API key for id '{pathId}'. Verify the key and id. Body: {body}\";\n\n                    return $\"❌ Pinnacle test failed ({(int)res.StatusCode}). Body: {body}\";\n                }\n\n                return \"✅ Pinnacle API key and endpoint are reachable.\";\n            }\n\n            return $\"❌ Unsupported provider: {dto.Provider}\";\n        }\n\n        public async Task<string?> GetSenderNumberAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            return setting?.WhatsAppBusinessNumber;\n        }\n\n        public async Task<string> GetCallbackUrlAsync(Guid businessId, string appBaseUrl)\n        {\n            var s = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (!string.IsNullOrWhiteSpace(s?.WebhookCallbackUrl))\n                return s!.WebhookCallbackUrl!;\n\n            return $\"{appBaseUrl.TrimEnd('/')}/api/webhookcallback\";\n        }\n        public async Task<IReadOnlyList<WhatsAppSettingEntity>> GetAllForBusinessAsync(Guid businessId)\n        {\n            // Return all rows (one per provider) for this business\n            var items = await _dbContext.WhatsAppSettings\n                .Where(s => s.BusinessId == businessId)\n                 .Include(s => s.PhoneNumberId)\n                .OrderBy(s => s.Provider)\n                .ToListAsync();\n\n            return items.AsReadOnly();\n        }\n        public async Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAndProviderAsync(Guid businessId, string provider)\n        {\n            if (string.IsNullOrWhiteSpace(provider)) return null;\n            var prov = provider.Trim();\n\n            // case-insensitive provider match\n            return await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.Provider.ToLower() == prov.ToLower());\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppTemplateFetcherService.cs",
      "sha256": "6292eb6e27516f356b4e16390a3686aa78132670a7bba8a6960e1bc0fe10dae2",
      "language": "csharp",
      "size": 45852,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing System.Net.Http.Headers;\nusing System.Security.Claims;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing xbytechat.api;\nusing xbytechat.api.Shared;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing DTO = xbytechat.api.WhatsAppSettings.DTOs;\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n\n    public class WhatsAppTemplateFetcherService : IWhatsAppTemplateFetcherService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<WhatsAppTemplateFetcherService> _logger;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        public WhatsAppTemplateFetcherService(AppDbContext dbContext, HttpClient httpClient, ILogger<WhatsAppTemplateFetcherService> logger, IHttpContextAccessor httpContextAccessor)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _logger = logger;\n            _httpContextAccessor = httpContextAccessor;\n        }\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId)\n        {\n            var templates = new List<TemplateMetadataDto>();\n\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"WhatsApp Settings not found for BusinessId: {BusinessId}\", businessId);\n                return templates;\n            }\n\n            var provider = (setting.Provider ?? \"\").Trim().ToLowerInvariant();\n            var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"\";\n\n            try\n            {\n                if (provider == \"meta_cloud\")\n                {\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey) || string.IsNullOrWhiteSpace(setting.WabaId))\n                    {\n                        _logger.LogWarning(\"Missing API Token or WABA ID for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    var nextUrl = $\"{(string.IsNullOrWhiteSpace(baseUrl) ? \"https://graph.facebook.com/v22.0\" : baseUrl)}/{setting.WabaId}/message_templates?limit=100\";\n                    _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiKey);\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        var response = await _httpClient.GetAsync(nextUrl);\n                        var json = await response.Content.ReadAsStringAsync();\n                        _logger.LogInformation(\"📦 Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                        if (!response.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"❌ Failed to fetch templates from Meta: {Response}\", json);\n                            break;\n                        }\n\n                        dynamic parsed = JsonConvert.DeserializeObject(json);\n                        templates.AddRange(ParseTemplatesFromMetaLikePayload(parsed));\n                        nextUrl = parsed?.paging?.next?.ToString();\n                    }\n\n                    return templates;\n                }\n                else if (provider == \"pinnacle\")\n                {\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                    {\n                        _logger.LogWarning(\"Pinnacle API key missing for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    // Pinnacle typically accepts either WABA ID or PhoneNumberId. Prefer WABA.\n                    var pathId = !string.IsNullOrWhiteSpace(setting.WabaId)\n                        ? setting.WabaId!.Trim()\n                        : setting.PhoneNumberId?.Trim();\n\n                    if (string.IsNullOrWhiteSpace(pathId))\n                    {\n                        _logger.LogWarning(\"Pinnacle path id missing (WabaId/PhoneNumberId) for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    var nextUrl = $\"{(string.IsNullOrWhiteSpace(baseUrl) ? \"https://partnersv1.pinbot.ai/v3\" : baseUrl)}/{pathId}/message_templates?limit=100\";\n\n                    // IMPORTANT: Pinnacle needs apikey header\n                    _httpClient.DefaultRequestHeaders.Remove(\"apikey\");\n                    _httpClient.DefaultRequestHeaders.TryAddWithoutValidation(\"apikey\", setting.ApiKey);\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        var response = await _httpClient.GetAsync(nextUrl);\n                        var json = await response.Content.ReadAsStringAsync();\n                        _logger.LogInformation(\"📦 Pinnacle Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                        if (!response.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"❌ Failed to fetch templates from Pinnacle: {Response}\", json);\n                            break;\n                        }\n\n                        // Try to support both \"data\": [...] and \"templates\": [...] styles\n                        dynamic parsed = JsonConvert.DeserializeObject(json);\n                        templates.AddRange(ParseTemplatesFromMetaLikePayload(parsed)); // many BSPs mirror Meta's shape\n                        nextUrl = parsed?.paging?.next?.ToString(); // if their API paginates similarly\n                                                                    // If no paging in Pinnacle, set nextUrl = null to exit loop\n                        if (nextUrl == null) break;\n                    }\n\n                    return templates;\n                }\n                else\n                {\n                    _logger.LogInformation(\"Provider {Provider} does not support listing via API in this build.\", provider);\n                    return templates;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception while fetching WhatsApp templates for provider {Provider}.\", provider);\n                return templates;\n            }\n        }\n\n        private static IEnumerable<TemplateMetadataDto> ParseTemplatesFromMetaLikePayload(dynamic parsed)\n        {\n            var list = new List<TemplateMetadataDto>();\n            if (parsed == null) return list;\n\n            // Prefer parsed.data; fall back to parsed.templates\n            var collection = parsed.data ?? parsed.templates;\n            if (collection == null) return list;\n\n            foreach (var tpl in collection)\n            {\n                string name = tpl.name?.ToString() ?? \"\";\n                string language = tpl.language?.ToString() ?? \"en_US\";\n                string body = \"\";\n                bool hasImageHeader = false;\n                var buttons = new List<ButtonMetadataDto>();\n\n                // components may be null for some BSPs\n                var components = tpl.components;\n                if (components != null)\n                {\n                    foreach (var component in components)\n                    {\n                        string type = component.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                            body = component.text?.ToString() ?? \"\";\n\n                        if (type == \"HEADER\" && (component.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                            hasImageHeader = true;\n\n                        if (type == \"BUTTONS\" && component.buttons != null)\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? paramValue =\n                                        button.url != null ? button.url.ToString() :\n                                        button.phone_number != null ? button.phone_number.ToString() :\n                                        button.coupon_code != null ? button.coupon_code.ToString() :\n                                        button.flow_id != null ? button.flow_id.ToString() :\n                                        null;\n\n                                    // If BSP marks dynamic examples like Meta, respect them; otherwise be lenient\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\"\n                                    });\n                                }\n                                catch { /* ignore per-button parsing issues */ }\n                            }\n                        }\n                    }\n                }\n\n                int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                list.Add(new TemplateMetadataDto\n                {\n                    Name = name,\n                    Language = language,\n                    Body = body,\n                    PlaceholderCount = placeholderCount,\n                    HasImageHeader = hasImageHeader,\n                    ButtonParams = buttons\n                });\n            }\n\n            return list;\n        }\n\n        public async Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync()\n        {\n            var result = new List<TemplateForUIResponseDto>();\n\n            var user = _httpContextAccessor.HttpContext.User;\n            var businessId = user.GetBusinessId();\n            _logger.LogInformation(\"🔎 Fetching templates for BusinessId {BusinessId}\", businessId);\n\n            // 1) Load this business's active setting (provider can be Meta or Pinnacle)\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(s =>\n                    s.IsActive &&\n                    s.BusinessId == businessId);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"⚠️ No active WhatsApp setting for BusinessId {BusinessId}\", businessId);\n                return result;\n            }\n\n            try\n            {\n                string provider = setting.Provider?.ToLowerInvariant() ?? \"\";\n\n                if (provider == \"meta_cloud\")\n                {\n                    // ✅ Meta Cloud path → ApiKey + WabaId required\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey) || string.IsNullOrWhiteSpace(setting.WabaId))\n                    {\n                        _logger.LogWarning(\"⚠️ Missing ApiKey or WabaId for Meta Cloud (Biz {BusinessId})\", businessId);\n                        return result;\n                    }\n\n                    var baseUrl = (setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v22.0\");\n                    var nextUrl = $\"{baseUrl}/{setting.WabaId}/message_templates?limit=100\";\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                        req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiKey);\n\n                        using var res = await _httpClient.SendAsync(req);\n                        var json = await res.Content.ReadAsStringAsync();\n\n                        _logger.LogInformation(\"📦 Meta Template API (Biz {BusinessId}) payload:\\n{Json}\", businessId, json);\n\n                        if (!res.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"❌ Meta template fetch failed (Biz {BusinessId}): {Json}\", businessId, json);\n                            break;\n                        }\n\n                        result.AddRange(ParseMetaTemplates(json));\n                        nextUrl = JsonConvert.DeserializeObject<dynamic>(json)?.paging?.next?.ToString();\n                    }\n                }\n                else if (provider == \"pinnacle\")\n                {\n                    // ✅ Pinnacle path → ApiKey + PhoneNumberId required\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n                    {\n                        _logger.LogWarning(\"⚠️ Missing ApiKey or PhoneNumberId for Pinnacle (Biz {BusinessId})\", businessId);\n                        return result;\n                    }\n\n                    var baseUrl = (setting.ApiUrl?.TrimEnd('/') ?? \"https://partnersv1.pinbot.ai/v3\");\n                    var nextUrl = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                    using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                    req.Headers.Add(\"apikey\", setting.ApiKey);\n\n                    using var res = await _httpClient.SendAsync(req);\n                    var json = await res.Content.ReadAsStringAsync();\n\n                    _logger.LogInformation(\"📦 Pinnacle Template API (Biz {BusinessId}) payload:\\n{Json}\", businessId, json);\n\n                    if (!res.IsSuccessStatusCode)\n                    {\n                        _logger.LogError(\"❌ Pinnacle template fetch failed (Biz {BusinessId}): {Json}\", businessId, json);\n                        return result;\n                    }\n\n                    result.AddRange(ParsePinnacleTemplates(json));\n                }\n                else\n                {\n                    _logger.LogWarning(\"⚠️ Unknown provider '{Provider}' for Biz {BusinessId}\", provider, businessId);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception while fetching templates for BusinessId {BusinessId}\", businessId);\n            }\n\n            return result;\n        }\n        private List<TemplateForUIResponseDto> ParseMetaTemplates(string json)\n        {\n            var list = new List<TemplateForUIResponseDto>();\n            dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n            foreach (var tpl in parsed.data)\n            {\n                string status = (tpl.status?.ToString() ?? \"\").ToUpperInvariant();\n                if (status != \"APPROVED\" && status != \"ACTIVE\") continue;\n\n                list.Add(BuildTemplateDtoFromComponents(tpl));\n            }\n\n            return list;\n        }\n\n        private List<TemplateForUIResponseDto> ParsePinnacleTemplates(string json)\n        {\n            var list = new List<TemplateForUIResponseDto>();\n            dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n            if (parsed?.data == null) return list;\n\n            foreach (var tpl in parsed.data)\n            {\n                // Pinnacle may not use status like Meta, adjust filter if needed\n                list.Add(BuildTemplateDtoFromComponents(tpl));\n            }\n\n            return list;\n        }\n\n        private TemplateForUIResponseDto BuildTemplateDtoFromComponents(dynamic tpl)\n        {\n            string name = tpl.name;\n            string language = tpl.language ?? \"en_US\";\n            string body = \"\";\n            bool hasImageHeader = false;\n            var buttons = new List<ButtonMetadataDto>();\n\n            foreach (var component in tpl.components)\n            {\n                string type = component.type?.ToString()?.ToUpperInvariant();\n\n                if (type == \"BODY\")\n                    body = component.text?.ToString() ?? \"\";\n\n                if (type == \"HEADER\" && (component.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                    hasImageHeader = true;\n\n                if (type == \"BUTTONS\")\n                {\n                    foreach (var button in component.buttons)\n                    {\n                        string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                        string text = button.text?.ToString() ?? \"\";\n                        int index = buttons.Count;\n\n                        string subType = btnType switch\n                        {\n                            \"URL\" => \"url\",\n                            \"PHONE_NUMBER\" => \"voice_call\",\n                            \"QUICK_REPLY\" => \"quick_reply\",\n                            \"COPY_CODE\" => \"copy_code\",\n                            \"CATALOG\" => \"catalog\",\n                            \"FLOW\" => \"flow\",\n                            \"REMINDER\" => \"reminder\",\n                            \"ORDER_DETAILS\" => \"order_details\",\n                            _ => \"unknown\"\n                        };\n\n                        string? paramValue = button.url?.ToString() ?? button.phone_number?.ToString();\n\n                        if (subType == \"unknown\") continue;\n\n                        buttons.Add(new ButtonMetadataDto\n                        {\n                            Text = text,\n                            Type = btnType,\n                            SubType = subType,\n                            Index = index,\n                            ParameterValue = paramValue ?? \"\"\n                        });\n                    }\n                }\n            }\n\n            int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n            return new TemplateForUIResponseDto\n            {\n                Name = name,\n                Language = language,\n                Body = body,\n                ParametersCount = placeholderCount,\n                HasImageHeader = hasImageHeader,\n                ButtonParams = buttons\n            };\n        }\n\n        public async Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.IsActive && x.BusinessId == businessId);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"❌ WhatsApp settings not found for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            var provider = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n            var wabaId = setting.WabaId?.Trim();\n            if (string.IsNullOrWhiteSpace(wabaId))\n            {\n                _logger.LogWarning(\"❌ Missing WABA ID for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            // Build URL + request with per-request headers\n            string url;\n            using var req = new HttpRequestMessage(HttpMethod.Get, \"\");\n\n            if (provider == \"pinnacle\")\n            {\n                // Pinnacle: require ApiKey; use WabaId for template listing\n                if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                {\n                    _logger.LogWarning(\"❌ ApiKey missing for Pinnacle provider (BusinessId {BusinessId})\", businessId);\n                    return null;\n                }\n\n                var baseUrl = string.IsNullOrWhiteSpace(setting.ApiUrl)\n                    ? \"https://partnersv1.pinbot.ai/v3\"\n                    : setting.ApiUrl.TrimEnd('/');\n\n                url = $\"{baseUrl}/{wabaId}/message_templates?limit=200\";\n                // add header variants\n                req.Headers.TryAddWithoutValidation(\"apikey\", setting.ApiKey);\n                req.Headers.TryAddWithoutValidation(\"x-api-key\", setting.ApiKey);\n                // safety: also append as query (some edges require it)\n                url = url.Contains(\"apikey=\") ? url : $\"{url}&apikey={Uri.EscapeDataString(setting.ApiKey)}\";\n            }\n            else // meta_cloud\n            {\n                // Meta Cloud: require ApiKey; use WabaId for template listing\n                if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                {\n                    _logger.LogWarning(\"❌ ApiKey missing for Meta provider (BusinessId {BusinessId})\", businessId);\n                    return null;\n                }\n\n                var baseUrl = string.IsNullOrWhiteSpace(setting.ApiUrl)\n                    ? \"https://graph.facebook.com/v22.0\"\n                    : setting.ApiUrl.TrimEnd('/');\n\n                url = $\"{baseUrl}/{wabaId}/message_templates?limit=200\";\n                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiKey);\n            }\n\n            req.RequestUri = new Uri(url);\n            var response = await _httpClient.SendAsync(req);\n            var json = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                _logger.LogError(\"❌ Failed to fetch templates (provider={Provider}) for BusinessId {BusinessId}: HTTP {Status} Body: {Body}\",\n                    provider, businessId, (int)response.StatusCode, json);\n                return null;\n            }\n\n            try\n            {\n                dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n                var data = parsed?.data;\n                if (data == null)\n                {\n                    _logger.LogWarning(\"⚠️ No 'data' array in template response (provider={Provider})\", provider);\n                    return null;\n                }\n\n                foreach (var tpl in data)\n                {\n                    string name = tpl.name;\n                    if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                        continue;\n\n                    string language = tpl.language != null ? (string)tpl.language : \"en_US\";\n                    string body = \"\";\n                    var buttons = new List<ButtonMetadataDto>();\n                    bool hasImageHeader = false;\n\n                    // components loop\n                    foreach (var component in tpl.components)\n                    {\n                        string type = component.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                        {\n                            try { body = component.text?.ToString() ?? \"\"; }\n                            catch { body = \"\"; }\n                        }\n\n                        if (type == \"HEADER\")\n                        {\n                            string format = component.format?.ToString()?.ToUpperInvariant();\n                            if (format == \"IMAGE\") hasImageHeader = true;\n                        }\n\n                        if (includeButtons && type == \"BUTTONS\")\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    // normalize sub-type for our app\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    // Known dynamic param extraction\n                                    string? paramValue = null;\n                                    if (button.url != null)\n                                        paramValue = button.url.ToString();\n                                    else if (button.phone_number != null)\n                                        paramValue = button.phone_number.ToString();\n                                    else if (button.coupon_code != null)\n                                        paramValue = button.coupon_code.ToString();\n                                    else if (button.flow_id != null)\n                                        paramValue = button.flow_id.ToString();\n\n                                    // Skip truly invalid\n                                    if (subType == \"unknown\" ||\n                                        (paramValue == null && new[] { \"url\", \"flow\", \"copy_code\" }.Contains(subType)))\n                                    {\n                                        _logger.LogWarning(\"⚠️ Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                        continue;\n                                    }\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\" // empty for static buttons\n                                    });\n                                }\n                                catch (Exception exBtn)\n                                {\n                                    _logger.LogWarning(exBtn, \"⚠️ Failed to parse button in template {TemplateName}\", name);\n                                }\n                            }\n                        }\n                    }\n\n                    // Count {{n}} placeholders in body\n                    int paramCount = Regex.Matches(body ?? \"\", \"{{\\\\s*\\\\d+\\\\s*}}\").Count;\n\n                    return new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = paramCount,\n                        HasImageHeader = hasImageHeader,\n                        ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception while parsing template response\");\n            }\n\n            return null;\n        }\n        private static TemplateMetadataDto? ExtractTemplateFromListJson(string json, string templateName, bool includeButtons)\n        {\n            var root = JObject.Parse(json);\n            var data = root[\"data\"] as JArray;\n            if (data == null) return null;\n\n            foreach (var tplToken in data.OfType<JObject>())\n            {\n                var name = tplToken.Value<string>(\"name\") ?? \"\";\n                if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var language = tplToken.Value<string>(\"language\") ?? \"en_US\";\n                var components = tplToken[\"components\"] as JArray;\n\n                string body = \"\";\n                bool hasImageHeader = false;\n                var buttons = new List<ButtonMetadataDto>();\n\n                if (components != null)\n                {\n                    foreach (var comp in components.OfType<JObject>())\n                    {\n                        var type = (comp.Value<string>(\"type\") ?? \"\").ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                        {\n                            body = comp.Value<string>(\"text\") ?? body;\n                        }\n                        else if (type == \"HEADER\")\n                        {\n                            var fmt = (comp.Value<string>(\"format\") ?? \"\").ToUpperInvariant();\n                            if (fmt == \"IMAGE\") hasImageHeader = true;\n                        }\n                        else if (includeButtons && type == \"BUTTONS\")\n                        {\n                            var btns = comp[\"buttons\"] as JArray;\n                            if (btns == null) continue;\n\n                            var idx = 0;\n                            foreach (var b in btns.OfType<JObject>())\n                            {\n                                var btnTypeRaw = (b.Value<string>(\"type\") ?? \"\").ToUpperInvariant();\n                                var text = b.Value<string>(\"text\") ?? \"\";\n\n                                var subType = btnTypeRaw switch\n                                {\n                                    \"URL\" => \"url\",\n                                    \"PHONE_NUMBER\" => \"voice_call\",\n                                    \"QUICK_REPLY\" => \"quick_reply\",\n                                    \"COPY_CODE\" => \"copy_code\",\n                                    \"CATALOG\" => \"catalog\",\n                                    \"FLOW\" => \"flow\",\n                                    \"REMINDER\" => \"reminder\",\n                                    \"ORDER_DETAILS\" => \"order_details\",\n                                    _ => \"unknown\"\n                                };\n\n                                string? paramValue =\n                                    b.Value<string>(\"url\") ??\n                                    b.Value<string>(\"phone_number\") ??\n                                    b.Value<string>(\"coupon_code\") ??\n                                    b.Value<string>(\"flow_id\");\n\n                                // Skip unknown or missing required dynamic values\n                                if (subType == \"unknown\") continue;\n                                if ((subType is \"url\" or \"flow\" or \"copy_code\") && string.IsNullOrWhiteSpace(paramValue))\n                                    continue;\n\n                                buttons.Add(new ButtonMetadataDto\n                                {\n                                    Text = text,\n                                    Type = btnTypeRaw,\n                                    SubType = subType,\n                                    Index = idx++,\n                                    ParameterValue = paramValue ?? \"\"\n                                });\n                            }\n                        }\n                    }\n                }\n\n                var paramCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                return new TemplateMetadataDto\n                {\n                    Name = name,\n                    Language = language,\n                    Body = body ?? \"\",\n                    PlaceholderCount = paramCount,\n                    HasImageHeader = hasImageHeader,\n                    ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                };\n            }\n\n            return null;\n        }\n\n        // --- NEW: DB-backed meta projection methods ---\n        // List all template meta for a business (optionally filter by provider)\n        public async Task<IReadOnlyList<TemplateMetaDto>> GetTemplatesMetaAsync(Guid businessId, string? provider = null)\n        {\n            // Adjust DbSet name if different in your AppDbContext\n            var q = _dbContext.WhatsAppTemplates\n                              .AsNoTracking()\n                              .Where(t => t.BusinessId == businessId && t.IsActive);\n\n            if (!string.IsNullOrWhiteSpace(provider))\n                q = q.Where(t => t.Provider == provider);\n\n            var rows = await q.ToListAsync();\n            return rows.Select(MapRowToMeta).ToList();\n        }\n\n        // Get a single template meta by name (+ optional language/provider)\n        public async Task<TemplateMetaDto?> GetTemplateMetaAsync(Guid businessId, string templateName, string? language = null, string? provider = null)\n        {\n            var q = _dbContext.WhatsAppTemplates\n                              .AsNoTracking()\n                              .Where(t => t.BusinessId == businessId && t.IsActive && t.Name == templateName);\n\n            if (!string.IsNullOrWhiteSpace(language))\n                q = q.Where(t => t.Language == language);\n\n            if (!string.IsNullOrWhiteSpace(provider))\n                q = q.Where(t => t.Provider == provider);\n\n            // prefer exact language match if provided\n            var row = await q.OrderByDescending(t => t.Language == language).FirstOrDefaultAsync();\n            return row == null ? null : MapRowToMeta(row);\n        }\n        // Map persisted catalog row → TemplateMetaDto\n        //private DTO.TemplateMetaDto MapRowToMeta(dynamic row)\n        //{\n        //    var meta = new DTO.TemplateMetaDto\n        //    {\n        //        Provider = row.Provider ?? \"\",\n        //        TemplateId = row.ExternalId ?? row.TemplateId ?? \"\",\n        //        TemplateName = row.Name ?? \"\",\n        //        Language = row.Language ?? \"\",\n        //        HasHeaderMedia = row.HasImageHeader ?? false,\n        //        HeaderType = (row.HasImageHeader ?? false) ? \"IMAGE\" : \"\"\n        //    };\n\n        //    int count = 0;\n        //    try { count = Convert.ToInt32(row.PlaceholderCount ?? 0); } catch { count = 0; }\n\n        //    meta.BodyPlaceholders = Enumerable.Range(1, Math.Max(0, count))\n        //                                      .Select(i => new DTO.PlaceholderSlot { Index = i })\n        //                                      .ToList();\n\n        //    // ButtonsJson → TemplateButtonMeta[]\n        //    meta.Buttons = new List<DTO.TemplateButtonMeta>();\n        //    try\n        //    {\n        //        string buttonsJson = row.ButtonsJson ?? \"\";\n        //        if (!string.IsNullOrWhiteSpace(buttonsJson))\n        //        {\n        //            using var doc = JsonDocument.Parse(buttonsJson);\n        //            if (doc.RootElement.ValueKind == JsonValueKind.Array)\n        //            {\n        //                int i = 0;\n        //                foreach (var el in doc.RootElement.EnumerateArray())\n        //                {\n        //                    var type = el.TryGetProperty(\"Type\", out var p1) ? p1.GetString() ?? \"\"\n        //                              : el.TryGetProperty(\"type\", out var p1b) ? p1b.GetString() ?? \"\" : \"\";\n        //                    var text = el.TryGetProperty(\"Text\", out var p2) ? p2.GetString() ?? \"\"\n        //                              : el.TryGetProperty(\"text\", out var p2b) ? p2b.GetString() ?? \"\" : \"\";\n        //                    var value = el.TryGetProperty(\"ParameterValue\", out var p3) ? p3.GetString()\n        //                              : el.TryGetProperty(\"value\", out var p3b) ? p3b.GetString() : null;\n        //                    var order = el.TryGetProperty(\"Index\", out var p4) && p4.ValueKind == JsonValueKind.Number\n        //                              ? p4.GetInt32()\n        //                              : i;\n\n        //                    meta.Buttons.Add(new DTO.TemplateButtonMeta\n        //                    {\n        //                        Type = type,\n        //                        Text = text,\n        //                        Value = value,\n        //                        Order = order\n        //                    });\n        //                    i++;\n        //                }\n        //            }\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogWarning(ex, \"Failed to parse ButtonsJson for template {TemplateName}\", (string)(row.Name ?? \"(unknown)\"));\n        //    }\n\n        //    return meta;\n        //}\n        // add near the class top (once)\n        // helpers (place near the class top)\n        private static readonly Regex _phRx = new(@\"\\{\\{\\s*(\\d+)\\s*\\}\\}\", RegexOptions.Compiled);\n\n        private static int DistinctMaxPlaceholderIndex(string? text)\n        {\n            if (string.IsNullOrWhiteSpace(text)) return 0;\n            var m = _phRx.Matches(text);\n            int max = 0;\n            var seen = new HashSet<int>();\n            foreach (Match x in m)\n            {\n                if (int.TryParse(x.Groups[1].Value, out var i) && seen.Add(i) && i > max)\n                    max = i;\n            }\n            return max;\n        }\n\n        private static bool TryGetPropCI(JsonElement obj, string name, out JsonElement value)\n        {\n            foreach (var p in obj.EnumerateObject())\n            {\n                if (string.Equals(p.Name, name, StringComparison.OrdinalIgnoreCase))\n                {\n                    value = p.Value;\n                    return true;\n                }\n            }\n            value = default;\n            return false;\n        }\n\n        private DTO.TemplateMetaDto MapRowToMeta(dynamic row)\n        {\n            var meta = new DTO.TemplateMetaDto\n            {\n                Provider = row.Provider ?? \"\",\n                TemplateId = row.ExternalId ?? row.TemplateId ?? \"\",\n                TemplateName = row.Name ?? \"\",\n                Language = row.Language ?? \"en_US\",\n                HasHeaderMedia = false,\n                HeaderType = \"\" // will be set from RawJson\n            };\n\n            // --- Detect header kind & body placeholders from RawJson (preferred) ---\n            try\n            {\n                string raw = row.RawJson ?? \"\"; // ✅ your entity has RawJson, not DefinitionJson\n                if (!string.IsNullOrWhiteSpace(raw))\n                {\n                    using var doc = JsonDocument.Parse(raw);\n                    var root = doc.RootElement;\n\n                    // components (case-insensitive)\n                    if (TryGetPropCI(root, \"components\", out var comps) && comps.ValueKind == JsonValueKind.Array)\n                    {\n                        foreach (var c in comps.EnumerateArray())\n                        {\n                            // type (HEADER/BODY)\n                            if (!TryGetPropCI(c, \"type\", out var typeEl) || typeEl.ValueKind != JsonValueKind.String)\n                                continue;\n\n                            var type = typeEl.GetString();\n                            if (string.Equals(type, \"HEADER\", StringComparison.OrdinalIgnoreCase))\n                            {\n                                // format (IMAGE/VIDEO/DOCUMENT/TEXT)\n                                string fmt = \"\";\n                                if (TryGetPropCI(c, \"format\", out var fmtEl) && fmtEl.ValueKind == JsonValueKind.String)\n                                    fmt = (fmtEl.GetString() ?? \"\").ToUpperInvariant();\n\n                                switch (fmt)\n                                {\n                                    case \"IMAGE\": meta.HasHeaderMedia = true; meta.HeaderType = \"IMAGE\"; break;\n                                    case \"VIDEO\": meta.HasHeaderMedia = true; meta.HeaderType = \"VIDEO\"; break;\n                                    case \"DOCUMENT\": meta.HasHeaderMedia = true; meta.HeaderType = \"DOCUMENT\"; break;\n                                    case \"TEXT\": meta.HasHeaderMedia = false; meta.HeaderType = \"TEXT\"; break;\n                                    default:         /* unknown */ break;\n                                }\n                            }\n                            else if (string.Equals(type, \"BODY\", StringComparison.OrdinalIgnoreCase))\n                            {\n                                string? bodyText = null;\n                                if (TryGetPropCI(c, \"text\", out var tx) && tx.ValueKind == JsonValueKind.String)\n                                    bodyText = tx.GetString();\n                                else\n                                    bodyText = row.Body; // fallback\n\n                                var count = DistinctMaxPlaceholderIndex(bodyText);\n                                meta.BodyPlaceholders = Enumerable.Range(1, Math.Max(0, count))\n                                                                  .Select(i => new DTO.PlaceholderSlot { Index = i })\n                                                                  .ToList();\n                            }\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogDebug(ex, \"RawJson parse failed for template {TemplateName}\", (string)(row.Name ?? \"(unknown)\"));\n            }\n\n            // --- Fallbacks when raw json missing/partial ---\n            if (string.IsNullOrEmpty(meta.HeaderType) && (row.HasImageHeader ?? false))\n            {\n                meta.HasHeaderMedia = true;\n                meta.HeaderType = \"IMAGE\"; // legacy flag\n            }\n\n            if (meta.BodyPlaceholders == null || meta.BodyPlaceholders.Count == 0)\n            {\n                int count;\n                try { count = Convert.ToInt32(row.PlaceholderCount ?? 0); } catch { count = 0; }\n                meta.BodyPlaceholders = Enumerable.Range(1, Math.Max(0, count))\n                                                  .Select(i => new DTO.PlaceholderSlot { Index = i })\n                                                  .ToList();\n            }\n\n            // --- ButtonsJson → TemplateButtonMeta[] (robust parsing) ---\n            meta.Buttons = new List<DTO.TemplateButtonMeta>();\n            try\n            {\n                string buttonsJson = row.ButtonsJson ?? \"\";\n                if (!string.IsNullOrWhiteSpace(buttonsJson))\n                {\n                    using var bdoc = JsonDocument.Parse(buttonsJson);\n                    if (bdoc.RootElement.ValueKind == JsonValueKind.Array)\n                    {\n                        int i = 0;\n                        foreach (var el in bdoc.RootElement.EnumerateArray())\n                        {\n                            var type = el.TryGetProperty(\"Type\", out var pType) ? pType.GetString() ?? \"\"\n                                     : el.TryGetProperty(\"type\", out var pType2) ? pType2.GetString() ?? \"\" : \"\";\n\n                            var text = el.TryGetProperty(\"Text\", out var pText) ? pText.GetString() ?? \"\"\n                                     : el.TryGetProperty(\"text\", out var pText2) ? pText2.GetString() ?? \"\" : \"\";\n\n                            // value can be ParameterValue / parameterValue / url / Url / value\n                            string? value =\n                                el.TryGetProperty(\"ParameterValue\", out var pVal1) ? pVal1.GetString() :\n                                el.TryGetProperty(\"parameterValue\", out var pVal1b) ? pVal1b.GetString() :\n                                el.TryGetProperty(\"url\", out var pVal2) ? pVal2.GetString() :\n                                el.TryGetProperty(\"Url\", out var pVal2b) ? pVal2b.GetString() :\n                                el.TryGetProperty(\"value\", out var pVal3) ? pVal3.GetString() :\n                                null;\n\n                            // order can be Index/index/Position/position; default to 1-based\n                            int order =\n                                (el.TryGetProperty(\"Index\", out var pIdx) && pIdx.ValueKind == JsonValueKind.Number) ? pIdx.GetInt32() :\n                                (el.TryGetProperty(\"index\", out var pIdx2) && pIdx2.ValueKind == JsonValueKind.Number) ? pIdx2.GetInt32() :\n                                (el.TryGetProperty(\"Position\", out var pPos) && pPos.ValueKind == JsonValueKind.Number) ? pPos.GetInt32() :\n                                (el.TryGetProperty(\"position\", out var pPos2) && pPos2.ValueKind == JsonValueKind.Number) ? pPos2.GetInt32() :\n                                (i + 1);\n\n                            meta.Buttons.Add(new DTO.TemplateButtonMeta\n                            {\n                                Type = type,\n                                Text = text,\n                                Value = value,\n                                Order = order\n                            });\n                            i++;\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogWarning(ex, \"Failed to parse ButtonsJson for template {TemplateName}\", (string)(row.Name ?? \"(unknown)\"));\n            }\n\n            return meta;\n        }\n\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs",
      "sha256": "24dec5fef8a7e43f47db71b07d2067310ec6a8bfa2004006a671f06a7be8a706",
      "language": "csharp",
      "size": 1573,
      "content": "// 📄 File: WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs\nusing FluentValidation;\nusing xbytechat_api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Validators\n{\n    public class SaveWhatsAppSettingValidator : AbstractValidator<SaveWhatsAppSettingDto>\n    {\n        public SaveWhatsAppSettingValidator()\n        {\n            RuleFor(x => x.Provider)\n                .NotEmpty().WithMessage(\"Provider is required.\")\n                .Must(p => p == \"pinnacle\" || p == \"meta_cloud\")\n                .WithMessage(\"Provider must be 'pinnacle' or 'meta_cloud'.\");\n\n            RuleFor(x => x.ApiUrl)\n                .NotEmpty().WithMessage(\"API URL is required.\");\n\n            // Meta Cloud requirements\n            When(x => x.Provider == \"meta_cloud\", () =>\n            {\n                RuleFor(x => x.ApiKey)\n                    .NotEmpty().WithMessage(\"API ApiKey is required for Meta Cloud.\");\n                RuleFor(x => x.PhoneNumberId)\n                    .NotEmpty().WithMessage(\"Phone Number ID is required for Meta Cloud.\");\n            });\n\n            // Pinbot requirements\n            When(x => x.Provider == \"pinnacle\", () =>\n            {\n                RuleFor(x => x.ApiKey)\n                    .NotEmpty().WithMessage(\"API Key is required for Pinbot.\");\n                RuleFor(x => x)\n                    .Must(x => !string.IsNullOrWhiteSpace(x.PhoneNumberId) || !string.IsNullOrWhiteSpace(x.WabaId))\n                    .WithMessage(\"Provide Phone Number ID or WABA ID for Pinbot.\");\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api.http",
      "sha256": "1bbe81fafd8a4f5140ffd5c7e14b21f6d5537372ed3c3b6315b9db805b17f2a9",
      "language": "text",
      "size": 133,
      "content": "@xbytechat.api_HostAddress = http://localhost:5295\n\nGET {{xbytechat.api_HostAddress}}/weatherforecast/\nAccept: application/json\n\n###\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Common/Utils/Idempotency.cs",
      "sha256": "ead3c94c377e056a1bc9a00a7b1d1cb697a748828ba3a42e2d88231806788770",
      "language": "csharp",
      "size": 668,
      "content": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace xbytechat.api.Common.Utils\n{\n    public static class Idempotency\n    {\n        /// <summary>\n        /// SHA256 over a canonical string. Returns lowercase hex.\n        /// </summary>\n        public static string Sha256(string canonical)\n        {\n            using var sha = SHA256.Create();\n            var bytes = Encoding.UTF8.GetBytes(canonical ?? string.Empty);\n            var hash = sha.ComputeHash(bytes);\n            var sb = new StringBuilder(hash.Length * 2);\n            foreach (var b in hash) sb.Append(b.ToString(\"x2\"));\n            return sb.ToString();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/AuditLoggingHelper.cs",
      "sha256": "c5b311d19b5c69b6b78d7ca335b984e43795ef1e140c2239dea1ed7190e188c6",
      "language": "csharp",
      "size": 1690,
      "content": "using xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.AuditTrail.Services;\n\npublic static class AuditLoggingHelper\n{\n    private static IServiceProvider? _serviceProvider;\n\n    public static void Configure(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n\n    public static void Log(\n        string actionType,\n        string? entityName,\n        string? entityId,\n        string? description,\n        IHttpContextAccessor contextAccessor)\n    {\n        if (_serviceProvider == null) return;\n\n        var scope = _serviceProvider.CreateScope();\n        var auditLogService = scope.ServiceProvider.GetRequiredService<IAuditLogService>();\n\n        var httpContext = contextAccessor.HttpContext;\n        var user = httpContext?.User;\n        var claims = user?.Identities?.FirstOrDefault();\n\n        var log = new AuditLog\n        {\n            Id = Guid.NewGuid(),\n            ActionType = actionType,\n            Description = description,\n            BusinessId = TryParseGuid(claims?.FindFirst(\"businessId\")?.Value),\n            PerformedByUserId = TryParseGuid(claims?.FindFirst(\"sub\")?.Value),\n            PerformedByUserName = claims?.FindFirst(\"email\")?.Value,\n            RoleAtTime = claims?.FindFirst(\"role\")?.Value,\n            IPAddress = httpContext?.Connection?.RemoteIpAddress?.ToString(),\n            UserAgent = httpContext?.Request?.Headers[\"User-Agent\"].ToString(),\n            CreatedAt = DateTime.UtcNow\n        };\n\n        _ = Task.Run(() => auditLogService.SaveLogAsync(log));\n    }\n\n    private static Guid TryParseGuid(string? input) =>\n        Guid.TryParse(input, out var guid) ? guid : Guid.Empty;\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/JwtCookieHelper.cs",
      "sha256": "50ed48ffead96168a429fe26398cbc9b3021ecfebafabcbba8dc8e59f9a12885",
      "language": "csharp",
      "size": 3279,
      "content": "// 📄 File: Helpers/JwtCookieHelper.cs\nusing Microsoft.AspNetCore.Http;\nusing System;\n\nnamespace xbytechat.api.Helpers\n{\n    public static class JwtCookieHelper\n    {\n        // ✅ Set Access Token (short-lived)\n        public static void SetJwtCookie(HttpContext httpContext, string cookieName, string token, int expiryHours = 12)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot set JWT cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            bool isProduction = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") == \"Production\";\n\n            httpContext.Response.Cookies.Append(cookieName, token, new CookieOptions\n            {\n                HttpOnly = true,\n                ///*Secure*/ = isProduction,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddHours(expiryHours)\n            }); ;\n        }\n\n        // ✅ Clear Access Token cookie\n        public static void ClearJwtCookie(HttpContext httpContext, string cookieName)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot clear JWT cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            httpContext.Response.Cookies.Append(cookieName, \"\", new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(-1)\n            });\n        }\n\n        // ✅ Set Refresh Token (long-lived)\n        public static void SetRefreshTokenCookie(HttpContext httpContext, string cookieName, string refreshToken, int expiryDays = 30)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot set refresh cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            bool isProduction = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") == \"Production\";\n\n            httpContext.Response.Cookies.Append(cookieName, refreshToken, new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = isProduction,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(expiryDays)\n            });\n        }\n\n        // ✅ Clear Refresh Token cookie\n        public static void ClearRefreshTokenCookie(HttpContext httpContext, string cookieName)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot clear refresh cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            httpContext.Response.Cookies.Append(cookieName, \"\", new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(-1)\n            });\n        }\n    }\n}\n"
    }
  ]
}
