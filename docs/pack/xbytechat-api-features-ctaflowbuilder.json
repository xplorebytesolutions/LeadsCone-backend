{
  "name": "xbytechat-api/Features/CTAFlowBuilder",
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Controllers/CTAFlowController.cs",
      "sha256": "ae0976baa15c4292f6fdc76a5e1b8810652df67fc18524f60eaf58037c5e4038",
      "language": "csharp",
      "size": 34615,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/cta-flow\")]\n    public class CTAFlowController : ControllerBase\n    {\n        private readonly ICTAFlowService _flowService;\n\n        public CTAFlowController(ICTAFlowService flowService)\n        {\n            _flowService = flowService;\n        }\n\n        // CREATE (draft-only)\n        [HttpPost(\"save-visual\")]\n        public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(new { message = \"‚ùå Invalid business ID\" });\n\n            Log.Information(\"üì¶ Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n            var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n            if (!result.Success)\n            {\n                var m = (result.ErrorMessage ?? \"\").Trim();\n\n                // map common validation/conflict by message text (no result.Code available)\n                if (m.Contains(\"already exists\", StringComparison.OrdinalIgnoreCase))\n                    return Conflict(new { message = \"‚ùå Duplicate flow name\", error = m });\n\n                if (m.Contains(\"required\", StringComparison.OrdinalIgnoreCase) ||\n                    m.Contains(\"empty flow\", StringComparison.OrdinalIgnoreCase) ||\n                    m.Contains(\"invalid\", StringComparison.OrdinalIgnoreCase))\n                    return BadRequest(new { message = \"‚ùå Failed to save flow\", error = m });\n\n                return StatusCode(StatusCodes.Status500InternalServerError,\n                    new { message = \"‚ùå Failed to save flow\", error = string.IsNullOrWhiteSpace(m) ? \"Unknown error\" : m });\n            }\n\n            Guid? flowId = null;\n            if (result.Data is not null)\n            {\n                try { dynamic d = result.Data; flowId = (Guid?)d.flowId; } catch { }\n            }\n\n            return Ok(new { message = \"‚úÖ Flow saved successfully\", flowId });\n        }\n\n        // PUBLISH (by id)\n        [HttpPost(\"{id:guid}/publish\")]\n        public async Task<IActionResult> Publish(Guid id)\n        {\n            var biz = User.FindFirst(\"businessId\")?.Value;\n            var user = User.FindFirst(\"name\")?.Value ?? \"system\";\n            if (!Guid.TryParse(biz, out var businessId))\n                return BadRequest(new { message = \"‚ùå Invalid business.\" });\n\n            var ok = await _flowService.PublishFlowAsync(id, businessId, user);\n            return ok ? Ok(new { message = \"‚úÖ Flow published.\" }) : NotFound(new { message = \"‚ùå Flow not found.\" });\n        }\n\n        // DELETE (only if not attached)\n        [HttpDelete(\"{id:guid}\")]\n        public async Task<IActionResult> Delete(Guid id)\n        {\n            var biz = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(biz, out var businessId))\n                return BadRequest(new { message = \"‚ùå Invalid business.\" });\n\n            var deletedBy = User.FindFirst(\"name\")?.Value\n                          ?? User.FindFirst(\"email\")?.Value\n                          ?? User.FindFirst(\"sub\")?.Value\n                          ?? \"system\";\n\n            var result = await _flowService.DeleteFlowAsync(id, businessId, deletedBy);\n\n            if (!result.Success)\n            {\n                var msg = (result.ErrorMessage ?? result.Message ?? string.Empty).Trim();\n\n                // If message says it's attached, return 409 and include campaigns for the modal\n                if (msg.Contains(\"attached\", StringComparison.OrdinalIgnoreCase) ||\n                    msg.Contains(\"Cannot delete\", StringComparison.OrdinalIgnoreCase))\n                {\n                    var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);\n                    return Conflict(new { message = msg, campaigns });\n                }\n\n                if (msg.Contains(\"not found\", StringComparison.OrdinalIgnoreCase))\n                    return NotFound(new { message = msg });\n\n                return BadRequest(new { message = string.IsNullOrWhiteSpace(msg) ? \"Delete failed.\" : msg });\n            }\n\n            return Ok(new { message = result.Message ?? \"‚úÖ Flow deleted.\" });\n        }\n\n        // LISTS\n        [HttpGet(\"all-published\")]\n        public async Task<IActionResult> GetPublishedFlows()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(new { message = \"‚ùå Invalid business ID\" });\n\n            var flows = await _flowService.GetAllPublishedFlowsAsync(businessId);\n            return Ok(flows);\n        }\n\n        [HttpGet(\"all-draft\")]\n        public async Task<IActionResult> GetAllDraftFlows()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(new { message = \"‚ùå Invalid business ID\" });\n\n            var flows = await _flowService.GetAllDraftFlowsAsync(businessId);\n            return Ok(flows);\n        }\n\n        // DETAIL\n        [HttpGet(\"by-id/{id:guid}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(new { message = \"‚ùå Invalid business ID\" });\n\n            var dto = await _flowService.GetVisualFlowByIdAsync(id, businessId);\n            if (dto is null) return NotFound(new { message = \"‚ùå Flow not found.\" });\n\n            return Ok(dto);\n        }\n\n        [HttpGet(\"visual/{id:guid}\")]\n        public async Task<IActionResult> GetVisualFlow(Guid id)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(new { message = \"‚ùå Invalid business ID\" });\n\n            var result = await _flowService.GetVisualFlowAsync(id, businessId);\n            if (!result.Success)\n            {\n                var m = (result.ErrorMessage ?? string.Empty).Trim();\n                if (m.Contains(\"not found\", StringComparison.OrdinalIgnoreCase))\n                    return NotFound(new { message = \"‚ùå Failed to load flow\", error = m });\n\n                return StatusCode(StatusCodes.Status500InternalServerError,\n                    new { message = \"‚ùå Failed to load flow\", error = string.IsNullOrWhiteSpace(m) ? \"Unknown error\" : m });\n            }\n\n            return Ok(result.Data);\n        }\n\n        // USAGE (for delete guard)\n        [HttpGet(\"{id:guid}/usage\")]\n        public async Task<IActionResult> GetUsage(Guid id)\n        {\n            var biz = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(biz, out var businessId))\n                return BadRequest(new { message = \"Invalid business.\" });\n\n            var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);\n            return Ok(new\n            {\n                canDelete = campaigns.Count == 0,\n                count = campaigns.Count,\n                campaigns\n            });\n        }\n    }\n}\n\n\n//// üìÑ File: Features/CTAFlowBuilder/Controllers/CTAFlowController.cs\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using Microsoft.EntityFrameworkCore;\n//using Serilog;\n//using xbytechat.api.Features.CTAFlowBuilder.DTOs;\n//using xbytechat.api.Features.CTAFlowBuilder.Models;\n//using xbytechat.api.Features.CTAFlowBuilder.Services;\n//using xbytechat.api.Features.MessagesEngine.DTOs;\n//using xbytechat.api.Features.MessagesEngine.Services;\n//using xbytechat.api.Features.Tracking.Models;\n//using xbytechat.api.Features.Tracking.Services;\n//using xbytechat.api.Helpers;\n//using xbytechat.api.Shared;\n\n\n//namespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/cta-flow\")]\n//    public class CTAFlowController : ControllerBase\n//    {\n//        private readonly ICTAFlowService _flowService;\n//        private readonly IMessageEngineService _messageEngineService;\n//        private readonly ITrackingService _trackingService;\n//        public CTAFlowController(ICTAFlowService flowService, IMessageEngineService messageEngineService, ITrackingService trackingService)\n//        {\n//            _flowService = flowService;\n//            _messageEngineService = messageEngineService;\n//            _trackingService = trackingService;\n//        }\n\n//        [HttpPost(\"create\")]\n//        public async Task<IActionResult> CreateFlow([FromBody] CreateFlowDto dto)\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"‚ùå Invalid or missing businessId claim.\");\n\n//            var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);\n//            return Ok(new { flowId = id });\n//        }\n\n//        //[HttpPost(\"publish\")]\n//        //public async Task<IActionResult> PublishFlow([FromBody] List<FlowStepDto> steps)\n//        //{\n//        //    var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//        //    var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//        //    if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n//        //        return BadRequest(\"‚ùå Invalid or missing businessId claim.\");\n\n//        //    var result = await _flowService.PublishFlowAsync(businessId, steps, createdBy);\n//        //    if (!result.Success)\n//        //        return BadRequest(result.Message);\n\n//        //    return Ok(\"‚úÖ Flow published successfully.\");\n//        //}\n\n//        [HttpGet(\"current\")]\n//        public async Task<IActionResult> GetFlow()\n//        {\n//            var businessIdHeader = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdHeader, out var businessId))\n//                return BadRequest(\"‚ùå Invalid or missing BusinessId header.\");\n\n//            var flow = await _flowService.GetFlowByBusinessAsync(businessId);\n\n//            // ‚úÖ Always return 200 even if flow is null\n//            return Ok(flow);\n//        }\n\n//        [HttpGet(\"draft\")]\n//        public async Task<IActionResult> GetDraftFlow()\n//        {\n//            var businessIdHeader = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdHeader, out var businessId))\n//                return BadRequest(\"‚ùå Invalid or missing BusinessId header.\");\n\n//            var draft = await _flowService.GetDraftFlowByBusinessAsync(businessId);\n//            if (draft == null)\n//                return NotFound(\"‚ùå No draft flow found.\");\n\n//            return Ok(draft);\n//        }\n\n//        [HttpGet(\"match\")]\n//        public async Task<IActionResult> MatchButton(\n//            [FromQuery] string text,\n//            [FromQuery] string type,\n//            [FromQuery] string currentTemplateName,\n//            [FromQuery] Guid? campaignId) // Optional\n//        {\n//            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value!);\n\n//            var step = await _flowService.MatchStepByButtonAsync(\n//                businessId,\n//                text,\n//                type,\n//                currentTemplateName,\n//                campaignId\n//            );\n\n//            if (step == null)\n//                return NotFound(\"‚ùå No matching step found.\");\n\n//            return Ok(new\n//            {\n//                step.TemplateToSend,\n//                step.TriggerButtonText,\n//                step.TriggerButtonType\n//            });\n//        }\n\n//        //[HttpPost(\"save-visual\")]\n//        //public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n//        //{\n//        //    var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//        //    var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//        //    if (!Guid.TryParse(businessIdClaim, out var businessId))\n//        //        return BadRequest(\"‚ùå Invalid business ID\");\n\n//        //    Log.Information(\"üì¶ Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n//        //    var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n//        //    if (!result.Success)\n//        //    {\n//        //        Log.Error(\"‚ùå Failed to save flow. Error: {Error}. DTO: {@Dto}\", result.ErrorMessage, dto);\n//        //        return StatusCode(500, new\n//        //        {\n//        //            message = \"‚ùå Failed to save flow\",\n//        //            error = result.ErrorMessage,\n//        //            // skipped = result.SkippedNodes ?? 0\n//        //        });\n//        //    }\n\n//        //    return Ok(new\n//        //    {\n//        //        message = \"‚úÖ Flow saved successfully\"\n//        //    });\n//        //}\n\n//        //[HttpPost(\"save-visual\")]\n//        //public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n//        //{\n//        //    var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//        //    var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//        //    if (!Guid.TryParse(businessIdClaim, out var businessId))\n//        //        return BadRequest(\"‚ùå Invalid business ID\");\n\n//        //    Log.Information(\"üì¶ Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n//        //    var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n//        //    if (!result.Success)\n//        //    {\n//        //        Log.Error(\"‚ùå Failed to save flow. Error: {Error}. DTO: {@Dto}\", result.ErrorMessage, dto);\n//        //        return StatusCode(500, new\n//        //        {\n//        //            message = \"‚ùå Failed to save flow\",\n//        //            error = result.ErrorMessage\n//        //        });\n//        //    }\n\n//        //    // Try to extract flowId from the service result (supports several shapes).\n//        //    Guid? flowId = null;\n//        //    try\n//        //    {\n//        //        switch (result.Data)\n//        //        {\n//        //            case Guid g:\n//        //                flowId = g;\n//        //                break;\n\n//        //            case string s when Guid.TryParse(s, out var gs):\n//        //                flowId = gs;\n//        //                break;\n\n//        //            case { } obj:\n//        //                // look for a property literally named \"flowId\"\n//        //                var prop = obj.GetType().GetProperty(\"flowId\")\n//        //                           ?? obj.GetType().GetProperty(\"FlowId\");\n//        //                if (prop?.GetValue(obj) is Guid pg)\n//        //                    flowId = pg;\n//        //                else if (prop?.GetValue(obj) is string ps && Guid.TryParse(ps, out var pgs))\n//        //                    flowId = pgs;\n//        //                break;\n//        //        }\n//        //    }\n//        //    catch\n//        //    {\n//        //        // non-fatal: just return without flowId if reflection fails\n//        //    }\n\n//        //    return Ok(new\n//        //    {\n//        //        message = \"‚úÖ Flow saved successfully\",\n//        //        flowId\n//        //    });\n//        //}\n//        // POST /api/cta-flow/save-visual\n//        // xbytechat.api/Features/CTAFlowBuilder/Controllers/CTAFlowController.cs\n//        [HttpPost(\"save-visual\")]\n//        public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"‚ùå Invalid business ID\");\n\n//            Log.Information(\"üì¶ Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n//            var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n\n//            // Helper: classify error message to proper HTTP status\n//            IActionResult ErrorToHttp(string? msg)\n//            {\n//                var m = (msg ?? \"\").Trim();\n\n//                // Validation problems ‚Üí 400\n//                if (m.Contains(\"Flow name is required\", StringComparison.OrdinalIgnoreCase) ||\n//                    m.Contains(\"Cannot save an empty flow\", StringComparison.OrdinalIgnoreCase) ||\n//                    m.Contains(\"invalid\", StringComparison.OrdinalIgnoreCase))\n//                {\n//                    Log.Warning(\"‚ö†Ô∏è Validation error while saving flow: {Error}\", m);\n//                    return BadRequest(new { message = \"‚ùå Failed to save flow\", error = m });\n//                }\n\n//                // Duplicate name on create ‚Üí 409 (frontend will open rename modal)\n//                if (m.Contains(\"already exists\", StringComparison.OrdinalIgnoreCase))\n//                {\n//                    Log.Warning(\"‚ö†Ô∏è Duplicate flow name when creating: {Error}\", m);\n//                    return StatusCode(StatusCodes.Status409Conflict, new\n//                    {\n//                        message = \"‚ùå Duplicate flow name\",\n//                        error = m\n//                        // intentionally no 'campaigns' array here (FE uses presence of it to show fork modal)\n//                    });\n//                }\n\n//                // Unknown ‚Üí 500\n//                Log.Error(\"‚ùå Failed to save flow. Error: {Error}. DTO: {@Dto}\", m, dto);\n//                return StatusCode(StatusCodes.Status500InternalServerError, new\n//                {\n//                    message = \"‚ùå Failed to save flow\",\n//                    error = string.IsNullOrWhiteSpace(m) ? \"Unknown error\" : m\n//                });\n//            }\n\n//            if (!result.Success)\n//                return ErrorToHttp(result.ErrorMessage);\n\n//            // Expect service to put { flowId = <Guid> } into result.Data\n//            Guid? flowId = null;\n//            if (result.Data is not null)\n//            {\n//                try\n//                {\n//                    if (result.Data is IDictionary<string, object> dict\n//                        && dict.TryGetValue(\"flowId\", out var obj) && obj is Guid g1)\n//                    {\n//                        flowId = g1;\n//                    }\n//                    else\n//                    {\n//                        // dynamic fallback\n//                        dynamic d = result.Data;\n//                        flowId = (Guid?)d.flowId;\n//                    }\n//                }\n//                catch\n//                {\n//                    // ignore shape issues; flowId stays null\n//                }\n//            }\n\n//            return Ok(new\n//            {\n//                message = \"‚úÖ Flow saved successfully\",\n//                flowId\n//            });\n//        }\n\n\n//        //[HttpPost(\"save-visual\")]\n//        //public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n//        //{\n//        //    var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//        //    var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//        //    if (!Guid.TryParse(businessIdClaim, out var businessId))\n//        //        return BadRequest(\"‚ùå Invalid business ID\");\n\n//        //    Log.Information(\"üì¶ Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n//        //    var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n//        //    if (!result.Success)\n//        //    {\n//        //        Log.Error(\"‚ùå Failed to save flow. Error: {Error}. DTO: {@Dto}\", result.ErrorMessage, dto);\n//        //        return StatusCode(500, new\n//        //        {\n//        //            message = \"‚ùå Failed to save flow\",\n//        //            error = result.ErrorMessage\n//        //        });\n//        //    }\n\n//        //    // Expect service to put { flowId = <Guid> } into result.Data\n//        //    Guid? flowId = null;\n//        //    if (result.Data is not null)\n//        //    {\n//        //        try\n//        //        {\n//        //            // Support anonymous object or dictionary\n//        //            var dict = result.Data as IDictionary<string, object>;\n//        //            if (dict != null && dict.TryGetValue(\"flowId\", out var obj) && obj is Guid g1)\n//        //                flowId = g1;\n//        //            else\n//        //            {\n//        //                // dynamic fallback\n//        //                dynamic d = result.Data;\n//        //                flowId = (Guid?)d.flowId;\n//        //            }\n//        //        }\n//        //        catch { /* ignore shape issues; flowId stays null */ }\n//        //    }\n\n//        //    return Ok(new\n//        //    {\n//        //        message = \"‚úÖ Flow saved successfully\",\n//        //        flowId\n//        //    });\n//        //}\n\n//        [HttpGet(\"{id:guid}/usage\")]\n//        public async Task<IActionResult> GetUsage(Guid id)\n//        {\n//            var biz = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(biz, out var businessId)) return BadRequest(new { message = \"Invalid business.\" });\n\n//            var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);\n//            return Ok(new\n//            {\n//                canDelete = campaigns.Count == 0,\n//                count = campaigns.Count,\n//                campaigns\n//            });\n//        }\n\n//        //[HttpDelete(\"{id:guid}\")]\n//        //public async Task<IActionResult> Delete(Guid id)\n//        //{\n//        //    var biz = User.FindFirst(\"businessId\")?.Value;\n//        //    if (!Guid.TryParse(biz, out var businessId)) return BadRequest(new { message = \"Invalid business.\" });\n\n//        //    // Try hard delete\n//        //    var deleted = await _flowService.HardDeleteFlowIfUnusedAsync(id, businessId);\n//        //    if (deleted) return NoContent();\n\n//        //    // If not deleted, return 409 with who‚Äôs attached\n//        //    var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);\n//        //    if (campaigns.Count > 0)\n//        //    {\n//        //        return Conflict(new\n//        //        {\n//        //            message = \"Flow is attached to the following campaign(s). Delete them first, then delete the flow.\",\n//        //            campaigns\n//        //        });\n//        //    }\n\n//        //    // Not found (wrong tenant or already deleted)\n//        //    return NotFound(new { message = \"Flow not found.\" });\n//        //}\n//        // KEEP ONLY THIS ONE DELETE ENDPOINT\n\n//        [HttpDelete(\"{id:guid}\")]\n//        public async Task<IActionResult> Delete(Guid id)\n//        {\n//            var biz = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(biz, out var businessId))\n//                return BadRequest(new { message = \"‚ùå Invalid business.\" });\n\n//            // who is deleting (audit)\n//            var deletedBy = User.FindFirst(\"name\")?.Value\n//                          ?? User.FindFirst(\"email\")?.Value\n//                          ?? User.FindFirst(\"sub\")?.Value\n//                          ?? \"system\";\n\n//            // Use your service that understands attachment rules and returns codes\n//            var result = await _flowService.DeleteFlowAsync(id, businessId, deletedBy);\n\n//            // Frontend expects 409 to show the modal with attached campaigns\n//            if (!result.Success && result.Code == 409)\n//                return Conflict(new { message = result.Message, campaigns = result.Payload });\n\n//            if (!result.Success && result.Code == 404)\n//                return NotFound(new { message = result.Message });\n\n//            if (!result.Success)\n//                return BadRequest(new { message = result.Message });\n\n//            // FE treats 200 or 204 as success ‚Äî return 200 with a message\n//            return Ok(new { message = result.Message });\n//        }\n\n\n\n//        [HttpGet(\"all-published\")]\n//        public async Task<IActionResult> GetPublishedFlows()\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"‚ùå Invalid business ID\");\n\n//            var flows = await _flowService.GetAllPublishedFlowsAsync(businessId);\n//            return Ok(flows);\n//        }\n//        [HttpGet(\"all-draft\")]\n//        public async Task<IActionResult> GetAllDraftFlows()\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"‚ùå Invalid business ID\");\n\n//            var flows = await _flowService.GetAllDraftFlowsAsync(businessId);\n//            return Ok(flows);\n//        }\n\n\n//        [HttpPost(\"execute-visual\")]\n//        public async Task<IActionResult> ExecuteVisualFlowAsync(\n//            [FromQuery] Guid nextStepId,\n//            [FromQuery] Guid trackingLogId,\n//            // ‚úÖ 1. ADD the new optional parameter to the endpoint\n//            [FromQuery] Guid? campaignSendLogId = null)\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"‚ùå Invalid business ID\");\n\n//            // ‚úÖ 2. PASS the new parameter to the service call\n//            var result = await _flowService.ExecuteVisualFlowAsync(businessId, nextStepId, trackingLogId, campaignSendLogId);\n\n//            if (result.Success)\n//                return Ok(result);\n//            else\n//                return BadRequest(result);\n//        }\n\n//        [HttpPost(\"create-config\")]\n//        public async Task<IActionResult> CreateConfigFlow([FromBody] CreateFlowDto dto)\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"‚ùå Invalid or missing businessId claim.\");\n\n//            try\n//            {\n//                var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);\n\n//                return Ok(new\n//                {\n//                    flowId = id,\n//                    message = \"‚úÖ Flow config created successfully.\"\n//                });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new\n//                {\n//                    error = \"‚ùå Failed to create flow config.\",\n//                    details = ex.Message\n//                });\n//            }\n//        }\n\n//        [HttpGet(\"by-id/{id:guid}\")]\n//        public async Task<IActionResult> GetById(Guid id)\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"‚ùå Invalid business ID\");\n\n//            // Prefer a tenant-aware service method\n//            var dto = await _flowService.GetVisualFlowByIdAsync(id, businessId);\n//            if (dto is null) return NotFound(\"‚ùå Flow not found.\");\n\n//            return Ok(dto); // { flowName, isPublished, nodes, edges } (camelCase via default JSON options)\n//        }\n\n//        // üìç Add this to your CTAFlowController\n//        // CTAFlowController.cs  ‚Äî drop-in replacement for \"get visual flow\" endpoint\n//        [HttpGet(\"visual/{id:guid}\")]\n//        public async Task<IActionResult> GetVisualFlow(Guid id)\n//        {\n//            // business guard\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(new { message = \"‚ùå Failed to load flow\", error = \"Invalid business ID\" });\n\n//            // ask the service ‚Äî this RETURNS YOUR ResponseResult, not a DTO\n//            var result = await _flowService.GetVisualFlowAsync(id, businessId);\n\n//            // Uniform error mapping (same style you use in SaveVisualFlow)\n//            if (!result.Success)\n//            {\n//                var m = (result.ErrorMessage ?? string.Empty).Trim();\n\n//                if (m.Contains(\"not found\", StringComparison.OrdinalIgnoreCase))\n//                {\n//                    // 404 when flow id doesn‚Äôt exist / not visible for biz\n//                    return NotFound(new { message = \"‚ùå Failed to load flow\", error = m });\n//                }\n\n//                if (m.Contains(\"forbidden\", StringComparison.OrdinalIgnoreCase) ||\n//                    m.Contains(\"unauthorized\", StringComparison.OrdinalIgnoreCase))\n//                {\n//                    // 403 when biz is not allowed to see this flow\n//                    return StatusCode(StatusCodes.Status403Forbidden,\n//                        new { message = \"‚ùå Failed to load flow\", error = m });\n//                }\n\n//                // default ‚Üí 500\n//                return StatusCode(StatusCodes.Status500InternalServerError,\n//                    new { message = \"‚ùå Failed to load flow\", error = string.IsNullOrWhiteSpace(m) ? \"Unknown error\" : m });\n//            }\n\n//            // SUCCESS: your service already builds the payload (FlowName, IsPublished, Nodes, Edges, etc.)\n//            // Just return it as-is so the FE can consume it.\n//            // Example shape expected by FE:\n//            // { flowName, isPublished, nodes: [...], edges: [...] }\n//            return Ok(result.Data);\n//        }\n\n\n//        //[HttpPut(\"{id:guid}\")]\n//        //public async Task<IActionResult> Update(Guid id, [FromBody] SaveVisualFlowDto dto)\n//        //{\n//        //    var biz = User.FindFirst(\"businessId\")?.Value;\n//        //    var user = User.FindFirst(\"name\")?.Value ?? \"system\";\n//        //    if (!Guid.TryParse(biz, out var businessId)) return BadRequest(\"‚ùå Invalid business.\");\n\n//        //    var result = await _flowService.UpdateVisualFlowAsync(id, dto, businessId, user);\n//        //    return result.Status switch\n//        //    {\n//        //        \"ok\" => Ok(new { message = \"Flow updated.\", needsRepublish = result.NeedsRepublish }),\n//        //        \"requiresFork\" => Conflict(new { message = result.Message, campaigns = result.Campaigns, requiresFork = true }),\n//        //        \"notFound\" => NotFound(\"‚ùå Flow not found.\"),\n//        //        _ => BadRequest(new { message = result.Message ?? \"Unknown error\" })\n//        //    };\n//        //}\n\n\n//        [HttpPost(\"{id:guid}/publish\")]\n//        public async Task<IActionResult> Publish(Guid id)\n//        {\n//            var biz = User.FindFirst(\"businessId\")?.Value;\n//            var user = User.FindFirst(\"name\")?.Value ?? \"system\";\n//            if (!Guid.TryParse(biz, out var businessId)) return BadRequest(\"‚ùå Invalid business.\");\n\n//            var ok = await _flowService.PublishFlowAsync(id, businessId, user);\n//            return ok ? Ok(new { message = \"‚úÖ Flow published.\" }) : NotFound(\"‚ùå Flow not found.\");\n//        }\n\n\n//        //// üëá NEW: publish\n//        //[HttpPost(\"{id:guid}/publish\")]\n//        //public async Task<IActionResult> Publish(Guid id)\n//        //{\n//        //    var biz = User.FindFirst(\"businessId\")?.Value;\n//        //    var user = User.FindFirst(\"name\")?.Value ?? \"system\";\n//        //    if (!Guid.TryParse(biz, out var businessId)) return BadRequest(\"‚ùå Invalid business.\");\n\n//        //    var ok = await _flowService.PublishFlowAsync(id, businessId, user);\n//        //    return ok ? Ok(new { message = \"‚úÖ Flow published.\" }) : NotFound(\"‚ùå Flow not found.\");\n//        //}\n\n\n\n//        // üëá NEW: fork (create new draft from live-locked flow)\n//        [HttpPost(\"{id:guid}/fork\")]\n//        public async Task<IActionResult> Fork(Guid id)\n//        {\n//            var biz = User.FindFirst(\"businessId\")?.Value;\n//            var user = User.FindFirst(\"name\")?.Value ?? \"system\";\n//            if (!Guid.TryParse(biz, out var businessId)) return BadRequest(\"‚ùå Invalid business.\");\n\n//            var forkId = await _flowService.ForkFlowAsync(id, businessId, user);\n//            if (forkId == Guid.Empty) return NotFound(\"‚ùå Flow not found.\");\n//            return Ok(new { flowId = forkId });\n//        }\n\n//        // üëá BACK-COMPAT: keep existing delete route AND add /{id}\n//       // [HttpDelete(\"{id:guid}\")]\n//        //public async Task<IActionResult> DeletePlain(Guid id)\n//        //{\n//        //    var biz = User.FindFirst(\"businessId\")?.Value;\n//        //    if (!Guid.TryParse(biz, out var businessId))\n//        //        return BadRequest(\"‚ùå Invalid business ID\");\n\n//        //    // Capture the user performing the delete\n//        //    var deletedBy = User.FindFirst(\"name\")?.Value\n//        //                 ?? User.FindFirst(\"email\")?.Value\n//        //                 ?? User.FindFirst(\"sub\")?.Value\n//        //                 ?? \"system\";\n\n//        //    var result = await _flowService.DeleteFlowAsync(id, businessId, deletedBy);\n\n//        //    if (!result.Success && result.Code == 409)\n//        //        return Conflict(new { message = result.Message, campaigns = result.Payload });\n\n//        //    if (!result.Success && result.Code == 404)\n//        //        return NotFound(new { message = result.Message });\n\n//        //    if (!result.Success)\n//        //        return BadRequest(new { message = result.Message });\n\n//        //    return Ok(new { message = result.Message });\n//        //}\n\n//    }\n\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Controllers/FlowRedirectController.cs",
      "sha256": "8d5442a0a0fdb92dc7d69837cd74af882b22c6cf35ce999a7b87bfde5b27e7ca",
      "language": "csharp",
      "size": 2686,
      "content": "// üìÑ Features/CTAFlowBuilder/Controllers/FlowRedirectController.cs\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Infrastructure.Flows;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing Microsoft.AspNetCore.Authorization;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"r/flow\")]\n    public class FlowRedirectController : ControllerBase\n    {\n        private readonly IFlowClickTokenService _tokens;\n        private readonly ICTAFlowService _flows;           // service to read flow steps/links\n        private readonly IFlowRuntimeService _runtime;     // service to execute next step\n\n        public FlowRedirectController(\n            IFlowClickTokenService tokens,\n            ICTAFlowService flows,\n            IFlowRuntimeService runtime)\n        {\n            _tokens = tokens;\n            _flows = flows;\n            _runtime = runtime;\n        }\n\n        [HttpGet(\"{token}\")]\n        [AllowAnonymous] // secure by token, tenant checks inside\n        public async Task<IActionResult> RedirectByToken(string token)\n        {\n            FlowClickPayload p;\n            try\n            {\n                p = _tokens.Validate(token);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest($\"Invalid or expired token: {ex.Message}\");\n            }\n\n            // üîí Tenant isolation: make sure the business in the token matches the current request context\n            // (if you have multi-tenant enforcement middleware, call it here)\n\n            // 1) Resolve the button link\n            var link = await _flows.GetLinkAsync(p.fid, p.sid, p.bi);\n            if (link is null)\n                return NotFound(\"Link not found for this flow step\");\n\n            var requestId = Guid.NewGuid(); // for idempotency\n            var exec = await _runtime.ExecuteNextAsync(new NextStepContext\n            {\n                BusinessId = p.biz,\n                FlowId = p.fid,\n                Version = p.ver,\n                SourceStepId = p.sid,\n                TargetStepId = link.NextStepId, // may be null ‚Üí terminal\n                ButtonIndex = p.bi,\n                MessageLogId = p.mlid,\n                ContactPhone = p.cp,\n                RequestId = requestId,\n\n                // üÜï Pass the clicked button for runtime decision\n                ClickedButton = link\n            });\n\n\n            // 3) Redirect the user\n            // If button was a URL, use that; else go to a generic \"thank you\" page\n            var dest = exec.RedirectUrl ?? \"/thank-you\";\n            return Redirect(dest);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/AttachedCampaignDto.cs",
      "sha256": "0d3666aab91197bf746299620d01d22712744acbbcb28b0a787a8e399eaf123f",
      "language": "csharp",
      "size": 341,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public sealed record AttachedCampaignDto(\n        Guid Id,\n        string Name,\n        string Status,\n        DateTime? ScheduledAt,\n        DateTime CreatedAt,\n        string? CreatedBy,\n        DateTime? FirstSentAt   // earliest non-null SentAt from CampaignSendLogs\n    );\n\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs",
      "sha256": "c23400a06816a2adc8886fa8d20dd77f12b8b93f993b5a772d81cb12d6612a1f",
      "language": "csharp",
      "size": 897,
      "content": "// üìÑ File: xbytechat.api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs\nnamespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CreateFlowDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public List<FlowStepDto> Steps { get; set; } = new();\n        public bool IsPublished { get; set; } = false; // ‚úÖ NEW: Draft vs Published\n    }\n\n    public class FlowStepDto\n    {\n        public string TriggerButtonText { get; set; } = string.Empty;\n        public string TriggerButtonType { get; set; } = string.Empty;\n        public string TemplateToSend { get; set; } = string.Empty;\n        public int StepOrder { get; set; }\n        public List<ButtonLinkDto> ButtonLinks { get; set; } = new();\n    }\n\n    public class ButtonLinkDto\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid NextStepId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CTAButtonClickDto.cs",
      "sha256": "da355d853887193eb1d2b3e3fafcf076e6df764f0220cbf10f5c050d42b91df6",
      "language": "csharp",
      "size": 432,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CTAButtonClickDto\n    {\n        [Required]\n        public string ButtonText { get; set; } = string.Empty;\n\n        [Required]\n        public string ButtonType { get; set; } = \"cta\"; // e.g., \"quick_reply\", \"url\", etc.\n\n        [Required]\n        public string RecipientNumber { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CTAFlowExecutionRequest.cs",
      "sha256": "43fc0e1c1674d188b1a5385539f1314176ff81449d4547ea6665df9909a223bb",
      "language": "csharp",
      "size": 297,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CTAFlowExecutionRequest\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public string ButtonType { get; set; } = \"cta\";\n        public string RecipientNumber { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowEdgeDto.cs",
      "sha256": "27e76e22a8aba502d5727d9959bec58ea011d2a1f0d4388a141bfa8108043eea",
      "language": "csharp",
      "size": 272,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class FlowEdgeDto\n    {\n        public string FromNodeId { get; set; } = string.Empty;\n        public string ToNodeId { get; set; } = string.Empty;\n        public string? SourceHandle { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowNodeDto.cs",
      "sha256": "93c74e7a37bfe6a0a4538a39a3a942b2cf1c38fd11747714ba384590a18e2ec5",
      "language": "csharp",
      "size": 1221,
      "content": "    namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class FlowNodeDto\n    {\n        public string Id { get; set; } = string.Empty;\n\n        public string TemplateName { get; set; } = string.Empty;\n        public string? TemplateType { get; set; } // ‚úÖ e.g., \"image_template\", \"text_template\"\n        public string MessageBody { get; set; } = string.Empty;\n        public string? TriggerButtonText { get; set; }\n        public string? TriggerButtonType { get; set; }\n        public float PositionX { get; set; }\n        public float PositionY { get; set; }\n\n        public string? RequiredTag { get; set; }         \n        public string? RequiredSource { get; set; }      \n        public List<LinkButtonDto> Buttons { get; set; } = new();\n        public bool UseProfileName { get; set; }\n        public int? ProfileNameSlot { get; set; }\n        //(for flow trigger mapping)\n        // ‚úÖ NEW: ReactFlow expects this structure\n        public PositionDto Position => new PositionDto\n        {\n            x = PositionX,\n            y = PositionY\n        };\n        public class PositionDto\n        {\n            public float x { get; set; }\n            public float y { get; set; }\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowUpdateResult.cs",
      "sha256": "54f722166617e3353652e949aa4a89c87878d4a1d30d2e208a1fb816668d0dde",
      "language": "csharp",
      "size": 443,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public sealed class FlowUpdateResult\n    {\n        // ok | requiresFork | notFound | error\n        public string Status { get; set; } = \"ok\";\n        public string? Message { get; set; }\n        public bool NeedsRepublish { get; set; } // true when we flipped published->draft to allow editing\n        public object? Campaigns { get; set; }   // list for UI when requiresFork\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/LinkButtonDto.cs",
      "sha256": "e02e2c927a96e1e02c0537fb205fd7595289bdfaa9de15c0d7a55de64a90fbc5",
      "language": "csharp",
      "size": 522,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class LinkButtonDto\n    {\n        public string Text { get; set; } = string.Empty;\n        public int Index { get; set; } = -1;\n        public string? Type { get; set; } // üî• e.g., \"URL\", \"QUICK_REPLY\"\n        public string? SubType { get; set; } // üî• e.g., \"STATIC\", \"DYNAMIC\"\n        public string? Value { get; set; } // üî• the parameter or url or payload\n\n        public string? TargetNodeId { get; set; } // üîÑ used for flow linking\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/SaveVisualFlowDto.cs",
      "sha256": "7de59d222a97efeaf9dc23dea2ef351d852087539cec12e7c946b02e11f1bd21",
      "language": "csharp",
      "size": 403,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class SaveVisualFlowDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n\n        public List<FlowNodeDto> Nodes { get; set; } = new();\n        public List<FlowEdgeDto> Edges { get; set; } = new();\n        public Guid? CampaignId { get; set; } // ‚úÖ Add this line\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/VisualFlowLoadDto.cs",
      "sha256": "10bfe378ffd4c8fb74a0746f2abafec88897072e7a974d680396bde281aaf4af",
      "language": "csharp",
      "size": 289,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class VisualFlowLoadDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public List<FlowNodeDto> Nodes { get; set; } = new();\n        public List<FlowEdgeDto> Edges { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/VisualFlowSummaryDto.cs",
      "sha256": "70dcedd3219a474a4b38927e0f0fd4ff3e21ba16632d409f146a9d0d60d685a5",
      "language": "csharp",
      "size": 300,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class VisualFlowSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowClickLog.cs",
      "sha256": "ecbd408e613e8ef88e2bb39fdf60bc188163e209d8242317203dfb2bff8cebb8",
      "language": "csharp",
      "size": 104,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    public class CTAFlowClickLog\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs",
      "sha256": "a36019c3ace9f06dcc785152a4ea8e2acc280b169f9e831a28fd6efd2f9d2551",
      "language": "csharp",
      "size": 3404,
      "content": "// üìÑ File: xbytechat.api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Represents a complete flow configuration for a business, such as \"Interested Journey\".\n    /// </summary>\n    public class CTAFlowConfig\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string FlowName { get; set; } = string.Empty;\n\n        public bool IsActive { get; set; } = true;\n\n        public bool IsPublished { get; set; } = false; // ‚úÖ NEW: Support draft/published\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public string? CreatedBy { get; set; }\n        public DateTime? UpdatedAt { get; set; }  // ‚úÖ Add this line\n\n        // üîÅ Navigation to steps\n        public ICollection<CTAFlowStep> Steps { get; set; } = new List<CTAFlowStep>();\n    }\n}\n\n// üìÑ File: xbytechat.api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs\n//using System.ComponentModel.DataAnnotations;\n//using System.Text.Json.Serialization;\n//using Microsoft.EntityFrameworkCore;\n\n//namespace xbytechat.api.Features.CTAFlowBuilder.Models\n//{\n//    /// <summary>\n//    /// Represents a complete flow configuration for a business, such as \"Interested Journey\".\n//    /// </summary>\n//    [Index(nameof(BusinessId), nameof(IsActive), nameof(FlowName), Name = \"ix_ctaflowconfigs_biz_active_name\")]\n//    [Index(nameof(BusinessId), nameof(IsPublished), Name = \"ix_ctaflowconfigs_biz_published\")]\n//    public class CTAFlowConfig\n//    {\n//        [Key]\n//        public Guid Id { get; set; }\n\n//        [Required]\n//        public Guid BusinessId { get; set; }\n\n//        [Required, MaxLength(100)]\n//        public string FlowName { get; set; } = string.Empty;\n\n//        /// <summary>\n//        /// Soft ‚Äúenabled/disabled‚Äù flag for listing/selection. We still hard-delete unused flows on request.\n//        /// </summary>\n//        public bool IsActive { get; set; } = true;\n\n//        /// <summary>\n//        /// Draft vs published for the builder.\n//        /// </summary>\n//        public bool IsPublished { get; set; } = false;\n\n//        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n//        public string? CreatedBy { get; set; }\n\n//        /// <summary>\n//        /// Last modification timestamp (updated in service on edits).\n//        /// </summary>\n//        public DateTime? UpdatedAt { get; set; }\n\n//        /// <summary>\n//        /// Optimistic concurrency token to avoid race conditions (e.g., editing while someone tries to delete).\n//        /// </summary>\n//        [Timestamp]\n//        public byte[]? RowVersion { get; set; }\n\n//        // üîÅ Navigation to steps\n//        // Cascade delete is configured in OnModelCreating:\n//        // modelBuilder.Entity<CTAFlowConfig>()\n//        //   .HasMany(f => f.Steps).WithOne(s => s.Flow)\n//        //   .HasForeignKey(s => s.FlowId)\n//        //   .OnDelete(DeleteBehavior.Cascade);\n//        [JsonIgnore] // prevent huge payloads if you serialize configs somewhere else\n//        public ICollection<CTAFlowStep> Steps { get; set; } = new List<CTAFlowStep>();\n//    }\n//}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowStep.cs",
      "sha256": "a0c230aa38fa4980c6dff6a4bfc2466ae805f9179280d41cc7b1ca975054e03f",
      "language": "csharp",
      "size": 1608,
      "content": "// üìÑ File: Features/CTAFlowBuilder/Models/CTAFlowStep.cs\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Represents a single step in a CTA flow, triggered by a button.\n    /// </summary>\n    public class CTAFlowStep\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid CTAFlowConfigId { get; set; }\n\n        [ForeignKey(nameof(CTAFlowConfigId))]\n        public CTAFlowConfig Flow { get; set; } = null!;\n\n        public string TriggerButtonText { get; set; } = string.Empty;\n\n        public string TriggerButtonType { get; set; } = \"cta\"; // e.g., \"quick_reply\"\n\n        public string TemplateToSend { get; set; } = string.Empty;\n\n        public int StepOrder { get; set; }\n\n        public string? RequiredTag { get; set; }        // e.g., \"interested\"\n        public string? RequiredSource { get; set; }     // e.g., \"ads\", \"qr\", \"manual\"\n\n        // üîÄ Multiple buttons linking to different steps\n        public List<FlowButtonLink> ButtonLinks { get; set; } = new();\n\n        public float? PositionX { get; set; }\n        public float? PositionY { get; set; }\n        public string? TemplateType { get; set; }\n\n        // ‚úÖ Use WhatsApp Profile Name in this step's template?\n        public bool UseProfileName { get; set; } = false;\n\n        // ‚úÖ 1-based placeholder index in the template body (e.g., {{1}})\n        public int? ProfileNameSlot { get; set; } = 1;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/FlowButtonLink.cs",
      "sha256": "6b265bc48b8286ca84e5937f9f8f6fe99b8b6580ca59a43aedda8290fc685aaa",
      "language": "csharp",
      "size": 807,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    public class FlowButtonLink\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid? NextStepId { get; set; }\n        // ‚úÖ NEW FIELDS FOR FUTURE AUTOMATION\n        public string ButtonType { get; set; } = \"QUICK_REPLY\";    // e.g., URL, QUICK_REPLY, FLOW\n        public string ButtonSubType { get; set; } = \"\";            // Optional: e.g., \"Catalog\", \"PricingCTA\"\n        public string ButtonValue { get; set; } = \"\";              // e.g., URL or deep link\n\n        // Optional FK back to Step if needed\n        public Guid CTAFlowStepId { get; set; }\n        public CTAFlowStep? Step { get; set; }\n\n        public short ButtonIndex { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/FlowExecutionLog.cs",
      "sha256": "3288e0095ae888c5f42e669c9bd44c204cec5d167c37a928862137eaa5276988",
      "language": "csharp",
      "size": 1426,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Logs when a visual flow step is executed (useful for analytics, debugging, audit).\n    /// </summary>\n    public class FlowExecutionLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid? RunId { get; set; }\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        public Guid StepId { get; set; }\n        public string StepName { get; set; } = string.Empty;\n\n        public Guid? FlowId { get; set; }\n\n        public Guid? CampaignSendLogId { get; set; }\n        public Guid? TrackingLogId { get; set; }\n\n        public string? ContactPhone { get; set; }\n\n        public string? TriggeredByButton { get; set; }\n\n        public string? TemplateName { get; set; }\n\n        public string? TemplateType { get; set; }\n\n        public bool Success { get; set; }\n\n        public string? ErrorMessage { get; set; }\n\n        public string? RawResponse { get; set; }\n\n        public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;\n\n        public Guid? MessageLogId { get; set; }              // tie to originating message\n        public short? ButtonIndex { get; set; }              // which button was clicked (0..2)\n        public Guid? RequestId { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/CTAFlowService.cs",
      "sha256": "f97cee527b193bc04819ef71916cf3d9782f49641fe1da17cc4fcb9615917893",
      "language": "csharp",
      "size": 102740,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public class CTAFlowService : ICTAFlowService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public CTAFlowService(\n            AppDbContext context,\n            IMessageEngineService messageEngineService,\n            IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _context = context;\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n        }\n\n        // ---------------------------\n        // CREATE (draft-only, no edit)\n        // ---------------------------\n        public async Task<ResponseResult> SaveVisualFlowAsync(\n            SaveVisualFlowDto dto,\n            Guid businessId,\n            string createdBy)\n        {\n            try\n            {\n                Log.Information(\"üß† SaveVisualFlow (create-only) | FlowName: {FlowName} | Biz: {BusinessId}\",\n                    dto.FlowName, businessId);\n\n                // 0) Validate\n                if (dto.Nodes == null || !dto.Nodes.Any())\n                    return ResponseResult.ErrorInfo(\"‚ùå Cannot save an empty flow. Please add at least one step.\");\n\n                var trimmedName = (dto.FlowName ?? \"\").Trim();\n                if (trimmedName.Length == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå Flow name is required.\");\n\n                // 1) Enforce unique active name per business (create-only)\n                var nameExists = await _context.CTAFlowConfigs\n                    .AnyAsync(f => f.BusinessId == businessId && f.FlowName == trimmedName && f.IsActive);\n                if (nameExists)\n                {\n                    Log.Warning(\"‚ö†Ô∏è Duplicate flow name '{Name}' for business {Biz}.\", trimmedName, businessId);\n                    return ResponseResult.ErrorInfo(\"‚ùå A flow with this name already exists.\");\n                }\n\n                await using var tx = await _context.Database.BeginTransactionAsync();\n\n                // 2) Insert FlowConfig AS DRAFT (force IsPublished=false)\n                var flow = new CTAFlowConfig\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    FlowName = trimmedName,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    IsActive = true,\n                    IsPublished = false // << always draft on create\n                };\n                _context.CTAFlowConfigs.Add(flow);\n\n                // 3) Steps (map incoming node ids so we can wire links)\n                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);\n                var orderIndex = 0;\n\n                foreach (var node in dto.Nodes)\n                {\n                    if (string.IsNullOrWhiteSpace(node.Id)) continue;\n\n                    var step = new CTAFlowStep\n                    {\n                        Id = Guid.NewGuid(),\n                        CTAFlowConfigId = flow.Id,\n                        StepOrder = orderIndex++,\n                        TemplateToSend = node.TemplateName,\n                        TemplateType = node.TemplateType ?? \"UNKNOWN\",\n                        TriggerButtonText = node.TriggerButtonText ?? \"\",\n                        TriggerButtonType = node.TriggerButtonType ?? \"cta\",\n                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,\n                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,\n                        UseProfileName = node.UseProfileName,\n                        ProfileNameSlot = node.ProfileNameSlot,\n                        ButtonLinks = new List<FlowButtonLink>()\n                    };\n\n                    // Only text templates may use profile name slot\n                    var isTextTemplate = string.Equals(step.TemplateType, \"text_template\", StringComparison.OrdinalIgnoreCase);\n                    if (!isTextTemplate)\n                    {\n                        step.UseProfileName = false;\n                        step.ProfileNameSlot = null;\n                    }\n                    else if (!step.UseProfileName)\n                    {\n                        step.ProfileNameSlot = null;\n                    }\n                    else if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)\n                    {\n                        step.ProfileNameSlot = 1;\n                    }\n\n                    stepMap[node.Id] = step;\n                    _context.CTAFlowSteps.Add(step);\n                }\n\n                // 4) Wire links per node via edges (SourceHandle == button text)\n                var edges = dto.Edges ?? new List<FlowEdgeDto>();\n\n                foreach (var node in dto.Nodes)\n                {\n                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))\n                        continue;\n\n                    var outEdges = edges\n                        .Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase))\n                        .ToList();\n\n                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())\n                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)\n                        .ThenBy(b => b.Text ?? string.Empty)\n                        .ToList();\n\n                    short nextIdx = 0;\n\n                    foreach (var btn in orderedButtons)\n                    {\n                        var text = (btn.Text ?? string.Empty).Trim();\n                        if (string.IsNullOrEmpty(text)) continue;\n                        if (!seenTexts.Add(text)) continue; // dedupe\n\n                        var edge = outEdges.FirstOrDefault(e =>\n                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));\n                        if (edge == null) continue;\n\n                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep)) continue;\n\n                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;\n                        nextIdx = (short)(finalIndex + 1);\n\n                        var link = new FlowButtonLink\n                        {\n                            Id = Guid.NewGuid(),\n                            CTAFlowStepId = fromStep.Id,\n                            NextStepId = toStep.Id,\n                            ButtonText = text,\n                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? \"QUICK_REPLY\" : btn.Type,\n                            ButtonSubType = btn.SubType ?? string.Empty,\n                            ButtonValue = btn.Value ?? string.Empty,\n                            ButtonIndex = (short)finalIndex\n                        };\n\n                        _context.FlowButtonLinks.Add(link);\n                        fromStep.ButtonLinks.Add(link);\n\n                        // convenience: populate target's trigger info\n                        toStep.TriggerButtonText = text;\n                        toStep.TriggerButtonType = (btn.Type ?? \"QUICK_REPLY\").ToLowerInvariant();\n                    }\n                }\n\n                await _context.SaveChangesAsync();\n                await tx.CommitAsync();\n\n                Log.Information(\"‚úÖ Flow created '{Flow}' | Steps: {Steps} | Links: {Links}\",\n                    flow.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Flow created.\", new { flowId = flow.Id });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception while saving (create) flow\");\n                return ResponseResult.ErrorInfo(\"‚ùå Internal error while saving flow.\");\n            }\n        }\n\n        // ---------------------------\n        // LISTS\n        // ---------------------------\n        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Where(f => f.BusinessId == businessId && f.IsPublished)\n                .OrderByDescending(f => f.CreatedAt)\n                .Select(f => new VisualFlowSummaryDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    IsPublished = f.IsPublished,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)\n                .OrderByDescending(f => f.CreatedAt)\n                .Select(f => new VisualFlowSummaryDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    CreatedAt = f.CreatedAt,\n                    IsPublished = f.IsPublished\n                })\n                .ToListAsync();\n        }\n\n        // ---------------------------\n        // DETAIL LOADERS\n        // ---------------------------\n        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Include(c => c.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(c => c.Id == flowId && c.BusinessId == businessId && c.IsActive);\n\n            if (flow == null) return null;\n\n            // Prefetch template metadata\n            var templateMap = new Dictionary<string, TemplateMetadataDto>(StringComparer.OrdinalIgnoreCase);\n            var uniqueNames = flow.Steps\n                .Select(s => s.TemplateToSend)\n                .Where(n => !string.IsNullOrWhiteSpace(n))\n                .Distinct(StringComparer.OrdinalIgnoreCase)\n                .ToList();\n\n            foreach (var name in uniqueNames)\n            {\n                try\n                {\n                    var tpl = await _templateFetcherService.GetTemplateByNameAsync(\n                        businessId, name!, includeButtons: true);\n                    if (tpl != null) templateMap[name!] = tpl;\n                }\n                catch (Exception ex)\n                {\n                    Log.Warning(ex, \"‚ö†Ô∏è Failed to fetch template metadata for {Template}\", name);\n                }\n            }\n\n            var nodes = flow.Steps.Select(step =>\n            {\n                templateMap.TryGetValue(step.TemplateToSend ?? \"\", out var tpl);\n\n                var dbLinks = step.ButtonLinks ?? new List<FlowButtonLink>();\n                var dbButtons = dbLinks\n                    .OrderBy(b => b.ButtonIndex)\n                    .Select(link => new LinkButtonDto\n                    {\n                        Text = link.ButtonText,\n                        Type = link.ButtonType,\n                        SubType = link.ButtonSubType,\n                        Value = link.ButtonValue,\n                        Index = link.ButtonIndex,\n                        TargetNodeId = link.NextStepId?.ToString()\n                    });\n\n                var templateButtons = (tpl?.ButtonParams ?? new List<ButtonMetadataDto>())\n                    .Where(btn => !dbLinks.Any(bl => string.Equals(bl.ButtonText, btn.Text, StringComparison.OrdinalIgnoreCase)))\n                    .Select(btn => new LinkButtonDto { Text = btn.Text });\n\n                return new FlowNodeDto\n                {\n                    Id = step.Id.ToString(),\n                    TemplateName = step.TemplateToSend,\n                    TemplateType = step.TemplateType,\n                    MessageBody = string.IsNullOrWhiteSpace(tpl?.Body) ? \"‚Äî no body found ‚Äî\" : tpl!.Body,\n                    TriggerButtonText = step.TriggerButtonText,\n                    TriggerButtonType = step.TriggerButtonType,\n                    PositionX = step.PositionX ?? 100,\n                    PositionY = step.PositionY ?? 100,\n                    RequiredTag = step.RequiredTag,\n                    RequiredSource = step.RequiredSource,\n                    UseProfileName = step.UseProfileName,\n                    ProfileNameSlot = step.ProfileNameSlot,\n                    Buttons = dbButtons.Concat(templateButtons).ToList()\n                };\n            }).ToList();\n\n            var edges = flow.Steps\n                .SelectMany(step =>\n                    (step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>())\n                    .Where(l => l.NextStepId.HasValue)\n                    .Select(l => new FlowEdgeDto\n                    {\n                        FromNodeId = step.Id.ToString(),\n                        ToNodeId = l.NextStepId!.Value.ToString(),\n                        SourceHandle = l.ButtonText\n                    }))\n                .ToList();\n\n            return new SaveVisualFlowDto\n            {\n                FlowName = flow.FlowName,\n                IsPublished = flow.IsPublished,\n                Nodes = nodes,\n                Edges = edges\n            };\n        }\n\n        public async Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId)\n        {\n            try\n            {\n                var flow = await _context.CTAFlowConfigs\n                    .AsNoTracking()\n                    .Where(f => f.IsActive && f.BusinessId == businessId && f.Id == flowId)\n                    .Select(f => new\n                    {\n                        f.Id,\n                        f.FlowName,\n                        f.IsPublished,\n                        Steps = _context.CTAFlowSteps\n                            .Where(s => s.CTAFlowConfigId == f.Id)\n                            .OrderBy(s => s.StepOrder)\n                            .Select(s => new\n                            {\n                                s.Id,\n                                s.StepOrder,\n                                s.TemplateToSend,\n                                s.TemplateType,\n                                s.TriggerButtonText,\n                                s.TriggerButtonType,\n                                s.PositionX,\n                                s.PositionY,\n                                s.UseProfileName,\n                                s.ProfileNameSlot,\n                                Buttons = _context.FlowButtonLinks\n                                    .Where(b => b.CTAFlowStepId == s.Id)\n                                    .OrderBy(b => b.ButtonIndex)\n                                    .Select(b => new\n                                    {\n                                        b.ButtonText,\n                                        b.ButtonType,\n                                        b.ButtonSubType,\n                                        b.ButtonValue,\n                                        b.ButtonIndex,\n                                        b.NextStepId\n                                    })\n                                    .ToList()\n                            })\n                            .ToList()\n                    })\n                    .FirstOrDefaultAsync();\n\n                if (flow == null)\n                    return ResponseResult.ErrorInfo(\"Flow not found.\");\n\n                var nodes = flow.Steps.Select(s => new\n                {\n                    id = s.Id.ToString(),\n                    positionX = s.PositionX ?? 0,\n                    positionY = s.PositionY ?? 0,\n                    templateName = s.TemplateToSend,\n                    templateType = s.TemplateType,\n                    triggerButtonText = s.TriggerButtonText ?? string.Empty,\n                    triggerButtonType = s.TriggerButtonType ?? \"cta\",\n                    requiredTag = string.Empty,\n                    requiredSource = string.Empty,\n                    useProfileName = s.UseProfileName,\n                    profileNameSlot = (s.ProfileNameSlot.HasValue && s.ProfileNameSlot.Value > 0) ? s.ProfileNameSlot.Value : 1,\n                    buttons = s.Buttons.Select(b => new\n                    {\n                        text = b.ButtonText,\n                        type = b.ButtonType,\n                        subType = b.ButtonSubType,\n                        value = b.ButtonValue,\n                        targetNodeId = b.NextStepId == Guid.Empty ? null : b.NextStepId.ToString(),\n                        index = (int)(b.ButtonIndex)\n                    })\n                });\n\n                var edges = flow.Steps\n                    .SelectMany(s => s.Buttons\n                        .Where(b => b.NextStepId != Guid.Empty)\n                        .Select(b => new\n                        {\n                            fromNodeId = s.Id.ToString(),\n                            toNodeId = b.NextStepId.ToString(),\n                            sourceHandle = b.ButtonText\n                        }));\n\n                var payload = new\n                {\n                    flowName = flow.FlowName,\n                    isPublished = flow.IsPublished,\n                    nodes,\n                    edges\n                };\n\n                return ResponseResult.SuccessInfo(\"Flow loaded.\", payload);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception while loading visual flow {FlowId}\", flowId);\n                return ResponseResult.ErrorInfo(\"Internal error while loading flow.\");\n            }\n        }\n\n        // ---------------------------\n        // DELETE (only if not attached)\n        // ---------------------------\n        public async Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n            if (flow == null)\n                return ResponseResult.ErrorInfo(\"‚ùå Flow not found or does not belong to you.\");\n\n            var inUseQuery = _context.Campaigns\n                .Where(c => c.BusinessId == businessId &&\n                            !c.IsDeleted &&\n                            c.CTAFlowConfigId == flowId);\n\n            var inUseCount = await inUseQuery.CountAsync();\n            if (inUseCount > 0)\n            {\n                Log.Warning(\"‚ùå Delete flow blocked. Flow {FlowId} is used by {Count} campaigns.\", flowId, inUseCount);\n                // Keep message; controller will fetch campaigns for modal\n                return ResponseResult.ErrorInfo(\n                    $\"‚ùå Cannot delete. This flow is attached to {inUseCount} campaign(s). Delete those campaigns first.\");\n            }\n\n            foreach (var step in flow.Steps)\n                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n            _context.CTAFlowSteps.RemoveRange(flow.Steps);\n            _context.CTAFlowConfigs.Remove(flow);\n\n            await _context.SaveChangesAsync();\n            return ResponseResult.SuccessInfo(\"‚úÖ Flow deleted.\");\n        }\n\n        public async Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId)\n        {\n            var q = _context.Campaigns\n                .Where(c => c.BusinessId == businessId && !c.IsDeleted && c.CTAFlowConfigId == flowId);\n\n            var firstSends = await _context.CampaignSendLogs\n                .Where(s => s.BusinessId == businessId && s.CampaignId != Guid.Empty)\n                .GroupBy(s => s.CampaignId)\n                .Select(g => new { CampaignId = g.Key, FirstSentAt = (DateTime?)g.Min(s => s.CreatedAt) })\n                .ToListAsync();\n\n            var firstSendMap = firstSends.ToDictionary(x => x.CampaignId, x => x.FirstSentAt);\n\n            var list = await q\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new\n                {\n                    c.Id,\n                    c.Name,\n                    c.Status,\n                    c.ScheduledAt,\n                    c.CreatedAt,\n                    c.CreatedBy\n                })\n                .ToListAsync();\n\n            return list.Select(x => new AttachedCampaignDto(\n                x.Id,\n                x.Name,\n                x.Status,\n                x.ScheduledAt,\n                x.CreatedAt,\n                x.CreatedBy,\n                firstSendMap.TryGetValue(x.Id, out var ts) ? ts : null\n            )).ToList();\n        }\n\n        public async Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n            if (flow is null) return false;\n\n            var attached = await _context.Campaigns\n                .Where(c => c.BusinessId == businessId && !c.IsDeleted && c.CTAFlowConfigId == flowId)\n                .AnyAsync();\n            if (attached) return false;\n\n            foreach (var step in flow.Steps)\n                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n            _context.CTAFlowSteps.RemoveRange(flow.Steps);\n            _context.CTAFlowConfigs.Remove(flow);\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // ---------------------------\n        // PUBLISH (by id, flip flag)\n        // ---------------------------\n        public async Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n            if (flow is null) return false;\n\n            flow.IsPublished = true;\n            flow.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // ---------------------------\n        // RUNTIME / Matching / Execute\n        // ---------------------------\n        public async Task<CTAFlowStep?> MatchStepByButtonAsync(\n            Guid businessId,\n            string buttonText,\n            string buttonType,\n            string templateName,\n            Guid? campaignId = null)\n        {\n            var normalizedButtonText = buttonText?.Trim().ToLower() ?? \"\";\n            var normalizedButtonType = buttonType?.Trim().ToLower() ?? \"\";\n            var normalizedTemplateName = templateName?.Trim().ToLower() ?? \"\";\n\n            if (campaignId.HasValue)\n            {\n                var overrideStep = await _context.CampaignFlowOverrides\n                    .Where(o =>\n                        o.CampaignId == campaignId &&\n                        o.ButtonText.ToLower() == normalizedButtonText &&\n                        o.TemplateName.ToLower() == normalizedTemplateName)\n                    .FirstOrDefaultAsync();\n\n                if (overrideStep != null)\n                {\n                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();\n                    var matched = await _context.CTAFlowSteps\n                        .Include(s => s.Flow)\n                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);\n                    if (matched != null) return matched;\n                }\n            }\n\n            var fallbackStep = await _context.CTAFlowSteps\n                .Include(s => s.Flow)\n                .Where(s =>\n                    s.Flow.BusinessId == businessId &&\n                    s.Flow.IsActive &&\n                    s.Flow.IsPublished &&\n                    s.TriggerButtonText.ToLower() == normalizedButtonText &&\n                    s.TriggerButtonType.ToLower() == normalizedButtonType)\n                .FirstOrDefaultAsync();\n\n            return fallbackStep;\n        }\n\n        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)\n        {\n            try\n            {\n                var log = await _context.TrackingLogs\n                    .Include(l => l.Contact)\n                        .ThenInclude(c => c.ContactTags)\n                            .ThenInclude(ct => ct.Tag)\n                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n                if (log == null) return ResponseResult.ErrorInfo(\"Tracking log not found.\");\n\n                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);\n                if (step == null) return ResponseResult.ErrorInfo(\"Step conditions not satisfied.\");\n\n                var args = new List<string>();\n                if (step.UseProfileName && step.ProfileNameSlot is int slot && slot >= 1)\n                {\n                    var contact = log.Contact ?? await _context.Contacts\n                        .AsNoTracking()\n                        .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == (log.ContactPhone ?? \"\"));\n                    var greet = (contact?.ProfileName ?? contact?.Name)?.Trim();\n                    if (string.IsNullOrEmpty(greet)) greet = \"there\";\n                    while (args.Count < slot) args.Add(string.Empty);\n                    args[slot - 1] = greet;\n                }\n\n                ResponseResult sendResult;\n                switch (step.TemplateType?.ToLower())\n                {\n                    case \"image_template\":\n                        var imageDto = new ImageTemplateMessageDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = log.ContactPhone ?? \"\",\n                            TemplateName = step.TemplateToSend,\n                            LanguageCode = \"en_US\"\n                        };\n                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);\n                        break;\n                    case \"text_template\":\n                    default:\n                        var textDto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = log.ContactPhone ?? \"\",\n                            TemplateName = step.TemplateToSend,\n                            TemplateParameters = args\n                        };\n                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);\n                        break;\n                }\n\n                var executionLog = new FlowExecutionLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    StepId = step.Id,\n                    FlowId = step.CTAFlowConfigId,\n                    CampaignSendLogId = campaignSendLogId,\n                    TrackingLogId = trackingLogId,\n                    ContactPhone = log.ContactPhone,\n                    TriggeredByButton = step.TriggerButtonText,\n                    TemplateName = step.TemplateToSend,\n                    TemplateType = step.TemplateType,\n                    Success = sendResult.Success,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ExecutedAt = DateTime.UtcNow\n                };\n\n                _context.FlowExecutionLogs.Add(executionLog);\n                await _context.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo($\"Flow step executed. Sent: {sendResult.Success}\", null, sendResult.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception during ExecuteVisualFlowAsync()\");\n                return ResponseResult.ErrorInfo(\"Internal error during flow execution.\");\n            }\n        }\n\n        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)\n            => GetChainedStepAsync(businessId, nextStepId, null, null);\n\n        public async Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId, TrackingLog? trackingLog, Contact? contact)\n        {\n            if (nextStepId == null) return null;\n\n            var flow = await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                .FirstOrDefaultAsync(f =>\n                    f.BusinessId == businessId &&\n                    f.Steps.Any(s => s.Id == nextStepId));\n\n            var followUpStep = flow?.Steps.FirstOrDefault(s => s.Id == nextStepId);\n            if (followUpStep == null) return null;\n\n            if (trackingLog != null)\n            {\n                var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);\n                if (!isMatch) return null;\n            }\n\n            return followUpStep;\n        }\n\n        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId)\n        {\n            var log = await _context.TrackingLogs\n                .Include(l => l.Contact)\n                    .ThenInclude(c => c.ContactTags)\n                        .ThenInclude(ct => ct.Tag)\n                .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);\n        }\n\n        // ‚úÖ MISSING IMPLEMENTATION (to satisfy the interface)\n        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)\n        {\n            return await _context.FlowButtonLinks\n                .Where(l => l.CTAFlowStepId == sourceStepId\n                            && l.NextStepId != null\n                            && l.Step.CTAFlowConfigId == flowId\n                            && l.ButtonIndex == buttonIndex)\n                .SingleOrDefaultAsync();\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using Microsoft.EntityFrameworkCore;\n//using Serilog;\n//using xbytechat.api.AuthModule.Models;\n//using xbytechat.api.CRM.Models;\n//using xbytechat.api.Features.CTAFlowBuilder.DTOs;\n//using xbytechat.api.Features.CTAFlowBuilder.Models;\n//using xbytechat.api.Features.MessagesEngine.DTOs;\n//using xbytechat.api.Features.MessagesEngine.Services;\n//using xbytechat.api.Features.Tracking.Models;\n//using xbytechat.api.Helpers;\n//using xbytechat.api.WhatsAppSettings.DTOs;\n//using xbytechat_api.WhatsAppSettings.Services;\n\n//namespace xbytechat.api.Features.CTAFlowBuilder.Services\n//{\n//    public class CTAFlowService : ICTAFlowService\n//    {\n//        private readonly AppDbContext _context;\n//        private readonly IMessageEngineService _messageEngineService;\n//        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n//        public CTAFlowService(AppDbContext context, IMessageEngineService messageEngineService,\n//            IWhatsAppTemplateFetcherService templateFetcherService\n//            )\n//        {\n//            _context = context;\n//            _messageEngineService = messageEngineService;\n//            _templateFetcherService = templateFetcherService;\n//        }\n\n//        public async Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy)\n//        {\n//            var flow = new CTAFlowConfig\n//            {\n//                Id = Guid.NewGuid(),\n//                FlowName = dto.FlowName,\n//                BusinessId = businessId,\n//                CreatedAt = DateTime.UtcNow,\n//                CreatedBy = createdBy,\n//                IsPublished = dto.IsPublished\n//            };\n\n//            foreach (var stepDto in dto.Steps)\n//            {\n//                var step = new CTAFlowStep\n//                {\n//                    Id = Guid.NewGuid(),\n//                    CTAFlowConfigId = flow.Id,\n//                    TriggerButtonText = stepDto.TriggerButtonText,\n//                    TriggerButtonType = stepDto.TriggerButtonType,\n//                    TemplateToSend = stepDto.TemplateToSend,\n//                    StepOrder = stepDto.StepOrder,\n//                    ButtonLinks = stepDto.ButtonLinks?.Select(link => new FlowButtonLink\n//                    {\n//                        ButtonText = link.ButtonText,\n//                        NextStepId = link.NextStepId\n//                    }).ToList() ?? new List<FlowButtonLink>()\n//                };\n\n//                flow.Steps.Add(step);\n//            }\n\n//            _context.CTAFlowConfigs.Add(flow);\n//            await _context.SaveChangesAsync();\n\n//            return flow.Id;\n//        }\n\n//        public async Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId)\n//        {\n//            return await _context.CTAFlowConfigs\n//                .Include(f => f.Steps.OrderBy(s => s.StepOrder))\n//                .Where(f => f.BusinessId == businessId && f.IsActive && f.IsPublished)\n//                .FirstOrDefaultAsync();\n//        }\n\n//        public async Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId)\n//        {\n//            return await _context.CTAFlowConfigs\n//                .Include(f => f.Steps)\n//                    .ThenInclude(s => s.ButtonLinks)\n//                .Where(f => f.BusinessId == businessId && f.IsPublished == false)\n//                .OrderByDescending(f => f.CreatedAt)\n//                .FirstOrDefaultAsync();\n//        }\n\n\n\n//        public async Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId)\n//        {\n//            return await _context.CTAFlowSteps\n//                .Where(s => s.CTAFlowConfigId == flowId)\n//                .OrderBy(s => s.StepOrder)\n//                .ToListAsync();\n//        }\n\n//        public async Task<CTAFlowStep?> MatchStepByButtonAsync(\n//            Guid businessId,\n//            string buttonText,\n//            string buttonType,\n//            string TemplateName,\n//            Guid? campaignId = null)\n//        {\n//            var normalizedButtonText = buttonText?.Trim().ToLower() ?? \"\";\n//            var normalizedButtonType = buttonType?.Trim().ToLower() ?? \"\";\n//            var normalizedTemplateName = TemplateName?.Trim().ToLower() ?? \"\";\n\n//            // 1Ô∏è‚É£ Try campaign-specific override\n//            if (campaignId.HasValue)\n//            {\n//                var overrideStep = await _context.CampaignFlowOverrides\n//                    .Where(o =>\n//                        o.CampaignId == campaignId &&\n//                        o.ButtonText.ToLower() == normalizedButtonText &&\n//                        o.TemplateName.ToLower() == normalizedTemplateName)\n//                    .FirstOrDefaultAsync();\n\n//                if (overrideStep != null)\n//                {\n//                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();\n\n//                    var matched = await _context.CTAFlowSteps\n//                        .Include(s => s.Flow)\n//                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);\n\n//                    if (matched != null)\n//                    {\n//                        Log.Information(\"üîÅ Override matched: Template '{Template}' ‚Üí Step '{StepId}'\", overrideStep.OverrideNextTemplate, matched.Id);\n//                        return matched;\n//                    }\n\n//                    Log.Warning(\"‚ö†Ô∏è Override found for button '{Button}' but no matching step for template '{Template}'\", normalizedButtonText, overrideStep.OverrideNextTemplate);\n//                }\n\n//                else\n//                {\n//                    Log.Information(\"üü° No campaign override found for button '{Button}' on template '{Template}'\", normalizedButtonText, normalizedTemplateName);\n//                }\n//            }\n\n//            // 2Ô∏è‚É£ Fallback to standard flow logic\n//            var fallbackStep = await _context.CTAFlowSteps\n//                .Include(s => s.Flow)\n//                .Where(s =>\n//                    s.Flow.BusinessId == businessId &&\n//                    s.Flow.IsActive &&\n//                    s.Flow.IsPublished &&\n//                    s.TriggerButtonText.ToLower() == normalizedButtonText &&\n//                    s.TriggerButtonType.ToLower() == normalizedButtonType)\n//                .FirstOrDefaultAsync();\n\n//            if (fallbackStep != null)\n//            {\n//                Log.Information(\"‚úÖ Fallback flow step matched: StepId = {StepId}, Flow = {FlowName}\", fallbackStep.Id, fallbackStep.Flow?.FlowName);\n//            }\n//            else\n//            {\n//                Log.Warning(\"‚ùå No fallback step matched for button '{ButtonText}' of type '{ButtonType}' in BusinessId: {BusinessId}\", normalizedButtonText, normalizedButtonType, businessId);\n//            }\n\n//            return fallbackStep;\n//        }\n\n\n//        public async Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user)\n//        {\n//            var flow = await _context.CTAFlowConfigs\n//                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);\n\n//            if (flow is null) return false;\n\n//            // Optional validation: ensure it has at least 1 step, etc.\n//            flow.IsPublished = true;\n//            flow.UpdatedAt = DateTime.UtcNow;\n//            await _context.SaveChangesAsync();\n//            return true;\n//        }\n\n//        //public async Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy)\n//        //{\n//        //    try\n//        //    {\n//        //        // üî• 1. Remove existing published flow for this business\n//        //        var existingFlows = await _context.CTAFlowConfigs\n//        //            .Where(f => f.BusinessId == businessId && f.IsPublished)\n//        //            .ToListAsync();\n\n//        //        if (existingFlows.Any())\n//        //        {\n//        //            _context.CTAFlowConfigs.RemoveRange(existingFlows);\n//        //        }\n\n//        //        // üå± 2. Create new flow config\n//        //        var flowConfig = new CTAFlowConfig\n//        //        {\n//        //            Id = Guid.NewGuid(),\n//        //            BusinessId = businessId,\n//        //            FlowName = \"Published Flow - \" + DateTime.UtcNow.ToString(\"yyyyMMdd-HHmm\"),\n//        //            IsPublished = true,\n//        //            IsActive = true,\n//        //            CreatedBy = createdBy,\n//        //            CreatedAt = DateTime.UtcNow,\n//        //            Steps = new List<CTAFlowStep>()\n//        //        };\n\n//        //        // üîÅ 3. Convert each step DTO to model\n//        //        foreach (var stepDto in steps)\n//        //        {\n//        //            var step = new CTAFlowStep\n//        //            {\n//        //                Id = Guid.NewGuid(),\n//        //                CTAFlowConfigId = flowConfig.Id,\n//        //                TriggerButtonText = stepDto.TriggerButtonText,\n//        //                TriggerButtonType = stepDto.TriggerButtonType,\n//        //                TemplateToSend = stepDto.TemplateToSend,\n//        //                StepOrder = stepDto.StepOrder,\n//        //                ButtonLinks = stepDto.ButtonLinks.Select(bl => new FlowButtonLink\n//        //                {\n//        //                    Id = Guid.NewGuid(),\n//        //                    ButtonText = bl.ButtonText,\n//        //                    NextStepId = bl.NextStepId,\n//        //                }).ToList()\n//        //            };\n\n//        //            flowConfig.Steps.Add(step);\n//        //        }\n\n//        //        // üíæ 4. Save to DB\n//        //        await _context.CTAFlowConfigs.AddAsync(flowConfig);\n//        //        await _context.SaveChangesAsync();\n\n//        //        return ResponseResult.SuccessInfo(\"‚úÖ Flow published successfully.\");\n//        //    }\n//        //    catch (Exception ex)\n//        //    {\n//        //        Log.Error(ex, \"‚ùå Error while publishing CTA flow.\");\n//        //        return ResponseResult.ErrorInfo(\"‚ùå Could not publish flow.\");\n//        //    }\n//        //}\n\n\n//        private static int CountBodyPlaceholders(string? body)\n//        {\n//            if (string.IsNullOrWhiteSpace(body)) return 0;\n//            // counts {{1}}, {{2}}, ... ; ignores any non-numeric moustaches\n//            var m = System.Text.RegularExpressions.Regex.Matches(body, @\"\\{\\{\\s*\\d+\\s*\\}\\}\");\n//            return m.Count;\n//        }\n//        public async Task<ResponseResult> SaveVisualFlowAsync(\n//    SaveVisualFlowDto dto,\n//    Guid businessId,\n//    string createdBy)\n//        {\n//            try\n//            {\n//                Log.Information(\"üß† SaveVisualFlow (create-only) | FlowName: {FlowName} | Biz: {BusinessId}\",\n//                    dto.FlowName, businessId);\n\n//                // 0) Basic validation\n//                if (dto.Nodes == null || !dto.Nodes.Any())\n//                    return ResponseResult.ErrorInfo(\"‚ùå Cannot save an empty flow. Please add at least one step.\");\n\n//                var trimmedName = (dto.FlowName ?? \"\").Trim();\n//                if (trimmedName.Length == 0)\n//                    return ResponseResult.ErrorInfo(\"‚ùå Flow name is required.\");\n\n//                // 1) CREATE-ONLY: refuse duplicate name for this business\n//                var nameExists = await _context.CTAFlowConfigs\n//                    .AnyAsync(f => f.BusinessId == businessId && f.FlowName == trimmedName && f.IsActive);\n\n//                if (nameExists)\n//                {\n//                    // IMPORTANT: this method is only for *new* flows.\n//                    // If the user is editing an existing flow, the UI should call PUT /cta-flow/{id}.\n//                    Log.Warning(\"‚ö†Ô∏è Duplicate flow name '{Name}' for business {Biz}.\", trimmedName, businessId);\n//                    return ResponseResult.ErrorInfo(\n//                        \"‚ùå A flow with this name already exists. Open that flow and edit it, or choose a different name.\");\n//                }\n\n//                await using var tx = await _context.Database.BeginTransactionAsync();\n\n//                // 2) Insert FlowConfig\n//                var flow = new CTAFlowConfig\n//                {\n//                    Id = Guid.NewGuid(),\n//                    BusinessId = businessId,\n//                    FlowName = trimmedName,\n//                    CreatedBy = createdBy,\n//                    CreatedAt = DateTime.UtcNow,\n//                    UpdatedAt = DateTime.UtcNow,\n//                    IsActive = true,\n//                    // You *can* allow creating as published, but most teams prefer create-as-draft:\n//                    IsPublished = dto.IsPublished\n//                };\n//                _context.CTAFlowConfigs.Add(flow);\n\n//                // 3) Build Steps\n//                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);\n//                var orderIndex = 0;\n\n//                foreach (var node in dto.Nodes)\n//                {\n//                    if (string.IsNullOrWhiteSpace(node.Id)) continue;\n\n//                    var step = new CTAFlowStep\n//                    {\n//                        Id = Guid.NewGuid(),\n//                        CTAFlowConfigId = flow.Id,\n//                        StepOrder = orderIndex++,\n//                        TemplateToSend = node.TemplateName,\n//                        TemplateType = node.TemplateType ?? \"UNKNOWN\",\n//                        TriggerButtonText = node.TriggerButtonText ?? \"\",\n//                        TriggerButtonType = node.TriggerButtonType ?? \"cta\",\n//                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,\n//                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,\n//                        UseProfileName = node.UseProfileName,\n//                        ProfileNameSlot = node.ProfileNameSlot,\n//                        ButtonLinks = new List<FlowButtonLink>()\n//                    };\n\n//                    // Harden profile-name config per template type\n//                    var isTextTemplate = string.Equals(step.TemplateType, \"text_template\", StringComparison.OrdinalIgnoreCase);\n//                    if (!isTextTemplate)\n//                    {\n//                        step.UseProfileName = false;\n//                        step.ProfileNameSlot = null;\n//                    }\n//                    else\n//                    {\n//                        if (!step.UseProfileName)\n//                        {\n//                            step.ProfileNameSlot = null;\n//                        }\n//                        else\n//                        {\n//                            if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)\n//                                step.ProfileNameSlot = 1;\n//                        }\n//                    }\n\n//                    stepMap[node.Id] = step;\n//                    _context.CTAFlowSteps.Add(step);\n//                }\n\n//                // 4) Build Links (per-node buttons, matched by SourceHandle == button text)\n//                var edges = dto.Edges ?? new List<FlowEdgeDto>();\n\n//                foreach (var node in dto.Nodes)\n//                {\n//                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))\n//                        continue;\n\n//                    var outEdges = edges.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList();\n//                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n\n//                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())\n//                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)\n//                        .ThenBy(b => b.Text ?? string.Empty)\n//                        .ToList();\n\n//                    short nextIdx = 0;\n\n//                    foreach (var btn in orderedButtons)\n//                    {\n//                        var text = (btn.Text ?? string.Empty).Trim();\n//                        if (string.IsNullOrEmpty(text)) continue;\n\n//                        if (!seenTexts.Add(text))\n//                        {\n//                            Log.Warning(\"‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; first wins.\", text, node.Id);\n//                            continue;\n//                        }\n\n//                        var edge = outEdges.FirstOrDefault(e =>\n//                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));\n//                        if (edge == null) continue;\n\n//                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep)) continue;\n\n//                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;\n//                        nextIdx = (short)(finalIndex + 1);\n\n//                        var link = new FlowButtonLink\n//                        {\n//                            Id = Guid.NewGuid(),\n//                            CTAFlowStepId = fromStep.Id,\n//                            NextStepId = toStep.Id,\n//                            ButtonText = text,\n//                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? \"QUICK_REPLY\" : btn.Type,\n//                            ButtonSubType = btn.SubType ?? string.Empty,\n//                            ButtonValue = btn.Value ?? string.Empty,\n//                            ButtonIndex = (short)finalIndex\n//                        };\n\n//                        _context.FlowButtonLinks.Add(link);\n//                        fromStep.ButtonLinks.Add(link);\n\n//                        // convenience: target step \"entry trigger\"\n//                        toStep.TriggerButtonText = text;\n//                        toStep.TriggerButtonType = (btn.Type ?? \"QUICK_REPLY\").ToLowerInvariant();\n//                    }\n//                }\n\n//                await _context.SaveChangesAsync();\n//                await tx.CommitAsync();\n\n//                Log.Information(\"‚úÖ Flow created '{Flow}' | Steps: {Steps} | Links: {Links}\",\n//                    flow.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));\n\n//                // Return new flowId so the FE can redirect/open it if desired\n//                return ResponseResult.SuccessInfo(\"‚úÖ Flow created.\", new { flowId = flow.Id });\n//            }\n//            catch (Exception ex)\n//            {\n//                Log.Error(ex, \"‚ùå Exception while saving (create) flow\");\n//                return ResponseResult.ErrorInfo(\"‚ùå Internal error while saving flow.\");\n//            }\n//        }\n\n//        //public async Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy)\n//        //{\n//        //    try\n//        //    {\n//        //        Log.Information(\"üß† SaveVisualFlow started | FlowName: {FlowName} | BusinessId: {BusinessId}\", dto.FlowName, businessId);\n\n//        //        if (dto.Nodes == null || !dto.Nodes.Any())\n//        //        {\n//        //            Log.Warning(\"‚ùå No nodes found in flow. Aborting save.\");\n//        //            return ResponseResult.ErrorInfo(\"‚ùå Cannot save an empty flow. Please add at least one step.\");\n//        //        }\n\n//        //        // 1) Upsert FlowConfig\n//        //        var flow = await _context.CTAFlowConfigs\n//        //            .FirstOrDefaultAsync(f => f.FlowName == dto.FlowName && f.BusinessId == businessId);\n\n//        //        if (flow == null)\n//        //        {\n//        //            flow = new CTAFlowConfig\n//        //            {\n//        //                Id = Guid.NewGuid(),\n//        //                BusinessId = businessId,\n//        //                FlowName = dto.FlowName,\n//        //                CreatedBy = createdBy,\n//        //                CreatedAt = DateTime.UtcNow,\n//        //                UpdatedAt = DateTime.UtcNow,\n//        //                IsActive = true,\n//        //                IsPublished = dto.IsPublished\n//        //            };\n//        //            _context.CTAFlowConfigs.Add(flow);\n//        //            Log.Information(\"‚úÖ New FlowConfig created with ID: {Id}\", flow.Id);\n//        //        }\n//        //        else\n//        //        {\n//        //            // wipe old steps+links for a clean replace\n//        //            var oldSteps = await _context.CTAFlowSteps\n//        //                .Where(s => s.CTAFlowConfigId == flow.Id)\n//        //                .Include(s => s.ButtonLinks)\n//        //                .ToListAsync();\n\n//        //            foreach (var step in oldSteps)\n//        //                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n//        //            _context.CTAFlowSteps.RemoveRange(oldSteps);\n\n//        //            flow.IsPublished = dto.IsPublished;\n//        //            flow.UpdatedAt = DateTime.UtcNow;\n//        //        }\n\n//        //        // 2) Build Steps (map by incoming node.Id string)\n//        //        var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);\n\n//        //        foreach (var (node, index) in dto.Nodes.Select((n, i) => (n, i)))\n//        //        {\n//        //            if (string.IsNullOrWhiteSpace(node.Id))\n//        //                continue;\n\n//        //            var step = new CTAFlowStep\n//        //            {\n//        //                Id = Guid.NewGuid(),\n//        //                CTAFlowConfigId = flow.Id,\n//        //                StepOrder = index,\n//        //                TemplateToSend = node.TemplateName,\n//        //                TemplateType = node.TemplateType ?? \"UNKNOWN\",\n//        //                TriggerButtonText = node.TriggerButtonText ?? \"\",\n//        //                TriggerButtonType = node.TriggerButtonType ?? \"cta\",\n//        //                PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,\n//        //                PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,\n//        //                UseProfileName = node.UseProfileName,\n//        //                ProfileNameSlot = node.ProfileNameSlot,\n//        //                //ProfileNameSlot = node.ProfileNameSlot ?? 1,\n//        //                ButtonLinks = new List<FlowButtonLink>()\n//        //            };\n\n//        //            // ‚úÖ Harden profile-name config per step\n//        //            var isTextTemplate = string.Equals(step.TemplateType, \"text_template\", StringComparison.OrdinalIgnoreCase);\n//        //            if (!isTextTemplate)\n//        //            {\n//        //                // Only text templates support body placeholders; disable on others\n//        //                step.UseProfileName = false;\n//        //                step.ProfileNameSlot = null;\n//        //            }\n//        //            //else if (step.UseProfileName)\n//        //            //{\n//        //            //    // Clamp to minimum valid slot\n//        //            //    if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)\n//        //            //        step.ProfileNameSlot = 1;\n//        //            //}\n//        //            else\n//        //            {\n//        //                // Text template:\n//        //                if (!step.UseProfileName)\n//        //                {\n//        //                    // Toggle OFF ‚Üí always null the slot\n//        //                    step.ProfileNameSlot = null;\n//        //                }\n//        //                else\n//        //                {\n//        //                    // Toggle ON ‚Üí clamp to minimum valid\n//        //                    if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)\n//        //                        step.ProfileNameSlot = 1;\n//        //                    // (Optional) upper clamp if you want: e.g., step.ProfileNameSlot = Math.Min(step.ProfileNameSlot.Value, 50);\n//        //                }\n//        //            }\n//        //            stepMap[node.Id] = step;\n//        //            _context.CTAFlowSteps.Add(step);\n//        //        }\n\n//        //        // 3) Build Links PER NODE using buttons order (with Index), not per-edge blindly\n//        //        foreach (var node in dto.Nodes)\n//        //        {\n//        //            if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))\n//        //                continue;\n\n//        //            // outgoing edges from this node\n//        //            var outEdges = dto.Edges?.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList()\n//        //                           ?? new List<FlowEdgeDto>();\n\n//        //            // dedupe by button text to avoid ambiguous routing\n//        //            var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n\n//        //            // stable ordering: by provided Index (0..N), then by Text\n//        //            var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())\n//        //                .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)\n//        //                .ThenBy(b => b.Text ?? string.Empty)\n//        //                .ToList();\n\n//        //            short nextIdx = 0;\n\n//        //            foreach (var btn in orderedButtons)\n//        //            {\n//        //                var text = (btn.Text ?? string.Empty).Trim();\n//        //                if (string.IsNullOrEmpty(text))\n//        //                    continue;\n\n//        //                if (!seenTexts.Add(text))\n//        //                {\n//        //                    Log.Warning(\"‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; keeping first, skipping duplicates.\", text, node.Id);\n//        //                    continue;\n//        //                }\n\n//        //                // match edge by SourceHandle == button text (how ReactFlow wires handles)\n//        //                var edge = outEdges.FirstOrDefault(e =>\n//        //                    string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));\n//        //                if (edge == null)\n//        //                {\n//        //                    // no wire from this button ‚Üí skip link creation but keep button metadata in UI on reload\n//        //                    continue;\n//        //                }\n\n//        //                if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep))\n//        //                    continue;\n\n//        //                // final index: prefer incoming payload Index; else fallback to a sequential counter\n//        //                var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;\n//        //                nextIdx = (short)(finalIndex + 1);\n\n//        //                var link = new FlowButtonLink\n//        //                {\n//        //                    Id = Guid.NewGuid(),\n//        //                    CTAFlowStepId = fromStep.Id,\n//        //                    NextStepId = toStep.Id,\n//        //                    ButtonText = text,\n//        //                    ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? \"QUICK_REPLY\" : btn.Type,\n//        //                    ButtonSubType = btn.SubType ?? string.Empty,\n//        //                    ButtonValue = btn.Value ?? string.Empty,\n//        //                    ButtonIndex = (short)finalIndex // üîë persist the index\n//        //                };\n\n//        //                _context.FlowButtonLinks.Add(link);\n//        //                fromStep.ButtonLinks.Add(link);\n\n//        //                // propagate trigger info on the target step for convenience\n//        //                toStep.TriggerButtonText = text;\n//        //                toStep.TriggerButtonType = (btn.Type ?? \"QUICK_REPLY\").ToLowerInvariant();\n//        //            }\n//        //        }\n\n//        //        await _context.SaveChangesAsync();\n\n//        //        Log.Information(\"‚úÖ Flow '{Flow}' saved | Steps: {StepCount} | Links: {LinkCount}\",\n//        //            dto.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));\n\n//        //        return ResponseResult.SuccessInfo(\"‚úÖ Flow saved successfully.\");\n//        //    }\n//        //    catch (Exception ex)\n//        //    {\n//        //        Log.Error(ex, \"‚ùå Exception while saving flow\");\n//        //        return ResponseResult.ErrorInfo(\"‚ùå Internal error while saving flow.\");\n//        //    }\n//        //}\n\n\n//        //public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId)\n//        //{\n//        //    var flow = await _context.CTAFlowConfigs\n//        //        .Include(c => c.Steps)\n//        //            .ThenInclude(s => s.ButtonLinks)\n//        //        .FirstOrDefaultAsync(c =>\n//        //            c.Id == flowId &&\n//        //            c.BusinessId == businessId &&   // üëà tenant scoping\n//        //            c.IsActive);\n\n//        //    if (flow == null) return null;\n\n//        //    // ---- Pre-fetch unique template names (defensive) ----\n//        //    var templateMap = new Dictionary<string, TemplateMetadataDto>(StringComparer.OrdinalIgnoreCase);\n//        //    foreach (var name in flow.Steps\n//        //                             .Select(s => s.TemplateToSend)\n//        //                             .Where(n => !string.IsNullOrWhiteSpace(n))\n//        //                             .Distinct(StringComparer.OrdinalIgnoreCase))\n//        //    {\n//        //        try\n//        //        {\n//        //            var tpl = await _templateFetcherService.GetTemplateByNameAsync(\n//        //                businessId, name!, includeButtons: true);\n//        //            if (tpl != null) templateMap[name!] = tpl;\n//        //        }\n//        //        catch (Exception ex)\n//        //        {\n//        //            Log.Warning(ex, \"‚ö†Ô∏è Failed to fetch template from Meta for {Template}\", name);\n//        //        }\n//        //    }\n\n//        //    // ---- Nodes ----\n//        //    var nodes = flow.Steps.Select(step =>\n//        //    {\n//        //        templateMap.TryGetValue(step.TemplateToSend ?? \"\", out var template);\n\n//        //        IEnumerable<FlowButtonLink> links =\n//        //            step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>();\n\n//        //        var dbButtons = links.Select(link => new LinkButtonDto\n//        //        {\n//        //            Text = link.ButtonText,\n//        //            Type = link.ButtonType,\n//        //            SubType = link.ButtonSubType,\n//        //            Value = link.ButtonValue,\n//        //            TargetNodeId = link.NextStepId?.ToString() // null-safe\n//        //        });\n\n//        //        var templateButtons = (template?.ButtonParams ?? new List<ButtonMetadataDto>())\n//        //            .Where(btn => !links.Any(bl =>\n//        //                        string.Equals(bl.ButtonText, btn.Text, StringComparison.OrdinalIgnoreCase)))\n//        //            .Select(btn => new LinkButtonDto\n//        //            {\n//        //                Text = btn.Text,\n//        //                TargetNodeId = null\n//        //            });\n\n//        //        return new FlowNodeDto\n//        //        {\n//        //            Id = step.Id.ToString(),\n//        //            TemplateName = step.TemplateToSend,\n//        //            TemplateType = step.TemplateType,\n//        //            MessageBody = template?.Body ?? \"Message body preview...\",\n//        //            TriggerButtonText = step.TriggerButtonText,\n//        //            TriggerButtonType = step.TriggerButtonType,\n//        //            PositionX = step.PositionX ?? 100,\n//        //            PositionY = step.PositionY ?? 100,\n\n//        //            // Conditional logic\n//        //            RequiredTag = step.RequiredTag,\n//        //            RequiredSource = step.RequiredSource,\n\n//        //            UseProfileName = step.UseProfileName,\n//        //            ProfileNameSlot = step.ProfileNameSlot,\n\n//        //            Buttons = dbButtons.Concat(templateButtons).ToList()\n//        //        };\n//        //    }).ToList();\n\n//        //    // ---- Edges (skip links without a target) ----\n//        //    var edges = flow.Steps\n//        //        .SelectMany(step =>\n//        //            (step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>())\n//        //            .Where(link => link.NextStepId.HasValue)\n//        //            .Select(link => new FlowEdgeDto\n//        //            {\n//        //                FromNodeId = step.Id.ToString(),\n//        //                ToNodeId = link.NextStepId!.Value.ToString(),\n//        //                SourceHandle = link.ButtonText\n//        //            }))\n//        //        .ToList();\n\n//        //    return new SaveVisualFlowDto\n//        //    {\n//        //        FlowName = flow.FlowName,\n//        //        IsPublished = flow.IsPublished,\n//        //        Nodes = nodes,\n//        //        Edges = edges\n//        //    };\n//        //}\n\n//        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId)\n//        {\n//            var flow = await _context.CTAFlowConfigs\n//                .Include(c => c.Steps)\n//                    .ThenInclude(s => s.ButtonLinks)\n//                .FirstOrDefaultAsync(c => c.Id == flowId && c.BusinessId == businessId && c.IsActive);\n\n//            if (flow == null) return null;\n\n//            // 1) Prefetch template metadata for all unique names (defensive, fast)\n//            var templateMap = new Dictionary<string, TemplateMetadataDto>(StringComparer.OrdinalIgnoreCase);\n//            var uniqueNames = flow.Steps\n//                .Select(s => s.TemplateToSend)\n//                .Where(n => !string.IsNullOrWhiteSpace(n))\n//                .Distinct(StringComparer.OrdinalIgnoreCase)\n//                .ToList();\n\n//            foreach (var name in uniqueNames)\n//            {\n//                try\n//                {\n//                    var tpl = await _templateFetcherService.GetTemplateByNameAsync(\n//                        businessId, name!, includeButtons: true);\n//                    if (tpl != null) templateMap[name!] = tpl;\n//                }\n//                catch (Exception ex)\n//                {\n//                    Log.Warning(ex, \"‚ö†Ô∏è Failed to fetch template from provider for {Template}\", name);\n//                }\n//            }\n\n//            // 2) Build nodes with real body + merged buttons (DB links first, then any unlinked template buttons)\n//            var nodes = flow.Steps.Select(step =>\n//            {\n//                templateMap.TryGetValue(step.TemplateToSend ?? \"\", out var tpl);\n\n//                var dbLinks = step.ButtonLinks ?? new List<FlowButtonLink>();\n\n//                var dbButtons = dbLinks\n//                    .OrderBy(b => b.ButtonIndex)\n//                    .Select(link => new LinkButtonDto\n//                    {\n//                        Text = link.ButtonText,\n//                        Type = link.ButtonType,\n//                        SubType = link.ButtonSubType,\n//                        Value = link.ButtonValue,\n//                        Index = link.ButtonIndex,\n//                        TargetNodeId = link.NextStepId?.ToString()\n//                    });\n\n//                var templateButtons = (tpl?.ButtonParams ?? new List<ButtonMetadataDto>())\n//                    .Where(btn => !dbLinks.Any(bl => string.Equals(bl.ButtonText, btn.Text, StringComparison.OrdinalIgnoreCase)))\n//                    .Select(btn => new LinkButtonDto\n//                    {\n//                        Text = btn.Text,\n//                        // no TargetNodeId: not wired\n//                    });\n\n//                return new FlowNodeDto\n//                {\n//                    Id = step.Id.ToString(),\n//                    TemplateName = step.TemplateToSend,\n//                    TemplateType = step.TemplateType,\n//                    MessageBody = string.IsNullOrWhiteSpace(tpl?.Body) ? \"‚Äî no body found ‚Äî\" : tpl!.Body, // ‚Üê REAL BODY\n//                    TriggerButtonText = step.TriggerButtonText,\n//                    TriggerButtonType = step.TriggerButtonType,\n//                    PositionX = step.PositionX ?? 100,\n//                    PositionY = step.PositionY ?? 100,\n//                    RequiredTag = step.RequiredTag,\n//                    RequiredSource = step.RequiredSource,\n//                    UseProfileName = step.UseProfileName,\n//                    ProfileNameSlot = step.ProfileNameSlot,\n//                    Buttons = dbButtons.Concat(templateButtons).ToList()\n//                };\n//            }).ToList();\n\n//            // 3) Build edges\n//            var edges = flow.Steps\n//                .SelectMany(step => (step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>())\n//                    .Where(l => l.NextStepId.HasValue)\n//                    .Select(l => new FlowEdgeDto\n//                    {\n//                        FromNodeId = step.Id.ToString(),\n//                        ToNodeId = l.NextStepId!.Value.ToString(),\n//                        SourceHandle = l.ButtonText\n//                    }))\n//                .ToList();\n\n//            return new SaveVisualFlowDto\n//            {\n//                FlowName = flow.FlowName,\n//                IsPublished = flow.IsPublished,\n//                Nodes = nodes,\n//                Edges = edges\n//            };\n//        }\n\n//        public async Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy)\n//        {\n//            // Load flow with children so we can remove in the right order\n//            var flow = await _context.CTAFlowConfigs\n//                .Include(f => f.Steps)\n//                    .ThenInclude(s => s.ButtonLinks)\n//                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n//            if (flow == null)\n//                return ResponseResult.ErrorInfo(\"‚ùå Flow not found or does not belong to you.\");\n\n//            // Is this flow used by any active campaign?\n//            var inUseQuery = _context.Campaigns\n//                .Where(c => c.BusinessId == businessId &&\n//                            !c.IsDeleted &&\n//                            c.CTAFlowConfigId == flowId);\n\n//            var inUseCount = await inUseQuery.CountAsync();\n//            if (inUseCount > 0)\n//            {\n//                // Optional: show a few campaign names in the error for the UI\n//                var sample = await inUseQuery\n//                    .OrderByDescending(c => c.CreatedAt)\n//                    .Select(c => new { c.Id, c.Name, c.Status })\n//                    .Take(5)\n//                    .ToListAsync();\n\n//                Log.Warning(\"‚ùå Delete flow blocked. Flow {FlowId} is used by {Count} campaigns: {@Sample}\",\n//                    flowId, inUseCount, sample);\n\n//                return ResponseResult.ErrorInfo(\n//                    $\"‚ùå Cannot delete. This flow is attached to {inUseCount} campaign(s). \" +\n//                    $\"Delete those campaigns first.\"\n//                );\n//            }\n\n//            // Safe to remove: delete children first, then the flow\n//            foreach (var step in flow.Steps)\n//                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n//            _context.CTAFlowSteps.RemoveRange(flow.Steps);\n//            _context.CTAFlowConfigs.Remove(flow);\n\n//            await _context.SaveChangesAsync();\n//            return ResponseResult.SuccessInfo(\"‚úÖ Flow deleted.\");\n//        }\n\n\n//        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)\n//        {\n//            return await _context.CTAFlowConfigs\n//                .Where(f => f.BusinessId == businessId && f.IsPublished)\n//                .OrderByDescending(f => f.CreatedAt)\n//                .Select(f => new VisualFlowSummaryDto\n//                {\n//                    Id = f.Id,\n//                    FlowName = f.FlowName,\n//                    IsPublished = f.IsPublished,\n//                    CreatedAt = f.CreatedAt\n//                })\n//                .ToListAsync();\n//        }\n\n//        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)\n//        {\n//            return await _context.CTAFlowConfigs\n//                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)\n//                .OrderByDescending(f => f.CreatedAt)\n//                .Select(f => new VisualFlowSummaryDto\n//                {\n//                    Id = f.Id,\n//                    FlowName = f.FlowName,\n//                    CreatedAt = f.CreatedAt,\n//                    IsPublished = f.IsPublished\n//                })\n//                .ToListAsync();\n//        }\n\n//        public async Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber)\n//        {\n//            // Log.Information(\"üöÄ Executing follow-up for BusinessId: {BusinessId}, CurrentStepId: {StepId}\", businessId);\n//            if (currentStep == null)\n//            {\n//                Log.Warning(\"‚ö†Ô∏è Cannot execute follow-up. Current step is null.\");\n//                return ResponseResult.ErrorInfo(\"Current step not found.\");\n//            }\n\n//            // üß† Step: Look through all button links for a valid NextStepId\n//            var nextLink = currentStep.ButtonLinks.FirstOrDefault(link => link.NextStepId != null);\n\n//            if (nextLink == null)\n//            {\n//                Log.Information(\"‚ÑπÔ∏è No NextStepId defined in any ButtonLinks for StepId: {StepId}\", currentStep.Id);\n//                return ResponseResult.SuccessInfo(\"No follow-up step to execute.\");\n//            }\n\n//            // üîç Fetch the next step using new logic (via CTAFlowConfig + Steps)\n//            // 1Ô∏è‚É£ Try to resolve with smart condition check\n//            var followUpStep = await GetChainedStepAsync(businessId, nextLink.NextStepId, null, null);\n\n//            if (followUpStep == null)\n//            {\n//                Log.Warning(\"‚ùå Follow-up step skipped due to condition mismatch ‚Üí StepId: {StepId}\", nextLink.NextStepId);\n\n//                // 2Ô∏è‚É£ Optional fallback: Try same flow ‚Üí Any step without conditions\n//                var flow = await _context.CTAFlowConfigs\n//                    .Include(f => f.Steps)\n//                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.IsPublished);\n\n//                followUpStep = flow?.Steps\n//                    .Where(s => string.IsNullOrEmpty(s.RequiredTag) && string.IsNullOrEmpty(s.RequiredSource))\n//                    .OrderBy(s => s.StepOrder)\n//                    .FirstOrDefault();\n\n//                if (followUpStep != null)\n//                {\n//                    Log.Information(\"üîÅ Fallback step selected ‚Üí StepId: {StepId}, Template: {Template}\",\n//                        followUpStep.Id, followUpStep.TemplateToSend);\n//                }\n//                else\n//                {\n//                    Log.Warning(\"üö´ No suitable fallback found in flow. Skipping follow-up.\");\n//                    return ResponseResult.SuccessInfo(\"No matching follow-up step based on user context.\");\n//                }\n//            }\n\n\n//            // üì® Send the follow-up message using the TemplateToSend field\n//            try\n//            {\n//                var template = followUpStep.TemplateToSend;\n\n//                Log.Information(\"üì§ Sending follow-up message ‚Üí Template: {Template}, To: {Recipient}\", template, recipientNumber);\n\n//                // üß™ Replace this with actual message engine call\n//                var sendDto = new SimpleTemplateMessageDto\n//                {\n//                    RecipientNumber = recipientNumber,\n//                    TemplateName = template,\n//                    TemplateParameters = new List<string>() // Add dynamic params later if needed\n//                };\n\n//                var sendResult = await _messageEngineService\n//     .SendTemplateMessageSimpleAsync(businessId, sendDto);\n\n//                if (!sendResult.Success)\n//                {\n//                    Log.Warning(\"‚ùå Follow-up message send failed ‚Üí {Template}\", template);\n//                    return ResponseResult.ErrorInfo(\"Follow-up send failed.\", sendResult.ErrorMessage);\n//                }\n\n\n//                return ResponseResult.SuccessInfo($\"Follow-up message sent using template: {template}\", null, sendResult.RawResponse);\n\n//            }\n//            catch (Exception ex)\n//            {\n//                Log.Error(ex, \"‚ùå Error sending follow-up message for StepId: {StepId}\", followUpStep.Id);\n//                return ResponseResult.ErrorInfo(\"Failed to send follow-up.\");\n//            }\n//        }\n//        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)\n//        {\n//            return GetChainedStepAsync(businessId, nextStepId, null, null); // Forward to full logic\n//        }\n\n//        // ‚úÖ Extended logic with condition check (Tag + Source)\n//        public async Task<CTAFlowStep?> GetChainedStepAsync(\n//            Guid businessId,\n//            Guid? nextStepId,\n//            TrackingLog? trackingLog = null,\n//            Contact? contact = null)\n//        {\n//            if (nextStepId == null)\n//            {\n//                Log.Information(\"‚ÑπÔ∏è No NextStepId provided ‚Äî skipping follow-up.\");\n//                return null;\n//            }\n\n//            try\n//            {\n//                var flow = await _context.CTAFlowConfigs\n//                    .Include(f => f.Steps)\n//                    .FirstOrDefaultAsync(f =>\n//                        f.BusinessId == businessId &&\n//                        f.Steps.Any(s => s.Id == nextStepId));\n\n//                if (flow == null)\n//                {\n//                    Log.Warning(\"‚ö†Ô∏è No flow found containing NextStepId: {NextStepId} for business: {BusinessId}\", nextStepId, businessId);\n//                    return null;\n//                }\n\n//                var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);\n\n//                if (followUpStep == null)\n//                {\n//                    Log.Warning(\"‚ùå Step matched in flow but not found in step list: {NextStepId}\", nextStepId);\n//                    return null;\n//                }\n\n//                // ‚úÖ Check RequiredTag / Source match\n//                if (trackingLog != null)\n//                {\n//                    var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);\n\n//                    if (!isMatch)\n//                    {\n//                        Log.Information(\"üö´ Step {StepId} skipped due to condition mismatch [Tag: {Tag}, Source: {Source}]\",\n//                            followUpStep.Id, followUpStep.RequiredTag, followUpStep.RequiredSource);\n//                        return null;\n//                    }\n//                }\n\n//                Log.Information(\"‚úÖ Follow-up step found and matched ‚Üí StepId: {StepId}, Template: {Template}\",\n//                    followUpStep.Id, followUpStep.TemplateToSend);\n\n//                return followUpStep;\n//            }\n//            catch (Exception ex)\n//            {\n//                Log.Error(ex, \"‚ùå Exception while fetching chained step for NextStepId: {NextStepId}\", nextStepId);\n//                throw;\n//            }\n//        }\n\n//        // ‚úÖ Optional helper for resolving from TrackingLogId\n//        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(\n//            Guid businessId,\n//            Guid? nextStepId,\n//            Guid? trackingLogId)\n//        {\n//            var log = await _context.TrackingLogs\n//                .Include(l => l.Contact)\n//                    .ThenInclude(c => c.ContactTags)\n//                        .ThenInclude(ct => ct.Tag)\n//                .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n//            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);\n//        }\n\n\n//        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)\n//        {\n//            try\n//            {\n//                Log.Information(\"üö¶ Executing Visual Flow ‚Üí StepId: {StepId} | TrackingLogId: {TrackingLogId}\", startStepId, trackingLogId);\n\n//                // ‚îÄ‚îÄ local helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n//                static string ResolveGreeting(string? profileName, string? contactName)\n//                {\n//                    var s = (profileName ?? contactName)?.Trim();\n//                    return string.IsNullOrEmpty(s) ? \"there\" : s;\n//                }\n//                static void EnsureArgsLength(List<string> args, int slot1Based)\n//                {\n//                    while (args.Count < slot1Based) args.Add(string.Empty);\n//                }\n//                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n//                var log = await _context.TrackingLogs\n//                    .Include(l => l.Contact)\n//                        .ThenInclude(c => c.ContactTags)\n//                            .ThenInclude(ct => ct.Tag)\n//                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n//                if (log == null)\n//                {\n//                    Log.Warning(\"‚ùå TrackingLog not found for ID: {TrackingLogId}\", trackingLogId);\n//                    return ResponseResult.ErrorInfo(\"Tracking log not found.\");\n//                }\n\n//                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);\n\n//                if (step == null)\n//                {\n//                    Log.Warning(\"‚ùå No flow step matched or conditions failed ‚Üí StepId: {StepId}\", startStepId);\n//                    return ResponseResult.ErrorInfo(\"Step conditions not satisfied.\");\n//                }\n\n//                // ‚úÖ Build profile-aware args for this step (used for text templates)\n//                var args = new List<string>();\n//                if (step.UseProfileName && step.ProfileNameSlot is int slot && slot >= 1)\n//                {\n//                    // Prefer the already-loaded contact on the tracking log; fallback to DB lookup\n//                    var contact = log.Contact ?? await _context.Contacts\n//                        .AsNoTracking()\n//                        .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == (log.ContactPhone ?? \"\"));\n\n//                    var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);\n//                    EnsureArgsLength(args, slot);\n//                    args[slot - 1] = greet; // 1-based slot -> 0-based index\n//                }\n\n//                ResponseResult sendResult;\n\n//                // This switch block remains unchanged, except we pass args for text templates\n//                switch (step.TemplateType?.ToLower())\n//                {\n//                    case \"image_template\":\n//                        var imageDto = new ImageTemplateMessageDto\n//                        {\n//                            BusinessId = businessId,\n//                            RecipientNumber = log.ContactPhone ?? \"\",\n//                            TemplateName = step.TemplateToSend,\n//                            LanguageCode = \"en_US\"\n//                            // If your image templates support body params, you can also pass args here.\n//                        };\n//                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);\n//                        break;\n\n//                    case \"text_template\":\n//                    default:\n//                        var textDto = new SimpleTemplateMessageDto\n//                        {\n//                            RecipientNumber = log.ContactPhone ?? \"\",\n//                            TemplateName = step.TemplateToSend,\n//                            TemplateParameters = args // ‚úÖ inject ProfileName here when configured\n//                        };\n//                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);\n//                        break;\n//                }\n\n//                // ‚úÖ 2. SAVE the new ID to the log\n//                var executionLog = new FlowExecutionLog\n//                {\n//                    Id = Guid.NewGuid(),\n//                    BusinessId = businessId,\n//                    StepId = step.Id,\n//                    FlowId = step.CTAFlowConfigId,\n//                    CampaignSendLogId = campaignSendLogId, // <-- THE NEW VALUE IS SAVED HERE\n//                    TrackingLogId = trackingLogId,\n//                    ContactPhone = log.ContactPhone,\n//                    TriggeredByButton = step.TriggerButtonText,\n//                    TemplateName = step.TemplateToSend,\n//                    TemplateType = step.TemplateType,\n//                    Success = sendResult.Success,\n//                    ErrorMessage = sendResult.ErrorMessage,\n//                    RawResponse = sendResult.RawResponse,\n//                    ExecutedAt = DateTime.UtcNow\n//                };\n\n//                _context.FlowExecutionLogs.Add(executionLog);\n//                await _context.SaveChangesAsync();\n\n//                if (sendResult.Success)\n//                {\n//                    Log.Information(\"‚úÖ Flow step executed ‚Üí Template: {Template} sent to {To}\", step.TemplateToSend, log.ContactPhone);\n//                }\n//                else\n//                {\n//                    Log.Warning(\"‚ùå Failed to send template from flow ‚Üí {Reason}\", sendResult.ErrorMessage);\n//                }\n\n//                return ResponseResult.SuccessInfo($\"Flow step executed. Sent: {sendResult.Success}\", null, sendResult.RawResponse);\n//            }\n//            catch (Exception ex)\n//            {\n//                Log.Error(ex, \"‚ùå Exception during ExecuteVisualFlowAsync()\");\n//                return ResponseResult.ErrorInfo(\"Internal error during flow execution.\");\n//            }\n//        }\n\n//        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)\n//        {\n//            return await _context.FlowButtonLinks\n//                 .Where(l => l.CTAFlowStepId == sourceStepId\n//              && l.NextStepId != null\n//              && l.Step.CTAFlowConfigId == flowId\n//              && l.ButtonIndex == buttonIndex)\n//                .SingleOrDefaultAsync();\n\n//        }\n//        //public async Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId)\n//        //{\n//        //    return await _context.Campaigns\n//        //        .Where(c => c.BusinessId == businessId\n//        //                    && !c.IsDeleted\n//        //                    && c.CTAFlowConfigId == flowId)\n//        //        .OrderByDescending(c => c.CreatedAt)\n//        //        .Select(c => new AttachedCampaignDto(c.Id, c.Name, c.Status, c.ScheduledAt))\n//        //        .ToListAsync();\n//        //}\n\n//        public async Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId)\n//        {\n//            try\n//            {\n//                // Load the flow + steps + button links (no tracking for view)\n//                var flow = await _context.CTAFlowConfigs\n//                    .AsNoTracking()\n//                    .Where(f => f.IsActive && f.BusinessId == businessId && f.Id == flowId)\n//                    .Select(f => new\n//                    {\n//                        f.Id,\n//                        f.FlowName,\n//                        f.IsPublished,\n//                        Steps = _context.CTAFlowSteps\n//                            .Where(s => s.CTAFlowConfigId == f.Id)\n//                            .OrderBy(s => s.StepOrder)\n//                            .Select(s => new\n//                            {\n//                                s.Id,\n//                                s.StepOrder,\n//                                s.TemplateToSend,\n//                                s.TemplateType,\n//                                s.TriggerButtonText,\n//                                s.TriggerButtonType,\n//                                s.PositionX,\n//                                s.PositionY,\n//                                s.UseProfileName,\n//                                s.ProfileNameSlot,\n//                                Buttons = _context.FlowButtonLinks\n//                                    .Where(b => b.CTAFlowStepId == s.Id)\n//                                    .OrderBy(b => b.ButtonIndex)\n//                                    .Select(b => new\n//                                    {\n//                                        b.ButtonText,\n//                                        b.ButtonType,\n//                                        b.ButtonSubType,\n//                                        b.ButtonValue,\n//                                        b.ButtonIndex,\n//                                        b.NextStepId\n//                                    })\n//                                    .ToList()\n//                            })\n//                            .ToList()\n//                    })\n//                    .FirstOrDefaultAsync();\n\n//                if (flow == null)\n//                {\n//                    return ResponseResult.ErrorInfo(\"Flow not found.\");\n//                }\n\n//                // Map to FE shape\n//                var nodes = flow.Steps.Select(s => new\n//                {\n//                    id = s.Id.ToString(), // node id = step id\n//                    positionX = s.PositionX ?? 0,\n//                    positionY = s.PositionY ?? 0,\n//                    templateName = s.TemplateToSend,\n//                    templateType = s.TemplateType,\n//                    triggerButtonText = s.TriggerButtonText ?? string.Empty,\n//                    triggerButtonType = s.TriggerButtonType ?? \"cta\",\n//                    requiredTag = string.Empty,       // not used in your model; keep empty\n//                    requiredSource = string.Empty,    // not used; keep empty\n//                    useProfileName = s.UseProfileName,\n//                    profileNameSlot = (s.ProfileNameSlot.HasValue && s.ProfileNameSlot.Value > 0) ? s.ProfileNameSlot.Value : 1,\n//                    buttons = s.Buttons.Select(b => new\n//                    {\n//                        text = b.ButtonText,\n//                        type = b.ButtonType,\n//                        subType = b.ButtonSubType,\n//                        value = b.ButtonValue,\n//                        targetNodeId = b.NextStepId == Guid.Empty ? null : b.NextStepId.ToString(),\n//                        index = (int)(b.ButtonIndex)\n//                    })\n//                });\n\n//                // Build edges from button links\n//                var edges = flow.Steps\n//                    .SelectMany(s => s.Buttons\n//                        .Where(b => b.NextStepId != Guid.Empty)\n//                        .Select(b => new\n//                        {\n//                            fromNodeId = s.Id.ToString(),\n//                            toNodeId = b.NextStepId.ToString(),\n//                            sourceHandle = b.ButtonText // label/handle = button text\n//                        }));\n\n//                var payload = new\n//                {\n//                    flowName = flow.FlowName,\n//                    isPublished = flow.IsPublished,\n//                    nodes,\n//                    edges\n//                };\n\n//                return ResponseResult.SuccessInfo(\"Flow loaded.\", payload);\n//            }\n//            catch (Exception ex)\n//            {\n//                Log.Error(ex, \"‚ùå Exception while loading visual flow {FlowId}\", flowId);\n//                return ResponseResult.ErrorInfo(\"Internal error while loading flow.\");\n//            }\n//        }\n//        public async Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId)\n//        {\n//            // base query: attached, non-deleted\n//            var q = _context.Campaigns\n//                .Where(c => c.BusinessId == businessId && !c.IsDeleted && c.CTAFlowConfigId == flowId);\n\n//            // earliest send per campaign\n//            var firstSends = await _context.CampaignSendLogs\n//                .Where(s => s.BusinessId == businessId && s.CampaignId != Guid.Empty)\n//                .GroupBy(s => s.CampaignId)\n//                .Select(g => new { CampaignId = g.Key, FirstSentAt = (DateTime?)g.Min(s => s.CreatedAt) })\n//                .ToListAsync();\n\n//            var firstSendMap = firstSends.ToDictionary(x => x.CampaignId, x => x.FirstSentAt);\n\n//            var list = await q\n//                .OrderByDescending(c => c.CreatedAt)\n//                .Select(c => new\n//                {\n//                    c.Id,\n//                    c.Name,\n//                    c.Status,\n//                    c.ScheduledAt,\n//                    c.CreatedAt,\n//                    c.CreatedBy\n//                })\n//                .ToListAsync();\n\n//            return list.Select(x => new AttachedCampaignDto(\n//                x.Id,\n//                x.Name,\n//                x.Status,\n//                x.ScheduledAt,\n//                x.CreatedAt,\n//                x.CreatedBy,\n//                firstSendMap.TryGetValue(x.Id, out var ts) ? ts : null\n//            )).ToList();\n//        }\n//        public async Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId)\n//        {\n//            // Load flow + children\n//            var flow = await _context.CTAFlowConfigs\n//                .Include(f => f.Steps)\n//                    .ThenInclude(s => s.ButtonLinks)\n//                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n//            if (flow is null) return false;\n\n//            // Guard: any active campaign still attached?\n//            var attached = await _context.Campaigns\n//                .Where(c => c.BusinessId == businessId\n//                            && !c.IsDeleted\n//                            && c.CTAFlowConfigId == flowId)\n//                .Select(c => c.Id)\n//                .Take(1)\n//                .AnyAsync();\n\n//            if (attached) return false;\n\n//            // Hard delete (children first; FK-safe)\n//            foreach (var step in flow.Steps)\n//                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n//            _context.CTAFlowSteps.RemoveRange(flow.Steps);\n//            _context.CTAFlowConfigs.Remove(flow);\n\n//            await _context.SaveChangesAsync();\n//            return true;\n//        }\n\n//        //public async Task<FlowUpdateResult> UpdateVisualFlowAsync(Guid flowId, SaveVisualFlowDto dto, Guid businessId, string user)\n//        //{\n//        //    var flow = await _context.CTAFlowConfigs\n//        //        .Include(f => f.Steps)\n//        //            .ThenInclude(s => s.ButtonLinks)\n//        //        .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n//        //    if (flow is null)\n//        //        return new FlowUpdateResult { Status = \"notFound\", Message = \"Flow not found.\" };\n\n//        //    var attached = await _context.Campaigns\n//        //        .Where(c => !c.IsDeleted && c.BusinessId == businessId && c.CTAFlowConfigId == flowId)\n//        //        .Select(c => new { c.Id, c.Name, c.Status, c.ScheduledAt, c.CreatedAt, c.CreatedBy })\n//        //        .ToListAsync();\n\n//        //    if (flow.IsPublished && attached.Count > 0)\n//        //    {\n//        //        return new FlowUpdateResult\n//        //        {\n//        //            Status = \"requiresFork\",\n//        //            Message = \"This flow is published and attached to campaign(s). Create a new draft version.\",\n//        //            Campaigns = attached\n//        //        };\n//        //    }\n\n//        //    var needsRepublish = flow.IsPublished && attached.Count == 0;\n//        //    if (needsRepublish) flow.IsPublished = false; // flip to draft during edit\n\n//        //    // wipe & rebuild steps (simplest and consistent with your builder payload)\n//        //    _context.FlowButtonLinks.RemoveRange(flow.Steps.SelectMany(s => s.ButtonLinks));\n//        //    _context.CTAFlowSteps.RemoveRange(flow.Steps);\n//        //    await _context.SaveChangesAsync();\n\n//        //    flow.FlowName = string.IsNullOrWhiteSpace(dto.FlowName) ? flow.FlowName : dto.FlowName.Trim();\n//        //    flow.UpdatedAt = DateTime.UtcNow;\n\n//        //    var newSteps = new List<CTAFlowStep>();\n//        //    var nodeIdToNewGuid = new Dictionary<string, Guid>();\n\n//        //    // 1) create steps with new IDs but keep mapping from incoming node.Id\n//        //    foreach (var n in dto.Nodes)\n//        //    {\n//        //        var stepId = Guid.TryParse(n.Id, out var parsed) ? parsed : Guid.NewGuid();\n//        //        nodeIdToNewGuid[n.Id] = stepId;\n\n//        //        var s = new CTAFlowStep\n//        //        {\n//        //            Id = stepId,\n//        //            CTAFlowConfigId = flow.Id,\n//        //            TemplateToSend = n.TemplateName ?? string.Empty,\n//        //            TemplateType = n.TemplateType,\n//        //            TriggerButtonText = n.TriggerButtonText ?? \"\",\n//        //            TriggerButtonType = n.TriggerButtonType ?? \"\",\n//        //            StepOrder = 0,\n//        //            RequiredTag = n.RequiredTag,\n//        //            RequiredSource = n.RequiredSource,\n//        //            PositionX = n.PositionX,\n//        //            PositionY = n.PositionY,\n//        //            UseProfileName = n.UseProfileName,\n//        //            ProfileNameSlot = n.ProfileNameSlot\n//        //        };\n\n//        //        s.ButtonLinks = (n.Buttons ?? new List<LinkButtonDto>())\n//        //            .Select((b, idx) => new FlowButtonLink\n//        //            {\n//        //                Id = Guid.NewGuid(),\n//        //                CTAFlowStepId = s.Id,\n//        //                Step = s,\n//        //                ButtonText = b.Text ?? \"\",\n//        //                ButtonType = b.Type ?? \"QUICK_REPLY\",\n//        //                ButtonSubType = b.SubType ?? \"\",\n//        //                ButtonValue = b.Value ?? \"\",\n//        //                ButtonIndex = (short)(b.Index >= 0 ? b.Index : idx),\n//        //                NextStepId = string.IsNullOrWhiteSpace(b.TargetNodeId) ? null :\n//        //                             (Guid.TryParse(b.TargetNodeId, out var t) ? t : null)\n//        //            }).ToList();\n\n//        //        newSteps.Add(s);\n//        //    }\n\n//        //    flow.Steps = newSteps;\n//        //    await _context.SaveChangesAsync();\n\n//        //    return new FlowUpdateResult { Status = \"ok\", NeedsRepublish = needsRepublish };\n//        //}\n\n//        //public async Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user)\n//        //{\n//        //    var flow = await _context.CTAFlowConfigs\n//        //        .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n//        //    if (flow is null) return false;\n\n//        //    // sanity: basic validation can be added here (has steps, etc.)\n//        //    flow.IsPublished = true;\n//        //    flow.UpdatedAt = DateTime.UtcNow;\n//        //    await _context.SaveChangesAsync();\n//        //    return true;\n//        //}\n\n//        // ---------- FORK (create draft copy) ----------\n//        //public async Task<Guid> ForkFlowAsync(Guid flowId, Guid businessId, string user)\n//        //{\n//        //    var src = await _context.CTAFlowConfigs\n//        //        .Include(f => f.Steps)\n//        //            .ThenInclude(s => s.ButtonLinks)\n//        //        .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n//        //    if (src is null) return Guid.Empty;\n\n//        //    var dst = new CTAFlowConfig\n//        //    {\n//        //        Id = Guid.NewGuid(),\n//        //        BusinessId = src.BusinessId,\n//        //        FlowName = src.FlowName + \" (copy)\",\n//        //        IsActive = true,\n//        //        IsPublished = false, // new draft\n//        //        CreatedAt = DateTime.UtcNow,\n//        //        CreatedBy = user,\n//        //        UpdatedAt = DateTime.UtcNow\n//        //    };\n\n//        //    var oldToNew = new Dictionary<Guid, Guid>();\n\n//        //    // Clone steps first\n//        //    foreach (var s in src.Steps)\n//        //    {\n//        //        var nsId = Guid.NewGuid();\n//        //        oldToNew[s.Id] = nsId;\n\n//        //        var ns = new CTAFlowStep\n//        //        {\n//        //            Id = nsId,\n//        //            CTAFlowConfigId = dst.Id,\n//        //            TriggerButtonText = s.TriggerButtonText,\n//        //            TriggerButtonType = s.TriggerButtonType,\n//        //            TemplateToSend = s.TemplateToSend,\n//        //            TemplateType = s.TemplateType,\n//        //            StepOrder = s.StepOrder,\n//        //            RequiredTag = s.RequiredTag,\n//        //            RequiredSource = s.RequiredSource,\n//        //            PositionX = s.PositionX,\n//        //            PositionY = s.PositionY,\n//        //            UseProfileName = s.UseProfileName,\n//        //            ProfileNameSlot = s.ProfileNameSlot,\n//        //            ButtonLinks = new List<FlowButtonLink>()\n//        //        };\n\n//        //        dst.Steps.Add(ns);\n//        //    }\n\n//        //    // Clone links and rewire targets if possible\n//        //    foreach (var s in src.Steps)\n//        //    {\n//        //        var ns = dst.Steps.First(x => x.Id == oldToNew[s.Id]);\n//        //        foreach (var b in s.ButtonLinks.OrderBy(x => x.ButtonIndex))\n//        //        {\n//        //            ns.ButtonLinks.Add(new FlowButtonLink\n//        //            {\n//        //                Id = Guid.NewGuid(),\n//        //                CTAFlowStepId = ns.Id,\n//        //                Step = ns,\n//        //                ButtonText = b.ButtonText,\n//        //                ButtonType = b.ButtonType,\n//        //                ButtonSubType = b.ButtonSubType,\n//        //                ButtonValue = b.ButtonValue,\n//        //                ButtonIndex = b.ButtonIndex,\n//        //                NextStepId = b.NextStepId.HasValue && oldToNew.ContainsKey(b.NextStepId.Value)\n//        //                    ? oldToNew[b.NextStepId.Value]\n//        //                    : null\n//        //            });\n//        //        }\n//        //    }\n\n//        //    _context.CTAFlowConfigs.Add(dst);\n//        //    await _context.SaveChangesAsync();\n//        //    return dst.Id;\n//        //}\n\n\n//    }\n//}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/FlowRuntimeService.cs",
      "sha256": "16ff88c5165c847cb6b85760c6bb245fb4ca66de4c50f040267fc7cea37d6d9a",
      "language": "csharp",
      "size": 26420,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Text.Json;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Webhooks.Services.Processors;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Features.CustomeApi.Services;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public class FlowRuntimeService : IFlowRuntimeService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n        private readonly ILogger<FlowRuntimeService> _logger;\n        private readonly ICtaJourneyPublisher _ctaPublisher;\n        public FlowRuntimeService(\n            AppDbContext dbContext,\n            IMessageEngineService messageEngineService,\n            IWhatsAppTemplateFetcherService templateFetcherService,  ILogger<FlowRuntimeService> logger, ICtaJourneyPublisher ctaPublisher)\n        {\n            _dbContext = dbContext;\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n            _logger = logger;\n            _ctaPublisher = ctaPublisher;\n        }\n\n        private static string ResolveGreeting(string? profileName, string? contactName)\n        {\n            var s = (profileName ?? contactName)?.Trim();\n            return string.IsNullOrEmpty(s) ? \"there\" : s;\n        }\n        private static void EnsureArgsLength(List<string> args, int slot1Based)\n        {\n            while (args.Count < slot1Based) args.Add(string.Empty);\n        }\n\n\n        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)\n        //{\n        //    try\n        //    {\n        //        // ‚îÄ‚îÄ local helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n        //        string ResolveGreeting(string? profileName, string? contactName)\n        //        {\n        //            var s = (profileName ?? contactName)?.Trim();\n        //            return string.IsNullOrEmpty(s) ? \"there\" : s;\n        //        }\n        //        void EnsureArgsLength(List<string> args, int slot1Based)\n        //        {\n        //            while (args.Count < slot1Based) args.Add(string.Empty);\n        //        }\n        //        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect\n        //        if (context.ClickedButton != null &&\n        //            context.ClickedButton.ButtonType?.Equals(\"URL\", StringComparison.OrdinalIgnoreCase) == true)\n        //        {\n        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = context.BusinessId,\n        //                FlowId = context.FlowId,\n        //                StepId = context.SourceStepId,\n        //                StepName = \"URL_REDIRECT\",\n        //                MessageLogId = context.MessageLogId,\n        //                ButtonIndex = context.ButtonIndex,\n        //                ContactPhone = context.ContactPhone,\n        //                Success = true,\n        //                ExecutedAt = DateTime.UtcNow,\n        //                RequestId = context.RequestId\n        //            });\n        //            await _dbContext.SaveChangesAsync();\n\n        //            return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };\n        //        }\n\n        //        // 2) Load next step in the same flow\n        //        var targetStep = await _dbContext.CTAFlowSteps\n        //            .Include(s => s.ButtonLinks)\n        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&\n        //                                      s.CTAFlowConfigId == context.FlowId);\n\n\n\n        //        if (targetStep == null)\n        //            return new NextStepResult { Success = false, Error = \"Target step not found.\" };\n\n        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))\n        //            return new NextStepResult { Success = false, Error = \"Target step has no template assigned.\" };\n\n        //        var templateName = targetStep.TemplateToSend.Trim();\n\n        //        // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)\n        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(\n        //            context.BusinessId, templateName, includeButtons: true);\n\n        //        if (meta == null)\n        //        {\n        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = context.BusinessId,\n        //                FlowId = context.FlowId,\n        //                StepId = targetStep.Id,\n        //                StepName = templateName,\n        //                MessageLogId = null,\n        //                ButtonIndex = context.ButtonIndex,\n        //                ContactPhone = context.ContactPhone,\n        //                Success = false,\n        //                ErrorMessage = $\"Template '{templateName}' not found for this WABA.\",\n        //                RawResponse = null,\n        //                ExecutedAt = DateTime.UtcNow,\n        //                RequestId = context.RequestId\n        //            });\n        //            await _dbContext.SaveChangesAsync();\n\n        //            return new NextStepResult { Success = false, Error = $\"Template '{templateName}' not found or not approved.\" };\n        //        }\n\n        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? \"en_US\" : meta.Language;\n\n        //        // 3.1) üß≠ Determine sender (provider + phoneNumberId) from context (source of truth)\n        //        var provider = (context.Provider ?? string.Empty).Trim().ToUpperInvariant();\n        //        if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n        //            return new NextStepResult { Success = false, Error = \"Provider is required for flow sends (PINNACLE or META_CLOUD).\" };\n\n        //        string? phoneNumberId = context.PhoneNumberId;\n\n        //        if (string.IsNullOrWhiteSpace(phoneNumberId))\n        //        {\n        //            // Fallback: pick the default/active number for this business + provider\n        //            phoneNumberId = await _dbContext.WhatsAppPhoneNumbers\n        //                .AsNoTracking()\n        //                .Where(n => n.BusinessId == context.BusinessId\n        //                            && n.IsActive\n        //                            && n.Provider.ToUpper() == provider)\n        //                .OrderByDescending(n => n.IsDefault)\n        //                .ThenBy(n => n.WhatsAppBusinessNumber)\n        //                .Select(n => n.PhoneNumberId)\n        //                .FirstOrDefaultAsync();\n\n        //            if (string.IsNullOrWhiteSpace(phoneNumberId))\n        //                return new NextStepResult { Success = false, Error = \"Missing PhoneNumberId (no default sender configured for this provider).\" };\n        //        }\n\n        //        // ‚îÄ‚îÄ ‚¨áÔ∏è PROFILE NAME INJECTION: build body args only if requested ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n        //        var args = new List<string>();\n        //        if (targetStep.UseProfileName && targetStep.ProfileNameSlot is int slot && slot >= 1)\n        //        {\n        //            // Load contact to get ProfileName/Name\n        //            var contact = await _dbContext.Contacts\n        //                .AsNoTracking()\n        //                .FirstOrDefaultAsync(c => c.BusinessId == context.BusinessId\n        //                                          && c.PhoneNumber == context.ContactPhone);\n\n        //            var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);\n        //            EnsureArgsLength(args, slot);\n        //            args[slot - 1] = greet; // 1-based slot -> 0-based index\n        //        }\n\n        //        // Build WA components only if we have body args\n        //        var components = new List<object>();\n        //        if (args.Count > 0)\n        //        {\n        //            components.Add(new\n        //            {\n        //                type = \"body\",\n        //                parameters = args.Select(a => new { type = \"text\", text = a ?? string.Empty }).ToList()\n        //            });\n        //        }\n        //        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n        //        var payload = new\n        //        {\n        //            messaging_product = \"whatsapp\",\n        //            to = context.ContactPhone,\n        //            type = \"template\",\n        //            template = new\n        //            {\n        //                name = templateName,\n        //                language = new { code = languageCode },\n        //                components\n        //            }\n        //        };\n\n        //        // 4) Send via explicit provider (deterministic signature)\n        //        var sendResult = await _messageEngineService.SendPayloadAsync(\n        //            context.BusinessId,\n        //            provider,               // explicit\n        //            payload,\n        //            phoneNumberId           // explicit\n        //        );\n\n        //        // 5) Snapshot buttons for robust click mapping later\n        //        string? buttonBundleJson = null;\n        //        if (targetStep.ButtonLinks?.Count > 0)\n        //        {\n        //            var bundle = targetStep.ButtonLinks\n        //                .OrderBy(b => b.ButtonIndex)\n        //                .Select(b => new\n        //                {\n        //                    i = b.ButtonIndex,\n        //                    t = b.ButtonText ?? \"\",\n        //                    ty = b.ButtonType ?? \"QUICK_REPLY\",\n        //                    v = b.ButtonValue ?? \"\",\n        //                    ns = b.NextStepId\n        //                })\n        //                .ToList();\n\n        //            buttonBundleJson = JsonSerializer.Serialize(bundle);\n        //        }\n\n        //        // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps\n        //        var messageLog = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = context.BusinessId,\n        //            RecipientNumber = context.ContactPhone,\n        //            CTAFlowConfigId = context.FlowId,\n        //            CTAFlowStepId = targetStep.Id,\n        //            FlowVersion = context.Version,\n        //            Source = \"flow\",\n        //            RefMessageId = context.MessageLogId,\n        //            CreatedAt = DateTime.UtcNow,\n        //            Status = sendResult.Success ? \"Sent\" : \"Failed\",\n        //            MessageId = sendResult.MessageId,\n        //            ErrorMessage = sendResult.ErrorMessage,\n        //            RawResponse = sendResult.RawResponse,\n        //            ButtonBundleJson = buttonBundleJson,\n        //            MessageContent = templateName,                      // NOT NULL\n        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null\n        //        };\n\n        //        _dbContext.MessageLogs.Add(messageLog);\n\n        //        // 7) Flow execution audit row\n        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = context.BusinessId,\n        //            FlowId = context.FlowId,\n        //            StepId = targetStep.Id,\n        //            StepName = templateName,\n        //            MessageLogId = messageLog.Id,\n        //            ButtonIndex = context.ButtonIndex,\n        //            ContactPhone = context.ContactPhone,\n        //            Success = sendResult.Success,\n        //            ErrorMessage = sendResult.ErrorMessage,\n        //            RawResponse = sendResult.RawResponse,\n        //            ExecutedAt = DateTime.UtcNow,\n        //            RequestId = context.RequestId\n        //        });\n\n        //        await _dbContext.SaveChangesAsync();\n\n        //        return new NextStepResult\n        //        {\n        //            Success = sendResult.Success,\n        //            Error = sendResult.ErrorMessage,\n        //            RedirectUrl = null\n        //        };\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        return new NextStepResult { Success = false, Error = ex.Message };\n        //    }\n        //}\n\n        public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)\n        {\n            try\n            {\n                // ‚îÄ‚îÄ local helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n                string ResolveGreeting(string? profileName, string? contactName)\n                {\n                    var s = (profileName ?? contactName)?.Trim();\n                    return string.IsNullOrEmpty(s) ? \"there\" : s;\n                }\n                void EnsureArgsLength(List<string> args, int slot1Based)\n                {\n                    while (args.Count < slot1Based) args.Add(string.Empty);\n                }\n                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n                // 1) URL-only buttons ‚Üí no WA send, just record and return redirect\n                if (context.ClickedButton != null &&\n                    context.ClickedButton.ButtonType?.Equals(\"URL\", StringComparison.OrdinalIgnoreCase) == true)\n                {\n                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = context.BusinessId,\n                        FlowId = context.FlowId,\n                        StepId = context.SourceStepId,\n                        StepName = \"URL_REDIRECT\",\n                        MessageLogId = context.MessageLogId,\n                        ButtonIndex = context.ButtonIndex,\n                        ContactPhone = context.ContactPhone,\n                        Success = true,\n                        ExecutedAt = DateTime.UtcNow,\n                        RequestId = context.RequestId\n                    });\n                    await _dbContext.SaveChangesAsync();\n\n                    return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };\n\n\n\n                }\n\n                // 2) Load next step in the same flow (no dedupe/loop guard ‚Äî always proceed)\n                var targetStep = await _dbContext.CTAFlowSteps\n                    .Include(s => s.ButtonLinks)\n                    .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&\n                                              s.CTAFlowConfigId == context.FlowId);\n\n                if (targetStep == null)\n                    return new NextStepResult { Success = false, Error = \"Target step not found.\" };\n\n                if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))\n                    return new NextStepResult { Success = false, Error = \"Target step has no template assigned.\" };\n\n                var templateName = targetStep.TemplateToSend.Trim();\n\n                // 3) Preflight the template (resolve language and catch 132001 early)\n                var meta = await _templateFetcherService.GetTemplateByNameAsync(\n                    context.BusinessId, templateName, includeButtons: true);\n\n                if (meta == null)\n                {\n                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = context.BusinessId,\n                        FlowId = context.FlowId,\n                        StepId = targetStep.Id,\n                        StepName = templateName,\n                        MessageLogId = null,\n                        ButtonIndex = context.ButtonIndex,\n                        ContactPhone = context.ContactPhone,\n                        Success = false,\n                        ErrorMessage = $\"Template '{templateName}' not found for this WABA.\",\n                        RawResponse = null,\n                        ExecutedAt = DateTime.UtcNow,\n                        RequestId = context.RequestId\n                    });\n                    await _dbContext.SaveChangesAsync();\n\n                    return new NextStepResult { Success = false, Error = $\"Template '{templateName}' not found or not approved.\" };\n                }\n\n                var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? \"en_US\" : meta.Language;\n\n                // 3.1) üî• Determine sender with failsafes (NO early return for missing context)\n                var provider = (context.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                var phoneNumberId = context.PhoneNumberId;\n\n                // If provider missing/invalid ‚Üí try active WhatsAppSettings (fast path)\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    var w = await _dbContext.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(x => x.BusinessId == context.BusinessId && x.IsActive)\n                        .OrderByDescending(x => x.UpdatedAt ?? x.CreatedAt)\n                        .FirstOrDefaultAsync();\n\n                    if (w != null)\n                    {\n                        provider = (w.Provider ?? \"\").Trim().ToUpperInvariant();\n                        if (string.IsNullOrWhiteSpace(phoneNumberId))\n                            phoneNumberId = w.PhoneNumberId;\n                    }\n                }\n\n                // If still missing provider ‚Üí hard resolve via numbers table\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    var pn = await _dbContext.WhatsAppPhoneNumbers\n                        .AsNoTracking()\n                        .Where(n => n.BusinessId == context.BusinessId && n.IsActive)\n                        .OrderByDescending(n => n.IsDefault)\n                        .ThenBy(n => n.WhatsAppBusinessNumber)\n                        .Select(n => new { n.Provider, n.PhoneNumberId })\n                        .FirstOrDefaultAsync();\n\n                    if (pn != null)\n                    {\n                        provider = (pn.Provider ?? \"\").Trim().ToUpperInvariant();\n                        if (string.IsNullOrWhiteSpace(phoneNumberId))\n                            phoneNumberId = pn.PhoneNumberId;\n                    }\n                }\n\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    return new NextStepResult { Success = false, Error = \"No active WhatsApp sender configured (provider could not be resolved).\" };\n\n                // Ensure we have a sender id\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                {\n                    phoneNumberId = await _dbContext.WhatsAppPhoneNumbers\n                        .AsNoTracking()\n                        .Where(n => n.BusinessId == context.BusinessId\n                                    && n.IsActive\n                                    && n.Provider.ToUpper() == provider)\n                        .OrderByDescending(n => n.IsDefault)\n                        .ThenBy(n => n.WhatsAppBusinessNumber)\n                        .Select(n => n.PhoneNumberId)\n                        .FirstOrDefaultAsync();\n\n                    if (string.IsNullOrWhiteSpace(phoneNumberId))\n                        return new NextStepResult { Success = false, Error = \"Missing PhoneNumberId (no default sender configured for this provider).\" };\n                }\n\n                // ‚îÄ‚îÄ Profile-name injection into body params (optional) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n                var args = new List<string>();\n                if (targetStep.UseProfileName && targetStep.ProfileNameSlot is int slot && slot >= 1)\n                {\n                    var contact = await _dbContext.Contacts\n                        .AsNoTracking()\n                        .FirstOrDefaultAsync(c => c.BusinessId == context.BusinessId\n                                                  && c.PhoneNumber == context.ContactPhone);\n\n                    var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);\n                    EnsureArgsLength(args, slot);\n                    args[slot - 1] = greet;\n                }\n\n                var components = new List<object>();\n                if (args.Count > 0)\n                {\n                    components.Add(new\n                    {\n                        type = \"body\",\n                        parameters = args.Select(a => new { type = \"text\", text = a ?? string.Empty }).ToList()\n                    });\n                }\n                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = context.ContactPhone,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = templateName,\n                        language = new { code = languageCode },\n                        components\n                    }\n                };\n\n                // 4) SEND (explicit provider + sender) ‚Äî always attempt the POST\n                _logger.LogInformation(\"‚û°Ô∏è SEND-INTENT flow={Flow} step={Step} tmpl={T} to={To} provider={Prov}/{Pnid}\",\n                    context.FlowId, targetStep.Id, templateName, context.ContactPhone, provider, phoneNumberId);\n\n                var sendResult = await _messageEngineService.SendPayloadAsync(\n                    context.BusinessId,\n                    provider,               // explicit\n                    payload,\n                    phoneNumberId           // explicit\n                );\n\n                // 5) Snapshot buttons for robust click mapping later\n                string? buttonBundleJson = null;\n                if (targetStep.ButtonLinks?.Count > 0)\n                {\n                    var bundle = targetStep.ButtonLinks\n                        .OrderBy(b => b.ButtonIndex)\n                        .Select(b => new\n                        {\n                            i = b.ButtonIndex,\n                            t = b.ButtonText ?? \"\",\n                            ty = b.ButtonType ?? \"QUICK_REPLY\",\n                            v = b.ButtonValue ?? \"\",\n                            ns = b.NextStepId\n                        })\n                        .ToList();\n\n                    buttonBundleJson = JsonSerializer.Serialize(bundle);\n                }\n\n                // 6) Write MessageLog\n                var messageLog = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = context.BusinessId,\n                    RecipientNumber = context.ContactPhone,\n                    CTAFlowConfigId = context.FlowId,\n                    CTAFlowStepId = targetStep.Id,\n                    FlowVersion = context.Version,\n                    Source = \"flow\",\n                    RefMessageId = context.MessageLogId,\n                    CreatedAt = DateTime.UtcNow,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    MessageId = sendResult.MessageId,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ButtonBundleJson = buttonBundleJson,\n                    MessageContent = templateName,\n                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null\n                };\n\n                _dbContext.MessageLogs.Add(messageLog);\n\n                // 7) Flow execution audit row\n                _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = context.BusinessId,\n                    FlowId = context.FlowId,\n                    StepId = targetStep.Id,\n                    StepName = templateName,\n                    MessageLogId = messageLog.Id,\n                    ButtonIndex = context.ButtonIndex,\n                    ContactPhone = context.ContactPhone,\n                    Success = sendResult.Success,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ExecutedAt = DateTime.UtcNow,\n                    RequestId = context.RequestId\n                });\n\n                await _dbContext.SaveChangesAsync();\n\n                return new NextStepResult\n                {\n                    Success = sendResult.Success,\n                    Error = sendResult.ErrorMessage,\n                    RedirectUrl = null\n                };\n            }\n            catch (Exception ex)\n            {\n                return new NextStepResult { Success = false, Error = ex.Message };\n            }\n        }\n\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/ICTAFlowService.cs",
      "sha256": "5ea1243676c853781cb165c52e3474658a6153a617ed9b22eabf5f961d40affe",
      "language": "csharp",
      "size": 4950,
      "content": "using xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public interface ICTAFlowService\n    {\n        // Create-only (draft)\n        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);\n\n        // Load flows (lists)\n        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);\n        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);\n\n        // Load flow (detail)\n        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId);  // for editor/view\n        Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId);          // alt payload\n\n        // Runtime\n        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText, string buttonType, string currentTemplateName, Guid? campaignId = null);\n        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);\n        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);\n        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);\n        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);\n\n        // Delete (only if not attached)\n        Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy);\n\n        // Publish\n        Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user);\n\n        // Attached campaigns (for usage checks / modal)\n        Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId);\n\n        // (Optional utility)\n        Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId);\n    }\n}\n\n\n//using xbytechat.api.Features.CTAFlowBuilder.DTOs;\n//using xbytechat.api.Features.CTAFlowBuilder.Models;\n//using xbytechat.api.Helpers;\n\n//namespace xbytechat.api.Features.CTAFlowBuilder.Services\n//{\n//    public interface ICTAFlowService\n//    {\n//        // ‚úÖ Used for flow creation and saving\n//        Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy);\n//        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);\n\n//        // ‚úÖ Load flows\n//        Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId);\n//        Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId);\n//        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);\n//        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);\n\n//        // ‚úÖ Load and manage flow steps\n//        Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId);\n\n\n//        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText,string buttonType,string currentTemplateName,Guid? campaignId = null);\n\n\n//        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);\n//        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);\n//        // ‚úÖ Runtime logic\n//        Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber);\n\n//        // ‚úÖ Flow management\n//        Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy);\n\n//        Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy);\n\n//        // ‚úÖ Editor loading (visual builder)\n//       // Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid id, Guid businessId);\n//        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId);\n//        Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId);\n//        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);\n//        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);\n\n//        public interface IFlowRuntimeService\n//        {\n//            Task<NextStepResult> ExecuteNextAsync(NextStepContext context);\n//        }\n//        Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId);\n//        Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId);\n//        //Task<FlowUpdateResult> UpdateVisualFlowAsync(Guid flowId, SaveVisualFlowDto dto, Guid businessId, string user);\n\n//        // Explicit publish after edits\n//        Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user);\n\n//        // Create a new draft copy when live flow is attached\n//        Task<Guid> ForkFlowAsync(Guid flowId, Guid businessId, string user);\n//    }\n//}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/IFlowRuntimeService.cs",
      "sha256": "8d2c05306af47b21e2651c822e6c24d58c7a7d650b2450c09ca229416bbce7c4",
      "language": "csharp",
      "size": 1142,
      "content": "using xbytechat.api.Features.CTAFlowBuilder.Models;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public interface IFlowRuntimeService\n    {\n        Task<NextStepResult> ExecuteNextAsync(NextStepContext context);\n\n    }\n    public record NextStepContext\n    {\n        public Guid BusinessId { get; set; }\n        public Guid FlowId { get; set; }\n        public int Version { get; set; }\n        public Guid SourceStepId { get; set; }\n        public Guid? TargetStepId { get; set; }\n        public short ButtonIndex { get; set; }\n        public Guid MessageLogId { get; set; }\n        public string ContactPhone { get; set; } = string.Empty;\n        public Guid RequestId { get; set; }\n        public FlowButtonLink? ClickedButton { get; set; }\n        public string? Provider { get; set; }          // \"META_CLOUD\" | \"PINNACLE\"\n        public string? PhoneNumberId { get; set; }\n            public bool AlwaysSend { get; set; } = true;\n    }\n\n    public record NextStepResult\n    {\n        public bool Success { get; set; }\n        public string? Error { get; set; }\n        public string? RedirectUrl { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/StepMatchingHelper.cs",
      "sha256": "3353c5195c81af5b7a26a5a7f648e6dc4504f54633d408220670d2dba65a5888",
      "language": "csharp",
      "size": 1818,
      "content": "using Serilog;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Tracking.Models;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public static class StepMatchingHelper\n    {\n        public static bool IsStepMatched(CTAFlowStep step, TrackingLog log, Contact? contact)\n        {\n            if (!string.IsNullOrWhiteSpace(step.RequiredSource) &&\n                !string.Equals(step.RequiredSource, log.SourceType, StringComparison.OrdinalIgnoreCase))\n            {\n                Log.Information(\"üö´ Step [{StepId}] skipped: RequiredSource '{Required}' ‚â† ClickedSource '{Actual}'\",\n                    step.Id, step.RequiredSource, log.SourceType);\n                return false;\n            }\n\n            if (!string.IsNullOrWhiteSpace(step.RequiredTag))\n            {\n                if (contact == null || contact.ContactTags == null || !contact.ContactTags.Any())\n                {\n                    Log.Information(\"üö´ Step [{StepId}] skipped: Contact or Tags missing (RequiredTag: {RequiredTag})\",\n                        step.Id, step.RequiredTag);\n                    return false;\n                }\n\n                var hasTag = contact.ContactTags.Any(ct =>\n                    string.Equals(ct.Tag.Name, step.RequiredTag, StringComparison.OrdinalIgnoreCase));\n\n                if (!hasTag)\n                {\n                    var contactTags = string.Join(\", \", contact.ContactTags.Select(ct => ct.Tag.Name));\n                    Log.Information(\"üö´ Step [{StepId}] skipped: Contact tags [{Tags}] do not include RequiredTag '{Required}'\",\n                        step.Id, contactTags, step.RequiredTag);\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n    }\n}\n"
    }
  ]
}
