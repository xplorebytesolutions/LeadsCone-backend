{
  "name": "xbytechat-api/Features/Tracking",
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/MessageLogsReportController.cs",
      "sha256": "57679ca179ec26b011a115fa136660702c25971ea0beb441c8805d2bdc911b49",
      "language": "csharp",
      "size": 10297,
      "content": "using System.Text;\nusing ClosedXML.Excel;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Shared; // for User.GetBusinessId()\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/report/message-logs\")]\n    [Authorize]\n    public sealed class MessageLogsReportController : ControllerBase\n    {\n        private readonly IMessageLogsReportService _service;\n\n        public MessageLogsReportController(IMessageLogsReportService service)\n            => _service = service;\n\n        [HttpPost(\"search\")]\n        [ProducesResponseType(typeof(PaginatedResponse<MessageLogListItemDto>), StatusCodes.Status200OK)]\n        [ProducesResponseType(StatusCodes.Status401Unauthorized)]\n        public async Task<IActionResult> Search([FromBody] MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var result = await _service.SearchAsync(businessId, q, ct);\n            return Ok(result);\n        }\n\n        [HttpPost(\"export/csv\")]\n        [Produces(\"text/csv\")]\n        public async Task<IActionResult> ExportCsv([FromBody] MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            // We’ll walk pages to get the full dataset (service clamps PageSize to <= 200).\n            var sb = new StringBuilder();\n\n            // Header\n            sb.AppendLine(string.Join(\",\", new[]\n            {\n                \"Time\",\"Recipient\",\"SenderId\",\"Channel\",\"Status\",\"Type\",\"Campaign\",\n                \"Body\",\"ProviderId\",\"DeliveredAt\",\"ReadAt\",\"Error\"\n            }.Select(EscapeCsv)));\n\n            var page = 1;\n            const int maxLoops = 10000; // safety\n            var totalWritten = 0;\n\n            while (page <= maxLoops)\n            {\n                var pageQuery = new MessageLogReportQueryDto\n                {\n                    FromUtc = q.FromUtc,\n                    ToUtc = q.ToUtc,\n                    Search = q.Search,\n                    Statuses = q.Statuses,\n                    Channels = q.Channels,\n                    SenderIds = q.SenderIds,\n                    MessageTypes = q.MessageTypes,\n                    CampaignId = q.CampaignId,\n                    SortBy = q.SortBy,\n                    SortDir = q.SortDir,\n                    Page = page,\n                    PageSize = 200 // max page supported by service\n                };\n\n                var res = await _service.SearchAsync(businessId, pageQuery, ct);\n                if (res.Items.Count == 0) break;\n\n                foreach (var r in res.Items)\n                {\n                    var time = r.SentAt ?? r.CreatedAt;\n                    var row = new[]\n                    {\n                        EscapeCsv(time.ToLocalTime().ToString(\"yyyy-MM-dd HH:mm:ss\")),\n                        EscapeCsv(r.RecipientNumber ?? \"\"),\n                        EscapeCsv(r.SenderId ?? \"\"),\n                        EscapeCsv(r.SourceChannel ?? \"\"),\n                        EscapeCsv(r.Status ?? \"\"),\n                        EscapeCsv(r.MessageType ?? \"\"),\n                        EscapeCsv(r.CampaignName ?? r.CampaignId?.ToString() ?? \"\"),\n                        EscapeCsv((r.MessageContent ?? \"\").ReplaceLineEndings(\" \")),\n                        EscapeCsv(r.ProviderMessageId ?? \"\"),\n                        EscapeCsv(r.DeliveredAt?.ToLocalTime().ToString(\"yyyy-MM-dd HH:mm:ss\") ?? \"\"),\n                        EscapeCsv(r.ReadAt?.ToLocalTime().ToString(\"yyyy-MM-dd HH:mm:ss\") ?? \"\"),\n                        EscapeCsv((r.ErrorMessage ?? \"\").ReplaceLineEndings(\" \"))\n                    };\n                    sb.AppendLine(string.Join(\",\", row));\n                }\n\n                totalWritten += res.Items.Count;\n\n                // stop when we’ve written everything\n                var total = res.TotalCount;\n                if (totalWritten >= total) break;\n\n                page++;\n            }\n\n            var bytes = Encoding.UTF8.GetBytes(sb.ToString());\n            var fileName =\n                $\"MessageLogs{(q.CampaignId.HasValue ? \"-\" + q.CampaignId.Value : \"\")}-{DateTime.UtcNow:yyyyMMddHHmmss}.csv\";\n\n            return File(bytes, \"text/csv\", fileName);\n\n            static string EscapeCsv(string s)\n            {\n                // Quote if contains comma, quote, or newline\n                if (s.Contains(',') || s.Contains('\"') || s.Contains('\\n') || s.Contains('\\r'))\n                {\n                    return $\"\\\"{s.Replace(\"\\\"\", \"\\\"\\\"\")}\\\"\";\n                }\n                return s;\n            }\n        }\n\n     \n        [HttpPost(\"export/pdf\")]\n        public IActionResult ExportPdfStub()\n        {\n            return StatusCode(StatusCodes.Status501NotImplemented, new ProblemDetails\n            {\n                Title = \"PDF export is not enabled\",\n                Detail = \"Implement in MessageLogsReportController.ExportPdf using a PDF library.\"\n            });\n        }\n\n        [HttpPost(\"export/xlsx\")]\n        [Produces(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")]\n        public async Task<IActionResult> ExportXlsx([FromBody] MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            // Page through all results using the same service used by the grid.\n            const int pageSize = 200; // service already clamps; keep explicit for clarity\n            var all = new List<MessageLogListItemDto>(capacity: pageSize * 5); // small pre-alloc\n\n            var page = 1;\n            while (true)\n            {\n                var pageQuery = new MessageLogReportQueryDto\n                {\n                    FromUtc = q.FromUtc,\n                    ToUtc = q.ToUtc,\n                    Search = q.Search,\n                    Statuses = q.Statuses,\n                    Channels = q.Channels,\n                    SenderIds = q.SenderIds,\n                    MessageTypes = q.MessageTypes,\n                    CampaignId = q.CampaignId,\n                    SortBy = q.SortBy,\n                    SortDir = q.SortDir,\n                    Page = page,\n                    PageSize = pageSize\n                };\n\n                var res = await _service.SearchAsync(businessId, pageQuery, ct);\n                if (res.Items.Count == 0) break;\n\n                all.AddRange(res.Items);\n\n                if (all.Count >= res.TotalCount) break; // done\n                page++;\n            }\n\n            // Build the workbook in memory\n            using var wb = new XLWorkbook();\n            var ws = wb.Worksheets.Add(\"MessageLogs\");\n\n            // Header\n            var headers = new[]\n            {\n        \"Time\",\"Recipient\",\"SenderId\",\"Channel\",\"Status\",\"Type\",\"Campaign\",\n        \"Body\",\"ProviderId\",\"DeliveredAt\",\"ReadAt\",\"Error\"\n    };\n            for (int c = 0; c < headers.Length; c++)\n                ws.Cell(1, c + 1).Value = headers[c];\n\n            // Simple header style\n            var headerRange = ws.Range(1, 1, 1, headers.Length);\n            headerRange.Style.Font.Bold = true;\n            headerRange.Style.Fill.BackgroundColor = XLColor.FromHtml(\"#F3F4F6\"); // light gray\n            headerRange.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n\n            // Rows\n            int r = 2;\n            foreach (var it in all)\n            {\n                var time = (it.SentAt ?? it.CreatedAt).ToLocalTime();\n\n                ws.Cell(r, 1).Value = time;\n                ws.Cell(r, 1).Style.DateFormat.Format = \"yyyy-mm-dd hh:mm:ss\";\n\n                ws.Cell(r, 2).Value = it.RecipientNumber ?? \"\";\n                ws.Cell(r, 3).Value = it.SenderId ?? \"\";\n                ws.Cell(r, 4).Value = it.SourceChannel ?? \"\";\n                ws.Cell(r, 5).Value = it.Status ?? \"\";\n                ws.Cell(r, 6).Value = it.MessageType ?? \"\";\n                ws.Cell(r, 7).Value = it.CampaignName ?? (it.CampaignId?.ToString() ?? \"\");\n\n                // Body/Errors as plain text to avoid newlines breaking rows\n                ws.Cell(r, 8).Value = (it.MessageContent ?? \"\").ReplaceLineEndings(\" \");\n                ws.Cell(r, 9).Value = it.ProviderMessageId ?? \"\";\n\n                if (it.DeliveredAt.HasValue)\n                {\n                    ws.Cell(r, 10).Value = it.DeliveredAt.Value.ToLocalTime();\n                    ws.Cell(r, 10).Style.DateFormat.Format = \"yyyy-mm-dd hh:mm:ss\";\n                }\n                else ws.Cell(r, 10).Value = \"\";\n\n                if (it.ReadAt.HasValue)\n                {\n                    ws.Cell(r, 11).Value = it.ReadAt.Value.ToLocalTime();\n                    ws.Cell(r, 11).Style.DateFormat.Format = \"yyyy-mm-dd hh:mm:ss\";\n                }\n                else ws.Cell(r, 11).Value = \"\";\n\n                ws.Cell(r, 12).Value = (it.ErrorMessage ?? \"\").ReplaceLineEndings(\" \");\n                r++;\n            }\n\n            // Fit columns\n            ws.Columns().AdjustToContents();\n\n            // Stream to client\n            using var ms = new MemoryStream();\n            wb.SaveAs(ms);\n            ms.Position = 0;\n\n            var fileName = $\"MessageLogs-{DateTime.UtcNow:yyyyMMddHHmmss}.xlsx\";\n            const string contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n            return File(ms.ToArray(), contentType, fileName);\n        }\n        [HttpGet(\"facets\")]\n        [ProducesResponseType(typeof(MessageLogFacetsDto), StatusCodes.Status200OK)]\n        [ProducesResponseType(StatusCodes.Status401Unauthorized)]\n        public async Task<IActionResult> Facets([FromQuery] int fromDays = 90, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var fromUtc = DateTime.UtcNow.AddDays(-Math.Abs(fromDays));\n            var facets = await _service.GetFacetsAsync(businessId, fromUtc, ct);\n            return Ok(facets);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingController.cs",
      "sha256": "e99ad95860e4414c4d2691b0ff365fd6ecd20d10848e5715bdac1cc9d0295521",
      "language": "csharp",
      "size": 6267,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api; // Your using for AppDbContext\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Worker; // Your using for DTOs\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking\")]\n    public class TrackingController : ControllerBase\n    {\n        private readonly ITrackingService _tracker;\n        private readonly AppDbContext _context;\n        private readonly IContactJourneyService _journeyService;\n        public TrackingController(ITrackingService tracker, AppDbContext context, IContactJourneyService journeyService)\n        {\n            _tracker = tracker;\n            _context = context;\n            _journeyService = journeyService;\n        }\n\n        [HttpGet(\"journeys/{campaignSendLogId}\")]\n        public async Task<IActionResult> GetJourney(Guid campaignSendLogId)\n        {\n            var journeyEvents = await _journeyService.GetJourneyEventsAsync(campaignSendLogId);\n            return Ok(journeyEvents);\n        }\n\n\n        //[HttpGet(\"redirect/{campaignSendLogId}\")]\n        //public async Task<IActionResult> TrackCampaignClick(\n        //    Guid campaignSendLogId,\n        //    [FromQuery] string type,\n        //    [FromQuery] string to)\n        //{\n        //    if (string.IsNullOrWhiteSpace(to))\n        //    {\n        //        return BadRequest(\"Missing redirect target URL.\");\n        //    }\n\n        //    var log = await _context.CampaignSendLogs.FindAsync(campaignSendLogId);\n        //    if (log != null)\n        //    {\n        //        log.IsClicked = true;\n        //        log.ClickedAt = DateTime.UtcNow;\n        //        log.ClickType = type;\n        //        log.IpAddress = HttpContext.Connection.RemoteIpAddress?.ToString();\n        //        await _context.SaveChangesAsync();\n        //    }\n\n        //    return Redirect(to);\n        //}\n\n        [HttpGet(\"redirect/{campaignSendLogId}\")]\n        public async Task<IActionResult> TrackCampaignClick(\n    Guid campaignSendLogId,\n    [FromQuery] string type,\n    [FromQuery] string to,\n    [FromQuery] int? idx = null,\n    CancellationToken ct = default)\n        {\n            if (string.IsNullOrWhiteSpace(to))\n                return BadRequest(\"Missing redirect target URL.\");\n\n            if (!Uri.TryCreate(to, UriKind.Absolute, out var destUri))\n                return BadRequest(\"Destination URL is invalid.\");\n\n            var clickType = string.IsNullOrWhiteSpace(type)\n                ? ClassifyClickType(destUri)\n                : type.Trim().ToLowerInvariant();\n\n            // Load parent CSL (tracked so we can update it)\n            var log = await _context.CampaignSendLogs.FindAsync(new object[] { campaignSendLogId }, ct);\n            if (log is not null)\n            {\n                var now = DateTime.UtcNow;\n                var ip = HttpContext.Connection.RemoteIpAddress?.ToString();\n                var ua = Request.Headers.UserAgent.ToString();\n\n                // First-click update on the send (idempotent enough for now)\n                log.IsClicked = true;\n                log.ClickedAt = now;\n                log.ClickType = clickType;\n                log.IpAddress = ip;\n\n                // Persist the click (ties to same run/session)\n                await _context.CampaignClickLogs.AddAsync(new CampaignClickLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignSendLogId = log.Id,\n                    CampaignId = log.CampaignId,// ?? Guid.Empty, // ✅ coalesce; make column Guid? to avoid this\n                    ContactId = log.ContactId,                // Guid? OK\n                    ButtonIndex = (short)(idx ?? 0),\n                    ButtonTitle = string.IsNullOrWhiteSpace(type) ? \"link\" : type,\n                    Destination = destUri.ToString(),\n                    ClickedAt = now,\n                    Ip = ip ?? \"\",\n                    UserAgent = ua ?? \"\",\n                    ClickType = clickType,\n                    RunId = log.RunId                      // remove if your schema doesn’t have RunId\n                }, ct);\n\n                await _context.SaveChangesAsync(ct);\n            }\n\n            return Redirect(destUri.ToString());\n        }\n\n        // Simple classifier used above\n        private static string ClassifyClickType(Uri u)\n        {\n            if (u == null) return \"web\";\n            var scheme = u.Scheme?.ToLowerInvariant() ?? \"\";\n            if (scheme == \"tel\") return \"call\";\n            if (scheme == \"whatsapp\") return \"whatsapp\";\n            if (scheme is \"http\" or \"https\")\n            {\n                var host = u.Host?.ToLowerInvariant() ?? \"\";\n                if (host.Contains(\"wa.me\") || host.Contains(\"api.whatsapp.com\"))\n                    return \"whatsapp\";\n            }\n            return \"web\";\n        }\n\n        /// <summary>\n        /// Gets detailed information for a specific tracking log entry.\n        /// </summary>\n        [HttpGet(\"logs/{id}/details\")]\n        public async Task<IActionResult> GetLogDetails(Guid id)\n        {\n            var result = await _tracker.GetLogDetailsAsync(id);\n            if (result == null)\n                return NotFound(\"Tracking log not found\");\n\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Retrieves click logs specifically related to automation flows.\n        /// </summary>\n        [HttpGet(\"flow-clicks\")]\n        public async Task<IActionResult> GetFlowClickLogs()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid or missing business ID\");\n\n            var logs = await _tracker.GetFlowClickLogsAsync(businessId);\n\n            var dtoList = logs.Select(x => new\n            {\n                x.Id,\n                x.StepId,\n                x.ContactPhone,\n                x.ButtonText,\n                x.TemplateId,\n                x.FollowUpSent,\n                x.ClickedAt\n            });\n\n            return Ok(dtoList);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingViewerController.cs",
      "sha256": "6dfeff85fe69af455c90c7ae2ad1fd0614866359c0eaee39cf101ca67b819507",
      "language": "csharp",
      "size": 1584,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking/logs\")]\n    public class TrackingViewerController : ControllerBase\n    {\n        private readonly AppDbContext _context;\n\n        public TrackingViewerController(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll([FromQuery] Guid? campaignId = null)\n        {\n            var query = _context.TrackingLogs\n                .Include(t => t.Campaign) // Optional\n                .Include(t => t.Contact)  // Optional\n                .OrderByDescending(t => t.ClickedAt)\n                .AsQueryable();\n\n            if (campaignId.HasValue)\n                query = query.Where(t => t.CampaignId == campaignId);\n\n            var results = await query\n                .Select(t => new\n                {\n                    t.Id,\n                    t.ContactPhone,\n                    ContactName = t.Contact != null ? t.Contact.Name : \"(N/A)\",\n                    t.ButtonText,\n                    t.CTAType,\n                    t.SourceType,\n                    t.ClickedAt,\n                    t.DeviceType,\n                    t.Country,\n                    CampaignName = t.Campaign != null ? t.Campaign.Name : \"(Unknown)\"\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = results });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/JourneyEventDto.cs",
      "sha256": "34abc81cfaea73e66ebb64431d3723ede8e2ac5cab0fcd6e8f4a1b2bbfe20320",
      "language": "csharp",
      "size": 727,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class JourneyEventDto\n    {\n        public DateTime Timestamp { get; set; }\n        public string Source { get; set; } = \"System\"; // System/User/Provider\n        public string EventType { get; set; } = \"\";    // MessageSent/Delivered/Read/ButtonClicked/FlowStep/FlowSend/Redirect/Error\n        public string Title { get; set; } = \"\";\n        public string Details { get; set; } = \"\";\n        public Guid? StepId { get; set; }\n        public string? StepName { get; set; }\n        public int? ButtonIndex { get; set; }\n        public string? ButtonTitle { get; set; }\n        public string? Url { get; set; }\n        public string? TemplateName { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/JourneyResponseDto.cs",
      "sha256": "0dd5d4a7faf319e281c5c96d6a7164a6e763aba0de03a617e58165196f48dffa",
      "language": "csharp",
      "size": 549,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class JourneyResponseDto\n    {\n        public string CampaignType { get; set; } = \"dynamic_url\"; // or \"flow\"\n        public string? FlowName { get; set; }\n        public Guid? FlowId { get; set; }\n        public Guid CampaignId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactPhone { get; set; } = \"\";\n        public List<JourneyEventDto> Events { get; set; } = new();\n        public string? LeftOffAt { get; set; }  // step title or reason\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/MessageLogFacetsDto.cs",
      "sha256": "78f9fb1561eb81fa5af81dd2df22164d18841f71475f5d10400f18a702c8fa0f",
      "language": "csharp",
      "size": 516,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public sealed class MessageLogFacetsDto\n    {\n        public string[] WabaIds { get; init; } = Array.Empty<string>();     // WhatsAppBusinessNumber\n        public string[] SenderIds { get; init; } = Array.Empty<string>();   // Campaign.PhoneNumberId\n        public string[] Channels { get; init; } = Array.Empty<string>();    // provider (e.g., META, PINNACLE)\n        public string[] Statuses { get; init; } = Array.Empty<string>();    // message status\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/MessageLogReportQueryDto.cs",
      "sha256": "d92aa8928329edd484bc7c51d8c0be8b7adad6acf6e1996007b37f993214c4aa",
      "language": "csharp",
      "size": 1843,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public sealed class MessageLogReportQueryDto\n    {\n        public DateTime? FromUtc { get; set; }\n        public DateTime? ToUtc { get; set; }\n        public string? Search { get; set; }                 // phone or text contains\n        public string[]? Statuses { get; set; }             // Sent/Delivered/Read/Failed etc.\n        public string[]? Channels { get; set; }             // meta_cloud/sms/email…\n        public string[]? SenderIds { get; set; }            // phone_number_id\n        public string[]? MessageTypes { get; set; }         // text/image/template…\n        public Guid? CampaignId { get; set; }               // optional scope\n\n        public string? SortBy { get; set; } = \"SentAt\";     // server-whitelisted\n        public string? SortDir { get; set; } = \"desc\";      // asc|desc\n\n        public int Page { get; set; } = 1;\n        public int PageSize { get; set; } = 25;\n    }\n\n    public sealed class MessageLogListItemDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }\n\n        public string? RecipientNumber { get; set; }\n        public string? SenderId { get; set; }\n        public string? SourceChannel { get; set; }\n        public string? Status { get; set; }\n        public string? MessageType { get; set; }\n\n        public string? MessageContent { get; set; }\n        public string? TemplateName { get; set; }\n        public string? ProviderMessageId { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDetailsDto.cs",
      "sha256": "e27d7a86aea38ec1fef0aaf6d4d6c208e2481cfaf7033c57fa8da1c81d2c693c",
      "language": "csharp",
      "size": 453,
      "content": "using xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDetailsDto\n    {\n        public TrackingLogDto Tracking { get; set; } = new();\n        public ContactDto? Contact { get; set; }\n        public CampaignDto? Campaign { get; set; }\n        public MessageLogDto? MessageLog { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDto.cs",
      "sha256": "bae94801851bba1bbeb94d60e81f2d20efd13b86be1391265098462d82a3c762",
      "language": "csharp",
      "size": 1798,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDto\n    {\n        // 🧩 Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // 👤 CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n\n        // 🔗 Source Info\n        public string SourceType { get; set; } = string.Empty; // e.g. \"campaign\", \"reminder\", \"bot\"\n        public Guid? SourceId { get; set; }\n\n        // 🔘 CTA Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // 📨 Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n\n        // 🧠 Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n        public DateTime? ClickedAt { get; set; } = DateTime.UtcNow;\n        // 📡 Tracking\n        public string? IPAddress { get; set; }\n        public string? Browser { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 🔖 Session context\n        public string? SessionId { get; set; }\n        public string? ThreadId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Guid? CampaignSendLogId { get; set; }\n\n        public string RawJson { get; set; } = string.Empty; // used in queue method\n        public DateTime EnqueuedAt { get; set; } // used in queue method\n        public string? NextStepMatched { get; set; } // ✅ Add this if not already there\n\n        public string? TemplateName { get; set; } // ✅ Needed for follow-up matcher\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Models/TrackingLog.cs",
      "sha256": "ce8da394901366ef9d5d9b32a338d7a49d6b8d06eb1f911e89e02296506b4281",
      "language": "csharp",
      "size": 2252,
      "content": "using xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.Tracking.Models;\nnamespace xbytechat.api.Features.Tracking.Models\n{\n    public class TrackingLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // 🧩 Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // 👤 CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n        public Contact? Contact { get; set; } // ✅ NEW\n\n        // 🔗 Source Info\n        public string SourceType { get; set; } = string.Empty;\n        public Guid? SourceId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; } // ✅ NEW\n\n        public Guid? CampaignSendLogId { get; set; }\n        public CampaignSendLog? CampaignSendLog { get; set; } // ✅ Optional\n\n        // 🔘 Button Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // 📨 Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; } // ✅ Optional\n\n        // 🧠 Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n\n        // 🕒 Audit Trail\n        public DateTime ClickedAt { get; set; } = DateTime.UtcNow;\n        public string? IPAddress { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 🔖 Follow-up & Analytics\n        public bool FollowUpSent { get; set; } = false;\n        public string? LastInteractionType { get; set; }\n\n        // 🧵 Journey Tracking\n        public Guid? SessionId { get; set; }\n        public Guid? ThreadId { get; set; }\n        public Guid? StepId { get; set; } // ✅ Link to CTAFlowStep for CTA Flow tracking\n\n       //  public string? NextStepMatched { get; set; } // Logs which template system resolved\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/ContactJourneyService.cs",
      "sha256": "616caf304202b708ece31d18cf8416d3eff2b423d80b8e3edad172ccaaf292e1",
      "language": "csharp",
      "size": 33572,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Tracking.DTOs; // Updated namespace\n// Add other necessary using statements for your project\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class ContactJourneyService : IContactJourneyService\n    {\n        private readonly AppDbContext _context;\n\n        public ContactJourneyService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n\n        //public async Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId)\n        //{\n        //    var resp = new JourneyResponseDto();\n        //    var events = new List<JourneyEventDto>();\n\n        //    // 0) Load the selected send\n        //    var sentLog = await _context.CampaignSendLogs\n        //        .AsNoTracking()\n        //        .Include(x => x.Campaign)\n        //        .Include(x => x.Contact)\n        //        .FirstOrDefaultAsync(x => x.Id == initialCampaignSendLogId);\n\n        //    // Require a fully-linked send (campaign + contact) for Journey\n        //    // CampaignId is non-nullable now; only check navs + ContactId\n        //    if (sentLog is null || sentLog.Campaign is null || sentLog.Contact is null || sentLog.ContactId == null)\n        //    {\n        //        resp.Events = events;\n        //        return resp;\n        //    }\n\n        //    // Unwrap once into non-nullable locals\n        //    var campaignId = sentLog.CampaignId;          // Guid (non-nullable)\n        //    var contactId = sentLog.ContactId.Value;     // Guid (we ensured not null above)\n\n        //    resp.CampaignId = campaignId;\n        //    resp.ContactId = contactId;\n        //    resp.ContactPhone = sentLog.Contact.PhoneNumber ?? \"\";\n        //    resp.CampaignType = sentLog.CTAFlowConfigId.HasValue ? \"flow\" : \"dynamic_url\";\n        //    resp.FlowId = sentLog.CTAFlowConfigId;\n\n        //    // 1) Session window for THIS run of the campaign to THIS contact\n        //    var sessionStart = sentLog.SentAt ?? sentLog.CreatedAt;\n\n        //    // next send to same contact for same campaign\n        //    var nextSameCampaignAt = await _context.CampaignSendLogs\n        //        .AsNoTracking()\n        //        .Where(x => x.ContactId == contactId &&\n        //                    x.CampaignId == campaignId &&\n        //                    x.CreatedAt > sessionStart)\n        //        .OrderBy(x => x.CreatedAt)\n        //        .Select(x => (DateTime?)x.CreatedAt)\n        //        .FirstOrDefaultAsync();\n\n        //    // next send to same contact for same flow (if this is a flow)\n        //    DateTime? nextSameFlowAt = null;\n        //    if (sentLog.CTAFlowConfigId.HasValue)\n        //    {\n        //        var flowId = sentLog.CTAFlowConfigId.Value;\n        //        nextSameFlowAt = await _context.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(x => x.ContactId == contactId &&\n        //                        x.CTAFlowConfigId == flowId &&\n        //                        x.CreatedAt > sessionStart)\n        //            .OrderBy(x => x.CreatedAt)\n        //            .Select(x => (DateTime?)x.CreatedAt)\n        //            .FirstOrDefaultAsync();\n        //    }\n\n        //    // session end = earliest “next run” OR +24h cap\n        //    var sessionEnd = new[] { nextSameCampaignAt, nextSameFlowAt }\n        //        .Where(dt => dt.HasValue)\n        //        .Select(dt => dt!.Value)\n        //        .DefaultIfEmpty(sessionStart.AddHours(24))\n        //        .Min();\n\n        //    // 2) Initial \"sent\" + statuses from CSL\n        //    events.Add(new JourneyEventDto\n        //    {\n        //        Timestamp = sessionStart,\n        //        Source = \"System\",\n        //        EventType = \"MessageSent\",\n        //        Title = $\"Campaign '{sentLog.Campaign?.Name ?? \"Campaign\"}' sent\",\n        //        Details = $\"Template '{sentLog.TemplateId}' to {resp.ContactPhone}\",\n        //        TemplateName = sentLog.TemplateId\n        //    });\n\n        //    if (sentLog.DeliveredAt is { } d1 && d1 >= sessionStart && d1 < sessionEnd)\n        //        events.Add(new JourneyEventDto\n        //        {\n        //            Timestamp = d1,\n        //            Source = \"Provider\",\n        //            EventType = \"Delivered\",\n        //            Title = \"Message delivered\",\n        //            Details = $\"Delivered to {resp.ContactPhone}\",\n        //            TemplateName = sentLog.TemplateId\n        //        });\n\n        //    if (sentLog.ReadAt is { } r1 && r1 >= sessionStart && r1 < sessionEnd)\n        //        events.Add(new JourneyEventDto\n        //        {\n        //            Timestamp = r1,\n        //            Source = \"Provider\",\n        //            EventType = \"Read\",\n        //            Title = \"Message read\",\n        //            Details = $\"Read by {resp.ContactPhone}\",\n        //            TemplateName = sentLog.TemplateId\n        //        });\n\n        //    // 3) URL clicks for THIS send within the window\n        //    var urlClicksInitial = await _context.CampaignClickLogs\n        //        .AsNoTracking()\n        //        .Where(c => c.CampaignSendLogId == sentLog.Id &&\n        //                    c.ClickedAt >= sessionStart &&\n        //                    c.ClickedAt < sessionEnd)\n        //        .OrderBy(c => c.ClickedAt)\n        //        .ToListAsync();\n\n        //    foreach (var c in urlClicksInitial)\n        //    {\n        //        events.Add(new JourneyEventDto\n        //        {\n        //            Timestamp = c.ClickedAt,\n        //            Source = \"User\",\n        //            EventType = \"ButtonClicked\",\n        //            Title = $\"Clicked URL Button: '{c.ButtonTitle}'\",\n        //            Details = $\"Redirected to {c.Destination}\",\n        //            ButtonIndex = c.ButtonIndex,\n        //            ButtonTitle = c.ButtonTitle,\n        //            Url = c.Destination\n        //        });\n        //    }\n\n        //    // 4) FLOW chain (if any) scoped to THIS session window\n        //    if (sentLog.CTAFlowConfigId.HasValue)\n        //    {\n        //        var flowId = sentLog.CTAFlowConfigId.Value;\n\n        //        // Flow label\n        //        resp.FlowName = await _context.CTAFlowConfigs\n        //            .AsNoTracking()\n        //            .Where(f => f.Id == flowId)\n        //            .Select(f => f.FlowName)\n        //            .FirstOrDefaultAsync();\n\n        //        // All flow sends (CSLs) for same contact+flow within the window\n        //        var flowCslChain = await _context.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(csl => csl.BusinessId == sentLog.BusinessId &&\n        //                          csl.ContactId == contactId &&\n        //                          csl.CTAFlowConfigId == flowId &&\n        //                          csl.CreatedAt >= sessionStart &&\n        //                          csl.CreatedAt < sessionEnd)\n        //            .OrderBy(csl => csl.CreatedAt)\n        //            .Select(csl => new\n        //            {\n        //                csl.Id,\n        //                csl.MessageLogId,\n        //                csl.SentAt,\n        //                csl.CreatedAt,\n        //                csl.TemplateId,\n        //                csl.CTAFlowStepId,\n        //                csl.DeliveredAt,\n        //                csl.ReadAt\n        //            })\n        //            .ToListAsync();\n\n        //        var chainCslIds = flowCslChain.Select(x => x.Id).ToList();\n        //        var chainMsgLogIds = flowCslChain\n        //            .Where(x => x.MessageLogId.HasValue)\n        //            .Select(x => x.MessageLogId!.Value)\n        //            .ToList();\n\n        //        var execByCsl = await _context.FlowExecutionLogs\n        //            .AsNoTracking()\n        //            .Where(f => f.CampaignSendLogId.HasValue &&\n        //                        chainCslIds.Contains(f.CampaignSendLogId.Value) &&\n        //                        f.ExecutedAt >= sessionStart &&\n        //                        f.ExecutedAt < sessionEnd)\n        //            .OrderBy(f => f.ExecutedAt)\n        //            .ToListAsync();\n\n        //        var execByMsg = chainMsgLogIds.Count == 0\n        //            ? new List<FlowExecutionLog>()\n        //            : await _context.FlowExecutionLogs\n        //                .AsNoTracking()\n        //                .Where(f => f.MessageLogId.HasValue &&\n        //                            chainMsgLogIds.Contains(f.MessageLogId.Value) &&\n        //                            f.ExecutedAt >= sessionStart &&\n        //                            f.ExecutedAt < sessionEnd)\n        //                .OrderBy(f => f.ExecutedAt)\n        //                .ToListAsync();\n\n        //        // Phone fallback (strictly within the session window; accept + or digits-only)\n        //        var phoneA = resp.ContactPhone ?? \"\";\n        //        var phoneB = phoneA.StartsWith(\"+\") ? phoneA[1..] : \"+\" + phoneA;\n\n        //        var execByPhone = await _context.FlowExecutionLogs\n        //            .AsNoTracking()\n        //            .Where(f => f.BusinessId == sentLog.BusinessId &&\n        //                        f.FlowId == flowId &&\n        //                        (f.ContactPhone == phoneA || f.ContactPhone == phoneB) &&\n        //                        f.ExecutedAt >= sessionStart &&\n        //                        f.ExecutedAt < sessionEnd)\n        //            .OrderBy(f => f.ExecutedAt)\n        //            .ToListAsync();\n\n        //        var flowExec = execByCsl.Concat(execByMsg).Concat(execByPhone)\n        //            .GroupBy(x => x.Id)\n        //            .Select(g => g.First())\n        //            .OrderBy(x => x.ExecutedAt)\n        //            .ToList();\n\n        //        foreach (var fe in flowExec)\n        //        {\n        //            if (!string.IsNullOrWhiteSpace(fe.TriggeredByButton))\n        //            {\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = fe.ExecutedAt,\n        //                    Source = \"User\",\n        //                    EventType = \"ButtonClicked\",\n        //                    Title = $\"Clicked Quick Reply: '{fe.TriggeredByButton}'\",\n        //                    Details = string.IsNullOrWhiteSpace(fe.TemplateName)\n        //                        ? $\"Advanced in flow at step '{fe.StepName}'\"\n        //                        : $\"Triggered next template: '{fe.TemplateName}'\",\n        //                    StepId = fe.StepId,\n        //                    StepName = fe.StepName,\n        //                    ButtonIndex = fe.ButtonIndex,\n        //                    ButtonTitle = fe.TriggeredByButton,\n        //                    TemplateName = fe.TemplateName\n        //                });\n        //            }\n\n        //            if (!string.IsNullOrWhiteSpace(fe.TemplateName))\n        //            {\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = fe.ExecutedAt,\n        //                    Source = \"System\",\n        //                    EventType = \"FlowSend\",\n        //                    Title = $\"Flow sent template '{fe.TemplateName}'\",\n        //                    Details = $\"Step '{fe.StepName}'\",\n        //                    StepId = fe.StepId,\n        //                    StepName = fe.StepName,\n        //                    TemplateName = fe.TemplateName\n        //                });\n        //            }\n        //        }\n\n        //        // Include the flow CSLs themselves + statuses (within window)\n        //        foreach (var csl in flowCslChain.Where(x => x.Id != sentLog.Id))\n        //        {\n        //            var ts = csl.SentAt ?? csl.CreatedAt;\n\n        //            events.Add(new JourneyEventDto\n        //            {\n        //                Timestamp = ts,\n        //                Source = \"System\",\n        //                EventType = \"FlowSend\",\n        //                Title = $\"Flow sent template '{csl.TemplateId}'\",\n        //                Details = csl.CTAFlowStepId.HasValue ? $\"Step: {csl.CTAFlowStepId}\" : null,\n        //                StepId = csl.CTAFlowStepId,\n        //                TemplateName = csl.TemplateId\n        //            });\n\n        //            if (csl.DeliveredAt is { } d2 && d2 >= sessionStart && d2 < sessionEnd)\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = d2,\n        //                    Source = \"Provider\",\n        //                    EventType = \"Delivered\",\n        //                    Title = \"Message delivered\",\n        //                    Details = \"\",\n        //                    TemplateName = csl.TemplateId,\n        //                    StepId = csl.CTAFlowStepId\n        //                });\n\n        //            if (csl.ReadAt is { } r2 && r2 >= sessionStart && r2 < sessionEnd)\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = r2,\n        //                    Source = \"Provider\",\n        //                    EventType = \"Read\",\n        //                    Title = \"Message read\",\n        //                    Details = \"\",\n        //                    TemplateName = csl.TemplateId,\n        //                    StepId = csl.CTAFlowStepId\n        //                });\n        //        }\n\n        //        // URL clicks during the flow (within window)\n        //        if (chainCslIds.Count > 0)\n        //        {\n        //            var flowClicks = await _context.CampaignClickLogs\n        //                .AsNoTracking()\n        //                .Where(c => chainCslIds.Contains(c.CampaignSendLogId) &&\n        //                            c.ClickedAt >= sessionStart &&\n        //                            c.ClickedAt < sessionEnd)\n        //                .OrderBy(c => c.ClickedAt)\n        //                .ToListAsync();\n\n        //            foreach (var c in flowClicks)\n        //            {\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = c.ClickedAt,\n        //                    Source = \"User\",\n        //                    EventType = \"ButtonClicked\",\n        //                    Title = $\"Clicked URL: '{c.ButtonTitle}'\",\n        //                    Details = $\"Redirected to {c.Destination}\",\n        //                    ButtonIndex = c.ButtonIndex,\n        //                    ButtonTitle = c.ButtonTitle,\n        //                    Url = c.Destination\n        //                });\n        //            }\n        //        }\n\n        //        // Where the user left off in this session\n        //        var lastFlowEvent = events\n        //            .Where(e => e.EventType == \"FlowSend\" || e.EventType == \"ButtonClicked\")\n        //            .OrderBy(e => e.Timestamp)\n        //            .LastOrDefault();\n\n        //        resp.LeftOffAt = lastFlowEvent?.StepName ?? lastFlowEvent?.Title;\n        //    }\n\n        //    resp.Events = events.OrderBy(e => e.Timestamp).ToList();\n        //    return resp;\n        //}\n        public async Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId)\n        {\n            var resp = new JourneyResponseDto { Events = new List<JourneyEventDto>() };\n            var events = resp.Events;\n\n            // 0) Load the selected send (campaign required; contact optional)\n            var sentLog = await _context.CampaignSendLogs\n                .AsNoTracking()\n                .Include(x => x.Campaign)\n                .Include(x => x.Contact)\n                .FirstOrDefaultAsync(x => x.Id == initialCampaignSendLogId);\n\n            if (sentLog is null || sentLog.Campaign is null)\n                return resp;\n\n            // Envelope (CampaignId is non-nullable now)\n            var campaignId = sentLog.CampaignId;\n            resp.CampaignId = campaignId;\n            resp.CampaignType = sentLog.CTAFlowConfigId.HasValue ? \"flow\" : \"dynamic_url\";\n            resp.FlowId = sentLog.CTAFlowConfigId;\n\n            if (sentLog.ContactId.HasValue)\n                resp.ContactId = sentLog.ContactId.Value;\n\n            // ---- Resolve a phone for display/flow fallback --------------------------------------------\n            string? phone = sentLog.Contact?.PhoneNumber;\n\n            // via MessageLog\n            if (string.IsNullOrWhiteSpace(phone) && sentLog.MessageLogId.HasValue)\n            {\n                phone = await _context.MessageLogs.AsNoTracking()\n                    .Where(m => m.Id == sentLog.MessageLogId.Value && m.BusinessId == sentLog.BusinessId)\n                    .Select(m => m.RecipientNumber)\n                    .FirstOrDefaultAsync();\n            }\n\n            // via Recipient → Contact or AudienceMember\n            if (string.IsNullOrWhiteSpace(phone) && sentLog.RecipientId != Guid.Empty)\n            {\n                var rec = await _context.CampaignRecipients.AsNoTracking()\n                    .Where(r => r.Id == sentLog.RecipientId)\n                    .Select(r => new { r.ContactId, r.AudienceMemberId })\n                    .FirstOrDefaultAsync();\n\n                if (rec is not null)\n                {\n                    if (rec.ContactId.HasValue)\n                        phone = await _context.Contacts.AsNoTracking()\n                            .Where(c => c.Id == rec.ContactId.Value)\n                            .Select(c => c.PhoneNumber)\n                            .FirstOrDefaultAsync();\n                    else if (rec.AudienceMemberId.HasValue)\n                        phone = await _context.AudiencesMembers.AsNoTracking()\n                            .Where(a => a.Id == rec.AudienceMemberId.Value)\n                            .Select(a => a.PhoneE164)\n                            .FirstOrDefaultAsync();\n                }\n            }\n\n            resp.ContactPhone = phone ?? \"\";\n\n            // ---- 1) Session window ---------------------------------------------------------------------\n            var sessionStart = sentLog.SentAt ?? sentLog.CreatedAt;\n\n            DateTime sessionEnd;\n\n            if (sentLog.ContactId.HasValue)\n            {\n                var contactId = sentLog.ContactId.Value;\n\n                var nextSameCampaignAt = await _context.CampaignSendLogs.AsNoTracking()\n                    .Where(x => x.ContactId == contactId &&\n                                x.CampaignId == campaignId &&\n                                x.CreatedAt > sessionStart)\n                    .OrderBy(x => x.CreatedAt)\n                    .Select(x => (DateTime?)x.CreatedAt)\n                    .FirstOrDefaultAsync();\n\n                DateTime? nextSameFlowAt = null;\n                if (sentLog.CTAFlowConfigId.HasValue)\n                {\n                    var flowId = sentLog.CTAFlowConfigId.Value;\n                    nextSameFlowAt = await _context.CampaignSendLogs.AsNoTracking()\n                        .Where(x => x.ContactId == contactId &&\n                                    x.CTAFlowConfigId == flowId &&\n                                    x.CreatedAt > sessionStart)\n                        .OrderBy(x => x.CreatedAt)\n                        .Select(x => (DateTime?)x.CreatedAt)\n                        .FirstOrDefaultAsync();\n                }\n\n                sessionEnd = new[] { nextSameCampaignAt, nextSameFlowAt }\n                    .Where(dt => dt.HasValue)\n                    .Select(dt => dt!.Value)\n                    .DefaultIfEmpty(sessionStart.AddHours(24))\n                    .Min();\n            }\n            else\n            {\n                // No ContactId: keep it simple and robust\n                sessionEnd = sessionStart.AddHours(24);\n            }\n\n            // ---- 2) Initial \"sent\" + statuses from CSL -------------------------------------------------\n            events.Add(new JourneyEventDto\n            {\n                Timestamp = sessionStart,\n                Source = \"System\",\n                EventType = \"MessageSent\",\n                Title = $\"Campaign '{sentLog.Campaign?.Name ?? \"Campaign\"}' sent\",\n                Details = string.IsNullOrWhiteSpace(resp.ContactPhone) ? null :\n                               $\"Template '{sentLog.TemplateId}' to {resp.ContactPhone}\",\n                TemplateName = sentLog.TemplateId\n            });\n\n            if (sentLog.DeliveredAt is { } d1 && d1 >= sessionStart && d1 < sessionEnd)\n                events.Add(new JourneyEventDto\n                {\n                    Timestamp = d1,\n                    Source = \"Provider\",\n                    EventType = \"Delivered\",\n                    Title = \"Message delivered\",\n                    Details = string.IsNullOrWhiteSpace(resp.ContactPhone) ? null : $\"Delivered to {resp.ContactPhone}\",\n                    TemplateName = sentLog.TemplateId\n                });\n\n            if (sentLog.ReadAt is { } r1 && r1 >= sessionStart && r1 < sessionEnd)\n                events.Add(new JourneyEventDto\n                {\n                    Timestamp = r1,\n                    Source = \"Provider\",\n                    EventType = \"Read\",\n                    Title = \"Message read\",\n                    Details = string.IsNullOrWhiteSpace(resp.ContactPhone) ? null : $\"Read by {resp.ContactPhone}\",\n                    TemplateName = sentLog.TemplateId\n                });\n\n            // ---- 3) URL clicks for THIS send within the window ----------------------------------------\n            var urlClicksInitial = await _context.CampaignClickLogs\n                .AsNoTracking()\n                .Where(c => c.CampaignSendLogId == sentLog.Id &&\n                            c.ClickedAt >= sessionStart && c.ClickedAt < sessionEnd)\n                .OrderBy(c => c.ClickedAt)\n                .ToListAsync();\n\n            foreach (var c in urlClicksInitial)\n            {\n                events.Add(new JourneyEventDto\n                {\n                    Timestamp = c.ClickedAt,\n                    Source = \"User\",\n                    EventType = \"ButtonClicked\",\n                    Title = $\"Clicked URL Button: '{c.ButtonTitle}'\",\n                    Details = $\"Redirected to {c.Destination}\",\n                    ButtonIndex = c.ButtonIndex,\n                    ButtonTitle = c.ButtonTitle,\n                    Url = c.Destination\n                });\n            }\n\n            // ---- 4) FLOW chain (if any) ---------------------------------------------------------------\n            if (sentLog.CTAFlowConfigId.HasValue)\n            {\n                var flowId = sentLog.CTAFlowConfigId.Value;\n\n                resp.FlowName = await _context.CTAFlowConfigs.AsNoTracking()\n                    .Where(f => f.Id == flowId)\n                    .Select(f => f.FlowName)\n                    .FirstOrDefaultAsync();\n\n                // Build base query for CSLs in this business/flow within the window\n                var flowCslQuery = _context.CampaignSendLogs.AsNoTracking()\n                    .Where(csl => csl.BusinessId == sentLog.BusinessId &&\n                                  csl.CTAFlowConfigId == flowId &&\n                                  csl.CreatedAt >= sessionStart &&\n                                  csl.CreatedAt < sessionEnd);\n\n                // If we have ContactId, match on it; otherwise match by phone via MessageLogs\n                List<Guid> chainCslIds;\n                if (sentLog.ContactId.HasValue)\n                {\n                    var contactId = sentLog.ContactId.Value;\n                    chainCslIds = await flowCslQuery.Where(csl => csl.ContactId == contactId)\n                        .OrderBy(csl => csl.CreatedAt)\n                        .Select(csl => csl.Id)\n                        .ToListAsync();\n                }\n                else if (!string.IsNullOrWhiteSpace(phone))\n                {\n                    var msgIdsForPhone = await _context.MessageLogs.AsNoTracking()\n                        .Where(m => m.BusinessId == sentLog.BusinessId &&\n                                    m.RecipientNumber == phone &&\n                                    m.CreatedAt >= sessionStart && m.CreatedAt < sessionEnd)\n                        .Select(m => m.Id)\n                        .ToListAsync();\n\n                    chainCslIds = await flowCslQuery\n                        .Where(csl => csl.MessageLogId.HasValue &&\n                                      msgIdsForPhone.Contains(csl.MessageLogId.Value))\n                        .OrderBy(csl => csl.CreatedAt)\n                        .Select(csl => csl.Id)\n                        .ToListAsync();\n\n                    if (!chainCslIds.Contains(sentLog.Id))\n                        chainCslIds.Add(sentLog.Id);\n                }\n                else\n                {\n                    chainCslIds = new List<Guid> { sentLog.Id };\n                }\n\n                // Pull minimal data for those CSLs (for statuses)\n                var flowCslChain = await _context.CampaignSendLogs.AsNoTracking()\n                    .Where(csl => chainCslIds.Contains(csl.Id))\n                    .OrderBy(csl => csl.CreatedAt)\n                    .Select(csl => new\n                    {\n                        csl.Id,\n                        csl.MessageLogId,\n                        csl.SentAt,\n                        csl.CreatedAt,\n                        csl.TemplateId,\n                        csl.CTAFlowStepId,\n                        csl.DeliveredAt,\n                        csl.ReadAt\n                    })\n                    .ToListAsync();\n\n                var chainMsgLogIds = flowCslChain\n                    .Where(x => x.MessageLogId.HasValue)\n                    .Select(x => x.MessageLogId!.Value)\n                    .ToList();\n\n                // Flow exec logs by CSL\n                var execByCsl = await _context.FlowExecutionLogs.AsNoTracking()\n                    .Where(f => f.CampaignSendLogId.HasValue &&\n                                chainCslIds.Contains(f.CampaignSendLogId.Value) &&\n                                f.ExecutedAt >= sessionStart && f.ExecutedAt < sessionEnd)\n                    .OrderBy(f => f.ExecutedAt)\n                    .ToListAsync();\n\n                // ... by MessageLog\n                var execByMsg = chainMsgLogIds.Count == 0\n                    ? new List<FlowExecutionLog>()\n                    : await _context.FlowExecutionLogs.AsNoTracking()\n                        .Where(f => f.MessageLogId.HasValue &&\n                                    chainMsgLogIds.Contains(f.MessageLogId.Value) &&\n                                    f.ExecutedAt >= sessionStart && f.ExecutedAt < sessionEnd)\n                        .OrderBy(f => f.ExecutedAt)\n                        .ToListAsync();\n\n                // ... by Phone fallback (accept + or digits-only)\n                var phoneA = phone ?? \"\";\n                var phoneB = string.IsNullOrWhiteSpace(phoneA)\n                    ? \"\"\n                    : (phoneA.StartsWith(\"+\") ? phoneA[1..] : \"+\" + phoneA);\n\n                var execByPhone = string.IsNullOrWhiteSpace(phoneA)\n                    ? new List<FlowExecutionLog>()\n                    : await _context.FlowExecutionLogs.AsNoTracking()\n                        .Where(f => f.BusinessId == sentLog.BusinessId &&\n                                    f.FlowId == flowId &&\n                                    (f.ContactPhone == phoneA || f.ContactPhone == phoneB) &&\n                                    f.ExecutedAt >= sessionStart && f.ExecutedAt < sessionEnd)\n                        .OrderBy(f => f.ExecutedAt)\n                        .ToListAsync();\n\n                var flowExec = execByCsl.Concat(execByMsg).Concat(execByPhone)\n                    .GroupBy(x => x.Id)\n                    .Select(g => g.First())\n                    .OrderBy(x => x.ExecutedAt)\n                    .ToList();\n\n                foreach (var fe in flowExec)\n                {\n                    if (!string.IsNullOrWhiteSpace(fe.TriggeredByButton))\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = fe.ExecutedAt,\n                            Source = \"User\",\n                            EventType = \"ButtonClicked\",\n                            Title = $\"Clicked Quick Reply: '{fe.TriggeredByButton}'\",\n                            Details = string.IsNullOrWhiteSpace(fe.TemplateName)\n                                          ? $\"Advanced in flow at step '{fe.StepName}'\"\n                                          : $\"Triggered next template: '{fe.TemplateName}'\",\n                            StepId = fe.StepId,\n                            StepName = fe.StepName,\n                            ButtonIndex = fe.ButtonIndex,\n                            ButtonTitle = fe.TriggeredByButton,\n                            TemplateName = fe.TemplateName\n                        });\n                    }\n\n                    if (!string.IsNullOrWhiteSpace(fe.TemplateName))\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = fe.ExecutedAt,\n                            Source = \"System\",\n                            EventType = \"FlowSend\",\n                            Title = $\"Flow sent template '{fe.TemplateName}'\",\n                            Details = $\"Step '{fe.StepName}'\",\n                            StepId = fe.StepId,\n                            StepName = fe.StepName,\n                            TemplateName = fe.TemplateName\n                        });\n                    }\n                }\n\n                // Include the flow CSLs themselves + statuses (within window)\n                foreach (var csl in flowCslChain.Where(x => x.Id != sentLog.Id))\n                {\n                    var ts = csl.SentAt ?? csl.CreatedAt;\n\n                    events.Add(new JourneyEventDto\n                    {\n                        Timestamp = ts,\n                        Source = \"System\",\n                        EventType = \"FlowSend\",\n                        Title = $\"Flow sent template '{csl.TemplateId}'\",\n                        Details = csl.CTAFlowStepId.HasValue ? $\"Step: {csl.CTAFlowStepId}\" : null,\n                        StepId = csl.CTAFlowStepId,\n                        TemplateName = csl.TemplateId\n                    });\n\n                    if (csl.DeliveredAt is { } d2 && d2 >= sessionStart && d2 < sessionEnd)\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = d2,\n                            Source = \"Provider\",\n                            EventType = \"Delivered\",\n                            Title = \"Message delivered\",\n                            Details = \"\",\n                            TemplateName = csl.TemplateId,\n                            StepId = csl.CTAFlowStepId\n                        });\n\n                    if (csl.ReadAt is { } r2 && r2 >= sessionStart && r2 < sessionEnd)\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = r2,\n                            Source = \"Provider\",\n                            EventType = \"Read\",\n                            Title = \"Message read\",\n                            Details = \"\",\n                            TemplateName = csl.TemplateId,\n                            StepId = csl.CTAFlowStepId\n                        });\n                }\n\n                // URL clicks during the flow (within window)\n                if (chainCslIds.Count > 0)\n                {\n                    var flowClicks = await _context.CampaignClickLogs.AsNoTracking()\n                        .Where(c => chainCslIds.Contains(c.CampaignSendLogId) &&\n                                    c.ClickedAt >= sessionStart && c.ClickedAt < sessionEnd)\n                        .OrderBy(c => c.ClickedAt)\n                        .ToListAsync();\n\n                    foreach (var c in flowClicks)\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = c.ClickedAt,\n                            Source = \"User\",\n                            EventType = \"ButtonClicked\",\n                            Title = $\"Clicked URL: '{c.ButtonTitle}'\",\n                            Details = $\"Redirected to {c.Destination}\",\n                            ButtonIndex = c.ButtonIndex,\n                            ButtonTitle = c.ButtonTitle,\n                            Url = c.Destination\n                        });\n                    }\n                }\n\n                // Left-off marker\n                var lastFlowEvent = events\n                    .Where(e => e.EventType == \"FlowSend\" || e.EventType == \"ButtonClicked\")\n                    .OrderBy(e => e.Timestamp)\n                    .LastOrDefault();\n\n                resp.LeftOffAt = lastFlowEvent?.StepName ?? lastFlowEvent?.Title;\n            }\n\n            resp.Events = events.OrderBy(e => e.Timestamp).ToList();\n            return resp;\n        }\n\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IContactJourneyService.cs",
      "sha256": "e073e1050a64e2ac4cd335378ce53f0ed653944621efaefbd090223ab818c8fe",
      "language": "csharp",
      "size": 341,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs; // Updated namespace\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IContactJourneyService\n    {\n        Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId);\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IMessageLogsReportService.cs",
      "sha256": "c9879941a987b70fa6796fad4ee97fce33c7dddc65835b8a5ec3d5115d9598c0",
      "language": "csharp",
      "size": 595,
      "content": "// 📄 Features/Tracking/Services/IMessageLogsReportService.cs\nusing xbytechat.api.Shared; // PaginatedResponse<T>\nusing xbytechat.api.Features.Tracking.DTOs;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IMessageLogsReportService\n    {\n\n        Task<PaginatedResponse<MessageLogListItemDto>> SearchAsync(\n            Guid businessId,\n            MessageLogReportQueryDto q,\n            CancellationToken ct);\n\n        Task<MessageLogFacetsDto> GetFacetsAsync(\n            Guid businessId,\n            DateTime? fromUtc,\n            CancellationToken ct);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/ITrackingService.cs",
      "sha256": "7331e4a2b1fb44932573c4ed055613cc4ae21dcd9ec54bc25210c57cd340737c",
      "language": "csharp",
      "size": 528,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface ITrackingService\n    {\n        Task LogCTAClickAsync(TrackingLogDto dto);\n        Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId);\n        Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto);\n        Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IUrlBuilderService.cs",
      "sha256": "2415363e2bcc41b916d5b2836a0c28ac68dabd407d67b63661da9feb8372bd56",
      "language": "csharp",
      "size": 273,
      "content": "namespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IUrlBuilderService\n    {\n\n         string BuildTrackedButtonUrl(\n        Guid campaignSendLogId,\n        int buttonIndex,\n        string? buttonTitle,\n        string destinationUrlAbsolute);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/MessageLogsReportService.cs",
      "sha256": "8a67844db3c5b576d25730b2bd7d379ab878463d5615bd2ed0513a63e327b6ec",
      "language": "csharp",
      "size": 10193,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Linq.Expressions;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    \n\n    // Strongly-typed intermediate row for EF translation (avoid 'dynamic')\n    internal sealed class MessageLogRow\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }\n\n        public string? RecipientNumber { get; set; }\n        public string? SenderId { get; set; }           // Campaign.PhoneNumberId\n        public string? SourceChannel { get; set; }      // Campaign.Provider OR MessageLog.Provider\n        public string? Status { get; set; }\n\n        public string? MessageContent { get; set; }\n        public string? ProviderMessageId { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n    }\n\n    public sealed class MessageLogsReportService : IMessageLogsReportService\n    {\n        private readonly AppDbContext _db;\n        public MessageLogsReportService(AppDbContext db) => _db = db;\n\n        public async Task<PaginatedResponse<MessageLogListItemDto>> SearchAsync(\n            Guid businessId, MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            // normalize paging\n            q.Page = Math.Max(1, q.Page);\n            q.PageSize = Math.Clamp(q.PageSize, 1, 200);\n\n            // Base + left join to Campaign to enrich\n            var baseQuery =\n                from m in _db.MessageLogs.AsNoTracking()\n                where m.BusinessId == businessId\n                join c0 in _db.Campaigns.AsNoTracking() on m.CampaignId equals c0.Id into cj\n                from c in cj.DefaultIfEmpty()\n                select new MessageLogRow\n                {\n                    Id = m.Id,\n                    BusinessId = m.BusinessId,\n                    CampaignId = m.CampaignId,\n                    CampaignName = c != null ? c.Name : null,\n                    RecipientNumber = m.RecipientNumber,\n                    SenderId = c != null ? c.PhoneNumberId : null,\n                    SourceChannel = (c != null && c.Provider != null) ? c.Provider : m.Provider,\n                    Status = m.Status,\n                    MessageContent = m.MessageContent,\n                    ProviderMessageId = m.ProviderMessageId ?? m.MessageId,\n                    ErrorMessage = m.ErrorMessage,\n                    CreatedAt = m.CreatedAt,\n                    SentAt = m.SentAt\n                };\n\n            // Time window (prefer SentAt over CreatedAt)\n            if (q.FromUtc.HasValue)\n                baseQuery = baseQuery.Where(x => (x.SentAt ?? x.CreatedAt) >= q.FromUtc.Value);\n            if (q.ToUtc.HasValue)\n                baseQuery = baseQuery.Where(x => (x.SentAt ?? x.CreatedAt) <= q.ToUtc.Value);\n\n            // Optional scope\n            if (q.CampaignId.HasValue)\n                baseQuery = baseQuery.Where(x => x.CampaignId == q.CampaignId.Value);\n\n            // Status filter\n            if (q.Statuses is { Length: > 0 })\n            {\n                var statuses = q.Statuses.Where(s => !string.IsNullOrWhiteSpace(s)).ToArray();\n                if (statuses.Length > 0) baseQuery = baseQuery.Where(x => statuses.Contains(x.Status!));\n            }\n\n            // Channel filter (campaign.Provider preferred, else message.Provider)\n            if (q.Channels is { Length: > 0 })\n            {\n                var chans = q.Channels.Select(s => s.Trim().ToUpperInvariant())\n                                      .Where(s => s.Length > 0).ToArray();\n                if (chans.Length > 0)\n                    baseQuery = baseQuery.Where(x => x.SourceChannel != null &&\n                                                     chans.Contains(x.SourceChannel.ToUpper()));\n            }\n\n            // SenderIds → Campaign.PhoneNumberId\n            if (q.SenderIds is { Length: > 0 })\n            {\n                var senders = q.SenderIds.Select(s => s.Trim())\n                                         .Where(s => s.Length > 0).ToArray();\n                if (senders.Length > 0)\n                    baseQuery = baseQuery.Where(x => x.SenderId != null && senders.Contains(x.SenderId));\n            }\n\n            // Free-text search\n            if (!string.IsNullOrWhiteSpace(q.Search))\n            {\n                var s = q.Search.Trim().ToLower();\n                baseQuery = baseQuery.Where(x =>\n                    (x.RecipientNumber ?? \"\").ToLower().Contains(s) ||\n                    (x.MessageContent ?? \"\").ToLower().Contains(s) ||\n                    (x.ErrorMessage ?? \"\").ToLower().Contains(s) ||\n                    (x.ProviderMessageId ?? \"\").ToLower().Contains(s) ||\n                    (x.CampaignName ?? \"\").ToLower().Contains(s));\n            }\n\n            // ----- Strongly-typed sorting -----\n            var sortBy = (q.SortBy ?? \"SentAt\").Trim();\n            var sortDir = (q.SortDir ?? \"desc\").Trim().ToLower() == \"asc\" ? \"asc\" : \"desc\";\n\n            var sortMap = new Dictionary<string, Expression<Func<MessageLogRow, object>>>(\n                StringComparer.OrdinalIgnoreCase)\n            {\n                [\"Recipient\"] = x => x.RecipientNumber ?? \"\",\n                [\"SenderId\"] = x => x.SenderId ?? \"\",\n                [\"Channel\"] = x => x.SourceChannel ?? \"\",\n                [\"Status\"] = x => x.Status ?? \"\",\n                [\"CampaignName\"] = x => x.CampaignName ?? \"\",\n                [\"CreatedAt\"] = x => x.CreatedAt,\n                [\"SentAt\"] = x => x.SentAt ?? x.CreatedAt\n            };\n\n            if (!sortMap.ContainsKey(sortBy)) sortBy = \"SentAt\";\n            var keySelector = sortMap[sortBy];\n\n            IOrderedQueryable<MessageLogRow> ordered =\n                sortDir == \"asc\" ? baseQuery.OrderBy(keySelector)\n                                 : baseQuery.OrderByDescending(keySelector);\n\n            var total = await ordered.CountAsync(ct);\n\n            var items = await ordered\n                .Skip((q.Page - 1) * q.PageSize)\n                .Take(q.PageSize)\n                .Select(x => new MessageLogListItemDto\n                {\n                    Id = x.Id,\n                    BusinessId = x.BusinessId,\n                    CampaignId = x.CampaignId,\n                    CampaignName = x.CampaignName,\n                    RecipientNumber = x.RecipientNumber,\n                    SenderId = x.SenderId,\n                    SourceChannel = x.SourceChannel,\n                    Status = x.Status,\n                    MessageType = null,             // not on MessageLog (can be enriched later)\n                    MessageContent = x.MessageContent,\n                    TemplateName = null,             // not on MessageLog\n                    ProviderMessageId = x.ProviderMessageId,\n                    ErrorMessage = x.ErrorMessage,\n                    CreatedAt = x.CreatedAt,\n                    SentAt = x.SentAt,\n                    DeliveredAt = null,             // not on MessageLog\n                    ReadAt = null              // not on MessageLog\n                })\n                .ToListAsync(ct);\n\n            return new PaginatedResponse<MessageLogListItemDto>\n            {\n                Items = items,\n                TotalCount = total,\n                Page = q.Page,\n                PageSize = q.PageSize\n            };\n        }\n        public async Task<MessageLogFacetsDto> GetFacetsAsync(Guid businessId, DateTime? fromUtc, CancellationToken ct)\n        {\n            // scope last 90 days by default to keep it fast\n            var from = fromUtc ?? DateTime.UtcNow.AddDays(-90);\n\n            // base query limited by business & time\n            var baseQ = _db.MessageLogs\n                .AsNoTracking()\n                .Where(m => m.BusinessId == businessId &&\n                            (m.SentAt ?? m.CreatedAt) >= from);\n\n            // SenderIds come from Campaign.PhoneNumberId (if available)\n\n            var senderIds = await _db.WhatsAppPhoneNumbers\n            .AsNoTracking()\n            .Where(w => w.BusinessId == businessId && w.WhatsAppBusinessNumber != null)\n            .Select(w => w.PhoneNumberId!)\n            .Distinct()\n            .OrderBy(x => x)\n            .ToArrayAsync(ct);\n\n            //var senderIds = await (\n            //    from m in baseQ\n            //    join c0 in _db.Campaigns.AsNoTracking() on m.CampaignId equals c0.Id into cj\n            //    from c in cj.DefaultIfEmpty()\n            //    where c != null && c.PhoneNumberId != null\n            //    select c.PhoneNumberId!\n            //)\n            //.Distinct()\n            //.OrderBy(x => x)\n            //.ToArrayAsync(ct);\n\n            // Channels = provider (prefer campaign.provider, else message.provider)\n            var channels = await (\n                from m in baseQ\n                join c0 in _db.Campaigns.AsNoTracking() on m.CampaignId equals c0.Id into cj\n                from c in cj.DefaultIfEmpty()\n                let prov = (c != null && c.Provider != null) ? c.Provider : m.Provider\n                where prov != null\n                select prov!\n            )\n            .Distinct()\n            .OrderBy(x => x)\n            .ToArrayAsync(ct);\n\n            // Statuses\n            var statuses = await baseQ\n                .Where(m => m.Status != null)\n                .Select(m => m.Status!)\n                .Distinct()\n                .OrderBy(x => x)\n                .ToArrayAsync(ct);\n\n            // WABA Ids = WhatsAppBusinessNumber for this business\n            var wabaIds = await _db.WhatsAppSettings\n                .AsNoTracking()\n                .Where(w => w.BusinessId == businessId && w.WabaId != null)\n                .Select(w => w.WabaId!)\n                .Distinct()\n                .OrderBy(x => x)\n                .ToArrayAsync(ct);\n\n            return new MessageLogFacetsDto\n            {\n                WabaIds = wabaIds,\n                SenderIds = senderIds,\n                Channels = channels,\n                Statuses = statuses\n            };\n        }\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/TrackingService.cs",
      "sha256": "90d3f4b3c6a0d5d10d83300d0c3ed58fc81149c2dec145768cfafe2886dccb0b",
      "language": "csharp",
      "size": 9142,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Shared.TrackingUtils;\nusing Serilog;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing AutoMapper;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class TrackingService : ITrackingService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMapper _mapper;\n        public TrackingService(AppDbContext context, IMapper mapper)\n        {\n            _context = context;\n            _mapper = mapper;\n        }\n\n\n        public async Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                // 🧠 1. Try enrich from MessageLog (if msg ID provided)\n                if (!string.IsNullOrEmpty(dto.MessageId))\n                {\n                    var messageLog = await _context.MessageLogs\n                        .FirstOrDefaultAsync(m => m.MessageId == dto.MessageId || m.Id.ToString() == dto.MessageId);\n\n                    if (messageLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty ? messageLog.BusinessId : dto.BusinessId;\n                        dto.ContactId ??= messageLog.ContactId;\n                        dto.CampaignId ??= messageLog.CampaignId;\n                        dto.MessageLogId ??= messageLog.Id;\n                    }\n                }\n\n                // 🧩 2. Enrich from CampaignSendLog if sourceType = campaign\n                CampaignSendLog? sendLog = null;\n\n                if (dto.SourceType == \"campaign\")\n                {\n                    if (!string.IsNullOrEmpty(dto.MessageId))\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .FirstOrDefaultAsync(c => c.MessageId == dto.MessageId);\n                    }\n\n                    if (sendLog == null && dto.CampaignId != null)\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .Where(c => c.CampaignId == dto.CampaignId)\n                            .OrderByDescending(c => c.CreatedAt)\n                            .FirstOrDefaultAsync();\n                    }\n\n                    if (sendLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty\n                            ? sendLog.Recipient?.BusinessId ?? Guid.Empty\n                            : dto.BusinessId;\n\n                        dto.ContactId ??= sendLog.ContactId;\n                        dto.CampaignId ??= sendLog.CampaignId;\n                        dto.CampaignSendLogId ??= sendLog.Id;\n\n                        // ✅ Update campaign send log click details\n                        sendLog.IsClicked = true;\n                        sendLog.ClickedAt = dto.ClickedAt ?? DateTime.UtcNow;\n                        sendLog.ClickType = dto.ButtonText;\n\n                        await _context.SaveChangesAsync();\n                    }\n                }\n\n                // ✅ 3. Validate business context\n                if (dto.BusinessId == Guid.Empty)\n                {\n                    Log.Warning(\"❌ TrackingLog failed: No BusinessId available for click.\");\n                    return ResponseResult.ErrorInfo(\"Business context is missing.\");\n                }\n\n                // 💾 4. Save tracking log (inline instead of separate method)\n                var trackingLog = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(trackingLog);\n                await _context.SaveChangesAsync();\n\n                // ✅ Return the TrackingLog.Id in the response\n                return ResponseResult.SuccessInfo(\"CTA click tracked successfully.\", trackingLog.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception during CTA tracking enrichment\");\n                return ResponseResult.ErrorInfo(\"Exception during tracking: \" + ex.Message);\n            }\n        }\n\n        public async Task LogCTAClickAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                var log = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to log CTA click\");\n            }\n        }\n        public async Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId)\n        {\n            var tracking = await _context.TrackingLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.Id == logId);\n\n            if (tracking == null)\n                return null;\n\n            var contact = tracking.ContactId != null\n                ? await _context.Contacts.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.ContactId)\n                : null;\n\n            var campaign = tracking.CampaignId != null\n                ? await _context.Campaigns.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.CampaignId)\n                : null;\n\n            var messageLog = tracking.MessageLogId != null\n                ? await _context.MessageLogs.AsNoTracking().FirstOrDefaultAsync(m => m.Id == tracking.MessageLogId)\n                : null;\n\n            return new TrackingLogDetailsDto\n            {\n                Tracking = _mapper.Map<TrackingLogDto>(tracking),\n                Contact = contact != null ? _mapper.Map<ContactDto>(contact) : null,\n                Campaign = campaign != null ? _mapper.Map<CampaignDto>(campaign) : null,\n                MessageLog = messageLog != null ? _mapper.Map<MessageLogDto>(messageLog) : null\n            };\n        }\n        public async Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId)\n        {\n            return await _context.TrackingLogs\n                .Where(x => x.BusinessId == businessId && x.SourceType == \"cta-flow\")\n                .OrderByDescending(x => x.ClickedAt)\n                .ToListAsync();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/TrackingToken.cs",
      "sha256": "b5250fc25e3e0ca598d78eba428d651a345550debbc5696ceb32b55ce684019e",
      "language": "csharp",
      "size": 809,
      "content": "using System.Text.Json;\nusing Microsoft.AspNetCore.WebUtilities;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public static class TrackingToken\n    {\n        public static string Create(object payload)\n        {\n            var json = JsonSerializer.Serialize(payload);\n            var bytes = System.Text.Encoding.UTF8.GetBytes(json);\n            return WebEncoders.Base64UrlEncode(bytes);\n        }\n\n        public static T Decode<T>(string token)\n        {\n            var bytes = WebEncoders.Base64UrlDecode(token);\n            var json = System.Text.Encoding.UTF8.GetString(bytes);\n            return JsonSerializer.Deserialize<T>(json)!;\n        }\n    }\n\n    // What we put inside the token:\n    public record ClickToken(Guid cid, int btnIndex, string btnTitle, string to, string phone);\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/UrlBuilderService.cs",
      "sha256": "8f3156fd79a3ab196299a3f0ebb88e74ebe340db9a0d13bd47189ecc5996109d",
      "language": "csharp",
      "size": 4999,
      "content": "// Features/Tracking/Services/UrlBuilderService.cs\nusing System;\nusing Microsoft.Extensions.Options;\nusing xbytechat.api.Features.CampaignTracking.Config;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class UrlBuilderService : IUrlBuilderService\n    {\n        private readonly IClickTokenService _token;\n        private readonly TrackingOptions _opt;\n\n        // Allowed schemes for destination links\n        private static readonly string[] AllowedSchemes = new[] { \"http\", \"https\", \"tel\", \"wa\", \"whatsapp\" };\n\n        public UrlBuilderService(IClickTokenService token, IOptions<TrackingOptions> opt)\n        {\n            _token = token;\n            _opt = opt.Value;\n        }\n\n        /// <summary>\n        /// Normalizes destination and enforces an allowlist of schemes:\n        /// http, https, tel, wa, whatsapp.\n        /// Also supports shorthand WhatsApp hosts: wa.me/... and api.whatsapp.com/...\n        /// </summary>\n        private static string NormalizeAbsoluteUrlOrThrow(string input)\n        {\n            if (input is null) throw new ArgumentException(\"Destination URL is null.\", nameof(input));\n\n            // Trim and remove any non-printable/control whitespace characters\n            var s = input.Trim();\n            s = new string(Array.FindAll(s.ToCharArray(), c => !char.IsControl(c)));\n\n            if (s.Length == 0)\n                throw new ArgumentException(\"Destination URL is empty after trimming.\", nameof(input));\n\n            // Short-circuit for already tracked links, just in case this ever gets called that way\n            if (s.Contains(\"/r/\", StringComparison.Ordinal))\n                return s;\n\n            // Support common WhatsApp shorthands without scheme\n            // e.g. \"wa.me/9170...\" or \"api.whatsapp.com/send?phone=...\"\n            if (!s.Contains(\"://\", StringComparison.Ordinal))\n            {\n                if (s.StartsWith(\"wa.me/\", StringComparison.OrdinalIgnoreCase) ||\n                    s.StartsWith(\"api.whatsapp.com/\", StringComparison.OrdinalIgnoreCase))\n                {\n                    var guessWa = \"https://\" + s;\n                    if (Uri.TryCreate(guessWa, UriKind.Absolute, out var waAbs))\n                        return waAbs.AbsoluteUri;\n                }\n            }\n\n            // Accept absolute URIs with allowed schemes\n            if (Uri.TryCreate(s, UriKind.Absolute, out var abs))\n            {\n                var scheme = abs.Scheme ?? string.Empty;\n\n                // Allow only whitelisted schemes\n                var isAllowed = false;\n                for (int i = 0; i < AllowedSchemes.Length; i++)\n                {\n                    if (scheme.Equals(AllowedSchemes[i], StringComparison.OrdinalIgnoreCase))\n                    {\n                        isAllowed = true;\n                        break;\n                    }\n                }\n\n                if (!isAllowed)\n                    throw new ArgumentException(\n                        $\"Destination must use one of: http, https, tel, wa, whatsapp. Got '{scheme}:'\",\n                        nameof(input));\n\n                // http/https → return canonical AbsoluteUri\n                if (scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase))\n                {\n                    return abs.AbsoluteUri;\n                }\n\n                // tel:/wa:/whatsapp://send → return as provided (trimmed), do not modify\n                return s;\n            }\n\n            // Human input like \"www.example.com/...\" or \"example.com/...\"\n            if (!s.Contains(\"://\", StringComparison.Ordinal) && s.Contains('.', StringComparison.Ordinal))\n            {\n                var guess = \"https://\" + s;\n                if (Uri.TryCreate(guess, UriKind.Absolute, out var httpAbs))\n                    return httpAbs.AbsoluteUri;\n            }\n\n            throw new ArgumentException(\n                $\"Destination must be an absolute URL or allowed deep link (http, https, tel, wa, whatsapp). Got: '{input}'\",\n                nameof(input));\n        }\n\n        public string BuildTrackedButtonUrl(\n            Guid campaignSendLogId,\n            int buttonIndex,\n            string? buttonTitle,\n            string destinationUrlAbsolute)\n        {\n            var dest = NormalizeAbsoluteUrlOrThrow(destinationUrlAbsolute);\n\n            var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n            var exp = now + (long)_opt.TokenTtl.TotalSeconds;\n\n            var payload = new ClickTokenPayload(\n                cid: campaignSendLogId,\n                bi: buttonIndex,\n                bt: buttonTitle ?? string.Empty,\n                to: dest,\n                iat: now,\n                exp: exp\n            );\n\n            var token = _token.Create(payload);\n            return $\"{_opt.BaseUrl.TrimEnd('/')}/r/{token}\";\n        }\n    }\n}\n\n\n"
    }
  ]
}
