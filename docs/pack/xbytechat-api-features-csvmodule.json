{
  "name": "xbytechat-api/Features/CsvModule",
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CsvModule/CsvBatchValidationController.cs",
      "sha256": "daf00037fbe7c0f74272fe6dd650de7918d6f2f9a1bf91e40b01039a0e04f9cc",
      "language": "csharp",
      "size": 7225,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Shared;\nusing xbytechat_api.WhatsAppSettings.Services; // User.GetBusinessId()\n\nnamespace xbytechat.api.Features.CsvModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/csv/batch/{batchId:guid}/validate\")]\n    [Authorize]\n    public sealed class CsvBatchValidationController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        public CsvBatchValidationController(AppDbContext db) => _db = db;\n\n        public sealed class ValidateRequest\n        {\n            public string? PhoneHeader { get; set; }              // e.g. \"phone\"\n            public List<string>? RequiredHeaders { get; set; }    // e.g. [\"parameter1\",\"headerpara1\",\"buttonpara1\"]\n            public bool NormalizePhone { get; set; } = true;\n            public bool CheckDuplicates { get; set; } = true;\n            public int? Limit { get; set; }                       // optional sample cap\n        }\n\n        public sealed class ValidateResponse\n        {\n            public bool Success { get; set; } = true;\n            public List<string> Problems { get; set; } = new();\n            public object Stats { get; set; } = new { rows = 0, missingPhone = 0, invalidPhones = 0, duplicatePhones = 0 };\n            public List<string> Headers { get; set; } = new();    // discovered headers in the batch\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Validate(Guid batchId, [FromBody] ValidateRequest req, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            // Load CSV rows for this batch (owned by business)\n            var rowsQ = _db.CsvRows\n                .AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n                .OrderBy(r => r.RowIndex);\n\n            var total = await rowsQ.CountAsync(ct);\n            if (total == 0)\n                return Ok(new ValidateResponse\n                {\n                    Problems = new List<string> { \"CSV batch is empty.\" },\n                    Stats = new { rows = 0, missingPhone = 0, invalidPhones = 0, duplicatePhones = 0 },\n                    Headers = new List<string>()\n                });\n\n            var rows = req.Limit.HasValue && req.Limit.Value > 0\n                ? await rowsQ.Take(req.Limit.Value).ToListAsync(ct)\n                : await rowsQ.ToListAsync(ct);\n\n            // Discover header set by union of row keys (case-insensitive compare)\n            var headerSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n            foreach (var r in rows)\n                foreach (var k in KeysOfJson(r.DataJson))\n                    headerSet.Add(k);\n\n            var headers = headerSet.OrderBy(x => x, StringComparer.OrdinalIgnoreCase).ToList();\n\n            var problems = new List<string>();\n\n            // Validate phone header presence\n            var phoneHeader = (req.PhoneHeader ?? \"\").Trim();\n            if (string.IsNullOrWhiteSpace(phoneHeader))\n            {\n                // Try helpful guesses\n                var guesses = new[] { \"phone\", \"mobile\", \"whatsapp\", \"number\", \"phonee164\", \"msisdn\", \"whatsapp_number\" };\n                var guess = guesses.FirstOrDefault(h => headerSet.Contains(h));\n                if (!string.IsNullOrEmpty(guess))\n                    phoneHeader = guess;\n            }\n\n            if (string.IsNullOrWhiteSpace(phoneHeader))\n            {\n                problems.Add(\"Phone column not specified and could not be guessed.\");\n            }\n            else if (!headerSet.Contains(phoneHeader))\n            {\n                problems.Add($\"Phone column “{phoneHeader}” not found in CSV.\");\n            }\n\n            // Validate requiredHeaders presence (parameterN/headerparaN/buttonparaN)\n            var required = req.RequiredHeaders ?? new List<string>();\n            foreach (var h in required)\n            {\n                if (!headerSet.Contains(h))\n                    problems.Add($\"Required column “{h}” is missing.\");\n            }\n\n            // Row-level checks\n            int missingPhone = 0, invalidPhones = 0, duplicatePhones = 0;\n            var seen = new HashSet<string>(StringComparer.Ordinal);\n\n            foreach (var r in rows)\n            {\n                var dict = JsonToDict(r.DataJson);\n\n                // phone\n                string? rawPhone = null;\n                if (!string.IsNullOrWhiteSpace(phoneHeader))\n                    dict.TryGetValue(phoneHeader, out rawPhone);\n\n                var normPhone = NormalizePhoneMaybe(rawPhone, req.NormalizePhone);\n                if (string.IsNullOrWhiteSpace(normPhone))\n                {\n                    missingPhone++;\n                    continue;\n                }\n\n                // naive validity check\n                if (!Regex.IsMatch(normPhone, @\"^\\d{10,15}$\"))\n                {\n                    invalidPhones++;\n                }\n\n                if (req.CheckDuplicates && !seen.Add(normPhone))\n                {\n                    duplicatePhones++;\n                }\n            }\n\n            var resp = new ValidateResponse\n            {\n                Problems = problems,\n                Stats = new { rows = total, missingPhone, invalidPhones, duplicatePhones },\n                Headers = headers\n            };\n\n            return Ok(resp);\n        }\n\n        // ---------- helpers ----------\n        private static IEnumerable<string> KeysOfJson(string? json)\n        {\n            if (string.IsNullOrWhiteSpace(json)) yield break;\n            using var doc = JsonDocument.Parse(json);\n            if (doc.RootElement.ValueKind != JsonValueKind.Object) yield break;\n            foreach (var p in doc.RootElement.EnumerateObject())\n                yield return p.Name;\n        }\n\n        private static Dictionary<string, string> JsonToDict(string? json)\n        {\n            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            if (string.IsNullOrWhiteSpace(json)) return dict;\n            using var doc = JsonDocument.Parse(json);\n            if (doc.RootElement.ValueKind != JsonValueKind.Object) return dict;\n            foreach (var p in doc.RootElement.EnumerateObject())\n                dict[p.Name] = p.Value.ValueKind == JsonValueKind.Null ? \"\" : p.Value.ToString();\n            return dict;\n        }\n\n        private static string? NormalizePhoneMaybe(string? raw, bool normalize)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var trimmed = raw.Trim();\n            if (!normalize) return trimmed;\n\n            // simple E.164-ish cleanup\n            var digits = Regex.Replace(trimmed, \"[^0-9]\", \"\");\n            digits = digits.TrimStart('0');\n            if (digits.Length == 10) digits = \"91\" + digits; // heuristic India\n            return digits;\n        }\n    }\n}\n"
    }
  ]
}
