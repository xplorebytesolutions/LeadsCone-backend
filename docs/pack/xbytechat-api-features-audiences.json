{
  "name": "xbytechat-api/Features/Audiences",
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/Audiences/Controllers/AudienceController.cs",
      "sha256": "36755710674031902cf3133a3308170d732b23a2eb5cc6c6dcba17589b8fec7e",
      "language": "csharp",
      "size": 2865,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.Audiences.DTOs;\nusing xbytechat.api.Features.Audiences.Services;\nusing xbytechat.api.Shared; // User.GetBusinessId()\n\nnamespace xbytechat.api.Features.Audiences.Controllers\n{\n    [ApiController]\n    [Route(\"api/audiences\")]\n    [Authorize]\n    public class AudienceController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        private readonly IAudienceService _svc;\n\n        public AudienceController(AppDbContext db, IAudienceService svc)\n        { _db = db; _svc = svc; }\n\n        [HttpPost]\n        public async Task<IActionResult> Create([FromBody] AudienceCreateDto dto)\n        {\n            var businessId = User.GetBusinessId();\n            var userName = User.Identity?.Name ?? \"system\";\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            if (string.IsNullOrWhiteSpace(dto?.Name))\n                return BadRequest(new { success = false, message = \"Name is required\" });\n\n            var id = await _svc.CreateAsync(businessId, dto!, userName);\n            return Ok(new { success = true, id });\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> List()\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var items = await _svc.ListAsync(businessId);\n            return Ok(new { success = true, items });\n        }\n\n        [HttpPost(\"{audienceId:guid}/assign\")]\n        public async Task<IActionResult> Assign(Guid audienceId, [FromBody] AudienceAssignDto dto)\n        {\n            var businessId = User.GetBusinessId();\n            var userName = User.Identity?.Name ?? \"system\";\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var ok = await _svc.AssignAsync(businessId, audienceId, dto ?? new AudienceAssignDto(), userName);\n            return Ok(new { success = ok });\n        }\n\n        [HttpGet(\"{audienceId:guid}/members\")]\n        public async Task<IActionResult> Members(Guid audienceId, [FromQuery] int page = 1, [FromQuery] int pageSize = 50)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var exists = await _db.Audiences.AnyAsync(a => a.Id == audienceId && a.BusinessId == businessId && !a.IsDeleted);\n            if (!exists) return NotFound(new { success = false, message = \"Audience not found\" });\n\n            var rows = await _svc.GetMembersAsync(businessId, audienceId, page, pageSize);\n            return Ok(new { success = true, items = rows, page, pageSize });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Controllers/AudienceImportController.cs",
      "sha256": "3b83d236a62b4def34dc67cda4f095665cdc144985151dd97565eb8de142268d",
      "language": "csharp",
      "size": 1639,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.Audiences.Services;\nusing xbytechat.api.Shared; // User.GetBusinessId()\n\nnamespace xbytechat.api.Features.Audiences.Controllers\n{\n    [ApiController]\n    [Route(\"api/audiences/import\")]\n    [Authorize]\n    public class AudienceImportController : ControllerBase\n    {\n        private readonly IAudienceImportService _svc;\n\n        public AudienceImportController(IAudienceImportService svc)\n        {\n            _svc = svc;\n        }\n\n        //[HttpPost(\"csv\")]\n        //[RequestSizeLimit(64_000_000)] // 64 MB\n        //public async Task<IActionResult> ImportCsv([FromForm] IFormFile file)\n        //{\n        //    var businessId = User.GetBusinessId();\n        //    if (businessId == Guid.Empty) return Unauthorized();\n\n        //    if (file == null || file.Length == 0)\n        //        return BadRequest(new { success = false, message = \"CSV file is required\" });\n\n        //    try\n        //    {\n        //        await using var stream = file.OpenReadStream();\n        //        var resp = await _svc.ImportCsvAsync(businessId, stream, file.FileName, HttpContext.RequestAborted);\n\n        //        return Ok(new { success = true, data = resp });\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        Log.Error(ex, \"‚ùå CSV import failed | biz={Biz}\", businessId);\n        //        return StatusCode(500, new { success = false, message = \"CSV import failed\" });\n        //    }\n        //}\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/DTOs/AudienceDtos.cs",
      "sha256": "36380702ffe3286aab70c4f45799ef8fc330b26eb9eae08190a307598ade1aa7",
      "language": "csharp",
      "size": 1198,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Audiences.DTOs\n{\n    public class AudienceCreateDto\n    {\n        public string Name { get; set; } = \"\";\n        public string? Description { get; set; }\n    }\n\n    public class AudienceSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; } = \"\";\n        public string? Description { get; set; }\n        public int MemberCount { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n\n    public class AudienceMemberDto\n    {\n        public Guid Id { get; set; }\n        public Guid? ContactId { get; set; }   // optional link to CRM contact\n        public string? Name { get; set; }\n        public string? PhoneNumber { get; set; }\n        public string? Email { get; set; }\n        public string? VariablesJson { get; set; } // if your model stores row-level vars\n        public DateTime CreatedAt { get; set; }\n    }\n\n    public class AudienceAssignDto\n    {\n        public List<Guid> ContactIds { get; set; } = new(); // optional: assign CRM contacts\n        public Guid? CsvBatchId { get; set; }               // optional: attach CSV batch to audience\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/DTOs/CsvImportDtos.cs",
      "sha256": "c93d41ac64223fad52cd0ce3cb909af0347cac1e44b642fcdc9139c013b1ba73",
      "language": "csharp",
      "size": 342,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Audiences.DTOs\n{\n    public class CsvImportResponseDto\n    {\n        public Guid BatchId { get; set; }\n        public int RowCount { get; set; }\n        public List<string> Columns { get; set; } = new();\n        public DateTime CreatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Services/AudienceImportService.cs",
      "sha256": "d7d97123d74025c2ac1e15973dd9e31f977706e2312d898a3af8a8374cc9af38",
      "language": "csharp",
      "size": 4327,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.Audiences.DTOs;\n\nnamespace xbytechat.api.Features.Audiences.Services\n{\n    public class AudienceImportService : IAudienceImportService\n    {\n        private readonly AppDbContext _db;\n\n        public AudienceImportService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<CsvImportResponseDto> ImportCsvAsync(\n            Guid businessId,\n            Stream csvStream,\n            string fileName,\n            CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty)\n                throw new UnauthorizedAccessException(\"Invalid business id.\");\n\n            if (csvStream == null || !csvStream.CanRead)\n                throw new ArgumentException(\"CSV stream is not readable.\");\n\n            using var reader = new StreamReader(csvStream);\n\n            // --- header row ---\n            var headerLine = await reader.ReadLineAsync();\n            if (string.IsNullOrWhiteSpace(headerLine))\n                throw new InvalidOperationException(\"Empty CSV.\");\n\n            var headers = headerLine.Split(',')\n                                    .Select(h => (h ?? string.Empty).Trim())\n                                    .Where(h => !string.IsNullOrWhiteSpace(h))\n                                    .ToList();\n\n            if (headers.Count == 0)\n                throw new InvalidOperationException(\"No columns.\");\n\n            var batchId = Guid.NewGuid();\n            var now = DateTime.UtcNow;\n\n            // Pre-create batch\n            _db.CsvBatches.Add(new Features.CampaignModule.Models.CsvBatch\n            {\n                Id = batchId,\n                BusinessId = businessId,\n                FileName = fileName,\n                // ‚úÖ match your model: CsvBatch.HeadersJson\n                HeadersJson = Newtonsoft.Json.JsonConvert.SerializeObject(headers),\n                RowCount = 0,\n                CreatedAt = now\n            });\n\n            var rowsBuffer = new List<Features.CampaignModule.Models.CsvRow>(capacity: 1024);\n            var total = 0;\n\n            // naive CSV parse (comma-only, no quoting in v1)\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (string.IsNullOrWhiteSpace(line)) continue;\n\n                var cells = line.Split(',');\n                var dict = new Dictionary<string, string?>();\n                for (int i = 0; i < headers.Count; i++)\n                {\n                    var v = (i < cells.Length ? cells[i] : null)?.Trim();\n                    dict[headers[i]] = v;\n                }\n\n                rowsBuffer.Add(new Features.CampaignModule.Models.CsvRow\n                {\n                    Id = Guid.NewGuid(),\n                    BatchId = batchId,\n                    // üîÅ If your property is not RowJson, change this to the correct one (e.g., DataJson)\n                    RowJson = Newtonsoft.Json.JsonConvert.SerializeObject(dict),\n                    CreatedAt = DateTime.UtcNow\n                });\n\n                total++;\n\n                // chunked insert every 1k for memory safety\n                if (rowsBuffer.Count >= 1000)\n                {\n                    await _db.CsvRows.AddRangeAsync(rowsBuffer, ct);\n                    await _db.SaveChangesAsync(ct);\n                    rowsBuffer.Clear();\n                }\n            }\n\n            if (rowsBuffer.Count > 0)\n            {\n                await _db.CsvRows.AddRangeAsync(rowsBuffer, ct);\n            }\n\n            // update batch row count\n            var batchRow = await _db.CsvBatches.FirstAsync(b => b.Id == batchId, ct);\n            batchRow.RowCount = total;\n\n            await _db.SaveChangesAsync(ct);\n\n            Log.Information(\"üì• CSV imported | biz={Biz} batch={Batch} rows={Rows} file={File}\",\n                businessId, batchId, total, fileName);\n\n            return new CsvImportResponseDto\n            {\n                BatchId = batchId,\n                RowCount = total,\n                Columns = headers,\n                CreatedAt = now\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Services/AudienceService.cs",
      "sha256": "cac7c8cbf5cafd4dfa16dff784e3dea70ab732453c3976417aa3b812face67a0",
      "language": "csharp",
      "size": 7432,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Audiences.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.Audiences.Services\n{\n    public interface IAudienceService\n    {\n        Task<Guid> CreateAsync(Guid businessId, AudienceCreateDto dto, string createdBy);\n        Task<List<AudienceSummaryDto>> ListAsync(Guid businessId);\n        Task<bool> AssignAsync(Guid businessId, Guid audienceId, AudienceAssignDto dto, string createdBy);\n        Task<List<AudienceMemberDto>> GetMembersAsync(Guid businessId, Guid audienceId, int page = 1, int pageSize = 50);\n    }\n\n    public class AudienceService : IAudienceService\n    {\n        private readonly AppDbContext _db;\n\n        public AudienceService(AppDbContext db) { _db = db; }\n\n        public async Task<Guid> CreateAsync(Guid businessId, AudienceCreateDto dto, string createdBy)\n        {\n            var id = Guid.NewGuid();\n            try\n            {\n                var now = DateTime.UtcNow;\n                Guid? createdByUserId = null;\n                if (Guid.TryParse(createdBy, out var parsed)) createdByUserId = parsed;\n\n                var model = new Audience\n                {\n                    Id = id,\n                    BusinessId = businessId,\n                    Name = dto?.Name?.Trim() ?? \"Untitled Audience\",\n                    Description = dto?.Description,\n                    CsvBatchId = null,\n                    IsDeleted = false,\n                    CreatedByUserId = createdByUserId,\n                    CreatedAt = now,\n                    UpdatedAt = now\n                };\n\n                _db.Set<Audience>().Add(model);\n                await _db.SaveChangesAsync();\n\n                Log.Information(\"‚úÖ Audience created | biz={Biz} id={Id} name={Name}\", businessId, id, model.Name);\n                return id;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed creating audience | biz={Biz}\", businessId);\n                throw;\n            }\n        }\n\n        public async Task<List<AudienceSummaryDto>> ListAsync(Guid businessId)\n        {\n            var audiences = _db.Set<Audience>()\n                .AsNoTracking()\n                .Where(a => a.BusinessId == businessId && !a.IsDeleted);\n\n            var members = _db.Set<AudienceMember>();\n\n            var items = await audiences\n                .OrderByDescending(a => a.CreatedAt)\n                .Select(a => new AudienceSummaryDto\n                {\n                    Id = a.Id,\n                    Name = a.Name,\n                    Description = a.Description,\n                    MemberCount = members.Count(m => m.BusinessId == businessId && m.AudienceId == a.Id && !m.IsDeleted),\n                    CreatedAt = a.CreatedAt\n                })\n                .ToListAsync();\n\n            return items;\n        }\n\n        public async Task<bool> AssignAsync(Guid businessId, Guid audienceId, AudienceAssignDto dto, string createdBy)\n        {\n            var audience = await _db.Set<Audience>()\n                .FirstOrDefaultAsync(a => a.Id == audienceId && a.BusinessId == businessId && !a.IsDeleted);\n\n            if (audience == null) return false;\n\n            var now = DateTime.UtcNow;\n\n            // 1) Assign CRM contacts (if provided)\n            if (dto?.ContactIds != null && dto.ContactIds.Count > 0)\n            {\n                var contacts = await _db.Set<Contact>()\n                    .Where(c => c.BusinessId == businessId && dto.ContactIds.Contains(c.Id))\n                    .Select(c => new { c.Id, c.Name, c.PhoneNumber, c.Email })\n                    .ToListAsync();\n\n                var newMembers = contacts.Select(c =>\n                {\n                    var phoneRaw = (c.PhoneNumber ?? \"\").Trim();\n                    var phoneE164 = ToE164OrNull(phoneRaw);\n\n                    return new AudienceMember\n                    {\n                        Id = Guid.NewGuid(),\n                        AudienceId = audienceId,\n                        BusinessId = businessId,\n                        ContactId = c.Id,\n                        Name = c.Name,\n                        Email = string.IsNullOrWhiteSpace(c.Email) ? null : c.Email,\n                        PhoneRaw = phoneRaw,\n                        PhoneE164 = phoneE164,\n                        AttributesJson = null,            // keep as null unless you want to pack extra vars\n                        IsTransientContact = false,\n                        IsDeleted = false,\n                        CreatedAt = now,\n                        UpdatedAt = now\n                    };\n                });\n\n                await _db.Set<AudienceMember>().AddRangeAsync(newMembers);\n            }\n\n            // 2) Optionally link a CSV batch\n            if (dto?.CsvBatchId.HasValue == true && dto.CsvBatchId.Value != Guid.Empty)\n            {\n                var batch = await _db.Set<CsvBatch>()\n                    .FirstOrDefaultAsync(b => b.Id == dto.CsvBatchId.Value && b.BusinessId == businessId);\n\n                if (batch != null)\n                {\n                    audience.CsvBatchId = batch.Id;\n                }\n            }\n\n            audience.UpdatedAt = now;\n\n            await _db.SaveChangesAsync();\n\n            Log.Information(\"üë• Audience assigned | biz={Biz} audience={AudienceId} contacts={Contacts} batch={Batch}\",\n                businessId, audienceId, dto?.ContactIds?.Count ?? 0, dto?.CsvBatchId);\n\n            return true;\n        }\n\n        public async Task<List<AudienceMemberDto>> GetMembersAsync(Guid businessId, Guid audienceId, int page = 1, int pageSize = 50)\n        {\n            page = Math.Max(1, page);\n            pageSize = Clamp(pageSize, 10, 200);\n\n            var q = _db.Set<AudienceMember>()\n                .AsNoTracking()\n                .Where(m => m.BusinessId == businessId && m.AudienceId == audienceId && !m.IsDeleted)\n                .OrderByDescending(m => m.CreatedAt);\n\n            var items = await q\n                .Skip((page - 1) * pageSize)\n                .Take(pageSize)\n                .Select(m => new AudienceMemberDto\n                {\n                    Id = m.Id,\n                    ContactId = m.ContactId,\n                    Name = m.Name,\n                    PhoneNumber = string.IsNullOrWhiteSpace(m.PhoneE164) ? m.PhoneRaw : m.PhoneE164,\n                    Email = m.Email,\n                    VariablesJson = m.AttributesJson,\n                    CreatedAt = m.CreatedAt\n                })\n                .ToListAsync();\n\n            return items;\n        }\n\n        // ---- helpers ----\n\n        private static int Clamp(int value, int min, int max)\n        {\n            if (value < min) return min;\n            if (value > max) return max;\n            return value;\n        }\n\n        private static string? ToE164OrNull(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var digits = new string(raw.Where(char.IsDigit).ToArray());\n            if (string.IsNullOrEmpty(digits)) return null;\n\n            // naive normalization: ensure leading +\n            if (raw.Trim().StartsWith(\"+\")) return \"+\" + digits;\n            return \"+\" + digits;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Services/CampaignVariableMapService.cs",
      "sha256": "fde5d702d281a92a4bbe0caa800ed3ab47c52fb28be71324666f3a9c7f34c3c7",
      "language": "csharp",
      "size": 6105,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignVariableMapService\n    {\n        Task<bool> SaveAsync(Guid businessId, CampaignVariableMapDto dto, string updatedBy);\n        Task<CampaignVariableMapDto?> GetAsync(Guid businessId, Guid campaignId);\n    }\n\n    public class CampaignVariableMapService : ICampaignVariableMapService\n    {\n        private readonly AppDbContext _db;\n\n        public CampaignVariableMapService(AppDbContext db) { _db = db; }\n\n        public async Task<bool> SaveAsync(Guid businessId, CampaignVariableMapDto dto, string updatedBy)\n        {\n            try\n            {\n                if (businessId == Guid.Empty) throw new UnauthorizedAccessException(\"Invalid business id.\");\n                if (dto == null) throw new ArgumentNullException(nameof(dto));\n                if (dto.CampaignId == Guid.Empty) throw new ArgumentException(\"CampaignId is required.\", nameof(dto));\n\n                // Ensure campaign ownership\n                var owns = await _db.Campaigns\n                    .AsNoTracking()\n                    .AnyAsync(c => c.Id == dto.CampaignId && c.BusinessId == businessId);\n                if (!owns) return false;\n\n                // Load existing rows for this campaign\n                var existing = await _db.CampaignVariableMaps\n                    .Where(m => m.BusinessId == businessId && m.CampaignId == dto.CampaignId)\n                    .ToListAsync();\n\n                // Normalize incoming:\n                // - tolerate null Items\n                // - default Component ‚Üí \"BODY\" if missing\n                // - trim strings\n                // - keep last occurrence per (Component, Index)\n                var incoming = (dto.Items?.AsEnumerable() ?? Enumerable.Empty<CampaignVariableMapItemDto>())\n                    .Where(i => i != null && i.Index >= 1)\n                    .Select(i => new\n                    {\n                        Component = string.IsNullOrWhiteSpace(i.Component) ? \"BODY\" : i.Component!.Trim(),\n                        i.Index,\n                        SourceType = string.IsNullOrWhiteSpace(i.SourceType) ? \"Static\" : i.SourceType!.Trim(),\n                        SourceKey = string.IsNullOrWhiteSpace(i.SourceKey) ? null : i.SourceKey!.Trim(),\n                        StaticValue = i.StaticValue,\n                        Expression = i.Expression,\n                        DefaultValue = i.DefaultValue,\n                        i.IsRequired\n                    })\n                    .GroupBy(x => new { x.Component, x.Index })\n                    .Select(g => g.Last())\n                    .ToList();\n\n                var incomingKeySet = incoming\n                    .Select(i => (i.Component, i.Index))\n                    .ToHashSet();\n\n                // Upsert each incoming row\n                foreach (var item in incoming)\n                {\n                    var row = existing.FirstOrDefault(x => x.Component == item.Component && x.Index == item.Index);\n                    if (row == null)\n                    {\n                        row = new CampaignVariableMap\n                        {\n                            Id = Guid.NewGuid(),\n                            BusinessId = businessId,\n                            CampaignId = dto.CampaignId,\n                            Component = item.Component,\n                            Index = item.Index\n                        };\n                        _db.CampaignVariableMaps.Add(row);\n                        existing.Add(row); // keep local cache in sync in case of duplicates\n                    }\n\n                    row.SourceType = item.SourceType;\n                    row.SourceKey = item.SourceKey;\n                    row.StaticValue = item.StaticValue;\n                    row.Expression = item.Expression;\n                    row.DefaultValue = item.DefaultValue;\n                    row.IsRequired = item.IsRequired;\n                }\n\n                // Remove deleted mappings (anything not present in incoming)\n                var toRemove = existing.Where(x => !incomingKeySet.Contains((x.Component, x.Index))).ToList();\n                if (toRemove.Count > 0)\n                    _db.CampaignVariableMaps.RemoveRange(toRemove);\n\n                await _db.SaveChangesAsync();\n\n                var upserted = incoming.Count;\n                var removed = toRemove.Count;\n\n                Log.Information(\"‚úÖ Variable map saved | biz={Biz} campaign={Campaign} upserted={Up} removed={Rm}\",\n                    businessId, dto.CampaignId, upserted, removed);\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed saving campaign variable map | biz={Biz} campaign={Campaign}\", businessId, dto?.CampaignId);\n                throw;\n            }\n        }\n        public async Task<CampaignVariableMapDto?> GetAsync(Guid businessId, Guid campaignId)\n        {\n            var rows = await _db.CampaignVariableMaps\n                .AsNoTracking()\n                .Where(m => m.BusinessId == businessId && m.CampaignId == campaignId)\n                .OrderBy(m => m.Component).ThenBy(m => m.Index)\n                .ToListAsync();\n\n            var items = rows.Select(r => new CampaignVariableMapItemDto\n            {\n                Component = r.Component,\n                Index = r.Index,\n                SourceType = r.SourceType,\n                SourceKey = r.SourceKey,\n                StaticValue = r.StaticValue,\n                Expression = r.Expression,\n                DefaultValue = r.DefaultValue,\n                IsRequired = r.IsRequired\n            }).ToList();\n\n            return new CampaignVariableMapDto\n            {\n                CampaignId = campaignId,\n                Items = items\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Audiences/Services/IAudienceImportService.cs",
      "sha256": "80df51144eb035b0134e49bbdb7de6c48754a7800e72ee354b158ddf5401a202",
      "language": "csharp",
      "size": 586,
      "content": "using System;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Audiences.DTOs;\n\nnamespace xbytechat.api.Features.Audiences.Services\n{\n    public interface IAudienceImportService\n    {\n        /// <summary>\n        /// Parses a CSV stream (first row = headers), creates a CsvBatch and CsvRows, and returns batch summary.\n        /// </summary>\n        Task<CsvImportResponseDto> ImportCsvAsync(\n            Guid businessId,\n            Stream csvStream,\n            string fileName,\n            CancellationToken ct = default);\n    }\n}\n"
    }
  ]
}
