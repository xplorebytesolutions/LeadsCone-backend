{
  "name": "xbytechat-api/Features/MessagesEngine",
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/IWhatsAppProvider.cs",
      "sha256": "25a1b1105d245abb3cf620574e2cca3c0da007884f8ba8a062c2cd4724b88022",
      "language": "csharp",
      "size": 1124,
      "content": "// üìÑ File: Features/MessagesEngine/Abstractions/IWhatsAppProvider.cs\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n   \n    public interface IWhatsAppProvider\n    {\n        Task<WaSendResult> SendTextAsync(string to, string body);\n        Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components);\n        Task<WaSendResult> SendInteractiveAsync(object fullPayload); // prebuilt object (e.g., image + CTA)\n    }\n}\n\n\n\n//namespace xbytechat.api.Features.MessagesEngine.Abstractions\n//{\n//    public interface IWhatsAppProvider\n//    {\n//        string Provider { get; }\n\n//        Task<WaSendResult> SendTextAsync(string to, string body, CancellationToken ct = default);\n\n//        Task<WaSendResult> SendTemplateAsync(string to, string templateName, string language, object? components, CancellationToken ct = default);\n\n//        // Optional: interactive/image+CTA\n//        Task<WaSendResult> SendInteractiveAsync(object payload, CancellationToken ct = default);\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/WaSendResult.cs",
      "sha256": "cbdf2f4ea14dafdbfd281c92d4701d11b385c52c89785faa04d1848b6af5bd8f",
      "language": "csharp",
      "size": 320,
      "content": "using System.Net;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n    public record WaSendResult(\n        bool Success,\n        string Provider,\n        string? ProviderMessageId = null,\n        HttpStatusCode? StatusCode = null,\n        string? RawResponse = null,\n        string? Error = null\n    );\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/WaSendTemplate.cs",
      "sha256": "ce04cfc0e5abaca6ef42cf5593159791a9ae093be9b7399eae4442252b2362bd",
      "language": "csharp",
      "size": 378,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n    public class WaSendTemplate\n    {\n        public Guid BusinessId { get; init; }\n        public string To { get; init; } = \"\";\n        public string TemplateName { get; init; } = \"\";\n        public string Language { get; init; } = \"en_US\";\n        public object? Components { get; init; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/WaSendText.cs",
      "sha256": "192ded7365dc037581055e12a8e00816487953e786e107447465183e8e0f83a7",
      "language": "csharp",
      "size": 260,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n    public class WaSendText\n    {\n        public Guid BusinessId { get; init; }\n        public string To { get; init; } = \"\";\n        public string Body { get; init; } = \"\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Contracts/MessageEnvelope.cs",
      "sha256": "7d9a3c2180154a34b5c48dbcc92d2b9ce3affbcadaacba097bba0eae1af2925e",
      "language": "csharp",
      "size": 648,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.MessagesEngine.Contracts\n{\n    /// <summary>\n    /// Provider-agnostic message envelope. Maps to Meta/Pinbot under the hood.\n    /// </summary>\n    public sealed record MessageEnvelope(\n        string To,\n        string Kind,                       // \"text\" | \"template\" | \"interactive\"\n        string? TemplateName = null,\n        string LanguageCode = \"en_US\",\n        List<object>? Components = null,    // template components\n        object? Interactive = null,         // interactive payload (if any)\n        string? TextBody = null,\n        string? ImageUrl = null\n    );\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Controllers/MessageEngineController.cs",
      "sha256": "dccc3a3007e5829ebb5161cc80da73208b3eec3a715695a0e4c467584bb87735",
      "language": "csharp",
      "size": 8267,
      "content": "\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing System.Text.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.MessagesEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class MessageEngineController : ControllerBase\n    {\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IMessageAnalyticsService _messageAnalyticsServiceervice;\n\n\n        public MessageEngineController(IMessageEngineService messageService, IMessageAnalyticsService messageAnalyticsService)\n        {\n            _messageEngineService = messageService;\n            _messageAnalyticsServiceervice = messageAnalyticsService;\n        }\n        //[HttpPost(\"send-contentfree-text\")]\n        //public async Task<IActionResult> SendTextMessage([FromBody] TextMessageSendDto dto)\n        //{\n        //    if (!ModelState.IsValid)\n        //        return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid text message payload.\"));\n\n        //    try\n        //    {\n        //        var result = await _messageEngineService.SendTextDirectAsync(dto); // üëà New direct method\n\n        //        return result.Success\n        //            ? Ok(result)\n        //            : BadRequest(ResponseResult.ErrorInfo(result.Message, result.RawResponse));\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        Console.WriteLine($\"‚ùå Exception while sending text message: {ex.Message}\");\n        //        return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending text message.\", ex.ToString()));\n        //    }\n        //}\n        [HttpPost(\"send-contentfree-text\")]\n        public async Task<IActionResult> SendTextMessage([FromBody] TextMessageSendDto dto)\n        {\n            // 0) Null/body guard\n            if (dto is null)\n                return BadRequest(ResponseResult.ErrorInfo(\n                    \"‚ùå Invalid request body.\",\n                    \"Request JSON was null or malformed.\"));\n\n            // 1) Minimal required-field validation (provider is optional here)\n            var missing = new List<string>();\n            if (string.IsNullOrWhiteSpace(dto.RecipientNumber)) missing.Add(\"recipientNumber\");\n            if (string.IsNullOrWhiteSpace(dto.TextContent)) missing.Add(\"textContent\");\n\n            if (missing.Count > 0)\n            {\n                return BadRequest(ResponseResult.ErrorInfo(\n                    \"‚ùå Invalid text message payload.\",\n                    $\"Missing/empty: {string.Join(\", \", missing)}\"\n                ));\n            }\n\n            // 2) Diagnostics while debugging\n            Console.WriteLine($\"[SendTextMessage] Incoming: {JsonSerializer.Serialize(dto)}\");\n            Console.WriteLine($\"[SendTextMessage] provider(raw)='{dto.Provider}' phoneNumberId(raw)='{dto.PhoneNumberId}'\");\n\n            try\n            {\n                // 3) Delegate to service (service will resolve provider if missing)\n                var result = await _messageEngineService.SendTextDirectAsync(dto);\n\n                // 4) Return exactly what service produced\n                return result.Success ? Ok(result) : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception while sending text message: {ex}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\n                    \"üö® Server error while sending text message.\", ex.ToString()));\n            }\n        }\n        [HttpPost(\"send-template-simple\")]\n        public async Task<IActionResult> SendTemplateMessageSimple([FromBody] SimpleTemplateMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid template message request.\"));\n\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out Guid businessId))\n                    return Unauthorized(ResponseResult.ErrorInfo(\"‚ùå Business ID not found in token.\"));\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, dto);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(ResponseResult.ErrorInfo(result.Message ?? \"‚ùå Failed to send template.\", result.RawResponse));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception while sending template: {ex.Message}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending template.\", ex.ToString()));\n            }\n        }\n\n\n        [HttpPost(\"send-image-campaign/{campaignId}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid campaignId)\n        {\n            try\n            {\n                var businessId = UserClaimHelper.GetBusinessId(User); // ‚úÖ from\n                                                                      // claims\n                var userName = UserClaimHelper.GetUserName(User);     // for logging (if needed)\n\n                var result = await _messageEngineService.SendImageCampaignAsync(campaignId, businessId, userName);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error while sending image campaign: \" + ex.Message);\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Server error while sending campaign.\", ex.ToString()));\n            }\n        }\n        public static class UserClaimHelper\n        {\n            public static Guid GetBusinessId(ClaimsPrincipal user)\n            {\n                var claim = user.Claims.FirstOrDefault(c => c.Type == \"businessId\");\n                return claim != null ? Guid.Parse(claim.Value) : Guid.Empty;\n            }\n\n            public static string GetUserName(ClaimsPrincipal user)\n            {\n                return user?.Identity?.Name ?? \"Unknown\";\n            }\n        }\n\n        [HttpPost(\"send-image-template\")]\n        public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        {\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // Uses your extension method!\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return Unauthorized(new { message = ex.Message });\n            }\n\n            var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n            if (result.Success)\n                return Ok(new { message = result.Message, raw = result.RawResponse });\n\n            return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        }\n\n\n        //[HttpPost(\"send-video-template\")]\n        //public async Task<IActionResult> SendVideoTemplateMessage([FromBody] VideoTemplateMessageDto dto)\n        //{\n        //    Guid businessId;\n        //    try { businessId = User.GetBusinessId(); }\n        //    catch (UnauthorizedAccessException ex) { return Unauthorized(new { message = ex.Message }); }\n\n        //    var result = await _messageEngineService.SendVideoTemplateMessageAsync(dto, businessId);\n        //    return result.Successin\n        //        ? Ok(new { message = result.Message, raw = result.RawResponse })\n        //        : BadRequest(new { message = result.Message, raw = result.RawResponse });\n        //}\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 20)\n        {\n            var businessId = User.GetBusinessId();\n            var logs = await _messageAnalyticsServiceervice.GetRecentLogsAsync(businessId, limit);\n            return Ok(new { success = true, data = logs });\n        }\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/AutoSendTemplateMessageDto.cs",
      "sha256": "99519bdaed8df38337d3485148cfc53b4972c2616ebb386417321455ad582576",
      "language": "csharp",
      "size": 422,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class AutoSendTemplateMessageDto\n    {\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string PhoneNumber { get; set; }\n        public Guid TemplateId { get; set; }\n        public string TemplateName { get; set; }\n        public Dictionary<string, string> Placeholders { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/CtaButtonDto.cs",
      "sha256": "60ecf5aa33d787f635ef05f11c48b8f9f6a11d48b2d7322f7f2ef575b91f9657",
      "language": "csharp",
      "size": 307,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class CtaButtonDto\n    {\n        public string Title { get; set; } = string.Empty; // e.g., \"Buy Now\", \"View Details\"\n        public string Type { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/DocumentTemplateDto.cs",
      "sha256": "bbda0a8069d8f5d2cd55009d1276b85f5ba6bd077a0c8c41cb055431dbed2507",
      "language": "csharp",
      "size": 161,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class DocumentTemplateDto\n    {\n        public string? HeaderDocumentUrl { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/DocumentTemplateMessageDto.cs",
      "sha256": "d1661773f6bc14badc4979362169c3170319abbebf19ca7b004eecab4a377a1f",
      "language": "csharp",
      "size": 1813,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs; // for CampaignButtonDto in this folder\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    /// <summary>\n    /// Payload for sending a template with a DOCUMENT header.\n    /// Aliases provided so code using Parameters/Buttons OR TemplateParameters/ButtonParameters compiles.\n    /// </summary>\n    public sealed class DocumentTemplateMessageDto\n    {\n        public Guid BusinessId { get; set; }\n\n        // Routing / provider\n        public string? Provider { get; set; }            // \"META\" | \"PINNACLE\"\n        public string? PhoneNumberId { get; set; }       // Meta WABA phone id (sender)\n\n        // Recipient & template identity\n        public string RecipientNumber { get; set; } = \"\"; // E.164\n        public string TemplateName { get; set; } = \"\";\n        public string LanguageCode { get; set; } = \"en_US\";\n\n        // Header\n        public string? HeaderDocumentUrl { get; set; }\n\n        // Body params (ordered {{1}}..)\n        public List<string> Parameters { get; set; } = new();\n        // Alias for older call sites\n        public List<string> TemplateParameters\n        {\n            get => Parameters;\n            set => Parameters = value ?? new List<string>();\n        }\n\n        // Buttons (we use your actual CampaignButtonDto: ButtonText, ButtonType, TargetUrl)\n        public List<CampaignButtonDto> Buttons { get; set; } = new();\n        // Alias for older call sites\n        public List<CampaignButtonDto> ButtonParameters\n        {\n            get => Buttons;\n            set => Buttons = value ?? new List<CampaignButtonDto>();\n        }\n\n        // Optional extras\n        public Guid? CTAFlowConfigId { get; set; }\n        public string? TemplateBody { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/ImageTemplateMessageDto.cs",
      "sha256": "471132fb66303d77584686def7af22e2365d5b68d32a950f9582f245c966452c",
      "language": "csharp",
      "size": 861,
      "content": "using System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\npublic class ImageTemplateMessageDto\n{\n    public Guid BusinessId { get; set; }\n    public string RecipientNumber { get; set; }\n    public string TemplateName { get; set; }\n    public string LanguageCode { get; set; } = \"en_US\";\n    public string HeaderImageUrl { get; set; }\n    public List<string> TemplateParameters { get; set; } = new();\n    public List<CampaignButtonDto> ButtonParameters { get; set; } = new();\n\n    // ‚úÖ Add these two for flow tracking\n    public Guid? CTAFlowConfigId { get; set; }\n    public Guid? CTAFlowStepId { get; set; }\n    public string? TemplateBody { get; set; }\n\n\n   // [RegularExpression(\"^(PINNACLE|META_CLOUD)$\")]\n    public string Provider { get; set; } = string.Empty;\n    public string? PhoneNumberId { get; set; }\n   \n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/MessageTypeEnum.cs",
      "sha256": "d3120f117dc16b8ab9901ba3726defab664b2a9b4a5414eff586e7e27f55062a",
      "language": "csharp",
      "size": 286,
      "content": "using System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [JsonConverter(typeof(JsonStringEnumConverter))] // Enables string parsing in JSON\n    public enum MessageTypeEnum\n    {\n        Text,\n        Image,\n        Template,\n        Cta\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendMessageDto.cs",
      "sha256": "5121018135042d9cdd9a4a404307559a8024ffa4bc1b851f346690fedb544886",
      "language": "csharp",
      "size": 2059,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs.Validation;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [ValidateMessageDto] // ‚úÖ Custom validator will enforce conditional field rules\n    public class SendMessageDto\n    {\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [Phone]\n        public string RecipientNumber { get; set; } = string.Empty;\n\n        [Required]\n        public MessageTypeEnum MessageType { get; set; }\n\n        // üìù Text Message\n        public string? TextContent { get; set; }\n\n        // üñºÔ∏è Image Message\n        public string? MediaUrl { get; set; }\n\n        // üìã Template Message\n        public string? TemplateName { get; set; }\n        public Dictionary<string, string>? TemplateParameters { get; set; }\n\n        // üõí CTA Message\n        public List<CtaButtonDto>? CtaButtons { get; set; }\n\n        // ‚úÖ Required: this was missing [Optional but needed for CTA/Template message sending]\n        public List<string>? ButtonParams { get; set; }\n\n        // üìä Optional Metadata\n        public Guid? CampaignId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n\n        public string? SourceModule { get; set; }\n        public string? CustomerId { get; set; }\n        public string? CustomerName { get; set; }\n        public string? CustomerPhone { get; set; }\n        public string? BotId { get; set; }\n        public string? RefMessageId { get; set; }\n        public string? CTATriggeredFrom { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n\n        // ‚úÖ Add these two for flow tracking\n        public string? TemplateBody { get; set; }  // üî• Used to render actual message body from placeholders\n\n      //  [RegularExpression(\"^(PINNACLE|META_CLOUD)$\")]\n        public string Provider { get; set; } = string.Empty;\n\n        public string? PhoneNumberId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendTemplateMessageSimpleDto.cs",
      "sha256": "00dc74bb6a1b396bab6fcd63f93454cfd59671260c4da8b0afd8754e83e10ce8",
      "language": "csharp",
      "size": 478,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SendTemplateMessageSimpleDto\n    {\n        public Guid BusinessId { get; set; }\n        public string RecipientNumber { get; set; }\n        public string TemplateName { get; set; }\n        public List<string> TemplateParameters { get; set; } = new();\n        // ‚úÖ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SimpleTemplateMessageDto.cs",
      "sha256": "4757d0e55a4b6f1f6b5ecf2c13e960647f3835a3c264892839d669c32fe37f8f",
      "language": "csharp",
      "size": 967,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SimpleTemplateMessageDto\n    {\n        //public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TemplateName { get; set; }\n\n        public List<string> TemplateParameters { get; set; } = new();\n        public bool HasStaticButtons { get; set; } = false;\n\n       // [RegularExpression(\"^(PINNACLE|META_CLOUD)$\")]\n        public string Provider { get; set; } = string.Empty;\n        public string? PhoneNumberId { get; set; }\n        // ‚úÖ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public string? TemplateBody { get; set; }  // üî• Used to render actual message body from placeholders\n\n        public string? LanguageCode { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/TemplateForUIResponseDto.cs",
      "sha256": "8598c768ad7f753c61a4a2c296a18db6285c872705ca0b16a479b5d5bdedde55",
      "language": "csharp",
      "size": 626,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\npublic class TemplateForUIResponseDto\n{\n    public string Name { get; set; }\n    public string Language { get; set; }\n    public string Body { get; set; }\n\n    // ‚úÖ Correct naming for frontend\n    public int ParametersCount { get; set; }\n\n    public List<ButtonMetadataDto> ButtonParams { get; set; }\n    public bool HasImageHeader { get; set; } // üÜï Used to detect image templates\n\n    public string? HeaderKind { get; set; }          // \"text\" | \"image\" | \"video\" | \"document\" | \"none\"\n    public bool RequiresHeaderMediaUrl { get; set; } // true for image/video/document\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/TextMessageSendDto.cs",
      "sha256": "ac840891c791dd1b7c45b920ce2db245ce63eb12364e3a606b492c053268da6c",
      "language": "csharp",
      "size": 847,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class TextMessageSendDto\n    {\n        public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TextContent { get; set; }\n\n        public Guid ContactId { get; set; }\n\n        public string? PhoneNumberId { get; set; }\n        // ‚úÖ NEW: Optional source indicator (e.g., \"campaign\", \"auto-reply\", etc.)\n\n        //[RegularExpression(\"^(PINNACLE|META_CLOUD)$\")]\n        //[Required]\n        public string Provider { get; set; } = string.Empty;\n        public string? Source { get; set; }\n\n        // ‚úÖ NEW: Optional message ID for campaign tracing\n        public string? MessageId { get; set; }\n\n        public bool IsSaveContact { get; set; } = false; // default true\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/VideoTemplateMessageDto.cs",
      "sha256": "57c4f2a9a6c884efb7c3ec74c8674e04482aaaa04428ab6232a7ea3db1adc043",
      "language": "csharp",
      "size": 941,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\npublic class VideoTemplateMessageDto\n{\n    public Guid BusinessId { get; set; }\n    public string RecipientNumber { get; set; } = string.Empty;\n\n    public string TemplateName { get; set; } = string.Empty;\n    public string LanguageCode { get; set; } = \"en_US\";\n\n    // mirrors HeaderImageUrl\n    public string? HeaderVideoUrl { get; set; }\n\n    public List<string> TemplateParameters { get; set; } = new();\n    public List<CampaignButtonDto> ButtonParameters { get; set; } = new();\n\n    // for flow tracking parity\n    public Guid? CTAFlowConfigId { get; set; }\n    public Guid? CTAFlowStepId { get; set; }\n    public string? TemplateBody { get; set; }\n\n    // same explicit provider knobs you already use\n    public string Provider { get; set; } = string.Empty; // \"PINNACLE\" | \"META_CLOUD\"\n    public string? PhoneNumberId { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Factory/IWhatsAppProviderFactory.cs",
      "sha256": "342d4ace84b80c735c364b8ff654502fff27f1bfeb70eb78d5469879ec57ce1f",
      "language": "csharp",
      "size": 578,
      "content": "using System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\n\nnamespace xbytechat.api.Features.MessagesEngine.Factory\n{\n    public interface IWhatsAppProviderFactory\n    {\n        //Task<IWhatsAppProvider> CreateAsync(Guid businessId, CancellationToken ct = default);\n        Task<IWhatsAppProvider> CreateAsync(Guid businessId);\n       //Task<IWhatsAppProvider> CreateAsync(Guid businessId, string? phoneNumberId);\n        Task<IWhatsAppProvider> CreateAsync(Guid businessId, string provider, string? phoneNumberId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Factory/WhatsAppProviderFactory.cs",
      "sha256": "11417f5a30ab884634369dd9281755cfa908fa987e687a53f323bf4644855b83",
      "language": "csharp",
      "size": 8611,
      "content": "using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat.api.Features.MessagesEngine.Providers;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing static System.Net.WebRequestMethods;\nusing static System.Runtime.InteropServices.JavaScript.JSType;\n\nnamespace xbytechat.api.Features.MessagesEngine.Factory\n{\n    public class WhatsAppProviderFactory : IWhatsAppProviderFactory\n    {\n        private readonly IServiceProvider _sp;\n        private readonly AppDbContext _db;\n        private readonly ILogger<WhatsAppProviderFactory> _logger;\n\n        public WhatsAppProviderFactory(IServiceProvider sp, AppDbContext db, ILogger<WhatsAppProviderFactory> logger)\n        {\n            _sp = sp;\n            _db = db;\n            _logger = logger;\n        }\n\n        public async Task<IWhatsAppProvider> CreateAsync(Guid businessId)\n        {\n            var setting = await _db.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive)\n                ?? throw new InvalidOperationException(\"WhatsApp settings not found for this business.\");\n\n            var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n\n            using var scope = _sp.CreateScope();\n\n            var httpClientFactory = scope.ServiceProvider.GetService<IHttpClientFactory>();\n            var http =\n                httpClientFactory != null\n                    ? httpClientFactory.CreateClient(providerKey == \"meta_cloud\" ? \"wa:meta_cloud\" : \"wa:pinnacle\")\n                    : scope.ServiceProvider.GetRequiredService<HttpClient>();\n\n            return providerKey switch\n            {\n                //\"pinnacle\" =>\n                //            new PinnacleProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinnacleProvider>>(), setting),\n                \"pinnacle\" => new PinnacleProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinnacleProvider>>(), setting),\n                \"meta_cloud\" =>\n                    new MetaCloudProvider(_db, http, scope.ServiceProvider.GetRequiredService<ILogger<MetaCloudProvider>>(), setting),\n\n                _ => throw new NotSupportedException($\"Unsupported WhatsApp provider: {providerKey}\")\n            };\n        }\n        //public async Task<IWhatsAppProvider> CreateAsync(Guid businessId, string? phoneNumberId)\n        //{\n        //    var setting = await _db.WhatsAppSettings\n        //        .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive)\n        //        ?? throw new InvalidOperationException(\"WhatsApp settings not found for this business.\");\n\n        //    // per-send override of the sender number (in-memory only)\n        //    if (!string.IsNullOrWhiteSpace(phoneNumberId))\n        //        setting.PhoneNumberId = phoneNumberId.Trim();\n\n        //    var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n\n        //    using var scope = _sp.CreateScope();\n\n        //    var httpClientFactory = scope.ServiceProvider.GetService<IHttpClientFactory>();\n        //    var http =\n        //        httpClientFactory != null\n        //            ? httpClientFactory.CreateClient(providerKey == \"meta_cloud\" ? \"wa:meta_cloud\" : \"wa:pinnacle\")\n        //            : scope.ServiceProvider.GetRequiredService<HttpClient>();\n\n        //    return providerKey switch\n        //    {\n        //        \"pinnacle\" => new PinnacleProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinnacleProvider>>(), setting),\n        //        \"meta_cloud\" => new MetaCloudProvider(_db, http, scope.ServiceProvider.GetRequiredService<ILogger<MetaCloudProvider>>(), setting),\n        //        _ => throw new NotSupportedException($\"Unsupported WhatsApp provider: {providerKey}\")\n        //    };\n        //}\n        public async Task<IWhatsAppProvider> CreateAsync(Guid businessId, string provider, string? phoneNumberId)\n        {\n            if (string.IsNullOrWhiteSpace(provider))\n                throw new ArgumentException(\"Provider is required.\", nameof(provider));\n            if (provider is not \"PINNACLE\" and not \"META_CLOUD\")\n                throw new NotSupportedException($\"Unsupported provider: {provider}\");\n\n            // If a sender was chosen, ensure it belongs to THIS business+provider\n            if (!string.IsNullOrWhiteSpace(phoneNumberId))\n            {\n                var exists = await _db.WhatsAppPhoneNumbers.AsNoTracking().AnyAsync(n =>\n                    n.BusinessId == businessId && n.Provider == provider && n.PhoneNumberId == phoneNumberId);\n                if (!exists)\n                    throw new InvalidOperationException(\"Selected PhoneNumberId does not belong to this provider/business.\");\n            }\n\n            // Load the settings row for the exact (BusinessId, Provider)\n            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(s =>\n                s.BusinessId == businessId && s.Provider == provider && s.IsActive)\n                ?? throw new InvalidOperationException($\"WhatsApp settings not found for provider {provider}.\");\n\n            // Per-send override ‚Äì transient only\n            if (!string.IsNullOrWhiteSpace(phoneNumberId))\n                setting.PhoneNumberId = phoneNumberId.Trim();\n\n            if (string.IsNullOrWhiteSpace(setting.ApiUrl))\n                throw new InvalidOperationException(\"API URL is empty. Save provider settings first.\");\n            if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                throw new InvalidOperationException(\"API Key/Token is empty. Save provider settings first.\");\n\n            using var scope = _sp.CreateScope();\n            var http = scope.ServiceProvider\n                .GetRequiredService<IHttpClientFactory>()\n                .CreateClient(provider == \"META_CLOUD\" ? \"wa:meta_cloud\" : \"wa:pinnacle\");\n\n            return provider switch\n            {\n                \"PINNACLE\" => new PinnacleProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinnacleProvider>>(), setting),\n                \"META_CLOUD\" => new MetaCloudProvider(_db, http, scope.ServiceProvider.GetRequiredService<ILogger<MetaCloudProvider>>(), setting),\n                _ => throw new NotSupportedException($\"Unsupported provider: {provider}\")\n            };\n        }\n\n    }\n}\n\n\n//// üìÑ File: Features/MessagesEngine/Factory/WhatsAppProviderFactory.cs\n//using System;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.DependencyInjection;\n//using Microsoft.Extensions.Logging;\n//using xbytechat.api;\n//using xbytechat.api.Features.MessagesEngine.Abstractions;\n//using xbytechat.api.Features.MessagesEngine.Providers;\n\n//namespace xbytechat.api.Features.MessagesEngine.Factory\n//{\n\n//    public class WhatsAppProviderFactory : IWhatsAppProviderFactory\n//    {\n//        private readonly IServiceProvider _sp;\n//        private readonly AppDbContext _db;\n//        private readonly ILogger<WhatsAppProviderFactory> _logger;\n\n//        public WhatsAppProviderFactory(IServiceProvider sp, AppDbContext db, ILogger<WhatsAppProviderFactory> logger)\n//        {\n//            _sp = sp;\n//            _db = db;\n//            _logger = logger;\n//        }\n\n//        public async Task<IWhatsAppProvider> CreateAsync(Guid businessId)\n//        {\n//            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive)\n//                          ?? throw new InvalidOperationException(\"WhatsApp settings not found for this business.\");\n\n//            var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n\n//            // Create a new scope to inject the per-tenant setting into provider constructor\n//            var scope = _sp.CreateScope();\n//            var http = scope.ServiceProvider.GetRequiredService<HttpClient>();\n\n//            return providerKey switch\n//            {\n//                \"pinnacle\" => new PinbotProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinbotProvider>>(), setting),\n//                \"meta_cloud\" => new MetaCloudProvider(_db, http, scope.ServiceProvider.GetRequiredService<ILogger<MetaCloudProvider>>(), setting),\n//                _ => throw new NotSupportedException($\"Unsupported WhatsApp provider: {providerKey}\")\n//            };\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Outbox/OutboxMessage.cs",
      "sha256": "caa5c09bc7c28e6aaa5bb1aa93cd76f38c41f5c2754790d9c45f6af037ed1a25",
      "language": "csharp",
      "size": 1109,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessagesEngine.Outbox\n{\n    public enum OutboxStatus\n    {\n        Queued = 0,\n        Sending = 1,\n        Sent = 2,\n        Failed = 3\n    }\n\n    public class OutboxMessage\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public Guid? ContactId { get; set; }\n\n        public string RecipientNumber { get; set; } = \"\";\n        public string ProviderKey { get; set; } = \"\"; // \"meta_cloud\" | \"pinnacle\" (optional hint)\n        public string PayloadJson { get; set; } = \"\"; // serialized MessageEnvelope\n        public string CorrelationId { get; set; } = \"\"; // for idempotency & tracing\n\n        public OutboxStatus Status { get; set; } = OutboxStatus.Queued;\n        public int AttemptCount { get; set; }\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? NextAttemptAt { get; set; } = DateTime.UtcNow;\n        public string? LastError { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/CtaMessagePayloadBuilder.cs",
      "sha256": "f23794fdb8775eff63c5d249f23e74b7ff5e4497daa7b255ce94693b3ba9a6f7",
      "language": "csharp",
      "size": 1063,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class CtaMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = dto.TextContent },\n                    action = new\n                    {\n                        buttons = dto.CtaButtons?.Select(b => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = b.Value,\n                                title = b.Title\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/ImageMessagePayloadBuilder.cs",
      "sha256": "1400148a9ed0b32af7ece6c87b111a1407feda0f5b651819257c5b740bb01106",
      "language": "csharp",
      "size": 554,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class ImageMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"image\",\n                image = new\n                {\n                    link = dto.MediaUrl\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/IWhatsAppPayloadBuilder.cs",
      "sha256": "89d6b688ba597eb931cd71401717698a692f3e3b645a02d60c1d73dae24731d3",
      "language": "csharp",
      "size": 225,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public interface IWhatsAppPayloadBuilder\n    {\n        object BuildPayload(SendMessageDto dto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/MessagePayloadBuilder.cs",
      "sha256": "ec8606e744a878efdd7f12dadcc799b2aaf290e66c9e419f639672d0003b4bd0",
      "language": "csharp",
      "size": 7842,
      "content": "// Features/MessagesEngine/PayloadBuilders/MessagePayloadBuilder.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public static class MessagePayloadBuilder\n    {\n        // New: a single canonical builder that understands our CSV-materialized shapes.\n        public static object BuildTemplatePayload(\n            string toPhoneE164,\n            string templateName,\n            string languageCode,\n            string headerType,                 // \"none\"|\"text\"|\"image\"|\"video\"|\"document\"\n            string? headerMediaUrl,            // for image/video/document\n            IReadOnlyList<string> bodyParams,  // {{1}}..{{N}}\n            IReadOnlyList<string>? headerTextParams, // header text {{n}} if headerType==\"text\"\n            IReadOnlyDictionary<string, string>? buttonUrlParams // keys: \"button1.url_param\"..\"button3.url_param\"\n        )\n        {\n            var components = new List<object>();\n\n            // 1) HEADER\n            switch ((headerType ?? \"none\").ToLowerInvariant())\n            {\n                case \"text\":\n                    if (headerTextParams != null && headerTextParams.Count > 0)\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = headerTextParams.Select(v => new { type = \"text\", text = v ?? string.Empty }).ToArray()\n                        });\n                    }\n                    break;\n\n                case \"image\":\n                    if (!string.IsNullOrWhiteSpace(headerMediaUrl))\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = new object[]\n                            {\n                                new { type = \"image\", image = new { link = headerMediaUrl } }\n                            }\n                        });\n                    }\n                    break;\n\n                case \"video\":\n                    if (!string.IsNullOrWhiteSpace(headerMediaUrl))\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = new object[]\n                            {\n                                new { type = \"video\", video = new { link = headerMediaUrl } }\n                            }\n                        });\n                    }\n                    break;\n\n                case \"document\":\n                    if (!string.IsNullOrWhiteSpace(headerMediaUrl))\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = new object[]\n                            {\n                                new { type = \"document\", document = new { link = headerMediaUrl } }\n                            }\n                        });\n                    }\n                    break;\n            }\n\n            // 2) BODY\n            if (bodyParams != null && bodyParams.Count > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = bodyParams.Select(v => new { type = \"text\", text = v ?? string.Empty }).ToArray()\n                });\n            }\n\n            // 3) BUTTONS (URL dynamic only)\n            // Expect buttonUrlParams: button{1..3}.url_param -> string\n            if (buttonUrlParams != null && buttonUrlParams.Count > 0)\n            {\n                var buttons = new List<object>();\n\n                for (var pos = 1; pos <= 3; pos++)\n                {\n                    var key = $\"button{pos}.url_param\";\n                    if (buttonUrlParams.TryGetValue(key, out var val) && !string.IsNullOrWhiteSpace(val))\n                    {\n                        buttons.Add(new\n                        {\n                            type = \"button\",\n                            sub_type = \"url\",\n                            index = pos - 1, // Meta expects 0-based index\n                            parameters = new object[]\n                            {\n                                new { type = \"text\", text = val }\n                            }\n                        });\n                    }\n                }\n\n                if (buttons.Count > 0)\n                {\n                    components.AddRange(buttons);\n                }\n            }\n\n            // Meta/Pinnacle style template envelope\n            var payload = new\n            {\n                messaging_product = \"whatsapp\",\n                to = toPhoneE164,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode }, // << not hardcoded\n                    components = components.ToArray()\n                }\n            };\n\n            return payload;\n        }\n    }\n}\n\n\n//using xbytechat.api.Features.CampaignModule.Models;\n//using xbytechat.api.Shared.utility;\n\n//namespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n//{\n//    public static class MessagePayloadBuilder\n//    {\n//        /// <summary>\n//        /// Builds a WhatsApp template message payload for image header + buttons.\n//        /// </summary>\n//        public static object BuildImageTemplatePayload(\n//            string templateName,\n//            string languageCode,\n//            string recipientNumber,\n//            List<string> templateParams,\n//            string? imageUrl,\n//            List<CampaignButton>? buttons\n//        )\n//        {\n//            var components = new List<object>();\n\n//            // ‚úÖ Body with template params\n//            if (templateParams != null && templateParams.Any())\n//            {\n//                components.Add(new\n//                {\n//                    type = \"body\",\n//                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n//                });\n//            }\n\n//            // ‚úÖ Header image if present\n//            if (!string.IsNullOrWhiteSpace(imageUrl))\n//            {\n//                components.Add(new\n//                {\n//                    type = \"header\",\n//                    parameters = new[]\n//                    {\n//                    new { type = \"image\", image = new { link = imageUrl } }\n//                }\n//                });\n//            }\n\n//            // ‚úÖ CTA buttons\n//            if (buttons != null && buttons.Any())\n//            {\n//                var buttonComponents = buttons\n//                    .OrderBy(b => b.Position)\n//                    .Take(3)\n//                    .Select((btn, index) => new\n//                    {\n//                        type = \"button\",\n//                        sub_type = btn.Type, // \"url\" or \"phone_number\"\n//                        index = index.ToString(),\n//                        parameters = new[]\n//                        {\n//                        new { type = \"text\", text = btn.Value }\n//                        }\n//                    });\n\n//                components.AddRange(buttonComponents);\n//            }\n\n//            // ‚úÖ Final WhatsApp Template Payload\n//            return new\n//            {\n//                messaging_product = \"whatsapp\",\n//                to = recipientNumber,\n//                type = \"template\",\n//                template = new\n//                {\n//                    name = templateName,\n//                    language = new { code = languageCode },\n//                    components = components\n//                }\n//            };\n//        }\n//    }\n\n//}"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateMessagePayloadBuilder.cs",
      "sha256": "1beb36776f57bf30bf67df07af07052f4d5fe2609dfe6a4015bf512dff64aee8",
      "language": "csharp",
      "size": 5342,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            if (dto == null) throw new ArgumentNullException(nameof(dto));\n            if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                throw new ArgumentException(\"TemplateName is required.\");\n            if (dto.TemplateParameters == null || dto.TemplateParameters.Count == 0)\n                throw new ArgumentException(\"TemplateParameters are required for template messages.\");\n\n            // Sort by placeholder index like {{1}}, {{2}}, guarding against bad keys\n            var bodyParams = dto.TemplateParameters\n                .Select(kvp =>\n                {\n                    var key = kvp.Key?.Trim('{', '}');\n                    _ = int.TryParse(key, out var idx);\n                    return (idx, kvp.Value);\n                })\n                .OrderBy(t => t.idx)\n                .Select(t => new { type = \"text\", text = t.Value })\n                .ToArray();\n\n            var components = new List<object>\n            {\n                new { type = \"body\", parameters = bodyParams }\n            };\n\n            if (dto.ButtonParams != null && dto.ButtonParams.Any())\n            {\n                for (int i = 0; i < dto.ButtonParams.Count; i++)\n                {\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i.ToString(),\n                        parameters = new[]\n                        {\n                            new { type = \"text\", text = dto.ButtonParams[i] }\n                        }\n                    });\n                }\n            }\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components\n                }\n            };\n        }\n    }\n}\n\n\n//using xbytechat.api.Features.MessagesEngine.DTOs;\n//using xbytechat.api.Helpers;\n\n//namespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n//{\n//    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n//    {\n//        public object BuildPayload(SendMessageDto dto)\n//        {\n//            var components = new List<object>();\n\n//            // ‚úÖ BODY PARAMETERS: Insert dynamic values into the template body\n//            // WhatsApp expects these to be in order ({{1}}, {{2}}, etc.)\n//            if (dto.TemplateParameters == null || dto.TemplateParameters.Count == 0)\n//                return ResponseResult.ErrorInfo(\"‚ùå Missing template parameters.\");\n//            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n//                {\n//                var bodyParams = dto.TemplateParameters\n//                    .OrderBy(kvp => int.Parse(kvp.Key.Trim('{', '}'))) // üî¢ Extract and sort by index\n//                    .Select(kvp => new\n//                    {\n//                        type = \"text\",\n//                        text = kvp.Value\n//                    }).ToArray();\n\n//                components.Add(new\n//                {\n//                    type = \"body\",\n//                    parameters = bodyParams\n//                });\n//            }\n\n//            // ‚úÖ BUTTON PARAMETERS: For templates with dynamic URL buttons (index-based)\n//            if (dto.ButtonParams != null && dto.ButtonParams.Any())\n//            {\n//                for (int i = 0; i < dto.ButtonParams.Count; i++)\n//                {\n//                    components.Add(new\n//                    {\n//                        type = \"button\",\n//                        sub_type = \"url\",\n//                        index = i.ToString(), // WhatsApp requires index as a string\n//                        parameters = new[]\n//                        {\n//                            new\n//                            {\n//                                type = \"text\",\n//                                text = dto.ButtonParams[i]\n//                            }\n//                        }\n//                    });\n//                }\n//            }\n\n//            // ‚úÖ FINAL WHATSAPP TEMPLATE PAYLOAD\n//            var payload = new\n//            {\n//                messaging_product = \"whatsapp\",\n//                to = dto.RecipientNumber,\n//                type = \"template\",\n//                template = new\n//                {\n//                    name = dto.TemplateName,\n//                    language = new { code = \"en_US\" },\n//                    components = components\n//                }\n//            };\n\n//            // ü™µ Debug log for developer console (optional)\n//            Console.WriteLine(\"üì¶ Built WhatsApp Template Payload:\");\n//            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(payload, new System.Text.Json.JsonSerializerOptions\n//            {\n//                WriteIndented = true\n//            }));\n\n//            return payload;\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateStaticButtonPayloadBuilder.cs",
      "sha256": "68979e5fa2d53ce3fa319c20377ca2022bf9e46b7244c817fb53f84594392f72",
      "language": "csharp",
      "size": 1397,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateStaticButtonPayloadBuilder\n    {\n        public static object Build(SendTemplateMessageSimpleDto dto)\n        {\n            var components = new List<object>();\n\n            // ‚úÖ Add Body Params\n            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = dto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n            }\n\n            // ‚ö†Ô∏è DO NOT add button components for static buttons\n            // Meta will render them automatically if template has static buttons defined\n            // You can later add logic here for dynamic buttons if needed\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components = components\n                }\n            };\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TextMessagePayloadBuilder.cs",
      "sha256": "abc17e5a60e2f58ba07c610db126262040f598a15aca27d2f85d52afc2fb4766",
      "language": "csharp",
      "size": 554,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TextMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"text\",\n                text = new\n                {\n                    body = dto.TextContent\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Providers/MetaCloudProvider.cs",
      "sha256": "1594542e4fc17e4e2448a9f3a8ef59befef06db560ec99f2c73805a6f1464335",
      "language": "csharp",
      "size": 4893,
      "content": "// üìÑ File: Features/MessagesEngine/Providers/MetaCloudProvider.cs\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Nodes;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.MessagesEngine.Providers\n{\n    public class MetaCloudProvider : IWhatsAppProvider\n    {\n        private readonly AppDbContext _db; // kept for future auditing/log enrichment\n        private readonly HttpClient _http;\n        private readonly ILogger<MetaCloudProvider> _logger;\n        private readonly WhatsAppSettingEntity _setting;\n\n        // ‚úÖ Ignore nulls to avoid sending \"components\": null etc.\n        private static readonly JsonSerializerOptions _jsonOpts = new()\n        {\n            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull\n        };\n\n        public MetaCloudProvider(\n            AppDbContext db,\n            HttpClient http,\n            ILogger<MetaCloudProvider> logger,\n            WhatsAppSettingEntity setting)\n        {\n            _db = db;\n            _http = http;\n            _logger = logger;\n            _setting = setting;\n        }\n\n        private string BuildUrl()\n        {\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://graph.facebook.com/v18.0\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            if (string.IsNullOrWhiteSpace(_setting.PhoneNumberId))\n            {\n                _logger.LogError(\"MetaCloudProvider: PhoneNumberId is missing for BusinessId {BusinessId}\", _setting.BusinessId);\n                return $\"{baseUrl}/-/messages\"; // inert path; will fail fast with clear logs\n            }\n\n            return $\"{baseUrl}/{_setting.PhoneNumberId}/messages\";\n        }\n\n        private async Task<WaSendResult> PostAsync(object payload)\n        {\n            var url = BuildUrl();\n            var json = JsonSerializer.Serialize(payload, _jsonOpts);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, url);\n            req.Content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            if (!string.IsNullOrWhiteSpace(_setting.ApiKey))\n            {\n                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", _setting.ApiKey);\n            }\n            else\n            {\n                _logger.LogWarning(\"MetaCloudProvider: ApiToken is empty for BusinessId {BusinessId}\", _setting.BusinessId);\n            }\n\n            var res = await _http.SendAsync(req);\n            var body = await res.Content.ReadAsStringAsync();\n\n            if (!res.IsSuccessStatusCode)\n            {\n                _logger.LogWarning(\"MetaCloud send failed (HTTP {Status}): {Body}\", (int)res.StatusCode, body);\n                return new WaSendResult(\n                    Success: false,\n                    Provider: \"MetaCloud\",\n                    ProviderMessageId: null,\n                    StatusCode: res.StatusCode,\n                    RawResponse: body,\n                    Error: res.ReasonPhrase\n                );\n            }\n\n            string? id = null;\n            try\n            {\n                var root = JsonNode.Parse(body);\n                id = root?[\"messages\"]?[0]?[\"id\"]?.GetValue<string>();\n            }\n            catch\n            {\n                // Keep raw; ID stays null\n            }\n\n            return new WaSendResult(\n                Success: true,\n                Provider: \"MetaCloud\",\n                ProviderMessageId: id,\n                StatusCode: res.StatusCode,\n                RawResponse: body,\n                Error: null\n            );\n        }\n\n        public Task<WaSendResult> SendTextAsync(string to, string body)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"text\",\n                text = new { preview_url = false, body }\n            });\n\n        public Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode },      // ‚úÖ Meta needs { code: \"en_US\" }\n                    components = components ?? System.Linq.Enumerable.Empty<object>() // ‚úÖ never null\n                }\n            });\n\n        public Task<WaSendResult> SendInteractiveAsync(object fullPayload)\n            => PostAsync(fullPayload);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Providers/PinbotProvider.cs",
      "sha256": "b42150f90c8705aa4742bab8ec5351c66edd98d9a0572bc128ae03635d3eed0c",
      "language": "csharp",
      "size": 5193,
      "content": "// üìÑ File: Features/MessagesEngine/Providers/PinbotProvider.cs\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Nodes;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.MessagesEngine.Providers\n{\n    public class PinbotProvider : IWhatsAppProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<PinbotProvider> _logger;\n        private readonly WhatsAppSettingEntity _setting;\n\n        public PinbotProvider(\n            HttpClient http,\n            ILogger<PinbotProvider> logger,\n            WhatsAppSettingEntity setting)\n        {\n            _http = http;\n            _logger = logger;\n            _setting = setting;\n        }\n\n        // Pinbot path segment can be WABA ID *or* PhoneNumberId depending on their account setup.\n        // Prefer PhoneNumberId, fall back to WabaId.\n        private string? ResolvePathIdOrNull()\n        {\n            if (!string.IsNullOrWhiteSpace(_setting.PhoneNumberId)) return _setting.PhoneNumberId!;\n            if (!string.IsNullOrWhiteSpace(_setting.WabaId)) return _setting.WabaId!;\n            return null;\n        }\n\n        private string BuildUrl(string pathId)\n        {\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://partnersv1.pinbot.ai\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            // Pinbot uses /v3/{id}/messages (id can be WABA ID or PhoneNumberId)\n            return $\"{baseUrl}/{pathId}/messages\";\n        }\n\n        private async Task<WaSendResult> PostAsync(object payload)\n        {\n            var pathId = ResolvePathIdOrNull();\n            if (string.IsNullOrWhiteSpace(pathId))\n            {\n                const string err = \"Pinnacle: PhoneNumberId or WabaId is required.\";\n                _logger.LogError(err);\n                return new WaSendResult(\n                    Success: false,\n                    Provider: \"Pinnacle\",\n                    ProviderMessageId: null,\n                    StatusCode: null,\n                    RawResponse: null,\n                    Error: err\n                );\n            }\n\n            var url = BuildUrl(pathId);\n            var json = JsonSerializer.Serialize(payload);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, url);\n            req.Content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            // Pinbot requires apikey header (no Bearer token)\n            if (!string.IsNullOrWhiteSpace(_setting.ApiKey))\n            {\n                req.Headers.TryAddWithoutValidation(\"apikey\", _setting.ApiKey);\n            }\n            else\n            {\n                _logger.LogWarning(\"PinbotProvider: ApiKey is empty for BusinessId {BusinessId}\", _setting.BusinessId);\n            }\n\n            var res = await _http.SendAsync(req);\n            var body = await res.Content.ReadAsStringAsync();\n\n            if (!res.IsSuccessStatusCode)\n            {\n                _logger.LogWarning(\"Pinbot send failed (HTTP {Status}): {Body}\", (int)res.StatusCode, body);\n                return new WaSendResult(\n                    Success: false,\n                    Provider: \"Pinbot\",\n                    ProviderMessageId: null,\n                    StatusCode: res.StatusCode,\n                    RawResponse: body,\n                    Error: res.ReasonPhrase\n                );\n            }\n\n            string? id = null;\n            try\n            {\n                // Pinbot often mirrors Meta's envelope, but be defensive.\n                var root = JsonNode.Parse(body);\n                id = root?[\"messages\"]?[0]?[\"id\"]?.GetValue<string>()\n                     ?? root?[\"message\"]?[\"id\"]?.GetValue<string>();\n            }\n            catch\n            {\n                // keep raw; ID remains null\n            }\n\n            return new WaSendResult(\n                Success: true,\n                Provider: \"Pinbot\",\n                ProviderMessageId: id,\n                StatusCode: res.StatusCode,\n                RawResponse: body,\n                Error: null\n            );\n        }\n\n        public Task<WaSendResult> SendTextAsync(string to, string body)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"text\",\n                text = new { body }\n            });\n\n        public Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode },\n                    components\n                }\n            });\n\n        public Task<WaSendResult> SendInteractiveAsync(object fullPayload)\n            => PostAsync(fullPayload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Providers/PinnacleProvider.cs",
      "sha256": "a4576631b49966f9cb8cdfc6c03c8b309c3a3ebe8b099ed04b7e9a45106c3577",
      "language": "csharp",
      "size": 7508,
      "content": "// üìÑ File: Features/MessagesEngine/Providers/PinnacleProvider.cs\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Nodes;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.MessagesEngine.Providers\n{\n    public class PinnacleProvider : IWhatsAppProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<PinnacleProvider> _logger;\n        private readonly WhatsAppSettingEntity _setting;\n\n        private static readonly JsonSerializerOptions _jsonOpts = new()\n        {\n            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull\n        };\n\n        public PinnacleProvider(HttpClient http, ILogger<PinnacleProvider> logger, WhatsAppSettingEntity setting)\n        {\n            _http = http;\n            _logger = logger;\n            _setting = setting;\n        }\n\n        private string? ResolvePathIdOrNull()\n        {\n            if (!string.IsNullOrWhiteSpace(_setting.PhoneNumberId)) return _setting.PhoneNumberId!;\n            if (!string.IsNullOrWhiteSpace(_setting.WabaId)) return _setting.WabaId!;\n            return null;\n        }\n\n        private string BuildBaseUrl()\n        {\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://partnersv1.pinbot.ai\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            if (!baseUrl.EndsWith(\"/v3\"))\n                baseUrl += \"/v3\";\n\n            return baseUrl;\n        }\n\n        // üîí Hard-append apikey ALWAYS (no conditions)\n        private string BuildSendUrlWithApiKey(string pathId)\n        {\n            // NEW LOGIC: Check if the 'pathId' is already a full URL.\n            // This is how we detect our tracking links.\n            if (Uri.IsWellFormedUriString(pathId, UriKind.Absolute))\n            {\n                // If it's a full URL, use it directly without modification.\n                return pathId;\n            }\n\n            // OLD LOGIC: If it's just a path ID, build the full Pinnacle API URL.\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://partnersv1.pinbot.ai\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            if (!baseUrl.EndsWith(\"/v3\"))\n                baseUrl += \"/v3\";\n\n            return $\"{baseUrl}/{pathId}/messages?apikey={System.Uri.EscapeDataString(_setting.ApiKey)}\";\n        }\n\n        private async Task<WaSendResult> PostAsync(object payload)\n        {\n            var pathId = ResolvePathIdOrNull();\n            if (string.IsNullOrWhiteSpace(pathId))\n            {\n                const string err = \"Pinnacle: PhoneNumberId or WabaId is required.\";\n                _logger.LogError(err);\n                return new WaSendResult(false, \"Pinnacle\", null, null, null, err);\n            }\n\n            if (string.IsNullOrWhiteSpace(_setting.ApiKey))\n            {\n                const string err = \"Pinnacle: ApiKey is missing in WhatsApp settings.\";\n                _logger.LogError(err);\n                return new WaSendResult(false, \"Pinnacle\", null, null, null, err);\n            }\n\n            var url = BuildSendUrlWithApiKey(pathId);\n            var json = JsonSerializer.Serialize(payload, _jsonOpts);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, url);\n            req.Content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            // ‚úÖ Put key in ALL the places some tenants require\n            req.Headers.Remove(\"apikey\");\n            req.Headers.Remove(\"x-api-key\");\n            req.Headers.TryAddWithoutValidation(\"apikey\", _setting.ApiKey);\n            req.Headers.TryAddWithoutValidation(\"x-api-key\", _setting.ApiKey);\n            req.Headers.Authorization = new AuthenticationHeaderValue(\"Apikey\", _setting.ApiKey);\n            req.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n            // üîç PROVE the headers exist BEFORE sending\n            var headerNames = req.Headers.Select(h => $\"{h.Key}:{string.Join(\",\", h.Value.Select(v => v.Length > 4 ? v[..4] + \"...\" : v))}\").ToArray();\n            _logger.LogInformation(\"Pinnacle POST {Url} | Headers => {Headers}\", url, string.Join(\" | \", headerNames));\n            var querycode=req.Content.ReadAsStringAsync().Result;\n            var res = await _http.SendAsync(req);\n            var body = await res.Content.ReadAsStringAsync();\n\n            if (!res.IsSuccessStatusCode)\n            {\n                _logger.LogWarning(\"Pinnacle send failed (HTTP {Status}): {Body}\", (int)res.StatusCode, body);\n                return new WaSendResult(false, \"Pinnacle\", null, res.StatusCode, body, res.ReasonPhrase);\n            }\n\n            string? id = TryGetPinnMessageId(body);\n            return new WaSendResult(true, \"Pinnacle\", id, res.StatusCode, body, null);\n        }\n\n        public Task<WaSendResult> SendTextAsync(string to, string body)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"text\",\n                text = new { preview_url = false, body }\n            });\n\n        public Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components)\n        {\n            components ??= Enumerable.Empty<object>();\n            var langValue = languageCode; // use exact string from template metadata\n            return PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = langValue,\n                    components\n                }\n            });\n        }\n\n        private static string? TryGetPinnMessageId(string json)\n        {\n            try\n            {\n                using var doc = JsonDocument.Parse(json);\n                var root = doc.RootElement;\n                if (root.TryGetProperty(\"messages\", out var msgs) &&\n                    msgs.ValueKind == JsonValueKind.Array &&\n                    msgs.GetArrayLength() > 0 &&\n                    msgs[0].TryGetProperty(\"id\", out var id0)) return id0.GetString();\n\n                if (root.TryGetProperty(\"message\", out var msg) &&\n                    msg.ValueKind == JsonValueKind.Object)\n                {\n                    if (msg.TryGetProperty(\"id\", out var id1)) return id1.GetString();\n                    if (msg.TryGetProperty(\"messageId\", out var id2)) return id2.GetString();\n                }\n                if (root.TryGetProperty(\"message_id\", out var id3)) return id3.GetString();\n                if (root.TryGetProperty(\"messageId\", out var id4)) return id4.GetString();\n                if (root.TryGetProperty(\"data\", out var data) &&\n                    data.ValueKind == JsonValueKind.Object &&\n                    data.TryGetProperty(\"messageId\", out var id5)) return id5.GetString();\n                if (root.TryGetProperty(\"id\", out var idTop)) return idTop.GetString();\n            }\n            catch { }\n            return null;\n        }\n\n        public Task<WaSendResult> SendInteractiveAsync(object fullPayload) => PostAsync(fullPayload);\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/IMessageEngineService.cs",
      "sha256": "09adfb41d2d2758ea33984a41ead43a6fcd3ad3385c6b288cc0db00e5fbef831",
      "language": "csharp",
      "size": 1461,
      "content": "// ‚úÖ Step 1: Final interface\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Helpers;\nusing System.Threading.Tasks;\nusing System.IO.Pipelines;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface IMessageEngineService\n    {\n\n        Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto); //\n        Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto);\n        Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto);\n        Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto);\n        Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string triggeredBy);\n        Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId);\n       // Task<ResponseResult> SendPayloadAsync(Guid businessId, object payload);\n        Task<ResponseResult> SendPayloadAsync(\n         Guid businessId,\n         string provider,          // \"PINNACLE\" or \"META_CLOUD\"\n         object payload,\n         string? phoneNumberId = null);\n        Task<ResponseResult> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId);\n        Task<ResponseResult> SendDocumentTemplateMessageAsync(\n           DocumentTemplateMessageDto dto,\n           Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/ITemplateMessageSender.cs",
      "sha256": "4b54a967e87c74ed41ae2cca4f1ebffc6068cfaa25f10dc6b01021b056886266",
      "language": "csharp",
      "size": 822,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface ITemplateMessageSender\n    {\n        Task<ResponseResult> SendTemplateMessageToContactAsync(\n           Guid businessId,\n           Contact contact,\n           string templateName,\n           List<string> templateParams,\n           string? imageUrl = null,\n           List<CampaignButton>? buttons = null,\n           string? source = null,\n           Guid? refMessageId = null\n       );\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/MessageEngineService.cs",
      "sha256": "b4f78dc3f517b921c29931ef1d985e92b9c2117c23fd0073c623b531fbad696f",
      "language": "csharp",
      "size": 88090,
      "content": "// üìÑ File: Features/MessagesEngine/Services/MessageEngineService.cs\nusing Newtonsoft.Json;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System.Net.Http;\nusing xbytechat.api.Shared.utility;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\n\n// ‚úÖ provider abstraction + factory\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat.api.Features.MessagesEngine.Factory;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing xbytechat.api.CRM.Models;\nusing System.Collections.Concurrent;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class MessageEngineService : IMessageEngineService\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _http; // kept for other internal calls if any\n        private readonly TextMessagePayloadBuilder _textBuilder;\n        private readonly ImageMessagePayloadBuilder _imageBuilder;\n        private readonly TemplateMessagePayloadBuilder _templateBuilder;\n        private readonly CtaMessagePayloadBuilder _ctaBuilder;\n        private readonly IPlanManager _planManager;\n        private readonly IHubContext<InboxHub> _hubContext;\n        private readonly IMessageIdResolver _messageIdResolver;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IContactService _contactService;\n        private readonly ConcurrentDictionary<Guid, (IReadOnlyList<WhatsAppSettingEntity> setting, DateTime expiresAt)>\n _settingsCache = new();\n        // üîÑ Basic cache for WhatsApp settings to reduce DB load (kept for other paths)\n        //private static readonly Dictionary<Guid, (WhatsAppSettingEntity setting, DateTime expiresAt)> _settingsCache = new();\n\n        private readonly IWhatsAppProviderFactory _providerFactory;\n        private readonly ILogger<MessageEngineService> _logger;\n        public MessageEngineService(\n            AppDbContext db,\n            HttpClient http,\n            TextMessagePayloadBuilder textBuilder,\n            ImageMessagePayloadBuilder imageBuilder,\n            TemplateMessagePayloadBuilder templateBuilder,\n            CtaMessagePayloadBuilder ctaBuilder,\n            IPlanManager planManager,\n            IHubContext<InboxHub> hubContext,\n            IMessageIdResolver messageIdResolver,\n            IHttpContextAccessor httpContextAccessor,\n            IContactService contactService,\n            IWhatsAppProviderFactory providerFactory,\n            ILogger<MessageEngineService> logger\n        )\n        {\n            _db = db;\n            _http = http;\n            _textBuilder = textBuilder;\n            _imageBuilder = imageBuilder;\n            _templateBuilder = templateBuilder;\n            _ctaBuilder = ctaBuilder;\n            _planManager = planManager;\n            _hubContext = hubContext;\n            _messageIdResolver = messageIdResolver;\n            _httpContextAccessor = httpContextAccessor;\n            _contactService = contactService;\n            _providerFactory = providerFactory;\n            _logger = logger;\n        }\n\n        // INSERT: near other helpers / utilities\n        private static string ResolveGreeting(string? profileName, string? contactName)\n        {\n            var s = (profileName ?? contactName)?.Trim();\n            return string.IsNullOrEmpty(s) ? \"there\" : s;\n        }\n\n        private static void EnsureArgsLength(List<string> args, int slot1Based)\n        {\n            while (args.Count < slot1Based) args.Add(string.Empty);\n        }\n\n        // ‚úÖ Public helper so both Flow + Campaign send paths can use it\n        public async Task<List<string>> ApplyProfileNameAsync(\n            Guid businessId,\n            Guid contactId,\n            bool useProfileName,\n            int? profileNameSlot,\n            List<string> args,\n            CancellationToken ct = default)\n        {\n            if (!useProfileName || !(profileNameSlot is int slot) || slot < 1)\n                return args;\n\n            // pull once from DB (cheap; uses your existing index on BusinessId/Id)\n            var contact = await _db.Contacts\n                .AsNoTracking()\n                .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId, ct);\n\n            var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);\n\n            EnsureArgsLength(args, slot);\n            args[slot - 1] = greet;\n\n            return args;\n        }\n\n\n        public async Task<ResponseResult> SendPayloadAsync(Guid businessId, string provider, object payload,         // \"PINNACLE\" or \"META_CLOUD\"object payload,\n        string? phoneNumberId = null)\n        {\n            // Validate provider (no server-side normalization)\n            if (string.IsNullOrWhiteSpace(provider) ||\n                (provider != \"PINNACLE\" && provider != \"META_CLOUD\"))\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n                    \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n            }\n\n            // Route to the correct provider + optional sender override\n            return await SendViaProviderAsync(\n                businessId,\n                provider,\n                p => p.SendInteractiveAsync(payload),\n                phoneNumberId\n            );\n        }\n\n\n\n\n\n        // MessageEngineService.cs\n       \n        private static string NormalizeProviderOrThrow(string? p)\n        {\n            if (string.IsNullOrWhiteSpace(p))\n                throw new ArgumentException(\"Provider is required.\");\n\n            var u = p.Trim().ToUpperInvariant();\n            // Map common aliases -> canonical constants\n            return u switch\n            {\n                \"META\" => \"META_CLOUD\",\n                \"META_CLOUD\" => \"META_CLOUD\",\n                \"PINNACLE\" => \"PINNACLE\",\n                _ => throw new ArgumentException($\"Invalid provider: {p}\")\n            };\n        }\n\n        private async Task<ResponseResult> SendViaProviderAsync(\n        Guid businessId,\n        string provider,                                // explicit\n        Func<IWhatsAppProvider, Task<WaSendResult>> action,\n        string? phoneNumberId = null)\n        {\n            try\n            {\n                // normalize + validate provider once\n                var normalizedProvider = NormalizeProviderOrThrow(provider);   // üëà\n\n                // For both META_CLOUD and PINNACLE we require a sender id\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                    return ResponseResult.ErrorInfo(\n                        \"‚ùå Campaign has no sender number.\",\n                        \"Missing PhoneNumberId\");\n\n                // Build the right provider instance bound to this business + number\n                var wa = await _providerFactory.CreateAsync(\n                    businessId,\n                    normalizedProvider,\n                    phoneNumberId);\n\n                var res = await action(wa);\n\n                if (!res.Success)\n                    return ResponseResult.ErrorInfo(\"‚ùå WhatsApp API returned an error.\", res.Error, res.RawResponse);\n\n                var rr = ResponseResult.SuccessInfo(\"‚úÖ Message sent successfully\", data: null, raw: res.RawResponse);\n                rr.MessageId = string.IsNullOrWhiteSpace(res.ProviderMessageId)\n                    ? TryExtractMetaWamid(res.RawResponse)\n                    : res.ProviderMessageId;\n                return rr;\n            }\n            catch (ArgumentException ex) // from NormalizeProviderOrThrow\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\", ex.Message);\n            }\n            catch (InvalidOperationException ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Provider configuration error.\", ex.Message);\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Provider call failed.\", ex.Message);\n            }\n        }\n\n        private static string? TryExtractMetaWamid(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var s = raw.TrimStart();\n            if (!s.StartsWith(\"{\")) return null;\n            try\n            {\n                using var doc = System.Text.Json.JsonDocument.Parse(s);\n                if (doc.RootElement.TryGetProperty(\"messages\", out var msgs) &&\n                    msgs.ValueKind == System.Text.Json.JsonValueKind.Array &&\n                    msgs.GetArrayLength() > 0 &&\n                    msgs[0].TryGetProperty(\"id\", out var idProp))\n                {\n                    return idProp.GetString();\n                }\n            }\n            catch { }\n            return null;\n        }\n        // ---------- CSV-materialized variables helpers (for campaign recipients) ----------\n        private static string[] ReadBodyParams(string? json)\n        {\n            if (string.IsNullOrWhiteSpace(json)) return Array.Empty<string>();\n            try\n            {\n                return System.Text.Json.JsonSerializer.Deserialize<string[]>(json) ?? Array.Empty<string>();\n            }\n            catch { return Array.Empty<string>(); }\n        }\n\n        private static Dictionary<string, string> ReadVarDict(string? json)\n        {\n            if (string.IsNullOrWhiteSpace(json))\n                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            try\n            {\n                return System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(json)\n                       ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n            catch\n            {\n                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n        }\n\n        private static List<string> BuildHeaderTextParams(IDictionary<string, string> kv)\n        {\n            // Accept either \"header.text.{n}\" or \"headerpara{n}\"\n            var matches = kv.Keys\n                .Select(k => new\n                {\n                    k,\n                    m = System.Text.RegularExpressions.Regex.Match(\n                        k, @\"^(?:header(?:\\.text)?\\.)?(\\d+)$|^header(?:\\.text)?\\.(\\d+)$|^headerpara(\\d+)$\",\n                        System.Text.RegularExpressions.RegexOptions.IgnoreCase)\n                })\n                .Where(x => x.m.Success)\n                .Select(x =>\n                {\n                    // pull the first captured number\n                    for (int g = 1; g < x.m.Groups.Count; g++)\n                        if (x.m.Groups[g].Success) return int.Parse(x.m.Groups[g].Value);\n                    return 0;\n                })\n                .Where(n => n > 0)\n                .Distinct()\n                .OrderBy(n => n)\n                .ToList();\n\n            if (matches.Count == 0) return new List<string>();\n\n            var list = new List<string>(new string[matches.Last()]);\n            for (int i = 1; i <= list.Count; i++)\n            {\n                var k1 = $\"header.text.{i}\";\n                var k2 = $\"headerpara{i}\";\n                if (!kv.TryGetValue(k1, out var v))\n                    kv.TryGetValue(k2, out v);\n                list[i - 1] = v ?? string.Empty;\n            }\n\n            return list;\n        }\n\n        private static IReadOnlyDictionary<string, string> BuildButtonUrlParams(IDictionary<string, string> kv)\n        {\n            // Normalize to \"button{pos}.url_param\"\n            var map = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            for (int pos = 1; pos <= 3; pos++)\n            {\n                var k1 = $\"button{pos}.url_param\"; // canonical\n                var k2 = $\"buttonpara{pos}\";       // alias fallback\n                if (kv.TryGetValue(k1, out var v1) && !string.IsNullOrWhiteSpace(v1))\n                    map[k1] = v1;\n                else if (kv.TryGetValue(k2, out var v2) && !string.IsNullOrWhiteSpace(v2))\n                    map[k1] = v2;\n            }\n            return map;\n        }\n\n\n        public async Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"üì® Sending template message to {dto.RecipientNumber} via BusinessId {dto.BusinessId}\");\n\n                if (dto.MessageType != MessageTypeEnum.Template)\n                    return ResponseResult.ErrorInfo(\"Only template messages are supported in this method.\");\n\n                // ‚úÖ Validate provider (UPPERCASE only, no normalization)\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                // ‚úÖ Quota\n                var quotaCheck = await _planManager.CheckQuotaBeforeSendingAsync(dto.BusinessId);\n                if (!quotaCheck.Success)\n                {\n                    Console.WriteLine($\"‚ùå Quota check failed: {quotaCheck.Message}\");\n                    return quotaCheck;\n                }\n\n                // ‚úÖ Build template components from dto.TemplateParameters\n                var bodyParams = (dto.TemplateParameters?.Values?.ToList() ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                var components = new List<object>();\n                if (bodyParams.Length > 0)\n                {\n                    components.Add(new { type = \"body\", parameters = bodyParams });\n                }\n\n                // üöÄ Send to provider ‚Äî explicit provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    dto.BusinessId,\n                    dto.Provider, // <-- REQUIRED now\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName!, \"en_US\", components),\n                    dto.PhoneNumberId // <-- optional; relies on default if null\n                );\n\n                // ‚úÖ Build rendered body\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters?.Values.ToList() ?? new List<string>());\n\n                // üìù Log result (store provider raw payload)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = resolvedBody,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse, // <-- not JsonConvert of wrapper\n                    MessageId = sendResult.MessageId,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n\n                // üìâ Decrement remaining quota\n                var planInfo = await _db.BusinessPlanInfos\n                    .FirstOrDefaultAsync(p => p.BusinessId == dto.BusinessId);\n\n                if (planInfo != null && planInfo.RemainingMessages > 0)\n                {\n                    planInfo.RemainingMessages -= 1;\n                    planInfo.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _db.SaveChangesAsync();\n\n                // üì° SignalR push\n                await _hubContext.Clients\n                    .Group($\"business_{dto.BusinessId}\")\n                    .SendAsync(\"ReceiveMessage\", new\n                    {\n                        Id = log.Id,\n                        RecipientNumber = log.RecipientNumber,\n                        MessageContent = log.RenderedBody,\n                        MediaUrl = log.MediaUrl,\n                        Status = log.Status,\n                        CreatedAt = log.CreatedAt,\n                        SentAt = log.SentAt\n                    });\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Template message sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                var errorId = Guid.NewGuid();\n                Console.WriteLine($\"üß® Error ID: {errorId}\\n{ex}\");\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                        dto.TemplateBody ?? \"\",\n                        dto.TemplateParameters?.Values.ToList() ?? new List<string>()),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\n                    $\"‚ùå Exception occurred while sending template message. [Ref: {errorId}]\",\n                    ex.ToString());\n            }\n        }\n\n        //public async Task<ResponseResult> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId)\n        //{\n        //    try\n        //    {\n        //        if (string.IsNullOrWhiteSpace(dto.Provider) || (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n        //            return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\", \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n\n        //        var components = new List<object>();\n\n        //        if (!string.IsNullOrWhiteSpace(dto.HeaderVideoUrl))\n        //        {\n        //            components.Add(new\n        //            {\n        //                type = \"header\",\n        //                parameters = new[] { new { type = \"video\", video = new { link = dto.HeaderVideoUrl! } } }\n        //            });\n        //        }\n\n        //        components.Add(new\n        //        {\n        //            type = \"body\",\n        //            parameters = (dto.TemplateParameters ?? new List<string>())\n        //                .Select(p => new { type = \"text\", text = p })\n        //                .ToArray()\n        //        });\n\n        //        var btns = dto.ButtonParameters ?? new List<CampaignButtonDto>();\n        //        for (int i = 0; i < btns.Count && i < 3; i++)\n        //        {\n        //            var btn = btns[i];\n        //            var subType = btn.ButtonType?.ToLowerInvariant();\n        //            if (string.IsNullOrWhiteSpace(subType)) continue;\n\n        //            var button = new Dictionary<string, object>\n        //            {\n        //                [\"type\"] = \"button\",\n        //                [\"sub_type\"] = subType,\n        //                [\"index\"] = i.ToString()\n        //            };\n\n        //            if (subType == \"quick_reply\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n        //                button[\"parameters\"] = new[] { new { type = \"payload\", payload = btn.TargetUrl! } };\n        //            else if (subType == \"url\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n        //                button[\"parameters\"] = new[] { new { type = \"text\", text = btn.TargetUrl! } };\n\n        //            components.Add(button);\n        //        }\n\n        //        var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n        //        //var sendResult = await SendViaProviderAsync(\n        //        //    businessId,\n        //        //    dto.Provider,\n        //        //    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n        //        //    dto.PhoneNumberId\n        //        //);\n        //        // ‚úÖ build proper WhatsApp payload (language must be an object)\n        //        var payload = new\n        //        {\n        //            messaging_product = \"whatsapp\",\n        //            to = dto.RecipientNumber,\n        //            type = \"template\",\n        //            template = new\n        //            {\n        //                name = dto.TemplateName,\n        //                language = new { code = lang },   // <-- key fix\n        //                components = components\n        //            }\n        //        };\n\n        //        var sendResult = await SendPayloadAsync(\n        //            businessId,\n        //            dto.Provider,\n        //            payload,\n        //            dto.PhoneNumberId\n        //        );\n\n        //        var renderedBody = TemplateParameterHelper.FillPlaceholders(\n        //            dto.TemplateBody ?? \"\",\n        //            dto.TemplateParameters ?? new List<string>());\n\n        //        var log = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = businessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n        //            MediaUrl = dto.HeaderVideoUrl,\n        //            RenderedBody = renderedBody,\n        //            Status = sendResult.Success ? \"Sent\" : \"Failed\",\n        //            ErrorMessage = sendResult.Success ? null : sendResult.Message,\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,\n        //            SentAt = DateTime.UtcNow,\n        //            CreatedAt = DateTime.UtcNow,\n        //            CTAFlowConfigId = dto.CTAFlowConfigId,\n        //            CTAFlowStepId = dto.CTAFlowStepId\n        //        };\n\n        //        await _db.MessageLogs.AddAsync(log);\n        //        await _db.SaveChangesAsync();\n\n        //        return new ResponseResult\n        //        {\n        //            Success = sendResult.Success,\n        //            Message = sendResult.Success ? \"‚úÖ Template sent successfully.\" : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n        //            Data = new { Success = sendResult.Success, MessageId = sendResult.MessageId, LogId = log.Id },\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,\n        //            LogId = log.Id\n        //        };\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        try\n        //        {\n        //            await _db.MessageLogs.AddAsync(new MessageLog\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                RecipientNumber = dto.RecipientNumber,\n        //                MessageContent = dto.TemplateName,\n        //                RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n        //                MediaUrl = dto.HeaderVideoUrl,\n        //                Status = \"Failed\",\n        //                ErrorMessage = ex.Message,\n        //                CreatedAt = DateTime.UtcNow,\n        //                CTAFlowConfigId = dto.CTAFlowConfigId,\n        //                CTAFlowStepId = dto.CTAFlowStepId\n        //            });\n        //            await _db.SaveChangesAsync();\n        //        }\n        //        catch { /* ignore */ }\n\n        //        return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n        //    }\n        //}\n        public async Task<ResponseResult> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId)\n        {\n            try\n            {\n                // ‚îÄ‚îÄ 0) Basic validation + normalization\n                var provider = (dto.Provider ?? \"META_CLOUD\").Trim().ToUpperInvariant();\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\", \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n\n                if (string.IsNullOrWhiteSpace(dto.RecipientNumber))\n                    return ResponseResult.ErrorInfo(\"‚ùå Missing recipient number.\");\n\n                if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                    return ResponseResult.ErrorInfo(\"‚ùå Missing template name.\");\n\n                if (string.IsNullOrWhiteSpace(dto.HeaderVideoUrl))\n                    return ResponseResult.ErrorInfo(\"üö´ Missing HeaderVideoUrl (must be a direct HTTPS link to a video file).\");\n\n                var langCode = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!.Trim();\n\n                // ‚îÄ‚îÄ 1) Build WhatsApp components\n                var components = new List<object>();\n\n                // header ‚Üí video\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                new { type = \"video\", video = new { link = dto.HeaderVideoUrl! } }\n                    }\n                });\n\n                // body ‚Üí text params\n                var bodyParams = (dto.TemplateParameters ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                components.Add(new { type = \"body\", parameters = bodyParams });\n\n                // buttons (max 3)\n                var btns = (dto.ButtonParameters ?? new List<CampaignButtonDto>()).Take(3).ToList();\n                for (int i = 0; i < btns.Count; i++)\n                {\n                    var b = btns[i];\n                    var sub = (b.ButtonType ?? \"\").Trim().ToLowerInvariant();\n                    if (string.IsNullOrEmpty(sub)) continue;\n\n                    var button = new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = sub,\n                        [\"index\"] = i.ToString()\n                    };\n\n                    if (sub == \"url\" && !string.IsNullOrWhiteSpace(b.TargetUrl))\n                    {\n                        button[\"parameters\"] = new object[] { new { type = \"text\", text = b.TargetUrl! } };\n                    }\n                    else if (sub == \"quick_reply\" && !string.IsNullOrWhiteSpace(b.TargetUrl))\n                    {\n                        // For quick replies, providers expect a payload string\n                        button[\"parameters\"] = new object[] { new { type = \"payload\", payload = b.TargetUrl! } };\n                    }\n\n                    components.Add(button);\n                }\n\n                // ‚îÄ‚îÄ 2) Full WhatsApp template payload (language is an OBJECT)\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber!,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = dto.TemplateName!,\n                        language = new { code = langCode },  // ‚úÖ required object shape\n                        components = components\n                    }\n                };\n\n                // ‚îÄ‚îÄ 3) Send via provider (pass through PhoneNumberId when supplied)\n                //var sendResult = await _messageEngineService.SendPayloadAsync(\n                //    businessId,\n                //    provider,\n                //    payload,\n                //    dto.PhoneNumberId\n                //);\n                var sendResult = await SendPayloadAsync(businessId, provider, payload, dto.PhoneNumberId);\n                // ‚îÄ‚îÄ 4) Persist message log (best-effort)\n                var renderedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters ?? new List<string>());\n\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber!,\n                    MessageContent = dto.TemplateName!,\n                    MediaUrl = dto.HeaderVideoUrl,        // mirrors header media\n                    RenderedBody = renderedBody,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.ErrorMessage ?? (sendResult.Success ? null : \"WhatsApp API returned an error.\"),\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success ? \"‚úÖ Template sent successfully.\" : (sendResult.ErrorMessage ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new { Success = sendResult.Success, MessageId = sendResult.MessageId, LogId = log.Id },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                // failure log (best effort)\n                try\n                {\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber ?? \"\",\n                        MessageContent = dto.TemplateName ?? \"\",\n                        RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n                        MediaUrl = dto.HeaderVideoUrl,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow,\n                        CTAFlowConfigId = dto.CTAFlowConfigId,\n                        CTAFlowStepId = dto.CTAFlowStepId\n                    });\n                    await _db.SaveChangesAsync();\n                }\n                catch { /* ignore */ }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n            }\n        }\n\n        private async Task<IReadOnlyList<WhatsAppSettingEntity>> GetBusinessWhatsAppSettingsAsync(Guid businessId)\n        {\n            if (_settingsCache.TryGetValue(businessId, out var cached) && cached.expiresAt > DateTime.UtcNow)\n                return cached.setting;\n\n            // Load all settings rows for this business (supports multiple providers)\n            var items = await _db.WhatsAppSettings\n                .Where(s => s.BusinessId == businessId)\n                .ToListAsync();\n\n            if (items == null || items.Count == 0)\n                throw new Exception(\"WhatsApp settings not found.\");\n\n            var ro = items.AsReadOnly();\n            _settingsCache[businessId] = (ro, DateTime.UtcNow.AddMinutes(5));\n            return ro;\n        }\n\n\n        public async Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto)\n        {\n            try\n            {\n                var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                    ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId from context.\");\n\n                // --- Resolve/validate provider & sender -------------------------------\n                // Normalize inbound (trim+upper) but DO NOT silently map unknown values\n                string? provider = dto.Provider?.Trim().ToUpperInvariant();\n                string? phoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId)\n                    ? null\n                    : dto.PhoneNumberId!.Trim();\n\n                // If provider not supplied, try to resolve from active settings:\n                // - Prefer a row that already has a default sender (PhoneNumberId not null)\n                // - If multiple rows and none has default, ask the caller to specify\n                xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity? chosenSetting = null;\n\n                if (string.IsNullOrWhiteSpace(provider))\n                {\n                    var candidates = await _db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive)\n                        .OrderByDescending(s => s.PhoneNumberId != null)          // prefer defaulted\n                        //.ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .ThenByDescending(s => (s.UpdatedAt > s.CreatedAt ? s.UpdatedAt : s.CreatedAt))\n\n                        .ToListAsync();\n\n                    if (candidates.Count == 0)\n                        return ResponseResult.ErrorInfo(\"‚ùå WhatsApp settings not found for this business.\");\n\n                    if (candidates.Count > 1 && candidates.All(s => s.PhoneNumberId == null))\n                        return ResponseResult.ErrorInfo(\"‚ùå Multiple providers are active but no default sender is set. Please pass Provider (PINNACLE/META_CLOUD) or set a Default number.\");\n\n                    chosenSetting = candidates[0];\n                    provider = (chosenSetting.Provider ?? \"\").Trim().ToUpperInvariant();\n                    if (string.IsNullOrWhiteSpace(phoneNumberId) && !string.IsNullOrWhiteSpace(chosenSetting.PhoneNumberId))\n                        phoneNumberId = chosenSetting.PhoneNumberId!.Trim();\n                }\n\n                // Final provider check (must be one of the two)\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    return ResponseResult.ErrorInfo(\n                        \"‚ùå Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\"\n                    );\n                }\n\n                // If provider was supplied but no sender, we can still inherit the default\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                {\n                    // Try to find a default sender for the chosen provider\n                    var defaultRow = await _db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(s => s.BusinessId == businessId &&\n                                    s.IsActive &&\n                                    s.Provider == provider &&\n                                    s.PhoneNumberId != null)\n                        .OrderByDescending(s => (s.UpdatedAt > s.CreatedAt ? s.UpdatedAt : s.CreatedAt))\n\n                        //.OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n\n                        .FirstOrDefaultAsync();\n\n                    if (defaultRow != null)\n                        phoneNumberId = defaultRow.PhoneNumberId!.Trim();\n                }\n                // ----------------------------------------------------------------------\n\n                Guid? contactId = null;\n\n                // 1) Try to find contact by business + phone (indexed)\n                var contact = await _db.Contacts.FirstOrDefaultAsync(c =>\n                    c.BusinessId == businessId && c.PhoneNumber == dto.RecipientNumber);\n\n                if (contact != null)\n                {\n                    // 2) Touch last-contacted when reusing an existing contact\n                    contactId = contact.Id;\n                    contact.LastContactedAt = DateTime.UtcNow;\n                }\n                else if (dto.IsSaveContact)\n                {\n                    // 3) Create a new contact if requested\n                    contact = new Contact\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        Name = \"WhatsApp User\",\n                        PhoneNumber = dto.RecipientNumber,\n                        CreatedAt = DateTime.UtcNow,\n                        LastContactedAt = DateTime.UtcNow\n                    };\n                    _db.Contacts.Add(contact);\n                    contactId = contact.Id;\n                }\n\n                // 4) Persist contact changes (create or timestamp update)\n                await _db.SaveChangesAsync();\n\n                // üöÄ Send via provider ‚Äî explicit provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    provider!,                                                     // validated value\n                    p => p.SendTextAsync(dto.RecipientNumber, dto.TextContent),\n                    phoneNumberId                                                  // optional\n                );\n\n                // üîé Extract provider message id (fallback to Meta messages[0].id if needed)\n                string? messageId = sendResult.MessageId;\n                if (string.IsNullOrWhiteSpace(messageId) && !string.IsNullOrWhiteSpace(sendResult.RawResponse))\n                {\n                    try\n                    {\n                        var raw = sendResult.RawResponse!.TrimStart();\n                        if (raw.StartsWith(\"{\"))\n                        {\n                            using var parsed = System.Text.Json.JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var msgs)\n                                && msgs.ValueKind == System.Text.Json.JsonValueKind.Array\n                                && msgs.GetArrayLength() > 0\n                                && msgs[0].TryGetProperty(\"id\", out var idProp))\n                            {\n                                messageId = idProp.GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è JSON parsing failed: {ex.Message} | Raw: {sendResult.RawResponse}\");\n                    }\n                }\n\n                // üìù Log the message\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                // üîó Optional campaign mapping\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"üì¶ CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                                ? \"‚úÖ Text message sent successfully.\"\n                                : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception in SendTextDirectAsync: {ex.Message}\");\n\n                try\n                {\n                    var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                        ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"‚ùå Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send text message.\", ex.ToString());\n            }\n        }\n\n        public async Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto)\n        {\n            try\n            {\n                var businessId =\n                    dto.BusinessId != Guid.Empty\n                        ? dto.BusinessId\n                        : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                          ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId from context or DTO.\");\n\n                // ‚úÖ Validate provider (no server-side normalization)\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                Guid? contactId = null;\n                try\n                {\n                    var contact = await _contactService.FindOrCreateAsync(businessId, dto.RecipientNumber);\n                    contactId = contact.Id;\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"‚ö†Ô∏è Failed to resolve or create contact: {ex.Message}\");\n                }\n\n                // üöÄ Send via provider ‚Äî explicit provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    dto.Provider,\n                    p => p.SendTextAsync(dto.RecipientNumber, dto.TextContent),\n                    dto.PhoneNumberId\n                );\n\n                // üîé Try to get a provider message id (use provider-provided id first, then Meta fallback)\n                string? messageId = sendResult.MessageId;\n                var raw = sendResult.RawResponse;\n                if (string.IsNullOrWhiteSpace(messageId) && !string.IsNullOrWhiteSpace(raw))\n                {\n                    try\n                    {\n                        var s = raw.TrimStart();\n                        if (s.StartsWith(\"{\"))\n                        {\n                            using var parsed = JsonDocument.Parse(s);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var messages) &&\n                                messages.ValueKind == JsonValueKind.Array &&\n                                messages.GetArrayLength() > 0 &&\n                                messages[0].TryGetProperty(\"id\", out var idProp))\n                            {\n                                messageId = idProp.GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è JSON parsing failed: {ex.Message} | Raw: {raw}\");\n                    }\n                }\n\n                // üìù Log result (store raw provider payload; don‚Äôt serialize the wrapper)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"üì¶ CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"‚úÖ Text message sent successfully.\"\n                        : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception in SendAutomationReply: {ex.Message}\");\n\n                try\n                {\n                    var businessId =\n                        dto.BusinessId != Guid.Empty\n                            ? dto.BusinessId\n                            : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                              ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"‚ùå Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send text message.\", ex.ToString());\n            }\n        }\n        public async Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto)\n        {\n            try\n            {\n                // 0) Soft-resolve provider & sender (no hard early return)\n                var provider = (dto.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                var phoneNumberId = dto.PhoneNumberId;\n\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    // Try active WhatsAppSettings first (usually the ‚Äúcurrent‚Äù sender)\n                    var ws = await _db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(x => x.BusinessId == businessId && x.IsActive)\n                        .OrderByDescending(x => x.UpdatedAt ?? x.CreatedAt)\n                        .FirstOrDefaultAsync();\n\n                    if (ws != null)\n                    {\n                        provider = (ws.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                        if (string.IsNullOrWhiteSpace(phoneNumberId))\n                            phoneNumberId = ws.PhoneNumberId;\n                    }\n\n                    // Fallback to WhatsAppPhoneNumbers (prefer default, then stable order)\n                    if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    {\n                        var pn = await _db.WhatsAppPhoneNumbers\n                            .AsNoTracking()\n                            .Where(n => n.BusinessId == businessId && n.IsActive)\n                            .OrderByDescending(n => n.IsDefault)\n                            .ThenBy(n => n.WhatsAppBusinessNumber)\n                            .Select(n => new { n.Provider, n.PhoneNumberId })\n                            .FirstOrDefaultAsync();\n\n                        if (pn != null)\n                        {\n                            provider = (pn.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                            if (string.IsNullOrWhiteSpace(phoneNumberId))\n                                phoneNumberId = pn.PhoneNumberId;\n                        }\n                    }\n                }\n\n                // If still unknown, fail clearly (we tried our best)\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Missing provider.\",\n                        \"No active WhatsApp sender found. Configure a PINNACLE or META_CLOUD sender for this business.\");\n                }\n\n                // 1) Build minimal components (body only)\n                var components = new List<object>();\n                var parameters = (dto.TemplateParameters ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                if (parameters.Length > 0)\n                {\n                    components.Add(new { type = \"body\", parameters });\n                }\n\n                // 2) Always send via provider ‚Äî explicit provider + sender override (if given/resolved)\n                var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n                _logger?.LogInformation(\"‚û°Ô∏è SEND-INTENT tmpl={Template} to={To} provider={Provider} pnid={PhoneNumberId}\",\n                    dto.TemplateName, dto.RecipientNumber, provider, phoneNumberId ?? \"(default)\");\n\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    provider, // explicit, resolved above\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n                    phoneNumberId // explicit; lets the adapter pick the correct sender\n                );\n\n                // 3) Log message (store provider raw response, not the whole wrapper)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                        dto.TemplateBody ?? string.Empty,\n                        dto.TemplateParameters ?? new List<string>()),\n\n                    // Optional flow context from DTO (if this simple send was triggered by a flow)\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n\n                    // Helpful for downstream analysis\n                    Provider = provider,\n                    ProviderMessageId = sendResult.MessageId,\n\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null,\n                    CreatedAt = DateTime.UtcNow,\n                    Source = \"api\" // or \"simple_send\"\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"‚úÖ Template sent successfully.\"\n                        : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = sendResult.MessageId,\n                        LogId = log.Id\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                // Best-effort failure log\n                try\n                {\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TemplateName,\n                        RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                            dto.TemplateBody ?? string.Empty,\n                            dto.TemplateParameters ?? new List<string>()),\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow,\n                        Source = \"api\"\n                    });\n                    await _db.SaveChangesAsync();\n                }\n                catch { /* ignore log errors */ }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n            }\n        }\n\n\n        //public async Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto)\n        //{\n        //    try\n        //    {\n        //        // 0) Validate provider (no server-side normalization)\n        //        if (string.IsNullOrWhiteSpace(dto.Provider) ||\n        //            (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n        //        {\n        //            return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n        //                \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n        //        }\n\n        //        // 1) Build minimal components (body only)\n        //        var components = new List<object>();\n        //        var parameters = (dto.TemplateParameters ?? new List<string>())\n        //            .Select(p => new { type = \"text\", text = p })\n        //            .ToArray();\n\n        //        if (parameters.Length > 0)\n        //        {\n        //            components.Add(new { type = \"body\", parameters });\n        //        }\n\n        //        // 2) Send via provider ‚Äî explicit provider + optional sender override\n        //        var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n        //        var sendResult = await SendViaProviderAsync(\n        //            businessId,\n        //            dto.Provider, // <-- explicit provider\n        //            p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n        //            dto.PhoneNumberId // <-- optional sender override\n        //        );\n\n        //        // 3) Log message (store provider raw response, not the whole wrapper)\n        //        var log = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = businessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n        //            RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n        //            Status = sendResult.Success ? \"Sent\" : \"Failed\",\n        //            ErrorMessage = sendResult.Success ? null : sendResult.Message,\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,     // capture if available\n        //            SentAt = DateTime.UtcNow,\n        //            CreatedAt = DateTime.UtcNow\n        //        };\n\n        //        await _db.MessageLogs.AddAsync(log);\n        //        await _db.SaveChangesAsync();\n\n        //        return new ResponseResult\n        //        {\n        //            Success = sendResult.Success,\n        //            Message = sendResult.Success\n        //                ? \"‚úÖ Template sent successfully.\"\n        //                : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n        //            Data = new\n        //            {\n        //                Success = sendResult.Success,\n        //                MessageId = sendResult.MessageId,\n        //                LogId = log.Id\n        //            },\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,\n        //            LogId = log.Id\n        //        };\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        // Best-effort failure log\n        //        try\n        //        {\n        //            await _db.MessageLogs.AddAsync(new MessageLog\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                RecipientNumber = dto.RecipientNumber,\n        //                MessageContent = dto.TemplateName,\n        //                RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n        //                Status = \"Failed\",\n        //                ErrorMessage = ex.Message,\n        //                CreatedAt = DateTime.UtcNow\n        //            });\n        //            await _db.SaveChangesAsync();\n        //        }\n        //        catch { /* ignore log errors */ }\n\n        //        return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n        //    }\n        //}\n\n        public async Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string sentBy)\n        {\n            try\n            {\n                var campaign = await _db.Campaigns\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign not found or unauthorized.\");\n\n                var recipients = await _db.CampaignRecipients\n                    .Include(r => r.Contact)\n                    .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                    .ToListAsync();\n\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ö†Ô∏è No recipients assigned to this campaign.\");\n\n                if (string.IsNullOrWhiteSpace(campaign.ImageCaption))\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign caption (ImageCaption) is required.\");\n\n                var validButtons = campaign.MultiButtons\n                    ?.Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Select(b => new CtaButtonDto { Title = b.Title, Value = b.Value })\n                    .ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå At least one CTA button with a valid title is required.\");\n\n                int successCount = 0, failCount = 0;\n\n                foreach (var recipient in recipients)\n                {\n                    if (recipient.Contact == null || string.IsNullOrWhiteSpace(recipient.Contact.PhoneNumber))\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Skipping invalid contact: {recipient.Id}\");\n                        failCount++;\n                        continue;\n                    }\n\n                    var dto = new SendMessageDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageType = MessageTypeEnum.Image,\n                        MediaUrl = campaign.ImageUrl,\n                        TextContent = campaign.MessageTemplate,\n                        CtaButtons = validButtons,\n\n                        CampaignId = campaign.Id,\n                        SourceModule = \"image-campaign\",\n                        CustomerId = recipient.Contact.Id.ToString(),\n                        CustomerName = recipient.Contact.Name,\n                        CustomerPhone = recipient.Contact.PhoneNumber,\n                        CTATriggeredFrom = \"campaign\"\n                    };\n\n                    var result = await SendImageWithCtaAsync(dto);\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.Contact.Id,\n                        RecipientId = recipient.Id,\n                        MessageLogId = result?.LogId,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = sentBy,\n                        BusinessId = businessId,\n                    };\n\n                    await _db.CampaignSendLogs.AddAsync(sendLog);\n\n                    if (result.Success) successCount++;\n                    else failCount++;\n                }\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo($\"‚úÖ Campaign sent.\\nüì§ Success: {successCount}, ‚ùå Failed: {failCount}\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Error sending image campaign: {ex.Message}\");\n                return ResponseResult.ErrorInfo(\"‚ùå Unexpected error while sending image campaign.\", ex.ToString());\n            }\n        }\n        // Features/MessageManagement/Services/MessageEngineService.cs\n        /// <summary>\n        /// Sends a TEMPLATE campaign using CSV-materialized variables stored on CampaignRecipients:\n        /// - ResolvedParametersJson (string[] for body {{n}})\n        /// - ResolvedButtonUrlsJson (dict for header.text.{n} and button{pos}.url_param)\n        /// Uses campaign-level HeaderKind + HeaderMediaUrl for media headers.\n        /// </summary>\n        // Sends a TEMPLATE campaign using materialized per-recipient values from CSV.\n        // - Reads CampaignRecipients.ResolvedParametersJson (string[] for body {{n}})\n        // - Reads CampaignRecipients.ResolvedButtonUrlsJson (dict: \"button{1..3}.url_param\", optional \"header.image_url\")\n        // - Uses Campaign.ImageUrl as header media if present; otherwise uses header.image_url from the dict if provided.\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId, Guid businessId, string sentBy)\n        {\n            try\n            {\n                // 1) Load campaign (minimal fields we need)\n                var campaign = await _db.Campaigns\n                    .AsNoTracking()\n                    .Where(c => c.Id == campaignId && c.BusinessId == businessId)\n                    .Select(c => new\n                    {\n                        c.Id,\n                        c.BusinessId,\n                        c.MessageTemplate,\n                        c.TemplateId,\n                        c.Provider,\n                        c.PhoneNumberId,\n                        c.ImageUrl // used as header media if template expects image\n                    })\n                    .FirstOrDefaultAsync();\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign not found or unauthorized.\");\n\n                // Template name\n                var templateName = !string.IsNullOrWhiteSpace(campaign.TemplateId)\n                    ? campaign.TemplateId!\n                    : (campaign.MessageTemplate ?? \"\").Trim();\n\n                if (string.IsNullOrWhiteSpace(templateName))\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign has no template selected.\");\n\n                // 2) Determine language (fallback en_US)\n                var lang = await _db.WhatsAppTemplates\n                    .AsNoTracking()\n                    .Where(w => w.BusinessId == businessId && w.Name == templateName)\n                    .OrderByDescending(w => (w.UpdatedAt > w.CreatedAt ? w.UpdatedAt : w.CreatedAt))\n                    .Select(w => w.Language)\n                    .FirstOrDefaultAsync();\n\n                if (string.IsNullOrWhiteSpace(lang)) lang = \"en_US\";\n\n                // 3) Load recipients with materialized vars + phone\n                var recipients = await _db.CampaignRecipients\n                    .AsNoTracking()\n                    .Include(r => r.AudienceMember)\n                    .Include(r => r.Contact) // optional fallback for phone\n                    .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                    .Select(r => new\n                    {\n                        r.Id,\n                        r.ResolvedParametersJson,   // string[]\n                        r.ResolvedButtonUrlsJson,   // dict\n                        Phone = r.AudienceMember != null && !string.IsNullOrEmpty(r.AudienceMember.PhoneE164)\n                                ? r.AudienceMember.PhoneE164\n                                : (r.Contact != null ? r.Contact.PhoneNumber : null)\n                    })\n                    .ToListAsync();\n\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ö†Ô∏è No recipients materialized for this campaign.\");\n\n                // 4) Provider and sender validation (no normalization here)\n                var provider = (campaign.Provider ?? \"\").Trim().ToUpperInvariant();\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.\");\n\n                var phoneNumberId = string.IsNullOrWhiteSpace(campaign.PhoneNumberId)\n                    ? null\n                    : campaign.PhoneNumberId!.Trim();\n\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign has no sender number (PhoneNumberId).\");\n\n                int success = 0, fail = 0;\n\n                foreach (var r in recipients)\n                {\n                    if (string.IsNullOrWhiteSpace(r.Phone))\n                    {\n                        fail++;\n                        continue;\n                    }\n\n                    // Deserialize materialized values\n                    string[] bodyParams;\n                    try\n                    {\n                        bodyParams = string.IsNullOrWhiteSpace(r.ResolvedParametersJson)\n                            ? Array.Empty<string>()\n                            : System.Text.Json.JsonSerializer.Deserialize<string[]>(r.ResolvedParametersJson!) ?? Array.Empty<string>();\n                    }\n                    catch { bodyParams = Array.Empty<string>(); }\n\n                    Dictionary<string, string> buttonVars;\n                    try\n                    {\n                        buttonVars = string.IsNullOrWhiteSpace(r.ResolvedButtonUrlsJson)\n                            ? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)\n                            : System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(r.ResolvedButtonUrlsJson!)\n                              ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n                    }\n                    catch\n                    {\n                        buttonVars = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n                    }\n\n                    // 5) Build WhatsApp components\n                    var components = new List<object>();\n\n                    // Header (image) ‚Äî priority: Campaign.ImageUrl -> header.image_url in dict\n                    var headerImage = !string.IsNullOrWhiteSpace(campaign.ImageUrl) ? campaign.ImageUrl\n                                   : (buttonVars.TryGetValue(\"header.image_url\", out var hv) && !string.IsNullOrWhiteSpace(hv) ? hv : null);\n\n                    if (!string.IsNullOrWhiteSpace(headerImage))\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = new object[]\n                            {\n                        new { type = \"image\", image = new { link = headerImage! } }\n                            }\n                        });\n                    }\n\n                    // Body params\n                    if (bodyParams.Length > 0)\n                    {\n                        var bp = bodyParams.Select(p => new { type = \"text\", text = p ?? \"\" }).ToArray();\n                        components.Add(new { type = \"body\", parameters = bp });\n                    }\n\n                    // Dynamic URL buttons (button{1..3}.url_param)\n                    for (int pos = 1; pos <= 3; pos++)\n                    {\n                        var key = $\"button{pos}.url_param\";\n                        if (buttonVars.TryGetValue(key, out var urlParam) && !string.IsNullOrWhiteSpace(urlParam))\n                        {\n                            components.Add(new\n                            {\n                                type = \"button\",\n                                sub_type = \"url\",\n                                index = (pos - 1).ToString(), // Meta expects 0-based string index\n                                parameters = new object[] { new { type = \"text\", text = urlParam } }\n                            });\n                        }\n                    }\n\n                    // 6) Full payload\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = r.Phone!,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = lang },\n                            components = components\n                        }\n                    };\n\n                    // 7) Send via provider\n                    var result = await SendPayloadAsync(businessId, provider, payload, phoneNumberId);\n                    if (result.Success) success++; else fail++;\n\n                    // OPTIONAL: you can write a CampaignSendLog here, mirroring your image path.\n                    // (Omitted to keep this tight; add if you want parity with image campaigns)\n                }\n\n                return ResponseResult.SuccessInfo($\"‚úÖ Template campaign sent. üì§ Success: {success}, ‚ùå Failed: {fail}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Error sending template campaign.\", ex.ToString());\n            }\n        }\n\n\n\n\n\n        public async Task<ResponseResult> SendImageWithCtaAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"üì§ Sending image+CTA to {dto.RecipientNumber}\");\n\n                // ‚úÖ Validate inputs\n                if (string.IsNullOrWhiteSpace(dto.TextContent))\n                    return ResponseResult.ErrorInfo(\"‚ùå Image message caption (TextContent) cannot be empty.\");\n\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                // ‚úÖ CTA buttons (1‚Äì3)\n                var validButtons = dto.CtaButtons?\n                    .Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"reply\",\n                        reply = new\n                        {\n                            id = $\"btn_{index + 1}_{Guid.NewGuid():N}\".Substring(0, 16),\n                            title = btn.Title\n                        }\n                    })\n                    .ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå At least one CTA button with a valid title is required.\");\n\n                // üì¶ Interactive payload (Meta-friendly; other providers can proxy)\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"interactive\",\n                    interactive = new\n                    {\n                        type = \"button\",\n                        body = new { text = dto.TextContent },\n                        action = new { buttons = validButtons }\n                    },\n                    image = string.IsNullOrWhiteSpace(dto.MediaUrl) ? null : new { link = dto.MediaUrl }\n                };\n\n                // üöÄ Send via provider ‚Äî EXPLICIT provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    dto.BusinessId,\n                    dto.Provider,\n                    p => p.SendInteractiveAsync(payload),\n                    dto.PhoneNumberId  // null ‚Üí use provider‚Äôs default sender\n                );\n\n                // üîé MessageId: provider id first, then Meta fallback\n                string? messageId = sendResult.MessageId;\n                if (string.IsNullOrWhiteSpace(messageId) && !string.IsNullOrWhiteSpace(sendResult.RawResponse))\n                {\n                    try\n                    {\n                        var raw = sendResult.RawResponse.TrimStart();\n                        if (raw.StartsWith(\"{\"))\n                        {\n                            using var doc = System.Text.Json.JsonDocument.Parse(raw);\n                            if (doc.RootElement.TryGetProperty(\"messages\", out var msgs) &&\n                                msgs.ValueKind == System.Text.Json.JsonValueKind.Array &&\n                                msgs.GetArrayLength() > 0 &&\n                                msgs[0].TryGetProperty(\"id\", out var idProp))\n                            {\n                                messageId = idProp.GetString();\n                            }\n                        }\n                    }\n                    catch { /* best-effort */ }\n                }\n\n                // üìù Log (store RAW provider payload)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image with CTA]\",\n                    RenderedBody = dto.TextContent ?? \"\",\n                    MediaUrl = dto.MediaUrl,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"‚úÖ Image+CTA message sent.\"\n                        : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = messageId,\n                        LogId = log.Id\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Exception in SendImageWithCtaAsync: \" + ex.Message);\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image CTA Failed]\",\n                    RenderedBody = dto.TextContent ?? \"[Failed image CTA]\",\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send image+CTA.\", ex.ToString());\n            }\n        }\n\n\n        public async Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId)\n        {\n            try\n            {\n                // ‚úÖ Validate provider (no normalization here)\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                // 1) Build components\n                var components = new List<object>();\n\n                if (!string.IsNullOrWhiteSpace(dto.HeaderImageUrl))\n                {\n                    components.Add(new\n                    {\n                        type = \"header\",\n                        parameters = new[]\n                        {\n                    new { type = \"image\", image = new { link = dto.HeaderImageUrl! } }\n                }\n                    });\n                }\n\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = (dto.TemplateParameters ?? new List<string>())\n                        .Select(p => new { type = \"text\", text = p })\n                        .ToArray()\n                });\n\n                // Buttons (dynamic up to 3; null-safe)\n                var btns = dto.ButtonParameters ?? new List<CampaignButtonDto>();\n                for (int i = 0; i < btns.Count && i < 3; i++)\n                {\n                    var btn = btns[i];\n                    var subType = btn.ButtonType?.ToLowerInvariant();\n                    if (string.IsNullOrWhiteSpace(subType)) continue;\n\n                    var button = new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subType,\n                        [\"index\"] = i.ToString()\n                    };\n\n                    if (subType == \"quick_reply\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    {\n                        button[\"parameters\"] = new[] { new { type = \"payload\", payload = btn.TargetUrl! } };\n                    }\n                    else if (subType == \"url\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    {\n                        button[\"parameters\"] = new[] { new { type = \"text\", text = btn.TargetUrl! } };\n                    }\n\n                    components.Add(button);\n                }\n\n                var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n\n                // 2) Send via provider ‚Äî EXPLICIT provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    dto.Provider,\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n                    dto.PhoneNumberId // null => provider default sender\n                );\n\n                // 3) Build rendered body\n                var renderedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters ?? new List<string>());\n\n                // 4) Log raw provider payload and message id (if any)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    MediaUrl = dto.HeaderImageUrl,\n                    RenderedBody = renderedBody,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,     // store raw provider payload, not wrapper\n                    MessageId = sendResult.MessageId,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"‚úÖ Image template sent successfully.\"\n                        : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new { Success = sendResult.Success, MessageId = sendResult.MessageId, LogId = log.Id },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n                    MediaUrl = dto.HeaderImageUrl,\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n                return ResponseResult.ErrorInfo(\"‚ùå Error sending image template.\", ex.ToString());\n            }\n        }\n\n        public async Task<IEnumerable<RecentMessageLogDto>> GetLogsByBusinessIdAsync(Guid businessId)\n        {\n            var logs = await _db.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(1000)\n                .Select(m => new RecentMessageLogDto\n                {\n                    Id = m.Id,\n                    RecipientNumber = m.RecipientNumber,\n                    MessageContent = m.MessageContent,\n                    Status = m.Status,\n                    CreatedAt = m.CreatedAt,\n                    SentAt = m.SentAt,\n                    ErrorMessage = m.ErrorMessage\n                })\n                .ToListAsync();\n\n            return logs;\n        }\n\n        public Task<ResponseResult> SendDocumentTemplateMessageAsync(DocumentTemplateMessageDto dto, Guid businessId)\n        {\n            throw new NotImplementedException();\n        }\n    \n    }\n}\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/TemplateMessageSender.cs",
      "sha256": "aace58451c410bc1a2b7a362097cf9f2f61e343e8bb4abdfb53b2f0479cbd4a0",
      "language": "csharp",
      "size": 8300,
      "content": "// üìÑ File: Features/MessagesEngine/Services/TemplateMessageSender.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\n\n//using xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class TemplateMessageSender : ITemplateMessageSender\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<TemplateMessageSender> _logger;\n        private readonly IWhatsAppTemplateFetcherService _templateService;\n\n        public TemplateMessageSender(\n            AppDbContext db,\n            HttpClient httpClient,\n            ILogger<TemplateMessageSender> logger,\n            IWhatsAppTemplateFetcherService templateService)\n        {\n            _db = db;\n            _httpClient = httpClient;\n            _logger = logger;\n            _templateService = templateService;\n        }\n\n        public async Task<ResponseResult> SendTemplateMessageToContactAsync(\n            Guid businessId,\n            Contact contact,\n            string templateName,\n            List<string> templateParams,\n            string? imageUrl = null,\n            List<CampaignButton>? buttons = null,\n            string? source = null,\n            Guid? refMessageId = null)\n        {\n            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(s => s.BusinessId == businessId && s.IsActive);\n            if (setting == null)\n                return ResponseResult.ErrorInfo(\"WhatsApp settings not found for this business.\");\n\n            var template = await _templateService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n            if (template == null)\n                return ResponseResult.ErrorInfo(\"Template not found or invalid.\");\n\n            var payload = new Dictionary<string, object>\n            {\n                [\"messaging_product\"] = \"whatsapp\",\n                [\"to\"] = contact.PhoneNumber,\n                [\"type\"] = \"template\",\n                [\"template\"] = new\n                {\n                    name = template.Name,\n                    language = new { code = template.Language },\n                    components = BuildTemplateComponents(template, templateParams, imageUrl, buttons)\n                }\n            };\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiKey);\n            var json = JsonSerializer.Serialize(payload);\n            var response = await _httpClient.PostAsync(\n                $\"{setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\"}/{setting.PhoneNumberId}/messages\",\n                new StringContent(json, Encoding.UTF8, \"application/json\"));\n\n            var responseBody = await response.Content.ReadAsStringAsync();\n            var status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\";\n\n            await _db.MessageLogs.AddAsync(new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contact.Id,\n                MessageContent = template.Name,\n                MediaUrl = imageUrl,\n                Status = status,\n                RawResponse = responseBody,\n                ErrorMessage = response.IsSuccessStatusCode ? null : responseBody,\n                Source = source,\n                RefMessageId = refMessageId,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = DateTime.UtcNow\n            });\n\n            await _db.SaveChangesAsync();\n            return response.IsSuccessStatusCode\n                ? ResponseResult.SuccessInfo(\"‚úÖ Message sent successfully\", null, responseBody)\n                : ResponseResult.ErrorInfo(\"‚ùå Message failed\", null, responseBody);\n\n        }\n\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign)\n        {\n            if (campaign == null || campaign.IsDeleted)\n                return ResponseResult.ErrorInfo(\"Invalid or deleted campaign.\");\n\n            var contacts = await _db.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaign.Id && r.Contact != null)\n                .ToListAsync();\n\n            if (!contacts.Any())\n                return ResponseResult.ErrorInfo(\"No contacts found for this campaign.\");\n\n            var templateName = campaign.TemplateId;\n            var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n            var templateMeta = await _templateService.GetTemplateByNameAsync(campaign.BusinessId, templateName, includeButtons: true);\n\n            if (templateMeta == null)\n                return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n\n            int success = 0, failed = 0;\n\n            foreach (var r in contacts)\n            {\n                var result = await SendTemplateMessageToContactAsync(\n                    campaign.BusinessId,\n                    r.Contact,\n                    templateName,\n                    templateParams,\n                    campaign.ImageUrl,\n                    campaign.MultiButtons?.ToList(),\n                    source: \"campaign\",\n                    refMessageId: campaign.Id);\n\n                await _db.CampaignSendLogs.AddAsync(new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = r.ContactId,\n                    RecipientId = r.Id,\n                    MessageBody = campaign.MessageBody ?? templateName,\n                    TemplateId = templateName,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CreatedBy = campaign.CreatedBy\n                });\n\n                if (result.Success) success++;\n                else failed++;\n            }\n\n            await _db.SaveChangesAsync();\n            return ResponseResult.SuccessInfo($\"üì§ Sent to {success}, ‚ùå Failed for {failed}.\");\n        }\n\n        private List<object> BuildTemplateComponents(\n            TemplateMetadataDto template,\n            List<string> paramsList,\n            string? imageUrl,\n            List<CampaignButton>? buttons)\n        {\n            var components = new List<object>();\n\n            if (template.HasImageHeader && !string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[] { new { type = \"image\", image = new { link = imageUrl } } }\n                });\n            }\n\n            if (paramsList.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = paramsList.Select(p => new { type = \"text\", text = p }).ToList()\n                });\n            }\n\n            if (buttons != null && buttons.Any())\n            {\n                for (int i = 0; i < buttons.Count; i++)\n                {\n                    var btn = buttons[i];\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type?.ToLower() == \"url\" ? \"url\" : \"quick_reply\",\n                        index = i.ToString(),\n                        parameters = new[] {\n                            new {\n                                type = \"text\",\n                                text = btn.Value ?? btn.Title\n                            }\n                        }\n                    });\n                }\n            }\n\n            return components;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Validators/ValidateMessageDtoAttribute.cs",
      "sha256": "9b7355295c8cecdf6c4416a324d05f0910b3ff67e99fd35e04e397f715096a9b",
      "language": "csharp",
      "size": 1760,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs.Validation\n{\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\n    public class ValidateMessageDtoAttribute : ValidationAttribute\n    {\n        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)\n        {\n            if (value is not SendMessageDto dto)\n                return ValidationResult.Success;\n\n            switch (dto.MessageType)\n            {\n                case MessageTypeEnum.Text:\n                    if (string.IsNullOrWhiteSpace(dto.TextContent))\n                        return new ValidationResult(\"TextContent is required for text messages.\", new[] { nameof(dto.TextContent) });\n                    break;\n\n                case MessageTypeEnum.Image:\n                    if (string.IsNullOrWhiteSpace(dto.MediaUrl))\n                        return new ValidationResult(\"MediaUrl is required for image messages.\", new[] { nameof(dto.MediaUrl) });\n                    break;\n\n                case MessageTypeEnum.Template:\n                    if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                        return new ValidationResult(\"TemplateName is required for template messages.\", new[] { nameof(dto.TemplateName) });\n                    break;\n\n                case MessageTypeEnum.Cta:\n                    if (dto.CtaButtons == null || dto.CtaButtons.Count == 0)\n                        return new ValidationResult(\"CtaButtons is required for CTA messages.\", new[] { nameof(dto.CtaButtons) });\n                    break;\n            }\n\n            return ValidationResult.Success;\n        }\n    }\n}\n"
    }
  ]
}
