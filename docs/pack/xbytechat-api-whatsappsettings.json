{
  "name": "xbytechat-api/WhatsAppSettings",
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/WhatsAppSettings/Abstractions/ITemplateCatalogProvider.cs",
      "sha256": "013b4df521e161fb281c651f252a270d851bffe7b430900f96386d0c9b4ccf18",
      "language": "csharp",
      "size": 420,
      "content": "using xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Abstractions\n{\n    public interface ITemplateCatalogProvider\n    {\n        Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity setting, CancellationToken ct = default);\n        Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity setting, string templateName, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Abstractions/TemplateCatalogItem.cs",
      "sha256": "27edec7875c999037dd77d4d6af4a309baf8a5a1f130ec53f86f9dc12757ef76",
      "language": "csharp",
      "size": 414,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.WhatsAppSettings.Abstractions\n{\n    public record TemplateCatalogItem(\n       string Name,\n       string Language,\n       string Body,\n       int PlaceholderCount,\n       bool HasImageHeader,\n       IReadOnlyList<ButtonMetadataDto> Buttons,\n       string Status,\n       string? Category,\n       string? ExternalId,\n       string RawJson\n   );\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Common/Providers.cs",
      "sha256": "f28418126b45e299564664005d25a4c33d566f9deeb455d10358c28c54ccc6bc",
      "language": "csharp",
      "size": 801,
      "content": "namespace xbytechat.api.WhatsAppSettings.Common\n{\n    public static class Providers\n    {\n        public const string PINNACLE = \"PINNACLE\";\n        public const string META_CLOUD = \"META_CLOUD\";\n\n        public static string NormalizeToUpper(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return PINNACLE;\n            var s = raw.Trim().ToUpperInvariant();\n            return s switch\n            {\n                \"META\" => META_CLOUD,\n                \"META_CLOUD\" => META_CLOUD,\n                \"PINNACLE\" => PINNACLE,\n                _ => s // future providers just uppercase\n            };\n        }\n        public static bool IsValid(string? raw)\n        {\n            var s = NormalizeToUpper(raw);\n            return s == PINNACLE || s == META_CLOUD;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/TemplateMetaController.cs",
      "sha256": "9433fd4ad9e26ee026e9f9de320b2ce1e51a5c654e122aff25ca78b43cf2b761",
      "language": "csharp",
      "size": 1694,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates/meta\")]\n    [Authorize]\n    public sealed class TemplateMetaController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateFetcherService _fetcher;\n\n        public TemplateMetaController(IWhatsAppTemplateFetcherService fetcher)\n        {\n            _fetcher = fetcher;\n        }\n\n        // GET /api/templates/meta/list/{businessId}?provider=META_CLOUD\n        [HttpGet(\"list/{businessId:guid}\")]\n        public async Task<IActionResult> List(Guid businessId, [FromQuery] string? provider = null)\n        {\n            if (businessId == Guid.Empty) return BadRequest(new { message = \"Invalid businessId\" });\n            var list = await _fetcher.GetTemplatesMetaAsync(businessId, provider);\n            return Ok(list);\n        }\n\n        // GET /api/templates/meta/{businessId}/{templateName}?language=en_US&provider=META_CLOUD\n        [HttpGet(\"{businessId:guid}/{templateName}\")]\n        public async Task<IActionResult> One(Guid businessId, string templateName, [FromQuery] string? language = null, [FromQuery] string? provider = null)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(templateName))\n                return BadRequest(new { message = \"Invalid parameters\" });\n\n            var meta = await _fetcher.GetTemplateMetaAsync(businessId, templateName, language, provider);\n            if (meta is null) return NotFound();\n            return Ok(meta);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/TemplatePreviewController.cs",
      "sha256": "324fe9674584ea37ac35777789833321459191bddffa3095e601c9547373f20c",
      "language": "csharp",
      "size": 1204,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates/preview\")]\n    [Authorize]\n    public sealed class TemplatePreviewController : ControllerBase\n    {\n        private readonly ITemplatePreviewService _svc;\n\n        public TemplatePreviewController(ITemplatePreviewService svc)\n        {\n            _svc = svc;\n        }\n\n        // POST /api/templates/preview/{businessId}\n        [HttpPost(\"{businessId:guid}\")]\n        public async Task<IActionResult> Preview([FromRoute] Guid businessId, [FromBody] TemplatePreviewRequestDto request)\n        {\n            if (businessId == Guid.Empty) return BadRequest(new { message = \"Invalid businessId\" });\n            if (request == null || string.IsNullOrWhiteSpace(request.TemplateName))\n                return BadRequest(new { message = \"TemplateName is required.\" });\n\n            var result = await _svc.PreviewAsync(businessId, request);\n            return Ok(result);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/TemplatesController.cs",
      "sha256": "c4ef0cc4f3fb7d6d28f3e9213f4b09359c245c895296a8de08578e27098d2377",
      "language": "csharp",
      "size": 5328,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.FileSystemGlobbing;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat_api.WhatsAppSettings.Services;\nnamespace xbytechat.api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates\")]\n    public class TemplatesController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        private readonly ITemplateSyncService _sync;\n        private readonly IWhatsAppTemplateFetcherService _fetcher;\n\n        public TemplatesController(AppDbContext db, ITemplateSyncService sync, IWhatsAppTemplateFetcherService fetcher)\n        { _db = db; _sync = sync; _fetcher = fetcher; }\n\n        [HttpPost(\"sync/{businessId:guid}\")]\n        [Authorize]\n        public async Task<IActionResult> Sync(Guid businessId, [FromQuery] bool force = false)\n        {\n            if (businessId == Guid.Empty) return BadRequest(new { success = false, message = \"Invalid businessId\" });\n            var result = await _sync.SyncBusinessTemplatesAsync(businessId, force);\n            return Ok(new { success = true, result });\n        }\n\n        [HttpGet(\"{businessId:guid}\")]\n        [Authorize]\n        public async Task<IActionResult> List(Guid businessId, [FromQuery] string? q = null,\n            [FromQuery] string? status = \"APPROVED\", [FromQuery] string? language = null,\n            [FromQuery] string? provider = null)\n        {\n            var query = _db.WhatsAppTemplates.AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.IsActive);\n\n            if (!string.IsNullOrWhiteSpace(status))\n                query = query.Where(x => x.Status == status);\n\n            if (!string.IsNullOrWhiteSpace(language))\n                query = query.Where(x => x.Language == language);\n\n            if (!string.IsNullOrWhiteSpace(provider))\n                query = query.Where(x => x.Provider == provider);\n\n            if (!string.IsNullOrWhiteSpace(q))\n                query = query.Where(x => x.Name.Contains(q) || x.Body.Contains(q));\n\n            var items = await query\n                .OrderBy(x => x.Name)\n                .Select(x => new\n                {\n                    x.Name,\n                    x.Language,\n                    x.Status,\n                    x.Category,\n                    x.PlaceholderCount,\n                    x.HasImageHeader,\n                    x.ButtonsJson\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, templates = items });\n        }\n\n        [HttpGet(\"{businessId:guid}/{name}\")]\n        [Authorize]\n        //public async Task<IActionResult> GetOne(Guid businessId, string name, [FromQuery] string? language = null)\n        //{\n        //    var tpl = await _db.WhatsAppTemplates.AsNoTracking()\n        //        .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.Name == name &&\n        //                                  (language == null || x.Language == language));\n        //    if (tpl == null) return NotFound();\n        //    return Ok(new\n        //    {\n        //        tpl.Name,\n        //        tpl.Language,\n        //        tpl.Status,\n        //        tpl.Category,\n        //        tpl.Body,\n        //        tpl.PlaceholderCount,\n        //        tpl.HasImageHeader,\n        //        tpl.ButtonsJson\n        //    });\n        //}\n\n        public async Task<IActionResult> GetOne(Guid businessId, string name, [FromQuery] string? language = null)\n        {\n            var tpl = await _db.WhatsAppTemplates.AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.Name == name &&\n                                          (language == null || x.Language == language));\n            if (tpl == null) return NotFound();\n\n            // 🔎 Ask meta service for precise header info (covers IMAGE/VIDEO/DOCUMENT/TEXT/none)\n            string headerKind = \"none\";\n            bool requiresHeaderMediaUrl = false;\n            try\n            {\n                var meta = await _fetcher.GetTemplateMetaAsync(businessId, tpl.Name, tpl.Language, provider: null);\n                var ht = meta?.HeaderType?.ToUpperInvariant();\n                headerKind = ht switch\n                {\n                    \"IMAGE\" => \"image\",\n                    \"VIDEO\" => \"video\",\n                    \"DOCUMENT\" => \"document\",\n                    \"TEXT\" => \"text\",\n                    _ => (tpl.HasImageHeader ? \"image\" : \"none\")\n                };\n                requiresHeaderMediaUrl = headerKind is \"image\" or \"video\" or \"document\";\n            }\n            catch\n            {\n                // fallback to legacy flag\n                headerKind = tpl.HasImageHeader ? \"image\" : \"none\";\n                requiresHeaderMediaUrl = headerKind == \"image\";\n            }\n\n            return Ok(new\n            {\n                tpl.Name,\n                tpl.Language,\n                tpl.Status,\n                tpl.Category,\n                tpl.Body,\n                tpl.PlaceholderCount,\n                tpl.HasImageHeader,\n                tpl.ButtonsJson,\n                headerKind,                // 👈 NEW for UI\n                requiresHeaderMediaUrl     // 👈 NEW for UI\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppNumbersController.cs",
      "sha256": "01794db6b95cd8ca597c3eec77ffa933ee4aae5de022224a1097d0bee842305a",
      "language": "csharp",
      "size": 5952,
      "content": "using System;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.WhatsAppSettings.Services;\nusing xbytechat.api.Features.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/whatsappsettings/{provider}/numbers\")]\n    public class WhatsAppNumbersController : ControllerBase\n    {\n        private readonly IWhatsAppPhoneNumberService _svc;\n        private readonly ILogger<WhatsAppNumbersController> _logger;\n\n        public WhatsAppNumbersController(\n            IWhatsAppPhoneNumberService svc,\n            ILogger<WhatsAppNumbersController> logger)\n        {\n            _svc = svc;\n            _logger = logger;\n        }\n\n        // Helper to resolve BusinessId from claims/header/query (adjust to your auth)\n        private bool TryGetBusinessId(out Guid businessId)\n        {\n            businessId = Guid.Empty;\n\n            // 1) Claim (preferred)\n            var claim = User?.FindFirst(\"BusinessId\") ?? User?.FindFirst(\"businessId\");\n            if (claim != null && Guid.TryParse(claim.Value, out businessId))\n                return true;\n\n            // 2) Header fallback\n            if (Request.Headers.TryGetValue(\"X-Business-Id\", out var h)\n                && Guid.TryParse(h.ToString(), out businessId))\n                return true;\n\n            // 3) Query fallback\n            if (Guid.TryParse(HttpContext.Request.Query[\"businessId\"], out businessId))\n                return true;\n\n            return false;\n        }\n\n        // GET /api/whatsappsettings/{provider}/numbers\n        [HttpGet]\n        [ProducesResponseType(StatusCodes.Status200OK)]\n        [ProducesResponseType(StatusCodes.Status400BadRequest)]\n        public async Task<IActionResult> List([FromRoute] string provider)\n        {\n            if (!TryGetBusinessId(out var businessId))\n                return BadRequest(\"BusinessId is required (claim/header/query).\");\n\n            var items = await _svc.ListAsync(businessId, provider);\n            return Ok(items);\n        }\n\n        public sealed class UpsertRequest\n        {\n            public string PhoneNumberId { get; set; } = null!;\n            public string WhatsAppBusinessNumber { get; set; } = null!;\n            public string? SenderDisplayName { get; set; }\n            public bool? IsActive { get; set; }\n            public bool? IsDefault { get; set; }\n        }\n\n        // POST /api/whatsappsettings/{provider}/numbers\n        [HttpPost(\"\")]\n        [ProducesResponseType(typeof(WhatsAppPhoneNumber), StatusCodes.Status200OK)]\n        [ProducesResponseType(StatusCodes.Status400BadRequest)]\n       // [HttpPost(\"\")]\n        public async Task<IActionResult> Upsert([FromRoute] string provider, [FromBody] UpsertRequest req)\n        {\n            if (!TryGetBusinessId(out var businessId))\n                return BadRequest(\"BusinessId is required (claim/header/query).\");\n\n            if (string.IsNullOrWhiteSpace(req.PhoneNumberId))\n                return BadRequest(\"phoneNumberId is required.\");\n            if (string.IsNullOrWhiteSpace(req.WhatsAppBusinessNumber))\n                return BadRequest(\"whatsAppBusinessNumber is required.\");\n\n            try\n            {\n                var saved = await _svc.UpsertAsync(\n                    businessId,\n                    provider, // service normalizes\n                    req.PhoneNumberId,\n                    req.WhatsAppBusinessNumber,\n                    req.SenderDisplayName,\n                    req.IsActive,\n                    req.IsDefault\n                );\n                return Ok(saved);\n            }\n            catch (InvalidOperationException ex) when (ex.InnerException is Npgsql.NpgsqlException npg)\n            {\n                // Bubble up constraint codes if useful\n                // 23505 unique_violation, 23503 foreign_key_violation, 23502 not_null_violation\n                return StatusCode(StatusCodes.Status409Conflict, new\n                {\n                    statusCode = 409,\n                    code = npg.SqlState,\n                    message = ex.Message\n                });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(StatusCodes.Status500InternalServerError, new\n                {\n                    statusCode = 500,\n                    message = ex.Message\n                });\n            }\n        }\n\n        // DELETE /api/whatsappsettings/{provider}/numbers/{id}\n        [HttpDelete(\"{id:guid}\")]\n        [ProducesResponseType(StatusCodes.Status204NoContent)]\n        [ProducesResponseType(StatusCodes.Status404NotFound)]\n        [ProducesResponseType(StatusCodes.Status400BadRequest)]\n        public async Task<IActionResult> Delete([FromRoute] string provider, [FromRoute] Guid id)\n        {\n            if (!TryGetBusinessId(out var businessId))\n                return BadRequest(\"BusinessId is required (claim/header/query).\");\n\n            var ok = await _svc.DeleteAsync(businessId, provider, id);\n            if (!ok) return NotFound();\n\n            return NoContent();\n        }\n\n        // PATCH /api/whatsappsettings/{provider}/numbers/{id}/default\n        [HttpPatch(\"{id:guid}/default\")]\n        [ProducesResponseType(StatusCodes.Status204NoContent)]\n        [ProducesResponseType(StatusCodes.Status404NotFound)]\n        [ProducesResponseType(StatusCodes.Status400BadRequest)]\n        public async Task<IActionResult> SetDefault([FromRoute] string provider, [FromRoute] Guid id)\n        {\n            if (!TryGetBusinessId(out var businessId))\n                return BadRequest(\"BusinessId is required (claim/header/query).\");\n\n            var ok = await _svc.SetDefaultAsync(businessId, provider, id);\n            if (!ok) return NotFound();\n\n            return NoContent();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppSettingsController.cs",
      "sha256": "813a4158ec3c4a50c2fc04f548697062c9f8300610b1464422cb3bf8d9b31bb8",
      "language": "csharp",
      "size": 14803,
      "content": "// 📄 File: WhatsAppSettings/Controllers/WhatsAppSettingsController.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing xbytechat.api.Shared; // for User.GetBusinessId()\nusing xbytechat.api.WhatsAppSettings.Services;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class WhatsAppSettingsController : ControllerBase\n    {\n        private readonly IWhatsAppSettingsService _svc;\n        private readonly ILogger<WhatsAppSettingsController> _logger;\n        private readonly IWhatsAppSenderService _whatsAppSenderService;\n       \n        public WhatsAppSettingsController(\n            IWhatsAppSettingsService svc,\n            ILogger<WhatsAppSettingsController> logger, IWhatsAppSenderService whatsAppSenderService)\n        {\n            _svc = svc;\n            _logger = logger;\n            _whatsAppSenderService = whatsAppSenderService;\n\n        }\n\n \n        [HttpPut(\"update\")]\n        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(new { message = \"Invalid input.\", errors = ModelState });\n\n            Guid businessId;\n            try { businessId = User.GetBusinessId(); dto.BusinessId = businessId; }\n            catch { return Unauthorized(new { message = \"BusinessId missing or invalid in token.\" }); }\n\n            await _svc.SaveOrUpdateSettingAsync(dto);\n            return Ok(new { message = \"Settings saved/updated.\" });\n        }\n\n        // ----------------------------\n        // Get the current user's saved settings\n        // ----------------------------\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMySettings()\n        {\n            var businessId = User.GetBusinessId();\n            var setting = await _svc.GetSettingsByBusinessIdAsync(businessId);\n            if (setting == null)\n                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n            return Ok(setting);\n        }\n\n        // ----------------------------\n        // Test connection using values sent in the body (not necessarily saved)\n        // Accepts Provider = \"Pinnacle\" or \"Meta_cloud\"\n        // ----------------------------\n        [HttpPost(\"test-connection\")]\n        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            if (dto is null)\n                return BadRequest(new { message = \"❌ Missing request body.\" });\n\n            var provider = NormalizeProvider(dto.Provider);\n            if (provider is null)\n                return BadRequest(new { message = \"❌ Provider is required (Pinnacle | Meta_cloud).\" });\n\n            dto.Provider = provider; // use canonical\n\n            // Minimal provider-specific validation (service will validate again)\n            if (provider == \"Meta_cloud\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiUrl) ||\n                    string.IsNullOrWhiteSpace(dto.ApiKey) ||\n                    string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                {\n                    return BadRequest(new { message = \"❌ API URL, Token and Phone Number ID are required for Meta Cloud test.\" });\n                }\n            }\n            else if (provider == \"Pinnacle\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiUrl) ||\n                    string.IsNullOrWhiteSpace(dto.ApiKey) ||\n                    (string.IsNullOrWhiteSpace(dto.WabaId) && string.IsNullOrWhiteSpace(dto.PhoneNumberId)) ||\n                    string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                {\n                    return BadRequest(new\n                    {\n                        message = \"❌ API URL, API Key, (WABA ID or Phone Number ID), and Business Number are required for Pinnacle test.\"\n                    });\n                }\n            }\n\n            try\n            {\n                var message = await _svc.TestConnectionAsync(dto);\n\n                // Convention: service returns a human string; we 200 on success (starts with ✅), 400 otherwise\n                if (!string.IsNullOrEmpty(message) && message.StartsWith(\"✅\"))\n                    return Ok(new { message });\n\n                return BadRequest(new { message = string.IsNullOrEmpty(message) ? \"❌ Test failed.\" : message });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ [TestConnection] Failed\");\n                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        // ----------------------------\n        // Test connection against the SAVED settings for this business\n        // ----------------------------\n        //[HttpPost(\"test-connection/current\")]\n        //public async Task<IActionResult> TestConnectionCurrent()\n        //{\n        //    var businessId = User.GetBusinessId();\n        //    var saved = await _svc.GetSettingsByBusinessIdAsync(businessId);\n        //    if (saved is null)\n        //        return NotFound(new { message = \"❌ No saved WhatsApp settings found.\" });\n\n        //    var dto = new SaveWhatsAppSettingDto\n        //    {\n        //        BusinessId = businessId,\n        //        Provider = NormalizeProvider(saved.Provider) ?? saved.Provider,\n        //        ApiUrl = saved.ApiUrl,\n        //        ApiKey = saved.ApiKey,\n        //       // ApiToken = saved.ApiToken,\n        //        PhoneNumberId = saved.PhoneNumberId,\n        //        WabaId = saved.WabaId,\n        //        WhatsAppBusinessNumber = saved.WhatsAppBusinessNumber,\n        //        SenderDisplayName = saved.SenderDisplayName,\n        //        WebhookSecret = saved.WebhookSecret,\n        //        WebhookVerifyToken = saved.WebhookVerifyToken,\n        //        IsActive = saved.IsActive\n        //    };\n\n        //    try\n        //    {\n        //        var message = await _svc.TestConnectionAsync(dto);\n        //        if (!string.IsNullOrEmpty(message) && message.StartsWith(\"✅\"))\n        //            return Ok(new { message });\n\n        //        return BadRequest(new { message = string.IsNullOrEmpty(message) ? \"❌ Test failed.\" : message });\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"❌ [TestConnectionCurrent] Failed\");\n        //        return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n        //    }\n        //}\n\n        // ----------------------------\n        // Delete current user's settings\n        // ----------------------------\n\n        [HttpPost(\"test-connection/current\")]\n        public async Task<IActionResult> TestConnectionCurrent()\n        {\n            // ---- local helpers (scoped only to this action) ----\n            static string? NormalizeProvider(string? raw)\n            {\n                if (string.IsNullOrWhiteSpace(raw)) return null;\n                var s = raw.Trim().ToLowerInvariant().Replace(\"-\", \"_\").Replace(\" \", \"_\");\n                if (s is \"meta_cloud\" or \"meta\" or \"wa_cloud\" or \"facebook\" or \"whatsapp_cloud\")\n                    return \"META_CLOUD\";\n                if (s is \"pinnacle\" or \"pinnacle_official\" or \"pinbot\")\n                    return \"PINNACLE\";\n                return null; // unknown → let original pass through\n            }\n\n            static string NormalizeApiUrl(string? apiUrl, string? provider)\n            {\n                if (string.Equals(provider, \"META_CLOUD\", StringComparison.Ordinal))\n                    return string.IsNullOrWhiteSpace(apiUrl) ? \"https://graph.facebook.com/v22.0\" : apiUrl.Trim();\n                return string.IsNullOrWhiteSpace(apiUrl) ? string.Empty : apiUrl.Trim();\n            }\n\n            static string? T(string? s) => string.IsNullOrWhiteSpace(s) ? null : s.Trim();\n            // ---- /helpers ----\n\n            var businessId = User.GetBusinessId();\n            var saved = await _svc.GetSettingsByBusinessIdAsync(businessId);\n            if (saved is null)\n                return NotFound(new { message = \"❌ No saved WhatsApp settings found.\" });\n\n            // defensive normalization (safe even if FE already sends uppercase)\n            var provider = NormalizeProvider(saved.Provider) ?? saved.Provider?.Trim();\n            var apiUrl = NormalizeApiUrl(saved.ApiUrl, provider);\n            var apiKey = T(saved.ApiKey);\n            var phoneId = T(saved.PhoneNumberId);\n            var wabaId = T(saved.WabaId);\n\n            var dto = new SaveWhatsAppSettingDto\n            {\n                BusinessId = businessId,\n                Provider = provider ?? saved.Provider, // keep original if we couldn't map\n                ApiUrl = apiUrl,\n                ApiKey = apiKey,\n                PhoneNumberId = phoneId,\n                WabaId = wabaId,\n                WhatsAppBusinessNumber = T(saved.WhatsAppBusinessNumber),\n                SenderDisplayName = T(saved.SenderDisplayName),\n                WebhookSecret = T(saved.WebhookSecret),\n                WebhookVerifyToken = T(saved.WebhookVerifyToken),\n                IsActive = saved.IsActive\n            };\n\n            // Provider-specific guardrails (clear errors instead of failing deep inside)\n            if (dto.Provider == \"META_CLOUD\")\n            {\n                if (string.IsNullOrEmpty(dto.ApiKey))\n                    return BadRequest(new { message = \"❌ Missing Meta access token (ApiKey).\" });\n                // apiUrl defaulted above if empty\n            }\n            else if (dto.Provider == \"PINNACLE\")\n            {\n                if (string.IsNullOrEmpty(dto.ApiKey))\n                    return BadRequest(new { message = \"❌ Missing Pinnacle API key.\" });\n                if (string.IsNullOrEmpty(dto.ApiUrl))\n                    return BadRequest(new { message = \"❌ Missing Pinnacle API URL.\" });\n            }\n            else\n            {\n                return BadRequest(new { message = $\"❌ Unsupported provider: {dto.Provider}\" });\n            }\n\n            try\n            {\n                var message = await _svc.TestConnectionAsync(dto);\n\n                if (!string.IsNullOrEmpty(message) && message.StartsWith(\"✅\"))\n                    return Ok(new { message });\n\n                return BadRequest(new { message = string.IsNullOrEmpty(message) ? \"❌ Test failed.\" : message });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ [TestConnectionCurrent] Failed\");\n                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"delete\")]\n        public async Task<IActionResult> DeleteSetting()\n        {\n            var businessId = User.GetBusinessId();\n            var deleted = await _svc.DeleteSettingsAsync(businessId);\n            if (!deleted) return NotFound(new { message = \"❌ No WhatsApp settings found to delete.\" });\n            return Ok(new { message = \"🗑️ WhatsApp settings deleted successfully.\" });\n        }\n\n        // Optional alias for FE routes that call /delete-current\n        [HttpDelete(\"delete-current\")]\n        public Task<IActionResult> DeleteSettingAlias() => DeleteSetting();\n\n        /// <summary>\n        /// Maps any incoming text to the canonical provider values we support.\n        /// Returns null if unrecognized.\n        /// </summary>\n        private static string? NormalizeProvider(string? providerRaw)\n        {\n            if (string.IsNullOrWhiteSpace(providerRaw)) return null;\n\n            var p = providerRaw.Trim();\n\n            // Accept canonical values exactly and a few common variants\n            if (string.Equals(p, \"Pinnacle\", StringComparison.Ordinal)) return \"Pinnacle\";\n            if (string.Equals(p, \"Meta_cloud\", StringComparison.Ordinal)) return \"Meta_cloud\";\n\n            // tolerate some user/legacy variants from older UIs\n            var lower = p.ToLowerInvariant();\n            if (lower is \"pinbot\" or \"pinnacle (official)\" or \"pinnacle (pinnacle)\" or \"pinnacle official\")\n                return \"Pinnacle\";\n            if (lower is \"meta cloud\" or \"meta\" or \"meta-cloud\")\n                return \"Meta_cloud\";\n\n            return null;\n        }\n\n        [HttpGet(\"callback-url\")]\n        public async Task<IActionResult> GetMyCallbackUrl([FromServices] IConfiguration cfg)\n        {\n            var businessId = User.GetBusinessId();\n            var baseUrl = cfg[\"App:PublicBaseUrl\"] ?? string.Empty;\n            var url = await _svc.GetCallbackUrlAsync(businessId, baseUrl);\n            return Ok(new { callbackUrl = url });\n        }\n\n        [HttpGet(\"all\")]\n        public async Task<IActionResult> GetAllForBusinessAsync([FromServices] IWhatsAppSettingsService settingsService)\n        {\n            // Resolve BusinessId from claim/header/query (same pattern used elsewhere)\n            if (!TryResolveBusinessId(HttpContext, User, out var businessId))\n                return BadRequest(\"BusinessId is required (claim/header/query).\");\n\n            var items = await settingsService.GetAllForBusinessAsync(businessId);\n            return Ok(items);\n        }\n\n        // local helper (add once in this controller if you don’t already have it)\n        private static bool TryResolveBusinessId(HttpContext ctx, ClaimsPrincipal user, out Guid businessId)\n        {\n            businessId = Guid.Empty;\n\n            var claim = user?.FindFirst(\"BusinessId\") ?? user?.FindFirst(\"businessId\");\n            if (claim != null && Guid.TryParse(claim.Value, out businessId))\n                return true;\n\n            if (ctx.Request.Headers.TryGetValue(\"X-Business-Id\", out var h)\n                && Guid.TryParse(h.ToString(), out businessId))\n                return true;\n\n            if (Guid.TryParse(ctx.Request.Query[\"businessId\"], out businessId))\n                return true;\n\n            return false;\n        }\n\n        // GET /api/whatsapp/senders/{businessId}\n        [HttpGet(\"senders/{businessId:guid}\")]     // <-- align action path\n        public async Task<IActionResult> GetSenders(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"Invalid businessId.\" });\n\n            var items = await _whatsAppSenderService.GetBusinessSendersAsync(businessId);\n            return Ok(items);\n        }\n    }\n\n}\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppTemplateFetcherController.cs",
      "sha256": "423175eb5cd31766ee4c3fe215cb17108c3cf6bc44948fc0f52a88e8a000ad39",
      "language": "csharp",
      "size": 3072,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WhatsAppTemplateFetcherController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public WhatsAppTemplateFetcherController(IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _templateFetcherService = templateFetcherService;\n        }\n\n        [HttpGet(\"get-template/{businessId}\")]\n        [Authorize] // ✅ Optional: Require authentication if your project uses JWT auth\n        public async Task<IActionResult> FetchTemplates(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"❌ Invalid BusinessId.\" });\n\n            var templates = await _templateFetcherService.FetchTemplatesAsync(businessId); // comment this line to stop fetch template as per businessid\n            //var templates = await _templateFetcherService.FetchAllTemplatesAsync(); // comment this line to stop fetch template as per businessid\n\n            return Ok(new\n            {\n                success = true,\n                templates = templates\n            });\n        }\n\n      \n\n        [HttpGet(\"get-template-all\")]\n        public async Task<IActionResult> GetAllTemplatesAsync()\n        {\n            try\n            {\n                var templates = await _templateFetcherService.FetchAllTemplatesAsync();\n                return Ok(new { success = true, templates });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"Error fetching templates\",\n                    detail = ex.Message\n                });\n            }\n        }\n\n        [HttpGet(\"get-template-by-name\")]\n        public async Task<IActionResult> GetTemplateByName([FromQuery] string name)\n        {\n            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value);\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, name, true);\n            return template == null ? NotFound() : Ok(template);\n        }\n        [HttpGet(\"get-by-name/{businessId}/{templateName}\")]\n        public async Task<IActionResult> GetByName(Guid businessId, string templateName, [FromQuery] bool includeButtons = true)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(templateName))\n                return BadRequest(new { success = false, message = \"❌ Missing or invalid parameters.\" });\n\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons);\n\n            if (template == null)\n                return NotFound();\n\n            return Ok(new\n            {\n                success = true,\n                template\n            });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/ButtonMetadataDto.cs",
      "sha256": "55b2b89dbf3f8b8f16bb134711c23334c37a60c9543a1ea34325fb89506a6dce",
      "language": "csharp",
      "size": 536,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class ButtonMetadataDto\n    {\n        public string Type { get; set; } // Example: \"URL\" or \"PHONE_NUMBER\"\n        public string Text { get; set; } // Button Text\n        public string SubType { get; set; } // (optional) for URL, Phone Number etc\n        public int Index { get; set; } // Index like 0, 1\n                                       // Optional: dynamic parameter value for validation\n        public string? ParameterValue { get; set; } // e.g. coupon_code\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs",
      "sha256": "9c7ba8be0ccb6695a19a15e08fa4ef3542ae0978f21c1129b75fb4975cf74a32",
      "language": "csharp",
      "size": 1324,
      "content": "// 📄 File: WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.DTOs\n{\n    public class SaveWhatsAppSettingDto\n    {\n        public Guid BusinessId { get; set; }\n\n        // Which provider: \"pinnacle\" | \"meta_cloud\"\n        [Required, MaxLength(50)]\n        public string Provider { get; set; } = string.Empty;\n\n        [Required, MaxLength(500)]\n        public string ApiUrl { get; set; } = string.Empty;\n\n        [MaxLength(1000)]\n        public string? ApiKey { get; set; } // Pinnacle\n\n      \n        [MaxLength(100)]\n        public string? PhoneNumberId { get; set; } // Meta Cloud\n\n        [MaxLength(100)]\n        public string? WabaId { get; set; } // Optional (Pinnacle/Meta)\n\n        [MaxLength(50)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        [MaxLength(200)]\n        public string? WebhookSecret { get; set; }\n\n        [MaxLength(200)]\n        public string? WebhookVerifyToken { get; set; }\n\n        // 👇 NEW: per-provider callback URL (optional, stored in DB)\n        [MaxLength(1000)]\n        public string? WebhookCallbackUrl { get; set; }\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateForUIResponseDto.cs",
      "sha256": "954d4bddaa8450da19f714aec8f819d5affa5edcee6a6e078759e3bcb04b47be",
      "language": "csharp",
      "size": 427,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class TemplateForUIResponseDto\n    {\n        public string Name { get; set; } = \"\";\n        public string Language { get; set; } = \"en_US\";\n        public string Body { get; set; } = \"\";\n        public int ParametersCount { get; set; }\n        public bool HasImageHeader { get; set; }\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateMetadataDto.cs",
      "sha256": "ee243eac02e205bf965753cb204d12e1548d23a7d43b9b21717744b30b5845e5",
      "language": "csharp",
      "size": 911,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    /// <summary>\n    /// DTO representing a simplified view of WhatsApp template metadata.\n    /// </summary>\n    public class TemplateMetadataDto\n    {\n        /// Unique name of the template.\n        public string Name { get; set; } = string.Empty;\n\n        /// Language code used when creating the template (e.g., en_US, hi_IN).\n        public string Language { get; set; } = \"en_US\";\n\n        /// The message body content with placeholders (e.g., \"Hi {{1}}, your order is ready\").\n        public string Body { get; set; } = string.Empty;\n\n        /// Number of dynamic parameters required (e.g., 2 for {{1}} and {{2}}).\n        public int PlaceholderCount { get; set; }\n\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new List<ButtonMetadataDto>(); // ✅ Added Buttons\n        public bool HasImageHeader { get; set; } = false;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateMetaDto.cs",
      "sha256": "2806aa041b83e7e1ef645c67f18f7d455aac9bdd1fcce9c4538b76786132c9ff",
      "language": "csharp",
      "size": 1516,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    // Normalized snapshot of a provider template for FE + snapshots\n    public sealed class TemplateMetaDto\n    {\n        public string Provider { get; set; } = \"\";     // \"META_CLOUD\" | \"PINNACLE\"\n        public string TemplateId { get; set; } = \"\";   // provider’s id if you store it\n        public string TemplateName { get; set; } = \"\";\n        public string Language { get; set; } = \"\";     // e.g., \"en_US\"\n\n        public bool HasHeaderMedia { get; set; }\n        public string? HeaderType { get; set; }        // \"IMAGE\" | \"VIDEO\" | \"DOCUMENT\" (future)\n\n        // 1-based placeholder slots for BODY\n        public List<PlaceholderSlot> BodyPlaceholders { get; set; } = new();\n\n        // Up to 3 buttons in template order\n        public List<TemplateButtonMeta> Buttons { get; set; } = new();\n\n    }\n\n    public sealed class TemplateButtonMeta\n    {\n        // Provider-level type (e.g., \"URL\", \"PHONE_NUMBER\", \"QUICK_REPLY\")\n        public string Type { get; set; } = \"\";\n        public string Text { get; set; } = \"\";         // label\n        public string? Value { get; set; }             // ParameterValue from provider (may contain \"{{1}}\")\n        public int Order { get; set; }                 // 0..2\n    }\n\n    public sealed class PlaceholderSlot\n    {\n        public int Index { get; set; }                 // 1..N\n        public string? Label { get; set; }\n        public string? Example { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplatePreviewDto.cs",
      "sha256": "ea9fe018139bee52670ef4b1030e185040a735c6eb91257088e675e75a40e3e1",
      "language": "csharp",
      "size": 2223,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public sealed class TemplatePreviewRequestDto\n    {\n        public string TemplateName { get; set; } = \"\";\n        public string? Provider { get; set; }          // \"META_CLOUD\" | \"PINNACLE\" (optional)\n        public string? Language { get; set; }          // e.g., \"en_US\" (optional)\n        public string? HeaderImageUrl { get; set; }    // for image-header previews\n        public List<string> TemplateParameters { get; set; } = new();  // BODY params in order\n        public List<PreviewButtonInputDto> Buttons { get; set; } = new(); // up to 3\n    }\n\n    public sealed class PreviewButtonInputDto\n    {\n        public int Position { get; set; }              // 1..3 aligns with template button order\n        public string? Type { get; set; }              // e.g., \"URL\"\n        public string? Title { get; set; }             // label shown to user (optional)\n        public string? Value { get; set; }             // for dynamic URL value or tel/wa deep link\n    }\n\n    public sealed class TemplatePreviewResponseDto\n    {\n        public bool FoundTemplate { get; set; }\n        public string TemplateName { get; set; } = \"\";\n        public string? Language { get; set; }\n        public bool HasHeaderMedia { get; set; }\n        public string HeaderType { get; set; } = \"\";   // \"IMAGE\", \"VIDEO\", etc.\n\n        public int RequiredPlaceholderCount { get; set; }\n        public int ProvidedPlaceholderCount { get; set; }\n        public List<int> MissingPlaceholderIndices { get; set; } = new(); // 1-based\n        public List<string> Warnings { get; set; } = new();\n        public List<string> Errors { get; set; } = new();\n\n        // A provider-shaped preview of what we'd send (Meta/Pinnacle use the same component shape)\n        // Example:\n        // [\n        //   { type:\"header\", parameters:[{ type:\"image\", image:{ link:\"...\"}}]},\n        //   { type:\"body\", parameters:[{type:\"text\",text:\"..\"}, ...] },\n        //   { type:\"button\", sub_type:\"url\", index:\"0\", parameters:[{ type:\"text\", text:\"TOKEN_OR_URL\"}] }\n        // ]\n        public List<object> ProviderComponentsPreview { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/WhatsAppSenderDto.cs",
      "sha256": "8c113389ea7e922d92ef3a6f8538003ea60f8a62298e0622300bf845f290668c",
      "language": "csharp",
      "size": 869,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class WhatsAppSenderDto\n    {\n        public Guid Id { get; set; }                         // row id in WhatsAppPhoneNumbers\n        public Guid BusinessId { get; set; }\n        public string Provider { get; set; } = string.Empty; // \"PINNACLE\" | \"META_CLOUD\"\n        public string PhoneNumberId { get; set; } = string.Empty;\n        public string WhatsAppBusinessNumber { get; set; } = string.Empty; // E.164 printable\n        public string? SenderDisplayName { get; set; }\n        public bool IsActive { get; set; }\n        public bool IsDefault { get; set; }\n        public string DisplayLabel =>\n            string.IsNullOrWhiteSpace(SenderDisplayName)\n                ? $\"{WhatsAppBusinessNumber} • {Provider}\"\n                : $\"{SenderDisplayName} ({WhatsAppBusinessNumber}) • {Provider}\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Models/WhatsAppPhoneNumber.cs",
      "sha256": "fbcd435532eb4acfc7bf5ec1191078f2598e733541f44cd2a3b768e96436ce0c",
      "language": "csharp",
      "size": 827,
      "content": "using System;\n\nnamespace xbytechat.api.Features.WhatsAppSettings.Models\n{\n    public class WhatsAppPhoneNumber\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        public Guid BusinessId { get; set; }\n        public string Provider { get; set; } = null!;                 // \"Meta_cloud\" | \"Pinnacle\" | etc.\n\n        public string PhoneNumberId { get; set; } = null!;            // provider-specific id (e.g., Meta phone_number_id)\n        public string WhatsAppBusinessNumber { get; set; } = null!;   // e.g., \"+15551234567\"\n        public string? SenderDisplayName { get; set; }\n\n        public bool IsActive { get; set; } = true;\n        public bool IsDefault { get; set; } = false;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Models/WhatsAppSettingEntity.cs",
      "sha256": "4e6f77b1e10a72e8bfad42515bb36f9e627a73ce4a898ed46c476333b457e008",
      "language": "csharp",
      "size": 2973,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Models\n{\n    public class WhatsAppSettingEntity\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        // NEW: which provider this row belongs to (\"pinnacle\", \"meta_cloud\", \"twilio\", etc.)\n        [Required]\n        [MaxLength(50)]\n        public string Provider { get; set; } //= \"pinnacle\";\n\n        [Required]\n        [MaxLength(500)]\n        public string ApiUrl { get; set; }  // e.g. https://partnersv1.pinbot.ai/v3\n\n        [MaxLength(1000)]\n        public string ApiKey { get; set; }\n\n        //[Required]\n        //[MaxLength(1000)]\n        //public string ApiToken { get; set; } // store encrypted\n\n        [MaxLength(20)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        public string? PhoneNumberId { get; set; } // used by Meta Cloud; Pinbot doesn't need it\n        public string? WabaId { get; set; } = string.Empty;\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        // Optional: for webhook signature/verification if provider supports it\n        [MaxLength(200)]\n        public string? WebhookSecret { get; set; }\n\n        [MaxLength(200)]\n\n\n        public string? WebhookVerifyToken { get; set; }\n\n        [MaxLength(1000)]\n        public string? WebhookCallbackUrl { get; set; }\n\n\n        [Required]\n        public bool IsActive { get; set; } = true;\n\n        [Required]\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public ICollection<WhatsAppPhoneNumber> WhatsAppBusinessNumbers { get; set; } = new List<WhatsAppPhoneNumber>();\n\n    }\n}\n\n\n//using System;\n//using System.ComponentModel.DataAnnotations;\n\n//namespace xbytechat_api.WhatsAppSettings.Models\n//{\n//    public class WhatsAppSettingEntity\n//    {\n//        [Key]\n//        public Guid Id { get; set; }\n\n//        [Required]\n//        public Guid BusinessId { get; set; }\n\n//        [Required]\n//        [MaxLength(500)]\n//        public string ApiUrl { get; set; }\n\n//        [Required]\n//        [MaxLength(1000)]\n//        public string ApiToken { get; set; }\n\n//        [Required]\n//        [MaxLength(20)]\n//        public string? WhatsAppBusinessNumber { get; set; }\n\n//        public string? PhoneNumberId { get; set; } //Meta Business phone number ID\n//        public string? WabaId { get; set; } = string.Empty; //WhatsApp Business Account ID\n\n//        [MaxLength(100)]\n//        public string? SenderDisplayName { get; set; }\n\n//        [Required]\n//        public bool IsActive { get; set; } = true;\n\n//        [Required]\n//        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n//        public DateTime? UpdatedAt { get; set; }\n\n//        // string ApiVersion { get; set; } = \"v18.0\";\n\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Providers/MetaTemplateCatalogProvider.cs",
      "sha256": "061dae1c5c25df66ba29434ead260a8f36273f4c61f3083542142fd6058fff4f",
      "language": "csharp",
      "size": 6490,
      "content": "using Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Providers\n{\n    public sealed class MetaTemplateCatalogProvider : ITemplateCatalogProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<MetaTemplateCatalogProvider> _log;\n\n        public MetaTemplateCatalogProvider(HttpClient http, ILogger<MetaTemplateCatalogProvider> log)\n        { _http = http; _log = log; }\n\n        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n        {\n            var items = new List<TemplateCatalogItem>();\n            if (string.IsNullOrWhiteSpace(s.ApiKey) || string.IsNullOrWhiteSpace(s.WabaId))\n                return items;\n\n            var baseUrl = s.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v22.0\";\n            var next = $\"{baseUrl}/{s.WabaId}/message_templates?limit=100\";\n\n            _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", s.ApiKey);\n\n            while (!string.IsNullOrWhiteSpace(next))\n            {\n                var res = await _http.GetAsync(next, ct);\n                var json = await res.Content.ReadAsStringAsync(ct);\n                if (!res.IsSuccessStatusCode) break;\n\n                dynamic parsed = JsonConvert.DeserializeObject(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    // Filter APPROVED/ACTIVE\n                    string status = (tpl.status?.ToString() ?? \"\").ToUpperInvariant();\n                    if (status != \"APPROVED\" && status != \"ACTIVE\") continue;\n\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n                    bool hasImageHeader = false;\n                    var buttons = new List<ButtonMetadataDto>();\n\n                    foreach (var comp in tpl.components)\n                    {\n                        string type = comp.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                            body = comp.text?.ToString() ?? \"\";\n\n                        if (type == \"HEADER\" && (comp.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                            hasImageHeader = true;\n\n                        if (type == \"BUTTONS\")\n                        {\n                            foreach (var b in comp.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = b.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = b.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? param = b.url != null ? b.url.ToString()\n                                                 : b.phone_number != null ? b.phone_number.ToString()\n                                                 : b.coupon_code != null ? b.coupon_code.ToString()\n                                                 : b.flow_id != null ? b.flow_id.ToString()\n                                                 : null;\n\n                                    bool hasExample = b.example != null;\n                                    bool isDynamic = hasExample && Regex.IsMatch(b.example.ToString(), @\"\\{\\{[0-9]+\\}\\}\");\n                                    bool requiresParam = new[] { \"url\", \"flow\", \"copy_code\", \"catalog\", \"reminder\" }.Contains(subType);\n                                    bool needsRuntimeValue = requiresParam && isDynamic;\n                                    if (subType == \"unknown\" || (param == null && needsRuntimeValue)) continue;\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = param ?? \"\"\n                                    });\n                                }\n                                catch (Exception ex)\n                                { _log.LogWarning(ex, \"Button parse failed for template {Name}\", (string)name); }\n                            }\n                        }\n                    }\n\n                    int placeholders = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n                    var raw = JsonConvert.SerializeObject(tpl);\n\n                    items.Add(new TemplateCatalogItem(\n                        Name: name,\n                        Language: language,\n                        Body: body,\n                        PlaceholderCount: placeholders,\n                        HasImageHeader: hasImageHeader,\n                        Buttons: buttons,\n                        Status: status,\n                        Category: tpl.category?.ToString(),\n                        ExternalId: tpl.id?.ToString(),\n                        RawJson: raw\n                    ));\n                }\n\n                next = parsed?.paging?.next?.ToString();\n            }\n\n            return items;\n        }\n\n        public async Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n            => (await ListAsync(s, ct)).FirstOrDefault(t => t.Name.Equals(templateName, StringComparison.OrdinalIgnoreCase));\n    }\n}"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Providers/PinnacleTemplateCatalogProvider.cs",
      "sha256": "3060d7531506978583fc9d7ca9ca3d2a2f4363a469846efcfcf97ae005ce30da",
      "language": "csharp",
      "size": 9679,
      "content": "using Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Providers\n{\n    public sealed class PinnacleTemplateCatalogProvider : ITemplateCatalogProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<PinnacleTemplateCatalogProvider> _log;\n\n        public PinnacleTemplateCatalogProvider(HttpClient http, ILogger<PinnacleTemplateCatalogProvider> log)\n        { _http = http; _log = log; }\n\n        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n        {\n            var items = new List<TemplateCatalogItem>();\n\n            if (string.IsNullOrWhiteSpace(s.ApiKey))\n            {\n                _log.LogWarning(\"Pinnacle: missing ApiKey for BusinessId {BusinessId}\", s.BusinessId);\n                return items;\n            }\n\n            var baseUrl = (s.ApiUrl ?? \"https://partnersv1.pinbot.ai/v3\").TrimEnd('/');\n            var pathId = !string.IsNullOrWhiteSpace(s.WabaId) ? s.WabaId!.Trim()\n                        : !string.IsNullOrWhiteSpace(s.PhoneNumberId) ? s.PhoneNumberId!.Trim()\n                        : null;\n\n            if (string.IsNullOrWhiteSpace(pathId))\n            {\n                _log.LogWarning(\"Pinnacle: missing WabaId/PhoneNumberId for BusinessId {BusinessId}\", s.BusinessId);\n                return items;\n            }\n\n            // set header\n            _http.DefaultRequestHeaders.Remove(\"apikey\");\n            _http.DefaultRequestHeaders.TryAddWithoutValidation(\"apikey\", s.ApiKey);\n\n            string? nextUrl = $\"{baseUrl}/{pathId}/message_templates?limit=100\";\n\n            while (!string.IsNullOrWhiteSpace(nextUrl))\n            {\n                using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                var res = await _http.SendAsync(req, ct);\n                var json = await res.Content.ReadAsStringAsync(ct);\n\n                if (!res.IsSuccessStatusCode)\n                {\n                    _log.LogError(\"❌ Pinnacle list failed ({Status}): {Body}\", (int)res.StatusCode, json);\n                    break;\n                }\n\n                dynamic parsed = JsonConvert.DeserializeObject(json);\n                var collection = parsed?.data ?? parsed?.templates;\n                if (collection == null)\n                {\n                    _log.LogInformation(\"Pinnacle: no data/templates array.\");\n                    break;\n                }\n\n                foreach (var tpl in collection)\n                {\n                    try\n                    {\n                        string name = tpl.name?.ToString() ?? \"\";\n                        string language = tpl.language?.ToString() ?? \"en_US\";\n                        string status = (tpl.status?.ToString() ?? \"APPROVED\").ToUpperInvariant();\n                        string category = tpl.category?.ToString();\n                        string externalId = tpl.id?.ToString();\n\n                        string body = \"\";\n                        bool hasImageHeader = false;\n                        var buttons = new List<ButtonMetadataDto>();\n\n                        var components = tpl.components;\n                        if (components != null)\n                        {\n                            foreach (var c in components)\n                            {\n                                string type = c.type?.ToString()?.ToUpperInvariant();\n\n                                if (type == \"BODY\")\n                                    body = c.text?.ToString() ?? \"\";\n\n                                if (type == \"HEADER\" &&\n                                    (c.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                                    hasImageHeader = true;\n\n                                if (type == \"BUTTONS\" && c.buttons != null)\n                                {\n                                    foreach (var b in c.buttons)\n                                    {\n                                        string btnType = b.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                        string text = b.text?.ToString() ?? \"\";\n                                        int index = buttons.Count;\n\n                                        string subType = btnType switch\n                                        {\n                                            \"URL\" => \"url\",\n                                            \"PHONE_NUMBER\" => \"voice_call\",\n                                            \"QUICK_REPLY\" => \"quick_reply\",\n                                            \"COPY_CODE\" => \"copy_code\",\n                                            \"CATALOG\" => \"catalog\",\n                                            \"FLOW\" => \"flow\",\n                                            \"REMINDER\" => \"reminder\",\n                                            \"ORDER_DETAILS\" => \"order_details\",\n                                            _ => \"unknown\"\n                                        };\n\n                                        string? param =\n                                            b.url != null ? b.url.ToString() :\n                                            b.phone_number != null ? b.phone_number.ToString() :\n                                            b.coupon_code != null ? b.coupon_code.ToString() :\n                                            b.flow_id != null ? b.flow_id.ToString() :\n                                            null;\n\n                                        buttons.Add(new ButtonMetadataDto\n                                        {\n                                            Text = text,\n                                            Type = btnType,\n                                            SubType = subType,\n                                            Index = index,\n                                            ParameterValue = param ?? \"\"\n                                        });\n                                    }\n                                }\n                            }\n                        }\n\n                        int placeholders = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n                        var raw = JsonConvert.SerializeObject(tpl);\n\n                        // Only persist APPROVED/ACTIVE (match Meta behavior)\n                        if (status is \"APPROVED\" or \"ACTIVE\")\n                        {\n                            items.Add(new TemplateCatalogItem(\n                                Name: name,\n                                Language: language,\n                                Body: body,\n                                PlaceholderCount: placeholders,\n                                HasImageHeader: hasImageHeader,\n                                Buttons: buttons,\n                                Status: status,\n                                Category: category,\n                                ExternalId: externalId,\n                                RawJson: raw\n                            ));\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        _log.LogWarning(ex, \"Pinnacle: failed to map a template item.\");\n                    }\n                }\n\n                // try to follow paging like Meta\n                nextUrl = parsed?.paging?.next?.ToString();\n                if (string.IsNullOrWhiteSpace(nextUrl))\n                    break;\n            }\n\n            return items;\n        }\n\n        public Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n            => Task.FromResult<TemplateCatalogItem?>(null); // not needed for sync path\n    }\n}\n\n\n//using xbytechat.api.WhatsAppSettings.Abstractions;\n//using xbytechat_api.WhatsAppSettings.Models;\n\n//namespace xbytechat.api.WhatsAppSettings.Providers\n//{\n//    public sealed class PinnacleTemplateCatalogProvider : ITemplateCatalogProvider\n//    {\n//        private readonly HttpClient _http;\n//        private readonly ILogger<PinnacleTemplateCatalogProvider> _log;\n\n//        public PinnacleTemplateCatalogProvider(HttpClient http, ILogger<PinnacleTemplateCatalogProvider> log)\n//        { _http = http; _log = log; }\n\n//        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n//        {\n//            // If your BSP supports listing:\n//            // var baseUrl = (s.ApiUrl ?? \"\").TrimEnd('/');\n//            // var url = $\"{baseUrl}/templates?limit=100\";\n//            // using var req = new HttpRequestMessage(HttpMethod.Get, url);\n//            // req.Headers.Add(\"x-api-key\", s.ApiKey);\n//            // var res = await _http.SendAsync(req, ct);\n//            // var json = await res.Content.ReadAsStringAsync(ct);\n//            // if (!res.IsSuccessStatusCode) return Array.Empty<TemplateCatalogItem>();\n//            // dynamic parsed = JsonConvert.DeserializeObject(json);\n//            // map to TemplateCatalogItem and return\n\n//            // If not supported (common): return empty to trigger UI fallback\n//            _log.LogInformation(\"Pinnacle does not expose template listing (returning empty).\");\n//            return Array.Empty<TemplateCatalogItem>();\n//        }\n\n//        public Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n//            => Task.FromResult<TemplateCatalogItem?>(null);\n//    }\n//}"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/ITemplatePreviewService.cs",
      "sha256": "a3a93cd8e29af752b16c49daadd82a6a419069bc5933177e663d030e47304f4e",
      "language": "csharp",
      "size": 306,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface ITemplatePreviewService\n    {\n        Task<TemplatePreviewResponseDto> PreviewAsync(Guid businessId, TemplatePreviewRequestDto request);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppPhoneNumberService.cs",
      "sha256": "7b5491dda93e984f323f6d6d8ab811da9981c2736d7e758a0446f65773961c97",
      "language": "csharp",
      "size": 1505,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.WhatsAppSettings.Services\n{\n    public interface IWhatsAppPhoneNumberService\n    {\n        // List all numbers for a business/provider\n        //Task<IReadOnlyList<WhatsAppPhoneNumber>> ListAsync(Guid businessId, string provider);\n        Task<IReadOnlyList<WhatsAppPhoneNumber>> ListAsync(Guid businessId, string provider, CancellationToken ct = default);\n\n        // Create or update a number (matched by BusinessId+provider+PhoneNumberId)\n        Task<WhatsAppPhoneNumber> UpsertAsync(\n            Guid businessId,\n            string provider,\n            string phoneNumberId,\n            string whatsAppBusinessNumber,\n            string? senderDisplayName,\n            bool? isActive = null,\n            bool? isDefault = null);\n\n        // Delete by entity Id (GUID)\n        Task<bool> DeleteAsync(Guid businessId, string provider, Guid id);\n\n        // Set one number as default (enforces “one default per (business, provider)”)\n        Task<bool> SetDefaultAsync(Guid businessId, string provider, Guid id);\n\n        // Find a specific number by PhoneNumberId\n        Task<WhatsAppPhoneNumber?> FindAsync(Guid businessId, string provider, string phoneNumberId);\n\n        // Get the default number for a provider (or null if not set)\n        Task<WhatsAppPhoneNumber?> GetDefaultAsync(Guid businessId, string provider);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppSenderService.cs",
      "sha256": "4a69978c8896455ff564833449e3acf06b231ce7fdc20164debb55af0375b8ca",
      "language": "csharp",
      "size": 516,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppSenderService\n    {\n       // Task<IReadOnlyList<WhatsAppSenderDto>> GetBusinessSendersAsync(Guid businessId);\n        Task<IReadOnlyList<WhatsAppSenderDto>> GetBusinessSendersAsync(Guid businessId, CancellationToken ct = default);\n        Task<(string Provider, string PhoneNumberId)?> ResolveSenderPairAsync(Guid businessId, string phoneNumberId, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppSettingsService.cs",
      "sha256": "28ea8752a30f3e0c0c9ae015df7d5b31986739355681be2024ccad0c1f50ee09",
      "language": "csharp",
      "size": 873,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppSettingsService\n    {\n        Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto);\n        Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId);\n        Task<bool> DeleteSettingsAsync(Guid businessId);\n        Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto);\n        Task<string?> GetSenderNumberAsync(Guid businessId);\n        Task<string> GetCallbackUrlAsync(Guid businessId, string appBaseUrl);\n        Task<IReadOnlyList<WhatsAppSettingEntity>> GetAllForBusinessAsync(Guid businessId);\n        Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAndProviderAsync(Guid businessId, string provider);\n      \n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppTemplateFetcherService.cs",
      "sha256": "b4b6d062f1e9436dac737fc7ed40b0c3f98f2e26bb353261eedf997e16f69583",
      "language": "csharp",
      "size": 844,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppTemplateFetcherService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId);\n        // 🔹 (NEW) Load all templates across all businesses (admin/debug mode)\n        Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync();\n        Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons);\n\n        Task<IReadOnlyList<TemplateMetaDto>> GetTemplatesMetaAsync(Guid businessId, string? provider = null);\n        Task<TemplateMetaDto?> GetTemplateMetaAsync(Guid businessId, string templateName, string? language = null, string? provider = null);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/TemplatePreviewService.cs",
      "sha256": "2d74ee2dc7451e831617f0fd4d1eb33c05a082ff505d7ccca8df44b66cf67ccd",
      "language": "csharp",
      "size": 7844,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public sealed class TemplatePreviewService : ITemplatePreviewService\n    {\n        private readonly IWhatsAppTemplateFetcherService _fetcher;\n        private readonly ILogger<TemplatePreviewService> _log;\n\n        public TemplatePreviewService(IWhatsAppTemplateFetcherService fetcher, ILogger<TemplatePreviewService> log)\n        {\n            _fetcher = fetcher;\n            _log = log;\n        }\n\n        public async Task<TemplatePreviewResponseDto> PreviewAsync(Guid businessId, TemplatePreviewRequestDto request)\n        {\n            var resp = new TemplatePreviewResponseDto\n            {\n                TemplateName = request.TemplateName,\n                Language = request.Language\n            };\n\n            // 1) Fetch meta (from our catalog)\n            var meta = await _fetcher.GetTemplateMetaAsync(\n                businessId,\n                request.TemplateName,\n                language: request.Language,\n                provider: request.Provider\n            );\n\n            if (meta == null)\n            {\n                resp.FoundTemplate = false;\n                resp.Errors.Add(\"Template not found for this business/provider/language.\");\n                return resp;\n            }\n\n            resp.FoundTemplate = true;\n            resp.Language = meta.Language;\n            resp.HasHeaderMedia = meta.HasHeaderMedia;\n            resp.HeaderType = meta.HeaderType ?? \"\";\n\n            // 2) Placeholder validation\n            var required = Math.Max(0, meta.BodyPlaceholders?.Count ?? 0);\n            var provided = request.TemplateParameters?.Count ?? 0;\n\n            resp.RequiredPlaceholderCount = required;\n            resp.ProvidedPlaceholderCount = provided;\n\n            if (provided < required)\n            {\n                for (int i = provided + 1; i <= required; i++) resp.MissingPlaceholderIndices.Add(i);\n                resp.Errors.Add($\"Missing {required - provided} body parameter(s).\");\n            }\n            else if (provided > required)\n            {\n                resp.Warnings.Add($\"Ignored {provided - required} extra body parameter(s).\");\n            }\n\n            // 3) Build provider-like components preview\n            var comps = new List<object>();\n\n            // Header (image) preview only when template supports it and caller provided a URL\n            if (meta.HasHeaderMedia && !string.IsNullOrWhiteSpace(request.HeaderImageUrl))\n            {\n                comps.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                        new { type = \"image\", image = new { link = request.HeaderImageUrl } }\n                    }\n                });\n            }\n\n            // Body parameters: trim/pad to 'required'\n            if (required > 0)\n            {\n                var src = (request.TemplateParameters ?? new List<string>()).Select(s => s ?? string.Empty).ToList();\n                if (src.Count > required) src = src.Take(required).ToList();\n                while (src.Count < required) src.Add(string.Empty);\n\n                var bodyParams = src.Select(p => (object)new { type = \"text\", text = p }).ToArray();\n                comps.Add(new { type = \"body\", parameters = bodyParams });\n            }\n\n            // 4) Buttons validation (only dynamic URL buttons require parameters in payload)\n            // Template order is authoritative. We'll check at most 3.\n            var inputByPos = (request.Buttons ?? new List<PreviewButtonInputDto>())\n                             .Where(b => b.Position >= 1 && b.Position <= 3)\n                             .ToDictionary(b => b.Position, b => b);\n\n            var templateButtons = (meta.Buttons ?? new List<TemplateButtonMeta>())\n                                  .OrderBy(b => b.Order)\n                                  .Take(3)\n                                  .ToList();\n\n            for (int i = 0; i < templateButtons.Count; i++)\n            {\n                var tb = templateButtons[i];\n                var subType = (tb.Type ?? tb.Text ?? \"\").ToUpperInvariant(); // tb.Type from Step 2.1 mapper; sub-type is treated as URL family\n                var paramPattern = tb.Value ?? \"\"; // came from ButtonsJson ParameterValue (may contain \"{{1}}\")\n                var isUrlFamily = (tb.Type ?? \"\").Equals(\"URL\", StringComparison.OrdinalIgnoreCase);\n                var isDynamic = isUrlFamily && paramPattern.Contains(\"{{\");\n\n                if (!isUrlFamily || !isDynamic)\n                {\n                    // For static buttons (or non-URL), we preview a button component without parameters\n                    comps.Add(new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = \"url\",\n                        [\"index\"] = i.ToString()\n                    });\n                    continue;\n                }\n\n                // Dynamic URL → expect input at this position\n                if (!inputByPos.TryGetValue(i + 1, out var userBtn) || string.IsNullOrWhiteSpace(userBtn.Value))\n                {\n                    resp.Errors.Add($\"Dynamic URL required for button position {i + 1} but no value was provided.\");\n                    continue;\n                }\n\n                var value = userBtn.Value.Trim();\n\n                // Accept absolute http/https and tel/wa deep links in preview\n                var ok = LooksValidDestination(value);\n                if (!ok)\n                {\n                    resp.Errors.Add($\"Button {i + 1} destination must be absolute http/https or tel/wa link.\");\n                    continue;\n                }\n\n                // NOTE: In live send we tokenise tracked URLs. For preview we show the **value** directly.\n                var parameters = new[] { new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = value } };\n\n                comps.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = \"url\",\n                    [\"index\"] = i.ToString(),\n                    [\"parameters\"] = parameters\n                });\n            }\n\n            resp.ProviderComponentsPreview = comps;\n            return resp;\n        }\n\n        private static bool LooksValidDestination(string input)\n        {\n            if (string.IsNullOrWhiteSpace(input)) return false;\n            var s = input.Trim();\n            if (s.StartsWith(\"tel:\", StringComparison.OrdinalIgnoreCase)) return true;\n            if (s.StartsWith(\"wa:\", StringComparison.OrdinalIgnoreCase)) return true;\n            if (s.StartsWith(\"https://wa.me/\", StringComparison.OrdinalIgnoreCase)) return true;\n\n            if (Uri.TryCreate(s, UriKind.Absolute, out var uri))\n                return uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase)\n                    || uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase);\n\n            return false;\n        }\n    }\n\n    // Mirror Step 2.1 mapped types to avoid namespace churn\n    //public sealed class TemplateButtonMeta\n    //{\n    //    public string Type { get; set; } = \"\";     // \"URL\", etc.\n    //    public string Text { get; set; } = \"\";\n    //    public string? Value { get; set; }         // ParameterValue from mapper (may contain {{1}})\n    //    public int Order { get; set; }             // 0..2\n    //}\n\n    //public sealed class PlaceholderSlot\n    //{\n    //    public int Index { get; set; }\n    //    public string? Label { get; set; }\n    //    public string? Example { get; set; }\n    //}\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/TemplateSyncService.cs",
      "sha256": "248f793d0a6a543a07fa3be46e06e420bf4d386300056a71e89f732da1f26f6e",
      "language": "csharp",
      "size": 14143,
      "content": "// 📄 Features/TemplateCatalog/Services/TemplateSyncService.cs\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat.api.WhatsAppSettings.Providers;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.AuthModule.Models;\n\npublic record TemplateSyncResult(int Added, int Updated, int Skipped, DateTime SyncedAt);\n\npublic interface ITemplateSyncService\n{\n    /// <summary>\n    /// Sync templates for a business. When force=false, a 12h TTL short-circuit is applied.\n    /// Use force=true for the \"Sync Template\" button to bypass TTL.\n    /// </summary>\n    Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default);\n}\n\npublic sealed class TemplateSyncService : ITemplateSyncService\n{\n    private readonly AppDbContext _db;\n    private readonly MetaTemplateCatalogProvider _meta;\n    private readonly PinnacleTemplateCatalogProvider _pinnacle;\n    private readonly ILogger<TemplateSyncService> _log;\n\n    // Background/automatic runs are TTL-gated; manual button should call with force=true.\n    private static readonly TimeSpan TTL = TimeSpan.FromHours(12);\n\n    public TemplateSyncService(\n        AppDbContext db,\n        MetaTemplateCatalogProvider meta,\n        PinnacleTemplateCatalogProvider pinnacle,\n        ILogger<TemplateSyncService> log)\n    {\n        _db = db; _meta = meta; _pinnacle = pinnacle; _log = log;\n    }\n\n    public async Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default)\n    {\n        var setting = await _db.WhatsAppSettings\n            .AsNoTracking()\n            .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive, ct)\n            ?? throw new InvalidOperationException(\"Active WhatsApp settings not found.\");\n\n        var now = DateTime.UtcNow;\n\n        // ----- TTL short-circuit (only when NOT forced) -----\n        if (!force)\n        {\n            var recent = await _db.WhatsAppTemplates\n                .AsNoTracking()\n                .Where(t => t.BusinessId == businessId)\n                .OrderByDescending(t => t.LastSyncedAt)\n                .Select(t => t.LastSyncedAt)\n                .FirstOrDefaultAsync(ct);\n\n            if (recent != default && now - recent < TTL)\n            {\n                _log.LogInformation(\"⏭️ Skipping sync for {BusinessId}; TTL not expired.\", businessId);\n                return new TemplateSyncResult(0, 0, 0, recent);\n            }\n        }\n\n        // ----- Resolve provider & fetch all templates (ensure your provider LIST paginates) -----\n        var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n\n        IReadOnlyList<TemplateCatalogItem> incoming = providerKey switch\n        {\n            \"meta_cloud\" => await _meta.ListAsync(setting, ct),   // should page through all results\n            \"pinnacle\" => await _pinnacle.ListAsync(setting, ct),\n            _ => Array.Empty<TemplateCatalogItem>()\n        };\n\n        // Fast exit on empty provider response (don’t archive everything on a transient provider issue)\n        if (incoming == null) incoming = Array.Empty<TemplateCatalogItem>();\n\n        // ----- Load existing once (fast) -----\n        var existing = await _db.WhatsAppTemplates\n            .Where(t => t.BusinessId == businessId && t.Provider == providerKey)\n            .ToListAsync(ct);\n\n        // Index by ExternalId when present; fallback key = $\"{Name}::{Language}\"\n        var byExtId = existing\n            .Where(e => !string.IsNullOrWhiteSpace(e.ExternalId))\n            .ToDictionary(e => e.ExternalId!, e => e);\n\n        static string NLKey(string name, string? lang) => $\"{name}::{(lang ?? \"\").Trim().ToLowerInvariant()}\";\n\n        var byNameLang = existing.ToDictionary(\n            e => NLKey(e.Name, e.Language),\n            e => e,\n            StringComparer.Ordinal);\n\n        int added = 0, updated = 0, unchanged = 0;\n\n        // Track “seen” to support optional archival\n        var seenExtIds = new HashSet<string>(StringComparer.Ordinal);\n        var seenNLKeys = new HashSet<string>(StringComparer.Ordinal);\n\n        foreach (var it in incoming)\n        {\n            ct.ThrowIfCancellationRequested();\n\n            var extId = it.ExternalId?.Trim();\n            var nlKey = NLKey(it.Name, it.Language);\n\n            seenNLKeys.Add(nlKey);\n            if (!string.IsNullOrWhiteSpace(extId)) seenExtIds.Add(extId);\n\n            var buttonsJson = JsonConvert.SerializeObject(it.Buttons);\n\n            WhatsAppTemplate? row = null;\n\n            // Prefer ExternalId match\n            if (!string.IsNullOrWhiteSpace(extId) && byExtId.TryGetValue(extId, out var foundByExt))\n            {\n                row = foundByExt;\n            }\n            else if (byNameLang.TryGetValue(nlKey, out var foundByNL))\n            {\n                row = foundByNL;\n\n                // If provider now returns an ExternalId, attach it so future runs match by ExternalId\n                if (!string.IsNullOrWhiteSpace(extId) && string.IsNullOrWhiteSpace(row.ExternalId))\n                {\n                    row.ExternalId = extId;\n                    updated++;\n                }\n            }\n\n            if (row == null)\n            {\n                // INSERT\n                var newRow = new WhatsAppTemplate\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Provider = providerKey,\n                    ExternalId = extId,\n                    Name = it.Name,\n                    Language = it.Language,\n                    Status = string.IsNullOrWhiteSpace(it.Status) ? \"APPROVED\" : it.Status,\n                    Category = it.Category,\n                    Body = it.Body ?? \"\",\n                    HasImageHeader = it.HasImageHeader,\n                    PlaceholderCount = it.PlaceholderCount,\n                    ButtonsJson = buttonsJson,\n                    RawJson = it.RawJson,\n                    IsActive = true,\n                    CreatedAt = now,\n                    UpdatedAt = now,\n                    LastSyncedAt = now\n                };\n\n                _db.WhatsAppTemplates.Add(newRow);\n                added++;\n\n                // Update indexes so subsequent items in this batch see it\n                if (!string.IsNullOrWhiteSpace(extId)) byExtId[extId] = newRow;\n                byNameLang[nlKey] = newRow;\n            }\n            else\n            {\n                // UPDATE (only if something important changed)\n                bool changed = false;\n\n                string? newStatus = string.IsNullOrWhiteSpace(it.Status) ? row.Status : it.Status;\n                string newBody = it.Body ?? row.Body ?? \"\";\n                string newButtonsJson = buttonsJson ?? row.ButtonsJson ?? \"\";\n\n                if (!string.Equals(row.Status, newStatus, StringComparison.Ordinal)) { row.Status = newStatus; changed = true; }\n                if (!string.Equals(row.Category, it.Category, StringComparison.Ordinal)) { row.Category = it.Category; changed = true; }\n                if (!string.Equals(row.Body ?? \"\", newBody, StringComparison.Ordinal)) { row.Body = newBody; changed = true; }\n                if (row.HasImageHeader != it.HasImageHeader) { row.HasImageHeader = it.HasImageHeader; changed = true; }\n                if (row.PlaceholderCount != it.PlaceholderCount) { row.PlaceholderCount = it.PlaceholderCount; changed = true; }\n                if (!string.Equals(row.ButtonsJson ?? \"\", newButtonsJson, StringComparison.Ordinal)) { row.ButtonsJson = newButtonsJson; changed = true; }\n                if (!string.IsNullOrWhiteSpace(it.RawJson) && !string.Equals(row.RawJson, it.RawJson, StringComparison.Ordinal))\n                { row.RawJson = it.RawJson; changed = true; }\n\n                // Always mark active + bump sync timestamp; bump UpdatedAt only when changed\n                row.IsActive = true;\n                row.LastSyncedAt = now;\n                if (changed) { row.UpdatedAt = now; updated++; } else { unchanged++; }\n            }\n        }\n\n        // ----- Optional: archive templates not returned this run (safe cleanup) -----\n        // Only do this if provider returned at least 1 item (avoid mass-archive on provider outage)\n        if (incoming.Count > 0)\n        {\n            foreach (var e in existing)\n            {\n                // Match by ExternalId when present, else by Name+Language\n                bool stillThere =\n                    (!string.IsNullOrWhiteSpace(e.ExternalId) && seenExtIds.Contains(e.ExternalId)) ||\n                    seenNLKeys.Contains(NLKey(e.Name, e.Language));\n\n                if (!stillThere && e.IsActive)\n                {\n                    e.IsActive = false;\n                    e.LastSyncedAt = now;\n                    e.UpdatedAt = now;\n                    updated++; // count as an update\n                }\n            }\n        }\n\n        await _db.SaveChangesAsync(ct);\n\n        return new TemplateSyncResult(added, updated, unchanged, now);\n    }\n}\n\n\n//// 📄 Features/TemplateCatalog/Services/TemplateSyncService.cs\n//using Microsoft.EntityFrameworkCore;\n//using Newtonsoft.Json;\n//using xbytechat.api.AuthModule.Models;\n//using xbytechat.api;\n//using xbytechat.api.WhatsAppSettings.Abstractions;\n//using xbytechat.api.WhatsAppSettings.Providers;\n//using xbytechat_api.WhatsAppSettings.Models;\n\n//public record TemplateSyncResult(int Added, int Updated, int Skipped, DateTime SyncedAt);\n\n//public interface ITemplateSyncService\n//{\n//    Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default);\n//}\n\n//public sealed class TemplateSyncService : ITemplateSyncService\n//{\n//    private readonly AppDbContext _db;\n//    private readonly MetaTemplateCatalogProvider _meta;\n//    private readonly PinnacleTemplateCatalogProvider _pinnacle;\n//    private readonly ILogger<TemplateSyncService> _log;\n\n//    private static readonly TimeSpan TTL = TimeSpan.FromHours(12);\n\n//    public TemplateSyncService(AppDbContext db,\n//        MetaTemplateCatalogProvider meta,\n//        PinnacleTemplateCatalogProvider pinnacle,\n//        ILogger<TemplateSyncService> log)\n//    { _db = db; _meta = meta; _pinnacle = pinnacle; _log = log; }\n\n//    public async Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default)\n//    {\n//        var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive, ct)\n//                      ?? throw new InvalidOperationException(\"Active WhatsApp settings not found.\");\n\n//        var now = DateTime.UtcNow;\n\n//        // TTL short-circuit\n//        if (!force)\n//        {\n//            var recent = await _db.WhatsAppTemplates\n//                .Where(t => t.BusinessId == businessId)\n//                .OrderByDescending(t => t.LastSyncedAt)\n//                .Select(t => t.LastSyncedAt)\n//                .FirstOrDefaultAsync(ct);\n\n//            if (recent != default && now - recent < TTL)\n//            {\n//                _log.LogInformation(\"⏭️ Skipping sync for {BusinessId}; TTL not expired.\", businessId);\n//                return new TemplateSyncResult(0, 0, 0, recent);\n//            }\n//        }\n\n//        var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n//        IReadOnlyList<TemplateCatalogItem> incoming = providerKey switch\n//        {\n//            \"meta_cloud\" => await _meta.ListAsync(setting, ct),\n//            \"pinnacle\" => await _pinnacle.ListAsync(setting, ct),\n//            _ => Array.Empty<TemplateCatalogItem>()\n//        };\n\n//        int added = 0, updated = 0, skipped = 0;\n\n//        foreach (var it in incoming)\n//        {\n//            var existing = await _db.WhatsAppTemplates.FirstOrDefaultAsync(t =>\n//                t.BusinessId == businessId &&\n//                t.Provider == providerKey &&\n//                t.Name == it.Name &&\n//                t.Language == it.Language, ct);\n\n//            var buttonsJson = JsonConvert.SerializeObject(it.Buttons);\n\n//            if (existing == null)\n//            {\n//                await _db.WhatsAppTemplates.AddAsync(new WhatsAppTemplate\n//                {\n//                    BusinessId = businessId,\n//                    Provider = providerKey,\n//                    ExternalId = it.ExternalId,\n//                    Name = it.Name,\n//                    Language = it.Language,\n//                    Status = string.IsNullOrWhiteSpace(it.Status) ? \"APPROVED\" : it.Status,\n//                    Category = it.Category,\n//                    Body = it.Body ?? \"\",\n//                    HasImageHeader = it.HasImageHeader,\n//                    PlaceholderCount = it.PlaceholderCount,\n//                    ButtonsJson = buttonsJson,\n//                    RawJson = it.RawJson,\n//                    LastSyncedAt = now,\n//                    CreatedAt = now,\n//                    UpdatedAt = now,\n//                    IsActive = true\n//                }, ct);\n//                added++;\n//            }\n//            else\n//            {\n//                existing.ExternalId = it.ExternalId ?? existing.ExternalId;\n//                existing.Status = string.IsNullOrWhiteSpace(it.Status) ? existing.Status : it.Status;\n//                existing.Category = it.Category ?? existing.Category;\n//                existing.Body = it.Body ?? existing.Body;\n//                existing.HasImageHeader = it.HasImageHeader;\n//                existing.PlaceholderCount = it.PlaceholderCount;\n//                existing.ButtonsJson = buttonsJson;\n//                existing.RawJson = it.RawJson ?? existing.RawJson;\n//                existing.LastSyncedAt = now;\n//                existing.UpdatedAt = now;\n//                existing.IsActive = true;\n//                updated++;\n//            }\n//        }\n\n//        await _db.SaveChangesAsync(ct);\n\n//        return new TemplateSyncResult(added, updated, skipped, now);\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/TemplateSyncWorker.cs",
      "sha256": "70427556d8ed5f1c68348a414a166b4bcdd07911b8f9f8d63bb05f3897d30a04",
      "language": "csharp",
      "size": 8915,
      "content": "using System;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api; // AppDbContext\n\nnamespace xbytechat.api.WhatsAppSettings.Services\n{\n    /// <summary>\n    /// Periodically refreshes WhatsApp template catalogs for all businesses\n    /// that have an active WhatsAppSettings row. Uses ITemplateSyncService\n    /// which is TTL-aware to avoid unnecessary work.\n    /// </summary>\n    public sealed class TemplateSyncWorker : BackgroundService\n    {\n        private readonly IServiceProvider _sp;\n        private readonly ILogger<TemplateSyncWorker> _log;\n        private readonly TimeSpan _interval;\n        private readonly int _maxParallel;\n        private readonly int _jitterSeconds;\n\n        public TemplateSyncWorker(IServiceProvider sp, ILogger<TemplateSyncWorker> log, IConfiguration cfg)\n        {\n            _sp = sp;\n            _log = log;\n\n            // Defaults chosen to be light on the system.\n            // appsettings.json example:\n            // \"WhatsApp\": {\n            //   \"Templates\": {\n            //     \"SyncIntervalMinutes\": 360,\n            //     \"MaxParallel\": 1,\n            //     \"JitterSeconds\": 60\n            //   }\n            // }\n            var minutes = Math.Max(15, cfg.GetValue<int?>(\"WhatsApp:Templates:SyncIntervalMinutes\") ?? 360);\n            _interval = TimeSpan.FromMinutes(minutes);\n\n            _maxParallel = Math.Clamp(cfg.GetValue<int?>(\"WhatsApp:Templates:MaxParallel\") ?? 1, 1, 8);\n            _jitterSeconds = Math.Clamp(cfg.GetValue<int?>(\"WhatsApp:Templates:JitterSeconds\") ?? 60, 0, 300);\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            // small delay after startup\n            await Task.Delay(TimeSpan.FromSeconds(10), stoppingToken);\n\n            var rnd = new Random();\n\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                var sweepStart = DateTime.UtcNow;\n                var sw = Stopwatch.StartNew();\n                int processed = 0;\n\n                try\n                {\n                    using var scope = _sp.CreateScope();\n                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    // Get active business IDs once per sweep\n                    var bizIds = await db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(s => s.IsActive)\n                        .Select(s => s.BusinessId)\n                        .Distinct()\n                        .ToListAsync(stoppingToken);\n\n                    if (bizIds.Count == 0)\n                    {\n                        _log.LogInformation(\"TemplateSyncWorker: no active WhatsApp settings found.\");\n                    }\n                    else\n                    {\n                        var sem = new SemaphoreSlim(_maxParallel);\n                        var tasks = bizIds.Select(async biz =>\n                        {\n                            await sem.WaitAsync(stoppingToken);\n                            try\n                            {\n                                // New scope per business to keep DbContexts short-lived\n                                using var inner = _sp.CreateScope();\n                                var sync = inner.ServiceProvider.GetRequiredService<ITemplateSyncService>();\n\n                                // TTL-aware; manual button should call force:true instead\n                                var res = await sync.SyncBusinessTemplatesAsync(biz, force: false, ct: stoppingToken);\n                                Interlocked.Increment(ref processed);\n\n                                _log.LogInformation(\n                                    \"TemplateSyncWorker: biz={Biz} added={A} updated={U} skipped={S} syncedAt={At}\",\n                                    biz, res.Added, res.Updated, res.Skipped, res.SyncedAt);\n                            }\n                            catch (OperationCanceledException) { /* shutting down */ }\n                            catch (Exception exBiz)\n                            {\n                                _log.LogWarning(exBiz, \"TemplateSyncWorker: sync failed for biz {Biz}\", biz);\n                            }\n                            finally\n                            {\n                                sem.Release();\n                            }\n                        });\n\n                        await Task.WhenAll(tasks);\n                    }\n                }\n                catch (OperationCanceledException) { /* shutting down */ }\n                catch (Exception ex)\n                {\n                    _log.LogWarning(ex, \"TemplateSyncWorker sweep failed\");\n                }\n                finally\n                {\n                    sw.Stop();\n                    _log.LogInformation(\"TemplateSyncWorker: sweep finished in {ElapsedMs} ms; processed={Processed}; next run ~{NextRun}\",\n                        sw.ElapsedMilliseconds, processed, sweepStart.Add(_interval));\n                }\n\n                // Add small jitter to avoid multiple instances syncing at the exact same time\n                var jitter = _jitterSeconds > 0 ? TimeSpan.FromSeconds(rnd.Next(0, _jitterSeconds + 1)) : TimeSpan.Zero;\n                var delay = _interval + jitter;\n\n                await Task.Delay(delay, stoppingToken);\n            }\n        }\n    }\n}\n\n\n//using System;\n//using System.Linq;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.Configuration;\n//using Microsoft.Extensions.DependencyInjection;\n//using Microsoft.Extensions.Hosting;\n//using Microsoft.Extensions.Logging;\n//using xbytechat.api; // AppDbContext\n\n//namespace xbytechat.api.WhatsAppSettings.Services\n//{\n//    /// <summary>\n//    /// Periodically refreshes WhatsApp template catalogs for all businesses\n//    /// that have an active WhatsAppSettings row. Uses your existing\n//    /// ITemplateSyncService (TTL-aware) so this is safe to run frequently.\n//    /// </summary>\n//    public sealed class TemplateSyncWorker : BackgroundService\n//    {\n//        private readonly IServiceProvider _sp;\n//        private readonly ILogger<TemplateSyncWorker> _log;\n//        private readonly TimeSpan _interval;\n\n//        public TemplateSyncWorker(IServiceProvider sp, ILogger<TemplateSyncWorker> log, IConfiguration cfg)\n//        {\n//            _sp = sp;\n//            _log = log;\n\n//            // Default: every 6 hours; override in appsettings:\n//            // \"WhatsApp\": { \"Templates\": { \"SyncIntervalMinutes\": 360 } }\n//            var minutes = Math.Max(15, cfg.GetValue<int?>(\"WhatsApp:Templates:SyncIntervalMinutes\") ?? 360);\n//            _interval = TimeSpan.FromMinutes(minutes);\n//        }\n\n//        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n//        {\n//            // small delay after startup\n//            await Task.Delay(TimeSpan.FromSeconds(10), stoppingToken);\n\n//            while (!stoppingToken.IsCancellationRequested)\n//            {\n//                try\n//                {\n//                    using var scope = _sp.CreateScope();\n//                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n//                    var sync = scope.ServiceProvider.GetRequiredService<ITemplateSyncService>();\n\n//                    var bizIds = await db.WhatsAppSettings\n//                        .AsNoTracking()\n//                        .Where(s => s.IsActive)\n//                        .Select(s => s.BusinessId)\n//                        .Distinct()\n//                        .ToListAsync(stoppingToken);\n\n//                    foreach (var biz in bizIds)\n//                    {\n//                        try\n//                        {\n//                            var res = await sync.SyncBusinessTemplatesAsync(biz, force: false, ct: stoppingToken);\n//                            _log.LogInformation(\"TemplateSyncWorker: biz={Biz} added={A} updated={U} syncedAt={At}\",\n//                                biz, res.Added, res.Updated, res.SyncedAt);\n//                        }\n//                        catch (Exception exBiz)\n//                        {\n//                            _log.LogWarning(exBiz, \"TemplateSyncWorker: sync failed for biz {Biz}\", biz);\n//                        }\n//                    }\n//                }\n//                catch (Exception ex)\n//                {\n//                    _log.LogWarning(ex, \"TemplateSyncWorker sweep failed\");\n//                }\n\n//                await Task.Delay(_interval, stoppingToken);\n//            }\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppPhoneNumberService.cs",
      "sha256": "330f37f204375e474f630e5d14b23708867f7504bfcacadf506ee263a8a47a8e",
      "language": "csharp",
      "size": 14966,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.WhatsAppSettings.Models;\nusing xbytechat.api.Features.WhatsAppSettings.Services;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.WhatsAppSettings.Services\n{\n    public sealed class WhatsAppPhoneNumberService : IWhatsAppPhoneNumberService\n    {\n        private readonly AppDbContext _db;\n\n        public WhatsAppPhoneNumberService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        //public async Task<IReadOnlyList<WhatsAppPhoneNumber>> ListAsync(Guid businessId, string provider)\n        //{\n        //    var prov = provider?.Trim() ?? string.Empty;\n        //    return await _db.WhatsAppPhoneNumbers\n        //        .Where(x => x.BusinessId == businessId && x.Provider.ToLower() == prov.ToLower())\n        //        .OrderByDescending(x => x.IsDefault)\n        //        .ThenBy(x => x.WhatsAppBusinessNumber)\n        //        .ToListAsync();\n        //}\n        public async Task<IReadOnlyList<WhatsAppPhoneNumber>> ListAsync(\n    Guid businessId,\n    string provider,\n    CancellationToken ct = default)\n        {\n            if (string.IsNullOrWhiteSpace(provider))\n                throw new ArgumentException(\"Provider is required.\", nameof(provider));\n\n            // Enforce your uppercase-only contract (no normalization here)\n            if (provider is not \"PINNACLE\" and not \"META_CLOUD\")\n                throw new ArgumentOutOfRangeException(nameof(provider),\n                    \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n\n            var list = await _db.WhatsAppPhoneNumbers\n                .AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.Provider == provider) // exact, case-sensitive\n                .OrderByDescending(x => x.IsDefault)\n                .ThenBy(x => x.WhatsAppBusinessNumber)\n                .ToListAsync(ct);\n\n            return list; // List<T> implements IReadOnlyList<T>\n        }\n\n        private static string NormalizeProvider(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return \"Pinnacle\";\n            var s = raw.Trim();\n            if (string.Equals(s, \"Pinnacle\", StringComparison.OrdinalIgnoreCase)) return \"Pinnacle\";\n            if (string.Equals(s, \"Meta_cloud\", StringComparison.OrdinalIgnoreCase) ||\n                string.Equals(s, \"meta_cloud\", StringComparison.OrdinalIgnoreCase) ||\n                string.Equals(s, \"meta\", StringComparison.OrdinalIgnoreCase))\n                return \"Meta_cloud\";\n            return s;\n        }\n\n\n\n        //public async Task<WhatsAppPhoneNumber> UpsertAsync(\n        //    Guid businessId,\n        //    string provider,\n        //    string phoneNumberId,\n        //    string whatsAppBusinessNumber,\n        //    string? senderDisplayName,\n        //    bool? isActive = null,\n        //    bool? isDefault = null)\n        //    {\n        //        if (string.IsNullOrWhiteSpace(provider)) throw new ArgumentException(\"provider is required\");\n        //        if (string.IsNullOrWhiteSpace(phoneNumberId)) throw new ArgumentException(\"phoneNumberId is required\");\n        //        if (string.IsNullOrWhiteSpace(whatsAppBusinessNumber)) throw new ArgumentException(\"whatsAppBusinessNumber is required\");\n\n        //        var prov = NormalizeProvider(provider);\n        //        var provLc = prov.ToLowerInvariant();\n        //        var now = DateTime.UtcNow;\n\n        //        // DEBUG LOG (temporary): see what we’re matching\n        //        Console.WriteLine($\"[Upsert] biz={businessId} provider={prov}\");\n\n        //        // 1) Case/whitespace-insensitive match for settings\n        //        var setting = await _db.WhatsAppSettings\n        //            .FirstOrDefaultAsync(s =>\n        //                s.BusinessId == businessId &&\n        //                s.Provider.ToLower() == provLc);        // <= robust match\n\n        //        // Optional extra safety: if still null, try a trimmed “like” query\n        //        if (setting == null)\n        //        {\n        //            setting = await _db.WhatsAppSettings\n        //                .FromSqlRaw(\n        //                    @\"select * from \"\"WhatsAppSettings\"\"\n        //                  where \"\"BusinessId\"\" = {0}\n        //                    and lower(trim(\"\"Provider\"\")) = {1}\", businessId, provLc)\n        //                .AsNoTracking()\n        //                .FirstOrDefaultAsync();\n        //            if (setting != null)\n        //            {\n        //                // reattach tracked entity\n        //                setting = await _db.WhatsAppSettings\n        //                    .FirstAsync(s => s.Id == setting.Id);\n        //            }\n        //        }\n\n        //        if (setting == null)\n        //        {\n        //            // STUB: satisfy NOT NULLs (ApiUrl was failing before)\n        //            setting = new WhatsAppSettingEntity\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                Provider = prov,\n        //                ApiKey = string.Empty,\n        //                ApiUrl = string.Empty,                 // <-- important if column is NOT NULL\n        //                IsActive = true,\n        //                CreatedAt = now\n        //            };\n        //            _db.WhatsAppSettings.Add(setting);\n        //            Console.WriteLine($\"[Upsert] created stub settings for biz={businessId} provider={prov}\");\n        //        }\n\n        //        // 2) Upsert the number (same robust provider compare)\n        //        var entity = await _db.WhatsAppPhoneNumbers\n        //            .FirstOrDefaultAsync(x =>\n        //                x.BusinessId == businessId &&\n        //                x.Provider.ToLower() == provLc &&\n        //                x.PhoneNumberId == phoneNumberId);\n\n        //        if (entity == null)\n        //        {\n        //            entity = new WhatsAppPhoneNumber\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                Provider = prov,\n        //                PhoneNumberId = phoneNumberId,\n        //                WhatsAppBusinessNumber = whatsAppBusinessNumber,\n        //                SenderDisplayName = senderDisplayName,\n        //                IsActive = isActive ?? true,\n        //                IsDefault = isDefault ?? false,\n        //                CreatedAt = now\n        //            };\n        //            _db.WhatsAppPhoneNumbers.Add(entity);\n        //        }\n        //        else\n        //        {\n        //            entity.WhatsAppBusinessNumber = whatsAppBusinessNumber;\n        //            entity.SenderDisplayName = senderDisplayName;\n        //            if (isActive.HasValue) entity.IsActive = isActive.Value;\n        //            if (isDefault.HasValue) entity.IsDefault = isDefault.Value;\n        //            entity.UpdatedAt = now;\n        //        }\n\n        //        var setDefault = (isDefault == true) || entity.IsDefault;\n\n        //        await using var tx = await _db.Database.BeginTransactionAsync();\n        //        try\n        //        {\n        //            await _db.SaveChangesAsync();\n\n        //            if (setDefault)\n        //            {\n        //                await _db.WhatsAppPhoneNumbers\n        //                    .Where(x => x.BusinessId == businessId &&\n        //                                x.Provider.ToLower() == provLc &&\n        //                                x.Id != entity.Id)\n        //                    .ExecuteUpdateAsync(s => s.SetProperty(p => p.IsDefault, false));\n\n        //                // Mirror legacy columns\n        //                setting.PhoneNumberId = entity.PhoneNumberId;\n        //                setting.WhatsAppBusinessNumber = entity.WhatsAppBusinessNumber;\n        //                setting.UpdatedAt = now;\n        //                await _db.SaveChangesAsync();\n        //            }\n\n        //            await tx.CommitAsync();\n        //        }\n        //        catch (DbUpdateException ex)\n        //        {\n        //            await tx.RollbackAsync();\n        //            var root = ex.InnerException?.Message ?? ex.Message;\n        //            throw new InvalidOperationException($\"Failed to save WhatsApp number: {root}\", ex);\n        //        }\n\n        //        return entity;\n        //    }\n\n        public async Task<WhatsAppPhoneNumber> UpsertAsync(\n            Guid businessId, string provider, string phoneNumberId, string whatsAppBusinessNumber,\n            string? senderDisplayName, bool? isActive = null, bool? isDefault = null)\n        {\n            if (string.IsNullOrWhiteSpace(provider)) throw new ArgumentException(\"provider is required\");\n            if (string.IsNullOrWhiteSpace(phoneNumberId)) throw new ArgumentException(\"phoneNumberId is required\");\n            if (string.IsNullOrWhiteSpace(whatsAppBusinessNumber)) throw new ArgumentException(\"whatsAppBusinessNumber is required\");\n\n            var now = DateTime.UtcNow;\n\n            await using var tx = await _db.Database.BeginTransactionAsync();\n\n            // 1) Ensure parent exists (EXACT match)\n            var setting = await _db.WhatsAppSettings\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.Provider == provider);\n\n            if (setting == null)\n            {\n                setting = new WhatsAppSettingEntity\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Provider = provider,           // 'META_CLOUD' | 'PINNACLE'\n                    ApiUrl = string.Empty,         // keep NOT NULL-safe\n                    ApiKey = string.Empty,\n                    IsActive = true,\n                    CreatedAt = now\n                };\n                _db.WhatsAppSettings.Add(setting);\n                await _db.SaveChangesAsync();     // FLUSH parent BEFORE child (prevents 23503)\n            }\n\n            var providerForChild = setting.Provider; // ensure FK matches exactly\n\n            // 2) Upsert the number\n            var entity = await _db.WhatsAppPhoneNumbers.FirstOrDefaultAsync(x =>\n                x.BusinessId == businessId && x.Provider == providerForChild && x.PhoneNumberId == phoneNumberId);\n\n            if (entity == null)\n            {\n                entity = new WhatsAppPhoneNumber\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Provider = providerForChild,\n                    PhoneNumberId = phoneNumberId,\n                    WhatsAppBusinessNumber = whatsAppBusinessNumber,\n                    SenderDisplayName = senderDisplayName,\n                    IsActive = isActive ?? true,\n                    IsDefault = isDefault ?? false,\n                    CreatedAt = now\n                };\n                _db.WhatsAppPhoneNumbers.Add(entity);\n            }\n            else\n            {\n                entity.WhatsAppBusinessNumber = whatsAppBusinessNumber;\n                entity.SenderDisplayName = senderDisplayName;\n                if (isActive.HasValue) entity.IsActive = isActive.Value;\n                if (isDefault.HasValue) entity.IsDefault = isDefault.Value;\n                entity.UpdatedAt = now;\n            }\n\n            await _db.SaveChangesAsync(); // child saved\n\n            // 3) Default + mirror\n            if (isDefault == true || entity.IsDefault)\n            {\n                await _db.WhatsAppPhoneNumbers\n                    .Where(x => x.BusinessId == businessId && x.Provider == providerForChild && x.Id != entity.Id)\n                    .ExecuteUpdateAsync(s => s.SetProperty(p => p.IsDefault, false));\n\n                setting.PhoneNumberId = entity.PhoneNumberId;\n                setting.WhatsAppBusinessNumber = entity.WhatsAppBusinessNumber;\n                setting.UpdatedAt = now;\n                await _db.SaveChangesAsync();\n            }\n\n            await tx.CommitAsync();\n            return entity;\n        }\n\n\n        public async Task<bool> DeleteAsync(Guid businessId, string provider, Guid id)\n        {\n            var prov = provider?.Trim() ?? string.Empty;\n\n            var entity = await _db.WhatsAppPhoneNumbers\n                .FirstOrDefaultAsync(x => x.Id == id && x.BusinessId == businessId && x.Provider.ToLower() == prov.ToLower());\n\n            if (entity == null) return false;\n\n            _db.WhatsAppPhoneNumbers.Remove(entity);\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> SetDefaultAsync(Guid businessId, string provider, Guid id)\n        {\n            var prov = provider?.Trim() ?? string.Empty;\n\n            await _db.Database.BeginTransactionAsync();\n            try\n            {\n                // ensure target exists and belongs to (business, provider)\n                var target = await _db.WhatsAppPhoneNumbers\n                    .FirstOrDefaultAsync(x => x.Id == id && x.BusinessId == businessId && x.Provider.ToLower() == prov.ToLower());\n                if (target == null) return false;\n\n                await _db.WhatsAppPhoneNumbers\n                    .Where(x => x.BusinessId == businessId && x.Provider.ToLower() == prov.ToLower())\n                    .ExecuteUpdateAsync(s => s.SetProperty(p => p.IsDefault, false));\n\n                target.IsDefault = true;\n                target.UpdatedAt = DateTime.UtcNow;\n                await _db.SaveChangesAsync();\n\n                await _db.Database.CommitTransactionAsync();\n                return true;\n            }\n            catch\n            {\n                await _db.Database.RollbackTransactionAsync();\n                throw;\n            }\n        }\n\n        public async Task<WhatsAppPhoneNumber?> FindAsync(Guid businessId, string provider, string phoneNumberId)\n        {\n            var prov = provider?.Trim() ?? string.Empty;\n\n            return await _db.WhatsAppPhoneNumbers\n                .FirstOrDefaultAsync(x =>\n                    x.BusinessId == businessId &&\n                    x.Provider.ToLower() == prov.ToLower() &&\n                    x.PhoneNumberId == phoneNumberId);\n        }\n\n        public async Task<WhatsAppPhoneNumber?> GetDefaultAsync(Guid businessId, string provider)\n        {\n            var prov = provider?.Trim() ?? string.Empty;\n\n            // covered by partial unique index: at most one IsDefault per (biz, provider)\n            return await _db.WhatsAppPhoneNumbers\n                .FirstOrDefaultAsync(x =>\n                    x.BusinessId == businessId &&\n                    x.Provider.ToLower() == prov.ToLower() &&\n                    x.IsDefault);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppSenderService.cs",
      "sha256": "aaebef136613d7398b333d2656e37f6acb8457e8a2b03f214b7e423a942ddd85",
      "language": "csharp",
      "size": 3059,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.WhatsAppSettings.DTOs;     // WhatsAppSenderDto\nusing xbytechat.api.WhatsAppSettings.Services; // IWhatsAppSenderService\nusing xbytechat.api.Infrastructure;            // AppDbContext (adjust if needed)\n\nnamespace xbytechat.api.WhatsAppSettings.Services\n{\n    public sealed class WhatsAppSenderService : IWhatsAppSenderService\n    {\n        private readonly AppDbContext _db;\n        public WhatsAppSenderService(AppDbContext db) => _db = db;\n\n        public async Task<IReadOnlyList<WhatsAppSenderDto>> GetBusinessSendersAsync(\n            Guid businessId,\n            CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty) return Array.Empty<WhatsAppSenderDto>();\n\n            var rows = await _db.WhatsAppPhoneNumbers\n                .AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.IsActive)\n                .OrderByDescending(x => x.IsDefault)\n                .ThenBy(x => x.WhatsAppBusinessNumber)\n                .ToListAsync(ct);\n\n            return rows.Select(x =>\n            {\n                // inline normalize: uppercase; map META -> META_CLOUD\n                var prov = (x.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                if (prov == \"META\") prov = \"META_CLOUD\";\n\n                return new WhatsAppSenderDto\n                {\n                    Id = x.Id,\n                    BusinessId = x.BusinessId,\n                    Provider = prov, // \"PINNACLE\" | \"META_CLOUD\" (ideally)\n                    PhoneNumberId = x.PhoneNumberId,\n                    WhatsAppBusinessNumber = x.WhatsAppBusinessNumber,\n                    SenderDisplayName = x.SenderDisplayName,\n                    IsActive = x.IsActive,\n                    IsDefault = x.IsDefault\n                };\n            }).ToList();\n        }\n\n        /// <summary>\n        /// Validates that the given phoneNumberId belongs to this business and is active.\n        /// Returns (normalizedProvider, phoneNumberId) or null.\n        /// </summary>\n        public async Task<(string Provider, string PhoneNumberId)?> ResolveSenderPairAsync(\n            Guid businessId,\n            string phoneNumberId,\n            CancellationToken ct = default)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(phoneNumberId))\n                return null;\n\n            var row = await _db.WhatsAppPhoneNumbers\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x =>\n                    x.BusinessId == businessId &&\n                    x.PhoneNumberId == phoneNumberId &&\n                    x.IsActive, ct);\n\n            if (row == null) return null;\n\n            // inline normalize here too\n            var prov = (row.Provider ?? string.Empty).Trim().ToUpperInvariant();\n            if (prov == \"META\") prov = \"META_CLOUD\";\n\n            return (prov, row.PhoneNumberId);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppSettingsService.cs",
      "sha256": "1b02c0b897c1c77ef22e8836d4a19ff86b14dbfb5e790f663b9fcf9e2af0d5d2",
      "language": "csharp",
      "size": 18956,
      "content": "// 📄 xbytechat_api/WhatsAppSettings/Services/WhatsAppSettingsService.cs\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public class WhatsAppSettingsService : IWhatsAppSettingsService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _http;                    // kept for any other callers you may have\n        private readonly IHttpClientFactory _httpClientFactory;\n\n        public WhatsAppSettingsService(\n            AppDbContext dbContext,\n            HttpClient http,\n            IHttpClientFactory httpClientFactory)\n        {\n            _dbContext = dbContext;\n            _http = http;\n            _httpClientFactory = httpClientFactory;\n        }\n\n        //public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        //{\n        //    if (dto.BusinessId == Guid.Empty)\n        //        throw new ArgumentException(\"Invalid BusinessId provided.\", nameof(dto.BusinessId));\n\n        //    // Normalize provider (store lower-case for consistency)\n        //    var provider = (dto.Provider ?? \"pinnacle\").Trim();\n        //    if (string.IsNullOrWhiteSpace(provider))\n        //        provider = \"pinnacle\";\n        //    var providerNorm = provider.ToLowerInvariant();\n\n        //    // Look up by BusinessId + Provider (case-insensitive)\n        //    var existing = await _dbContext.WhatsAppSettings\n        //        .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId && x.Provider.ToLower() == providerNorm);\n\n        //    if (existing != null)\n        //    {\n        //        // keep provider normalized\n        //        existing.Provider = providerNorm;\n\n        //        // Only overwrite when incoming value is non-empty (avoid wiping secrets/tokens accidentally)\n        //        if (!string.IsNullOrWhiteSpace(dto.ApiUrl)) existing.ApiUrl = dto.ApiUrl.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.ApiKey)) existing.ApiKey = dto.ApiKey.Trim();\n        //       // if (!string.IsNullOrWhiteSpace(dto.ApiToken)) existing.ApiToken = dto.ApiToken!.Trim();\n\n        //        if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId)) existing.PhoneNumberId = dto.PhoneNumberId!.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber)) existing.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber!.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName)) existing.SenderDisplayName = dto.SenderDisplayName!.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WabaId)) existing.WabaId = dto.WabaId!.Trim();\n\n        //        // 🔐 Webhook auth fields (optional)\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookSecret)) existing.WebhookSecret = dto.WebhookSecret!.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookVerifyToken)) existing.WebhookVerifyToken = dto.WebhookVerifyToken!.Trim();\n\n        //        // 🌐 NEW: provider callback URL (optional)\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl)) existing.WebhookCallbackUrl = dto.WebhookCallbackUrl!.Trim();\n\n        //        existing.IsActive = dto.IsActive;\n        //        existing.UpdatedAt = DateTime.UtcNow;\n        //    }\n        //    else\n        //    {\n        //        var newSetting = new WhatsAppSettingEntity\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = dto.BusinessId,\n        //            Provider = providerNorm,\n        //            ApiUrl = (dto.ApiUrl ?? string.Empty).Trim(),\n        //            ApiKey = string.IsNullOrWhiteSpace(dto.ApiKey) ? null : dto.ApiKey!.Trim(),\n        //           // ApiToken = string.IsNullOrWhiteSpace(dto.ApiToken) ? null : dto.ApiToken!.Trim(),\n        //            PhoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? null : dto.PhoneNumberId!.Trim(),\n        //            WhatsAppBusinessNumber = string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber) ? null : dto.WhatsAppBusinessNumber!.Trim(),\n        //            SenderDisplayName = string.IsNullOrWhiteSpace(dto.SenderDisplayName) ? null : dto.SenderDisplayName!.Trim(),\n        //            WabaId = string.IsNullOrWhiteSpace(dto.WabaId) ? null : dto.WabaId!.Trim(),\n\n        //            // 🔐 Webhook auth fields (optional)\n        //            WebhookSecret = string.IsNullOrWhiteSpace(dto.WebhookSecret) ? null : dto.WebhookSecret!.Trim(),\n        //            WebhookVerifyToken = string.IsNullOrWhiteSpace(dto.WebhookVerifyToken) ? null : dto.WebhookVerifyToken!.Trim(),\n\n        //            // 🌐 NEW: provider callback URL (optional)\n        //            WebhookCallbackUrl = string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl) ? null : dto.WebhookCallbackUrl!.Trim(),\n\n        //            IsActive = dto.IsActive,\n        //            CreatedAt = DateTime.UtcNow\n        //        };\n\n        //        await _dbContext.WhatsAppSettings.AddAsync(newSetting);\n        //    }\n\n        //    await _dbContext.SaveChangesAsync();\n        //}\n        public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (dto.BusinessId == Guid.Empty) throw new ArgumentException(\"BusinessId required\");\n\n            var existing = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId && x.Provider == dto.Provider);\n\n            if (existing != null)\n            {\n                if (!string.IsNullOrWhiteSpace(dto.ApiUrl)) existing.ApiUrl = dto.ApiUrl.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.ApiKey)) existing.ApiKey = dto.ApiKey.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId)) existing.PhoneNumberId = dto.PhoneNumberId.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber)) existing.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName)) existing.SenderDisplayName = dto.SenderDisplayName.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WabaId)) existing.WabaId = dto.WabaId.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WebhookSecret)) existing.WebhookSecret = dto.WebhookSecret.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WebhookVerifyToken)) existing.WebhookVerifyToken = dto.WebhookVerifyToken.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl)) existing.WebhookCallbackUrl = dto.WebhookCallbackUrl.Trim();\n                existing.IsActive = dto.IsActive;\n                existing.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                var s = new WhatsAppSettingEntity\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    Provider = dto.Provider,                           // must be 'META_CLOUD' or 'PINNACLE'\n                    ApiUrl = (dto.ApiUrl ?? string.Empty).Trim(),      // avoid NOT NULL violations\n                    ApiKey = (dto.ApiKey ?? string.Empty).Trim(),\n                    PhoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? null : dto.PhoneNumberId.Trim(),\n                    WhatsAppBusinessNumber = string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber) ? null : dto.WhatsAppBusinessNumber.Trim(),\n                    SenderDisplayName = string.IsNullOrWhiteSpace(dto.SenderDisplayName) ? null : dto.SenderDisplayName.Trim(),\n                    WabaId = string.IsNullOrWhiteSpace(dto.WabaId) ? null : dto.WabaId.Trim(),\n                    WebhookSecret = string.IsNullOrWhiteSpace(dto.WebhookSecret) ? null : dto.WebhookSecret.Trim(),\n                    WebhookVerifyToken = string.IsNullOrWhiteSpace(dto.WebhookVerifyToken) ? null : dto.WebhookVerifyToken.Trim(),\n                    WebhookCallbackUrl = string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl) ? null : dto.WebhookCallbackUrl.Trim(),\n                    IsActive = dto.IsActive,\n                    CreatedAt = DateTime.UtcNow\n                };\n                await _dbContext.WhatsAppSettings.AddAsync(s);\n            }\n\n            await _dbContext.SaveChangesAsync();\n        }\n\n        //public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        //{\n        //    if (dto.BusinessId == Guid.Empty)\n        //        throw new ArgumentException(\"Invalid BusinessId provided.\", nameof(dto.BusinessId));\n\n        //    // Controller already called NormalizeProvider; do it again here to be defensive.\n        //    // NormalizeProvider MUST return canonical values: \"Pinnacle\" or \"Meta_cloud\".\n        //    var providerCanon = NormalizeProvider(dto.Provider);\n        //    var providerLc = providerCanon.ToLowerInvariant();\n\n        //    // Look up case-insensitively so legacy rows still match\n        //    var existing = await _dbContext.WhatsAppSettings\n        //        .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId && x.Provider.ToLower() == providerLc);\n\n        //    if (existing != null)\n        //    {\n        //        // Enforce canonical provider in DB (prevents future FK mismatches)\n        //        if (!string.Equals(existing.Provider, providerCanon, StringComparison.Ordinal))\n        //            existing.Provider = providerCanon;\n\n        //        // Only overwrite when incoming value is non-empty (avoid nuking secrets)\n        //        if (!string.IsNullOrWhiteSpace(dto.ApiUrl)) existing.ApiUrl = dto.ApiUrl.Trim();\n\n        //        // IMPORTANT: keep ApiKey if input is empty\n        //        if (!string.IsNullOrWhiteSpace(dto.ApiKey)) existing.ApiKey = dto.ApiKey.Trim();\n\n        //        if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId)) existing.PhoneNumberId = dto.PhoneNumberId.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber)) existing.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName)) existing.SenderDisplayName = dto.SenderDisplayName.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WabaId)) existing.WabaId = dto.WabaId.Trim();\n\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookSecret)) existing.WebhookSecret = dto.WebhookSecret.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookVerifyToken)) existing.WebhookVerifyToken = dto.WebhookVerifyToken.Trim();\n        //        if (!string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl)) existing.WebhookCallbackUrl = dto.WebhookCallbackUrl.Trim();\n\n        //        existing.IsActive = dto.IsActive;\n        //        existing.UpdatedAt = DateTime.UtcNow;\n        //    }\n        //    else\n        //    {\n        //        // Create canonical, NOT NULL-safe stub/row\n        //        var newSetting = new WhatsAppSettingEntity\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = dto.BusinessId,\n        //            Provider = providerCanon,                         // canonical only\n        //            ApiUrl = (dto.ApiUrl ?? string.Empty).Trim(),     // keep NOT NULL safe\n        //            ApiKey = string.IsNullOrWhiteSpace(dto.ApiKey) ? string.Empty : dto.ApiKey.Trim(), // avoid null\n        //            PhoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? null : dto.PhoneNumberId.Trim(),\n        //            WhatsAppBusinessNumber = string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber) ? null : dto.WhatsAppBusinessNumber.Trim(),\n        //            SenderDisplayName = string.IsNullOrWhiteSpace(dto.SenderDisplayName) ? null : dto.SenderDisplayName.Trim(),\n        //            WabaId = string.IsNullOrWhiteSpace(dto.WabaId) ? null : dto.WabaId.Trim(),\n        //            WebhookSecret = string.IsNullOrWhiteSpace(dto.WebhookSecret) ? null : dto.WebhookSecret.Trim(),\n        //            WebhookVerifyToken = string.IsNullOrWhiteSpace(dto.WebhookVerifyToken) ? null : dto.WebhookVerifyToken.Trim(),\n        //            WebhookCallbackUrl = string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl) ? null : dto.WebhookCallbackUrl.Trim(),\n        //            IsActive = dto.IsActive,\n        //            CreatedAt = DateTime.UtcNow\n        //        };\n\n        //        await _dbContext.WhatsAppSettings.AddAsync(newSetting);\n        //    }\n\n        //    await _dbContext.SaveChangesAsync();\n        //}\n\n        public async Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId)\n        {\n            return await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n        }\n\n        public async Task<bool> DeleteSettingsAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId);\n\n            if (setting == null) return false;\n\n            _dbContext.WhatsAppSettings.Remove(setting);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        /// <summary>\n        /// Provider-aware test connection. Returns a short message (✅/❌ …).\n        /// The controller may convert non-✅ messages to 400, etc.\n        /// </summary>\n        public async Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Provider))\n                throw new ArgumentException(\"Provider is required.\");\n\n            // normalize provider and baseUrl\n            var provider = dto.Provider.Trim();\n            var lower = provider.ToLowerInvariant();\n            var baseUrl = (dto.ApiUrl ?? string.Empty).Trim().TrimEnd('/');\n\n            if (string.IsNullOrWhiteSpace(baseUrl))\n                throw new ArgumentException(\"ApiUrl is required.\");\n\n            var http = _httpClientFactory.CreateClient();\n\n            // ----- Meta Cloud -----\n            if (lower == \"meta_cloud\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiKey))\n                    throw new ArgumentException(\"ApiKey is required for Meta Cloud.\");\n                if (string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                    throw new ArgumentException(\"PhoneNumberId is required for Meta Cloud.\");\n\n                http.DefaultRequestHeaders.Authorization =\n                    new AuthenticationHeaderValue(\"Bearer\", dto.ApiKey);\n\n                var url = $\"{baseUrl}/{dto.PhoneNumberId}\";\n                var res = await http.GetAsync(url);\n                var body = await res.Content.ReadAsStringAsync();\n\n                if (!res.IsSuccessStatusCode)\n                    return $\"❌ Meta Cloud test failed ({(int)res.StatusCode}). Body: {body}\";\n\n                return \"✅ Meta Cloud token & phone number ID are valid.\";\n            }\n\n            // ----- Pinnacle (formerly Pinbot) -----\n            if (lower == \"pinnacle\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiKey))\n                    return \"❌ API Key is required for Pinnacle.\";\n\n                // Pinnacle requires either phone number id OR WABA id in the path\n                var pathId =\n                    !string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? dto.PhoneNumberId!.Trim() :\n                    !string.IsNullOrWhiteSpace(dto.WabaId) ? dto.WabaId!.Trim() :\n                    null;\n\n                if (string.IsNullOrWhiteSpace(pathId))\n                    return \"❌ Provide PhoneNumberId or WabaId for Pinnacle.\";\n\n                if (string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                    return \"❌ WhatsApp Business Number is required for Pinnacle test.\";\n\n                var url = $\"{baseUrl}/{pathId}/messages\";\n                var payload = new\n                {\n                    to = dto.WhatsAppBusinessNumber,\n                    type = \"text\",\n                    text = new { body = \"Test message\" },\n                    messaging_product = \"whatsapp\"\n                };\n\n                using var req = new HttpRequestMessage(HttpMethod.Post, url);\n                req.Headers.TryAddWithoutValidation(\"apikey\", dto.ApiKey);\n                req.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n\n                var res = await http.SendAsync(req);\n                var body = await res.Content.ReadAsStringAsync();\n\n                if (!res.IsSuccessStatusCode)\n                {\n                    if ((int)res.StatusCode == 401 || (int)res.StatusCode == 403)\n                        return $\"❌ Pinnacle rejected the API key for id '{pathId}'. Verify the key and id. Body: {body}\";\n\n                    return $\"❌ Pinnacle test failed ({(int)res.StatusCode}). Body: {body}\";\n                }\n\n                return \"✅ Pinnacle API key and endpoint are reachable.\";\n            }\n\n            return $\"❌ Unsupported provider: {dto.Provider}\";\n        }\n\n        public async Task<string?> GetSenderNumberAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            return setting?.WhatsAppBusinessNumber;\n        }\n\n        public async Task<string> GetCallbackUrlAsync(Guid businessId, string appBaseUrl)\n        {\n            var s = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (!string.IsNullOrWhiteSpace(s?.WebhookCallbackUrl))\n                return s!.WebhookCallbackUrl!;\n\n            return $\"{appBaseUrl.TrimEnd('/')}/api/webhookcallback\";\n        }\n        public async Task<IReadOnlyList<WhatsAppSettingEntity>> GetAllForBusinessAsync(Guid businessId)\n        {\n            // Return all rows (one per provider) for this business\n            var items = await _dbContext.WhatsAppSettings\n                .Where(s => s.BusinessId == businessId)\n                 .Include(s => s.PhoneNumberId)\n                .OrderBy(s => s.Provider)\n                .ToListAsync();\n\n            return items.AsReadOnly();\n        }\n        public async Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAndProviderAsync(Guid businessId, string provider)\n        {\n            if (string.IsNullOrWhiteSpace(provider)) return null;\n            var prov = provider.Trim();\n\n            // case-insensitive provider match\n            return await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.Provider.ToLower() == prov.ToLower());\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppTemplateFetcherService.cs",
      "sha256": "6292eb6e27516f356b4e16390a3686aa78132670a7bba8a6960e1bc0fe10dae2",
      "language": "csharp",
      "size": 45852,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing System.Net.Http.Headers;\nusing System.Security.Claims;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing xbytechat.api;\nusing xbytechat.api.Shared;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing DTO = xbytechat.api.WhatsAppSettings.DTOs;\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n\n    public class WhatsAppTemplateFetcherService : IWhatsAppTemplateFetcherService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<WhatsAppTemplateFetcherService> _logger;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        public WhatsAppTemplateFetcherService(AppDbContext dbContext, HttpClient httpClient, ILogger<WhatsAppTemplateFetcherService> logger, IHttpContextAccessor httpContextAccessor)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _logger = logger;\n            _httpContextAccessor = httpContextAccessor;\n        }\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId)\n        {\n            var templates = new List<TemplateMetadataDto>();\n\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"WhatsApp Settings not found for BusinessId: {BusinessId}\", businessId);\n                return templates;\n            }\n\n            var provider = (setting.Provider ?? \"\").Trim().ToLowerInvariant();\n            var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"\";\n\n            try\n            {\n                if (provider == \"meta_cloud\")\n                {\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey) || string.IsNullOrWhiteSpace(setting.WabaId))\n                    {\n                        _logger.LogWarning(\"Missing API Token or WABA ID for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    var nextUrl = $\"{(string.IsNullOrWhiteSpace(baseUrl) ? \"https://graph.facebook.com/v22.0\" : baseUrl)}/{setting.WabaId}/message_templates?limit=100\";\n                    _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiKey);\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        var response = await _httpClient.GetAsync(nextUrl);\n                        var json = await response.Content.ReadAsStringAsync();\n                        _logger.LogInformation(\"📦 Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                        if (!response.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"❌ Failed to fetch templates from Meta: {Response}\", json);\n                            break;\n                        }\n\n                        dynamic parsed = JsonConvert.DeserializeObject(json);\n                        templates.AddRange(ParseTemplatesFromMetaLikePayload(parsed));\n                        nextUrl = parsed?.paging?.next?.ToString();\n                    }\n\n                    return templates;\n                }\n                else if (provider == \"pinnacle\")\n                {\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                    {\n                        _logger.LogWarning(\"Pinnacle API key missing for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    // Pinnacle typically accepts either WABA ID or PhoneNumberId. Prefer WABA.\n                    var pathId = !string.IsNullOrWhiteSpace(setting.WabaId)\n                        ? setting.WabaId!.Trim()\n                        : setting.PhoneNumberId?.Trim();\n\n                    if (string.IsNullOrWhiteSpace(pathId))\n                    {\n                        _logger.LogWarning(\"Pinnacle path id missing (WabaId/PhoneNumberId) for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    var nextUrl = $\"{(string.IsNullOrWhiteSpace(baseUrl) ? \"https://partnersv1.pinbot.ai/v3\" : baseUrl)}/{pathId}/message_templates?limit=100\";\n\n                    // IMPORTANT: Pinnacle needs apikey header\n                    _httpClient.DefaultRequestHeaders.Remove(\"apikey\");\n                    _httpClient.DefaultRequestHeaders.TryAddWithoutValidation(\"apikey\", setting.ApiKey);\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        var response = await _httpClient.GetAsync(nextUrl);\n                        var json = await response.Content.ReadAsStringAsync();\n                        _logger.LogInformation(\"📦 Pinnacle Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                        if (!response.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"❌ Failed to fetch templates from Pinnacle: {Response}\", json);\n                            break;\n                        }\n\n                        // Try to support both \"data\": [...] and \"templates\": [...] styles\n                        dynamic parsed = JsonConvert.DeserializeObject(json);\n                        templates.AddRange(ParseTemplatesFromMetaLikePayload(parsed)); // many BSPs mirror Meta's shape\n                        nextUrl = parsed?.paging?.next?.ToString(); // if their API paginates similarly\n                                                                    // If no paging in Pinnacle, set nextUrl = null to exit loop\n                        if (nextUrl == null) break;\n                    }\n\n                    return templates;\n                }\n                else\n                {\n                    _logger.LogInformation(\"Provider {Provider} does not support listing via API in this build.\", provider);\n                    return templates;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception while fetching WhatsApp templates for provider {Provider}.\", provider);\n                return templates;\n            }\n        }\n\n        private static IEnumerable<TemplateMetadataDto> ParseTemplatesFromMetaLikePayload(dynamic parsed)\n        {\n            var list = new List<TemplateMetadataDto>();\n            if (parsed == null) return list;\n\n            // Prefer parsed.data; fall back to parsed.templates\n            var collection = parsed.data ?? parsed.templates;\n            if (collection == null) return list;\n\n            foreach (var tpl in collection)\n            {\n                string name = tpl.name?.ToString() ?? \"\";\n                string language = tpl.language?.ToString() ?? \"en_US\";\n                string body = \"\";\n                bool hasImageHeader = false;\n                var buttons = new List<ButtonMetadataDto>();\n\n                // components may be null for some BSPs\n                var components = tpl.components;\n                if (components != null)\n                {\n                    foreach (var component in components)\n                    {\n                        string type = component.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                            body = component.text?.ToString() ?? \"\";\n\n                        if (type == \"HEADER\" && (component.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                            hasImageHeader = true;\n\n                        if (type == \"BUTTONS\" && component.buttons != null)\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? paramValue =\n                                        button.url != null ? button.url.ToString() :\n                                        button.phone_number != null ? button.phone_number.ToString() :\n                                        button.coupon_code != null ? button.coupon_code.ToString() :\n                                        button.flow_id != null ? button.flow_id.ToString() :\n                                        null;\n\n                                    // If BSP marks dynamic examples like Meta, respect them; otherwise be lenient\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\"\n                                    });\n                                }\n                                catch { /* ignore per-button parsing issues */ }\n                            }\n                        }\n                    }\n                }\n\n                int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                list.Add(new TemplateMetadataDto\n                {\n                    Name = name,\n                    Language = language,\n                    Body = body,\n                    PlaceholderCount = placeholderCount,\n                    HasImageHeader = hasImageHeader,\n                    ButtonParams = buttons\n                });\n            }\n\n            return list;\n        }\n\n        public async Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync()\n        {\n            var result = new List<TemplateForUIResponseDto>();\n\n            var user = _httpContextAccessor.HttpContext.User;\n            var businessId = user.GetBusinessId();\n            _logger.LogInformation(\"🔎 Fetching templates for BusinessId {BusinessId}\", businessId);\n\n            // 1) Load this business's active setting (provider can be Meta or Pinnacle)\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(s =>\n                    s.IsActive &&\n                    s.BusinessId == businessId);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"⚠️ No active WhatsApp setting for BusinessId {BusinessId}\", businessId);\n                return result;\n            }\n\n            try\n            {\n                string provider = setting.Provider?.ToLowerInvariant() ?? \"\";\n\n                if (provider == \"meta_cloud\")\n                {\n                    // ✅ Meta Cloud path → ApiKey + WabaId required\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey) || string.IsNullOrWhiteSpace(setting.WabaId))\n                    {\n                        _logger.LogWarning(\"⚠️ Missing ApiKey or WabaId for Meta Cloud (Biz {BusinessId})\", businessId);\n                        return result;\n                    }\n\n                    var baseUrl = (setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v22.0\");\n                    var nextUrl = $\"{baseUrl}/{setting.WabaId}/message_templates?limit=100\";\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                        req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiKey);\n\n                        using var res = await _httpClient.SendAsync(req);\n                        var json = await res.Content.ReadAsStringAsync();\n\n                        _logger.LogInformation(\"📦 Meta Template API (Biz {BusinessId}) payload:\\n{Json}\", businessId, json);\n\n                        if (!res.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"❌ Meta template fetch failed (Biz {BusinessId}): {Json}\", businessId, json);\n                            break;\n                        }\n\n                        result.AddRange(ParseMetaTemplates(json));\n                        nextUrl = JsonConvert.DeserializeObject<dynamic>(json)?.paging?.next?.ToString();\n                    }\n                }\n                else if (provider == \"pinnacle\")\n                {\n                    // ✅ Pinnacle path → ApiKey + PhoneNumberId required\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n                    {\n                        _logger.LogWarning(\"⚠️ Missing ApiKey or PhoneNumberId for Pinnacle (Biz {BusinessId})\", businessId);\n                        return result;\n                    }\n\n                    var baseUrl = (setting.ApiUrl?.TrimEnd('/') ?? \"https://partnersv1.pinbot.ai/v3\");\n                    var nextUrl = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                    using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                    req.Headers.Add(\"apikey\", setting.ApiKey);\n\n                    using var res = await _httpClient.SendAsync(req);\n                    var json = await res.Content.ReadAsStringAsync();\n\n                    _logger.LogInformation(\"📦 Pinnacle Template API (Biz {BusinessId}) payload:\\n{Json}\", businessId, json);\n\n                    if (!res.IsSuccessStatusCode)\n                    {\n                        _logger.LogError(\"❌ Pinnacle template fetch failed (Biz {BusinessId}): {Json}\", businessId, json);\n                        return result;\n                    }\n\n                    result.AddRange(ParsePinnacleTemplates(json));\n                }\n                else\n                {\n                    _logger.LogWarning(\"⚠️ Unknown provider '{Provider}' for Biz {BusinessId}\", provider, businessId);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception while fetching templates for BusinessId {BusinessId}\", businessId);\n            }\n\n            return result;\n        }\n        private List<TemplateForUIResponseDto> ParseMetaTemplates(string json)\n        {\n            var list = new List<TemplateForUIResponseDto>();\n            dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n            foreach (var tpl in parsed.data)\n            {\n                string status = (tpl.status?.ToString() ?? \"\").ToUpperInvariant();\n                if (status != \"APPROVED\" && status != \"ACTIVE\") continue;\n\n                list.Add(BuildTemplateDtoFromComponents(tpl));\n            }\n\n            return list;\n        }\n\n        private List<TemplateForUIResponseDto> ParsePinnacleTemplates(string json)\n        {\n            var list = new List<TemplateForUIResponseDto>();\n            dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n            if (parsed?.data == null) return list;\n\n            foreach (var tpl in parsed.data)\n            {\n                // Pinnacle may not use status like Meta, adjust filter if needed\n                list.Add(BuildTemplateDtoFromComponents(tpl));\n            }\n\n            return list;\n        }\n\n        private TemplateForUIResponseDto BuildTemplateDtoFromComponents(dynamic tpl)\n        {\n            string name = tpl.name;\n            string language = tpl.language ?? \"en_US\";\n            string body = \"\";\n            bool hasImageHeader = false;\n            var buttons = new List<ButtonMetadataDto>();\n\n            foreach (var component in tpl.components)\n            {\n                string type = component.type?.ToString()?.ToUpperInvariant();\n\n                if (type == \"BODY\")\n                    body = component.text?.ToString() ?? \"\";\n\n                if (type == \"HEADER\" && (component.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                    hasImageHeader = true;\n\n                if (type == \"BUTTONS\")\n                {\n                    foreach (var button in component.buttons)\n                    {\n                        string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                        string text = button.text?.ToString() ?? \"\";\n                        int index = buttons.Count;\n\n                        string subType = btnType switch\n                        {\n                            \"URL\" => \"url\",\n                            \"PHONE_NUMBER\" => \"voice_call\",\n                            \"QUICK_REPLY\" => \"quick_reply\",\n                            \"COPY_CODE\" => \"copy_code\",\n                            \"CATALOG\" => \"catalog\",\n                            \"FLOW\" => \"flow\",\n                            \"REMINDER\" => \"reminder\",\n                            \"ORDER_DETAILS\" => \"order_details\",\n                            _ => \"unknown\"\n                        };\n\n                        string? paramValue = button.url?.ToString() ?? button.phone_number?.ToString();\n\n                        if (subType == \"unknown\") continue;\n\n                        buttons.Add(new ButtonMetadataDto\n                        {\n                            Text = text,\n                            Type = btnType,\n                            SubType = subType,\n                            Index = index,\n                            ParameterValue = paramValue ?? \"\"\n                        });\n                    }\n                }\n            }\n\n            int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n            return new TemplateForUIResponseDto\n            {\n                Name = name,\n                Language = language,\n                Body = body,\n                ParametersCount = placeholderCount,\n                HasImageHeader = hasImageHeader,\n                ButtonParams = buttons\n            };\n        }\n\n        public async Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.IsActive && x.BusinessId == businessId);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"❌ WhatsApp settings not found for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            var provider = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n            var wabaId = setting.WabaId?.Trim();\n            if (string.IsNullOrWhiteSpace(wabaId))\n            {\n                _logger.LogWarning(\"❌ Missing WABA ID for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            // Build URL + request with per-request headers\n            string url;\n            using var req = new HttpRequestMessage(HttpMethod.Get, \"\");\n\n            if (provider == \"pinnacle\")\n            {\n                // Pinnacle: require ApiKey; use WabaId for template listing\n                if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                {\n                    _logger.LogWarning(\"❌ ApiKey missing for Pinnacle provider (BusinessId {BusinessId})\", businessId);\n                    return null;\n                }\n\n                var baseUrl = string.IsNullOrWhiteSpace(setting.ApiUrl)\n                    ? \"https://partnersv1.pinbot.ai/v3\"\n                    : setting.ApiUrl.TrimEnd('/');\n\n                url = $\"{baseUrl}/{wabaId}/message_templates?limit=200\";\n                // add header variants\n                req.Headers.TryAddWithoutValidation(\"apikey\", setting.ApiKey);\n                req.Headers.TryAddWithoutValidation(\"x-api-key\", setting.ApiKey);\n                // safety: also append as query (some edges require it)\n                url = url.Contains(\"apikey=\") ? url : $\"{url}&apikey={Uri.EscapeDataString(setting.ApiKey)}\";\n            }\n            else // meta_cloud\n            {\n                // Meta Cloud: require ApiKey; use WabaId for template listing\n                if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                {\n                    _logger.LogWarning(\"❌ ApiKey missing for Meta provider (BusinessId {BusinessId})\", businessId);\n                    return null;\n                }\n\n                var baseUrl = string.IsNullOrWhiteSpace(setting.ApiUrl)\n                    ? \"https://graph.facebook.com/v22.0\"\n                    : setting.ApiUrl.TrimEnd('/');\n\n                url = $\"{baseUrl}/{wabaId}/message_templates?limit=200\";\n                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiKey);\n            }\n\n            req.RequestUri = new Uri(url);\n            var response = await _httpClient.SendAsync(req);\n            var json = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                _logger.LogError(\"❌ Failed to fetch templates (provider={Provider}) for BusinessId {BusinessId}: HTTP {Status} Body: {Body}\",\n                    provider, businessId, (int)response.StatusCode, json);\n                return null;\n            }\n\n            try\n            {\n                dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n                var data = parsed?.data;\n                if (data == null)\n                {\n                    _logger.LogWarning(\"⚠️ No 'data' array in template response (provider={Provider})\", provider);\n                    return null;\n                }\n\n                foreach (var tpl in data)\n                {\n                    string name = tpl.name;\n                    if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                        continue;\n\n                    string language = tpl.language != null ? (string)tpl.language : \"en_US\";\n                    string body = \"\";\n                    var buttons = new List<ButtonMetadataDto>();\n                    bool hasImageHeader = false;\n\n                    // components loop\n                    foreach (var component in tpl.components)\n                    {\n                        string type = component.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                        {\n                            try { body = component.text?.ToString() ?? \"\"; }\n                            catch { body = \"\"; }\n                        }\n\n                        if (type == \"HEADER\")\n                        {\n                            string format = component.format?.ToString()?.ToUpperInvariant();\n                            if (format == \"IMAGE\") hasImageHeader = true;\n                        }\n\n                        if (includeButtons && type == \"BUTTONS\")\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    // normalize sub-type for our app\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    // Known dynamic param extraction\n                                    string? paramValue = null;\n                                    if (button.url != null)\n                                        paramValue = button.url.ToString();\n                                    else if (button.phone_number != null)\n                                        paramValue = button.phone_number.ToString();\n                                    else if (button.coupon_code != null)\n                                        paramValue = button.coupon_code.ToString();\n                                    else if (button.flow_id != null)\n                                        paramValue = button.flow_id.ToString();\n\n                                    // Skip truly invalid\n                                    if (subType == \"unknown\" ||\n                                        (paramValue == null && new[] { \"url\", \"flow\", \"copy_code\" }.Contains(subType)))\n                                    {\n                                        _logger.LogWarning(\"⚠️ Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                        continue;\n                                    }\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\" // empty for static buttons\n                                    });\n                                }\n                                catch (Exception exBtn)\n                                {\n                                    _logger.LogWarning(exBtn, \"⚠️ Failed to parse button in template {TemplateName}\", name);\n                                }\n                            }\n                        }\n                    }\n\n                    // Count {{n}} placeholders in body\n                    int paramCount = Regex.Matches(body ?? \"\", \"{{\\\\s*\\\\d+\\\\s*}}\").Count;\n\n                    return new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = paramCount,\n                        HasImageHeader = hasImageHeader,\n                        ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception while parsing template response\");\n            }\n\n            return null;\n        }\n        private static TemplateMetadataDto? ExtractTemplateFromListJson(string json, string templateName, bool includeButtons)\n        {\n            var root = JObject.Parse(json);\n            var data = root[\"data\"] as JArray;\n            if (data == null) return null;\n\n            foreach (var tplToken in data.OfType<JObject>())\n            {\n                var name = tplToken.Value<string>(\"name\") ?? \"\";\n                if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var language = tplToken.Value<string>(\"language\") ?? \"en_US\";\n                var components = tplToken[\"components\"] as JArray;\n\n                string body = \"\";\n                bool hasImageHeader = false;\n                var buttons = new List<ButtonMetadataDto>();\n\n                if (components != null)\n                {\n                    foreach (var comp in components.OfType<JObject>())\n                    {\n                        var type = (comp.Value<string>(\"type\") ?? \"\").ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                        {\n                            body = comp.Value<string>(\"text\") ?? body;\n                        }\n                        else if (type == \"HEADER\")\n                        {\n                            var fmt = (comp.Value<string>(\"format\") ?? \"\").ToUpperInvariant();\n                            if (fmt == \"IMAGE\") hasImageHeader = true;\n                        }\n                        else if (includeButtons && type == \"BUTTONS\")\n                        {\n                            var btns = comp[\"buttons\"] as JArray;\n                            if (btns == null) continue;\n\n                            var idx = 0;\n                            foreach (var b in btns.OfType<JObject>())\n                            {\n                                var btnTypeRaw = (b.Value<string>(\"type\") ?? \"\").ToUpperInvariant();\n                                var text = b.Value<string>(\"text\") ?? \"\";\n\n                                var subType = btnTypeRaw switch\n                                {\n                                    \"URL\" => \"url\",\n                                    \"PHONE_NUMBER\" => \"voice_call\",\n                                    \"QUICK_REPLY\" => \"quick_reply\",\n                                    \"COPY_CODE\" => \"copy_code\",\n                                    \"CATALOG\" => \"catalog\",\n                                    \"FLOW\" => \"flow\",\n                                    \"REMINDER\" => \"reminder\",\n                                    \"ORDER_DETAILS\" => \"order_details\",\n                                    _ => \"unknown\"\n                                };\n\n                                string? paramValue =\n                                    b.Value<string>(\"url\") ??\n                                    b.Value<string>(\"phone_number\") ??\n                                    b.Value<string>(\"coupon_code\") ??\n                                    b.Value<string>(\"flow_id\");\n\n                                // Skip unknown or missing required dynamic values\n                                if (subType == \"unknown\") continue;\n                                if ((subType is \"url\" or \"flow\" or \"copy_code\") && string.IsNullOrWhiteSpace(paramValue))\n                                    continue;\n\n                                buttons.Add(new ButtonMetadataDto\n                                {\n                                    Text = text,\n                                    Type = btnTypeRaw,\n                                    SubType = subType,\n                                    Index = idx++,\n                                    ParameterValue = paramValue ?? \"\"\n                                });\n                            }\n                        }\n                    }\n                }\n\n                var paramCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                return new TemplateMetadataDto\n                {\n                    Name = name,\n                    Language = language,\n                    Body = body ?? \"\",\n                    PlaceholderCount = paramCount,\n                    HasImageHeader = hasImageHeader,\n                    ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                };\n            }\n\n            return null;\n        }\n\n        // --- NEW: DB-backed meta projection methods ---\n        // List all template meta for a business (optionally filter by provider)\n        public async Task<IReadOnlyList<TemplateMetaDto>> GetTemplatesMetaAsync(Guid businessId, string? provider = null)\n        {\n            // Adjust DbSet name if different in your AppDbContext\n            var q = _dbContext.WhatsAppTemplates\n                              .AsNoTracking()\n                              .Where(t => t.BusinessId == businessId && t.IsActive);\n\n            if (!string.IsNullOrWhiteSpace(provider))\n                q = q.Where(t => t.Provider == provider);\n\n            var rows = await q.ToListAsync();\n            return rows.Select(MapRowToMeta).ToList();\n        }\n\n        // Get a single template meta by name (+ optional language/provider)\n        public async Task<TemplateMetaDto?> GetTemplateMetaAsync(Guid businessId, string templateName, string? language = null, string? provider = null)\n        {\n            var q = _dbContext.WhatsAppTemplates\n                              .AsNoTracking()\n                              .Where(t => t.BusinessId == businessId && t.IsActive && t.Name == templateName);\n\n            if (!string.IsNullOrWhiteSpace(language))\n                q = q.Where(t => t.Language == language);\n\n            if (!string.IsNullOrWhiteSpace(provider))\n                q = q.Where(t => t.Provider == provider);\n\n            // prefer exact language match if provided\n            var row = await q.OrderByDescending(t => t.Language == language).FirstOrDefaultAsync();\n            return row == null ? null : MapRowToMeta(row);\n        }\n        // Map persisted catalog row → TemplateMetaDto\n        //private DTO.TemplateMetaDto MapRowToMeta(dynamic row)\n        //{\n        //    var meta = new DTO.TemplateMetaDto\n        //    {\n        //        Provider = row.Provider ?? \"\",\n        //        TemplateId = row.ExternalId ?? row.TemplateId ?? \"\",\n        //        TemplateName = row.Name ?? \"\",\n        //        Language = row.Language ?? \"\",\n        //        HasHeaderMedia = row.HasImageHeader ?? false,\n        //        HeaderType = (row.HasImageHeader ?? false) ? \"IMAGE\" : \"\"\n        //    };\n\n        //    int count = 0;\n        //    try { count = Convert.ToInt32(row.PlaceholderCount ?? 0); } catch { count = 0; }\n\n        //    meta.BodyPlaceholders = Enumerable.Range(1, Math.Max(0, count))\n        //                                      .Select(i => new DTO.PlaceholderSlot { Index = i })\n        //                                      .ToList();\n\n        //    // ButtonsJson → TemplateButtonMeta[]\n        //    meta.Buttons = new List<DTO.TemplateButtonMeta>();\n        //    try\n        //    {\n        //        string buttonsJson = row.ButtonsJson ?? \"\";\n        //        if (!string.IsNullOrWhiteSpace(buttonsJson))\n        //        {\n        //            using var doc = JsonDocument.Parse(buttonsJson);\n        //            if (doc.RootElement.ValueKind == JsonValueKind.Array)\n        //            {\n        //                int i = 0;\n        //                foreach (var el in doc.RootElement.EnumerateArray())\n        //                {\n        //                    var type = el.TryGetProperty(\"Type\", out var p1) ? p1.GetString() ?? \"\"\n        //                              : el.TryGetProperty(\"type\", out var p1b) ? p1b.GetString() ?? \"\" : \"\";\n        //                    var text = el.TryGetProperty(\"Text\", out var p2) ? p2.GetString() ?? \"\"\n        //                              : el.TryGetProperty(\"text\", out var p2b) ? p2b.GetString() ?? \"\" : \"\";\n        //                    var value = el.TryGetProperty(\"ParameterValue\", out var p3) ? p3.GetString()\n        //                              : el.TryGetProperty(\"value\", out var p3b) ? p3b.GetString() : null;\n        //                    var order = el.TryGetProperty(\"Index\", out var p4) && p4.ValueKind == JsonValueKind.Number\n        //                              ? p4.GetInt32()\n        //                              : i;\n\n        //                    meta.Buttons.Add(new DTO.TemplateButtonMeta\n        //                    {\n        //                        Type = type,\n        //                        Text = text,\n        //                        Value = value,\n        //                        Order = order\n        //                    });\n        //                    i++;\n        //                }\n        //            }\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogWarning(ex, \"Failed to parse ButtonsJson for template {TemplateName}\", (string)(row.Name ?? \"(unknown)\"));\n        //    }\n\n        //    return meta;\n        //}\n        // add near the class top (once)\n        // helpers (place near the class top)\n        private static readonly Regex _phRx = new(@\"\\{\\{\\s*(\\d+)\\s*\\}\\}\", RegexOptions.Compiled);\n\n        private static int DistinctMaxPlaceholderIndex(string? text)\n        {\n            if (string.IsNullOrWhiteSpace(text)) return 0;\n            var m = _phRx.Matches(text);\n            int max = 0;\n            var seen = new HashSet<int>();\n            foreach (Match x in m)\n            {\n                if (int.TryParse(x.Groups[1].Value, out var i) && seen.Add(i) && i > max)\n                    max = i;\n            }\n            return max;\n        }\n\n        private static bool TryGetPropCI(JsonElement obj, string name, out JsonElement value)\n        {\n            foreach (var p in obj.EnumerateObject())\n            {\n                if (string.Equals(p.Name, name, StringComparison.OrdinalIgnoreCase))\n                {\n                    value = p.Value;\n                    return true;\n                }\n            }\n            value = default;\n            return false;\n        }\n\n        private DTO.TemplateMetaDto MapRowToMeta(dynamic row)\n        {\n            var meta = new DTO.TemplateMetaDto\n            {\n                Provider = row.Provider ?? \"\",\n                TemplateId = row.ExternalId ?? row.TemplateId ?? \"\",\n                TemplateName = row.Name ?? \"\",\n                Language = row.Language ?? \"en_US\",\n                HasHeaderMedia = false,\n                HeaderType = \"\" // will be set from RawJson\n            };\n\n            // --- Detect header kind & body placeholders from RawJson (preferred) ---\n            try\n            {\n                string raw = row.RawJson ?? \"\"; // ✅ your entity has RawJson, not DefinitionJson\n                if (!string.IsNullOrWhiteSpace(raw))\n                {\n                    using var doc = JsonDocument.Parse(raw);\n                    var root = doc.RootElement;\n\n                    // components (case-insensitive)\n                    if (TryGetPropCI(root, \"components\", out var comps) && comps.ValueKind == JsonValueKind.Array)\n                    {\n                        foreach (var c in comps.EnumerateArray())\n                        {\n                            // type (HEADER/BODY)\n                            if (!TryGetPropCI(c, \"type\", out var typeEl) || typeEl.ValueKind != JsonValueKind.String)\n                                continue;\n\n                            var type = typeEl.GetString();\n                            if (string.Equals(type, \"HEADER\", StringComparison.OrdinalIgnoreCase))\n                            {\n                                // format (IMAGE/VIDEO/DOCUMENT/TEXT)\n                                string fmt = \"\";\n                                if (TryGetPropCI(c, \"format\", out var fmtEl) && fmtEl.ValueKind == JsonValueKind.String)\n                                    fmt = (fmtEl.GetString() ?? \"\").ToUpperInvariant();\n\n                                switch (fmt)\n                                {\n                                    case \"IMAGE\": meta.HasHeaderMedia = true; meta.HeaderType = \"IMAGE\"; break;\n                                    case \"VIDEO\": meta.HasHeaderMedia = true; meta.HeaderType = \"VIDEO\"; break;\n                                    case \"DOCUMENT\": meta.HasHeaderMedia = true; meta.HeaderType = \"DOCUMENT\"; break;\n                                    case \"TEXT\": meta.HasHeaderMedia = false; meta.HeaderType = \"TEXT\"; break;\n                                    default:         /* unknown */ break;\n                                }\n                            }\n                            else if (string.Equals(type, \"BODY\", StringComparison.OrdinalIgnoreCase))\n                            {\n                                string? bodyText = null;\n                                if (TryGetPropCI(c, \"text\", out var tx) && tx.ValueKind == JsonValueKind.String)\n                                    bodyText = tx.GetString();\n                                else\n                                    bodyText = row.Body; // fallback\n\n                                var count = DistinctMaxPlaceholderIndex(bodyText);\n                                meta.BodyPlaceholders = Enumerable.Range(1, Math.Max(0, count))\n                                                                  .Select(i => new DTO.PlaceholderSlot { Index = i })\n                                                                  .ToList();\n                            }\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogDebug(ex, \"RawJson parse failed for template {TemplateName}\", (string)(row.Name ?? \"(unknown)\"));\n            }\n\n            // --- Fallbacks when raw json missing/partial ---\n            if (string.IsNullOrEmpty(meta.HeaderType) && (row.HasImageHeader ?? false))\n            {\n                meta.HasHeaderMedia = true;\n                meta.HeaderType = \"IMAGE\"; // legacy flag\n            }\n\n            if (meta.BodyPlaceholders == null || meta.BodyPlaceholders.Count == 0)\n            {\n                int count;\n                try { count = Convert.ToInt32(row.PlaceholderCount ?? 0); } catch { count = 0; }\n                meta.BodyPlaceholders = Enumerable.Range(1, Math.Max(0, count))\n                                                  .Select(i => new DTO.PlaceholderSlot { Index = i })\n                                                  .ToList();\n            }\n\n            // --- ButtonsJson → TemplateButtonMeta[] (robust parsing) ---\n            meta.Buttons = new List<DTO.TemplateButtonMeta>();\n            try\n            {\n                string buttonsJson = row.ButtonsJson ?? \"\";\n                if (!string.IsNullOrWhiteSpace(buttonsJson))\n                {\n                    using var bdoc = JsonDocument.Parse(buttonsJson);\n                    if (bdoc.RootElement.ValueKind == JsonValueKind.Array)\n                    {\n                        int i = 0;\n                        foreach (var el in bdoc.RootElement.EnumerateArray())\n                        {\n                            var type = el.TryGetProperty(\"Type\", out var pType) ? pType.GetString() ?? \"\"\n                                     : el.TryGetProperty(\"type\", out var pType2) ? pType2.GetString() ?? \"\" : \"\";\n\n                            var text = el.TryGetProperty(\"Text\", out var pText) ? pText.GetString() ?? \"\"\n                                     : el.TryGetProperty(\"text\", out var pText2) ? pText2.GetString() ?? \"\" : \"\";\n\n                            // value can be ParameterValue / parameterValue / url / Url / value\n                            string? value =\n                                el.TryGetProperty(\"ParameterValue\", out var pVal1) ? pVal1.GetString() :\n                                el.TryGetProperty(\"parameterValue\", out var pVal1b) ? pVal1b.GetString() :\n                                el.TryGetProperty(\"url\", out var pVal2) ? pVal2.GetString() :\n                                el.TryGetProperty(\"Url\", out var pVal2b) ? pVal2b.GetString() :\n                                el.TryGetProperty(\"value\", out var pVal3) ? pVal3.GetString() :\n                                null;\n\n                            // order can be Index/index/Position/position; default to 1-based\n                            int order =\n                                (el.TryGetProperty(\"Index\", out var pIdx) && pIdx.ValueKind == JsonValueKind.Number) ? pIdx.GetInt32() :\n                                (el.TryGetProperty(\"index\", out var pIdx2) && pIdx2.ValueKind == JsonValueKind.Number) ? pIdx2.GetInt32() :\n                                (el.TryGetProperty(\"Position\", out var pPos) && pPos.ValueKind == JsonValueKind.Number) ? pPos.GetInt32() :\n                                (el.TryGetProperty(\"position\", out var pPos2) && pPos2.ValueKind == JsonValueKind.Number) ? pPos2.GetInt32() :\n                                (i + 1);\n\n                            meta.Buttons.Add(new DTO.TemplateButtonMeta\n                            {\n                                Type = type,\n                                Text = text,\n                                Value = value,\n                                Order = order\n                            });\n                            i++;\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogWarning(ex, \"Failed to parse ButtonsJson for template {TemplateName}\", (string)(row.Name ?? \"(unknown)\"));\n            }\n\n            return meta;\n        }\n\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs",
      "sha256": "24dec5fef8a7e43f47db71b07d2067310ec6a8bfa2004006a671f06a7be8a706",
      "language": "csharp",
      "size": 1573,
      "content": "// 📄 File: WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs\nusing FluentValidation;\nusing xbytechat_api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Validators\n{\n    public class SaveWhatsAppSettingValidator : AbstractValidator<SaveWhatsAppSettingDto>\n    {\n        public SaveWhatsAppSettingValidator()\n        {\n            RuleFor(x => x.Provider)\n                .NotEmpty().WithMessage(\"Provider is required.\")\n                .Must(p => p == \"pinnacle\" || p == \"meta_cloud\")\n                .WithMessage(\"Provider must be 'pinnacle' or 'meta_cloud'.\");\n\n            RuleFor(x => x.ApiUrl)\n                .NotEmpty().WithMessage(\"API URL is required.\");\n\n            // Meta Cloud requirements\n            When(x => x.Provider == \"meta_cloud\", () =>\n            {\n                RuleFor(x => x.ApiKey)\n                    .NotEmpty().WithMessage(\"API ApiKey is required for Meta Cloud.\");\n                RuleFor(x => x.PhoneNumberId)\n                    .NotEmpty().WithMessage(\"Phone Number ID is required for Meta Cloud.\");\n            });\n\n            // Pinbot requirements\n            When(x => x.Provider == \"pinnacle\", () =>\n            {\n                RuleFor(x => x.ApiKey)\n                    .NotEmpty().WithMessage(\"API Key is required for Pinbot.\");\n                RuleFor(x => x)\n                    .Must(x => !string.IsNullOrWhiteSpace(x.PhoneNumberId) || !string.IsNullOrWhiteSpace(x.WabaId))\n                    .WithMessage(\"Provide Phone Number ID or WABA ID for Pinbot.\");\n            });\n        }\n    }\n}\n"
    }
  ]
}
