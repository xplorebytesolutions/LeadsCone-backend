{
  "name": "xbytechat-api/Features/CustomeApi",
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CustomeApi/Auth/StaticApiKeyOptions.cs",
      "sha256": "ecf8c607a6022271bcd7228448d61a6fc16c9422cd51362b665a875413409fb9",
      "language": "csharp",
      "size": 196,
      "content": "namespace xbytechat.api.Features.CustomeApi.Auth\n{\n    public sealed class StaticApiKeyOptions\n    {\n        public string? Key { get; set; }\n        public Guid? BusinessId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Controllers/CustomApiController.cs",
      "sha256": "bfd039e2c624dbefbd14dbaef2d68318799fee81a833094d7bd401b6b1c8a995",
      "language": "csharp",
      "size": 2694,
      "content": "using System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\nusing xbytechat.api.Features.CustomeApi.Auth;\nusing xbytechat.api.Features.CustomeApi.DTOs;\nusing xbytechat.api.Features.CustomeApi.Services;\n\nnamespace xbytechat.api.Features.CustomeApi.Controllers\n{\n    [ApiController]\n    [Route(\"api/custom\")]\n    public sealed class CustomApiController : ControllerBase\n    {\n        private readonly ICustomApiService _service;\n        private readonly StaticApiKeyOptions _api;\n        private readonly CtaJourneyPublisher _journeyPublisher;\n        public CustomApiController(ICustomApiService service, IOptions<StaticApiKeyOptions> api, CtaJourneyPublisher journeyPublisher)\n        {\n            _service = service;\n            _api = api.Value;\n            _journeyPublisher = journeyPublisher;\n        }\n\n        /// <summary>\n        /// Sends a WhatsApp template (optionally with VIDEO header) by phoneNumberId.\n        /// Body: { phoneNumberId, to, templateId, variables:{ \"1\":\"...\" }, videoUrl, flowConfigId }\n        /// </summary>\n        [HttpPost(\"sendflow\")]\n        [Consumes(\"application/json\")]\n        [Produces(\"application/json\")]\n        [ProducesResponseType(typeof(object), 200)]\n        [ProducesResponseType(typeof(object), 400)]\n        [ProducesResponseType(401)]\n        public async Task<IActionResult> SendTemplate([FromBody] DirectTemplateSendRequest req, CancellationToken ct = default)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(new { success = false, message = \"‚ùå Invalid request body.\", errors = ModelState });\n\n            // Minimal shared-secret auth\n            var provided = Request.Headers[\"X-Auth-Key\"].FirstOrDefault()\n                           ?? Request.Headers[\"Authorization\"].FirstOrDefault();\n\n            if (string.IsNullOrWhiteSpace(_api.Key) ||\n                string.IsNullOrWhiteSpace(provided) ||\n                !string.Equals(provided, _api.Key, System.StringComparison.Ordinal))\n            {\n                return Unauthorized(new { success = false, message = \"üîí Invalid or missing key.\" });\n            }\n\n            var result = await _service.SendTemplateAsync(req, ct);\n            return result.Success ? Ok(result) : BadRequest(result);\n        }\n        [HttpPost(\"test-webhook\")]\n        public async Task<IActionResult> TestWebhook([FromQuery] Guid businessId, CancellationToken ct)\n        {\n            var (ok, msg) = await _journeyPublisher.ValidateAndPingAsync(businessId, ct);\n            return ok ? Ok(new { ok, message = msg }) : BadRequest(new { ok, message = msg });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Controllers/DevCustomerWebhookConfigController.cs",
      "sha256": "91f4787045211df3c7a8dea1c7dce85901295b74050cad5ddf9c55c6b72f100e",
      "language": "csharp",
      "size": 674,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\n\n[ApiController]\n[Route(\"api/getflow\")]\npublic class DevCustomerWebhookConfigController : ControllerBase\n{\n    private readonly AppDbContext _db;\n    public DevCustomerWebhookConfigController(AppDbContext db) => _db = db;\n\n    [HttpGet(\"{businessId:guid}\")]\n    public async Task<IActionResult> Get(Guid businessId)\n    {\n        var cfg = await _db.CustomerWebhookConfigs\n            .AsNoTracking()\n            .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n        return Ok(cfg is null ? new { found = false } : new { found = true, url = cfg.Url });\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/DTOs/CtaJourneyEventDto.cs",
      "sha256": "460d6c60802762d203fe59b21a58b49a9cdc29cb9758edb878da461b5bf22f4c",
      "language": "csharp",
      "size": 964,
      "content": "using System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.CustomeApi.Models\n{\n    public sealed class CtaJourneyEventDto\n    {\n        // User‚Äôs expected fields (nulls allowed when we don‚Äôt have them)\n        public string? userId { get; set; }            // we don‚Äôt have this ‚Üí null\n        public string? userName { get; set; }          // our Contact.ProfileName or Contact.Name\n        public string? userPhone { get; set; }         // digits only\n        public string? botId { get; set; }             // your WA PhoneNumberId or BusinessNumber (see 2.4)\n        public string? categoryBrowsed { get; set; }   // optional, keep null\n        public string? productBrowsed { get; set; }    // optional, keep null\n\n        // REQUIRED by partner: this is the key we must match\n        //public string CTAJourney { get; set; } = string.Empty;\n        [JsonPropertyName(\"CTAJourney\")]\n        public string? CTAJourney { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/DTOs/DirectTemplateSendRequest.cs",
      "sha256": "d6d17b04a27f1798034ac60813911ab6b34f19e39a5ee69b272d8c88da4f85f1",
      "language": "csharp",
      "size": 2015,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CustomeApi.DTOs\n{\n    public sealed class DirectTemplateSendRequest\n    {\n        [Required] public string PhoneNumberId { get; set; } = string.Empty;\n        [Required] public string To { get; set; } = string.Empty;\n        [Required] public string TemplateId { get; set; } = string.Empty;\n\n        /// <summary>Body variable map for {{1}}, {{2}}, ...</summary>\n        public Dictionary<string, string>? Variables { get; set; }\n\n        /// <summary>Optional: provide a https .mp4 to attach a VIDEO header.</summary>\n        public string? VideoUrl { get; set; }\n\n        /// <summary>Optional CTA flow to link with this send (for click‚Üínext-step mapping and analytics).</summary>\n        public Guid? FlowConfigId { get; set; }\n    }\n}\n\n\n//using System; // <-- needed for Guid\n//using System.Collections.Generic;\n//using System.ComponentModel.DataAnnotations;\n\n//namespace xbytechat.api.Features.CustomeApi.DTOs\n//{\n//    public sealed class DirectTemplateSendRequest\n//    {\n//        [Required] public string PhoneNumberId { get; set; } = string.Empty;\n//        [Required] public string To { get; set; } = string.Empty;\n//        [Required] public string TemplateId { get; set; } = string.Empty;\n\n//        // Optional: start (link) a CTA flow on this send (we'll stamp CTAFlowConfigId/StepId on MessageLog)\n//        public Guid? FlowConfigId { get; set; }   // <---- add this\n\n//        // Body variables as WhatsApp {{1}}, {{2}}, ...\n//        public Dictionary<string, string>? Variables { get; set; }\n\n//        // Optional header media, validated based on template header type:\n//        public string? ImageUrl { get; set; } // IMAGE header\n//        public string? VideoUrl { get; set; } // VIDEO header\n//        public string? DocumentUrl { get; set; } // DOCUMENT/PDF header\n//        public string? DocumentFilename { get; set; } // optional nice filename\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/DTOs/DirectTemplateSendRequestValidator.cs",
      "sha256": "613a944117e95f84b8286c1d19d3945f5d54eb046324aba873d203a3893ec584",
      "language": "csharp",
      "size": 629,
      "content": "using FluentValidation;\n\nnamespace xbytechat.api.Features.CustomeApi.DTOs\n{\n    public sealed class DirectTemplateSendRequestValidator : AbstractValidator<DirectTemplateSendRequest>\n    {\n        public DirectTemplateSendRequestValidator()\n        {\n            RuleFor(x => x.PhoneNumberId).NotEmpty().WithMessage(\"phoneNumberId is required.\");\n            RuleFor(x => x.To).NotEmpty().WithMessage(\"'to' (recipient) is required.\");\n            RuleFor(x => x.TemplateId).NotEmpty().WithMessage(\"templateId is required.\");\n            // videoUrl required only if template header == VIDEO (checked in service)\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Models/ContactJourneyState.cs",
      "sha256": "133720f1453770ad09bd2c9bd2551f343f20df6ce27a0b88a2a7234a20e3157c",
      "language": "csharp",
      "size": 1101,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace xbytechat.api.Features.CustomeApi.Models\n{\n    // One row per (business, flow, contact). Enforce single row via unique index.\n    [Index(nameof(BusinessId), nameof(FlowId), nameof(ContactPhone), IsUnique = true)]\n    public class ContactJourneyState\n    {\n        [Key] public Guid Id { get; set; }\n\n        [Required] public Guid BusinessId { get; set; }\n\n        [Required] public Guid FlowId { get; set; }\n\n        // Store digits-only (same as your click processor does).\n        [Required, MaxLength(32)]\n        public string ContactPhone { get; set; } = default!;\n\n        // Running journey like: \"Yes/No/Bahut Achha\"\n        [Required] public string JourneyText { get; set; } = string.Empty;\n\n        public int ClickCount { get; set; } = 0;\n\n        [MaxLength(256)]\n        public string? LastButtonText { get; set; }\n\n        [Required] public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        [Required] public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Models/CustomerWebhookConfig.cs",
      "sha256": "c08fa705d23cd231999b48da0668ec8e9aef6db72aec24a10a7c583ee7db94e4",
      "language": "csharp",
      "size": 693,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CustomeApi.Models\n{\n    public class CustomerWebhookConfig\n    {\n        [Key] public Guid Id { get; set; }\n\n        [Required] public Guid BusinessId { get; set; }\n\n        [Required, MaxLength(1024)]\n        public string Url { get; set; } = default!;  // customer API endpoint to receive CTAJourney\n\n        [MaxLength(2048)]\n        public string? BearerToken { get; set; }     // optional \"Authorization: Bearer <token>\"\n\n        public bool IsActive { get; set; } = true;\n\n        [Required] public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Services/CtaJourneyMapper.cs",
      "sha256": "a81a252168491114749f202c01b5b72c31882906808ad46e93e346677cbbb7ad",
      "language": "csharp",
      "size": 1710,
      "content": "using System.Text.RegularExpressions;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.Features.CustomeApi.Services\n{\n    public static class CtaJourneyMapper\n    {\n        private static string Digits(string? s) =>\n            string.IsNullOrWhiteSpace(s) ? \"\" : Regex.Replace(s, \"[^0-9]\", \"\");\n\n    \n        public static Models.CtaJourneyEventDto Build(\n            string journeyKey,          // REQUIRED -> \"product_view_to_interest\" (your must-match)\n            Contact? contact = null,\n            string? profileName = null,\n            string? userId = null,      // we don‚Äôt have: pass null\n            string? phoneNumberId = null,   // Meta phone_number_id\n            string? businessDisplayPhone = null, // WhatsAppBusinessNumber\n            string? categoryBrowsed = null,\n            string? productBrowsed = null\n        )\n        {\n            // Choose botId priority: phoneNumberId (Meta) -> business WA number -> null\n            var botId = !string.IsNullOrWhiteSpace(phoneNumberId)\n                ? phoneNumberId!.Trim()\n                : (!string.IsNullOrWhiteSpace(businessDisplayPhone) ? Digits(businessDisplayPhone) : null);\n\n            return new Models.CtaJourneyEventDto\n            {\n                userId = userId, // normally null (we don‚Äôt store)\n                userName = profileName ?? contact?.ProfileName ?? contact?.Name,\n                userPhone = Digits(contact?.PhoneNumber),\n                botId = botId,\n                categoryBrowsed = categoryBrowsed,   // keep null \n                productBrowsed = productBrowsed,     // keep null \n                CTAJourney = journeyKey               // e.g. \"Button Name\"\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Services/CtaJourneyPublisher.cs",
      "sha256": "d6cc88d790dc147459324a25a78082d154f457abec1fd7011683edc9e77994b9",
      "language": "csharp",
      "size": 13867,
      "content": "using System;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.CustomeApi.Services\n{\n    public class CtaJourneyPublisher : ICtaJourneyPublisher\n    {\n        private readonly AppDbContext _db;\n        private readonly IHttpClientFactory _httpFactory;\n        private readonly ILogger<CtaJourneyPublisher> _log;\n\n        private static readonly JsonSerializerOptions _json = new(JsonSerializerDefaults.Web);\n\n        public CtaJourneyPublisher(\n            AppDbContext db,\n            IHttpClientFactory httpFactory,\n            ILogger<CtaJourneyPublisher> log)\n        {\n            _db = db;\n            _httpFactory = httpFactory;\n            _log = log;\n        }\n\n        public async Task PublishAsync(Guid businessId, Models.CtaJourneyEventDto dto, CancellationToken ct = default)\n        {\n            // Load all active endpoints (only for this one customer right now)\n            var endpoints = await _db.CustomerWebhookConfigs\n                .AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.IsActive)\n                .ToListAsync(ct);\n\n            if (endpoints.Count == 0)\n            {\n                _log.LogInformation(\"CTA Journey: no active endpoints for business {Biz}\", businessId);\n                return;\n            }\n\n            var client = _httpFactory.CreateClient(\"customapi-webhooks\"); // registered in DI\n\n            foreach (var ep in endpoints)\n            {\n                // Serialize once per endpoint\n                var body = JsonSerializer.Serialize(dto, _json);\n\n                const int maxAttempts = 3;\n                for (int attempt = 1; attempt <= maxAttempts; attempt++)\n                {\n                    try\n                    {\n                        using var req = new HttpRequestMessage(HttpMethod.Post, ep.Url)\n                        {\n                            Content = new StringContent(body, Encoding.UTF8, \"application/json\")\n                        };\n\n                        if (!string.IsNullOrWhiteSpace(ep.BearerToken))\n                            req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", ep.BearerToken);\n\n                        var resp = await client.SendAsync(req, ct);\n                        var code = (int)resp.StatusCode;\n\n                        if (code >= 200 && code < 300)\n                        {\n                            _log.LogInformation(\"CTA Journey posted to {Url} | {Status}\", ep.Url, code);\n                            break; // success; stop retrying this endpoint\n                        }\n\n                        var errText = await resp.Content.ReadAsStringAsync(ct);\n                        _log.LogWarning(\"CTA Journey post failed ({Code}) to {Url}: {Body}\", code, ep.Url, errText);\n\n                        if (attempt == maxAttempts) break;\n                        await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct); // 2s, 4s backoff\n                    }\n                    catch (Exception ex)\n                    {\n                        _log.LogWarning(ex, \"CTA Journey post exception to {Url} (attempt {Attempt})\", ep.Url, attempt);\n                        if (attempt == maxAttempts) break;\n                        await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct);\n                    }\n                }\n            }\n        }\n\n        public async Task<(bool ok, string message)> ValidateAndPingAsync(Guid businessId, CancellationToken ct = default)\n        {\n            var ep = await _db.CustomerWebhookConfigs\n                .AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.IsActive)\n                .OrderByDescending(x => x.UpdatedAt ?? x.CreatedAt)\n                .FirstOrDefaultAsync(ct);\n\n            if (ep == null) return (false, \"No active CustomerWebhookConfig found for this business.\");\n            if (string.IsNullOrWhiteSpace(ep.Url)) return (false, \"Endpoint URL is empty.\");\n            if (!Uri.TryCreate(ep.Url, UriKind.Absolute, out var uri) || uri.Scheme != Uri.UriSchemeHttps)\n                return (false, \"Endpoint URL must be an absolute https URL.\");\n\n            var probe = new Models.CtaJourneyEventDto\n            {\n                userId = null,\n                userName = \"probe\",\n                userPhone = \"0000000000\",\n                botId = \"0000000000\",\n                categoryBrowsed = null,\n                productBrowsed = null,\n                CTAJourney = \"probe_to_probe\"\n            };\n\n            var client = _httpFactory.CreateClient(\"customapi-webhooks\");\n            var body = JsonSerializer.Serialize(probe, _json);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, ep.Url)\n            {\n                Content = new StringContent(body, Encoding.UTF8, \"application/json\")\n            };\n\n            req.Headers.TryAddWithoutValidation(\"X-XBS-Test\", \"1\");\n\n            if (!string.IsNullOrWhiteSpace(ep.BearerToken))\n                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", ep.BearerToken);\n\n            try\n            {\n                var resp = await client.SendAsync(req, ct);\n                var code = (int)resp.StatusCode;\n\n                if (code >= 200 && code < 300) return (true, $\"OK ({code})\");\n\n                var text = await resp.Content.ReadAsStringAsync(ct);\n                return (false, $\"HTTP {code}: {text}\");\n            }\n            catch (Exception ex)\n            {\n                return (false, $\"Exception: {ex.Message}\");\n            }\n        }\n    }\n}\n\n\n//using System;\n//using System.Linq;\n//using System.Net.Http;\n//using System.Net.Http.Headers;\n//using System.Text;\n//using System.Text.Json;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.Logging;\n\n//namespace xbytechat.api.Features.CustomeApi.Services\n//{\n//    public class CtaJourneyPublisher : ICtaJourneyPublisher\n//    {\n//        private readonly AppDbContext _db;\n//        private readonly IHttpClientFactory _httpFactory;\n//        private readonly ILogger<CtaJourneyPublisher> _log;\n\n//        private static readonly JsonSerializerOptions _json =\n//            new(JsonSerializerDefaults.Web);\n\n//        public CtaJourneyPublisher(AppDbContext db, IHttpClientFactory httpFactory, ILogger<CtaJourneyPublisher> log)\n//        {\n//            _db = db;\n//            _httpFactory = httpFactory;\n//            _log = log;\n//        }\n\n\n//        public async Task PublishAsync(Guid businessId, Models.CtaJourneyEventDto dto, CancellationToken ct = default)\n//        {\n//            // load all active endpoints (only for this one customer right now)\n//            var endpoints = await _db.CustomerWebhookConfigs\n//                .AsNoTracking()\n//                .Where(x => x.BusinessId == businessId && x.IsActive)\n//                .ToListAsync(ct);\n\n//            if (endpoints.Count == 0)\n//            {\n//                _log.LogInformation(\"CTA Journey: no active endpoints for business {Biz}\", businessId);\n//                return;\n//            }\n\n//            var client = _httpFactory.CreateClient(\"customapi-webhooks\"); // registered in DI\n//            var body = JsonSerializer.Serialize(dto, _json);\n//            using var content = new StringContent(body, Encoding.UTF8, \"application/json\");\n//            foreach (var ep in endpoints)\n//            {\n//                // simple retry (3 attempts, 2s/4s backoff)\n//                const int maxAttempts = 3;\n//                for (int attempt = 1; attempt <= maxAttempts; attempt++)\n//                {\n//                    try\n//                    {\n//                        using var req = new HttpRequestMessage(HttpMethod.Post, ep.Url)\n//                        {\n//                            Content = new StringContent(\n//                                JsonSerializer.Serialize(dto, _json),   // fresh content every send\n//                                Encoding.UTF8,\n//                                \"application/json\")\n//                        };\n\n//                        if (!string.IsNullOrWhiteSpace(ep.BearerToken))\n//                            req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", ep.BearerToken);\n\n//                        var resp = await client.SendAsync(req, ct);\n//                        if ((int)resp.StatusCode >= 200 && (int)resp.StatusCode < 300)\n//                        {\n//                            _log.LogInformation(\"CTA Journey posted to {Url} | {Status}\", ep.Url, (int)resp.StatusCode);\n//                            break;\n//                        }\n\n//                        var bodyText = await resp.Content.ReadAsStringAsync(ct);\n//                        _log.LogWarning(\"CTA Journey post failed ({Code}) to {Url}: {Body}\",\n//                            (int)resp.StatusCode, ep.Url, bodyText);\n\n//                        if (attempt == maxAttempts) break;\n//                        await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct);\n//                    }\n//                    catch (Exception ex)\n//                    {\n//                        _log.LogWarning(ex, \"CTA Journey post exception to {Url} (attempt {Attempt})\", ep.Url, attempt);\n//                        if (attempt == maxAttempts) break;\n//                        await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct);\n//                    }\n//                }\n//            }\n\n//            //foreach (var ep in endpoints)\n//            //{\n//            //    using var req = new HttpRequestMessage(HttpMethod.Post, ep.Url) { Content = content };\n\n//            //    // optional Bearer only (we're keeping it simple)\n//            //    if (!string.IsNullOrWhiteSpace(ep.BearerToken))\n//            //        req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", ep.BearerToken);\n\n//            //    // simple retry (3 attempts, 2s/4s backoff)\n//            //    const int maxAttempts = 3;\n//            //    for (int attempt = 1; attempt <= maxAttempts; attempt++)\n//            //    {\n//            //        try\n//            //        {\n//            //            var resp = await client.SendAsync(req, ct);\n//            //            if ((int)resp.StatusCode >= 200 && (int)resp.StatusCode < 300)\n//            //            {\n//            //                _log.LogInformation(\"CTA Journey posted to {Url} | {Status}\", ep.Url, (int)resp.StatusCode);\n//            //                break;\n//            //            }\n\n//            //            var bodyText = await resp.Content.ReadAsStringAsync(ct);\n//            //            _log.LogWarning(\"CTA Journey post failed ({Code}) to {Url}: {Body}\",\n//            //                (int)resp.StatusCode, ep.Url, bodyText);\n\n//            //            if (attempt == maxAttempts) break;\n//            //            await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct);\n//            //        }\n//            //        catch (Exception ex)\n//            //        {\n//            //            _log.LogWarning(ex, \"CTA Journey post exception to {Url} (attempt {Attempt})\", ep.Url, attempt);\n//            //            if (attempt == maxAttempts) break;\n//            //            await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct);\n//            //        }\n//            //    }\n//            //}\n//        }\n//        public async Task<(bool ok, string message)> ValidateAndPingAsync(Guid businessId, CancellationToken ct = default)\n//        {\n//            var ep = await _db.CustomerWebhookConfigs\n//                .AsNoTracking()\n//                .Where(x => x.BusinessId == businessId && x.IsActive)\n//                .OrderByDescending(x => x.UpdatedAt ?? x.CreatedAt)\n//                .FirstOrDefaultAsync(ct);\n\n//            if (ep == null) return (false, \"No active CustomerWebhookConfig found for this business.\");\n//            if (string.IsNullOrWhiteSpace(ep.Url)) return (false, \"Endpoint URL is empty.\");\n//            if (!Uri.TryCreate(ep.Url, UriKind.Absolute, out var uri) || uri.Scheme != Uri.UriSchemeHttps)\n//                return (false, \"Endpoint URL must be an absolute https URL.\");\n\n//            var probe = new Models.CtaJourneyEventDto\n//            {\n//                userId = null,\n//                userName = \"probe\",\n//                userPhone = \"0000000000\",\n//                botId = \"0000000000\",\n//                categoryBrowsed = null,\n//                productBrowsed = null,\n//                CTAJourney = \"probe_to_probe\"\n//            };\n\n//            var client = _httpFactory.CreateClient(\"customapi-webhooks\");\n//            var body = JsonSerializer.Serialize(probe, _json);\n\n//            using var req = new HttpRequestMessage(HttpMethod.Post, ep.Url)\n//            {\n//                Content = new StringContent(body, Encoding.UTF8, \"application/json\")\n//            };\n//            req.Headers.TryAddWithoutValidation(\"X-XBS-Test\", \"1\");\n\n//            if (!string.IsNullOrWhiteSpace(ep.BearerToken))\n//                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", ep.BearerToken);\n\n//            try\n//            {\n//                var resp = await client.SendAsync(req, ct);\n//                var code = (int)resp.StatusCode;\n//                if (code >= 200 && code < 300) return (true, $\"OK ({code})\");\n//                var text = await resp.Content.ReadAsStringAsync(ct);\n//                return (false, $\"HTTP {code}: {text}\");\n//            }\n//            catch (Exception ex)\n//            {\n//                return (false, $\"Exception: {ex.Message}\");\n//            }\n//        }\n\n//    }\n//}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Services/CustomApiService.cs",
      "sha256": "78a7353f5a8e6c720e2640c507df52730cd9b75e8803abe3590bf51c67a63259",
      "language": "csharp",
      "size": 27860,
      "content": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json; \nusing xbytechat.api.Features.CustomeApi.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;                       \nusing xbytechat_api.Features.Billing.Services;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Helpers;\nusing System.Text.RegularExpressions;      \n\nnamespace xbytechat.api.Features.CustomeApi.Services\n{\n    public sealed class CustomApiService : ICustomApiService\n    {\n        private readonly AppDbContext _context;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcher;\n        private readonly IMessageEngineService _messageEngine;\n        private readonly IBillingIngestService _billingIngest;\n        private readonly ILogger<CustomApiService> _logger;\n\n        public CustomApiService(\n            AppDbContext context,\n            IWhatsAppTemplateFetcherService templateFetcher,\n            IMessageEngineService messageEngine,\n            IBillingIngestService billingIngest,\n            ILogger<CustomApiService> logger)\n        {\n            _context = context;\n            _templateFetcher = templateFetcher;\n            _messageEngine = messageEngine;\n            _billingIngest = billingIngest;\n            _logger = logger;\n        }\n\n        public async Task<ResponseResult> SendTemplateAsync(DirectTemplateSendRequest req, CancellationToken ct = default)\n        {\n            try\n            {\n                var toNormalized = NormalizePhone(req.To);\n                var reqId = Guid.NewGuid();\n\n                // 1) Resolve WhatsApp sender by phoneNumberId (across all businesses)\n                //var ws = await _context.WhatsAppPhoneNumbers.AsNoTracking()\n                //    .Where(s => s.IsActive && s.PhoneNumberId == req.PhoneNumberId)\n                //    .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                //    .FirstOrDefaultAsync(ct);\n\n                var ws = await _context.WhatsAppPhoneNumbers.AsNoTracking()\n                    .Where(s =>  s.IsActive && s.PhoneNumberId == req.PhoneNumberId)\n                    .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                   .FirstOrDefaultAsync(ct);\n\n\n\n                if (ws == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Active WhatsApp sender (phoneNumberId) not found.\");\n\n                var businessId = ws.BusinessId;\n                var provider = (ws.Provider ?? \"\").Trim().ToUpperInvariant(); // \"META_CLOUD\" | \"PINNACLE\"\n                if (provider != \"META_CLOUD\" && provider != \"PINNACLE\")\n                    return ResponseResult.ErrorInfo($\"‚ùå Unsupported provider: {provider}\");\n\n                _logger.LogInformation(\n                    \"[CustomAPI:{ReqId}] Begin send. biz={BusinessId} pnid={PhoneNumberId} to={MaskedTo} template={TemplateId}\",\n                    reqId, businessId, req.PhoneNumberId, Mask(toNormalized), req.TemplateId);\n\n                // 2) Fetch template meta (for language + buttons)\n                var meta = await _templateFetcher.GetTemplateByNameAsync(businessId, req.TemplateId, includeButtons: true);\n                if (meta == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Template metadata not found for the given templateId.\");\n\n                var languageCode = (meta.Language ?? \"\").Trim();\n                if (string.IsNullOrWhiteSpace(languageCode))\n                    return ResponseResult.ErrorInfo(\"‚ùå Template language not resolved from provider metadata.\");\n\n                // 3) Header decision\n                var isVideoHeader = !string.IsNullOrWhiteSpace(req.VideoUrl);\n                if (isVideoHeader && !IsHttpsMp4Url(req.VideoUrl, out var vErr))\n                    return ResponseResult.ErrorInfo(\"üö´ Invalid VideoUrl.\", vErr);\n\n                // 4) Build components\n                var (components, whyBuildFail) = BuildComponents(isVideoHeader, req.Variables, req.VideoUrl);\n                if (components == null)\n                {\n                    _logger.LogWarning(\"[CustomAPI:{ReqId}] Component build failed: {Err}\", reqId, whyBuildFail);\n                    return ResponseResult.ErrorInfo($\"üö´ Component build failed: {whyBuildFail}\");\n                }\n\n                // 5) Snapshot first 3 buttons (optional analytics)\n                string? buttonBundleJson = null;\n                try\n                {\n                    if (meta.ButtonParams is { Count: > 0 })\n                    {\n                        var bundle = meta.ButtonParams.Take(3)\n                            .Select((b, i) => new\n                            {\n                                i,\n                                position = i + 1,\n                                text = (b.Text ?? \"\").Trim(),\n                                type = b.Type,\n                                subType = b.SubType\n                            }).ToList();\n                        buttonBundleJson = JsonConvert.SerializeObject(bundle);\n                    }\n                }\n                catch { /* best-effort snapshot */ }\n\n                // 6) Entry step for linked flow (optional)\n                Guid? entryStepId = null;\n                if (req.FlowConfigId.HasValue)\n                {\n                    entryStepId = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == req.FlowConfigId.Value)\n                        .OrderBy(s => s.StepOrder)\n                        .Select(s => (Guid?)s.Id)\n                        .FirstOrDefaultAsync(ct);\n                }\n\n                // 7) Build provider payload\n                var languageField = new { policy = \"deterministic\", code = string.IsNullOrWhiteSpace(languageCode) ? \"en_US\" : languageCode };\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = toNormalized,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = req.TemplateId,\n                        language = languageField,\n                        components\n                    }\n                };\n\n                _logger.LogInformation(\"[CustomAPI:{ReqId}] Sending {Template} to {To} via {Provider} (PNID={PNID}) video={Video}\",\n                    reqId, req.TemplateId, Mask(toNormalized), provider, req.PhoneNumberId, isVideoHeader);\n\n                // 8) Send\n                var result = await _messageEngine.SendPayloadAsync(\n                    businessId: businessId,\n                    provider: provider,\n                    payload: payload,\n                    phoneNumberId: req.PhoneNumberId\n                );\n\n                // 9) Log + billing\n                var now = DateTime.UtcNow;\n                var logId = Guid.NewGuid();\n\n                _context.MessageLogs.Add(new MessageLog\n                {\n                    Id = logId,\n                    BusinessId = businessId,\n                    CampaignId = null,\n                    RecipientNumber = toNormalized,\n                    MessageContent = req.TemplateId,\n                    MediaUrl = isVideoHeader ? req.VideoUrl : null,\n                    Status = result.Success ? \"Sent\" : \"Failed\",\n                    MessageId = result.MessageId,          // or just ProviderMessageId; keep one if you want to de-dup\n                    ProviderMessageId = result.MessageId,\n                    ErrorMessage = result.ErrorMessage,\n                    RawResponse = result.RawResponse,\n                    CreatedAt = now,\n                    SentAt = result.Success ? now : (DateTime?)null,\n                    Source = \"custom_api\",\n                    Provider = provider,\n                    CTAFlowConfigId = req.FlowConfigId,\n                    CTAFlowStepId = entryStepId,\n                    ButtonBundleJson = buttonBundleJson\n                });\n\n                await _context.SaveChangesAsync(ct);\n\n                await _billingIngest.IngestFromSendResponseAsync(\n                    businessId: businessId,\n                    messageLogId: logId,\n                    provider: provider,\n                    rawResponseJson: result.RawResponse ?? \"{}\"\n                );\n\n                _logger.LogInformation(\"[CustomAPI:{ReqId}] Done. success={Success} msgId={MessageId} flow={Flow} step={Step}\",\n                    reqId, result.Success, result.MessageId, req.FlowConfigId, entryStepId);\n\n                return result.Success\n                    ? ResponseResult.SuccessInfo(\"üöÄ Template sent.\",\n                        new\n                        {\n                            messageId = result.MessageId,\n                            to = toNormalized,\n                            templateId = req.TemplateId,\n                            flowConfigId = req.FlowConfigId,\n                            flowEntryStepId = entryStepId\n                        })\n                    : ResponseResult.ErrorInfo(\"‚ùå Send failed.\", result.ErrorMessage);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Exception in CustomApiService.SendTemplateAsync\");\n                return ResponseResult.ErrorInfo(\"üö® Server error while sending template.\", ex.ToString());\n            }\n        }\n\n        // ===== helpers (unchanged) =====\n        private static string NormalizePhone(string raw) => raw.StartsWith(\"+\") ? raw[1..] : raw;\n        private static string Mask(string phone) => phone.Length <= 6 ? phone : $\"{new string('*', phone.Length - 4)}{phone[^4..]}\";\n        private static bool IsHttpsMp4Url(string? url, out string? err)\n        {\n            err = null;\n            if (string.IsNullOrWhiteSpace(url)) { err = \"VideoUrl is required when sending a VIDEO header.\"; return false; }\n            if (!Uri.TryCreate(url, UriKind.Absolute, out var u)) { err = \"VideoUrl must be an absolute URL.\"; return false; }\n            if (u.Scheme != Uri.UriSchemeHttps) { err = \"VideoUrl must be HTTPS.\"; return false; }\n            if (!u.AbsolutePath.EndsWith(\".mp4\", StringComparison.OrdinalIgnoreCase)) { err = \"VideoUrl must point to an .mp4 file.\"; return false; }\n            return true;\n        }\n        //private static (List<object>? components, string? whyFail) BuildComponents(bool addVideoHeader, Dictionary<string, string>? variables, string? videoUrl)\n        //{\n        //    try\n        //    {\n        //        var components = new List<object>();\n        //        if (addVideoHeader)\n        //        {\n        //            components.Add(new\n        //            {\n        //                type = \"header\",\n        //                parameters = new object[] { new { type = \"video\", video = new { link = videoUrl } } }\n        //            });\n        //        }\n        //        if (variables is { Count: > 0 })\n        //        {\n        //            var bodyParams = variables\n        //                .Select(kv => (Index: int.TryParse(kv.Key, out var n) ? n : int.MaxValue, Text: kv.Value ?? string.Empty))\n        //                .OrderBy(x => x.Index)\n        //                .Select(x => new { type = \"text\", text = x.Text })\n        //                .ToArray();\n\n        //            if (bodyParams.Length > 0)\n        //                components.Add(new { type = \"body\", parameters = bodyParams });\n        //        }\n        //        return (components, null);\n        //    }\n        //    catch (Exception ex) { return (null, ex.Message); }\n        //}\n        private static (List<object>? components, string? whyFail) BuildComponents(\n         bool addVideoHeader,\n         Dictionary<string, string>? variables,\n         string? videoUrl)\n        {\n            try\n            {\n                var components = new List<object>();\n\n                // Header (optional video)\n                if (addVideoHeader)\n                {\n                    components.Add(new\n                    {\n                        type = \"header\",\n                        parameters = new object[]\n                        {\n                    new { type = \"video\", video = new { link = videoUrl } }\n                        }\n                    });\n                }\n\n                // Body params ({{1}}, {{2}}, ...) ‚Äî tolerate keys like \"1\", \"2\", \"para1\", \"foo2\"\n                if (variables is { Count: > 0 })\n                {\n                    var list = variables.ToList(); // preserves insertion order for non-numbered keys\n\n                    var bodyParams = list\n                        .Select((kv, idx) =>\n                        {\n                            var m = Regex.Match(kv.Key ?? string.Empty, @\"\\d+\");\n\n                            int n = 0; // declare first so it's always definitely assigned\n                            bool hasNum = m.Success && int.TryParse(m.Value, out n) && n > 0;\n\n                            // Numbered keys come first ordered by n; others follow in insertion order\n                            int orderKey = hasNum ? n : int.MaxValue - (list.Count - idx);\n\n                            return new { Order = orderKey, Text = kv.Value ?? string.Empty };\n                        })\n                        .OrderBy(x => x.Order)\n                        .Select(x => new { type = \"text\", text = x.Text })\n                        .ToArray();\n\n                    if (bodyParams.Length > 0)\n                        components.Add(new { type = \"body\", parameters = bodyParams });\n                }\n\n\n                return (components, null);\n            }\n            catch (Exception ex)\n            {\n                return (null, ex.Message);\n            }\n        }\n\n\n    }\n}\n\n//using System;\n//using System.Linq;\n//using System.Collections.Generic;\n//using System.Security.Claims;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.Logging;\n//using Microsoft.AspNetCore.Http;\n//using Newtonsoft.Json;\n//using xbytechat.api.Features.CustomeApi.DTOs;\n//using xbytechat.api.Features.MessagesEngine.Services; // IMessageEngineService\n//using xbytechat.api.Features.TemplateModule.Services; // IWhatsAppTemplateFetcherService\n//using xbytechat.api.Models;                         // MessageLog\n//using xbytechat.api.Shared;                         // ResponseResult\n//using xbytechat_api.Features.Billing.Services;\n//using xbytechat.api.Helpers;      // IBillingIngestService\n//using xbytechat.api.WhatsAppSettings;\n//using xbytechat_api.WhatsAppSettings.Services;\n//namespace xbytechat.api.Features.CustomeApi.Services\n//{\n//    public sealed class CustomApiService : ICustomApiService\n//    {\n//        private readonly AppDbContext _context;\n//        private readonly IHttpContextAccessor _http;\n//        private readonly IWhatsAppTemplateFetcherService _templateFetcher;\n//        private readonly IMessageEngineService _messageEngine;\n//        private readonly IBillingIngestService _billingIngest;\n//        private readonly ILogger<CustomApiService> _logger;\n\n//        public CustomApiService(\n//            AppDbContext context,\n//            IHttpContextAccessor http,\n//            IWhatsAppTemplateFetcherService templateFetcher,\n//            IMessageEngineService messageEngine,\n//            IBillingIngestService billingIngest,\n//            ILogger<CustomApiService> logger)\n//        {\n//            _context = context;\n//            _http = http;\n//            _templateFetcher = templateFetcher;\n//            _messageEngine = messageEngine;\n//            _billingIngest = billingIngest;\n//            _logger = logger;\n//        }\n\n//        public async Task<ResponseResult> SendTemplateAsync(DirectTemplateSendRequest req, CancellationToken ct = default)\n//        {\n//            try\n//            {\n//                // --- 0) Basic validation\n//                if (string.IsNullOrWhiteSpace(req.PhoneNumberId))\n//                    return ResponseResult.ErrorInfo(\"‚ùå phoneNumberId is required.\");\n//                if (string.IsNullOrWhiteSpace(req.To))\n//                    return ResponseResult.ErrorInfo(\"‚ùå 'to' (recipient) is required.\");\n//                if (string.IsNullOrWhiteSpace(req.TemplateId))\n//                    return ResponseResult.ErrorInfo(\"‚ùå templateId is required.\");\n\n//                var businessId = GetBusinessIdOrThrow();\n//                var toNormalized = NormalizePhone(req.To);\n\n//                var reqId = Guid.NewGuid();\n//                _logger.LogInformation(\n//                    \"[CustomAPI:{ReqId}] Begin send. biz={BusinessId} pnid={PhoneNumberId} to={MaskedTo} template={TemplateId}\",\n//                    reqId, businessId, req.PhoneNumberId, Mask(toNormalized), req.TemplateId);\n\n//                // --- 1) Resolve provider by phoneNumberId for this Business\n//                var ws = await _context.WhatsAppSettings.AsNoTracking()\n//                    .Where(s => s.BusinessId == businessId && s.IsActive && s.PhoneNumberId == req.PhoneNumberId)\n//                    .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n//                    .FirstOrDefaultAsync(ct);\n\n//                if (ws == null)\n//                    return ResponseResult.ErrorInfo(\"‚ùå Active WhatsApp sender (phoneNumberId) not found for this Business.\");\n\n//                var provider = (ws.Provider ?? \"\").Trim().ToUpperInvariant(); // \"META_CLOUD\" | \"PINNACLE\"\n//                if (provider != \"META_CLOUD\" && provider != \"PINNACLE\")\n//                    return ResponseResult.ErrorInfo($\"‚ùå Unsupported provider configured for this sender: {provider}\");\n\n//                // --- 2) Fetch template meta\n//                // NOTE: your metadata doesn't expose HeaderType; we just read language & buttons. \n//                var meta = await _templateFetcher.GetTemplateByNameAsync(businessId, req.TemplateId, includeButtons: true);\n//                if (meta == null)\n//                    return ResponseResult.ErrorInfo(\"‚ùå Template metadata not found for the given templateId.\");\n\n//                var languageCode = (meta.Language ?? \"\").Trim();\n//                if (string.IsNullOrWhiteSpace(languageCode))\n//                    return ResponseResult.ErrorInfo(\"‚ùå Template language not resolved from provider metadata.\");\n\n//                // Decide header by request: if VideoUrl present -> add VIDEO header; otherwise TEXT-only\n//                var isVideoHeader = !string.IsNullOrWhiteSpace(req.VideoUrl);\n//                if (isVideoHeader && !IsHttpsMp4Url(req.VideoUrl, out var vErr))\n//                    return ResponseResult.ErrorInfo(\"üö´ Invalid VideoUrl.\", vErr);\n\n//                // --- 3) Build components (TEXT or VIDEO)\n//                var (components, whyBuildFail) = BuildComponents(isVideoHeader, req.Variables, req.VideoUrl);\n//                if (components == null)\n//                {\n//                    _logger.LogWarning(\"[CustomAPI:{ReqId}] Component build failed: {Err}\", reqId, whyBuildFail);\n//                    return ResponseResult.ErrorInfo($\"üö´ Component build failed: {whyBuildFail}\");\n//                }\n\n//                // Snapshot first 3 buttons (if any) for analytics/click mapping (same as campaigns)\n//                string? buttonBundleJson = null;\n//                try\n//                {\n//                    if (meta.ButtonParams is { Count: > 0 })\n//                    {\n//                        var bundle = meta.ButtonParams.Take(3)\n//                            .Select((b, i) => new\n//                            {\n//                                i,\n//                                position = i + 1,\n//                                text = (b.Text ?? \"\").Trim(),\n//                                type = b.Type,\n//                                subType = b.SubType\n//                            }).ToList();\n//                        buttonBundleJson = JsonConvert.SerializeObject(bundle);\n//                    }\n//                }\n//                catch { /* best-effort snapshot */ }\n\n//                // Find entry step of the linked flow (if provided)\n//                Guid? entryStepId = null;\n//                if (req.FlowConfigId.HasValue)\n//                {\n//                    entryStepId = await _context.CTAFlowSteps\n//                        .Where(s => s.CTAFlowConfigId == req.FlowConfigId.Value)\n//                        .OrderBy(s => s.StepOrder)\n//                        .Select(s => (Guid?)s.Id)\n//                        .FirstOrDefaultAsync(ct);\n//                }\n\n\n//                // Always object. Meta accepts { code: \"en_US\" } and ignores policy if present.\n//                // Pinnacle REQUIRES an object.\n//                var languageField = new\n//                {\n//                    policy = \"deterministic\",\n//                    code = string.IsNullOrWhiteSpace(languageCode) ? \"en_US\" : languageCode\n//                };\n\n//                var payload = new\n//                {\n//                    messaging_product = \"whatsapp\",\n//                    to = toNormalized,\n//                    type = \"template\",\n//                    template = new\n//                    {\n//                        name = req.TemplateId,\n//                        language = languageField,\n//                        components\n//                    }\n//                };\n\n\n//                _logger.LogInformation(\"[CustomAPI:{ReqId}] Sending {Template} to {To} via {Provider} (PNID={PNID}) video={Video}\",\n//                    reqId, req.TemplateId, Mask(toNormalized), provider, req.PhoneNumberId, isVideoHeader);\n\n//                var result = await _messageEngine.SendPayloadAsync(\n//                    businessId: businessId,\n//                    provider: provider,\n//                    payload: payload,\n//                    phoneNumberId: req.PhoneNumberId   // ‚úÖ correct parameter\n//                );\n\n//                // --- 5) Persist MessageLog (and flow linkage), then billing\n//                var now = DateTime.UtcNow;\n//                var logId = Guid.NewGuid();\n\n//                _context.MessageLogs.Add(new MessageLog\n//                {\n//                    Id = logId,\n//                    BusinessId = businessId,\n//                    CampaignId = null,                         // direct API path\n//                    RecipientNumber = toNormalized,\n//                    MessageContent = req.TemplateId,\n//                    MediaUrl = isVideoHeader ? req.VideoUrl : null,\n//                    Status = result.Success ? \"Sent\" : \"Failed\",\n//                    MessageId = result.MessageId,\n//                    ErrorMessage = result.ErrorMessage,\n//                    RawResponse = result.RawResponse,\n//                    CreatedAt = now,\n//                    SentAt = result.Success ? now : (DateTime?)null,\n//                    Source = \"custom_api\",\n//                    Provider = provider,\n//                    ProviderMessageId = result.MessageId,\n\n//                    // üîó Store flow linkage like campaigns do\n//                    CTAFlowConfigId = req.FlowConfigId,\n//                    CTAFlowStepId = entryStepId,\n//                    ButtonBundleJson = buttonBundleJson\n//                });\n\n//                await _context.SaveChangesAsync(ct);\n\n//                await _billingIngest.IngestFromSendResponseAsync(\n//                    businessId: businessId,\n//                    messageLogId: logId,\n//                    provider: provider,\n//                    rawResponseJson: result.RawResponse ?? \"{}\"\n//                );\n\n//                _logger.LogInformation(\"[CustomAPI:{ReqId}] Done. success={Success} msgId={MessageId} flow={Flow} step={Step}\",\n//                    reqId, result.Success, result.MessageId, req.FlowConfigId, entryStepId);\n\n//                return result.Success\n//                    ? ResponseResult.SuccessInfo(\"üöÄ Template sent.\",\n//                        new\n//                        {\n//                            messageId = result.MessageId,\n//                            to = toNormalized,\n//                            templateId = req.TemplateId,\n//                            flowConfigId = req.FlowConfigId,\n//                            flowEntryStepId = entryStepId\n//                        })\n//                    : ResponseResult.ErrorInfo(\"‚ùå Send failed.\", result.ErrorMessage);\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"‚ùå Exception in CustomApiService.SendTemplateAsync\");\n//                return ResponseResult.ErrorInfo(\"üö® Server error while sending template.\", ex.ToString());\n//            }\n//        }\n\n//        // ===== helpers =====\n\n//        private Guid GetBusinessIdOrThrow()\n//        {\n//            var user = _http.HttpContext?.User;\n//            if (user == null) throw new InvalidOperationException(\"Missing HttpContext/User.\");\n\n//            var bid = user.FindFirstValue(\"BusinessId\") ?? user.FindFirstValue(\"bid\") ?? user.FindFirstValue(\"business_id\");\n//            if (string.IsNullOrWhiteSpace(bid)) throw new InvalidOperationException(\"BusinessId claim is missing.\");\n//            return Guid.Parse(bid);\n//        }\n\n//        private static string NormalizePhone(string raw) => raw.StartsWith(\"+\") ? raw[1..] : raw;\n\n//        private static string Mask(string phone)\n//            => phone.Length <= 6 ? phone : $\"{new string('*', phone.Length - 4)}{phone[^4..]}\";\n\n//        private static bool IsHttpsMp4Url(string? url, out string? err)\n//        {\n//            err = null;\n//            if (string.IsNullOrWhiteSpace(url)) { err = \"VideoUrl is required when sending a VIDEO header.\"; return false; }\n//            if (!Uri.TryCreate(url, UriKind.Absolute, out var u)) { err = \"VideoUrl must be an absolute URL.\"; return false; }\n//            if (u.Scheme != Uri.UriSchemeHttps) { err = \"VideoUrl must be HTTPS.\"; return false; }\n//            if (!u.AbsolutePath.EndsWith(\".mp4\", StringComparison.OrdinalIgnoreCase)) { err = \"VideoUrl must point to an .mp4 file.\"; return false; }\n//            return true;\n//        }\n\n//        private static (List<object>? components, string? whyFail) BuildComponents(\n//            bool addVideoHeader,\n//            Dictionary<string, string>? variables,\n//            string? videoUrl)\n//        {\n//            try\n//            {\n//                var components = new List<object>();\n\n//                // Header (optional video)\n//                if (addVideoHeader)\n//                {\n//                    components.Add(new\n//                    {\n//                        type = \"header\",\n//                        parameters = new object[]\n//                        {\n//                            new { type = \"video\", video = new { link = videoUrl } }\n//                        }\n//                    });\n//                }\n\n//                // Body params ({{1}}, {{2}}, ...)\n//                if (variables is { Count: > 0 })\n//                {\n//                    var bodyParams = variables\n//                        .Select(kv => (Index: int.TryParse(kv.Key, out var n) ? n : int.MaxValue, Text: kv.Value ?? string.Empty))\n//                        .OrderBy(x => x.Index)\n//                        .Select(x => new { type = \"text\", text = x.Text })\n//                        .ToArray();\n\n//                    if (bodyParams.Length > 0)\n//                        components.Add(new { type = \"body\", parameters = bodyParams });\n//                }\n\n//                return (components, null);\n//            }\n//            catch (Exception ex)\n//            {\n//                return (null, ex.Message);\n//            }\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Services/ICtaJourneyPublisher.cs",
      "sha256": "179ba5f2372125cfe3c2aed455b5c8efa5b8f6de13ef2478d2e7e6df7890cd8e",
      "language": "csharp",
      "size": 443,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CustomeApi.Services\n{\n    public interface ICtaJourneyPublisher\n    {\n        /// <summary>\n        /// Posts a CTAJourney event for the given business to all active endpoints in CustomerWebhookConfigs.\n        /// </summary>\n        Task PublishAsync(Guid businessId, Models.CtaJourneyEventDto dto, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Services/ICustomApiService.cs",
      "sha256": "76cd53ece80c088bec742c33974d8a8be781cd297d3d68e474150b19707e1f1e",
      "language": "csharp",
      "size": 377,
      "content": "using System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CustomeApi.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.CustomeApi.Services\n{\n    public interface ICustomApiService\n    {\n        Task<ResponseResult> SendTemplateAsync(DirectTemplateSendRequest req, CancellationToken ct = default);\n    }\n}\n"
    }
  ]
}
