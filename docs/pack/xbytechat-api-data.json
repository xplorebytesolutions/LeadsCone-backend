{
  "name": "xbytechat-api/Data",
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Data/AppDbContext.cs",
      "sha256": "fe72f2855310ba672fd8cd9bb5d2f9f6a18f9ada5b9e5f3333589f70a27e9145",
      "language": "csharp",
      "size": 62524,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Globalization;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.AccessControl.Seeder;\nusing xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.xbTimelines.Models;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat.api.Features.CTAManagement.Models;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.Webhooks.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Inbox.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Features.Automation.Models;\nusing xbytechat.api.Features.CampaignTracking.Worker;\nusing xbytechat.api.Features.WhatsAppSettings.Models;\nusing Microsoft.AspNetCore.Http.HttpResults;\nusing xbytechat_api.Features.Billing.Models;\nusing xbytechat.api.Features.CustomeApi.Models;\n\nnamespace xbytechat.api\n{\n    public class AppDbContext : DbContext\n    {\n        public AppDbContext(DbContextOptions<AppDbContext> options)\n            : base(options) { }\n\n        // ✅ Table Registrations\n        public DbSet<Business> Businesses { get; set; }\n        public DbSet<User> Users { get; set; }\n        public DbSet<MessageLog> MessageLogs { get; set; }\n        public DbSet<Product> Products { get; set; }\n        public DbSet<CatalogClickLog> CatalogClickLogs { get; set; }\n        public DbSet<Contact> Contacts { get; set; }\n        public DbSet<Tag> Tags { get; set; }\n        public DbSet<Reminder> Reminders { get; set; }\n        public DbSet<Note> Notes { get; set; }\n        public DbSet<LeadTimeline> LeadTimelines { get; set; }\n        public DbSet<ContactTag> ContactTags { get; set; }\n        public DbSet<Campaign> Campaigns { get; set; }\n        public DbSet<CampaignRecipient> CampaignRecipients { get; set; }\n        public DbSet<CampaignSendLog> CampaignSendLogs { get; set; }\n        public DbSet<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        // 🧩 Access Control\n        public DbSet<Role> Roles { get; set; }\n        public DbSet<Permission> Permissions { get; set; }\n        public DbSet<RolePermission> RolePermissions { get; set; }\n        public DbSet<UserPermission> UserPermissions { get; set; }\n        public DbSet<AuditLog> AuditLogs { get; set; }\n        public DbSet<WhatsAppSettingEntity> WhatsAppSettings { get; set; }\n        public DbSet<BusinessPlanInfo> BusinessPlanInfos { get; set; }\n\n        public DbSet<TrackingLog> TrackingLogs { get; set; }\n        public DbSet<CTADefinition> CTADefinitions { get; set; }\n        public DbSet<CampaignButton> CampaignButtons { get; set; }\n        public DbSet<FailedWebhookLog> FailedWebhookLogs { get; set; }\n        public DbSet<WebhookSettings> WebhookSettings { get; set; }\n\n        public DbSet<CTAFlowConfig> CTAFlowConfigs { get; set; }\n        public DbSet<CTAFlowStep> CTAFlowSteps { get; set; }\n        public DbSet<FlowButtonLink> FlowButtonLinks { get; set; }\n\n        public DbSet<CampaignFlowOverride> CampaignFlowOverrides { get; set; }\n        public DbSet<FlowExecutionLog> FlowExecutionLogs { get; set; }\n        public DbSet<ContactRead> ContactReads { get; set; }\n\n        public DbSet<AutoReplyRule> AutoReplyRules { get; set; }\n        public DbSet<AutoReplyFlow> AutoReplyFlows { get; set; }\n        public DbSet<AutoReplyFlowNode> AutoReplyFlowNodes { get; set; }\n        public DbSet<AutoReplyFlowEdge> AutoReplyFlowEdges { get; set; }\n        public DbSet<AutoReplyLog> AutoReplyLogs { get; set; }\n        public DbSet<ChatSessionState> ChatSessionStates { get; set; }\n        public DbSet<Plan> Plans { get; set; }\n        public DbSet<PlanPermission> PlanPermissions { get; set; }\n        public DbSet<FeatureAccess> FeatureAccess { get; set; }\n        public DbSet<PlanFeatureMatrix> PlanFeatureMatrix { get; set; }\n        public DbSet<UserFeatureAccess> UserFeatureAccess { get; set; }\n        public DbSet<FeatureMaster> FeatureMasters { get; set; }\n        public DbSet<AutomationFlow> AutomationFlows { get; set; }\n        public DbSet<WhatsAppTemplate> WhatsAppTemplates { get; set; }\n\n        public DbSet<CampaignClickLog> CampaignClickLogs => Set<CampaignClickLog>();\n        public DbSet<CampaignClickDailyAgg> CampaignClickDailyAgg => Set<CampaignClickDailyAgg>();\n\n        public DbSet<QuickReply> QuickReplies { get; set; } = null!;\n        public DbSet<WhatsAppPhoneNumber> WhatsAppPhoneNumbers { get; set; }\n\n        public DbSet<Audience> Audiences { get; set; }\n        public DbSet<AudienceMember> AudiencesMembers { get; set; }\n        public DbSet<CsvBatch> CsvBatches { get; set; }\n        public DbSet<CsvRow> CsvRows { get; set; }\n        public DbSet<CampaignVariableMap> CampaignVariableMaps { get; set; }\n\n        public DbSet<ProviderBillingEvent> ProviderBillingEvents { get; set; } = default!;\n        public DbSet<OutboundCampaignJob> OutboundCampaignJobs { get; set; }\n        public DbSet<ApiKey> ApiKeys { get; set; } = null!;\n\n    //    public DbSet<CustomerWebhookConfig> CustomerWebhookConfigs\n    //=> Set<CustomerWebhookConfig>();\n        public DbSet<xbytechat.api.Features.CustomeApi.Models.CustomerWebhookConfig> CustomerWebhookConfigs { get; set; }\n        public DbSet<ContactJourneyState> ContactJourneyStates { get; set; }\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n\n            // ────────────────────── DETERMINISTIC SEED TIMESTAMPS ──────────────────────\n            var seedCreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n            var planCreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n            var created = new DateTime(2025, 9, 13, 0, 0, 0, DateTimeKind.Utc);\n\n            // ────────────────────── SEEDS (unchanged GUIDs) ──────────────────────\n            var superadminRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000001\");\n            var partnerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000002\");\n            var resellerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000003\");\n            var businessRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000004\");\n            var agentRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000005\");\n\n            modelBuilder.Entity<Role>().HasData(\n                new Role { Id = superadminRoleId, Name = \"admin\", Description = \"Super Admin\", CreatedAt = seedCreatedAt },\n                new Role { Id = partnerRoleId, Name = \"partner\", Description = \"Business Partner\", CreatedAt = seedCreatedAt },\n                new Role { Id = resellerRoleId, Name = \"reseller\", Description = \"Reseller Partner\", CreatedAt = seedCreatedAt },\n                new Role { Id = businessRoleId, Name = \"business\", Description = \"Business Owner\", CreatedAt = seedCreatedAt },\n                new Role { Id = agentRoleId, Name = \"staff\", Description = \"Staff\", CreatedAt = seedCreatedAt }\n            );\n\n            var superAdminUserId = Guid.Parse(\"62858aa2-3a54-4fd5-8696-c343d9af7634\");\n            modelBuilder.Entity<User>().HasData(new User\n            {\n                Id = superAdminUserId,\n                Name = \"Super Admin\",\n                Email = \"admin@xbytechat.com\",\n                RoleId = superadminRoleId,\n                Status = \"active\",\n                CreatedAt = seedCreatedAt,\n                DeletedAt = null,\n                IsDeleted = false,\n                BusinessId = null,\n                PasswordHash = \"JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk=\",\n                RefreshToken = null,\n                RefreshTokenExpiry = null\n            });\n\n            var basicPlanId = Guid.Parse(\"5f9f5de1-a0b2-48ba-b03d-77b27345613f\");\n            modelBuilder.Entity<Plan>().HasData(new Plan\n            {\n                Id = basicPlanId,\n                Code = \"basic\",\n                Name = \"Basic\",\n                Description = \"Default free plan\",\n                IsActive = true,\n                CreatedAt = planCreatedAt\n            });\n\n            modelBuilder.Entity<Permission>().HasData(\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000000\"), Code = \"dashboard.view\", Name = \"dashboard.view\", Group = \"Dashboard\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000001\"), Code = \"campaign.view\", Name = \"campaign.view\", Group = \"Campaign\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000002\"), Code = \"campaign.create\", Name = \"campaign.create\", Group = \"Campaign\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000003\"), Code = \"campaign.delete\", Name = \"campaign.delete\", Group = \"Campaign\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000004\"), Code = \"product.view\", Name = \"product.view\", Group = \"Catalog\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000005\"), Code = \"product.create\", Name = \"product.create\", Group = \"Catalog\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000006\"), Code = \"product.delete\", Name = \"product.delete\", Group = \"Catalog\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000007\"), Code = \"contacts.view\", Name = \"contacts.view\", Group = \"CRM\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000008\"), Code = \"tags.edit\", Name = \"tags.edit\", Group = null, IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000009\"), Code = \"admin.business.approve\", Name = \"admin.business.approve\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000010\"), Code = \"admin.logs.view\", Name = \"admin.logs.view\", Group = null, IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000011\"), Code = \"admin.plans.view\", Name = \"admin.plans.view\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000012\"), Code = \"admin.plans.create\", Name = \"admin.plans.create\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000013\"), Code = \"admin.plans.update\", Name = \"admin.plans.update\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000014\"), Code = \"admin.plans.delete\", Name = \"admin.plans.delete\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"74c8034f-d9cb-4a17-8578-a9f765bd845c\"), Code = \"messaging.report.view\", Name = \"messaging.report.view\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"c819f1bd-422d-4609-916c-cc185fe44ab0\"), Code = \"messaging.status.view\", Name = \"messaging.status.view\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"eecd0fac-223c-4dba-9fa1-2a6e973d61d1\"), Code = \"messaging.inbox.view\", Name = \"messaging.inbox.view\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"974af1f9-3caa-4857-a1a7-48462c389332\"), Code = \"messaging.send.text\", Name = \"messaging.send.text\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"0485154c-dde5-4732-a7aa-a379c77a5b27\"), Code = \"messaging.send.template\", Name = \"messaging.send.template\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"29461562-ef9c-48c0-a606-482ff57b8f95\"), Code = \"messaging.send\", Name = \"messaging.send\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"bbc5202a-eac9-40bb-aa78-176c677dbf5b\"), Code = \"messaging.whatsappsettings.view\", Name = \"messaging.whatsappsettings.view\", Group = \"Messaging\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"205b87c7-b008-4e51-9fea-798c2dc4f9c2\"), Code = \"admin.whatsappsettings.view\", Name = \"admin.whatsappsettings.view\", Group = \"Admin\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"6e4d3a86-7cf9-4ac2-b8a7-ed10c9f0173d\"), Code = \"settings.whatsapp.view\", Name = \"Settings - WhatsApp View\", Group = \"Settings\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"ad36cdb7-5221-448b-a6a6-c35c9f88d021\"), Code = \"inbox.view\", Name = \"inbox.view\", Group = \"Inbox\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"74828fc0-e358-4cfc-b924-13719a0d9f50\"), Code = \"inbox.menu\", Name = \"inbox.menu\", Group = \"Inbox\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"98572fe7-d142-475a-b990-f248641809e2\"), Code = \"settings.profile.view\", Name = \"settings.profile.view\", Group = \"Settings\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"821480c6-1464-415e-bba8-066fcb4e7e63\"), Code = \"automation.menu\", Name = \"automation.menu\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"918a61d0-5ab6-46af-a3d3-41e37b7710f9\"), Code = \"automation.Create.Template.Flow\", Name = \"automation.Create.Template.Flow\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"9ae90cfe-3fea-4307-b024-3083c2728148\"), Code = \"automation.View.Template.Flow\", Name = \"automation.View.Template.Flow\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"93c5d5a7-f8dd-460a-8c7b-e3788440ba3a\"), Code = \"automation.Create.TemplatePlusFreetext.Flow\", Name = \"automation.Create.TemplatePlusFreetext.Flow\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"7d7cbceb-4ce7-4835-85cd-59562487298d\"), Code = \"automation.View.TemplatePlusFreetext.Flow\", Name = \"automation.View.TemplatePlusFreetext.Flow\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"636b17f2-1c54-4e26-a8cd-dbf561dcb522\"), Code = \"automation.View.Template.Flow_analytics\", Name = \"automation.View.Template.Flow_analytics\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"adfa8490-9705-4a36-a86e-d5bff7ddc220\"), Code = \"automation.View.TemplatePlusFreeText.Flow_analytics\", Name = \"automation.View.TemplatePlusFreeText.Flow_analytics\", Group = \"Automation\", IsActive = true, CreatedAt = created },\n                new Permission { Id = Guid.Parse(\"0dedac5b-81c8-44c3-8cfe-76c58e29c6db\"), Code = \"automation_trigger_test\", Name = \"automation_trigger_test\", Group = \"Automation\", IsActive = true, CreatedAt = created }\n                //new Permission { Id = Guid.Parse(\"0d7dac5b-81c8-44c3-8cfe-76c66669c6db\"), Code = \"campaign.send.template.simple\", Name = \"Simple Temlate Send : extra\", Group = \"Campaign\", IsActive = true, CreatedAt = created }\n                //\"campaign-tracking-logs\": [FK.CAMPAIGN_TRACKING_LOGS_VIEW], -- NEDD TO ADD\n                );\n\n            // ───────────────── Relationships (clean and deduped) ─────────────────\n\n            // Access-control\n            modelBuilder.Entity<RolePermission>()\n                .HasOne(rp => rp.Role).WithMany(r => r.RolePermissions)\n                .HasForeignKey(rp => rp.RoleId).OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<RolePermission>()\n                .HasOne(rp => rp.Permission).WithMany(p => p.RolePermissions)\n                .HasForeignKey(rp => rp.PermissionId).OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<UserPermission>()\n                .HasOne(up => up.User).WithMany(u => u.UserPermissions)\n                .HasForeignKey(up => up.UserId).OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<UserPermission>()\n                .HasOne(up => up.Permission).WithMany(p => p.UserPermissions)\n                .HasForeignKey(up => up.PermissionId).OnDelete(DeleteBehavior.Cascade);\n\n            // Campaign core\n            modelBuilder.Entity<Campaign>()\n                .HasOne(c => c.Business).WithMany(b => b.Campaigns)\n                .HasForeignKey(c => c.BusinessId).IsRequired();\n\n            modelBuilder.Entity<Campaign>()\n                .HasMany(c => c.MultiButtons).WithOne(b => b.Campaign)\n                .HasForeignKey(b => b.CampaignId).OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<Campaign>(e =>\n            {\n                e.Property(x => x.TemplateSchemaSnapshot).HasColumnType(\"jsonb\");\n                e.HasMany(c => c.Audiences).WithOne(a => a.Campaign)\n                 .HasForeignKey(a => a.CampaignId).OnDelete(DeleteBehavior.SetNull);\n                e.HasMany(c => c.SendLogs).WithOne(s => s.Campaign)\n                 .HasForeignKey(s => s.CampaignId).OnDelete(DeleteBehavior.Cascade);\n                e.HasMany(c => c.MessageLogs).WithOne(m => m.SourceCampaign)\n                 .HasForeignKey(m => m.CampaignId).OnDelete(DeleteBehavior.Restrict);\n            });\n\n            // Audience / CSV\n            modelBuilder.Entity<CsvBatch>(e =>\n            {\n                e.ToTable(\"CsvBatches\");\n                e.HasKey(x => x.Id);\n                e.Property(x => x.HeadersJson).HasColumnType(\"jsonb\");\n                e.HasIndex(x => x.Checksum).HasDatabaseName(\"ix_csvbatch_checksum\");\n                e.HasIndex(x => new { x.BusinessId, x.CreatedAt }).HasDatabaseName(\"ix_csvbatch_biz_created\");\n                e.HasIndex(x => new { x.BusinessId, x.AudienceId });\n                e.HasOne<Audience>().WithMany()\n                 .HasForeignKey(x => x.AudienceId).OnDelete(DeleteBehavior.SetNull);\n            });\n\n            modelBuilder.Entity<CsvRow>(e =>\n            {\n                e.ToTable(\"CsvRows\");\n                e.HasKey(x => x.Id);\n                e.Property(x => x.RowJson).HasColumnType(\"jsonb\");\n                e.HasIndex(x => new { x.BatchId, x.RowIndex }).IsUnique().HasDatabaseName(\"ux_csvrow_batch_rowidx\");\n                e.HasIndex(x => x.PhoneE164).HasDatabaseName(\"ix_csvrow_phone\");\n                e.HasIndex(x => new { x.BusinessId, x.BatchId });\n                e.HasOne(x => x.Batch).WithMany().HasForeignKey(x => x.BatchId).OnDelete(DeleteBehavior.Cascade);\n            });\n\n            modelBuilder.Entity<Audience>(e =>\n            {\n                e.ToTable(\"Audiences\");\n                e.HasKey(x => x.Id);\n                e.HasIndex(x => new { x.BusinessId, x.IsDeleted }).HasDatabaseName(\"ix_audiences_biz_deleted\");\n                e.HasIndex(x => new { x.BusinessId, x.CampaignId });\n                e.HasIndex(x => new { x.BusinessId, x.CsvBatchId });\n                e.HasOne(x => x.CsvBatch).WithMany().HasForeignKey(x => x.CsvBatchId).OnDelete(DeleteBehavior.SetNull);\n            });\n\n            modelBuilder.Entity<AudienceMember>(e =>\n            {\n                e.ToTable(\"AudienceMembers\");\n                e.HasKey(x => x.Id);\n                e.Property(x => x.AttributesJson).HasColumnType(\"jsonb\");\n                e.HasIndex(x => new { x.AudienceId, x.PhoneE164 }).IsUnique().HasDatabaseName(\"ux_audmember_audience_phone\");\n                e.HasIndex(x => x.ContactId).HasDatabaseName(\"ix_audmember_contact\");\n                e.HasOne(x => x.Audience).WithMany(a => a.Members)\n                 .HasForeignKey(x => x.AudienceId).OnDelete(DeleteBehavior.Cascade);\n            });\n\n            // Recipients — OPTIONAL AudienceMember, OPTIONAL Contact\n            modelBuilder.Entity<CampaignRecipient>(e =>\n            {\n                e.ToTable(\"CampaignRecipients\");\n                e.HasKey(x => x.Id);\n\n                e.Property(x => x.ResolvedParametersJson).HasColumnType(\"jsonb\");\n                e.Property(x => x.ResolvedButtonUrlsJson).HasColumnType(\"jsonb\");\n                e.HasIndex(x => x.IdempotencyKey).HasDatabaseName(\"ix_campaignrecipients_idempotency\");\n                e.HasIndex(x => new { x.CampaignId, x.ContactId }).HasDatabaseName(\"ix_recipients_campaign_contact\");\n\n                e.HasOne(r => r.AudienceMember)\n                 .WithMany()\n                 .HasForeignKey(r => r.AudienceMemberId)\n                 .IsRequired(false)\n                 .OnDelete(DeleteBehavior.SetNull);\n\n                e.HasOne(r => r.Contact)\n                 .WithMany()\n                 .HasForeignKey(r => r.ContactId)\n                 .IsRequired(false)\n                 .OnDelete(DeleteBehavior.SetNull);\n\n                e.HasOne(r => r.Campaign)\n                 .WithMany(c => c.Recipients)\n                 .HasForeignKey(r => r.CampaignId)\n                 .OnDelete(DeleteBehavior.Cascade);\n\n                e.HasOne(r => r.Business)\n                 .WithMany()\n                 .HasForeignKey(r => r.BusinessId)\n                 .OnDelete(DeleteBehavior.Restrict);\n            });\n\n            // Send logs — OPTIONAL Contact, REQUIRED Campaign\n            modelBuilder.Entity<CampaignSendLog>(e =>\n            {\n                e.ToTable(\"CampaignSendLogs\");\n                e.HasKey(x => x.Id);\n\n                e.Property(x => x.BusinessId).IsRequired();\n                e.HasIndex(x => x.MessageId);\n                e.HasIndex(x => x.RunId);\n                e.HasIndex(x => new { x.BusinessId, x.MessageId }).HasDatabaseName(\"IX_CampaignSendLogs_Business_MessageId\");\n\n                e.HasOne(s => s.Recipient).WithMany(r => r.SendLogs)\n                 .HasForeignKey(s => s.RecipientId);\n\n                // ✅ allow null ContactId (fixes 23502 once column is nullable)\n                e.HasOne(s => s.Contact).WithMany()\n                 .HasForeignKey(s => s.ContactId)\n                 .IsRequired(false)\n                 .OnDelete(DeleteBehavior.SetNull);\n\n                e.HasOne(s => s.Campaign).WithMany(c => c.SendLogs)\n                 .HasForeignKey(s => s.CampaignId)\n                 .IsRequired()\n                 .OnDelete(DeleteBehavior.Cascade);\n\n                e.HasOne(s => s.MessageLog).WithMany()\n                 .HasForeignKey(s => s.MessageLogId)\n                 .OnDelete(DeleteBehavior.Restrict);\n            });\n\n            // Message logs — helpful indexes + computed column\n            modelBuilder.Entity<MessageLog>(b =>\n            {\n                b.HasIndex(x => x.MessageId);\n                b.HasIndex(x => x.RunId);\n                b.HasIndex(x => new { x.BusinessId, x.MessageId }).HasDatabaseName(\"IX_MessageLogs_Business_MessageId\");\n                b.HasIndex(x => new { x.BusinessId, x.RecipientNumber }).HasDatabaseName(\"IX_MessageLogs_Business_Recipient\");\n                b.Property<DateTime?>(\"MessageTime\").HasComputedColumnSql(\"COALESCE(\\\"SentAt\\\", \\\"CreatedAt\\\")\", stored: true);\n                b.HasIndex(\"BusinessId\", \"IsIncoming\", \"ContactId\", \"MessageTime\").HasDatabaseName(\"ix_msglogs_biz_in_contact_msgtime\");\n            });\n\n            // QuickReplies\n            modelBuilder.Entity<QuickReply>(e =>\n            {\n                e.HasIndex(x => new { x.BusinessId, x.Scope, x.IsActive });\n                e.HasIndex(x => new { x.BusinessId, x.OwnerUserId, x.IsActive });\n                e.HasIndex(x => x.UpdatedAt);\n                e.Property(x => x.Title).HasMaxLength(120).IsRequired();\n                e.Property(x => x.Language).HasMaxLength(8);\n                e.Property(q => q.UpdatedAt).HasDefaultValueSql(\"NOW()\");\n            });\n\n            // Contacts — uniqueness\n            modelBuilder.Entity<Contact>()\n                .HasIndex(c => new { c.BusinessId, c.PhoneNumber }).IsUnique();\n\n            modelBuilder.Entity<ContactRead>()\n                .HasIndex(cr => new { cr.ContactId, cr.UserId }).IsUnique();\n\n            modelBuilder.Entity<ContactRead>()\n                .HasIndex(cr => new { cr.BusinessId, cr.UserId, cr.ContactId })\n                .IsUnique().HasDatabaseName(\"ux_contactreads_biz_user_contact\");\n\n            // WhatsApp settings (principal with composite AK)\n            modelBuilder.Entity<WhatsAppSettingEntity>(b =>\n            {\n                b.ToTable(\"WhatsAppSettings\");\n                b.HasAlternateKey(s => new { s.BusinessId, s.Provider })\n                 .HasName(\"AK_WhatsAppSettings_BusinessId_Provider\");\n\n                // Remove redundant unique index on the same columns; keep other helpful indexes\n                b.HasIndex(x => new { x.Provider, x.PhoneNumberId }).HasDatabaseName(\"IX_WhatsAppSettings_Provider_PhoneNumberId\");\n                b.HasIndex(x => new { x.Provider, x.WhatsAppBusinessNumber }).HasDatabaseName(\"IX_WhatsAppSettings_Provider_BusinessNumber\");\n                b.HasIndex(x => new { x.Provider, x.WabaId }).HasDatabaseName(\"IX_WhatsAppSettings_Provider_WabaId\");\n                b.HasIndex(x => new { x.BusinessId, x.Provider, x.IsActive }).HasDatabaseName(\"IX_WhatsAppSettings_Business_Provider_IsActive\");\n                b.HasIndex(x => new { x.Provider, x.WebhookCallbackUrl }).HasDatabaseName(\"IX_WhatsAppSettings_Provider_CallbackUrl\");\n            });\n\n            modelBuilder.Entity<Business>()\n                .HasMany(b => b.WhatsAppSettings).WithOne()\n                .HasForeignKey(s => s.BusinessId).OnDelete(DeleteBehavior.Cascade);\n\n            // WhatsApp phone numbers → principal (BusinessId, Provider)\n            modelBuilder.Entity<WhatsAppPhoneNumber>(e =>\n            {\n                e.ToTable(\"WhatsAppPhoneNumbers\");\n                e.HasKey(x => x.Id);\n                e.Property(x => x.Provider).IsRequired();\n                e.Property(x => x.PhoneNumberId).IsRequired();\n\n                e.HasOne<WhatsAppSettingEntity>()\n                 .WithMany(s => s.WhatsAppBusinessNumbers)\n                 .HasForeignKey(x => new { x.BusinessId, x.Provider })\n                 .HasPrincipalKey(s => new { s.BusinessId, s.Provider })\n                 .OnDelete(DeleteBehavior.Cascade);\n\n                e.HasIndex(x => new { x.BusinessId, x.Provider, x.PhoneNumberId })\n                 .IsUnique().HasDatabaseName(\"UX_WhatsappPhoneNumbers_Bus_Prov_PhoneId\");\n            });\n\n            // CTA / Tracking misc\n            modelBuilder.Entity<CampaignClickLog>(e =>\n            {\n                e.HasIndex(x => new { x.CampaignId, x.ClickType, x.ClickedAt });\n                e.HasIndex(x => new { x.CampaignId, x.ButtonIndex });\n                e.HasIndex(x => new { x.CampaignId, x.ContactId });\n            });\n\n            modelBuilder.Entity<CampaignClickDailyAgg>(e =>\n            {\n                e.HasIndex(x => new { x.CampaignId, x.Day, x.ButtonIndex }).IsUnique();\n                e.Property(x => x.Day).HasColumnType(\"date\");\n            });\n\n            // Flow graph bits\n            modelBuilder.Entity<FlowButtonLink>().HasKey(b => b.Id);\n            modelBuilder.Entity<AutoReplyFlowNode>().OwnsOne(n => n.Position);\n\n            // Features/Plans\n            modelBuilder.Entity<FeatureAccess>()\n                .HasIndex(f => new { f.BusinessId, f.FeatureName }).IsUnique();\n\n            // Outbound worker\n            modelBuilder.Entity<OutboundCampaignJob>(e =>\n            {\n                e.ToTable(\"OutboundCampaignJobs\");\n                e.HasIndex(x => new { x.Status, x.NextAttemptAt });\n                e.HasIndex(x => x.CampaignId);\n                e.Property(x => x.Status).HasMaxLength(32);\n                e.Property(x => x.LastError).HasMaxLength(4000);\n            });\n\n            modelBuilder.Entity<Contact>(entity =>\n            {\n                // Composite index for fast lookups during sends/clicks\n                entity.HasIndex(e => new { e.BusinessId, e.PhoneNumber })\n                      .HasDatabaseName(\"IX_Contacts_BusinessId_PhoneNumber\");\n                // .IsUnique(false); // optional (default is non-unique)\n            });\n            modelBuilder.Entity<Campaign>()\n         .HasOne(c => c.CTAFlowConfig)      // ✅ use the nav that exists on Campaign\n         .WithMany()\n         .HasForeignKey(c => c.CTAFlowConfigId)\n         .OnDelete(DeleteBehavior.Restrict);\n\n\n            modelBuilder.Entity<CTAFlowConfig>(e =>\n            {\n                e.HasMany(f => f.Steps)\n                 .WithOne(s => s.Flow)\n                 .HasForeignKey(s => s.CTAFlowConfigId)   // 👈 use the existing FK name here\n                 .OnDelete(DeleteBehavior.Cascade);\n\n                e.HasIndex(f => new { f.BusinessId, f.IsActive, f.FlowName })\n                 .HasDatabaseName(\"ix_ctaflowconfigs_biz_active_name\");\n            });\n\n            modelBuilder.Entity<CTAFlowStep>(e =>\n            {\n                e.HasMany(s => s.ButtonLinks)\n                 .WithOne(b => b.Step)                 // only if FlowButtonLink has a 'Step' nav\n                 .HasForeignKey(b => b.CTAFlowStepId)  // ✅ use existing FK name\n                 .OnDelete(DeleteBehavior.Cascade);\n            });\n\n            modelBuilder.Entity<CTAFlowConfig>()\n              .HasIndex(f => new { f.BusinessId, f.FlowName, f.IsActive })\n              .IsUnique();\n\n            // ----- ProviderBillingEvents (core for billing dedupe + reads) -----\n            modelBuilder.Entity<ProviderBillingEvent>(e =>\n            {\n                // Hard dedupe (webhook replays, same message/event). Filter keeps NULLs out of the unique constraint.\n                e.HasIndex(x => new { x.BusinessId, x.Provider, x.ProviderMessageId, x.EventType })\n                 .HasDatabaseName(\"UX_ProviderBillingEvents_UniqueEvent\")\n                 .IsUnique()\n                 .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n\n                // Time-range scans by event type (used by snapshot)\n                e.HasIndex(x => new { x.BusinessId, x.EventType, x.OccurredAt })\n                 .HasDatabaseName(\"IX_Billing_BizEventTime\");\n\n                // Group/lookup by conversation window\n                e.HasIndex(x => new { x.BusinessId, x.ConversationId })\n                 .HasDatabaseName(\"IX_Billing_BizConversation\")\n                 .HasFilter(\"\\\"ConversationId\\\" IS NOT NULL\");\n\n                // Direct lookups by provider message id\n                e.HasIndex(x => new { x.BusinessId, x.ProviderMessageId })\n                 .HasDatabaseName(\"IX_Billing_BizProviderMessage\")\n                 .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n            });\n\n            // ----- MessageLogs (snapshot volume + joins from billing) -----\n            modelBuilder.Entity<MessageLog>(e =>\n            {\n                // Period queries\n                e.HasIndex(x => new { x.BusinessId, x.CreatedAt })\n                 .HasDatabaseName(\"IX_MessageLogs_BizCreatedAt\");\n\n                // Join from billing by provider message id\n                e.HasIndex(x => new { x.BusinessId, x.ProviderMessageId })\n                 .HasDatabaseName(\"IX_MessageLogs_BizProviderMessage\")\n                 .HasFilter(\"\\\"ProviderMessageId\\\" IS NOT NULL\");\n\n                // Conversation aggregation / backfills\n                e.HasIndex(x => new { x.BusinessId, x.ConversationId })\n                 .HasDatabaseName(\"IX_MessageLogs_BizConversation\")\n                 .HasFilter(\"\\\"ConversationId\\\" IS NOT NULL\");\n            });\n\n            // ----- CampaignSendLogs (status updater lookups) -----\n            modelBuilder.Entity<CampaignSendLog>(e =>\n            {\n                e.HasIndex(x => new { x.BusinessId, x.SendStatus, x.SentAt })\n                 .HasDatabaseName(\"IX_CampaignSendLogs_StatusTime\");\n            });\n\n            // ----- Optional: provider config lookups used during send/status -----\n            // If your models differ, just delete this block or update the type/namespace.\n            modelBuilder.Entity<WhatsAppSettingEntity>(e =>\n            {\n                // Matches queries like: WHERE BusinessId = ? AND Provider = ? AND IsActive\n                e.HasIndex(x => new { x.BusinessId, x.Provider, x.IsActive })\n                 .HasDatabaseName(\"IX_WhatsAppSettings_BizProviderActive\");\n            });\n\n            modelBuilder.Entity<WhatsAppPhoneNumber>(e =>\n            {\n                e.HasIndex(x => new { x.BusinessId, x.Provider, x.PhoneNumberId })\n                 .HasDatabaseName(\"IX_WhatsAppPhoneNumbers_BizProviderPhone\");\n            });\n            modelBuilder.Entity<xbytechat.api.Features.CustomeApi.Models.ApiKey>(e =>\n            {\n                e.HasKey(x => x.Id);\n                e.HasIndex(x => x.Prefix).IsUnique();\n                e.Property(x => x.SecretHash).IsRequired();\n                e.Property(x => x.Scopes).HasMaxLength(512);\n            });\n            // NOTE: removed duplicate mapping of CampaignRecipient.AudienceMember at the bottom.\n\n\n            //modelBuilder.Entity<CustomerWebhookConfig>()\n            //    .HasIndex(x => new { x.BusinessId, x.IsActive });\n        }\n\n    }\n}\n//protected override void OnModelCreating(ModelBuilder modelBuilder)\n//{\n//    base.OnModelCreating(modelBuilder);\n\n//    // ✅ Seed Role IDs (keep them consistent)\n//    var superadminRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000001\");\n//    var partnerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000002\");\n//    var resellerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000003\");\n//    var businessRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000004\");\n//    var agentRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000005\");\n\n//    // ✅ Roles\n//    modelBuilder.Entity<Role>().HasData(\n//        new Role { Id = superadminRoleId, Name = \"admin\", Description = \"Super Admin\", CreatedAt = DateTime.UtcNow },\n//        new Role { Id = partnerRoleId, Name = \"partner\", Description = \"Business Partner\", CreatedAt = DateTime.UtcNow },\n//        new Role { Id = resellerRoleId, Name = \"reseller\", Description = \"Reseller Partner\", CreatedAt = DateTime.UtcNow },\n//        new Role { Id = businessRoleId, Name = \"business\", Description = \"Business Owner\", CreatedAt = DateTime.UtcNow },\n//        new Role { Id = agentRoleId, Name = \"staff\", Description = \"Staff\", CreatedAt = DateTime.UtcNow }\n//    );\n\n//    // ✅ Permissions from RolePermissionMapping\n\n\n//    //// ✅ RolePermission mappings\n\n\n//    // ✅ Seed Super Admin user (Id + RoleId are fixed)\n//    var superAdminUserId = Guid.Parse(\"62858aa2-3a54-4fd5-8696-c343d9af7634\");\n//    modelBuilder.Entity<User>().HasData(new User\n//    {\n//        Id = superAdminUserId,\n//        Name = \"Super Admin\",\n//        Email = \"admin@xbytechat.com\",\n//        RoleId = superadminRoleId,     // uses the constant defined above\n//        Status = \"active\",\n//        CreatedAt = DateTime.UtcNow,   // will be snapshotted into the migration\n//        DeletedAt = null,\n//        IsDeleted = false,\n//        BusinessId = null,\n//        PasswordHash = \"JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk=\",\n//        RefreshToken = null,\n//        RefreshTokenExpiry = null\n//    });\n\n\n//    // ===== Plans seed (idempotent) =====\n//    var basicPlanId = Guid.Parse(\"5f9f5de1-a0b2-48ba-b03d-77b27345613f\");\n//    var planCreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n//    modelBuilder.Entity<Plan>().HasData(new Plan\n//    {\n//        Id = basicPlanId,\n//        Code = \"basic\",\n//        Name = \"Basic\",\n//        Description = \"Default free plan\",\n//        // MonthlyQuota = 1000,\n//        IsActive = true,\n//        CreatedAt = planCreatedAt\n//    });\n//    // ===== Permissions seed\n\n//    var created = new DateTime(2025, 9, 13, 0, 0, 0, DateTimeKind.Utc);\n\n//    modelBuilder.Entity<Permission>().HasData(\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000000\"), Code = \"dashboard.view\", Name = \"dashboard.view\", Group = \"Dashboard\", Description = \"Permission for dashboard.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000001\"), Code = \"campaign.view\", Name = \"campaign.view\", Group = \"Campaign\", Description = \"Permission for campaign.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000002\"), Code = \"campaign.create\", Name = \"campaign.create\", Group = \"Campaign\", Description = \"Permission for campaign.create\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000003\"), Code = \"campaign.delete\", Name = \"campaign.delete\", Group = \"Campaign\", Description = \"Permission for campaign.delete\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000004\"), Code = \"product.view\", Name = \"product.view\", Group = \"Catalog\", Description = \"Permission for product.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000005\"), Code = \"product.create\", Name = \"product.create\", Group = \"Catalog\", Description = \"Permission for product.create\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000006\"), Code = \"product.delete\", Name = \"product.delete\", Group = \"Catalog\", Description = \"Permission for product.delete\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000007\"), Code = \"contacts.view\", Name = \"contacts.view\", Group = \"CRM\", Description = \"Permission for contacts.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000008\"), Code = \"tags.edit\", Name = \"tags.edit\", Group = null, Description = \"Permission for tags.edit\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000009\"), Code = \"admin.business.approve\", Name = \"admin.business.approve\", Group = \"Admin\", Description = \"Permission for admin.business.approve\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000010\"), Code = \"admin.logs.view\", Name = \"admin.logs.view\", Group = null, Description = \"Permission for admin.logs.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000014\"), Code = \"admin.plans.delete\", Name = \"admin.plans.delete\", Group = \"Admin\", Description = \"Permission to delete plans\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"74c8034f-d9cb-4a17-8578-a9f765bd845c\"), Code = \"messaging.report.view\", Name = \"messaging.report.view\", Group = \"Messaging\", Description = \"Permission for messaging.report.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"c819f1bd-422d-4609-916c-cc185fe44ab0\"), Code = \"messaging.status.view\", Name = \"messaging.status.view\", Group = \"Messaging\", Description = \"Permission for messaging.status.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"eecd0fac-223c-4dba-9fa1-2a6e973d61d1\"), Code = \"messaging.inbox.view\", Name = \"messaging.inbox.view\", Group = \"Messaging\", Description = \"Permission for messaging.inbox.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"974af1f9-3caa-4857-a1a7-48462c389332\"), Code = \"messaging.send.text\", Name = \"messaging.send.text\", Group = \"Messaging\", Description = \"Permission for messaging.send.text\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"0485154c-dde5-4732-a7aa-a379c77a5b27\"), Code = \"messaging.send.template\", Name = \"messaging.send.template\", Group = \"Messaging\", Description = \"Permission for messaging.send.template\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"29461562-ef9c-48c0-a606-482ff57b8f95\"), Code = \"messaging.send\", Name = \"messaging.send\", Group = \"Messaging\", Description = \"Permission for messaging.send\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"bbc5202a-eac9-40bb-aa78-176c677dbf5b\"), Code = \"messaging.whatsappsettings.view\", Name = \"messaging.whatsappsettings.view\", Group = \"Messaging\", Description = \"Permission for admin.whatsappsettings.view\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"205b87c7-b008-4e51-9fea-798c2dc4f9c2\"), Code = \"admin.whatsappsettings.view\", Name = \"admin.whatsappsettings.view\", Group = \"Admin\", Description = \"Permission for admin.whatsappsettings.view\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"6e4d3a86-7cf9-4ac2-b8a7-ed10c9f0173d\"), Code = \"settings.whatsapp.view\", Name = \"Settings - WhatsApp View\", Group = \"Settings\", Description = \"Permission for users to view & manage WhatsApp Settings\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"ad36cdb7-5221-448b-a6a6-c35c9f88d021\"), Code = \"inbox.view\", Name = \"inbox.view\", Group = \"Inbox\", Description = \"Permission to Inbox View\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"74828fc0-e358-4cfc-b924-13719a0d9f50\"), Code = \"inbox.menu\", Name = \"inbox.menu\", Group = \"Inbox\", Description = \"Permission to View Menu\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"98572fe7-d142-475a-b990-f248641809e2\"), Code = \"settings.profile.view\", Name = \"Complete Profile\", Group = \"Settings\", Description = \"Permission to Complete Profile\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"821480c6-1464-415e-bba8-066fcb4e7e63\"), Code = \"automation.menu\", Name = \"automation.menu\", Group = \"Automation\", Description = \"Permission to view automation menu\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"918a61d0-5ab6-46af-a3d3-41e37b7710f9\"), Code = \"automation.Create.Template.Flow\", Name = \"automation.Create.Template.Flow\", Group = \"Automation\", Description = \"Permission to Create Template Flow\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"9ae90cfe-3fea-4307-b024-3083c2728148\"), Code = \"automation.View.Template.Flow\", Name = \"automation.View.Template.Flow\", Group = \"Automation\", Description = \"Permission to View Template Flow\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"93c5d5a7-f8dd-460a-8c7b-e3788440ba3a\"), Code = \"automation.Create.TemplatePlusFreetext.Flow\", Name = \"automation.Create.TemplatePlusFreetext.Flow\", Group = \"Automation\", Description = \"Permission to Create Template + Freetext Flow\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"7d7cbceb-4ce7-4835-85cd-59562487298d\"), Code = \"automation.View.TemplatePlusFreetext.Flow\", Name = \"automation.View.TemplatePlusFreetext.Flow\", Group = \"Automation\", Description = \"Permission to View Template + Freetext Flow\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"636b17f2-1c54-4e26-a8cd-dbf561dcb522\"), Code = \"automation.View.Template.Flow_analytics\", Name = \"automation.View.Template.Flow_analytics\", Group = \"Automation\", Description = \"Permission to View Flow AnaLytics\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"adfa8490-9705-4a36-a86e-d5bff7ddc220\"), Code = \"automation.View.TemplatePlusFreeText.Flow_analytics\", Name = \"automation.View.TemplatePlusFreeText.Flow_analytics\", Group = \"Automation\", Description = \"Permission to View Templat Plus free text Flow AnaLytics\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"0dedac5b-81c8-44c3-8cfe-76c58e29c6db\"), Code = \"automation_trigger_test\", Name = \"automation_trigger_test\", Group = \"Automation\", Description = \"Permission to to trigger manual test\", IsActive = true, CreatedAt = created },\n\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000011\"), Code = \"admin.plans.view\", Name = \"admin.plans.view\", Group = \"Admin\", Description = \"Permission to view plan manager\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000012\"), Code = \"admin.plans.create\", Name = \"admin.plans.create\", Group = \"Admin\", Description = \"Permission to create new plans\", IsActive = true, CreatedAt = created },\n//        new Permission { Id = Guid.Parse(\"30000000-0000-0000-0000-000000000013\"), Code = \"admin.plans.update\", Name = \"admin.plans.update\", Group = \"Admin\", Description = \"Permission to update existing plans\", IsActive = true, CreatedAt = created }\n//    );\n\n\n\n//    // ========== 🧩 CORRECT RELATIONSHIPS ==========\n\n//    // Role ↔️ RolePermission (One-to-Many)\n//    modelBuilder.Entity<RolePermission>()\n//        .HasOne(rp => rp.Role)\n//        .WithMany(r => r.RolePermissions)\n//        .HasForeignKey(rp => rp.RoleId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    // Permission ↔️ RolePermission (One-to-Many)\n//    modelBuilder.Entity<RolePermission>()\n//        .HasOne(rp => rp.Permission)\n//        .WithMany(p => p.RolePermissions)\n//        .HasForeignKey(rp => rp.PermissionId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    // User ↔️ UserPermission (One-to-Many)\n//    modelBuilder.Entity<UserPermission>()\n//        .HasOne(up => up.User)\n//        .WithMany(u => u.UserPermissions)\n//        .HasForeignKey(up => up.UserId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    // Permission ↔️ UserPermission (One-to-Many)\n//    modelBuilder.Entity<UserPermission>()\n//        .HasOne(up => up.Permission)\n//        .WithMany(p => p.UserPermissions)\n//        .HasForeignKey(up => up.PermissionId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    // ========== (Rest of your model mappings below remain the same) ==========\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasOne(s => s.MessageLog)\n//        .WithMany()\n//        .HasForeignKey(s => s.MessageLogId)\n//        .OnDelete(DeleteBehavior.Restrict);\n\n//    modelBuilder.Entity<LeadTimeline>()\n//        .HasOne(t => t.Contact)\n//        .WithMany()\n//        .HasForeignKey(t => t.ContactId);\n\n//    modelBuilder.Entity<Campaign>()\n//        .HasOne(c => c.Business)\n//        .WithMany(b => b.Campaigns)\n//        .HasForeignKey(c => c.BusinessId)\n//        .IsRequired();\n\n//    modelBuilder.Entity<CampaignRecipient>()\n//        .HasOne(r => r.Campaign)\n//        .WithMany(c => c.Recipients)\n//        .HasForeignKey(r => r.CampaignId);\n\n//    modelBuilder.Entity<CampaignRecipient>()\n//        .HasOne(r => r.Contact)\n//        .WithMany()\n//        .HasForeignKey(r => r.ContactId)\n//        .IsRequired(false)                      // <- optional FK\n//        .OnDelete(DeleteBehavior.SetNull);\n\n//    modelBuilder.Entity<CampaignRecipient>()\n//        .HasOne(r => r.Business)\n//        .WithMany()\n//        .HasForeignKey(r => r.BusinessId)\n//        .OnDelete(DeleteBehavior.Restrict);\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasOne(s => s.Recipient)\n//        .WithMany(r => r.SendLogs)\n//        .HasForeignKey(s => s.RecipientId);\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasOne(s => s.Contact)\n//        .WithMany()\n//        .HasForeignKey(s => s.ContactId);\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasOne(s => s.Campaign)\n//        .WithMany(c => c.SendLogs)\n//        .HasForeignKey(s => s.CampaignId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    modelBuilder.Entity<ContactTag>()\n//        .HasOne(ct => ct.Contact)\n//        .WithMany(c => c.ContactTags)\n//        .HasForeignKey(ct => ct.ContactId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    modelBuilder.Entity<ContactTag>()\n//        .HasOne(ct => ct.Tag)\n//        .WithMany(t => t.ContactTags)\n//        .HasForeignKey(ct => ct.TagId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    modelBuilder.Entity<Role>()\n//        .HasMany(r => r.Users)\n//        .WithOne(u => u.Role)\n//        .HasForeignKey(u => u.RoleId)\n//        .OnDelete(DeleteBehavior.Restrict);\n\n//    modelBuilder.Entity<Campaign>()\n//        .HasMany(c => c.MultiButtons)\n//        .WithOne(b => b.Campaign)\n//        .HasForeignKey(b => b.CampaignId)\n//        .OnDelete(DeleteBehavior.Cascade);\n\n//    modelBuilder.Entity<MessageLog>()\n//        .HasOne(m => m.SourceCampaign)\n//        .WithMany(c => c.MessageLogs)\n//        .HasForeignKey(m => m.CampaignId)\n//        .OnDelete(DeleteBehavior.Restrict);\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .Property(s => s.BusinessId)\n//        .IsRequired();\n\n//    modelBuilder.Entity<FlowButtonLink>()\n//        .HasKey(b => b.Id);\n\n\n//    modelBuilder.Entity<Business>()\n//                   .HasMany(b => b.WhatsAppSettings)\n//                   .WithOne()\n//                   .HasForeignKey(s => s.BusinessId)\n//                   .OnDelete(DeleteBehavior.Cascade);\n\n//    modelBuilder.Entity<ContactRead>()\n//        .HasIndex(cr => new { cr.ContactId, cr.UserId })\n//        .IsUnique();\n\n//    modelBuilder.Entity<AutoReplyFlowNode>()\n//        .OwnsOne(n => n.Position);\n\n//    modelBuilder.Entity<FeatureAccess>()\n//    .HasIndex(f => new { f.BusinessId, f.FeatureName })\n//    .IsUnique();\n\n//    modelBuilder.Entity<WhatsAppTemplate>(e =>\n//    {\n//        e.Property(x => x.Body).HasColumnType(\"text\");\n//        e.Property(x => x.ButtonsJson).HasColumnType(\"text\");\n//        e.Property(x => x.RawJson).HasColumnType(\"text\");\n//    });\n//    modelBuilder.Entity<CampaignClickLog>(e =>\n//    {\n//        e.HasIndex(x => new { x.CampaignId, x.ClickType, x.ClickedAt });\n//        e.HasIndex(x => new { x.CampaignId, x.ButtonIndex });\n//        e.HasIndex(x => new { x.CampaignId, x.ContactId });\n//    });\n\n//    modelBuilder.Entity<CampaignClickDailyAgg>(e =>\n//    {\n//        e.HasIndex(x => new { x.CampaignId, x.Day, x.ButtonIndex }).IsUnique();\n//        e.Property(x => x.Day).HasColumnType(\"date\");\n//    });\n\n//    modelBuilder.Entity<MessageLog>()\n//    .HasIndex(x => x.MessageId);\n//    modelBuilder.Entity<MessageLog>()\n//        .HasIndex(x => x.RunId);\n\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasIndex(x => x.MessageId);\n//    modelBuilder.Entity<CampaignSendLog>()\n//        .HasIndex(x => x.RunId);\n\n\n//    // WhatsAppSettingEntity (principal)\n//    modelBuilder.Entity<WhatsAppSettingEntity>(b =>\n//    {\n//        b.ToTable(\"WhatsAppSettings\");\n\n//        // SINGLE canonical principal key for the composite FK\n//        b.HasAlternateKey(s => new { s.BusinessId, s.Provider })\n//         .HasName(\"AK_WhatsAppSettings_BusinessId_Provider\");\n\n//        // Optional: also keep an index on it (not strictly needed if you have the AK)\n//        b.HasIndex(s => new { s.BusinessId, s.Provider })\n//         .IsUnique()\n//         .HasDatabaseName(\"UX_WhatsAppSettings_BusinessId_Provider\");\n\n//        // (You can keep your other helper indexes if you want)\n//        b.HasIndex(x => new { x.Provider, x.PhoneNumberId })\n//         .HasDatabaseName(\"IX_WhatsAppSettings_Provider_PhoneNumberId\");\n\n//        b.HasIndex(x => new { x.Provider, x.WhatsAppBusinessNumber })\n//         .HasDatabaseName(\"IX_WhatsAppSettings_Provider_BusinessNumber\");\n\n//        b.HasIndex(x => new { x.Provider, x.WabaId })\n//         .HasDatabaseName(\"IX_WhatsAppSettings_Provider_WabaId\");\n\n//        b.HasIndex(x => new { x.BusinessId, x.Provider, x.IsActive })\n//         .HasDatabaseName(\"IX_WhatsAppSettings_Business_Provider_IsActive\");\n\n//        b.HasIndex(x => new { x.Provider, x.WebhookCallbackUrl })\n//         .HasDatabaseName(\"IX_WhatsAppSettings_Provider_CallbackUrl\");\n\n//        // REMOVE this if you previously had it: the Provider_ci computed column\n//        // REMOVE the unique (BusinessId, Provider_ci) index as well\n//    });\n//    // ---------- CampaignSendLog composite index (fast status reconciliation) ----------\n//    modelBuilder.Entity<CampaignSendLog>(b =>\n//    {\n//        b.HasIndex(x => new { x.BusinessId, x.MessageId })\n//         .HasDatabaseName(\"IX_CampaignSendLogs_Business_MessageId\");\n//    });\n\n//    // ---------- MessageLog composite indexes (fast joins & inbound lookups) ----------\n//    modelBuilder.Entity<MessageLog>(b =>\n//    {\n//        b.HasIndex(x => new { x.BusinessId, x.MessageId })\n//         .HasDatabaseName(\"IX_MessageLogs_Business_MessageId\");\n\n//        b.HasIndex(x => new { x.BusinessId, x.RecipientNumber })\n//         .HasDatabaseName(\"IX_MessageLogs_Business_Recipient\");\n//    });\n\n//    modelBuilder.Entity<Contact>()\n//        .HasIndex(c => new { c.BusinessId, c.PhoneNumber })\n//        .IsUnique();\n//    // -------- ContactReads: one row per (Business, User, Contact) --------\n//    modelBuilder.Entity<ContactRead>()\n//        .HasIndex(cr => new { cr.BusinessId, cr.UserId, cr.ContactId })\n//        .IsUnique()\n//        .HasDatabaseName(\"ux_contactreads_biz_user_contact\");\n\n//    // -------- MessageLogs: computed column + composite index for unread --------\n//    // Create a shadow computed column MessageTime = COALESCE(SentAt, CreatedAt)\n//    modelBuilder.Entity<MessageLog>()\n//        .Property<DateTime?>(\"MessageTime\")\n//        .HasComputedColumnSql(\"COALESCE(\\\"SentAt\\\", \\\"CreatedAt\\\")\", stored: true);\n\n//    // Composite index used by unread query:\n//    // WHERE BusinessId = ? AND IsIncoming AND ContactId IS NOT NULL\n//    // AND (SentAt ?? CreatedAt) > LastReadAt\n//    modelBuilder.Entity<MessageLog>()\n//        .HasIndex(\"BusinessId\", \"IsIncoming\", \"ContactId\", \"MessageTime\")\n//        .HasDatabaseName(\"ix_msglogs_biz_in_contact_msgtime\");\n//    // Quick Reply\n//    modelBuilder.Entity<QuickReply>()\n//        .HasIndex(q => new { q.BusinessId, q.Scope, q.IsActive });\n\n//    modelBuilder.Entity<QuickReply>()\n//        .HasIndex(q => new { q.BusinessId, q.OwnerUserId, q.IsActive });\n\n//    modelBuilder.Entity<QuickReply>()\n//        .Property(q => q.UpdatedAt)\n//        .HasDefaultValueSql(\"NOW()\");\n\n//    modelBuilder.Entity<QuickReply>(e =>\n//    {\n//        e.HasIndex(x => new { x.BusinessId, x.Scope, x.IsDeleted, x.IsActive });\n//        e.HasIndex(x => new { x.OwnerUserId, x.IsDeleted, x.IsActive });\n//        e.HasIndex(x => x.UpdatedAt);\n//        e.Property(x => x.Title).HasMaxLength(120).IsRequired();\n//        e.Property(x => x.Language).HasMaxLength(8);\n//    });\n\n//    modelBuilder.Entity<WhatsAppPhoneNumber>(e =>\n//    {\n//        e.ToTable(\"WhatsAppPhoneNumbers\");\n//        e.HasKey(x => x.Id);\n\n//        e.Property(x => x.Provider).IsRequired();\n//        e.Property(x => x.PhoneNumberId).IsRequired();\n\n//        // Composite FK → principal (BusinessId, Provider)\n//        e.HasOne<WhatsAppSettingEntity>()\n//         .WithMany(s => s.WhatsAppBusinessNumbers)           // keep your nav if you have it\n//         .HasForeignKey(x => new { x.BusinessId, x.Provider })\n//         .HasPrincipalKey(s => new { s.BusinessId, s.Provider }) // <-- expression overload\n//         .OnDelete(DeleteBehavior.Cascade);\n\n//        // Unique idempotency for upsert\n//        e.HasIndex(x => new { x.BusinessId, x.Provider, x.PhoneNumberId })\n//         .IsUnique()\n//         .HasDatabaseName(\"UX_WhatsappPhoneNumbers_Bus_Prov_PhoneId\");\n//    });\n//    modelBuilder.Entity<Campaign>(e =>\n//    {\n//        // Freeze provider schema snapshot on the campaign\n//        e.Property(x => x.TemplateSchemaSnapshot).HasColumnType(\"jsonb\");\n//    });\n\n//    modelBuilder.Entity<CampaignRecipient>(e =>\n//    {\n//        // Per-recipient frozen data produced by materializer\n//        e.Property(x => x.ResolvedParametersJson).HasColumnType(\"jsonb\");\n//        e.Property(x => x.ResolvedButtonUrlsJson).HasColumnType(\"jsonb\");\n\n//        // Fast idempotency lookup to prevent duplicate sends\n//        e.HasIndex(x => x.IdempotencyKey).HasDatabaseName(\"ix_campaignrecipients_idempotency\");\n\n//        e.HasOne<xbytechat.api.Features.CampaignModule.Models.AudienceMember>()\n//         .WithMany().HasForeignKey(x => x.AudienceMemberId).OnDelete(DeleteBehavior.SetNull);\n//    });\n\n//    modelBuilder.Entity<xbytechat.api.Features.CampaignModule.Models.CampaignVariableMap>(e =>\n//    {\n//        e.ToTable(\"CampaignVariableMaps\");\n\n//        e.HasKey(x => x.Id);\n\n//        // Scope: ensure uniqueness per (Campaign, Component, Index)\n//        e.HasIndex(x => new { x.CampaignId, x.Component, x.Index })\n//         .IsUnique()\n//         .HasDatabaseName(\"ux_cvm_campaign_component_index\");\n\n//        // Relationship\n//        e.HasOne(x => x.Campaign)\n//         .WithMany(c => c.VariableMaps)             // add ICollection<CampaignVariableMap> VariableMaps { get; set; } to Campaign if you want navs later (optional)\n//         .HasForeignKey(x => x.CampaignId)\n//         .OnDelete(DeleteBehavior.Cascade);\n//    });\n\n//    modelBuilder.Entity<xbytechat.api.Features.CampaignModule.Models.CsvBatch>(e =>\n//    {\n//        e.ToTable(\"CsvBatches\");\n//        e.HasKey(x => x.Id);\n\n//        e.Property(x => x.HeadersJson).HasColumnType(\"jsonb\");\n\n//        e.HasIndex(x => x.Checksum).HasDatabaseName(\"ix_csvbatch_checksum\");\n//        e.HasIndex(x => new { x.BusinessId, x.CreatedAt }).HasDatabaseName(\"ix_csvbatch_biz_created\");\n//    });\n\n//    modelBuilder.Entity<CsvRow>(e =>\n//    {\n//        e.ToTable(\"CsvRows\");\n//        e.HasKey(x => x.Id);\n\n//        e.Property(x => x.RowJson).HasColumnType(\"jsonb\");\n\n//        // Unique within a batch\n//        e.HasIndex(x => new { x.BatchId, x.RowIndex })\n//         .IsUnique()\n//         .HasDatabaseName(\"ux_csvrow_batch_rowidx\");\n\n//        // Useful for fast joins/normalization checks\n//        e.HasIndex(x => x.PhoneE164).HasDatabaseName(\"ix_csvrow_phone\");\n\n//        // FK → CsvBatch\n//        e.HasOne(x => x.Batch)\n//         .WithMany()\n//         .HasForeignKey(x => x.BatchId)\n//         .OnDelete(DeleteBehavior.Cascade);\n//    });\n\n//    modelBuilder.Entity<xbytechat.api.Features.CampaignModule.Models.Audience>(e =>\n//    {\n//        e.ToTable(\"Audiences\");\n//        e.HasKey(x => x.Id);\n\n//        e.HasIndex(x => new { x.BusinessId, x.IsDeleted })\n//         .HasDatabaseName(\"ix_audiences_biz_deleted\");\n\n//        // Optional link to the batch this audience came from\n//        e.HasOne(x => x.CsvBatch)\n//         .WithMany()\n//         .HasForeignKey(x => x.CsvBatchId)\n//         .OnDelete(DeleteBehavior.SetNull);\n//    });\n\n//    modelBuilder.Entity<AudienceMember>(e =>\n//    {\n//        e.ToTable(\"AudienceMembers\");\n//        e.HasKey(x => x.Id);\n\n//        e.Property(x => x.AttributesJson).HasColumnType(\"jsonb\");\n\n//        // Prevent duplicate phone rows inside a single audience\n//        e.HasIndex(x => new { x.AudienceId, x.PhoneE164 })\n//         .IsUnique()\n//         .HasDatabaseName(\"ux_audmember_audience_phone\");\n\n//        e.HasIndex(x => x.ContactId).HasDatabaseName(\"ix_audmember_contact\");\n\n//        e.HasOne(x => x.Audience)\n//         .WithMany(a => a.Members)\n//         .HasForeignKey(x => x.AudienceId)\n//         .OnDelete(DeleteBehavior.Cascade);\n//    });\n//    modelBuilder.Entity<OutboundCampaignJob>(e =>\n//    {\n//        e.ToTable(\"OutboundCampaignJobs\");\n//        e.HasIndex(x => new { x.Status, x.NextAttemptAt });\n//        e.HasIndex(x => x.CampaignId);\n//        e.Property(x => x.Status).HasMaxLength(32);\n//        e.Property(x => x.LastError).HasMaxLength(4000);\n//    });\n//    modelBuilder.Entity<CsvBatch>(b =>\n//    {\n//        b.HasIndex(x => new { x.BusinessId, x.AudienceId }); // helpful for lookups\n//        b.HasOne<Audience>()                                  // no nav prop needed right now\n//         .WithMany()\n//         .HasForeignKey(x => x.AudienceId)\n//         .OnDelete(DeleteBehavior.SetNull);                   // if audience is deleted, keep batch\n//    });\n//    modelBuilder.Entity<CsvRow>(b =>\n//    {\n//        // Unique per batch row\n//        b.HasIndex(x => new { x.BatchId, x.RowIndex }).IsUnique();\n\n//        // Helpful for multi-tenant queries by batch\n//        b.HasIndex(x => new { x.BusinessId, x.BatchId });\n//    });\n//    // Audience FKs + helpful indices\n//    modelBuilder.Entity<Audience>(b =>\n//    {\n//        // Helpful indexes\n//        b.HasIndex(x => new { x.BusinessId, x.CampaignId });\n//        b.HasIndex(x => new { x.BusinessId, x.CsvBatchId });\n\n//        // Many Audiences -> one Campaign (dependent = Audience via CampaignId)\n//        // Requires: Audience.Campaign (nav) and Campaign.Audiences (collection nav)\n//        b.HasOne(a => a.Campaign)\n//         .WithMany(c => c.Audiences)\n//         .HasForeignKey(a => a.CampaignId)\n//         .OnDelete(DeleteBehavior.SetNull);\n\n//        // Optional backlink to source CSV batch (no back-collection needed)\n//        b.HasOne(a => a.CsvBatch)\n//         .WithMany()\n//         .HasForeignKey(a => a.CsvBatchId)\n//         .OnDelete(DeleteBehavior.SetNull);\n//    });\n\n\n//}\n//}\n//}\n"
    }
  ]
}
