{
  "name": "xbytechat-api/Features",
  "part": 2,
  "of": 4,
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignService.cs",
      "sha256": "e60382575da8199eeb0a0b10342b01fdc945baed20ddb0b53c4f5927624d56f2",
      "language": "csharp",
      "size": 208768,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Helpers;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing Newtonsoft.Json;\nusing xbytechat.api.WhatsAppSettings.Services;\nusing xbytechat_api.Features.Billing.Services;\nusing System.Text.RegularExpressions;\nusing xbytechat.api.Common.Utils;\nusing xbytechat.api.Features.TemplateModule.Services;\nusing System.Linq;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public partial class CampaignService : ICampaignService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageService _messageService;\n        private readonly IServiceProvider _serviceProvider;\n        private readonly ILeadTimelineService _timelineService;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n        private readonly IUrlBuilderService _urlBuilderService;\n        private readonly IWhatsAppSenderService _whisatsAppSenderService;\n        private readonly IBillingIngestService _billingIngest;\n        // private readonly Serilog.ILogger _logger = Log.ForContext<CampaignService>();\n\n        private readonly ILogger<WhatsAppTemplateService> _logger;\n        public CampaignService(AppDbContext context, IMessageService messageService,\n                               IServiceProvider serviceProvider,\n                               ILeadTimelineService timelineService,\n                               IMessageEngineService messageEngineService,\n                               IWhatsAppTemplateFetcherService templateFetcherService,\n                               IUrlBuilderService urlBuilderService,\n                               IWhatsAppSenderService whatsAppSenderService, IBillingIngestService billingIngest,\n                               ILogger<WhatsAppTemplateService> logger\n                               )\n        {\n            _context = context;\n            _messageService = messageService;\n            _serviceProvider = serviceProvider;\n            _timelineService = timelineService; // ✅ new\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n            _urlBuilderService = urlBuilderService;\n            _whisatsAppSenderService = whatsAppSenderService;\n            _billingIngest = billingIngest;\n            _logger = logger;\n\n        }\n\n\n        #region Get All Types of Get and Update and Delete Methods\n        // Reads per-recipient variables (header/button canonical keys)\n        private static string? ResolvePerRecipientValue(CampaignRecipient r, string key)\n        {\n            if (string.IsNullOrWhiteSpace(r.ResolvedButtonUrlsJson)) return null;\n            try\n            {\n                var dict = JsonConvert.DeserializeObject<Dictionary<string, string>>(r.ResolvedButtonUrlsJson)\n                           ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n                return dict.TryGetValue(key, out var v) ? v : null;\n            }\n            catch { return null; }\n        }\n\n        // Returns ordered {{1}}..{{N}} values for a recipient; falls back to campaign snapshot\n        private static List<string> BuildBodyParametersForRecipient(Campaign campaign, CampaignRecipient r)\n        {\n            // Preferred: frozen params on recipient (string[])\n            if (!string.IsNullOrWhiteSpace(r.ResolvedParametersJson))\n            {\n                try\n                {\n                    var arr = JsonConvert.DeserializeObject<string[]>(r.ResolvedParametersJson);\n                    if (arr != null) return arr.ToList();\n                }\n                catch { /* ignore */ }\n            }\n\n            // Fallback: campaign.TemplateParameters (stored as JSON array of strings)\n            try\n            {\n                return TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters).ToList();\n            }\n            catch\n            {\n                return new List<string>();\n            }\n        }\n\n        // Builds canonical dict for header.* and buttonN.url_param with safe fallbacks\n        // ✅ Works with your current Campaign model (ImageUrl only). No migration needed.\n        private static Dictionary<string, string> BuildButtonParametersForRecipient(Campaign campaign, CampaignRecipient r)\n        {\n            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n\n            // 1) Recipient-specific vars (from CSV materialization)\n            if (!string.IsNullOrWhiteSpace(r.ResolvedButtonUrlsJson))\n            {\n                try\n                {\n                    var d = JsonConvert.DeserializeObject<Dictionary<string, string>>(r.ResolvedButtonUrlsJson);\n                    if (d != null)\n                    {\n                        foreach (var kv in d)\n                            dict[kv.Key] = kv.Value ?? string.Empty;\n                    }\n                }\n                catch { /* ignore */ }\n            }\n\n            // 2) Header fallbacks from campaign (only ImageUrl exists in this branch)\n            if (!dict.ContainsKey(\"header.image_url\") && !string.IsNullOrWhiteSpace(campaign.ImageUrl))\n                dict[\"header.image_url\"] = campaign.ImageUrl!;\n\n            // NOTE:\n            // We do NOT touch header.video_url/header.document_url here,\n            // because Campaign.VideoUrl/DocumentUrl do not exist in this branch.\n\n            // 3) Button URL fallbacks from campaign buttons\n            if (campaign.MultiButtons != null)\n            {\n                foreach (var b in campaign.MultiButtons.OrderBy(b => b.Position).Take(3))\n                {\n                    var key = $\"button{b.Position}.url_param\";\n                    if (!dict.ContainsKey(key) && !string.IsNullOrWhiteSpace(b.Value))\n                        dict[key] = b.Value!;\n                }\n            }\n\n            return dict;\n        }\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId)\n        {\n            return await _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n\n                })\n                .ToListAsync();\n        }\n        public async Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Cta)\n                .Include(c => c.MultiButtons)\n                .Include(c => c.CTAFlowConfig)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null) return null;\n\n            return new CampaignDto\n            {\n                Id = campaign.Id,\n                Name = campaign.Name,\n                MessageTemplate = campaign.MessageTemplate,\n                MessageBody = campaign.MessageBody,\n                TemplateId = campaign.TemplateId,\n                CampaignType = campaign.CampaignType,\n                Status = campaign.Status,\n                ImageUrl = campaign.ImageUrl,\n                ImageCaption = campaign.ImageCaption,\n                CreatedAt = campaign.CreatedAt,\n                ScheduledAt = campaign.ScheduledAt,\n                CtaId = campaign.CtaId,\n                Cta = campaign.Cta == null ? null : new CtaPreviewDto\n                {\n                    Title = campaign.Cta.Title,\n                    ButtonText = campaign.Cta.ButtonText\n                },\n                MultiButtons = campaign.MultiButtons?\n                    .Select(b => new CampaignButtonDto\n                    {\n                        ButtonText = b.Title,\n                        ButtonType = b.Type,\n                        TargetUrl = b.Value\n                    }).ToList() ?? new List<CampaignButtonDto>(),\n                // ✅ Flow surface to UI\n                CTAFlowConfigId = campaign.CTAFlowConfigId,\n                CTAFlowName = campaign.CTAFlowConfig?.FlowName\n            };\n        }\n        // Returns the entry step (no incoming links) and its template name.\n        // If flow is missing/invalid, returns (null, null) and caller should ignore.\n        private async Task<(Guid? entryStepId, string? entryTemplate)> ResolveFlowEntryAsync(Guid businessId, Guid? flowId)\n        {\n            if (!flowId.HasValue || flowId.Value == Guid.Empty) return (null, null);\n\n            var flow = await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(f => f.Id == flowId.Value && f.BusinessId == businessId && f.IsActive);\n\n            if (flow == null || flow.Steps == null || flow.Steps.Count == 0) return (null, null);\n\n            var incoming = new HashSet<Guid>(\n                flow.Steps.SelectMany(s => s.ButtonLinks)\n                          .Where(l => l.NextStepId.HasValue)\n                          .Select(l => l.NextStepId!.Value)\n            );\n\n            var entry = flow.Steps\n                .OrderBy(s => s.StepOrder)\n                .FirstOrDefault(s => !incoming.Contains(s.Id));\n\n            return entry == null ? (null, null) : (entry.Id, entry.TemplateToSend);\n        }\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(type))\n                query = query.Where(c => c.CampaignType == type);\n\n            return await query\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n                    ImageUrl = c.ImageUrl,            // ✅ Now mapped\n                    ImageCaption = c.ImageCaption,    // ✅ Now mapped\n                    CtaTitle = c.Cta != null ? c.Cta.Title : null,  // optional\n                    RecipientCount = c.Recipients.Count()\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId)\n        {\n            var recipients = await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId && r.Contact.BusinessId == businessId)\n                .Select(r => new ContactDto\n                {\n                    Id = r.Contact.Id,\n                    Name = r.Contact.Name,\n                    PhoneNumber = r.Contact.PhoneNumber,\n                    Email = r.Contact.Email,\n                    LeadSource = r.Contact.LeadSource,\n                    CreatedAt = r.Contact.CreatedAt\n                })\n                .ToListAsync();\n\n            return recipients;\n        }\n\n        public async Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt);\n\n            var total = await query.CountAsync();\n\n            var items = await query\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt\n                })\n                .ToListAsync();\n\n            return new PaginatedResponse<CampaignSummaryDto>\n            {\n                Items = items,\n                TotalCount = total,\n                Page = request.Page,\n                PageSize = request.PageSize\n            };\n        }\n        public async Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto)\n        {\n            var campaign = await _context.Campaigns.FindAsync(id);\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            // ✅ Extract BusinessId from current campaign\n            var businessId = campaign.BusinessId;\n\n            // ✅ Optional CTA ownership validation\n            if (dto.CtaId.HasValue)\n            {\n                var cta = await _context.CTADefinitions\n                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);\n\n                if (cta == null)\n                    throw new UnauthorizedAccessException(\"❌ The selected CTA does not belong to your business or is inactive.\");\n            }\n\n            // ✏️ Update campaign fields\n            campaign.Name = dto.Name;\n            campaign.MessageTemplate = dto.MessageTemplate;\n            campaign.TemplateId = dto.TemplateId;\n            campaign.FollowUpTemplateId = dto.FollowUpTemplateId;\n            campaign.CampaignType = dto.CampaignType;\n            campaign.CtaId = dto.CtaId;\n            campaign.ImageUrl = dto.ImageUrl;\n            campaign.ImageCaption = dto.ImageCaption;\n            campaign.UpdatedAt = DateTime.UtcNow;\n            // 🔒 Step 2.1: Refresh snapshot on update when template may have changed\n            try\n            {\n                var effectiveTemplateName = !string.IsNullOrWhiteSpace(campaign.TemplateId)\n                    ? campaign.TemplateId!\n                    : (campaign.MessageTemplate ?? \"\");\n\n                if (!string.IsNullOrWhiteSpace(effectiveTemplateName))\n                {\n                    var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(\n                        businessId,\n                        effectiveTemplateName,\n                        language: null,\n                        provider: campaign.Provider\n                    );\n\n                    campaign.TemplateSchemaSnapshot = snapshotMeta != null\n                        ? JsonConvert.SerializeObject(snapshotMeta)\n                        : JsonConvert.SerializeObject(new\n                        {\n                            Provider = campaign.Provider ?? \"\",\n                            TemplateName = effectiveTemplateName,\n                            Language = \"\" // unknown if not in provider meta\n                        });\n                }\n            }\n            catch (Exception ex)\n            {\n                Log.Warning(ex, \"⚠️ Template schema snapshot (update) failed for campaign {CampaignId}\", id);\n            }\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteCampaignAsync(Guid id)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == id);\n\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            _context.CampaignRecipients.RemoveRange(campaign.Recipients);\n            _context.Campaigns.Remove(campaign);\n\n            await _context.SaveChangesAsync();\n            Log.Information(\"🗑️ Campaign deleted: {Id}\", id);\n            return true;\n        }\n\n        #endregion\n\n        #region // 🆕 CreateCampaignAsync(Text/Image)\n\n\n        //public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)\n        //{\n        //    try\n        //    {\n        //        var campaignId = Guid.NewGuid();\n\n        //        // 🔁 Parse/normalize template parameters once\n        //        var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n        //            JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n        //        );\n\n        //        // 🔒 Validate + resolve sender (optional but recommended)\n        //        string? providerNorm = null;\n        //        if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n        //        {\n        //            // ask WhatsAppSenderService to validate ownership\n        //            var pair = await _whisatsAppSenderService.ResolveSenderPairAsync(businessId, dto.PhoneNumberId);\n        //            if (pair == null)\n        //                throw new InvalidOperationException(\"❌ Selected sender is invalid or does not belong to this business.\");\n        //            providerNorm = pair.Value.Provider; // already normalized to UPPER\n        //        }\n\n        //        // 🔄 Flow id from UI (null/empty => no flow). We will persist this as-is.\n        //        Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)\n        //            ? dto.CTAFlowConfigId.Value\n        //            : (Guid?)null;\n\n        //        Guid? savedFlowId = incomingFlowId;\n\n        //        // 🧩 FLOW VALIDATION (only to align the starting template)\n        //        string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;\n\n        //        CTAFlowConfig? flow = null;\n        //        CTAFlowStep? entryStep = null;\n\n        //        if (incomingFlowId.HasValue)\n        //        {\n        //            flow = await _context.CTAFlowConfigs\n        //                .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n        //                .FirstOrDefaultAsync(f =>\n        //                    f.Id == incomingFlowId.Value &&\n        //                    f.BusinessId == businessId &&\n        //                    f.IsActive);\n\n        //            if (flow != null)\n        //            {\n        //                var allIncoming = new HashSet<Guid>(flow.Steps\n        //                    .SelectMany(s => s.ButtonLinks)\n        //                    .Where(l => l.NextStepId.HasValue)\n        //                    .Select(l => l.NextStepId!.Value));\n\n        //                entryStep = flow.Steps\n        //                    .OrderBy(s => s.StepOrder)\n        //                    .FirstOrDefault(s => !allIncoming.Contains(s.Id));\n\n        //                if (entryStep != null &&\n        //                    !string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))\n        //                {\n        //                    selectedTemplateName = entryStep.TemplateToSend;\n        //                }\n        //            }\n        //        }\n\n        //        var template = await _templateFetcherService.GetTemplateByNameAsync(\n        //            businessId,\n        //            selectedTemplateName,\n        //            includeButtons: true\n        //        );\n\n        //        var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;\n        //        var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);\n\n        //        var campaign = new Campaign\n        //        {\n        //            Id = campaignId,\n        //            BusinessId = businessId,\n        //            Name = dto.Name,\n\n        //            MessageTemplate = dto.MessageTemplate,\n        //            TemplateId = selectedTemplateName,\n\n        //            FollowUpTemplateId = dto.FollowUpTemplateId,\n        //            CampaignType = dto.CampaignType ?? \"text\",\n        //            CtaId = dto.CtaId,\n        //            CTAFlowConfigId = savedFlowId,\n\n        //            ScheduledAt = dto.ScheduledAt,\n        //            CreatedBy = createdBy,\n        //            CreatedAt = DateTime.UtcNow,\n        //            UpdatedAt = DateTime.UtcNow,\n        //            Status = \"Draft\",\n        //            ImageUrl = dto.ImageUrl,\n        //            ImageCaption = dto.ImageCaption,\n        //            TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n        //            MessageBody = resolvedBody,\n\n        //            // 🟢 Persist sender choice (nullable if not selected)\n        //            Provider = providerNorm,\n        //            PhoneNumberId = dto.PhoneNumberId\n        //        };\n        //        // 🔒 Step 2.1: Snapshot template schema (text path)\n        //        try\n        //        {\n        //            var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(\n        //                businessId,\n        //                selectedTemplateName,\n        //                language: null,\n        //                provider: providerNorm\n        //            );\n\n        //            campaign.TemplateSchemaSnapshot = snapshotMeta != null\n        //                ? JsonConvert.SerializeObject(snapshotMeta)\n        //                : JsonConvert.SerializeObject(new\n        //                {\n        //                    Provider = providerNorm ?? \"\",\n        //                    TemplateName = selectedTemplateName,\n        //                    Language = template?.Language ?? \"\"\n        //                });\n        //        }\n        //        catch (Exception ex)\n        //        {\n        //            Log.Warning(ex, \"⚠️ Template schema snapshot failed for campaign {CampaignId}\", campaignId);\n        //        }\n\n        //        await _context.Campaigns.AddAsync(campaign);\n\n        //        if (dto.ContactIds != null && dto.ContactIds.Any())\n        //        {\n        //            var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                CampaignId = campaignId,\n        //                ContactId = contactId,\n        //                BusinessId = businessId,\n        //                Status = \"Pending\",\n        //                SentAt = null,\n        //                UpdatedAt = DateTime.UtcNow\n        //            });\n\n        //            await _context.CampaignRecipients.AddRangeAsync(recipients);\n        //        }\n\n        //        if (dto.MultiButtons != null && dto.MultiButtons.Any())\n        //        {\n        //            var buttons = dto.MultiButtons\n        //                .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n        //                .Take(3)\n        //                .Select((btn, index) => new CampaignButton\n        //                {\n        //                    Id = Guid.NewGuid(),\n        //                    CampaignId = campaignId,\n        //                    Title = btn.ButtonText,\n        //                    Type = btn.ButtonType ?? \"url\",\n        //                    Value = btn.TargetUrl,\n        //                    Position = index + 1,\n        //                    IsFromTemplate = false\n        //                });\n\n        //            await _context.CampaignButtons.AddRangeAsync(buttons);\n        //        }\n\n        //        if (template != null && template.ButtonParams?.Count > 0)\n        //        {\n        //            var buttonsToSave = new List<CampaignButton>();\n        //            var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();\n\n        //            var total = Math.Min(3, template.ButtonParams.Count);\n        //            for (int i = 0; i < total; i++)\n        //            {\n        //                var tplBtn = template.ButtonParams[i];\n        //                var isDynamic = (tplBtn.ParameterValue?.Contains(\"{{1}}\") ?? false);\n\n        //                var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);\n        //                var valueToSave = (isDynamic && userBtn != null)\n        //                    ? userBtn.Value?.Trim()\n        //                    : tplBtn.ParameterValue;\n\n        //                buttonsToSave.Add(new CampaignButton\n        //                {\n        //                    Id = Guid.NewGuid(),\n        //                    CampaignId = campaignId,\n        //                    Title = tplBtn.Text,\n        //                    Type = tplBtn.Type,\n        //                    Value = valueToSave,\n        //                    Position = i + 1,\n        //                    IsFromTemplate = true\n        //                });\n        //            }\n\n        //            await _context.CampaignButtons.AddRangeAsync(buttonsToSave);\n        //        }\n\n        //        await _context.SaveChangesAsync();\n\n        //        Log.Information(\"✅ Campaign '{Name}' created | FlowId: {Flow} | EntryTemplate: {Entry} | Sender: {Provider}/{PhoneId} | Recipients: {Contacts}\",\n        //            dto.Name,\n        //            savedFlowId,\n        //            entryStep?.TemplateToSend ?? selectedTemplateName,\n        //            providerNorm,\n        //            dto.PhoneNumberId,\n        //            dto.ContactIds?.Count ?? 0);\n\n        //        return campaignId;\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        Log.Error(ex, \"❌ Failed to create campaign\");\n        //        return null;\n        //    }\n        //}\n\n        public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)\n        {\n            try\n            {\n                var campaignId = Guid.NewGuid();\n\n                // 🔁 Parse/normalize template parameters once\n                var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n                    JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n                );\n\n                // 🔒 Validate + resolve sender (optional but recommended)\n                string? providerNorm = null;\n                if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                {\n                    var pair = await _whisatsAppSenderService.ResolveSenderPairAsync(businessId, dto.PhoneNumberId);\n                    if (pair == null)\n                        throw new InvalidOperationException(\"❌ Selected sender is invalid or does not belong to this business.\");\n                    providerNorm = pair.Value.Provider; // already normalized to UPPER\n                }\n\n                // 🔄 Flow id from UI (null/empty => no flow)\n                Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)\n                    ? dto.CTAFlowConfigId.Value\n                    : (Guid?)null;\n\n                Guid? savedFlowId = incomingFlowId;\n\n                // 🧩 FLOW VALIDATION (only to align the starting template)\n                string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;\n\n                CTAFlowConfig? flow = null;\n                CTAFlowStep? entryStep = null;\n\n                if (incomingFlowId.HasValue)\n                {\n                    flow = await _context.CTAFlowConfigs\n                        .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n                        .FirstOrDefaultAsync(f =>\n                            f.Id == incomingFlowId.Value &&\n                            f.BusinessId == businessId &&\n                            f.IsActive);\n\n                    if (flow != null)\n                    {\n                        var allIncoming = new HashSet<Guid>(flow.Steps\n                            .SelectMany(s => s.ButtonLinks)\n                            .Where(l => l.NextStepId.HasValue)\n                            .Select(l => l.NextStepId!.Value));\n\n                        entryStep = flow.Steps\n                            .OrderBy(s => s.StepOrder)\n                            .FirstOrDefault(s => !allIncoming.Contains(s.Id));\n\n                        if (entryStep != null &&\n                            !string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))\n                        {\n                            selectedTemplateName = entryStep.TemplateToSend;\n                        }\n                    }\n                }\n\n                var template = await _templateFetcherService.GetTemplateByNameAsync(\n                    businessId,\n                    selectedTemplateName,\n                    includeButtons: true\n                );\n\n                var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);\n\n                // =========================\n                // 🆕 Header kind + URL logic\n                // =========================\n                string headerKind = (dto.HeaderKind ?? \"\").Trim().ToLowerInvariant(); // \"image\" | \"video\" | \"document\" | \"text\" | \"none\"\n                bool isMediaHeader = headerKind == \"image\" || headerKind == \"video\" || headerKind == \"document\";\n\n                // Prefer new unified HeaderMediaUrl; fall back to ImageUrl for legacy image campaigns\n                string? headerUrl = string.IsNullOrWhiteSpace(dto.HeaderMediaUrl)\n                    ? (headerKind == \"image\" ? dto.ImageUrl : null)\n                    : dto.HeaderMediaUrl;\n\n                // ✅ Campaign type: headerKind ALWAYS wins (FE may still send \"text\")\n                string finalCampaignType = isMediaHeader\n                    ? headerKind                               // \"image\" | \"video\" | \"document\"\n                    : (dto.CampaignType ?? \"text\").Trim().ToLowerInvariant();\n\n                // clamp to known values\n                if (finalCampaignType != \"image\" &&\n                    finalCampaignType != \"video\" &&\n                    finalCampaignType != \"document\")\n                {\n                    finalCampaignType = \"text\";\n                }\n\n                // Validate media header needs URL\n                if (isMediaHeader && string.IsNullOrWhiteSpace(headerUrl))\n                    throw new InvalidOperationException(\"❌ Header media URL is required for this template.\");\n\n                // =========================================\n                // Create entity with correct media fields set\n                // =========================================\n                var campaign = new Campaign\n                {\n                    Id = campaignId,\n                    BusinessId = businessId,\n                    Name = dto.Name,\n\n                    MessageTemplate = dto.MessageTemplate,\n                    TemplateId = selectedTemplateName,\n\n                    FollowUpTemplateId = dto.FollowUpTemplateId,\n                    CampaignType = finalCampaignType,\n                    CtaId = dto.CtaId,\n                    CTAFlowConfigId = savedFlowId,\n\n                    ScheduledAt = dto.ScheduledAt,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    Status = \"Draft\",\n\n                    // Media fields (set exactly one depending on header kind)\n                    ImageUrl = headerKind == \"image\" ? headerUrl : null,\n                    ImageCaption = dto.ImageCaption,\n                    VideoUrl = headerKind == \"video\" ? headerUrl : null,\n                    DocumentUrl = headerKind == \"document\" ? headerUrl : null,\n\n                    TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n                    MessageBody = resolvedBody,\n\n                    // 🟢 Persist sender choice (nullable if not selected)\n                    Provider = providerNorm,\n                    PhoneNumberId = dto.PhoneNumberId\n                };\n\n                // 🔒 Step 2.1: Snapshot template schema (text path)\n                try\n                {\n                    var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(\n                        businessId,\n                        selectedTemplateName,\n                        language: null,\n                        provider: providerNorm?.ToLowerInvariant() // normalize to match DB (\"meta_cloud\"/\"pinnacle\")\n                    );\n\n                    campaign.TemplateSchemaSnapshot = snapshotMeta != null\n                        ? JsonConvert.SerializeObject(snapshotMeta)\n                        : JsonConvert.SerializeObject(new\n                        {\n                            Provider = providerNorm ?? \"\",\n                            TemplateName = selectedTemplateName,\n                            Language = template?.Language ?? \"\"\n                        });\n                }\n                catch (Exception ex)\n                {\n                    Log.Warning(ex, \"⚠️ Template schema snapshot failed for campaign {CampaignId}\", campaignId);\n                }\n\n                await _context.Campaigns.AddAsync(campaign);\n\n                if (dto.ContactIds != null && dto.ContactIds.Any())\n                {\n                    var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        ContactId = contactId,\n                        BusinessId = businessId,\n                        Status = \"Pending\",\n                        SentAt = null,\n                        UpdatedAt = DateTime.UtcNow\n                    });\n\n                    await _context.CampaignRecipients.AddRangeAsync(recipients);\n                }\n\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var buttons = dto.MultiButtons\n                        .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                        .Take(3)\n                        .Select((btn, index) => new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = btn.ButtonText,\n                            Type = btn.ButtonType ?? \"url\",\n                            Value = btn.TargetUrl,\n                            Position = index + 1,\n                            IsFromTemplate = false\n                        });\n\n                    await _context.CampaignButtons.AddRangeAsync(buttons);\n                }\n\n                if (template != null && template.ButtonParams?.Count > 0)\n                {\n                    var buttonsToSave = new List<CampaignButton>();\n                    var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();\n\n                    var total = Math.Min(3, template.ButtonParams.Count);\n                    for (int i = 0; i < total; i++)\n                    {\n                        var tplBtn = template.ButtonParams[i];\n                        var isDynamic = (tplBtn.ParameterValue?.Contains(\"{{1}}\") ?? false);\n\n                        var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);\n                        var valueToSave = (isDynamic && userBtn != null)\n                            ? userBtn.Value?.Trim()\n                            : tplBtn.ParameterValue;\n\n                        buttonsToSave.Add(new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = tplBtn.Text,\n                            Type = tplBtn.Type,\n                            Value = valueToSave,\n                            Position = i + 1,\n                            IsFromTemplate = true\n                        });\n                    }\n\n                    await _context.CampaignButtons.AddRangeAsync(buttonsToSave);\n                }\n\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Campaign '{Name}' created | Type:{Type} | Header:{HeaderKind} | FlowId:{Flow} | EntryTemplate:{Entry} | Sender:{Provider}/{PhoneId} | Recipients:{Contacts}\",\n                    dto.Name, finalCampaignType, headerKind,\n                    savedFlowId,\n                    entryStep?.TemplateToSend ?? selectedTemplateName,\n                    providerNorm,\n                    dto.PhoneNumberId,\n                    dto.ContactIds?.Count ?? 0);\n\n                return campaignId;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to create campaign\");\n                return null;\n            }\n        }\n\n        public async Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy)\n        {\n            var campaignId = Guid.NewGuid();\n\n            // 🔁 Parse/normalize template parameters once\n            var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n                JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n            );\n\n            // 🔄 Flow id from UI (null/empty => no flow). We will persist this as-is.\n            Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)\n                ? dto.CTAFlowConfigId.Value\n                : (Guid?)null;\n\n            // We will save this value regardless of validation outcome\n            Guid? savedFlowId = incomingFlowId;\n\n            // ============================================================\n            // 🧩 FLOW VALIDATION (only to align the starting template)\n            // ============================================================\n            string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;\n\n            CTAFlowConfig? flow = null;\n            CTAFlowStep? entryStep = null;\n\n            if (incomingFlowId.HasValue)\n            {\n                // load flow with steps+links and verify ownership\n                flow = await _context.CTAFlowConfigs\n                    .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n                    .FirstOrDefaultAsync(f =>\n                        f.Id == incomingFlowId.Value &&\n                        f.BusinessId == businessId &&\n                        f.IsActive);\n\n                if (flow == null)\n                {\n                    Log.Warning(\"❌ Flow {FlowId} not found/active for business {Biz}. Will persist FlowId but not align template.\",\n                        incomingFlowId, businessId);\n                }\n                else\n                {\n                    // compute entry step: step with NO incoming links\n                    var allIncoming = new HashSet<Guid>(flow.Steps\n                        .SelectMany(s => s.ButtonLinks)\n                        .Where(l => l.NextStepId.HasValue)\n                        .Select(l => l.NextStepId!.Value));\n\n                    entryStep = flow.Steps\n                        .OrderBy(s => s.StepOrder)\n                        .FirstOrDefault(s => !allIncoming.Contains(s.Id));\n\n                    if (entryStep == null)\n                    {\n                        Log.Warning(\"❌ Flow {FlowId} has no entry step. Persisting FlowId but not aligning template.\", flow.Id);\n                    }\n                    else if (!string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))\n                    {\n                        Log.Information(\"ℹ️ Aligning selected template '{Sel}' to flow entry '{Entry}'.\",\n                            selectedTemplateName, entryStep.TemplateToSend);\n                        selectedTemplateName = entryStep.TemplateToSend;\n                    }\n                }\n            }\n            else\n            {\n                Log.Information(\"ℹ️ No flow attached to image campaign '{Name}'. Proceeding as plain template campaign.\", dto.Name);\n            }\n\n            // 🧠 Fetch template (for body + buttons) using the aligned/selected template name\n            var template = await _templateFetcherService.GetTemplateByNameAsync(\n                businessId,\n                selectedTemplateName,\n                includeButtons: true\n            );\n\n            // 🧠 Resolve message body using template body (if available) else dto.MessageTemplate\n            var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;\n            var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);\n\n            // 🎯 Step 1: Create campaign (CTAFlowConfigId now always = savedFlowId)\n            var campaign = new Campaign\n            {\n                Id = campaignId,\n                BusinessId = businessId,\n                Name = dto.Name,\n\n                // store the (possibly aligned) template name\n                MessageTemplate = dto.MessageTemplate,      // keep original text for UI if you use it\n                TemplateId = selectedTemplateName,          // ensure start template matches flow entry when available\n\n                FollowUpTemplateId = dto.FollowUpTemplateId,\n                CampaignType = \"image\",\n                CtaId = dto.CtaId,\n                CTAFlowConfigId = savedFlowId,              // 👈 persist what UI sent (or null if no flow)\n\n                ScheduledAt = dto.ScheduledAt,\n                CreatedBy = createdBy,\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow,\n                Status = \"Draft\",\n\n                // image-specific fields\n                ImageUrl = dto.ImageUrl,\n                ImageCaption = dto.ImageCaption,\n\n                // params/body snapshot (useful for previews & auditing)\n                TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n                MessageBody = resolvedBody\n            };\n            // 🔒 Step 2.1: Snapshot template schema (image path)\n            try\n            {\n                var snapshotMeta = await _templateFetcherService.GetTemplateMetaAsync(\n                    businessId,\n                    selectedTemplateName,\n                    language: null,\n                    provider: null\n                );\n\n                campaign.TemplateSchemaSnapshot = snapshotMeta != null\n                    ? JsonConvert.SerializeObject(snapshotMeta)\n                    : JsonConvert.SerializeObject(new\n                    {\n                        Provider = \"\",\n                        TemplateName = selectedTemplateName,\n                        Language = template?.Language ?? \"\"\n                    });\n            }\n            catch (Exception ex)\n            {\n                Log.Warning(ex, \"⚠️ Template schema snapshot failed for (image) campaign {CampaignId}\", campaignId);\n            }\n\n            await _context.Campaigns.AddAsync(campaign);\n\n            // ✅ Step 2: Assign contacts (leave SentAt null until send)\n            if (dto.ContactIds != null && dto.ContactIds.Any())\n            {\n                var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaignId,\n                    ContactId = contactId,\n                    BusinessId = businessId,\n                    Status = \"Pending\",\n                    SentAt = null,\n                    UpdatedAt = DateTime.UtcNow\n                });\n\n                await _context.CampaignRecipients.AddRangeAsync(recipients);\n            }\n\n            // ✅ Step 3a: Save manual buttons from frontend\n            if (dto.MultiButtons != null && dto.MultiButtons.Any())\n            {\n                var buttons = dto.MultiButtons\n                    .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    .Take(3)\n                    .Select((btn, index) => new CampaignButton\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        Title = btn.ButtonText,\n                        Type = btn.ButtonType ?? \"url\",\n                        Value = btn.TargetUrl,\n                        Position = index + 1,\n                        IsFromTemplate = false\n                    });\n\n                await _context.CampaignButtons.AddRangeAsync(buttons);\n            }\n\n            // ======================== Dynamic buttons merge ========================\n            // EXACTLY mirrors your text-creator pattern to avoid type issues with ButtonMetadataDto\n            if (template != null && template.ButtonParams?.Count > 0)\n            {\n                var buttonsToSave = new List<CampaignButton>();\n                var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();\n\n                var total = Math.Min(3, template.ButtonParams.Count);\n                for (int i = 0; i < total; i++)\n                {\n                    var tplBtn = template.ButtonParams[i];                         // ButtonMetadataDto: Text, Type, SubType, Index, ParameterValue\n                    var isDynamic = (tplBtn.ParameterValue?.Contains(\"{{1}}\") ?? false);\n\n                    var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);\n                    var valueToSave = (isDynamic && userBtn != null)\n                        ? userBtn.Value?.Trim()                                    // user override for dynamic URL\n                        : tplBtn.ParameterValue;                                   // pattern or static value from meta\n\n                    buttonsToSave.Add(new CampaignButton\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        Title = tplBtn.Text,                                       // from ButtonMetadataDto\n                        Type = tplBtn.Type,                                        // from ButtonMetadataDto\n                        Value = valueToSave,\n                        Position = i + 1,\n                        IsFromTemplate = true\n                    });\n                }\n\n                await _context.CampaignButtons.AddRangeAsync(buttonsToSave);\n            }\n            // ======================================================================\n\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"✅ Image campaign '{Name}' created | FlowId: {Flow} | EntryTemplate: {Entry} | Recipients: {Contacts} | UserButtons: {ManualButtons} | TemplateButtons: {TemplateButtons} | Params: {Params}\",\n                dto.Name,\n                savedFlowId,\n                entryStep?.TemplateToSend ?? selectedTemplateName,\n                dto.ContactIds?.Count ?? 0,\n                dto.MultiButtons?.Count ?? 0,\n                template?.ButtonParams?.Count ?? 0,\n                dto.TemplateParameters?.Count ?? 0\n            );\n\n            return campaignId;\n        }\n        #endregion\n\n        //public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)\n        //{\n        //    // 1) Load campaign (no tracking)\n        //    var campaign = await _context.Campaigns\n        //        .Where(c => c.Id == campaignId)\n        //        .Select(c => new { c.Id, c.BusinessId, c.TemplateId, MessageTemplate = c.MessageTemplate })\n        //        .AsNoTracking()\n        //        .FirstOrDefaultAsync();\n\n        //    if (campaign == null)\n        //    {\n        //        Log.Warning(\"🚫 Campaign {CampaignId} not found\", campaignId);\n        //        return false;\n        //    }\n\n        //    // 1.1) Resolve active WA settings → Provider + sender (optional)\n        //    var wa = await _context.WhatsAppSettings\n        //        .AsNoTracking()\n        //        .Where(w => w.BusinessId == campaign.BusinessId && w.IsActive)\n        //        .FirstOrDefaultAsync();\n\n        //    var provider = wa?.Provider ?? \"META_CLOUD\";     // must be \"PINNACLE\" or \"META_CLOUD\"\n        //    var phoneNumberId = wa?.PhoneNumberId;           // optional\n\n        //    // 2) Load recipients with explicit LEFT JOINs to Contact and AudienceMember\n        //    var recipients = await (\n        //        from r in _context.CampaignRecipients.AsNoTracking()\n        //        where r.CampaignId == campaignId\n\n        //        // LEFT JOIN Contact\n        //        join c in _context.Contacts.AsNoTracking()\n        //            on r.ContactId equals c.Id into cg\n        //        from c in cg.DefaultIfEmpty()\n\n        //            // LEFT JOIN AudienceMember\n        //        join am in _context.AudiencesMembers.AsNoTracking()\n        //            on r.AudienceMemberId equals am.Id into amg\n        //        from am in amg.DefaultIfEmpty()\n\n        //        select new\n        //        {\n        //            r.Id,\n        //            r.ContactId,\n        //            Phone = c != null && c.PhoneNumber != null ? c.PhoneNumber : am!.PhoneE164,\n        //            Name = c != null && c.Name != null ? c.Name : am!.Name,\n        //            ParamsJson = r.ResolvedParametersJson\n        //        })\n        //        .Where(x => !string.IsNullOrWhiteSpace(x.Phone))\n        //        .ToListAsync();\n\n        //    if (recipients.Count == 0)\n        //    {\n        //        Log.Warning(\"🚫 Campaign {CampaignId} has no recipients\", campaignId);\n        //        return false;\n        //    }\n\n        //    // 3) Mark Sending\n        //    var campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaign.Id);\n        //    campaignRow.Status = \"Sending\";\n        //    campaignRow.UpdatedAt = DateTime.UtcNow;\n        //    await _context.SaveChangesAsync();\n\n        //    // 4) Parallel send\n        //    var throttleLimit = 5;\n        //    var total = recipients.Count;\n        //    var sent = 0;\n        //    var failed = 0;\n\n        //    await Parallel.ForEachAsync(\n        //        recipients,\n        //        new ParallelOptions { MaxDegreeOfParallelism = throttleLimit },\n        //        async (r, ct) =>\n        //        {\n        //            try\n        //            {\n        //                var phone = r.Phone!;\n        //                var name = string.IsNullOrWhiteSpace(r.Name) ? \"Customer\" : r.Name;\n\n        //                using var scope = _serviceProvider.CreateScope();\n        //                var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n        //                // If you froze parameters at materialization, you can parse r.ParamsJson here.\n        //                var dto = new SimpleTemplateMessageDto\n        //                {\n        //                    Provider = provider,                 // ✅ REQUIRED by your send method\n        //                    PhoneNumberId = phoneNumberId,       // optional\n        //                    RecipientNumber = phone,\n        //                    TemplateName = campaign.TemplateId ?? campaign.MessageTemplate,\n        //                    TemplateParameters = new List<string> { name },\n        //                    TemplateParameters = args,\n        //                };\n\n        //                var result = await _messageEngineService\n        //                    .SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n        //                var sendLog = new CampaignSendLog\n        //                {\n        //                    Id = Guid.NewGuid(),\n        //                    BusinessId = campaign.BusinessId,\n        //                    CampaignId = campaign.Id,\n        //                    ContactId = r.ContactId,            // Guid? OK to be null\n        //                    RecipientId = r.Id,\n        //                    TemplateId = campaign.TemplateId,\n        //                    MessageBody = campaign.MessageTemplate,\n        //                    MessageId = null,\n        //                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n        //                    ErrorMessage = result.Message,\n        //                    SentAt = DateTime.UtcNow,\n        //                    CreatedAt = DateTime.UtcNow,\n        //                    SourceChannel = \"whatsapp\",\n        //                    IpAddress = ipAddress,\n        //                    DeviceInfo = userAgent\n        //                };\n\n        //                await scopedDb.CampaignSendLogs.AddAsync(sendLog, ct);\n\n        //                var rec = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(x => x.Id == r.Id, ct);\n        //                if (rec != null)\n        //                {\n        //                    rec.Status = result.Success ? \"Sent\" : \"Failed\";\n        //                    rec.MessagePreview = campaign.MessageTemplate;\n        //                    rec.SentAt = DateTime.UtcNow;\n        //                    rec.UpdatedAt = DateTime.UtcNow;\n        //                }\n\n        //                await scopedDb.SaveChangesAsync(ct);\n\n        //                if (result.Success) Interlocked.Increment(ref sent);\n        //                else Interlocked.Increment(ref failed);\n        //            }\n        //            catch (Exception ex)\n        //            {\n        //                Interlocked.Increment(ref failed);\n        //                Log.Error(ex, \"❌ Send failed for recipient: {RecipientId}\", r.Id);\n        //            }\n        //        });\n\n        //    // 5) Finalize\n        //    campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaignId);\n        //    campaignRow.Status = \"Sent\";\n        //    campaignRow.UpdatedAt = DateTime.UtcNow;\n        //    await _context.SaveChangesAsync();\n\n        //    Log.Information(\"📤 Campaign {CampaignId} sent via template to {Count} recipients (✅ {Sent}, ❌ {Failed})\",\n        //        campaignId, total, sent, failed);\n\n        //    return sent > 0;\n        //}\n\n\n        //public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)\n        //    {\n        //        // 1) Load campaign (no tracking)\n        //        var campaign = await _context.Campaigns\n        //            .Where(c => c.Id == campaignId)\n        //            .Select(c => new { c.Id, c.BusinessId, c.TemplateId, MessageTemplate = c.MessageTemplate })\n        //            .AsNoTracking()\n        //            .FirstOrDefaultAsync();\n\n        //        if (campaign == null)\n        //        {\n        //            Log.Warning(\"🚫 Campaign {CampaignId} not found\", campaignId);\n        //            return false;\n        //        }\n\n        //        // 1.1) Resolve active WA settings → Provider + sender (optional)\n        //        var wa = await _context.WhatsAppSettings\n        //            .AsNoTracking()\n        //            .Where(w => w.BusinessId == campaign.BusinessId && w.IsActive)\n        //            .FirstOrDefaultAsync();\n\n        //        var provider = wa?.Provider ?? \"META_CLOUD\";   // must be \"PINNACLE\" or \"META_CLOUD\"\n        //        var phoneNumberId = wa?.PhoneNumberId;         // optional\n\n        //        // 2) Load recipients with explicit LEFT JOINs to Contact and AudienceMember\n        //        var recipients = await (\n        //            from r in _context.CampaignRecipients.AsNoTracking()\n        //            where r.CampaignId == campaignId\n\n        //            join c in _context.Contacts.AsNoTracking()\n        //                on r.ContactId equals c.Id into cg\n        //            from c in cg.DefaultIfEmpty()\n\n        //            join am in _context.AudiencesMembers.AsNoTracking()\n        //                on r.AudienceMemberId equals am.Id into amg\n        //            from am in amg.DefaultIfEmpty()\n\n        //            select new\n        //            {\n        //                r.Id,\n        //                r.ContactId,\n        //                Phone = c != null && c.PhoneNumber != null ? c.PhoneNumber : am!.PhoneE164,\n        //                Name = c != null && c.Name != null ? c.Name : am!.Name,\n        //                ParamsJson = r.ResolvedParametersJson\n        //            })\n        //            .Where(x => !string.IsNullOrWhiteSpace(x.Phone))\n        //            .ToListAsync();\n\n        //        if (recipients.Count == 0)\n        //        {\n        //            Log.Warning(\"🚫 Campaign {CampaignId} has no recipients\", campaignId);\n        //            return false;\n        //        }\n\n        //        // 3) Mark Sending\n        //        var campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaign.Id);\n        //        campaignRow.Status = \"Sending\";\n        //        campaignRow.UpdatedAt = DateTime.UtcNow;\n        //        await _context.SaveChangesAsync();\n\n        //        // 4) Parallel send\n        //        var throttleLimit = 5;\n        //        var total = recipients.Count;\n        //        var sent = 0;\n        //        var failed = 0;\n\n        //        await Parallel.ForEachAsync(\n        //            recipients,\n        //            new ParallelOptions { MaxDegreeOfParallelism = throttleLimit },\n        //            async (r, ct) =>\n        //            {\n        //                try\n        //                {\n        //                    var phone = r.Phone!;\n        //                    // NOTE: we intentionally do NOT inject profile name here.\n        //                    // Parameters come from frozen ResolvedParametersJson (if any).\n        //                    var parameters = ParseParams(r.ParamsJson);\n\n        //                    using var scope = _serviceProvider.CreateScope();\n        //                    var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n        //                    var dto = new SimpleTemplateMessageDto\n        //                    {\n        //                        Provider = provider,                 // ✅ REQUIRED by send method\n        //                        PhoneNumberId = phoneNumberId,       // optional sender override\n        //                        RecipientNumber = phone,\n        //                        TemplateName = campaign.TemplateId ?? campaign.MessageTemplate,\n        //                        TemplateParameters = parameters      // ✅ use frozen params (or empty list)\n        //                    };\n\n        //                    var result = await _messageEngineService\n        //                        .SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n        //                    var sendLog = new CampaignSendLog\n        //                    {\n        //                        Id = Guid.NewGuid(),\n        //                        BusinessId = campaign.BusinessId,\n        //                        CampaignId = campaign.Id,\n        //                        ContactId = r.ContactId,            // Guid? OK to be null\n        //                        RecipientId = r.Id,\n        //                        TemplateId = campaign.TemplateId,\n        //                        MessageBody = campaign.MessageTemplate,\n        //                        MessageId = result.MessageId,       // ✅ capture WAMID\n        //                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n        //                        ErrorMessage = result.Message,\n        //                        SentAt = DateTime.UtcNow,\n        //                        CreatedAt = DateTime.UtcNow,\n        //                        SourceChannel = \"whatsapp\",\n        //                        IpAddress = ipAddress,\n        //                        DeviceInfo = userAgent\n        //                        // (Optional) ButtonBundleJson = SnapshotTemplateButtons(...);\n        //                    };\n\n        //                    await scopedDb.CampaignSendLogs.AddAsync(sendLog, ct);\n\n        //                    var rec = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(x => x.Id == r.Id, ct);\n        //                    if (rec != null)\n        //                    {\n        //                        rec.Status = result.Success ? \"Sent\" : \"Failed\";\n        //                        rec.MessagePreview = campaign.MessageTemplate;\n        //                        rec.SentAt = DateTime.UtcNow;\n        //                        rec.UpdatedAt = DateTime.UtcNow;\n        //                    }\n\n        //                    await scopedDb.SaveChangesAsync(ct);\n\n        //                    if (result.Success) Interlocked.Increment(ref sent);\n        //                    else Interlocked.Increment(ref failed);\n        //                }\n        //                catch (Exception ex)\n        //                {\n        //                    Interlocked.Increment(ref failed);\n        //                    Log.Error(ex, \"❌ Send failed for recipient: {RecipientId}\", r.Id);\n        //                }\n        //            });\n\n        //        // 5) Finalize\n        //        campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaignId);\n        //        campaignRow.Status = \"Sent\";\n        //        campaignRow.UpdatedAt = DateTime.UtcNow;\n        //        await _context.SaveChangesAsync();\n\n        //        Log.Information(\"📤 Campaign {CampaignId} sent via template to {Count} recipients (✅ {Sent}, ❌ {Failed})\",\n        //            campaignId, total, sent, failed);\n\n        //        return sent > 0;\n\n        //        // ---- local helpers ----\n        //        static List<string> ParseParams(string? json)\n        //        {\n        //            if (string.IsNullOrWhiteSpace(json)) return new List<string>();\n        //            try\n        //            {\n        //                var arr = JsonSerializer.Deserialize<List<string>>(json);\n        //                return arr ?? new List<string>();\n        //            }\n        //            catch\n        //            {\n        //                return new List<string>();\n        //            }\n        //        }\n        //    }\n\n        public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            // 1) Load campaign (no tracking)\n            var campaign = await _context.Campaigns\n                .Where(c => c.Id == campaignId)\n                .Select(c => new { c.Id, c.BusinessId, c.TemplateId, MessageTemplate = c.MessageTemplate })\n                .AsNoTracking()\n                .FirstOrDefaultAsync();\n\n            if (campaign == null)\n            {\n                Log.Warning(\"🚫 Campaign {CampaignId} not found\", campaignId);\n                return false;\n            }\n\n            // 1.1) Resolve active WA settings → Provider + sender (optional)\n            var wa = await _context.WhatsAppSettings\n                .AsNoTracking()\n                .Where(w => w.BusinessId == campaign.BusinessId && w.IsActive)\n                .FirstOrDefaultAsync();\n\n            var provider = wa?.Provider ?? \"META_CLOUD\";   // must be \"PINNACLE\" or \"META_CLOUD\"\n            var phoneNumberId = wa?.PhoneNumberId;         // optional\n\n            // 2) Load recipients with explicit LEFT JOINs to Contact and AudienceMember\n            var recipients = await (\n                from r in _context.CampaignRecipients.AsNoTracking()\n                where r.CampaignId == campaignId\n\n                join c in _context.Contacts.AsNoTracking()\n                    on r.ContactId equals c.Id into cg\n                from c in cg.DefaultIfEmpty()\n\n                join am in _context.AudiencesMembers.AsNoTracking()\n                    on r.AudienceMemberId equals am.Id into amg\n                from am in amg.DefaultIfEmpty()\n\n                select new\n                {\n                    r.Id,\n                    r.ContactId,\n                    Phone = c != null && c.PhoneNumber != null ? c.PhoneNumber : am!.PhoneE164,\n                    Name = c != null && c.Name != null ? c.Name : am!.Name,\n                    ParamsJson = r.ResolvedParametersJson\n                })\n                .Where(x => !string.IsNullOrWhiteSpace(x.Phone))\n                .ToListAsync();\n\n            if (recipients.Count == 0)\n            {\n                Log.Warning(\"🚫 Campaign {CampaignId} has no recipients\", campaignId);\n                return false;\n            }\n\n            // 3) Mark Sending\n            var campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaign.Id);\n            campaignRow.Status = \"Sending\";\n            campaignRow.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            // 4) Parallel send\n            var throttleLimit = 5;\n            var total = recipients.Count;\n            var sent = 0;\n            var failed = 0;\n\n            await Parallel.ForEachAsync(\n                recipients,\n                new ParallelOptions { MaxDegreeOfParallelism = throttleLimit },\n                async (r, ct) =>\n                {\n                    try\n                    {\n                        var phone = r.Phone!;\n                        // NOTE: we intentionally do NOT inject profile name here.\n                        // Parameters come from frozen ResolvedParametersJson (if any).\n                        var parameters = ParseParams(r.ParamsJson);\n\n                        using var scope = _serviceProvider.CreateScope();\n                        var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                        var dto = new SimpleTemplateMessageDto\n                        {\n                            Provider = provider,                 // ✅ REQUIRED by send method\n                            PhoneNumberId = phoneNumberId,       // optional sender override\n                            RecipientNumber = phone,\n                            TemplateName = campaign.TemplateId ?? campaign.MessageTemplate,\n                            TemplateParameters = parameters      // ✅ use frozen params (or empty list)\n                        };\n\n                        var result = await _messageEngineService\n                            .SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n                        var sendLog = new CampaignSendLog\n                        {\n                            Id = Guid.NewGuid(),\n                            BusinessId = campaign.BusinessId,\n                            CampaignId = campaign.Id,\n                            ContactId = r.ContactId,            // Guid? OK to be null\n                            RecipientId = r.Id,\n                            TemplateId = campaign.TemplateId,\n                            MessageBody = campaign.MessageTemplate,\n                            MessageId = result.MessageId,       // ✅ capture WAMID\n                            SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                            ErrorMessage = result.Message,\n                            SentAt = DateTime.UtcNow,\n                            CreatedAt = DateTime.UtcNow,\n                            SourceChannel = \"whatsapp\",\n                            IpAddress = ipAddress,\n                            DeviceInfo = userAgent\n                            // (Optional) ButtonBundleJson = SnapshotTemplateButtons(...);\n                        };\n\n                        await scopedDb.CampaignSendLogs.AddAsync(sendLog, ct);\n\n                        var rec = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(x => x.Id == r.Id, ct);\n                        if (rec != null)\n                        {\n                            rec.Status = result.Success ? \"Sent\" : \"Failed\";\n                            rec.MessagePreview = campaign.MessageTemplate;\n                            rec.SentAt = DateTime.UtcNow;\n                            rec.UpdatedAt = DateTime.UtcNow;\n                        }\n\n                        await scopedDb.SaveChangesAsync(ct);\n\n                        if (result.Success) Interlocked.Increment(ref sent);\n                        else Interlocked.Increment(ref failed);\n                    }\n                    catch (Exception ex)\n                    {\n                        Interlocked.Increment(ref failed);\n                        Log.Error(ex, \"❌ Send failed for recipient: {RecipientId}\", r.Id);\n                    }\n                });\n\n            // 5) Finalize\n            campaignRow = await _context.Campaigns.FirstAsync(c => c.Id == campaignId);\n            campaignRow.Status = \"Sent\";\n            campaignRow.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"📤 Campaign {CampaignId} sent via template to {Count} recipients (✅ {Sent}, ❌ {Failed})\",\n                campaignId, total, sent, failed);\n\n            return sent > 0;\n\n            // ---- local helpers ----\n            static List<string> ParseParams(string? json)\n            {\n                if (string.IsNullOrWhiteSpace(json)) return new List<string>();\n                try\n                {\n                    var arr = System.Text.Json.JsonSerializer.Deserialize<List<string>>(json);\n                    return arr ?? new List<string>();\n                }\n                catch\n                {\n                    return new List<string>();\n                }\n            }\n        }\n\n\n\n        public async Task<bool> SendCampaignInParallelAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null || campaign.Recipients.Count == 0)\n            {\n                Log.Warning(\"🚫 Campaign not found or has no recipients\");\n                return false;\n            }\n\n            campaign.Status = \"Sending\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            int maxParallelism = 5;\n\n#if NET6_0_OR_GREATER\n            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions\n            {\n                MaxDegreeOfParallelism = maxParallelism\n            },\n            async (recipient, cancellationToken) =>\n            {\n                await SendToRecipientAsync(campaign, recipient, ipAddress, userAgent);\n            });\n#else\n    var tasks = campaign.Recipients.Select(recipient =>\n        SendToRecipientAsync(campaign, recipient, ipAddress, userAgent)\n    );\n    await Task.WhenAll(tasks);\n#endif\n\n            campaign.Status = \"Sent\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"📤 Campaign {CampaignId} sent in parallel to {Count} recipients\", campaign.Id, campaign.Recipients.Count);\n            return true;\n        }\n        private async Task SendToRecipientAsync(Campaign campaign, CampaignRecipient recipient, string ip, string ua)\n        {\n            try\n            {\n                var dto = new SimpleTemplateMessageDto\n                {\n                    RecipientNumber = recipient.Contact.PhoneNumber,\n                    TemplateName = campaign.MessageTemplate,\n                    TemplateParameters = new List<string> { recipient.Contact.Name ?? \"Customer\" }\n                };\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n\n                var log = new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = recipient.ContactId,\n                    RecipientId = recipient.Id,\n                    TemplateId = campaign.TemplateId,\n                    MessageBody = campaign.MessageTemplate,\n                    MessageId = null,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = result.Message,\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow,\n                    SourceChannel = \"whatsapp\",\n                    IpAddress = ip,\n                    DeviceInfo = ua\n                };\n\n                lock (_context)\n                {\n                    _context.CampaignSendLogs.Add(log);\n                    recipient.Status = result.Success ? \"Sent\" : \"Failed\";\n                    recipient.MessagePreview = campaign.MessageTemplate;\n                    recipient.SentAt = DateTime.UtcNow;\n                    recipient.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to send template to recipient: {RecipientId}\", recipient.Id);\n            }\n        }\n\n        public async Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId)\n        {\n            var entry = await _context.CampaignRecipients\n                .FirstOrDefaultAsync(r =>\n                    r.CampaignId == campaignId &&\n                    r.ContactId == contactId &&\n                    r.Campaign.BusinessId == businessId); // ✅ Filter by related Campaign.BusinessId\n\n            if (entry == null)\n                return false;\n\n            _context.CampaignRecipients.Remove(entry);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null)\n                return false;\n\n            var newRecipients = contactIds.Select(id => new CampaignRecipient\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = campaignId,\n                ContactId = id,\n                BusinessId = businessId,\n                Status = \"Pending\",\n                SentAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow\n            });\n\n            _context.CampaignRecipients.AddRange(newRecipients);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // This is the Entry point to send Temaplte (Text Based and Image Based)\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId)\n        {\n            try\n            {\n                var campaign = await _context.Campaigns\n                    .Include(c => c.Recipients)\n                        .ThenInclude(r => r.Contact) // 🧠 include contact details\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"❌ Campaign not found.\");\n\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                    return ResponseResult.ErrorInfo(\"❌ No recipients assigned to this campaign.\");\n\n                var templateName = campaign.MessageTemplate;\n                var templateId = campaign.TemplateId;\n                var language = \"en_US\"; // Optional: make dynamic later\n                var isImageTemplate = !string.IsNullOrEmpty(campaign.ImageUrl);\n\n                var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? \"[]\");\n\n                int success = 0, failed = 0;\n\n                foreach (var recipient in campaign.Recipients)\n                {\n                    var messageDto = new ImageTemplateMessageDto\n                    {\n                        // BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        TemplateName = templateName,\n                        LanguageCode = language,\n                        HeaderImageUrl = isImageTemplate ? campaign.ImageUrl : null,\n                        TemplateParameters = templateParams,\n                        ButtonParameters = campaign.MultiButtons\n                            .OrderBy(b => b.Position)\n                            .Take(3)\n                            .Select(btn => new CampaignButtonDto\n                            {\n                                ButtonText = btn.Title,\n                                ButtonType = btn.Type,\n                                TargetUrl = btn.Value\n                            }).ToList()\n                    };\n\n                    // ✅ Call the image/template sender\n                    var sendResult = await _messageEngineService.SendImageTemplateMessageAsync(messageDto, campaign.BusinessId);\n                    var isSuccess = sendResult.ToString().ToLower().Contains(\"messages\");\n\n                    var log = new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageContent = templateName,\n                        MediaUrl = campaign.ImageUrl,\n                        Status = isSuccess ? \"Sent\" : \"Failed\",\n                        ErrorMessage = isSuccess ? null : \"API Failure\",\n                        RawResponse = JsonConvert.SerializeObject(sendResult),\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow\n                    };\n\n                    await _context.MessageLogs.AddAsync(log);\n\n                    if (isSuccess) success++;\n                    else failed++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"✅ Sent: {success}, ❌ Failed: {failed}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"❌ Unexpected error during campaign send.\", ex.ToString());\n            }\n        }\n\n        #region  This region include all the code related to sending text and image based\n\n        public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)\n        {\n            string? GetPhone(CampaignRecipient r)\n                => r?.Contact?.PhoneNumber\n                ?? r?.AudienceMember?.PhoneE164\n                ?? r?.AudienceMember?.PhoneRaw;\n\n            var campaign = await _context.Campaigns\n                .AsNoTracking()\n                .AsSplitQuery()\n                .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n                .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)\n                .Include(c => c.MultiButtons)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n            if (campaign == null)\n                return ResponseResult.ErrorInfo(\"❌ Campaign not found.\");\n\n            var recipients = campaign.Recipients ?? new List<CampaignRecipient>();\n            var total = recipients.Count;\n            var recipientsWithPhone = recipients.Where(r => !string.IsNullOrWhiteSpace(GetPhone(r))).ToList();\n            if (recipientsWithPhone.Count == 0)\n            {\n                _logger.LogWarning(\"[SendDetect] No valid recipients with phone. total={Total}\", total);\n                return ResponseResult.ErrorInfo(\n                    \"⚠️ No valid recipients with phone numbers (checked Contact.PhoneNumber and AudienceMember.PhoneE164/PhoneRaw).\");\n            }\n\n            // normalize incoming type\n            var type = (campaign.CampaignType ?? string.Empty).Trim().ToLowerInvariant();\n\n            // === Infer type from template meta when empty/auto ===\n            if (string.IsNullOrEmpty(type) || type == \"auto\")\n            {\n                var tplName =\n                    !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :\n                    !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :\n                    string.Empty;\n\n                if (string.IsNullOrWhiteSpace(tplName))\n                    return ResponseResult.ErrorInfo(\"❌ Campaign has no template name (TemplateId/MessageTemplate is empty).\");\n\n                // IMPORTANT: do NOT over-filter by provider here; your templates table stores \"meta_cloud\"/\"pinnacle\"\n                // while Campaign.Provider is UPPER (\"META_CLOUD\"). Passing provider can cause a miss.\n                var meta = await _templateFetcherService.GetTemplateMetaAsync(\n                    campaign.BusinessId, tplName, language: null, provider: null); // 👈 provider=null on purpose\n\n                var headerType = (meta?.HeaderType ?? string.Empty).ToUpperInvariant();\n                type = headerType switch\n                {\n                    \"IMAGE\" => \"image\",\n                    \"VIDEO\" => \"video\",\n                    \"DOCUMENT\" => \"document\",\n                    \"PDF\" => \"document\",\n                    _ => \"text\"\n                };\n\n                _logger.LogInformation(\"[SendDetect] Inferred type. campaignId={CampaignId} template={Template} header={Header} -> type={Type}\",\n                    campaign.Id, tplName, headerType, type);\n            }\n\n            // === Validate required media URL for media types ===\n            if (type == \"image\" && string.IsNullOrWhiteSpace(campaign.ImageUrl))\n                return ResponseResult.ErrorInfo(\"🚫 Image template requires ImageUrl on the campaign.\");\n            if (type == \"video\" && string.IsNullOrWhiteSpace(campaign.VideoUrl))\n                return ResponseResult.ErrorInfo(\"🚫 Video template requires VideoUrl on the campaign.\");\n            if (type == \"document\" && string.IsNullOrWhiteSpace(campaign.DocumentUrl))\n                return ResponseResult.ErrorInfo(\"🚫 Document template requires DocumentUrl on the campaign.\");\n\n            // === Dispatch ===\n            return type switch\n            {\n                \"image\" => await SendImageTemplateCampaignAsync(campaign),\n                \"video\" => await SendVideoTemplateCampaignAsync(campaign),\n                \"document\" => await SendDocumentTemplateCampaignAsync(campaign),\n                \"text\" => await SendTextTemplateCampaignAsync(campaign),\n                _ => ResponseResult.ErrorInfo($\"❌ Unsupported campaign type '{campaign.CampaignType}'.\")\n            };\n        }\n\n\n        //public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)\n        //{\n        //    string? GetPhone(CampaignRecipient r)\n        //        => r?.Contact?.PhoneNumber\n        //        ?? r?.AudienceMember?.PhoneE164\n        //        ?? r?.AudienceMember?.PhoneRaw;\n\n        //    var campaign = await _context.Campaigns\n        //        .AsNoTracking()\n        //        .AsSplitQuery()\n        //        .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n        //        .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)\n        //        .Include(c => c.MultiButtons)\n        //        .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n        //    if (campaign == null)\n        //        return ResponseResult.ErrorInfo(\"❌ Campaign not found.\");\n\n        //    var recipients = campaign.Recipients ?? new List<CampaignRecipient>();\n        //    var total = recipients.Count;\n        //    var recipientsWithPhone = recipients\n        //        .Where(r => !string.IsNullOrWhiteSpace(GetPhone(r)))\n        //        .ToList();\n\n        //    if (recipientsWithPhone.Count == 0)\n        //    {\n        //        _logger.LogWarning(\"[SendDetect] No valid recipients with phone. total={Total}\", total);\n        //        return ResponseResult.ErrorInfo(\n        //            \"⚠️ No valid recipients with phone numbers (checked Contact.PhoneNumber and AudienceMember.PhoneE164/PhoneRaw).\");\n        //    }\n\n        //    var type = (campaign.CampaignType ?? string.Empty).Trim().ToLowerInvariant();\n\n        //    if (string.IsNullOrEmpty(type) || type == \"auto\")\n        //    {\n        //        var tplName =\n        //            !string.IsNullOrWhiteSpace(campaign.TemplateId) ? campaign.TemplateId! :\n        //            !string.IsNullOrWhiteSpace(campaign.MessageTemplate) ? campaign.MessageTemplate! :\n        //            string.Empty;\n\n        //        if (string.IsNullOrWhiteSpace(tplName))\n        //            return ResponseResult.ErrorInfo(\"❌ Campaign has no template name (TemplateId/MessageTemplate is empty).\");\n\n        //        var provider = (campaign.Provider ?? \"META\").ToUpperInvariant();\n\n        //        var meta = await _templateFetcherService.GetTemplateMetaAsync(\n        //            campaign.BusinessId, tplName, language: null, provider: provider);\n\n        //        var headerType = (meta?.HeaderType ?? string.Empty).ToUpperInvariant();\n\n        //        type = headerType switch\n        //        {\n        //            \"IMAGE\" => \"image\",\n        //            \"VIDEO\" => \"video\",\n        //            \"DOCUMENT\" => \"document\",\n        //            \"PDF\" => \"document\",\n        //            _ => \"text\"\n        //        };\n\n        //        _logger.LogInformation(\"[SendDetect] Inferred type. campaignId={CampaignId} template={Template} header={Header} -> type={Type}\",\n        //            campaign.Id, tplName, headerType, type);\n        //    }\n\n        //    return type switch\n        //    {\n        //        \"image\" => await SendImageTemplateCampaignAsync(campaign),\n        //        \"video\" => await SendVideoTemplateCampaignAsync(campaign),\n        //        \"document\" => await SendDocumentTemplateCampaignAsync(campaign),\n        //        \"text\" => await SendTextTemplateCampaignAsync(campaign),\n        //        _ => ResponseResult.ErrorInfo($\"❌ Unsupported campaign type '{campaign.CampaignType}'.\")\n        //    };\n        //}\n\n        // Uses the per-recipient frozen params if present; otherwise falls back to campaign-level params.\n        // Ensures the list length == placeholderCount (pads/truncates).\n        private static List<string> GetRecipientBodyParams(\n            CampaignRecipient recipient,\n            int placeholderCount,\n            string? campaignTemplateParameters)\n        {\n            // Try recipient-specific params first\n            try\n            {\n                if (!string.IsNullOrWhiteSpace(recipient.ResolvedParametersJson))\n                {\n                    var fromRecipient = JsonConvert.DeserializeObject<List<string>>(recipient.ResolvedParametersJson)\n                                        ?? new List<string>();\n                    while (fromRecipient.Count < placeholderCount) fromRecipient.Add(\"\");\n                    if (fromRecipient.Count > placeholderCount) fromRecipient = fromRecipient.Take(placeholderCount).ToList();\n                    return fromRecipient;\n                }\n            }\n            catch { /* ignore and fall back */ }\n\n            // Fallback: campaign-level params (old behavior), padded\n            var fromCampaign = TemplateParameterHelper.ParseTemplateParams(campaignTemplateParameters).ToList();\n            while (fromCampaign.Count < placeholderCount) fromCampaign.Add(\"\");\n            if (fromCampaign.Count > placeholderCount) fromCampaign = fromCampaign.Take(placeholderCount).ToList();\n            return fromCampaign;\n        }\n        public async Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                    return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n                if (campaign.Recipients == null || campaign.Recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ No recipients to send.\");\n\n                var businessId = campaign.BusinessId;\n\n                // 0) Build a concrete list of recipients that actually have a phone\n                static string? ResolveRecipientPhone(CampaignRecipient r) =>\n                    r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;\n\n                var recipients = campaign.Recipients\n                    .Where(r => !string.IsNullOrWhiteSpace(ResolveRecipientPhone(r)))\n                    .ToList();\n\n                if (!recipients.Any())\n                    return ResponseResult.ErrorInfo(\"⚠️ No valid recipients with phone numbers (Contact/AudienceMember).\");\n\n                // 1) Flow/template selection\n                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                    ? entryTemplate!\n                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n                if (string.IsNullOrWhiteSpace(templateName))\n                    return ResponseResult.ErrorInfo(\"❌ No template selected.\");\n\n                // 2) Provider template meta\n                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n                if (templateMeta == null)\n                    return ResponseResult.ErrorInfo(\"❌ Template metadata not found.\");\n\n                var languageCode = (templateMeta.Language ?? \"\").Trim();\n                if (string.IsNullOrWhiteSpace(languageCode))\n                    return ResponseResult.ErrorInfo(\"❌ Template language not resolved from provider meta.\");\n\n                // 3) Buttons only (body params are built per-recipient below)\n                var buttons = campaign.MultiButtons?.OrderBy(b => b.Position).ToList()\n                              ?? new List<CampaignButton>();\n\n                // 4) Resolve provider (normalize + default)\n                string provider;\n                if (!string.IsNullOrWhiteSpace(campaign.Provider))\n                {\n                    if (campaign.Provider != \"PINNACLE\" && campaign.Provider != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo(\"❌ Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.\");\n                    provider = campaign.Provider;\n                }\n                else\n                {\n                    var settings = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive)\n                        .OrderByDescending(s => s.PhoneNumberId != null)\n                        .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .ToListAsync();\n\n                    if (settings.Count == 0)\n                        return ResponseResult.ErrorInfo(\"❌ WhatsApp settings not found.\");\n                    if (settings.Count > 1 && settings[0].PhoneNumberId == null)\n                        return ResponseResult.ErrorInfo(\"❌ Multiple providers are active but no default sender is set.\");\n\n                    provider = settings[0].Provider;\n                    if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo($\"❌ Unsupported provider configured: {provider}\");\n                }\n\n                // Sender override; if missing, try to pull from active settings for this provider\n                string? phoneNumberIdOverride = campaign.PhoneNumberId;\n                if (string.IsNullOrWhiteSpace(phoneNumberIdOverride))\n                {\n                    phoneNumberIdOverride = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive && s.Provider == provider && s.PhoneNumberId != null)\n                        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .Select(s => s.PhoneNumberId)\n                        .FirstOrDefaultAsync();\n                }\n\n                // 5) Optional flow entry step id\n                Guid? entryStepId = null;\n                if (campaign.CTAFlowConfigId.HasValue)\n                {\n                    entryStepId = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)\n                        .OrderBy(s => s.StepOrder)\n                        .Select(s => (Guid?)s.Id)\n                        .FirstOrDefaultAsync();\n                }\n\n                // 6) Freeze button bundle for click-tracking\n                string? buttonBundleJson = null;\n                if (templateMeta.ButtonParams is { Count: > 0 })\n                {\n                    var bundle = templateMeta.ButtonParams.Take(3)\n                        .Select((b, i) => new { i, position = i + 1, text = (b.Text ?? \"\").Trim(), type = b.Type, subType = b.SubType })\n                        .ToList();\n                    buttonBundleJson = JsonConvert.SerializeObject(bundle);\n                }\n\n                // 7) Preload AudienceMember phone/name for recipients that don’t have a Contact\n                var neededMemberIds = recipients\n                    .Where(x => x.ContactId == null && x.AudienceMemberId != null)\n                    .Select(x => x.AudienceMemberId!.Value)\n                    .Distinct()\n                    .ToList();\n\n                var audienceLookup = neededMemberIds.Count == 0\n                    ? new Dictionary<Guid, (string Phone, string? Name)>()\n                    : await _context.AudiencesMembers.AsNoTracking()\n                        .Where(m => m.BusinessId == businessId && neededMemberIds.Contains(m.Id))\n                        .Select(m => new { m.Id, m.PhoneE164, m.PhoneRaw, m.Name })\n                        .ToDictionaryAsync(\n                            x => x.Id,\n                            x => (Phone: string.IsNullOrWhiteSpace(x.PhoneE164) ? (x.PhoneRaw ?? \"\") : x.PhoneE164,\n                                  Name: x.Name)\n                        );\n\n                int successCount = 0, failureCount = 0;\n                var now = DateTime.UtcNow;\n\n                foreach (var r in recipients)\n                {\n                    // Resolve actual phone + fallback name\n                    var phone = ResolveRecipientPhone(r);\n                    string? name = r.Contact?.Name;\n\n                    if (string.IsNullOrWhiteSpace(phone) && r.AudienceMemberId != null &&\n                        audienceLookup.TryGetValue(r.AudienceMemberId.Value, out var a) &&\n                        !string.IsNullOrWhiteSpace(a.Phone))\n                    {\n                        phone = a.Phone;\n                        name ??= a.Name ?? \"Customer\";\n                    }\n\n                    if (string.IsNullOrWhiteSpace(phone))\n                    {\n                        failureCount++;\n                        continue; // nothing to send to\n                    }\n\n                    var contactForTemplating = r.Contact ?? new Contact\n                    {\n                        Id = Guid.Empty,\n                        BusinessId = businessId,\n                        PhoneNumber = phone,\n                        Name = name ?? \"Customer\"\n                    };\n\n                    var runId = Guid.NewGuid();\n                    var campaignSendLogId = Guid.NewGuid();\n\n                    // ✅ Build BODY params per recipient (never clobber with campaign-level when CSV/recipient values exist)\n                    var resolvedParams = GetRecipientBodyParams(r, templateMeta.PlaceholderCount, campaign.TemplateParameters);\n\n                    // If template expects body placeholders, prevent a Meta 131008 by refusing to send when any required value is blank\n                    if (templateMeta.PlaceholderCount > 0 && resolvedParams.Any(string.IsNullOrWhiteSpace))\n                    {\n                        failureCount++;\n                        var why = $\"Missing body parameter(s): expected {templateMeta.PlaceholderCount}, got \" +\n                                  $\"{resolvedParams.Count(x => !string.IsNullOrWhiteSpace(x))} filled.\";\n                        if (_context.Entry(r).State == EntityState.Detached) _context.Attach(r);\n                        r.MaterializedAt = now;\n                        r.UpdatedAt = now;\n                        r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams);\n\n                        // Log locally as a failed send without calling provider\n                        var logIdLocal = Guid.NewGuid();\n                        _context.MessageLogs.Add(new MessageLog\n                        {\n                            Id = logIdLocal,\n                            BusinessId = businessId,\n                            CampaignId = campaign.Id,\n                            ContactId = r.ContactId, // may be null\n                            RecipientNumber = phone,\n                            MessageContent = templateName,\n                            Status = \"Failed\",\n                            ErrorMessage = why,\n                            RawResponse = \"{\\\"local_error\\\":\\\"missing_template_body_params\\\"}\",\n                            CreatedAt = now,\n                            Source = \"campaign\",\n                            CTAFlowConfigId = campaign.CTAFlowConfigId,\n                            CTAFlowStepId = entryStepId,\n                            ButtonBundleJson = buttonBundleJson,\n                            RunId = runId\n                        });\n\n                        await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                        {\n                            Id = campaignSendLogId,\n                            CampaignId = campaign.Id,\n                            BusinessId = businessId,\n                            ContactId = r.ContactId,  // may be null\n                            RecipientId = r.Id,\n                            MessageBody = campaign.MessageBody ?? templateName,\n                            TemplateId = templateName,\n                            SendStatus = \"Failed\",\n                            MessageLogId = logIdLocal,\n                            ErrorMessage = why,\n                            CreatedAt = now,\n                            CreatedBy = campaign.CreatedBy,\n                            CTAFlowConfigId = campaign.CTAFlowConfigId,\n                            CTAFlowStepId = entryStepId,\n                            ButtonBundleJson = buttonBundleJson,\n                            RunId = runId\n                        });\n\n                        continue; // skip provider call\n                    }\n\n                    // ✅ Build components using the per-recipient params\n                    List<string> resolvedButtonUrls;\n                    object components = provider == \"PINNACLE\"\n                        ? BuildTextTemplateComponents_Pinnacle(resolvedParams, buttons, templateMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls)\n                        : BuildTextTemplateComponents_Meta(resolvedParams, buttons, templateMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls);\n\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = phone,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = languageCode },\n                            components\n                        }\n                    };\n\n                    // Freeze recipient materialization BEFORE send (ensure entity is tracked)\n                    if (_context.Entry(r).State == EntityState.Detached)\n                        _context.Attach(r);\n\n                    r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams); // ✅ save what we actually sent\n                    r.ResolvedButtonUrlsJson = JsonConvert.SerializeObject(resolvedButtonUrls);\n                    r.MaterializedAt = now;\n                    r.UpdatedAt = now;\n                    // deterministic idempotency fingerprint\n                    r.IdempotencyKey = Idempotency.Sha256($\"{campaign.Id}|{phone}|{templateName}|{r.ResolvedParametersJson}|{r.ResolvedButtonUrlsJson}\");\n\n                    var result = await _messageEngineService.SendPayloadAsync(businessId, provider, payload, phoneNumberIdOverride);\n\n                    var logId = Guid.NewGuid();\n                    _context.MessageLogs.Add(new MessageLog\n                    {\n                        Id = logId,\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = r.ContactId, // may be null\n                        RecipientNumber = phone,\n                        MessageContent = templateName,\n                        Status = result.Success ? \"Sent\" : \"Failed\",\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        RawResponse = result.RawResponse,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        Source = \"campaign\",\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId\n                    });\n\n                    await _billingIngest.IngestFromSendResponseAsync(\n                        businessId: businessId,\n                        messageLogId: logId,\n                        provider: provider,\n                        rawResponseJson: result.RawResponse ?? \"{}\"\n                    );\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = campaignSendLogId,\n                        CampaignId = campaign.Id,\n                        BusinessId = businessId,\n                        ContactId = r.ContactId,  // may be null\n                        RecipientId = r.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = logId,\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        CreatedBy = campaign.CreatedBy,\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId\n                    });\n\n                    if (result.Success) successCount++; else failureCount++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"📤 Sent to {successCount} recipients. ❌ Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error while sending text template campaign\");\n                return ResponseResult.ErrorInfo(\"🚨 Unexpected error while sending campaign.\", ex.ToString());\n            }\n        }\n\n\n        private static bool IsHttpsMp4Url(string? url, out string? normalizedError)\n        {\n            normalizedError = null;\n            if (string.IsNullOrWhiteSpace(url))\n            {\n                normalizedError = \"Missing VideoUrl.\";\n                return false;\n            }\n\n            if (!Uri.TryCreate(url.Trim(), UriKind.Absolute, out var uri))\n            {\n                normalizedError = \"VideoUrl is not a valid absolute URL.\";\n                return false;\n            }\n\n            if (!uri.Scheme.Equals(\"https\", StringComparison.OrdinalIgnoreCase))\n            {\n                normalizedError = \"VideoUrl must use HTTPS.\";\n                return false;\n            }\n\n            var ext = Path.GetExtension(uri.AbsolutePath);\n            if (!ext.Equals(\".mp4\", StringComparison.OrdinalIgnoreCase))\n            {\n                normalizedError = \"VideoUrl must point to an .mp4 file.\";\n                return false;\n            }\n\n            return true;\n        }\n\n\n\n        public async Task<ResponseResult> SendVideoTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                    return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n                if (campaign.Recipients == null || campaign.Recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ No recipients to send.\");\n\n                var businessId = campaign.BusinessId;\n\n                static string? PhoneOf(CampaignRecipient r) =>\n                    r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;\n\n                var recipients = campaign.Recipients.Where(r => !string.IsNullOrWhiteSpace(PhoneOf(r))).ToList();\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"⚠️ No valid recipients with phone numbers.\");\n\n                // Flow/template selection\n                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                    ? entryTemplate!\n                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n                if (string.IsNullOrWhiteSpace(templateName))\n                    return ResponseResult.ErrorInfo(\"❌ No template selected.\");\n\n                // Validate header media URL (direct https mp4)\n                var videoUrl = (campaign.VideoUrl ?? campaign.ImageUrl ?? \"\").Trim();\n                if (!IsHttpsMp4Url(videoUrl, out var vErr))\n                    return ResponseResult.ErrorInfo(\"🚫 Invalid VideoUrl\", vErr);\n\n                // Template meta\n                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n                if (templateMeta == null)\n                    return ResponseResult.ErrorInfo(\"❌ Template metadata not found.\");\n                var languageCode = (templateMeta.Language ?? \"\").Trim();\n                if (string.IsNullOrWhiteSpace(languageCode))\n                    return ResponseResult.ErrorInfo(\"❌ Template language not resolved from provider meta.\");\n\n                // Resolve provider\n                string provider;\n                if (!string.IsNullOrWhiteSpace(campaign.Provider))\n                {\n                    if (campaign.Provider != \"PINNACLE\" && campaign.Provider != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo(\"❌ Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.\");\n                    provider = campaign.Provider;\n                }\n                else\n                {\n                    var settings = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive)\n                        .OrderByDescending(s => s.PhoneNumberId != null)\n                        .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .ToListAsync();\n\n                    if (settings.Count == 0)\n                        return ResponseResult.ErrorInfo(\"❌ WhatsApp settings not found.\");\n                    if (settings.Count > 1 && settings[0].PhoneNumberId == null)\n                        return ResponseResult.ErrorInfo(\"❌ Multiple providers are active but no default sender is set.\");\n\n                    provider = settings[0].Provider;\n                    if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo($\"❌ Unsupported provider configured: {provider}\");\n                }\n\n                // Sender override\n                string? phoneNumberIdOverride = campaign.PhoneNumberId;\n                if (string.IsNullOrWhiteSpace(phoneNumberIdOverride))\n                {\n                    phoneNumberIdOverride = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive && s.Provider == provider && s.PhoneNumberId != null)\n                        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .Select(s => s.PhoneNumberId)\n                        .FirstOrDefaultAsync();\n                }\n\n                // Optional flow entry step id\n                Guid? entryStepId = null;\n                if (campaign.CTAFlowConfigId.HasValue)\n                {\n                    entryStepId = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)\n                        .OrderBy(s => s.StepOrder)\n                        .Select(s => (Guid?)s.Id)\n                        .FirstOrDefaultAsync();\n                }\n\n                // Freeze button bundle for UI click tracking\n                string? buttonBundleJson = null;\n                if (templateMeta.ButtonParams is { Count: > 0 })\n                {\n                    var bundle = templateMeta.ButtonParams.Take(3)\n                        .Select((b, i) => new { i, position = i + 1, text = (b.Text ?? \"\").Trim(), type = b.Type, subType = b.SubType })\n                        .ToList();\n                    buttonBundleJson = JsonConvert.SerializeObject(bundle);\n                }\n\n                // Audience lookup for missing contacts\n                var neededMemberIds = recipients\n                    .Where(x => x.ContactId == null && x.AudienceMemberId != null)\n                    .Select(x => x.AudienceMemberId!.Value)\n                    .Distinct()\n                    .ToList();\n\n                var audienceLookup = neededMemberIds.Count == 0\n                    ? new Dictionary<Guid, (string Phone, string? Name)>()\n                    : await _context.AudiencesMembers.AsNoTracking()\n                        .Where(m => m.BusinessId == businessId && neededMemberIds.Contains(m.Id))\n                        .Select(m => new { m.Id, m.PhoneE164, m.PhoneRaw, m.Name })\n                        .ToDictionaryAsync(\n                            x => x.Id,\n                            x => (Phone: string.IsNullOrWhiteSpace(x.PhoneE164) ? (x.PhoneRaw ?? \"\") : x.PhoneE164, Name: x.Name)\n                        );\n\n                int successCount = 0, failureCount = 0;\n                var now = DateTime.UtcNow;\n\n                foreach (var r in recipients)\n                {\n                    var phone = PhoneOf(r);\n                    string? name = r.Contact?.Name;\n\n                    if (string.IsNullOrWhiteSpace(phone) && r.AudienceMemberId != null &&\n                        audienceLookup.TryGetValue(r.AudienceMemberId.Value, out var a) &&\n                        !string.IsNullOrWhiteSpace(a.Phone))\n                    {\n                        phone = a.Phone;\n                        name ??= a.Name ?? \"Customer\";\n                    }\n                    if (string.IsNullOrWhiteSpace(phone))\n                    {\n                        failureCount++;\n                        continue;\n                    }\n\n                    var contactForTemplating = r.Contact ?? new Contact\n                    {\n                        Id = Guid.Empty,\n                        BusinessId = businessId,\n                        PhoneNumber = phone,\n                        Name = name ?? \"Customer\"\n                    };\n\n                    var runId = Guid.NewGuid();\n                    var campaignSendLogId = Guid.NewGuid();\n\n                    // ✅ Provider-specific component builder (uses recipient-resolved shapes)\n                    bool built;\n                    List<object> components;\n                    string? buildErr;\n\n                    if (provider == \"META_CLOUD\")\n                        built = TryBuildVideoTemplateComponents_Meta(videoUrl, templateMeta, r, out components, out buildErr);\n                    else\n                        built = TryBuildVideoTemplateComponents_Pinnacle(videoUrl, templateMeta, r, out components, out buildErr);\n\n                    if (!built)\n                    {\n                        failureCount++;\n                        _logger.LogWarning(\"[VideoTpl] Component build failed campaign={CampaignId} phone={Phone}: {Err}\",\n                            campaign.Id, phone, buildErr);\n                        _context.CampaignSendLogs.Add(new CampaignSendLog\n                        {\n                            Id = campaignSendLogId,\n                            CampaignId = campaign.Id,\n                            BusinessId = businessId,\n                            ContactId = r.ContactId,\n                            RecipientId = r.Id,\n                            MessageBody = campaign.MessageBody ?? templateName,\n                            TemplateId = templateName,\n                            SendStatus = \"Failed\",\n                            ErrorMessage = $\"component-build: {buildErr}\",\n                            CreatedAt = now,\n                            CreatedBy = campaign.CreatedBy,\n                            CTAFlowConfigId = campaign.CTAFlowConfigId,\n                            CTAFlowStepId = entryStepId,\n                            ButtonBundleJson = buttonBundleJson,\n                            RunId = runId,\n                            SourceChannel = \"video_template\"\n                        });\n                        continue;\n                    }\n\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = phone,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = languageCode },\n                            components\n                        }\n                    };\n\n                    // Snapshot (keep truthful; materializer should already have set these)\n                    if (_context.Entry(r).State == EntityState.Detached)\n                        _context.Attach(r);\n                    r.MaterializedAt = r.MaterializedAt ?? now;\n                    r.UpdatedAt = now;\n                    r.IdempotencyKey = Idempotency.Sha256(\n                        $\"{campaign.Id}|{phone}|{templateName}|{videoUrl}|{r.ResolvedParametersJson}|{r.ResolvedButtonUrlsJson}\");\n\n                    var result = await _messageEngineService.SendPayloadAsync(businessId, provider, payload, phoneNumberIdOverride);\n\n                    var logId = Guid.NewGuid();\n                    _context.MessageLogs.Add(new MessageLog\n                    {\n                        Id = logId,\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = r.ContactId,\n                        RecipientNumber = phone,\n                        MessageContent = templateName,\n                        MediaUrl = videoUrl,\n                        Status = result.Success ? \"Sent\" : \"Failed\",\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        RawResponse = result.RawResponse,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        Source = \"campaign\",\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId,\n                        Provider = provider,\n                        ProviderMessageId = result.MessageId\n                    });\n\n                    await _billingIngest.IngestFromSendResponseAsync(\n                        businessId: businessId,\n                        messageLogId: logId,\n                        provider: provider,\n                        rawResponseJson: result.RawResponse ?? \"{}\"\n                    );\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = campaignSendLogId,\n                        CampaignId = campaign.Id,\n                        BusinessId = businessId,\n                        ContactId = r.ContactId,\n                        RecipientId = r.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = logId,\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        CreatedBy = campaign.CreatedBy,\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId,\n                        SourceChannel = \"video_template\"\n                    });\n\n                    if (result.Success) successCount++; else failureCount++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"🎬 Video template sent to {successCount} recipients. ❌ Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error while sending video template campaign\");\n                return ResponseResult.ErrorInfo(\"🚨 Unexpected error while sending video campaign.\", ex.ToString());\n            }\n        }\n\n        private List<object> BuildVideoTemplateComponents(\n            string provider,\n            string headerVideoUrl,\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact,\n            out List<string> resolvedButtonUrls)\n        {\n            // Reuse your current builders to get BODY + BUTTONS\n            List<object> nonHeaderComponents;\n            if (string.Equals(provider, \"PINNACLE\", StringComparison.Ordinal))\n                nonHeaderComponents = BuildTextTemplateComponents_Pinnacle(\n                    templateParams, buttonList, templateMeta, campaignSendLogId, contact, out resolvedButtonUrls);\n            else // META_CLOUD\n                nonHeaderComponents = BuildTextTemplateComponents_Meta(\n                    templateParams, buttonList, templateMeta, campaignSendLogId, contact, out resolvedButtonUrls);\n\n            // Prepend the HEADER/VIDEO piece (WhatsApp shape for both providers)\n            var components = new List<object>\n    {\n        new\n        {\n            type = \"header\",\n            parameters = new object[] {\n                new { type = \"video\", video = new { link = headerVideoUrl } }\n            }\n        }\n    };\n\n            components.AddRange(nonHeaderComponents);\n            return components;\n        }\n        private bool TryBuildVideoTemplateComponents_Meta(\n    string videoUrl,\n    TemplateMetadataDto templateMeta,\n    CampaignRecipient r,\n    out List<object> components,\n    out string? error)\n        {\n            components = new List<object>();\n            error = null;\n\n            if (string.IsNullOrWhiteSpace(videoUrl))\n            {\n                error = \"required header VIDEO url is missing\";\n                return false;\n            }\n\n            // HEADER (video)\n            components.Add(new Dictionary<string, object>\n            {\n                [\"type\"] = \"header\",\n                [\"parameters\"] = new object[]\n                {\n            new Dictionary<string, object>\n            {\n                [\"type\"] = \"video\",\n                [\"video\"] = new Dictionary<string, object>\n                {\n                    [\"link\"] = videoUrl\n                }\n            }\n                }\n            });\n\n            // BODY {{1..N}}\n            var count = Math.Max(0, templateMeta.PlaceholderCount);\n            var bodyParams = DeserializeBodyParams(r.ResolvedParametersJson, count);\n            if (count > 0)\n            {\n                // If template expects text params, enforce presence\n                var missing = MissingIndices(bodyParams, count);\n                if (missing.Count > 0)\n                {\n                    error = $\"missing body params at {{ {string.Join(\",\", missing)} }}\";\n                    return false;\n                }\n\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = bodyParams.Select(p => new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"text\",\n                        [\"text\"] = p ?? string.Empty\n                    }).ToList()\n                });\n            }\n\n            // URL BUTTON parameters (only when template declares dynamic pieces)\n            if (templateMeta.ButtonParams != null && templateMeta.ButtonParams.Count > 0)\n            {\n                var urlDict = DeserializeButtonDict(r.ResolvedButtonUrlsJson);\n                var total = Math.Min(3, templateMeta.ButtonParams.Count);\n\n                for (int i = 0; i < total; i++)\n                {\n                    var bp = templateMeta.ButtonParams[i];\n                    var subType = (bp.SubType ?? \"url\").ToLowerInvariant();\n                    var paramMask = bp.ParameterValue?.Trim();\n\n                    // Only dynamic URL buttons need a \"text\" parameter\n                    if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                        continue;\n\n                    var isDynamic = !string.IsNullOrWhiteSpace(paramMask) && paramMask.Contains(\"{{\");\n                    if (!isDynamic) continue;\n\n                    // materializer persisted: button{1..3}.url_param\n                    var key = $\"button{i + 1}.url_param\";\n                    if (!urlDict.TryGetValue(key, out var dyn) || string.IsNullOrWhiteSpace(dyn))\n                    {\n                        error = $\"missing dynamic URL param for {key}\";\n                        return false;\n                    }\n\n                    components.Add(new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = \"url\",\n                        [\"index\"] = i.ToString(), // \"0\",\"1\",\"2\"\n                        [\"parameters\"] = new object[]\n                        {\n                    new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = dyn }\n                        }\n                    });\n                }\n            }\n\n            return true;\n        }\n\n        private bool TryBuildVideoTemplateComponents_Pinnacle(\n    string videoUrl,\n    TemplateMetadataDto templateMeta,\n    CampaignRecipient r,\n    out List<object> components,\n    out string? error)\n        {\n            // If Pinnacle uses same structure as Meta for templates, we can reuse Meta logic.\n            // If they require a different header/media envelope, adapt here.\n            return TryBuildVideoTemplateComponents_Meta(videoUrl, templateMeta, r, out components, out error);\n        }\n        private static Dictionary<string, string> DeserializeButtonDict(string? json)\n        {\n            try\n            {\n                return string.IsNullOrWhiteSpace(json)\n                    ? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)\n                    : JsonConvert.DeserializeObject<Dictionary<string, string>>(json!)\n                      ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n            catch\n            {\n                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n        }\n        private static List<int> MissingIndices(List<string> bodyParams, int count)\n        {\n            var miss = new List<int>();\n            for (int i = 0; i < count; i++)\n            {\n                if (string.IsNullOrWhiteSpace(i < bodyParams.Count ? bodyParams[i] : null))\n                    miss.Add(i + 1); // 1-based for readability\n            }\n            return miss;\n        }\n        // ---------- helpers ----------\n        private static List<string> DeserializeBodyParams(string? json, int expectedCount)\n        {\n            try\n            {\n                var arr = string.IsNullOrWhiteSpace(json)\n                    ? Array.Empty<string>()\n                    : JsonConvert.DeserializeObject<string[]>(json!) ?? Array.Empty<string>();\n\n                // pad/trim to template placeholder count\n                var list = new List<string>(Enumerable.Repeat(string.Empty, Math.Max(expectedCount, 0)));\n                for (int i = 0; i < Math.Min(expectedCount, arr.Length); i++)\n                    list[i] = arr[i] ?? string.Empty;\n                return list;\n            }\n            catch\n            {\n                return new List<string>(Enumerable.Repeat(string.Empty, Math.Max(expectedCount, 0)));\n            }\n        }\n        private static readonly Regex PlaceholderRe = new(@\"\\{\\{\\s*(\\d+)\\s*\\}\\}\", RegexOptions.Compiled);\n\n        private string BuildTokenParam(Guid campaignSendLogId, int buttonIndex, string? buttonTitle, string destinationUrlAbsolute)\n        {\n            var full = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, buttonIndex, buttonTitle, destinationUrlAbsolute);\n            var pos = full.LastIndexOf(\"/r/\", StringComparison.OrdinalIgnoreCase);\n            return (pos >= 0) ? full[(pos + 3)..] : full; // fallback: if not found, return full (rare)\n        }\n\n        private static string NormalizeAbsoluteUrlOrThrowForButton(string input, string buttonTitle, int buttonIndex)\n        {\n            if (string.IsNullOrWhiteSpace(input))\n                throw new ArgumentException($\"Destination is required for button '{buttonTitle}' (index {buttonIndex}).\");\n\n            // Trim + strip control chars\n            var cleaned = new string(input.Trim().Where(c => !char.IsControl(c)).ToArray());\n            if (cleaned.Length == 0)\n                throw new ArgumentException($\"Destination is required for button '{buttonTitle}' (index {buttonIndex}).\");\n\n            // Allow tel: and WhatsApp deep links\n            if (cleaned.StartsWith(\"tel:\", StringComparison.OrdinalIgnoreCase) ||\n                cleaned.StartsWith(\"wa:\", StringComparison.OrdinalIgnoreCase) ||\n                cleaned.StartsWith(\"https://wa.me/\", StringComparison.OrdinalIgnoreCase))\n            {\n                return cleaned; // Accept as-is\n            }\n\n            // Normal web links\n            if (Uri.TryCreate(cleaned, UriKind.Absolute, out var uri) &&\n                (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                 uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase)))\n            {\n                return uri.ToString();\n            }\n\n            // Reject everything else\n            throw new ArgumentException(\n                $\"Destination must be an absolute http/https/tel/wa URL for button '{buttonTitle}' (index {buttonIndex}). Got: '{input}'\");\n        }\n\n        private static bool LooksLikeAbsoluteBaseUrlWithPlaceholder(string? templateUrl)\n        {\n            if (string.IsNullOrWhiteSpace(templateUrl)) return false;\n            var s = templateUrl.Trim();\n            if (!s.Contains(\"{{\")) return false;\n\n            // Probe by replacing common placeholders with a char\n            var probe = PlaceholderRe.Replace(s, \"x\");\n            return Uri.TryCreate(probe, UriKind.Absolute, out var abs) &&\n                   (abs.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    abs.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase));\n        }\n\n        private static object[] BuildBodyParameters(List<string>? templateParams, int requiredCount)\n        {\n            if (requiredCount <= 0) return Array.Empty<object>();\n\n            var src = templateParams ?? new List<string>();\n            if (src.Count > requiredCount) src = src.Take(requiredCount).ToList();\n            while (src.Count < requiredCount) src.Add(string.Empty);\n\n            return src.Select(p => (object)new { type = \"text\", text = p ?? string.Empty }).ToArray();\n        }\n\n        private static string NormalizePhoneForTel(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return \"\";\n            var p = raw.Trim();\n            var digits = new string(p.Where(char.IsDigit).ToArray());\n            // keep leading + if present initially; always output +<digits>\n            return \"+\" + digits;\n        }\n\n        private static string ReplaceAllPlaceholdersWith(string template, string replacement)\n        {\n            if (string.IsNullOrWhiteSpace(template)) return string.Empty;\n            return PlaceholderRe.Replace(template, _ => replacement ?? string.Empty);\n        }\n\n        // ======================================================\n        // META — TEXT TEMPLATE COMPONENTS\n        // ======================================================\n\n        // Back-compat wrapper (old signature)\n        private List<object> BuildTextTemplateComponents_Meta(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact)\n        {\n            return BuildTextTemplateComponents_Meta(\n                templateParams, buttonList, templateMeta, campaignSendLogId, contact, out _);\n        }\n\n        // New overload with resolvedButtonUrls\n        private List<object> BuildTextTemplateComponents_Meta(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact,\n            out List<string> resolvedButtonUrls)\n        {\n            var components = new List<object>();\n            resolvedButtonUrls = new List<string>();\n\n            // BODY: send exactly PlaceholderCount\n            if (templateMeta.PlaceholderCount > 0)\n            {\n                var bodyParams = BuildBodyParameters(templateParams, templateMeta.PlaceholderCount);\n                components.Add(new { type = \"body\", parameters = bodyParams });\n            }\n\n            // No buttons or template has no button params\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            // Ensure index alignment with the template by ordering by Position (then original index)\n            var orderedButtons = buttonList\n                .Select((b, idx) => new { Btn = b, idx })\n                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                .ThenBy(x => x.idx)\n                .Select(x => x.Btn)\n                .ToList();\n\n            var total = Math.Min(3, Math.Min(orderedButtons.Count, templateMeta.ButtonParams.Count));\n\n            // Phone normalization (for optional {{1}} substitution on campaign button value)\n            var phone = NormalizePhoneForTel(contact?.PhoneNumber);\n            var encodedPhone = Uri.EscapeDataString(phone);\n\n            for (int i = 0; i < total; i++)\n            {\n                var meta = templateMeta.ButtonParams[i];\n                var subType = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim();\n\n                // Meta needs parameters ONLY for dynamic URL buttons\n                if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                if (!isDynamic)\n                    continue;\n\n                var btn = orderedButtons[i];\n                var btnType = (btn?.Type ?? \"URL\").ToUpperInvariant();\n                if (!string.Equals(btnType, \"URL\", StringComparison.OrdinalIgnoreCase))\n                {\n                    // If template expects dynamic URL at this index and your campaign button isn't URL, skip to avoid provider error\n                    continue;\n                }\n\n                var valueRaw = btn.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template requires a dynamic URL at button index {i}, but campaign button value is empty.\");\n                }\n\n                // Optional phone substitution in destination (support any {{n}})\n                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>\n                {\n                    if (!int.TryParse(m.Groups[1].Value, out var n)) return \"\";\n                    if (n == 1) return encodedPhone; // convention: {{1}} can be phone\n                    var idx = n - 1;\n                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? \"\") : \"\";\n                });\n\n                resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn.Title ?? \"\", i);\n\n                // Build both; choose which to send based on template base style\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = \"url\",\n                    [\"index\"] = i.ToString(), // \"0\"/\"1\"/\"2\"\n                    [\"parameters\"] = new[] {\n                new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend }\n            }\n                });\n\n                // Provider-resolved URL (what the client actually clicks):\n                // replace all placeholders in provider template with the parameter we sent.\n                var providerResolved = ReplaceAllPlaceholdersWith(metaParam ?? \"\", valueToSend);\n                resolvedButtonUrls.Add(providerResolved);\n            }\n\n            return components;\n        }\n\n        // ======================================================\n        // PINNACLE — TEXT TEMPLATE COMPONENTS\n        // ======================================================\n\n        // Back-compat wrapper (old signature)\n        private List<object> BuildTextTemplateComponents_Pinnacle(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact)\n        {\n            return BuildTextTemplateComponents_Pinnacle(\n                templateParams, buttonList, templateMeta, campaignSendLogId, contact, out _);\n        }\n\n        // New overload with resolvedButtonUrls\n        private List<object> BuildTextTemplateComponents_Pinnacle(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact,\n            out List<string> resolvedButtonUrls)\n        {\n            var components = new List<object>();\n            resolvedButtonUrls = new List<string>();\n\n            // BODY: Pinnacle is strict → always send exactly PlaceholderCount\n            if (templateMeta.PlaceholderCount > 0)\n            {\n                var bodyParams = BuildBodyParameters(templateParams, templateMeta.PlaceholderCount);\n                components.Add(new { type = \"body\", parameters = bodyParams });\n            }\n\n            // No buttons to map → return body-only\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            // Ensure index alignment with the template by ordering by Position (then original index)\n            var orderedButtons = buttonList\n                .Select((b, idx) => new { Btn = b, idx })\n                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                .ThenBy(x => x.idx)\n                .Select(x => x.Btn)\n                .ToList();\n\n            var total = Math.Min(3, Math.Min(orderedButtons.Count, templateMeta.ButtonParams.Count));\n\n            // Phone normalization (for optional {{1}} substitution on campaign button value)\n            var phone = NormalizePhoneForTel(contact?.PhoneNumber);\n            var encodedPhone = Uri.EscapeDataString(phone);\n\n            for (int i = 0; i < total; i++)\n            {\n                var meta = templateMeta.ButtonParams[i];\n                var subType = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim();\n\n                // This path supports dynamic URL params only\n                if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                if (!isDynamic)\n                    continue;\n\n                var btn = orderedButtons[i];\n                var btnType = (btn?.Type ?? \"URL\").ToUpperInvariant();\n                if (!string.Equals(btnType, \"URL\", StringComparison.OrdinalIgnoreCase))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template expects a dynamic URL at button index {i}, but campaign button type is '{btn?.Type}'.\");\n                }\n\n                var valueRaw = btn?.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template requires a dynamic URL at button index {i}, but campaign button value is empty.\");\n                }\n\n                // Optional phone + param substitution (support any {{n}})\n                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>\n                {\n                    if (!int.TryParse(m.Groups[1].Value, out var n)) return \"\";\n                    if (n == 1) return encodedPhone;\n                    var idx = n - 1;\n                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? \"\") : \"\";\n                });\n\n                // Validate + normalize absolute URL\n                resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn!.Title ?? \"\", i);\n\n                // Build both options: full tracked URL vs token param (for absolute-base placeholders)\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                // Pinnacle payload shape (kept aligned with Meta)\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = \"url\",\n                    [\"index\"] = i.ToString(),\n                    [\"parameters\"] = new[] {\n                new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend }\n            }\n                });\n\n                // Provider-resolved URL (what the user will open)\n                var providerResolved = ReplaceAllPlaceholdersWith(metaParam ?? \"\", valueToSend);\n                resolvedButtonUrls.Add(providerResolved);\n            }\n\n            return components;\n        }\n\n\n        #region SendImagetemplate\n\n        //public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)\n        //{\n        //    try\n        //    {\n        //        if (campaign == null || campaign.IsDeleted)\n        //            return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n        //        if (campaign.Recipients == null || !campaign.Recipients.Any())\n        //            return ResponseResult.ErrorInfo(\"❌ No recipients to send.\");\n\n        //        var businessId = campaign.BusinessId;\n\n        //        // 🔧 Resolve provider for billing (prefer campaign.Provider, else active setting)\n        //        string? provider = !string.IsNullOrWhiteSpace(campaign.Provider)\n        //            ? campaign.Provider\n        //            : await _context.WhatsAppSettings\n        //                .AsNoTracking()\n        //                .Where(s => s.BusinessId == businessId && s.IsActive)\n        //                .OrderByDescending(s => s.PhoneNumberId != null)          // prefer default sender\n        //                .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n        //                .Select(s => s.Provider)\n        //                .FirstOrDefaultAsync();\n\n        //        if (string.IsNullOrWhiteSpace(provider)) provider = \"META_CLOUD\";\n\n\n        //        // 🔑 Flow entry → template name\n        //        var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n        //        var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n        //            ? entryTemplate!\n        //            : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n\n        //        var language = \"en_US\";\n        //        var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? \"[]\");\n\n        //        int success = 0, failed = 0;\n\n        //        foreach (var r in campaign.Recipients)\n        //        {\n        //            var dto = new ImageTemplateMessageDto\n        //            {\n        //                RecipientNumber = r.Contact.PhoneNumber,\n        //                TemplateName = templateName,\n        //                LanguageCode = language,\n        //                HeaderImageUrl = campaign.ImageUrl,\n        //                TemplateParameters = templateParams,\n        //                ButtonParameters = campaign.MultiButtons\n        //                    .OrderBy(b => b.Position)\n        //                    .Take(3)\n        //                    .Select(b => new CampaignButtonDto\n        //                    {\n        //                        ButtonText = b.Title,\n        //                        ButtonType = b.Type,\n        //                        TargetUrl = b.Value\n        //                    }).ToList()\n        //            };\n\n        //            var res = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n        //            var ok = res.ToString().ToLower().Contains(\"messages\");\n\n        //            // keep ids + raw json for billing\n        //            var payloadJson = JsonConvert.SerializeObject(res);\n        //            var messageLogId = Guid.NewGuid();\n\n        //            _context.MessageLogs.Add(new MessageLog\n        //            {\n        //                Id = messageLogId,\n        //                BusinessId = businessId,\n        //                CampaignId = campaign.Id,\n        //                ContactId = r.ContactId,\n        //                RecipientNumber = r.Contact.PhoneNumber,\n        //                MessageContent = templateName,\n        //                MediaUrl = campaign.ImageUrl,\n        //                Status = ok ? \"Sent\" : \"Failed\",\n        //                ErrorMessage = ok ? null : \"API Failure\",\n        //                RawResponse = payloadJson,\n        //                CreatedAt = DateTime.UtcNow,\n        //                SentAt = DateTime.UtcNow,\n        //                Source = \"campaign\"\n        //            });\n\n        //            // 🔎 Billing capture (send response)\n        //            await _billingIngest.IngestFromSendResponseAsync(\n        //                businessId: businessId,\n        //                messageLogId: messageLogId,\n        //                provider: provider!,\n        //                rawResponseJson: payloadJson\n        //            );\n\n\n        //            //var res = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n        //            //var ok = res.ToString().ToLower().Contains(\"messages\");\n\n        //            //_context.MessageLogs.Add(new MessageLog\n        //            //{\n        //            //    Id = Guid.NewGuid(),\n        //            //    BusinessId = businessId,\n        //            //    CampaignId = campaign.Id,\n        //            //    ContactId = r.ContactId,\n        //            //    RecipientNumber = r.Contact.PhoneNumber,\n        //            //    MessageContent = templateName,\n        //            //    MediaUrl = campaign.ImageUrl,\n        //            //    Status = ok ? \"Sent\" : \"Failed\",\n        //            //    ErrorMessage = ok ? null : \"API Failure\",\n        //            //    RawResponse = JsonConvert.SerializeObject(res),\n        //            //    CreatedAt = DateTime.UtcNow,\n        //            //    SentAt = DateTime.UtcNow,\n        //            //    Source = \"campaign\"\n        //            //});\n\n        //            if (ok) success++; else failed++;\n        //        }\n\n        //        await _context.SaveChangesAsync();\n        //        return ResponseResult.SuccessInfo($\"✅ Sent: {success}, ❌ Failed: {failed}\");\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        return ResponseResult.ErrorInfo(\"❌ Unexpected error during campaign send.\", ex.ToString());\n        //    }\n        //}\n\n        public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                    return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n                if (campaign.Recipients == null || campaign.Recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ No recipients to send.\");\n\n                var businessId = campaign.BusinessId;\n\n                // --- helper identical to text flow ---\n                static string? ResolveRecipientPhone(CampaignRecipient r) =>\n                    r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;\n\n                // Keep only recipients that actually have a phone\n                var recipients = campaign.Recipients\n                    .Where(r => !string.IsNullOrWhiteSpace(ResolveRecipientPhone(r)))\n                    .ToList();\n\n                if (!recipients.Any())\n                    return ResponseResult.ErrorInfo(\"⚠️ No valid recipients with phone numbers (Contact/AudienceMember).\");\n\n                // --- Flow/template selection (same as text flow) ---\n                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                    ? entryTemplate!\n                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n                if (string.IsNullOrWhiteSpace(templateName))\n                    return ResponseResult.ErrorInfo(\"❌ No template selected.\");\n\n                // --- Provider template meta (language, placeholder count, buttons) ---\n                var tmplMeta = await _templateFetcherService.GetTemplateByNameAsync(\n                    businessId, templateName, includeButtons: true);\n                if (tmplMeta == null)\n                    return ResponseResult.ErrorInfo(\"❌ Template metadata not found.\");\n\n                var languageCode = (tmplMeta.Language ?? \"\").Trim();\n                if (string.IsNullOrWhiteSpace(languageCode))\n                    return ResponseResult.ErrorInfo(\"❌ Template language not resolved from provider meta.\");\n\n                // --- Provider normalize (strict) ---\n                string provider;\n                if (!string.IsNullOrWhiteSpace(campaign.Provider))\n                {\n                    var p = campaign.Provider.Trim().ToUpperInvariant();\n                    if (p != \"PINNACLE\" && p != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo(\"❌ Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.\");\n                    provider = p;\n                }\n                else\n                {\n                    var settings = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive)\n                        .OrderByDescending(s => s.PhoneNumberId != null)               // prefer default sender\n                        .ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .ToListAsync();\n\n                    if (settings.Count == 0)\n                        return ResponseResult.ErrorInfo(\"❌ WhatsApp settings not found.\");\n                    if (settings.Count > 1 && settings[0].PhoneNumberId == null)\n                        return ResponseResult.ErrorInfo(\"❌ Multiple providers are active but no default sender is set.\");\n\n                    var p = settings[0].Provider?.Trim().ToUpperInvariant();\n                    if (p != \"PINNACLE\" && p != \"META_CLOUD\")\n                        return ResponseResult.ErrorInfo($\"❌ Unsupported provider configured: {settings[0].Provider}\");\n                    provider = p!;\n                }\n\n                // --- Sender override (PNI): campaign override → else latest active for this provider ---\n                string? phoneNumberIdOverride = campaign.PhoneNumberId;\n                if (string.IsNullOrWhiteSpace(phoneNumberIdOverride))\n                {\n                    phoneNumberIdOverride = await _context.WhatsAppSettings.AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive && s.Provider == provider && s.PhoneNumberId != null)\n                        .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .Select(s => s.PhoneNumberId)\n                        .FirstOrDefaultAsync();\n                }\n\n                // --- Flow entry step id (for logs) ---\n                Guid? entryStepId = null;\n                if (campaign.CTAFlowConfigId.HasValue)\n                {\n                    entryStepId = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)\n                        .OrderBy(s => s.StepOrder)\n                        .Select(s => (Guid?)s.Id)\n                        .FirstOrDefaultAsync();\n                }\n\n                // --- Freeze button bundle (provider meta) for analytics ---\n                string? buttonBundleJson = null;\n                if (tmplMeta.ButtonParams is { Count: > 0 })\n                {\n                    var bundle = tmplMeta.ButtonParams.Take(3)\n                        .Select((b, i) => new { i, position = i + 1, text = (b.Text ?? \"\").Trim(), type = b.Type, subType = b.SubType })\n                        .ToList();\n                    buttonBundleJson = JsonConvert.SerializeObject(bundle);\n                }\n\n                // --- Prefetch AudienceMembers for recipients without Contact ---\n                var neededMemberIds = recipients\n                    .Where(x => x.ContactId == null && x.AudienceMemberId != null)\n                    .Select(x => x.AudienceMemberId!.Value)\n                    .Distinct()\n                    .ToList();\n\n                var audienceLookup = neededMemberIds.Count == 0\n                    ? new Dictionary<Guid, (string Phone, string? Name)>()\n                    : await _context.AudiencesMembers.AsNoTracking()\n                        .Where(m => m.BusinessId == businessId && neededMemberIds.Contains(m.Id))\n                        .Select(m => new { m.Id, m.PhoneE164, m.PhoneRaw, m.Name })\n                        .ToDictionaryAsync(\n                            x => x.Id,\n                            x => (Phone: string.IsNullOrWhiteSpace(x.PhoneE164) ? (x.PhoneRaw ?? \"\") : x.PhoneE164,\n                                  Name: x.Name)\n                        );\n\n                // --- Ordered campaign buttons (align with template) ---\n                var buttons = campaign.MultiButtons?\n                    .Select((b, idx) => new { Btn = b, idx })\n                    .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                    .ThenBy(x => x.idx)\n                    .Select(x => x.Btn)\n                    .ToList() ?? new List<CampaignButton>();\n\n                int successCount = 0, failureCount = 0;\n                var now = DateTime.UtcNow;\n\n                foreach (var r in recipients)\n                {\n                    // Resolve phone + friendly name with Audience fallback\n                    var phone = ResolveRecipientPhone(r);\n                    string? name = r.Contact?.Name;\n\n                    if (string.IsNullOrWhiteSpace(phone) && r.AudienceMemberId != null &&\n                        audienceLookup.TryGetValue(r.AudienceMemberId.Value, out var a) &&\n                        !string.IsNullOrWhiteSpace(a.Phone))\n                    {\n                        phone = a.Phone;\n                        name ??= a.Name ?? \"Customer\";\n                    }\n\n                    if (string.IsNullOrWhiteSpace(phone))\n                    {\n                        failureCount++;\n                        continue; // no destination\n                    }\n\n                    // Synthetic contact to avoid any null derefs downstream\n                    var contactForTemplating = r.Contact ?? new Contact\n                    {\n                        Id = Guid.Empty,\n                        BusinessId = businessId,\n                        PhoneNumber = phone,\n                        Name = name ?? \"Customer\"\n                    };\n\n                    // Per-recipient params (keep CSV/recipient overrides)\n                    var resolvedParams = GetRecipientBodyParams(r, tmplMeta.PlaceholderCount, campaign.TemplateParameters);\n\n                    // Hard guard: if template expects placeholders, refuse to send if any blank (prevents Meta 131008)\n                    if (tmplMeta.PlaceholderCount > 0 && resolvedParams.Any(string.IsNullOrWhiteSpace))\n                    {\n                        failureCount++;\n\n                        var why = $\"Missing body parameter(s): expected {tmplMeta.PlaceholderCount}, got \" +\n                                  $\"{resolvedParams.Count(x => !string.IsNullOrWhiteSpace(x))} filled.\";\n\n                        if (_context.Entry(r).State == EntityState.Detached) _context.Attach(r);\n                        r.MaterializedAt = now;\n                        r.UpdatedAt = now;\n                        r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams);\n\n                        var logIdLocal = Guid.NewGuid();\n                        _context.MessageLogs.Add(new MessageLog\n                        {\n                            Id = logIdLocal,\n                            BusinessId = businessId,\n                            CampaignId = campaign.Id,\n                            ContactId = r.ContactId,\n                            RecipientNumber = phone,\n                            MessageContent = templateName,\n                            MediaUrl = campaign.ImageUrl,\n                            Status = \"Failed\",\n                            ErrorMessage = why,\n                            RawResponse = \"{\\\"local_error\\\":\\\"missing_template_body_params\\\"}\",\n                            CreatedAt = now,\n                            Source = \"campaign\",\n                            CTAFlowConfigId = campaign.CTAFlowConfigId,\n                            CTAFlowStepId = entryStepId,\n                            ButtonBundleJson = buttonBundleJson\n                        });\n\n                        await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaign.Id,\n                            BusinessId = businessId,\n                            ContactId = r.ContactId,\n                            RecipientId = r.Id,\n                            MessageBody = campaign.MessageBody ?? templateName,\n                            TemplateId = templateName,\n                            SendStatus = \"Failed\",\n                            MessageLogId = logIdLocal,\n                            ErrorMessage = why,\n                            CreatedAt = now,\n                            CTAFlowConfigId = campaign.CTAFlowConfigId,\n                            CTAFlowStepId = entryStepId,\n                            ButtonBundleJson = buttonBundleJson\n                        });\n\n                        continue;\n                    }\n\n                    // Build provider-style button components to freeze provider-resolved URLs\n                    var runId = Guid.NewGuid();\n                    var campaignSendLogId = Guid.NewGuid();\n                    List<string> resolvedButtonUrls;\n\n                    _ = (provider == \"PINNACLE\")\n                        ? BuildImageTemplateComponents_Pinnacle(\n                            campaign.ImageUrl, resolvedParams, buttons, tmplMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls)\n                        : BuildImageTemplateComponents_Meta(\n                            campaign.ImageUrl, resolvedParams, buttons, tmplMeta, campaignSendLogId, contactForTemplating, out resolvedButtonUrls);\n\n                    // Freeze recipient materialization BEFORE send\n                    if (_context.Entry(r).State == EntityState.Detached) _context.Attach(r);\n                    r.ResolvedParametersJson = JsonConvert.SerializeObject(resolvedParams);\n                    r.ResolvedButtonUrlsJson = JsonConvert.SerializeObject(resolvedButtonUrls);\n                    r.MaterializedAt = now;\n                    r.UpdatedAt = now;\n                    r.IdempotencyKey = Idempotency.Sha256(\n                        $\"{campaign.Id}|{phone}|{templateName}|{r.ResolvedParametersJson}|{r.ResolvedButtonUrlsJson}|{campaign.ImageUrl}|{campaign.ImageCaption}\");\n\n                    // Build DTO for engine (engine composes components from dto fields)\n                    var dto = new ImageTemplateMessageDto\n                    {\n                        BusinessId = businessId,\n                        Provider = provider,                 // <<< REQUIRED\n                        PhoneNumberId = phoneNumberIdOverride,    // may be null → provider default sender\n                        RecipientNumber = phone,\n                        TemplateName = templateName,\n                        LanguageCode = languageCode,\n                        HeaderImageUrl = campaign.ImageUrl,\n                        TemplateBody = campaign.MessageBody,     // for RenderedBody\n                        TemplateParameters = resolvedParams,\n                        ButtonParameters = buttons.Take(3).Select(b => new CampaignButtonDto\n                        {\n                            ButtonText = b.Title,\n                            ButtonType = b.Type,\n                            TargetUrl = b.Value\n                        }).ToList(),\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId\n                    };\n\n                    // Send via message engine\n                    var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n                    // Persist logs\n                    var logId = Guid.NewGuid();\n                    _context.MessageLogs.Add(new MessageLog\n                    {\n                        Id = logId,\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = r.ContactId,\n                        RecipientNumber = phone,\n                        MessageContent = templateName,\n                        MediaUrl = campaign.ImageUrl,\n                        Status = result.Success ? \"Sent\" : \"Failed\",\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        RawResponse = result.RawResponse,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        Source = \"campaign\",\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId\n                    });\n\n                    await _billingIngest.IngestFromSendResponseAsync(\n                        businessId: businessId,\n                        messageLogId: logId,\n                        provider: provider,\n                        rawResponseJson: result.RawResponse ?? \"{}\"\n                    );\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = campaignSendLogId,\n                        CampaignId = campaign.Id,\n                        BusinessId = businessId,\n                        ContactId = r.ContactId,\n                        RecipientId = r.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = logId,\n                        MessageId = result.MessageId,\n                        ErrorMessage = result.ErrorMessage,\n                        CreatedAt = now,\n                        SentAt = result.Success ? now : (DateTime?)null,\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId\n                    });\n\n                    if (result.Success) successCount++; else failureCount++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"📤 Sent to {successCount} recipients. ❌ Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error while sending image template campaign\");\n                return ResponseResult.ErrorInfo(\"🚨 Unexpected error while sending campaign.\", ex.ToString());\n            }\n        }\n\n        private List<object> BuildImageTemplateComponents_Pinnacle(\n       string? imageUrl,\n       List<string> templateParams,\n       List<CampaignButton>? buttonList,\n       TemplateMetadataDto templateMeta,\n       Guid campaignSendLogId,\n       Contact contact,\n       out List<string> resolvedButtonUrls)\n        {\n            var components = new List<object>();\n            resolvedButtonUrls = new List<string>();\n\n            // Header\n            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                new { type = \"image\", image = new { link = imageUrl } }\n                    }\n                });\n            }\n\n            // Body\n            if (templateMeta.PlaceholderCount > 0 && templateParams?.Count > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // Buttons\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            var total = Math.Min(3, Math.Min(buttonList.Count, templateMeta.ButtonParams.Count));\n\n            // phone for optional {{1}}\n            var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber) ? \"\" :\n                        (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n            var encodedPhone = Uri.EscapeDataString(phone);\n\n            for (int i = 0; i < total; i++)\n            {\n                var btn = buttonList[i];\n                var meta = templateMeta.ButtonParams[i];\n                var subtype = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim() ?? string.Empty; // e.g. \"/r/{{1}}\"\n                var isDynamic = metaParam.Contains(\"{{\");\n\n                if (!isDynamic)\n                {\n                    // static provider button at this index — no parameters to send\n                    components.Add(new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subtype,\n                        [\"index\"] = i\n                    });\n                    continue;\n                }\n\n                var valueRaw = btn?.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw)) continue;\n\n                // Optional phone substitution + body params {{n}}\n                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>\n                {\n                    if (!int.TryParse(m.Groups[1].Value, out var n)) return \"\";\n                    if (n == 1) return encodedPhone;\n                    var idx = n - 1;\n                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? \"\") : \"\";\n                });\n\n                // Track + token (same pattern as text path)\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = subtype,\n                    [\"index\"] = i,\n                    [\"parameters\"] = new[] { new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend } }\n                });\n\n                // what the client will actually open once provider composes the URL\n                var providerResolved = ReplaceAllPlaceholdersWith(metaParam, valueToSend);\n                resolvedButtonUrls.Add(providerResolved);\n            }\n\n            return components;\n        }\n\n\n        private List<object> BuildImageTemplateComponents_Meta(\n       string? imageUrl,\n       List<string> templateParams,\n       List<CampaignButton>? buttonList,\n       TemplateMetadataDto templateMeta,\n       Guid campaignSendLogId,\n       Contact contact,\n       out List<string> resolvedButtonUrls)\n        {\n            var components = new List<object>();\n            resolvedButtonUrls = new List<string>();\n\n            // Header\n            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[]\n                    {\n                new { type = \"image\", image = new { link = imageUrl } }\n            }\n                });\n            }\n\n            // Body\n            if (templateMeta.PlaceholderCount > 0 && templateParams?.Count > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // Dynamic URL buttons only\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            var total = Math.Min(3, Math.Min(buttonList.Count, (templateMeta.ButtonParams?.Count() ?? 0)));\n            var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber) ? \"\" :\n                        (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n            var encodedPhone = Uri.EscapeDataString(phone);\n\n            for (int i = 0; i < total; i++)\n            {\n                var meta = templateMeta.ButtonParams[i];\n                var metaParam = meta.ParameterValue?.Trim();\n                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                if (!isDynamic) continue;\n\n                var btn = buttonList[i];\n                var valueRaw = btn.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw)) continue;\n\n                var subtype = (meta.SubType ?? \"url\").ToLowerInvariant();\n\n                // {{n}} substitution ({{1}} := phone)\n                var resolvedDestination = PlaceholderRe.Replace(valueRaw, m =>\n                {\n                    if (!int.TryParse(m.Groups[1].Value, out var n)) return \"\";\n                    if (n == 1) return encodedPhone;\n                    var idx = n - 1;\n                    return (idx >= 0 && idx < templateParams.Count) ? (templateParams[idx] ?? \"\") : \"\";\n                });\n\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, i, btn.Title, resolvedDestination);\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = subtype,      // \"url\"\n                    [\"index\"] = i.ToString(), // \"0\"/\"1\"/\"2\" for Meta\n                    [\"parameters\"] = new[] { new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend } }\n                });\n\n                var providerResolved = ReplaceAllPlaceholdersWith(metaParam ?? \"\", valueToSend);\n                resolvedButtonUrls.Add(providerResolved);\n            }\n\n            return components;\n        }\n\n\n\n\n\n\n\n        #endregion\n\n        #endregion\n\n        // Features/CampaignModule/Services/CampaignsService.cs\n\n\n        private List<object> BuildVideoTemplateComponents_Pinnacle(\n            string? videoUrl,\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact)\n        {\n            var components = new List<object>();\n\n            // --- Header (VIDEO) ---\n            // TemplateMetadataDto has no HeaderType/HasVideoHeader → emit header when URL is present.\n            if (!string.IsNullOrWhiteSpace(videoUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                new { type = \"video\", video = new { link = videoUrl } }\n                    }\n                });\n            }\n\n            // --- Body ---\n            var bodyCount = templateMeta?.PlaceholderCount ?? 0;\n            if (templateParams != null && templateParams.Count > 0 && bodyCount > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p ?? string.Empty }).ToArray()\n                });\n            }\n\n            // --- Buttons (URL buttons only; indexes 0..2) ---\n            if (buttonList != null && buttonList.Count > 0)\n            {\n                components.AddRange(BuildPinnacleUrlButtons(buttonList));\n            }\n\n            return components;\n        }\n\n        // Works with either CampaignButton (Type/Value) or CampaignButtonDto (ButtonType/TargetUrl).\n        private static IEnumerable<object> BuildPinnacleUrlButtons(IEnumerable<object> rawButtons)\n        {\n            // keep incoming order; cap at 3\n            var ordered = (rawButtons ?? Enumerable.Empty<object>()).Take(3).ToList();\n            var n = ordered is ICollection<object> col ? col.Count : ordered.Count();\n\n            for (int i = 0; i < n; i++)\n            {\n                var b = ordered[i];\n\n                // Try to read \"Type\" or \"ButtonType\"\n                var typeProp = b.GetType().GetProperty(\"Type\") ?? b.GetType().GetProperty(\"ButtonType\");\n                var typeVal = (typeProp?.GetValue(b) as string)?.Trim().ToLowerInvariant() ?? \"url\";\n                if (typeVal != \"url\") continue;\n\n                // Try to read \"Value\" (CampaignButton) or \"TargetUrl\" (CampaignButtonDto)\n                var valueProp = b.GetType().GetProperty(\"Value\") ?? b.GetType().GetProperty(\"TargetUrl\");\n                var paramText = (valueProp?.GetValue(b) as string) ?? string.Empty;\n\n                // If there is a per-recipient URL param, include it; otherwise emit static URL button (no parameters).\n                if (!string.IsNullOrWhiteSpace(paramText))\n                {\n                    yield return new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i, // 0-based\n                        parameters = new object[]\n                        {\n                    new { type = \"text\", text = paramText }\n                        }\n                    };\n                }\n                else\n                {\n                    yield return new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i\n                    };\n                }\n            }\n        }\n\n        private static List<object> BuildVideoTemplateComponents_Meta(\n                string? videoUrl,\n                List<string>? templateParams,\n                List<CampaignButtonDto>? buttonParams,\n                TemplateMetadataDto? templateMeta)\n        {\n            var components = new List<object>();\n\n            // We’re in the VIDEO sender path, so add header only if a URL is present.\n            if (!string.IsNullOrWhiteSpace(videoUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                new { type = \"video\", video = new { link = videoUrl } }\n                    }\n                });\n            }\n\n            // Body placeholders: use meta.PlaceholderCount if available, otherwise list length.\n            var bodyCount = templateMeta?.PlaceholderCount ?? templateParams?.Count ?? 0;\n            if (bodyCount > 0 && (templateParams?.Count ?? 0) > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams!.Select(p => new { type = \"text\", text = p ?? string.Empty }).ToArray()\n                });\n            }\n\n            // Buttons (URL buttons only). See helper below.\n            if (buttonParams != null && buttonParams.Count > 0)\n            {\n                components.AddRange(BuildMetaTemplateButtons(buttonParams, templateMeta));\n            }\n\n            return components;\n        }\n\n\n        // CampaignButtonDto (your real one)\n\n        private static IEnumerable<object> BuildMetaTemplateButtons(\n            List<CampaignButtonDto> buttons,\n            TemplateMetadataDto? templateMeta)   // meta unused here; kept for future expansion\n        {\n            // Keep incoming order; cap at 3\n            var ordered = (buttons ?? new List<CampaignButtonDto>())\n                .Take(3)\n                .ToList();\n\n            // Avoid Count ambiguity by caching n\n            int n = ordered is ICollection<CampaignButtonDto> col ? col.Count : ordered.Count();\n\n            for (int i = 0; i < n; i++)\n            {\n                var b = ordered[i];\n\n                // Only URL buttons are supported for parameterized Meta buttons\n                var isUrl = string.Equals(b?.ButtonType, \"url\", StringComparison.OrdinalIgnoreCase);\n                if (!isUrl) continue;\n\n                // If we have a per-recipient param (TargetUrl), include a parameter; else emit static button\n                var paramText = b?.TargetUrl ?? string.Empty;\n                var needsParam = !string.IsNullOrWhiteSpace(paramText);\n\n                if (needsParam)\n                {\n                    yield return new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i, // Meta uses 0-based indexes\n                        parameters = new object[]\n                        {\n                    new { type = \"text\", text = paramText }\n                        }\n                    };\n                }\n                else\n                {\n                    yield return new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i\n                    };\n                }\n            }\n        }\n\n\n\n\n        public async Task<List<FlowListItemDto>> GetAvailableFlowsAsync(Guid businessId, bool onlyPublished = true)\n        {\n            return await _context.CTAFlowConfigs\n                .AsNoTracking()\n                .Where(f => f.BusinessId == businessId && f.IsActive && (!onlyPublished || f.IsPublished))\n                .OrderByDescending(f => f.UpdatedAt)\n                .Select(f => new FlowListItemDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    IsPublished = f.IsPublished\n                })\n                .ToListAsync();\n        }\n        // ===================== DRY RUN (Step 2.3) =====================\n\n        public async Task<CampaignDryRunResponseDto> DryRunTemplateCampaignAsync(Guid campaignId, int maxRecipients = 20)\n        {\n            var resp = new CampaignDryRunResponseDto { CampaignId = campaignId };\n\n            // Load campaign + recipients (+Contact +AudienceMember) + buttons\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n                .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)\n                .Include(c => c.MultiButtons)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n            if (campaign == null)\n            {\n                resp.Notes.Add(\"Campaign not found.\");\n                return resp;\n            }\n\n            resp.CampaignType = campaign.CampaignType ?? \"text\";\n\n            // Resolve entry template name from flow if present, else fall back\n            var (_, entryTemplate) = await ResolveFlowEntryAsync(campaign.BusinessId, campaign.CTAFlowConfigId);\n            var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                ? entryTemplate!\n                : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n\n            if (string.IsNullOrWhiteSpace(templateName))\n            {\n                resp.Notes.Add(\"Template name is missing.\");\n                return resp;\n            }\n\n            // Fetch provider template metadata once (language, placeholders, button schema)\n            var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(\n                campaign.BusinessId, templateName, includeButtons: true);\n\n            resp.TemplateName = templateName;\n\n            if (templateMeta == null)\n            {\n                resp.Notes.Add($\"Template metadata not found for business. Name='{templateName}'.\");\n                return resp;\n            }\n\n            resp.Language = (templateMeta.Language ?? \"\").Trim();\n            resp.HasHeaderMedia = templateMeta.HasImageHeader;\n\n            if (string.IsNullOrWhiteSpace(resp.Language))\n                resp.Notes.Add(\"Template language is not specified on metadata.\");\n\n            // Ensure non-null param list for builders (snapshot provided params)\n            var providedParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters)\n                                 ?? new List<string>();\n\n            resp.RequiredPlaceholders = Math.Max(0, templateMeta.PlaceholderCount);\n            resp.ProvidedPlaceholders = providedParams.Count;\n\n            if (resp.RequiredPlaceholders != resp.ProvidedPlaceholders)\n                resp.Notes.Add($\"Placeholder mismatch: template requires {resp.RequiredPlaceholders}, provided {resp.ProvidedPlaceholders}. Consider re-snapshotting parameters.\");\n\n            // Dynamic URL button check (template expects params) vs campaign button values\n            var templButtons = templateMeta.ButtonParams ?? new List<ButtonMetadataDto>();\n            bool templateHasDynamicUrl = templButtons.Any(b =>\n                string.Equals(b.SubType ?? \"url\", \"url\", StringComparison.OrdinalIgnoreCase) &&\n                !string.IsNullOrWhiteSpace(b.ParameterValue) &&\n                b.ParameterValue!.Contains(\"{{\"));\n\n            if (templateHasDynamicUrl)\n            {\n                var hasCampaignUrlValues = (campaign.MultiButtons ?? new List<CampaignButton>())\n                    .Any(cb => !string.IsNullOrWhiteSpace(cb.Value));\n                if (!hasCampaignUrlValues)\n                    resp.Notes.Add(\"Template defines dynamic URL button(s) with placeholders, but campaign has no URL button values configured.\");\n            }\n\n            // Provider normalization for preview\n            var provider = (campaign.Provider ?? \"META_CLOUD\").Trim().ToUpperInvariant();\n            if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n            {\n                resp.Notes.Add($\"Invalid provider on campaign: '{campaign.Provider}'. Dry run will assume META_CLOUD.\");\n                provider = \"META_CLOUD\";\n            }\n\n            // Slice some recipients (prefer latest activity; CreatedAt is not on CampaignRecipient)\n            var recipients = (campaign.Recipients ?? new List<CampaignRecipient>())\n     .OrderByDescending(r => (DateTime?)r.UpdatedAt\n                              ?? r.MaterializedAt\n                              ?? r.SentAt\n                              ?? DateTime.MinValue)\n     .Take(Math.Clamp(maxRecipients, 1, 200))\n     .ToList();\n\n            resp.RecipientsConsidered = recipients.Count;\n\n            // Helper: resolve a phone for a recipient\n            static string? ResolveRecipientPhone(CampaignRecipient r) =>\n                r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;\n\n            int okCount = 0, errCount = 0;\n\n            foreach (var r in recipients)\n            {\n                var phoneResolved = ResolveRecipientPhone(r) ?? \"\";\n                var contactName = r.Contact?.Name ?? r.AudienceMember?.Name;\n\n                var one = new CampaignDryRunRecipientResultDto\n                {\n                    ContactId = r.ContactId,\n                    ContactName = contactName,\n                    PhoneNumber = phoneResolved\n                };\n\n                // Phone checks (presence + basic shape)\n                var phone = (one.PhoneNumber ?? string.Empty).Trim();\n                if (string.IsNullOrEmpty(phone))\n                {\n                    one.Errors.Add(\"Recipient phone missing (no Contact and no AudienceMember phone).\");\n                }\n                else if (!Regex.IsMatch(phone, @\"^\\+?\\d{8,15}$\"))\n                {\n                    one.Warnings.Add(\"Recipient phone may be invalid (basic format check failed).\");\n                }\n\n                try\n                {\n                    // Always synthesize a contact to avoid null derefs in builders\n                    var contactForTemplating = r.Contact ?? new Contact\n                    {\n                        Id = Guid.Empty,\n                        BusinessId = campaign.BusinessId,\n                        PhoneNumber = phoneResolved,\n                        Name = contactName ?? \"Customer\"\n                    };\n\n                    // Buttons ordered like send path: by Position then original index; limit 3\n                    var buttons = (campaign.MultiButtons ?? new List<CampaignButton>())\n                        .Select((b, idx) => new { Btn = b, idx })\n                        .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                        .ThenBy(x => x.idx)\n                        .Select(x => x.Btn)\n                        .Take(3)\n                        .ToList();\n\n                    // Build components for preview (match send path) — single call, discard out URLs\n                    List<object> components;\n                    var isImage = (campaign.CampaignType ?? \"text\")\n                        .Equals(\"image\", StringComparison.OrdinalIgnoreCase);\n\n                    if (isImage)\n                    {\n                        components = (provider == \"PINNACLE\")\n                            ? BuildImageTemplateComponents_Pinnacle(\n                                campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _)\n                            : BuildImageTemplateComponents_Meta(\n                                campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _);\n                    }\n                    else\n                    {\n                        components = (provider == \"PINNACLE\")\n                            ? BuildTextTemplateComponents_Pinnacle(\n                                providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _)\n                            : BuildTextTemplateComponents_Meta(\n                                providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out _);\n                    }\n\n                    // Additional validations like the send path: blank required params\n                    if (templateMeta.PlaceholderCount > 0 &&\n                        (providedParams.Count < templateMeta.PlaceholderCount ||\n                         providedParams.Take(templateMeta.PlaceholderCount).Any(string.IsNullOrWhiteSpace)))\n                    {\n                        one.Errors.Add($\"Missing body parameter(s): template requires {templateMeta.PlaceholderCount}, provided {providedParams.Count} (or some blank).\");\n                    }\n\n                    one.ProviderComponents = components;\n                    one.WouldSend = one.Errors.Count == 0;\n                    if (one.WouldSend) okCount++; else errCount++;\n                }\n                catch (Exception ex)\n                {\n                    one.Errors.Add(ex.Message);\n                    one.WouldSend = false;\n                    errCount++;\n                }\n\n                resp.Results.Add(one);\n            }\n\n            resp.WouldSendCount = okCount;\n            resp.ErrorCount = errCount;\n\n            // Billability (best-effort)\n            resp.EstimatedChargeable = true;\n            resp.EstimatedConversationCategory = \"template_outbound\";\n            if (!resp.Notes.Any(n => n.Contains(\"Template messages are typically chargeable\")))\n                resp.Notes.Add(\"Estimation: Template messages are typically chargeable and start a new conversation unless covered by free-entry flows.\");\n\n            return resp;\n        }\n\n        //public async Task<CampaignDryRunResponseDto> DryRunTemplateCampaignAsync(Guid campaignId, int maxRecipients = 20)\n        //{\n        //    var resp = new CampaignDryRunResponseDto { CampaignId = campaignId };\n\n        //    // Load campaign + recipients (+Contact +AudienceMember) + buttons\n        //    var campaign = await _context.Campaigns\n        //        .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n        //        .Include(c => c.Recipients).ThenInclude(r => r.AudienceMember)\n        //        .Include(c => c.MultiButtons)\n        //        .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n        //    if (campaign == null)\n        //    {\n        //        resp.Notes.Add(\"Campaign not found.\");\n        //        return resp;\n        //    }\n\n        //    resp.CampaignType = campaign.CampaignType ?? \"text\";\n\n        //    // Resolve entry template name from flow if present, else fall back\n        //    var (_, entryTemplate) = await ResolveFlowEntryAsync(campaign.BusinessId, campaign.CTAFlowConfigId);\n        //    var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n        //        ? entryTemplate!\n        //        : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n\n        //    if (string.IsNullOrWhiteSpace(templateName))\n        //    {\n        //        resp.Notes.Add(\"Template name is missing.\");\n        //        return resp;\n        //    }\n\n        //    // Fetch provider template metadata once (language, placeholders, button schema)\n        //    var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(\n        //        campaign.BusinessId, templateName, includeButtons: true);\n\n        //    resp.TemplateName = templateName;\n\n        //    if (templateMeta == null)\n        //    {\n        //        resp.Notes.Add($\"Template metadata not found for business. Name='{templateName}'.\");\n        //        return resp;\n        //    }\n\n        //    resp.Language = (templateMeta.Language ?? \"\").Trim();\n        //    resp.HasHeaderMedia = templateMeta.HasImageHeader;\n\n        //    if (string.IsNullOrWhiteSpace(resp.Language))\n        //        resp.Notes.Add(\"Template language is not specified on metadata.\");\n\n        //    // Ensure non-null param list for builders (snapshot provided params)\n        //    var providedParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters)\n        //                         ?? new List<string>();\n\n        //    resp.RequiredPlaceholders = Math.Max(0, templateMeta.PlaceholderCount);\n        //    resp.ProvidedPlaceholders = providedParams.Count;\n\n        //    if (resp.RequiredPlaceholders != resp.ProvidedPlaceholders)\n        //        resp.Notes.Add($\"Placeholder mismatch: template requires {resp.RequiredPlaceholders}, provided {resp.ProvidedPlaceholders}. Consider re-snapshotting parameters.\");\n\n        //    // Dynamic URL button check (template expects params) vs campaign button values\n        //    var templButtons = templateMeta.ButtonParams ?? new List<ButtonMetadataDto>();\n        //    bool templateHasDynamicUrl = templButtons.Any(b =>\n        //        string.Equals(b.SubType ?? \"url\", \"url\", StringComparison.OrdinalIgnoreCase) &&\n        //        !string.IsNullOrWhiteSpace(b.ParameterValue) &&\n        //        b.ParameterValue!.Contains(\"{{\"));\n\n        //    if (templateHasDynamicUrl)\n        //    {\n        //        var hasCampaignUrlValues = (campaign.MultiButtons ?? new List<CampaignButton>())\n        //            .Any(cb => !string.IsNullOrWhiteSpace(cb.Value));\n        //        if (!hasCampaignUrlValues)\n        //            resp.Notes.Add(\"Template defines dynamic URL button(s) with placeholders, but campaign has no URL button values configured.\");\n        //    }\n\n        //    // Provider normalization for preview\n        //    var provider = (campaign.Provider ?? \"META_CLOUD\").Trim().ToUpperInvariant();\n        //    if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n        //    {\n        //        resp.Notes.Add($\"Invalid provider on campaign: '{campaign.Provider}'. Dry run will assume META_CLOUD.\");\n        //        provider = \"META_CLOUD\";\n        //    }\n\n        //    // Slice some recipients (prefer most recently updated)\n        //    var recipients = (campaign.Recipients ?? new List<CampaignRecipient>())\n        //        .OrderByDescending(r => r.UpdatedAt ?? r.CreatedAt)\n        //        .Take(Math.Clamp(maxRecipients, 1, 200))\n        //        .ToList();\n\n        //    resp.RecipientsConsidered = recipients.Count;\n\n        //    // Helper: resolve a phone for a recipient\n        //    static string? ResolveRecipientPhone(CampaignRecipient r) =>\n        //        r?.Contact?.PhoneNumber ?? r?.AudienceMember?.PhoneE164 ?? r?.AudienceMember?.PhoneRaw;\n\n        //    int okCount = 0, errCount = 0;\n\n        //    foreach (var r in recipients)\n        //    {\n        //        var phoneResolved = ResolveRecipientPhone(r) ?? \"\";\n        //        var contactName = r.Contact?.Name ?? r.AudienceMember?.Name;\n\n        //        var one = new CampaignDryRunRecipientResultDto\n        //        {\n        //            ContactId = r.ContactId,\n        //            ContactName = contactName,\n        //            PhoneNumber = phoneResolved\n        //        };\n\n        //        // Phone checks (presence + basic shape)\n        //        var phone = (one.PhoneNumber ?? string.Empty).Trim();\n        //        if (string.IsNullOrEmpty(phone))\n        //        {\n        //            one.Errors.Add(\"Recipient phone missing (no Contact and no AudienceMember phone).\");\n        //        }\n        //        else if (!Regex.IsMatch(phone, @\"^\\+?\\d{8,15}$\"))\n        //        {\n        //            one.Warnings.Add(\"Recipient phone may be invalid (basic format check failed).\");\n        //        }\n\n        //        try\n        //        {\n        //            // Always synthesize a contact to avoid null derefs in builders\n        //            var contactForTemplating = r.Contact ?? new Contact\n        //            {\n        //                Id = Guid.Empty,\n        //                BusinessId = campaign.BusinessId,\n        //                PhoneNumber = phoneResolved,\n        //                Name = contactName ?? \"Customer\"\n        //            };\n\n        //            // Buttons ordered like send path: by Position then original index; limit 3\n        //            var buttons = (campaign.MultiButtons ?? new List<CampaignButton>())\n        //                .Select((b, idx) => new { Btn = b, idx })\n        //                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n        //                .ThenBy(x => x.idx)\n        //                .Select(x => x.Btn)\n        //                .Take(3)\n        //                .ToList();\n\n        //            // Build components for preview (match send path)\n        //            List<object> components;\n        //            var isImage = (campaign.CampaignType ?? \"text\")\n        //                .Equals(\"image\", StringComparison.OrdinalIgnoreCase);\n\n        //            if (isImage)\n        //            {\n        //                // use the image builders; discard resolvedButtonUrls for dry run\n        //                _ = (provider == \"PINNACLE\")\n        //                    ? BuildImageTemplateComponents_Pinnacle(\n        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _)\n        //                    : BuildImageTemplateComponents_Meta(\n        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _);\n\n        //                // We need the components object; the builders return it\n        //                components = (provider == \"PINNACLE\")\n        //                    ? BuildImageTemplateComponents_Pinnacle(\n        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var __)\n        //                    : BuildImageTemplateComponents_Meta(\n        //                        campaign.ImageUrl, providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var ___);\n        //            }\n        //            else\n        //            {\n        //                components = (provider == \"PINNACLE\")\n        //                    ? BuildTextTemplateComponents_Pinnacle(\n        //                        providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _)\n        //                    : BuildTextTemplateComponents_Meta(\n        //                        providedParams, buttons, templateMeta, Guid.NewGuid(), contactForTemplating, out var _);\n        //            }\n\n        //            // Additional validations like the send path: blank required params\n        //            if (templateMeta.PlaceholderCount > 0 &&\n        //                (providedParams.Count < templateMeta.PlaceholderCount ||\n        //                 providedParams.Take(templateMeta.PlaceholderCount).Any(string.IsNullOrWhiteSpace)))\n        //            {\n        //                one.Errors.Add($\"Missing body parameter(s): template requires {templateMeta.PlaceholderCount}, provided {providedParams.Count} (or some blank).\");\n        //            }\n\n        //            one.ProviderComponents = components;\n        //            one.WouldSend = one.Errors.Count == 0;\n        //            if (one.WouldSend) okCount++; else errCount++;\n        //        }\n        //        catch (Exception ex)\n        //        {\n        //            one.Errors.Add(ex.Message);\n        //            one.WouldSend = false;\n        //            errCount++;\n        //        }\n\n        //        resp.Results.Add(one);\n        //    }\n\n        //    resp.WouldSendCount = okCount;\n        //    resp.ErrorCount = errCount;\n\n        //    // Billability (best-effort)\n        //    resp.EstimatedChargeable = true;\n        //    resp.EstimatedConversationCategory = \"template_outbound\";\n        //    if (!resp.Notes.Any(n => n.Contains(\"Template messages are typically chargeable\")))\n        //        resp.Notes.Add(\"Estimation: Template messages are typically chargeable and start a new conversation unless covered by free-entry flows.\");\n\n        //    return resp;\n        //}\n\n        // in your CampaignService (same file as SendVideoTemplateCampaignAsync)\n        private static List<CampaignButtonDto> MapButtonVarsToButtonDtos(Dictionary<string, string>? vars)\n        {\n            var list = new List<CampaignButtonDto>();\n            if (vars == null || vars.Count == 0) return list;\n\n            // We only care about URL buttons 1..3; take the param text\n            for (var i = 1; i <= 3; i++)\n            {\n                if (vars.TryGetValue($\"button{i}.url_param\", out var param) && !string.IsNullOrWhiteSpace(param))\n                {\n                    list.Add(new CampaignButtonDto\n                    {\n                        ButtonText = $\"Button {i}\",   // optional; purely cosmetic\n                        ButtonType = \"url\",\n                        TargetUrl = param\n                    });\n                }\n            }\n            return list;\n        }\n        private async Task<ResponseResult> SendDocumentTemplateCampaignAsync(Campaign campaign)\n        {\n            var sw = System.Diagnostics.Stopwatch.StartNew();\n            _logger.LogInformation(\"[DocSend] Begin. campaignId={CampaignId}\", campaign.Id);\n\n            // force an IEnumerable → List and use a distinct name to avoid symbol collisions\n            var recipientsList = (campaign.Recipients ?? Enumerable.Empty<CampaignRecipient>())\n                    .Where(r =>\n                    !string.IsNullOrWhiteSpace(r.Contact?.PhoneNumber) ||\n                    !string.IsNullOrWhiteSpace(r.AudienceMember?.PhoneE164))\n                         .ToList();\n\n            // Use Any() (robust even if someone shadows Count somewhere)\n            if (!recipientsList.Any())\n                return ResponseResult.ErrorInfo(\"⚠️ No valid recipients with phone numbers.\");\n\n            var templateName = campaign.MessageTemplate;\n            var languageCode = \"en_US\"; // keep consistent with your image/video path\n            var provider = (campaign.Provider ?? \"META\").ToUpperInvariant();\n            var phoneNumberId = campaign.PhoneNumberId;\n\n            // optional static fallback (we don't have Campaign.DocumentUrl in this branch)\n            var staticDocUrl = campaign.ImageUrl;\n\n            var ok = 0; var fail = 0;\n\n            foreach (var r in recipientsList)\n            {\n                var to = r.Contact?.PhoneNumber ?? r.AudienceMember?.PhoneE164 ?? \"\";\n                if (string.IsNullOrWhiteSpace(to)) continue;\n\n                try\n                {\n                    // These helpers were added earlier:\n                    var templateParams = BuildBodyParametersForRecipient(campaign, r);\n                    var buttonVars = BuildButtonParametersForRecipient(campaign, r);\n                    var buttonsDto = MapButtonVarsToButtonDtos(buttonVars);\n                    // Per-recipient doc header; no campaign-level DocumentUrl in this branch\n                    var headerDocUrl = ResolvePerRecipientValue(r, \"header.document_url\") ?? staticDocUrl;\n\n                    var dto = new DocumentTemplateMessageDto\n                    {\n                        BusinessId = campaign.BusinessId,\n                        RecipientNumber = to,\n                        TemplateName = templateName,\n                        LanguageCode = languageCode,\n                        HeaderDocumentUrl = headerDocUrl,\n                        // match your DTO property names exactly — use the ones your MessageEngine expects:\n                        Parameters = templateParams,   // or TemplateParameters if that's your DTO\n                        Buttons = buttonsDto,      // or ButtonParameters if that's your DTO\n                        Provider = provider,\n                        PhoneNumberId = phoneNumberId,\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        TemplateBody = campaign.MessageBody\n                    };\n\n                    var sent = await _messageEngineService.SendDocumentTemplateMessageAsync(dto, campaign.BusinessId);\n                    var success = sent.Success;\n\n                    if (success) ok++; else fail++;\n\n                    await LogSendAsync(campaign, r, to, provider, success, headerDocUrl, \"document\");\n                    _logger.LogInformation(\"[DocSend] to={To} success={Success}\", to, success);\n                }\n                catch (Exception ex)\n                {\n                    fail++;\n                    _logger.LogError(ex, \"[DocSend] failed to={To}\", to);\n                    await LogSendAsync(campaign, r, to, provider, false, staticDocUrl, \"document\", ex.Message);\n                }\n            }\n\n            sw.Stop();\n            var msg = $\"Document campaign finished. Success={ok}, Failed={fail}\";\n            _logger.LogInformation(\"[DocSend] Done. campaignId={CampaignId} {Msg}\", campaign.Id, msg);\n\n            return fail == 0 ? ResponseResult.SuccessInfo(msg) : ResponseResult.ErrorInfo(msg);\n        }\n        private Task LogSendAsync(\n                    Campaign campaign,\n                    CampaignRecipient recipient,\n                    string to,\n                    string provider,\n                    bool success,\n                    string? headerUrl,\n                    string channel,\n                    string? error = null)\n        {\n            _logger.LogInformation(\n                \"[SendLog] campaignId={CampaignId} to={To} provider={Provider} channel={Channel} success={Success} headerUrl={HeaderUrl} error={Error}\",\n                campaign.Id, to, provider, channel, success, headerUrl, error);\n\n            // If/when you have a CampaignSendLogs table, insert there instead.\n            return Task.CompletedTask;\n        }\n\n\n\n        private static string[] ReadResolvedParams(CampaignRecipient r)\n        {\n            var s = r?.ResolvedParametersJson;\n            if (string.IsNullOrWhiteSpace(s)) return Array.Empty<string>();\n            try\n            {\n                return JsonConvert.DeserializeObject<string[]>(s) ?? Array.Empty<string>();\n            }\n            catch\n            {\n                return Array.Empty<string>();\n            }\n        }\n\n        private static Dictionary<string, string> ReadResolvedButtonVars(CampaignRecipient r)\n        {\n            var s = r?.ResolvedButtonUrlsJson;\n            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            if (string.IsNullOrWhiteSpace(s)) return dict;\n            try\n            {\n                return JsonConvert.DeserializeObject<Dictionary<string, string>>(s)\n                       ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n            catch\n            {\n                return dict;\n            }\n        }\n\n        // Optional: unified accessor for header media (image/video/document) if your materializer\n        // saved canonical keys like \"header.image_url\" / \"header.video_url\" / \"header.document_url\".\n        private static string? TryGetHeaderMedia(Dictionary<string, string> vars, params string[] keys)\n        {\n            foreach (var k in keys)\n                if (!string.IsNullOrWhiteSpace(k) && vars.TryGetValue(k, out var v) && !string.IsNullOrWhiteSpace(v))\n                    return v;\n            return null;\n        }\n\n        public Task<object> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId)\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CsvBatchService.cs",
      "sha256": "3f6e3483135477a09f20045397e8dacd67a732221abec7b0e9525164c0ef6c5a",
      "language": "csharp",
      "size": 47608,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CsvBatchService : ICsvBatchService\n    {\n        private readonly AppDbContext _db;\n\n        public CsvBatchService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // ----------------------------\n        // Upload + ingest\n        // ----------------------------\n        public async Task<CsvBatchUploadResultDto> CreateAndIngestAsync(\n            Guid businessId,\n            string fileName,\n            Stream stream,\n            Guid? audienceId = null,\n            CancellationToken ct = default)\n        {\n            // 1) Create batch shell\n            var batch = new CsvBatch\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                AudienceId = audienceId,          // nullable by design (ok if null)\n                FileName = fileName,\n                CreatedAt = DateTime.UtcNow,\n                Status = \"ingesting\",\n                RowCount = 0,\n                SkippedCount = 0,\n                HeadersJson = null\n            };\n\n            _db.CsvBatches.Add(batch);\n            await _db.SaveChangesAsync(ct);\n\n            try\n            {\n                // 2) Parse headers + rows (robust CSV parsing)\n                stream.Position = 0;\n                using var reader = new StreamReader(stream, Encoding.UTF8, detectEncodingFromByteOrderMarks: true, bufferSize: 1024, leaveOpen: true);\n\n                string? headerLine = await reader.ReadLineAsync();\n                if (string.IsNullOrWhiteSpace(headerLine))\n                {\n                    // No header line → fall back to single \"phone\" column\n                    var headers = new List<string> { \"phone\" };\n                    batch.HeadersJson = JsonSerializer.Serialize(headers);\n                    batch.Status = \"ready\";\n                    await _db.SaveChangesAsync(ct);\n\n                    Log.Warning(\"CSV had no header line. Created batch {BatchId} with fallback 'phone' header.\", batch.Id);\n\n                    return new CsvBatchUploadResultDto\n                    {\n                        BatchId = batch.Id,\n                        AudienceId = batch.AudienceId,\n                        FileName = batch.FileName ?? string.Empty,\n                        RowCount = 0,\n                        Headers = headers\n                    };\n                }\n\n                var delim = DetectDelimiter(headerLine);\n                var headersParsed = ParseCsvLine(headerLine, delim)\n                    .Select(h => h.Trim())\n                    .Where(h => !string.IsNullOrEmpty(h))\n                    .ToList();\n\n                if (headersParsed.Count == 0)\n                    headersParsed = new List<string> { \"phone\" };\n\n                batch.HeadersJson = JsonSerializer.Serialize(headersParsed);\n                await _db.SaveChangesAsync(ct);\n\n                // 3) Stream rows into CsvRows\n                var rowsBuffer = new List<CsvRow>(capacity: 1024);\n                int rowIndex = 0;\n\n                while (!reader.EndOfStream)\n                {\n                    var line = await reader.ReadLineAsync();\n                    if (line is null) break;\n                    if (string.IsNullOrWhiteSpace(line)) continue;\n\n                    var cols = ParseCsvLine(line, delim);\n\n                    var dict = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);\n                    for (int i = 0; i < headersParsed.Count; i++)\n                    {\n                        var key = headersParsed[i];\n                        var val = i < cols.Count ? cols[i]?.Trim() : null;\n                        dict[key] = val;\n                    }\n\n                    rowsBuffer.Add(new CsvRow\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,           // IMPORTANT for later queries\n                        BatchId = batch.Id,\n                        RowIndex = rowIndex++,\n                        DataJson = JsonSerializer.Serialize(dict)\n                    });\n\n                    if (rowsBuffer.Count >= 1000)\n                    {\n                        _db.CsvRows.AddRange(rowsBuffer);\n                        await _db.SaveChangesAsync(ct);\n                        rowsBuffer.Clear();\n                    }\n                }\n\n                if (rowsBuffer.Count > 0)\n                {\n                    _db.CsvRows.AddRange(rowsBuffer);\n                    await _db.SaveChangesAsync(ct);\n                    rowsBuffer.Clear();\n                }\n\n                batch.RowCount = rowIndex;\n                batch.Status = \"ready\";\n                await _db.SaveChangesAsync(ct);\n\n                Log.Information(\"CsvBatch {BatchId} ingested: {Rows} rows; headers={HeaderCount}\", batch.Id, batch.RowCount, headersParsed.Count);\n\n                return new CsvBatchUploadResultDto\n                {\n                    BatchId = batch.Id,\n                    AudienceId = batch.AudienceId,\n                    FileName = batch.FileName ?? string.Empty,\n                    RowCount = batch.RowCount,\n                    Headers = headersParsed\n                };\n            }\n            catch (Exception ex)\n            {\n                batch.Status = \"failed\";\n                batch.ErrorMessage = ex.Message;\n                await _db.SaveChangesAsync(ct);\n                Log.Error(ex, \"CSV ingest failed for batch {BatchId}\", batch.Id);\n                throw;\n            }\n        }\n\n        // ----------------------------\n        // Batch info\n        // ----------------------------\n        private async Task<CsvBatchUploadResultDto> IngestCoreAsync(\n            Guid businessId,\n            string fileName,\n            Stream stream,\n            CancellationToken ct)\n        {\n            // Minimal “stage only” helper (kept in case other code calls it)\n            var batch = new CsvBatch\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                FileName = fileName,\n                CreatedAt = DateTime.UtcNow,\n                Status = \"ready\",\n                HeadersJson = null,\n                RowCount = 0,\n                SkippedCount = 0,\n                ErrorMessage = null\n            };\n            _db.CsvBatches.Add(batch);\n            await _db.SaveChangesAsync(ct);\n\n            Log.Information(\"CsvBatch {BatchId} staged for business {Biz}\", batch.Id, businessId);\n\n            return new CsvBatchUploadResultDto\n            {\n                BatchId = batch.Id,\n                AudienceId = null,\n                FileName = fileName,\n                RowCount = 0,\n                Headers = new List<string>(),\n                Message = \"CSV batch created.\"\n            };\n        }\n\n        public async Task<CsvBatchInfoDto?> GetBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)\n        {\n            var batch = await _db.CsvBatches\n                .AsNoTracking()\n                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n\n            if (batch == null) return null;\n\n            var headers = SafeParseHeaderArray(batch.HeadersJson);\n\n            return new CsvBatchInfoDto\n            {\n                BatchId = batch.Id,\n                AudienceId = batch.AudienceId,\n                RowCount = batch.RowCount,\n                Headers = headers,\n                CreatedAt = batch.CreatedAt\n            };\n        }\n\n        // ----------------------------\n        // Samples (single implementation)\n        // ----------------------------\n        public async Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(\n            Guid businessId,\n            Guid batchId,\n            int take = 20,\n            CancellationToken ct = default)\n        {\n            if (take <= 0) take = 20;\n            if (take > 100) take = 100;\n\n            var batch = await _db.CsvBatches\n                .AsNoTracking()\n                .Where(b => b.Id == batchId && b.BusinessId == businessId)\n                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })\n                .FirstOrDefaultAsync(ct);\n\n            if (batch is null)\n                throw new KeyNotFoundException(\"Batch not found.\");\n\n            // If no rows yet, return empty samples gracefully\n            if (batch.RowCount <= 0)\n                return Array.Empty<CsvRowSampleDto>();\n\n            var headerList = SafeParseHeaderArray(batch.HeadersJson);\n\n            var rows = await _db.CsvRows\n                .AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n                .OrderBy(r => r.RowIndex)\n                .Take(take)\n                .Select(r => new { r.RowIndex, r.DataJson })\n                .ToListAsync(ct);\n\n            var result = new List<CsvRowSampleDto>(rows.Count);\n            foreach (var r in rows)\n            {\n                var dict = SafeParseDict(r.DataJson);\n\n                // Ensure consistent header order (fill missing with null)\n                var ordered = new Dictionary<string, string?>(headerList.Count, StringComparer.OrdinalIgnoreCase);\n                foreach (var h in headerList)\n                {\n                    dict.TryGetValue(h, out var v);\n                    ordered[h] = v;\n                }\n\n                result.Add(new CsvRowSampleDto\n                {\n                    RowIndex = r.RowIndex,\n                    Data = ordered\n                });\n            }\n\n            return result;\n        }\n\n        // ----------------------------\n        // List / Page / Delete / Validate\n        // ----------------------------\n        public async Task<List<CsvBatchListItemDto>> ListBatchesAsync(Guid businessId, int limit = 20, CancellationToken ct = default)\n        {\n            if (limit <= 0) limit = 20;\n            if (limit > 100) limit = 100;\n\n            return await _db.CsvBatches\n                .AsNoTracking()\n                .Where(b => b.BusinessId == businessId)\n                .OrderByDescending(b => b.CreatedAt)\n                .Take(limit)\n                .Select(b => new CsvBatchListItemDto\n                {\n                    BatchId = b.Id,\n                    FileName = b.FileName,\n                    RowCount = b.RowCount,\n                    Status = b.Status,\n                    CreatedAt = b.CreatedAt\n                })\n                .ToListAsync(ct);\n        }\n\n        public async Task<CsvBatchRowsPageDto> GetRowsPageAsync(Guid businessId, Guid batchId, int skip, int take, CancellationToken ct = default)\n        {\n            if (take <= 0) take = 50;\n            if (take > 200) take = 200;\n            if (skip < 0) skip = 0;\n\n            var exists = await _db.CsvBatches.AsNoTracking()\n                .AnyAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n            if (!exists) throw new KeyNotFoundException(\"CSV batch not found.\");\n\n            var total = await _db.CsvRows.AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n                .CountAsync(ct);\n\n            var rows = await _db.CsvRows.AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n                .OrderBy(r => r.RowIndex)\n                .Skip(skip)\n                .Take(take)\n                .Select(r => new CsvRowSampleDto\n                {\n                    RowIndex = r.RowIndex,\n                    Data = SafeParseDict(r.DataJson)\n                })\n                .ToListAsync(ct);\n\n            return new CsvBatchRowsPageDto\n            {\n                BatchId = batchId,\n                TotalRows = total,\n                Skip = skip,\n                Take = take,\n                Rows = rows\n            };\n        }\n\n        public async Task<bool> DeleteBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)\n        {\n            var batch = await _db.CsvBatches\n                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n\n            if (batch == null) return false;\n\n            using var tx = await _db.Database.BeginTransactionAsync(ct);\n            try\n            {\n                var rows = _db.CsvRows.Where(r => r.BusinessId == businessId && r.BatchId == batchId);\n                _db.CsvRows.RemoveRange(rows);\n\n                _db.CsvBatches.Remove(batch);\n\n                await _db.SaveChangesAsync(ct);\n                await tx.CommitAsync(ct);\n                return true;\n            }\n            catch\n            {\n                await tx.RollbackAsync(ct);\n                throw;\n            }\n        }\n\n        private static readonly string[] PhoneHeaderCandidates =\n        { \"phone\", \"mobile\", \"whatsapp\", \"msisdn\", \"whatsapp_number\", \"contact\", \"contact_number\" };\n\n        public async Task<CsvBatchValidationResultDto> ValidateAsync(\n            Guid businessId,\n            Guid batchId,\n            CsvBatchValidationRequestDto request,\n            CancellationToken ct = default)\n        {\n            if (request is null) throw new ArgumentNullException(nameof(request));\n            if (request.SampleSize <= 0) request.SampleSize = 20;\n            if (request.SampleSize > 100) request.SampleSize = 100;\n\n            var batch = await _db.CsvBatches.AsNoTracking()\n                .Where(b => b.BusinessId == businessId && b.Id == batchId)\n                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })\n                .FirstOrDefaultAsync(ct);\n\n            if (batch == null) throw new KeyNotFoundException(\"CSV batch not found.\");\n\n            var headers = SafeParseHeaderArray(batch.HeadersJson);\n            var headerSet = new HashSet<string>(headers, StringComparer.OrdinalIgnoreCase);\n\n            var result = new CsvBatchValidationResultDto\n            {\n                BatchId = batchId,\n                TotalRows = batch.RowCount\n            };\n\n            // Required headers check\n            if (request.RequiredHeaders != null && request.RequiredHeaders.Count > 0)\n            {\n                foreach (var req in request.RequiredHeaders)\n                {\n                    if (!headerSet.Contains(req))\n                        result.MissingRequiredHeaders.Add(req);\n                }\n\n                if (result.MissingRequiredHeaders.Count > 0)\n                    result.Errors.Add(\"Required headers are missing.\");\n            }\n\n            // Determine phone field\n            var phoneField = request.PhoneField;\n            if (string.IsNullOrWhiteSpace(phoneField))\n                phoneField = PhoneHeaderCandidates.FirstOrDefault(headerSet.Contains);\n\n            result.PhoneField = phoneField;\n\n            if (string.IsNullOrWhiteSpace(phoneField))\n            {\n                result.Errors.Add(\"No phone field provided or detected.\");\n                return result; // cannot scan rows without a phone column\n            }\n\n            // Scan rows for phone presence & duplicates\n            var seenPhones = new HashSet<string>(StringComparer.Ordinal);\n            var problemSamples = new List<CsvRowSampleDto>();\n\n            var rowsQuery = _db.CsvRows.AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n                .OrderBy(r => r.RowIndex)\n                .Select(r => new { r.RowIndex, r.DataJson });\n\n            await foreach (var row in rowsQuery.AsAsyncEnumerable().WithCancellation(ct))\n            {\n                var dict = SafeParseDict(row.DataJson);\n                dict.TryGetValue(phoneField, out var rawPhone);\n\n                var normalized = NormalizePhoneMaybe(rawPhone, request.NormalizePhones);\n\n                var isProblem = false;\n\n                if (string.IsNullOrWhiteSpace(normalized))\n                {\n                    result.MissingPhoneCount++;\n                    isProblem = true;\n                }\n                else if (request.Deduplicate && !seenPhones.Add(normalized))\n                {\n                    result.DuplicatePhoneCount++;\n                    isProblem = true;\n                }\n\n                if (isProblem && problemSamples.Count < request.SampleSize)\n                {\n                    problemSamples.Add(new CsvRowSampleDto\n                    {\n                        RowIndex = row.RowIndex,\n                        Data = dict\n                    });\n                }\n            }\n\n            result.ProblemSamples = problemSamples;\n\n            if (result.MissingPhoneCount > 0)\n                result.Errors.Add(\"Some rows are missing phone numbers.\");\n            if (result.DuplicatePhoneCount > 0)\n                result.Warnings.Add(\"Duplicate phone numbers detected (after normalization).\");\n\n            return result;\n        }\n\n        // ----------------------------\n        // helpers\n        // ----------------------------\n        private static List<string> SafeParseHeaderArray(string? json)\n        {\n            try\n            {\n                return string.IsNullOrWhiteSpace(json)\n                    ? new List<string>()\n                    : (JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>());\n            }\n            catch { return new List<string>(); }\n        }\n\n        private static Dictionary<string, string?> SafeParseDict(string? json)\n        {\n            try\n            {\n                return string.IsNullOrWhiteSpace(json)\n                    ? new Dictionary<string, string?>()\n                    : (JsonSerializer.Deserialize<Dictionary<string, string?>>(json) ??\n                       new Dictionary<string, string?>());\n            }\n            catch { return new Dictionary<string, string?>(); }\n        }\n\n        private static char DetectDelimiter(string headerLine)\n        {\n            var candidates = new[] { ',', ';', '\\t' };\n            var counts = candidates.Select(c => (c, count: headerLine.Count(ch => ch == c))).ToList();\n            var best = counts.OrderByDescending(x => x.count).First();\n            return best.count > 0 ? best.c : ',';\n        }\n\n        /// <summary>\n        /// CSV parser with delimiter support: handles commas/semicolons/tabs, double quotes,\n        /// and escaped quotes (\"\"). It does NOT support embedded newlines inside quoted fields.\n        /// </summary>\n        private static List<string> ParseCsvLine(string line, char delimiter)\n        {\n            var result = new List<string>();\n            if (line == null) return result;\n\n            var sb = new StringBuilder();\n            bool inQuotes = false;\n\n            for (int i = 0; i < line.Length; i++)\n            {\n                var c = line[i];\n\n                if (inQuotes)\n                {\n                    if (c == '\"')\n                    {\n                        // Handle escaped quote \"\"\n                        if (i + 1 < line.Length && line[i + 1] == '\"')\n                        {\n                            sb.Append('\"');\n                            i++;\n                        }\n                        else\n                        {\n                            inQuotes = false;\n                        }\n                    }\n                    else\n                    {\n                        sb.Append(c);\n                    }\n                }\n                else\n                {\n                    if (c == delimiter)\n                    {\n                        result.Add(sb.ToString());\n                        sb.Clear();\n                    }\n                    else if (c == '\"')\n                    {\n                        inQuotes = true;\n                    }\n                    else\n                    {\n                        sb.Append(c);\n                    }\n                }\n            }\n\n            result.Add(sb.ToString());\n            return result;\n        }\n\n        private static string? NormalizePhoneMaybe(string? raw, bool normalize)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var trimmed = raw.Trim();\n            if (!normalize) return trimmed;\n\n            var digits = Regex.Replace(trimmed, \"[^0-9]\", \"\");\n            digits = digits.TrimStart('0');\n\n            // Heuristic for India: add 91 for 10-digit local numbers\n            if (digits.Length == 10) digits = \"91\" + digits;\n\n            return digits.Length >= 10 ? digits : trimmed;\n        }\n    }\n}\n\n\n//using System;\n//using System.Collections.Generic;\n//using System.IO;\n//using System.Linq;\n//using System.Text;\n//using System.Text.Json;\n//using System.Text.RegularExpressions;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Serilog;\n//using xbytechat.api;\n//using xbytechat.api.Features.CampaignModule.DTOs;\n//using xbytechat.api.Features.CampaignModule.Models;\n\n//namespace xbytechat.api.Features.CampaignModule.Services\n//{\n//    public class CsvBatchService : ICsvBatchService\n//    {\n//        private readonly AppDbContext _db;\n\n//        public CsvBatchService(AppDbContext db)\n//        {\n//            _db = db;\n//        }\n\n//        // ----------------------------\n//        // Upload + ingest\n//        // ----------------------------\n//        public async Task<CsvBatchUploadResultDto> CreateAndIngestAsync(\n//             Guid businessId,\n//             string fileName,\n//             Stream stream,\n//             Guid? audienceId = null,\n//             CancellationToken ct = default)\n//        {\n//            // 1) Create batch shell\n//            var batch = new CsvBatch\n//            {\n//                Id = Guid.NewGuid(),\n//                BusinessId = businessId,\n//                AudienceId = audienceId,          // nullable by design (ok if null)\n//                FileName = fileName,\n//                CreatedAt = DateTime.UtcNow,\n//                Status = \"ingesting\",\n//                RowCount = 0,\n//                SkippedCount = 0,\n//                HeadersJson = null\n//            };\n\n//            _db.CsvBatches.Add(batch);\n//            await _db.SaveChangesAsync(ct);\n\n//            try\n//            {\n//                // 2) Parse headers + rows (minimal robust ingest; replace with your existing parser if present)\n//                //    Detect delimiter (very simple: try ',', then ';', then '\\t')\n//                stream.Position = 0;\n//                using var reader = new StreamReader(stream, Encoding.UTF8, detectEncodingFromByteOrderMarks: true, bufferSize: 1024, leaveOpen: true);\n\n//                string? headerLine = await reader.ReadLineAsync();\n//                if (string.IsNullOrWhiteSpace(headerLine))\n//                {\n//                    // No header line → write a single phone column as fallback so UI won’t explode\n//                    var headers = new List<string> { \"phone\" };\n//                    batch.HeadersJson = JsonSerializer.Serialize(headers);\n//                    batch.Status = \"ready\";\n//                    await _db.SaveChangesAsync(ct);\n\n//                    Log.Warning(\"CSV had no header line. Created batch {BatchId} with fallback 'phone' header.\", batch.Id);\n\n//                    return new CsvBatchUploadResultDto\n//                    {\n//                        BatchId = batch.Id,\n//                        AudienceId = batch.AudienceId,\n//                        FileName = batch.FileName ?? string.Empty,\n//                        RowCount = 0,\n//                        Headers = headers\n//                    };\n//                }\n\n//                char[] candidates = new[] { ',', ';', '\\t' };\n//                char delim = candidates.OrderByDescending(d => headerLine.Count(ch => ch == d)).First();\n\n//                var headersParsed = headerLine.Split(delim).Select(h => h.Trim()).Where(h => !string.IsNullOrEmpty(h)).ToList();\n//                if (headersParsed.Count == 0)\n//                {\n//                    headersParsed = new List<string> { \"phone\" };\n//                }\n\n//                batch.HeadersJson = JsonSerializer.Serialize(headersParsed);\n\n//                // 3) Stream rows into CsvRows (first 5k for now; adapt to your chunking if needed)\n//                //    If you already have a chunked/efficient parser in this class, call it instead.\n//                var rowsBuffer = new List<CsvRow>(capacity: 1024);\n//                int rowIndex = 0;\n\n//                while (!reader.EndOfStream)\n//                {\n//                    var line = await reader.ReadLineAsync();\n//                    if (line is null) break;\n//                    if (string.IsNullOrWhiteSpace(line)) continue;\n\n//                    var cols = line.Split(delim);\n\n//                    var dict = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);\n//                    for (int i = 0; i < headersParsed.Count; i++)\n//                    {\n//                        var key = headersParsed[i];\n//                        var val = i < cols.Length ? cols[i]?.Trim() : null;\n//                        dict[key] = val;\n//                    }\n\n//                    rowsBuffer.Add(new CsvRow\n//                    {\n//                        Id = Guid.NewGuid(),\n//                        BatchId = batch.Id,\n//                        RowIndex = rowIndex++,\n//                        DataJson = JsonSerializer.Serialize(dict)\n//                    });\n\n//                    // bulk flush in chunks\n//                    if (rowsBuffer.Count >= 1000)\n//                    {\n//                        _db.CsvRows.AddRange(rowsBuffer);\n//                        await _db.SaveChangesAsync(ct);\n//                        rowsBuffer.Clear();\n//                    }\n//                }\n\n//                if (rowsBuffer.Count > 0)\n//                {\n//                    _db.CsvRows.AddRange(rowsBuffer);\n//                    await _db.SaveChangesAsync(ct);\n//                    rowsBuffer.Clear();\n//                }\n\n//                batch.RowCount = rowIndex;\n//                batch.Status = \"ready\";\n//                await _db.SaveChangesAsync(ct);\n\n//                Log.Information(\"CsvBatch {BatchId} ingested: {Rows} rows; headers={HeaderCount}\", batch.Id, batch.RowCount, headersParsed.Count);\n\n//                return new CsvBatchUploadResultDto\n//                {\n//                    BatchId = batch.Id,\n//                    AudienceId = batch.AudienceId,\n//                    FileName = batch.FileName ?? string.Empty,\n//                    RowCount = batch.RowCount,\n//                    Headers = headersParsed\n//                };\n//            }\n//            catch (Exception ex)\n//            {\n//                batch.Status = \"failed\";\n//                batch.ErrorMessage = ex.Message;\n//                await _db.SaveChangesAsync(ct);\n//                Log.Error(ex, \"CSV ingest failed for batch {BatchId}\", batch.Id);\n//                throw;\n//            }\n//        }\n\n//        // ===========================================================================================\n\n//        // Your existing methods below…\n//        public async Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(\n//            Guid businessId,\n//            Guid batchId,\n//            int take = 20,\n//            CancellationToken ct = default)\n//        {\n//            // First ensure the batch exists and belongs to the tenant\n//            var batch = await _db.CsvBatches\n//                .AsNoTracking()\n//                .Where(b => b.Id == batchId && b.BusinessId == businessId)\n//                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })\n//                .FirstOrDefaultAsync(ct);\n\n//            if (batch is null)\n//                throw new KeyNotFoundException(\"Batch not found.\"); // 404 semantics in your middleware\n\n//            // If no rows yet, return empty samples gracefully (do NOT throw)\n//            if (batch.RowCount <= 0)\n//                return Array.Empty<CsvRowSampleDto>();\n\n//            var headers = (string[])(JsonSerializer.Deserialize<string[]>(batch.HeadersJson ?? \"[]\") ?? Array.Empty<string>());\n\n//            var rows = await _db.CsvRows\n//                .AsNoTracking()\n//                .Where(r => r.BatchId == batchId)\n//                .OrderBy(r => r.RowIndex)\n//                .Take(Math.Max(1, take))\n//                .Select(r => new { r.RowIndex, r.DataJson })\n//                .ToListAsync(ct);\n\n//            var result = new List<CsvRowSampleDto>(rows.Count);\n//            foreach (var r in rows)\n//            {\n//                var dict = JsonSerializer.Deserialize<Dictionary<string, string?>>(r.DataJson ?? \"{}\")\n//                           ?? new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);\n\n//                // Ensure all header keys exist\n//                foreach (var h in headers)\n//                    if (!dict.ContainsKey(h)) dict[h] = null;\n\n//                result.Add(new CsvRowSampleDto\n//                {\n//                    RowIndex = r.RowIndex,\n//                    Data = dict\n//                });\n//            }\n\n//            return result;\n//        }\n\n//        //private async Task<CsvBatchUploadResultDto> IngestCoreAsync(\n//        //    Guid businessId,\n//        //    string fileName,\n//        //    Stream stream,\n//        //    CancellationToken ct)\n//        //{\n//        //    // This method should match what you already implemented previously.\n//        //    // Below is a minimal skeleton to indicate intent.\n\n//        //    // 1) Create CsvBatch (BusinessId only)\n//        //    var batch = new CsvBatch\n//        //    {\n//        //        Id = Guid.NewGuid(),\n//        //        BusinessId = businessId,\n//        //        FileName = fileName,\n//        //        CreatedAt = DateTime.UtcNow,\n//        //        HeaderJson = null, // set after parsing\n//        //    };\n//        //    _db.CsvBatches.Add(batch);\n//        //    await _db.SaveChangesAsync(ct);\n\n//        //    // 2) Parse & store (re-use your existing parser util)\n//        //    // var (headers, rows) = await _yourParser.ParseAsync(stream, ct);\n//        //    // batch.HeaderJson = JsonSerializer.Serialize(headers);\n//        //    // await _db.SaveChangesAsync(ct);\n//        //    // await BulkInsertRowsAsync(batch.Id, rows, ct);\n\n//        //    // -- placeholder; call your real implementation here --\n//        //    Log.Information(\"CsvBatch {BatchId} ingested for business {Biz}\", batch.Id, businessId);\n\n//        //    // 3) Build DTO (AudienceId intentionally null)\n//        //    return new CsvBatchUploadResultDto\n//        //    {\n//        //        BatchId = batch.Id,\n//        //        AudienceId = null,\n//        //        FileName = fileName,\n//        //        // Headers = headers, Sample = first few rows, etc.\n//        //    };\n//        //}\n\n//        // ----------------------------\n//        // Batch info\n//        // ----------------------------\n\n//        private async Task<CsvBatchUploadResultDto> IngestCoreAsync(\n//            Guid businessId,\n//            string fileName,\n//            Stream stream,\n//            CancellationToken ct)\n//        {\n//            // 1) Create CsvBatch (BusinessId only) — audience-agnostic by design\n//            var batch = new CsvBatch\n//            {\n//                Id = Guid.NewGuid(),\n//                BusinessId = businessId,\n//                FileName = fileName,\n//                CreatedAt = DateTime.UtcNow,\n//                Status = \"ingesting\",     // optional: mark while parsing\n//                HeadersJson = null,       // <-- correct property name (plural)\n//                RowCount = 0,\n//                SkippedCount = 0,\n//                ErrorMessage = null\n//            };\n//            _db.CsvBatches.Add(batch);\n//            await _db.SaveChangesAsync(ct);\n\n//            // 2) Parse & store (re-use your existing parser / chunking logic)\n//            //    NOTE: Keep your existing implementation that detects delimiter,\n//            //    streams rows, and writes CsvRow(DataJson) in chunks.\n//            //\n//            // var (headers, rowsWritten, skipped) = await _yourParser.ParseAsync(batch.Id, stream, ct);\n//            // batch.HeadersJson = JsonSerializer.Serialize(headers);\n//            // batch.RowCount = rowsWritten;\n//            // batch.SkippedCount = skipped;\n\n//            // -- placeholder; call your real implementation above --\n//            Log.Information(\"CsvBatch {BatchId} staged for business {Biz}\", batch.Id, businessId);\n\n//            // Mark ready once parsing completes successfully\n//            batch.Status = \"ready\";\n//            await _db.SaveChangesAsync(ct);\n\n//            // 3) Build DTO (AudienceId intentionally null)\n//            return new CsvBatchUploadResultDto\n//            {\n//                BatchId = batch.Id,\n//                AudienceId = null,                 // by design\n//                RowCount = batch.RowCount,         // or rowsWritten if you have it\n//                Headers = /* headers != null ? headers.ToList() : */ new List<string>(),\n//                Message = \"CSV batch created.\"\n//            };\n//        }\n\n//        public async Task<CsvBatchInfoDto?> GetBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)\n//        {\n//            var batch = await _db.CsvBatches\n//                .AsNoTracking()\n//                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n\n//            if (batch == null) return null;\n\n//            var headers = SafeParseHeaderArray(batch.HeadersJson);\n\n//            return new CsvBatchInfoDto\n//            {\n//                BatchId = batch.Id,\n//                AudienceId = null, // see item #2 below\n//                RowCount = batch.RowCount,\n//                Headers = headers,\n//                CreatedAt = batch.CreatedAt\n//            };\n//        }\n\n//        // Kept (existing) — quick sample helper\n//        public async Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(Guid businessId, Guid batchId, int take = 20, CancellationToken ct = default)\n//        {\n//            if (take <= 0) take = 20;\n//            if (take > 100) take = 100;\n\n//            var headers = await _db.CsvBatches\n//                .AsNoTracking()\n//                .Where(b => b.Id == batchId && b.BusinessId == businessId)\n//                .Select(b => b.HeadersJson)\n//                .FirstOrDefaultAsync(ct);\n\n//            if (headers == null) throw new KeyNotFoundException(\"Batch not found.\");\n\n//            var headerList = SafeParseHeaderArray(headers);\n\n//            var rows = await _db.CsvRows\n//                .AsNoTracking()\n//                .Where(r => r.BatchId == batchId && r.BusinessId == businessId)\n//                .OrderBy(r => r.RowIndex)\n//                .Take(take)\n//                .Select(r => new { r.RowIndex, r.DataJson })\n//                .ToListAsync(ct);\n\n//            var result = new List<CsvRowSampleDto>(rows.Count);\n//            foreach (var r in rows)\n//            {\n//                var dict = SafeParseDict(r.DataJson);\n//                // Ensure consistent header order in sample (fill missing with null)\n//                var ordered = new Dictionary<string, string?>(headerList.Count, StringComparer.OrdinalIgnoreCase);\n//                foreach (var h in headerList)\n//                {\n//                    dict.TryGetValue(h, out var v);\n//                    ordered[h] = v;\n//                }\n\n//                result.Add(new CsvRowSampleDto\n//                {\n//                    RowIndex = r.RowIndex,\n//                    Data = ordered\n//                });\n//            }\n\n//            return result;\n//        }\n\n//        // ----------------------------\n//        // List / Page / Delete / Validate\n//        // ----------------------------\n//        public async Task<List<CsvBatchListItemDto>> ListBatchesAsync(Guid businessId, int limit = 20, CancellationToken ct = default)\n//        {\n//            if (limit <= 0) limit = 20;\n//            if (limit > 100) limit = 100;\n\n//            return await _db.CsvBatches\n//                .AsNoTracking()\n//                .Where(b => b.BusinessId == businessId)\n//                .OrderByDescending(b => b.CreatedAt)\n//                .Take(limit)\n//                .Select(b => new CsvBatchListItemDto\n//                {\n//                    BatchId = b.Id,\n//                    FileName = b.FileName,\n//                    RowCount = b.RowCount,\n//                    Status = b.Status,\n//                    CreatedAt = b.CreatedAt\n//                })\n//                .ToListAsync(ct);\n//        }\n\n//        public async Task<CsvBatchRowsPageDto> GetRowsPageAsync(Guid businessId, Guid batchId, int skip, int take, CancellationToken ct = default)\n//        {\n//            if (take <= 0) take = 50;\n//            if (take > 200) take = 200;\n//            if (skip < 0) skip = 0;\n\n//            var exists = await _db.CsvBatches.AsNoTracking()\n//                .AnyAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n//            if (!exists) throw new KeyNotFoundException(\"CSV batch not found.\");\n\n//            var total = await _db.CsvRows.AsNoTracking()\n//                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n//                .CountAsync(ct);\n\n//            var rows = await _db.CsvRows.AsNoTracking()\n//                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n//                .OrderBy(r => r.RowIndex)\n//                .Skip(skip)\n//                .Take(take)\n//                .Select(r => new CsvRowSampleDto\n//                {\n//                    RowIndex = r.RowIndex,\n//                    Data = SafeParseDict(r.DataJson)\n//                })\n//                .ToListAsync(ct);\n\n//            return new CsvBatchRowsPageDto\n//            {\n//                BatchId = batchId,\n//                TotalRows = total,\n//                Skip = skip,\n//                Take = take,\n//                Rows = rows\n//            };\n//        }\n\n//        public async Task<bool> DeleteBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default)\n//        {\n//            var batch = await _db.CsvBatches\n//                .FirstOrDefaultAsync(b => b.Id == batchId && b.BusinessId == businessId, ct);\n\n//            if (batch == null) return false;\n\n//            using var tx = await _db.Database.BeginTransactionAsync(ct);\n//            try\n//            {\n//                var rows = _db.CsvRows.Where(r => r.BusinessId == businessId && r.BatchId == batchId);\n//                _db.CsvRows.RemoveRange(rows);\n\n//                _db.CsvBatches.Remove(batch);\n\n//                await _db.SaveChangesAsync(ct);\n//                await tx.CommitAsync(ct);\n//                return true;\n//            }\n//            catch\n//            {\n//                await tx.RollbackAsync(ct);\n//                throw;\n//            }\n//        }\n\n//        private static readonly string[] PhoneHeaderCandidates =\n//            { \"phone\", \"mobile\", \"whatsapp\", \"msisdn\", \"whatsapp_number\", \"contact\", \"contact_number\" };\n\n//        public async Task<CsvBatchValidationResultDto> ValidateAsync(\n//            Guid businessId,\n//            Guid batchId,\n//            CsvBatchValidationRequestDto request,\n//            CancellationToken ct = default)\n//        {\n//            if (request is null) throw new ArgumentNullException(nameof(request));\n//            if (request.SampleSize <= 0) request.SampleSize = 20;\n//            if (request.SampleSize > 100) request.SampleSize = 100;\n\n//            var batch = await _db.CsvBatches.AsNoTracking()\n//                .Where(b => b.BusinessId == businessId && b.Id == batchId)\n//                .Select(b => new { b.Id, b.HeadersJson, b.RowCount })\n//                .FirstOrDefaultAsync(ct);\n\n//            if (batch == null) throw new KeyNotFoundException(\"CSV batch not found.\");\n\n//            var headers = SafeParseHeaderArray(batch.HeadersJson);\n//            var headerSet = new HashSet<string>(headers, StringComparer.OrdinalIgnoreCase);\n\n//            var result = new CsvBatchValidationResultDto\n//            {\n//                BatchId = batchId,\n//                TotalRows = batch.RowCount\n//            };\n\n//            // Required headers check\n//            if (request.RequiredHeaders != null && request.RequiredHeaders.Count > 0)\n//            {\n//                foreach (var req in request.RequiredHeaders)\n//                {\n//                    if (!headerSet.Contains(req))\n//                        result.MissingRequiredHeaders.Add(req);\n//                }\n\n//                if (result.MissingRequiredHeaders.Count > 0)\n//                    result.Errors.Add(\"Required headers are missing.\");\n//            }\n\n//            // Determine phone field\n//            var phoneField = request.PhoneField;\n//            if (string.IsNullOrWhiteSpace(phoneField))\n//                phoneField = PhoneHeaderCandidates.FirstOrDefault(headerSet.Contains);\n\n//            result.PhoneField = phoneField;\n\n//            if (string.IsNullOrWhiteSpace(phoneField))\n//            {\n//                result.Errors.Add(\"No phone field provided or detected.\");\n//                return result; // no row scan possible without a phone column\n//            }\n\n//            // Scan rows for phone presence & duplicates\n//            var seenPhones = new HashSet<string>(StringComparer.Ordinal);\n//            var problemSamples = new List<CsvRowSampleDto>();\n\n//            var rowsQuery = _db.CsvRows.AsNoTracking()\n//                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n//                .OrderBy(r => r.RowIndex)\n//                .Select(r => new { r.RowIndex, r.DataJson });\n\n//            await foreach (var row in rowsQuery.AsAsyncEnumerable().WithCancellation(ct))\n//            {\n//                var dict = SafeParseDict(row.DataJson);\n//                dict.TryGetValue(phoneField, out var rawPhone);\n\n//                var normalized = NormalizePhoneMaybe(rawPhone, request.NormalizePhones);\n\n//                var isProblem = false;\n\n//                if (string.IsNullOrWhiteSpace(normalized))\n//                {\n//                    result.MissingPhoneCount++;\n//                    isProblem = true;\n//                }\n//                else if (request.Deduplicate && !seenPhones.Add(normalized))\n//                {\n//                    result.DuplicatePhoneCount++;\n//                    isProblem = true;\n//                }\n\n//                if (isProblem && problemSamples.Count < request.SampleSize)\n//                {\n//                    problemSamples.Add(new CsvRowSampleDto\n//                    {\n//                        RowIndex = row.RowIndex,\n//                        Data = dict\n//                    });\n//                }\n//            }\n\n//            result.ProblemSamples = problemSamples;\n\n//            if (result.MissingPhoneCount > 0)\n//                result.Errors.Add(\"Some rows are missing phone numbers.\");\n//            if (result.DuplicatePhoneCount > 0)\n//                result.Warnings.Add(\"Duplicate phone numbers detected (after normalization).\");\n\n//            return result;\n//        }\n\n//        // ----------------------------\n//        // helpers\n//        // ----------------------------\n//        private static List<string> SafeParseHeaderArray(string? json)\n//        {\n//            try\n//            {\n//                return string.IsNullOrWhiteSpace(json)\n//                    ? new List<string>()\n//                    : (JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>());\n//            }\n//            catch { return new List<string>(); }\n//        }\n\n//        private static Dictionary<string, string?> SafeParseDict(string? json)\n//        {\n//            try\n//            {\n//                return string.IsNullOrWhiteSpace(json)\n//                    ? new Dictionary<string, string?>()\n//                    : (JsonSerializer.Deserialize<Dictionary<string, string?>>(json) ??\n//                       new Dictionary<string, string?>());\n//            }\n//            catch { return new Dictionary<string, string?>(); }\n//        }\n\n//        private static char DetectDelimiter(string headerLine)\n//        {\n//            var candidates = new[] { ',', ';', '\\t' };\n//            var counts = candidates.Select(c => (c, count: headerLine.Count(ch => ch == c))).ToList();\n//            var best = counts.OrderByDescending(x => x.count).First();\n//            return best.count > 0 ? best.c : ',';\n//        }\n\n//        /// <summary>\n//        /// CSV parser with delimiter support: handles commas/semicolons/tabs, double quotes,\n//        /// and escaped quotes (\"\"). It does NOT support embedded newlines inside quoted fields.\n//        /// </summary>\n//        private static List<string> ParseCsvLine(string line, char delimiter)\n//        {\n//            var result = new List<string>();\n//            if (line == null) return result;\n\n//            var sb = new StringBuilder();\n//            bool inQuotes = false;\n\n//            for (int i = 0; i < line.Length; i++)\n//            {\n//                var c = line[i];\n\n//                if (inQuotes)\n//                {\n//                    if (c == '\"')\n//                    {\n//                        // Handle escaped quote \"\"\n//                        if (i + 1 < line.Length && line[i + 1] == '\"')\n//                        {\n//                            sb.Append('\"');\n//                            i++;\n//                        }\n//                        else\n//                        {\n//                            inQuotes = false;\n//                        }\n//                    }\n//                    else\n//                    {\n//                        sb.Append(c);\n//                    }\n//                }\n//                else\n//                {\n//                    if (c == delimiter)\n//                    {\n//                        result.Add(sb.ToString());\n//                        sb.Clear();\n//                    }\n//                    else if (c == '\"')\n//                    {\n//                        inQuotes = true;\n//                    }\n//                    else\n//                    {\n//                        sb.Append(c);\n//                    }\n//                }\n//            }\n\n//            result.Add(sb.ToString());\n//            return result;\n//        }\n\n//        private static string? NormalizePhoneMaybe(string? raw, bool normalize)\n//        {\n//            if (string.IsNullOrWhiteSpace(raw)) return null;\n//            var trimmed = raw.Trim();\n//            if (!normalize) return trimmed;\n\n//            var digits = Regex.Replace(trimmed, \"[^0-9]\", \"\");\n//            digits = digits.TrimStart('0');\n\n//            // Heuristic for India: add 91 for 10-digit local numbers\n//            if (digits.Length == 10) digits = \"91\" + digits;\n\n//            return digits.Length >= 10 ? digits : trimmed;\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CsvExportService.cs",
      "sha256": "98366ed493eba2967478ea12bedd43b2d0c3a355667e89f23db3a6dd734554a9",
      "language": "csharp",
      "size": 7057,
      "content": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICsvExportService\n    {\n        Task<byte[]> BuildMaterializedCsvAsync(Guid businessId, Guid campaignId, int limit = 200, CancellationToken ct = default);\n        Task<byte[]> BuildDispatchPlanCsvAsync(Guid businessId, Guid campaignId, int limit = 2000, CancellationToken ct = default);\n    }\n\n    /// <summary>\n    /// Small CSV builder for exporting materialized rows and dispatch plans.\n    /// Uses UTF-8 with BOM for Excel friendliness. Escapes fields per RFC4180.\n    /// </summary>\n    public class CsvExportService : ICsvExportService\n    {\n        private readonly ICampaignMaterializationService _materializer;\n        private readonly ICampaignDispatchPlannerService _planner;\n\n        public CsvExportService(\n            ICampaignMaterializationService materializer,\n            ICampaignDispatchPlannerService planner)\n        {\n            _materializer = materializer;\n            _planner = planner;\n        }\n\n        public async Task<byte[]> BuildMaterializedCsvAsync(Guid businessId, Guid campaignId, int limit = 200, CancellationToken ct = default)\n        {\n            var data = await _materializer.MaterializeAsync(businessId, campaignId, limit, ct);\n\n            // Header is dynamic based on placeholder count and button count.\n            // Columns:\n            // RecipientId,ContactId,Phone,Param1..ParamN,Btn1Text,Btn1Url,...,Warnings,Errors\n            var maxParam = data.PlaceholderCount;\n            var maxButtons = data.Rows.Max(r => r.Buttons.Count);\n\n            var sb = new StringBuilder();\n            using var writer = new StringWriter(sb);\n\n            // Write header\n            writer.Write(\"RecipientId,ContactId,Phone\");\n            for (int i = 1; i <= maxParam; i++) writer.Write($\",Param{i}\");\n            for (int b = 1; b <= maxButtons; b++) writer.Write($\",Btn{b}Text,Btn{b}Url\");\n            writer.Write(\",Warnings,Errors\");\n            writer.WriteLine();\n\n            foreach (var row in data.Rows)\n            {\n                WriteCsv(writer, row.RecipientId?.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, row.ContactId?.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, row.Phone);\n\n                // Params 1..N (pad missing)\n                for (int i = 1; i <= maxParam; i++)\n                {\n                    writer.Write(\",\");\n                    var val = row.Parameters.FirstOrDefault(p => p.Index == i)?.Value;\n                    WriteCsv(writer, val);\n                }\n\n                // Buttons (pad missing)\n                for (int b = 0; b < maxButtons; b++)\n                {\n                    var btn = b < row.Buttons.Count ? row.Buttons[b] : null;\n                    writer.Write(\",\");\n                    WriteCsv(writer, btn?.ButtonText);\n                    writer.Write(\",\");\n                    WriteCsv(writer, btn?.ResolvedUrl);\n                }\n\n                writer.Write(\",\");\n                WriteCsv(writer, string.Join(\" | \", row.Warnings));\n                writer.Write(\",\");\n                WriteCsv(writer, string.Join(\" | \", row.Errors));\n                writer.WriteLine();\n            }\n\n            // Return as UTF-8 with BOM for Excel compatibility\n            var utf8withBom = new UTF8Encoding(encoderShouldEmitUTF8Identifier: true);\n            return utf8withBom.GetBytes(sb.ToString());\n        }\n\n        public async Task<byte[]> BuildDispatchPlanCsvAsync(Guid businessId, Guid campaignId, int limit = 2000, CancellationToken ct = default)\n        {\n            var plan = await _planner.PlanAsync(businessId, campaignId, limit, ct);\n\n            var sb = new StringBuilder();\n            using var writer = new StringWriter(sb);\n\n            // Plan metadata preface (comment-style rows start with '#')\n            writer.WriteLine($\"# CampaignId,{plan.CampaignId}\");\n            writer.WriteLine($\"# TemplateName,{Escape(plan.TemplateName)}\");\n            writer.WriteLine($\"# Language,{Escape(plan.Language)}\");\n            writer.WriteLine($\"# PlaceholderCount,{plan.PlaceholderCount}\");\n            writer.WriteLine($\"# TotalRecipients,{plan.TotalRecipients}\");\n            writer.WriteLine($\"# ProviderPlan,{Escape(plan.Throttle.Plan)}\");\n            writer.WriteLine($\"# Provider,{Escape(plan.Throttle.Provider)}\");\n            writer.WriteLine($\"# MaxBatchSize,{plan.Throttle.MaxBatchSize}\");\n            writer.WriteLine($\"# MaxPerMinute,{plan.Throttle.MaxPerMinute}\");\n            writer.WriteLine($\"# ComputedBatches,{plan.Throttle.ComputedBatches}\");\n            writer.WriteLine($\"# EstimatedMinutes,{plan.Throttle.EstimatedMinutes}\");\n            if (plan.GlobalWarnings.Any())\n                writer.WriteLine($\"# GlobalWarnings,{Escape(string.Join(\" | \", plan.GlobalWarnings))}\");\n            if (plan.Throttle.Warnings.Any())\n                writer.WriteLine($\"# ThrottleWarnings,{Escape(string.Join(\" | \", plan.Throttle.Warnings))}\");\n\n            writer.WriteLine(); // blank line\n\n            // Batches table header\n            writer.WriteLine(\"BatchNumber,OffsetSeconds,StartIndex,Count,ApproxBytes,Phones,RecipientIds,Notes\");\n\n            foreach (var b in plan.Batches)\n            {\n                WriteCsv(writer, b.BatchNumber.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, b.OffsetSeconds.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, b.StartIndex.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, b.Count.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, b.ApproxBytes.ToString());\n                writer.Write(\",\");\n                WriteCsv(writer, string.Join(\" \", b.Phones.Select(p => p ?? \"\")));\n                writer.Write(\",\");\n                WriteCsv(writer, string.Join(\" \", b.RecipientIds.Select(id => id?.ToString() ?? \"\")));\n                writer.Write(\",\");\n                WriteCsv(writer, string.Join(\" | \", b.Notes));\n                writer.WriteLine();\n            }\n\n            var utf8withBom = new UTF8Encoding(encoderShouldEmitUTF8Identifier: true);\n            return utf8withBom.GetBytes(sb.ToString());\n        }\n\n        private static void WriteCsv(TextWriter writer, string? value)\n        {\n            writer.Write(Escape(value ?? \"\"));\n        }\n\n        private static string Escape(string input)\n        {\n            // RFC4180-style: quote if contains comma, quote or newline; escape quotes by doubling\n            var needsQuote = input.Contains(',') || input.Contains('\"') || input.Contains('\\n') || input.Contains('\\r');\n            if (!needsQuote) return input;\n            return $\"\\\"{input.Replace(\"\\\"\", \"\\\"\\\"\")}\\\"\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignDispatcher.cs",
      "sha256": "7ea08b6385a5f9c2861a417d0ba9ed59f386c613614b462ffbaa53ace5cb56e8",
      "language": "csharp",
      "size": 652,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignDispatcher\n    {\n        /// <summary>\n        /// mode: \"canary\" (use count) or \"full\" (ignore count, select all ready).\n        /// count: when mode=canary, number of recipients to enqueue (default 25).\n        /// </summary>\n        Task<CampaignDispatchResponseDto> DispatchAsync(\n            Guid businessId,\n            Guid campaignId,\n            string mode,\n            int count,\n            CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignDryRunService.cs",
      "sha256": "8ee4671e2a7d2ac659e127e72121295904129c5d31e82fad35401dc50f10a717",
      "language": "csharp",
      "size": 662,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Validates a campaign for send safety without actually sending any message.\n    /// </summary>\n    public interface ICampaignDryRunService\n    {\n        /// <summary>\n        /// Run dry-run validation for a campaign. Should not mutate state.\n        /// </summary>\n        Task<CampaignDryRunResultDto> ValidateAsync(\n            Guid businessId,\n            Guid campaignId,\n            int limit = 200,\n            CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignMaterializationService.cs",
      "sha256": "45174c0e9b318f8f145ffd682ecf042a166872989ec0a9637342c3fe47d8fa6d",
      "language": "csharp",
      "size": 358,
      "content": "using xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignMaterializationService\n    {\n        Task<CampaignMaterializeResultDto> MaterializeAsync(\n        Guid businessId,\n        Guid campaignId,\n        int limit = 200,\n            CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignMaterializer.cs",
      "sha256": "dba2b5d0e2d4d8e08bc87cc00a353a7636cb5dc7f30e4f1af1620c0b1ba69cde",
      "language": "csharp",
      "size": 434,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignMaterializer\n    {\n        Task<CampaignCsvMaterializeResponseDto> CreateAsync(\n       Guid businessId,\n       Guid campaignId,\n       CampaignCsvMaterializeRequestDto request,\n       CancellationToken ct = default);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignRecipientService.cs",
      "sha256": "a2bb5bdb9f8a87dc2436bac017a79dc02ec48bdc1fd425cb6c701807234d4dd3",
      "language": "csharp",
      "size": 729,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignRecipientService\n    {\n        Task<CampaignRecipientDto> GetByIdAsync(Guid id);\n        Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId);\n\n        Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus);\n        Task<bool> TrackReplyAsync(Guid recipientId, string replyText);\n        Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null);\n\n        Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignRetryService.cs",
      "sha256": "77b2d8c8b67c691891ba7e6e1b014af847932714edcd60acfd419c092aa3c4bc",
      "language": "csharp",
      "size": 274,
      "content": "using xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignRetryService\n    {\n        Task<CampaignRetryResultDto> RetryFailedAsync(Guid businessId, Guid campaignId, int limit = 200);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignService.cs",
      "sha256": "a0f11b350934aa6e618db54ddae6bf6b6238b35c9135a56d913cf9302a5263f6",
      "language": "csharp",
      "size": 2450,
      "content": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignService\n    {\n        /// 🆕 Create a new campaign with recipients\n        Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy);\n\n        /// ✏️ Update an existing draft campaign\n        Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto);\n\n        /// 🗑️ Soft-delete a draft campaign\n        Task<bool> DeleteCampaignAsync(Guid id);\n\n        /// 📋 Get all campaigns for the business\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId);\n\n        /// 📄 Get paginated campaigns\n        Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request);\n        /// 🚀 Trigger campaign send flow (template message to all recipients)\n        Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent);\n        Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy);\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null);\n        Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId);\n        Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds);\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign);\n        Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign);\n\n        Task<List<FlowListItemDto>> GetAvailableFlowsAsync(Guid businessId, bool onlyPublished = true);\n\n        Task<CampaignDryRunResponseDto> DryRunTemplateCampaignAsync(Guid campaignId, int maxRecipients = 20);\n        Task<object> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICsvBatchService.cs",
      "sha256": "8f508ac0d6516126de4a02a11af6466f8dc7a0250850200199944f3ca401c41d",
      "language": "csharp",
      "size": 1283,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICsvBatchService\n    {\n        Task<CsvBatchUploadResultDto> CreateAndIngestAsync(\n            Guid businessId,\n            string fileName,\n            Stream stream,\n            Guid? audienceId = null,\n            CancellationToken ct = default\n        );\n\n        Task<CsvBatchInfoDto?> GetBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default);\n        Task<IReadOnlyList<CsvRowSampleDto>> GetSamplesAsync(Guid businessId, Guid batchId, int take = 20, CancellationToken ct = default);\n        Task<CsvBatchValidationResultDto> ValidateAsync(Guid businessId, Guid batchId, CsvBatchValidationRequestDto request, CancellationToken ct = default);\n        Task<List<CsvBatchListItemDto>> ListBatchesAsync(Guid businessId, int limit = 20, CancellationToken ct = default);\n        Task<CsvBatchRowsPageDto> GetRowsPageAsync(Guid businessId, Guid batchId, int skip, int take, CancellationToken ct = default);\n        Task<bool> DeleteBatchAsync(Guid businessId, Guid batchId, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/IMappingSuggestionService.cs",
      "sha256": "010ea9f12699609fa3addd18141bfba7bcf3ec585a43200b86cf3a2f8f0ef038",
      "language": "csharp",
      "size": 641,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Suggests a token->source mapping (\"csv:Header\" or \"static:\") given a campaign and CSV batch.\n    /// Uses Campaign.TemplateParameters if present; otherwise derives tokens from CSV headers.\n    /// </summary>\n    public interface IMappingSuggestionService\n    {\n        Task<Dictionary<string, string>> SuggestAsync(\n            Guid businessId,\n            Guid campaignId,\n            Guid batchId,\n            CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/Interface.cs",
      "sha256": "b499bed78d394052736ab9f463d1f5737462a52f755329e27050b2f72a1b846c",
      "language": "csharp",
      "size": 104,
      "content": "namespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface Interface\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/IOutboundCampaignQueueService.cs",
      "sha256": "a085fb2166af4a18a8f3499aa61280313e0c0dbd358fbaa54eb9562e8337fc80",
      "language": "csharp",
      "size": 1044,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.Queueing.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface IOutboundCampaignQueueService\n    {\n        Task<Guid> EnqueueAsync(Guid businessId, Guid campaignId, bool forceDuplicate = false);\n        Task<bool> MarkSucceededAsync(Guid jobId);\n        Task<bool> MarkFailedAsync(Guid jobId, string error, bool scheduleRetry = true);\n\n        Task<List<OutboundCampaignJob>> GetJobsForCampaignAsync(Guid businessId, Guid campaignId);\n        Task<OutboundCampaignJob?> GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId);\n        Task<bool> CancelAsync(Guid businessId, Guid jobId);     // set to \"canceled\" (if queued/running)\n        Task<bool> ForceRetryNowAsync(Guid businessId, Guid jobId); // set to \"queued\", NextAttemptAt=now (no attempt++)\n        Task<int> EnqueueBulkAsync(IEnumerable<OutboundCampaignJobCreateDto> jobs, CancellationToken ct = default);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/IVariableMappingService.cs",
      "sha256": "dcf57112809de6e4dc9c3b7957cc9d591c65cace2d51cd24fc0795b6b12b8c5a",
      "language": "csharp",
      "size": 992,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Loads saved variable mappings for a campaign (e.g., token -> CSV header or \"constant:...\").\n    /// Current project does not require this to complete 2.4; this is a seam for future use.\n    /// </summary>\n    public interface IVariableMappingService\n    {\n        /// <returns>\n        /// Dictionary mapping variable token -> source (CSV header name or \"constant:Value\").\n        /// Return an empty dictionary when nothing is saved.\n        /// </returns>\n        Task<Dictionary<string, string>> GetForCampaignAsync(\n            Guid businessId,\n            Guid campaignId,\n            CancellationToken ct = default);\n        Task SaveAsync(\n           Guid businessId,\n           Guid campaignId,\n           Dictionary<string, string> mappings,\n           CancellationToken ct = default);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/MappingSuggestionService.cs",
      "sha256": "e6a82a860c5406f0e22ef3c89577a8c06081e49d21add5f9bc6682c0dc974dd3",
      "language": "csharp",
      "size": 5965,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Heuristics:\n    /// - If Campaign.TemplateParameters is a JSON array of tokens, suggest for those tokens.\n    /// - Else, derive tokens by normalizing CSV headers (lowercase, alnum only, '_' joined).\n    /// - Match by normalized equality/contains; special-case phone names.\n    /// - Unmatched tokens get \"static:\" so UI shows a clear placeholder.\n    /// </summary>\n    public sealed class MappingSuggestionService : IMappingSuggestionService\n    {\n        private readonly AppDbContext _db;\n\n        private static readonly string[] PhoneHeaderCandidates =\n        {\n            \"phone\", \"mobile\", \"whatsapp\", \"msisdn\", \"whatsapp_number\", \"contact\", \"contact_number\"\n        };\n\n        public MappingSuggestionService(AppDbContext db) => _db = db;\n\n        public async Task<Dictionary<string, string>> SuggestAsync(\n            Guid businessId,\n            Guid campaignId,\n            Guid batchId,\n            CancellationToken ct = default)\n        {\n            // Load campaign to read TemplateParameters (if present)\n            var campaign = await _db.Campaigns.AsNoTracking()\n                .Where(c => c.Id == campaignId && c.BusinessId == businessId)\n                .Select(c => new { c.Id, c.BusinessId, c.TemplateParameters })\n                .FirstOrDefaultAsync(ct);\n\n            if (campaign == null) throw new KeyNotFoundException(\"Campaign not found.\");\n\n            // Load batch headers\n            var batch = await _db.CsvBatches.AsNoTracking()\n                .Where(b => b.Id == batchId && b.BusinessId == businessId)\n                .Select(b => new { b.HeadersJson })\n                .FirstOrDefaultAsync(ct);\n\n            if (batch == null) throw new KeyNotFoundException(\"CSV batch not found.\");\n\n            var headers = ParseHeaders(batch.HeadersJson);\n            var normHeaders = headers.ToDictionary(h => Normalize(h), h => h, StringComparer.OrdinalIgnoreCase);\n\n            // Determine tokens\n            var tokens = ParseTemplateTokens(campaign.TemplateParameters);\n            if (tokens.Count == 0)\n            {\n                // Fall back: derive tokens directly from headers\n                tokens = headers.Select(Normalize).Where(s => !string.IsNullOrWhiteSpace(s)).Distinct(StringComparer.OrdinalIgnoreCase).ToList();\n            }\n\n            // Suggestion: token -> source\n            var suggestions = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n\n            foreach (var token in tokens)\n            {\n                var normToken = Normalize(token);\n\n                // 1) direct equality with header\n                if (normHeaders.TryGetValue(normToken, out var exactHeader))\n                {\n                    suggestions[token] = $\"csv:{exactHeader}\";\n                    continue;\n                }\n\n                // 2) phone special-case\n                if (IsPhoneToken(normToken))\n                {\n                    var headerPick = headers.FirstOrDefault(h => PhoneHeaderCandidates.Contains(Normalize(h)));\n                    if (!string.IsNullOrEmpty(headerPick))\n                    {\n                        suggestions[token] = $\"csv:{headerPick}\";\n                        continue;\n                    }\n                }\n\n                // 3) contains / fuzzy-lite\n                var contains = headers.FirstOrDefault(h => Normalize(h).Contains(normToken, StringComparison.OrdinalIgnoreCase));\n                if (!string.IsNullOrEmpty(contains))\n                {\n                    suggestions[token] = $\"csv:{contains}\";\n                    continue;\n                }\n\n                // 4) default: static placeholder (UI can highlight to user)\n                suggestions[token] = \"static:\";\n            }\n\n            return suggestions;\n        }\n\n        private static List<string> ParseHeaders(string? headersJson)\n        {\n            if (string.IsNullOrWhiteSpace(headersJson)) return new List<string>();\n            try\n            {\n                var arr = JsonSerializer.Deserialize<List<string>>(headersJson);\n                return arr?.Where(h => !string.IsNullOrWhiteSpace(h)).ToList() ?? new List<string>();\n            }\n            catch\n            {\n                // Fallback: maybe comma-separated\n                return headersJson.Split(',').Select(s => s.Trim()).Where(s => s.Length > 0).ToList();\n            }\n        }\n\n        private static List<string> ParseTemplateTokens(string? templateParametersJson)\n        {\n            if (string.IsNullOrWhiteSpace(templateParametersJson)) return new List<string>();\n            try\n            {\n                var arr = JsonSerializer.Deserialize<List<string>>(templateParametersJson);\n                return arr?.Where(t => !string.IsNullOrWhiteSpace(t)).ToList() ?? new List<string>();\n            }\n            catch\n            {\n                return new List<string>();\n            }\n        }\n\n        private static bool IsPhoneToken(string normToken)\n        {\n            if (string.IsNullOrWhiteSpace(normToken)) return false;\n            if (PhoneHeaderCandidates.Contains(normToken)) return true;\n            return normToken.Contains(\"phone\") || normToken.Contains(\"mobile\") || normToken.Contains(\"whatsapp\");\n        }\n\n        private static string Normalize(string s)\n        {\n            var lowered = (s ?? \"\").Trim().ToLowerInvariant();\n            if (lowered.Length == 0) return lowered;\n            var alnum = Regex.Replace(lowered, @\"[^a-z0-9]+\", \"_\");\n            alnum = Regex.Replace(alnum, \"_{2,}\", \"_\").Trim('_');\n            return alnum;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/NoopOutboundCampaignQueueService.cs",
      "sha256": "65d4579de7471d6bc130a5c534b4c78a34e4486be9a602bd1c493bdc47dce86b",
      "language": "csharp",
      "size": 3579,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;     // OutboundCampaignJobDto\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignModule.Services; // IOutboundCampaignQueueService\nusing xbytechat.api.Features.Queueing.DTOs;           // OutboundCampaignJobCreateDto\n\nnamespace xbytechat.api.Features.Queueing.Services\n{\n    /// <summary>\n    /// No-op queue adapter so the dispatcher compiles & runs. Swap for a real queue later.\n    /// </summary>\n    public sealed class NoopOutboundCampaignQueueService : IOutboundCampaignQueueService\n    {\n        public Task<Guid> EnqueueAsync(Guid businessId, Guid campaignId, bool forceDuplicate = false)\n        {\n            var id = Guid.NewGuid();\n            Log.Information(\"Noop queue: EnqueueAsync business={BusinessId} campaign={CampaignId} forceDup={Force} -> {JobId}\",\n                businessId, campaignId, forceDuplicate, id);\n            return Task.FromResult(id);\n        }\n\n        public Task<bool> MarkSucceededAsync(Guid jobId)\n        {\n            Log.Information(\"Noop queue: MarkSucceededAsync job={JobId}\", jobId);\n            return Task.FromResult(true);\n        }\n\n        public Task<bool> MarkFailedAsync(Guid jobId, string error, bool scheduleRetry = true)\n        {\n            Log.Warning(\"Noop queue: MarkFailedAsync job={JobId} retry={Retry} error={Error}\",\n                jobId, scheduleRetry, error);\n            return Task.FromResult(true);\n        }\n\n        public Task<List<OutboundCampaignJobDto>> GetJobsForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            Log.Information(\"Noop queue: GetJobsForCampaignAsync business={BusinessId} campaign={CampaignId}\",\n                businessId, campaignId);\n            return Task.FromResult(new List<OutboundCampaignJobDto>());\n        }\n\n        public Task<OutboundCampaignJobDto?> GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            Log.Information(\"Noop queue: GetActiveJobForCampaignAsync business={BusinessId} campaign={CampaignId}\",\n                businessId, campaignId);\n            return Task.FromResult<OutboundCampaignJobDto?>(null);\n        }\n\n        public Task<bool> CancelAsync(Guid businessId, Guid jobId)\n        {\n            Log.Information(\"Noop queue: CancelAsync business={BusinessId} job={JobId}\", businessId, jobId);\n            return Task.FromResult(true);\n        }\n\n        public Task<bool> ForceRetryNowAsync(Guid businessId, Guid jobId)\n        {\n            Log.Information(\"Noop queue: ForceRetryNowAsync business={BusinessId} job={JobId}\", businessId, jobId);\n            return Task.FromResult(true);\n        }\n\n        public Task<int> EnqueueBulkAsync(IEnumerable<OutboundCampaignJobCreateDto> jobs, CancellationToken ct = default)\n        {\n            var list = jobs?.ToList() ?? new List<OutboundCampaignJobCreateDto>();\n            Log.Information(\"Noop queue: EnqueueBulkAsync received {Count} jobs\", list.Count);\n            return Task.FromResult(list.Count);\n        }\n\n        Task<List<OutboundCampaignJob>> IOutboundCampaignQueueService.GetJobsForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            throw new NotImplementedException();\n        }\n\n        Task<OutboundCampaignJob?> IOutboundCampaignQueueService.GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/NoopVariableMappingService.cs",
      "sha256": "24a343d03f2ab867121a8ebfe09ebcf7672fb7a3261095b6dc2322633e1ae722",
      "language": "csharp",
      "size": 984,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Default stub: returns no saved mappings.\n    /// Swap this out later with a DB-backed implementation that reads CampaignVariableMap.\n    /// </summary>\n    public sealed class NoopVariableMappingService : IVariableMappingService\n    {\n        public Task<Dictionary<string, string>> GetForCampaignAsync(\n            Guid businessId,\n            Guid campaignId,\n            CancellationToken ct = default)\n        {\n            return Task.FromResult(new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase));\n        }\n\n        public Task SaveAsync(\n           Guid businessId,\n           Guid campaignId,\n           Dictionary<string, string> mappings,\n           CancellationToken ct = default)\n        {\n            // no-op\n            return Task.CompletedTask;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/OutboundCampaignQueueService.cs",
      "sha256": "b81f57bff9d0409d1f72e2347814800b56d2a94f6696ce7a5ae1500b38c9648b",
      "language": "csharp",
      "size": 8110,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;                       // <-- add\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.Queueing.DTOs;    // <-- add for OutboundCampaignJobCreateDto\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class OutboundCampaignQueueService : IOutboundCampaignQueueService\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<OutboundCampaignQueueService> _log;\n\n        public OutboundCampaignQueueService(AppDbContext db, ILogger<OutboundCampaignQueueService> log)\n        {\n            _db = db; _log = log;\n        }\n\n        public async Task<Guid> EnqueueAsync(Guid businessId, Guid campaignId, bool forceDuplicate = false)\n        {\n            if (!forceDuplicate)\n            {\n                var existing = await _db.OutboundCampaignJobs\n                    .Where(j => j.CampaignId == campaignId && (j.Status == \"queued\" || j.Status == \"running\"))\n                    .OrderByDescending(j => j.CreatedAt)\n                    .FirstOrDefaultAsync();\n\n                if (existing != null)\n                {\n                    var found = await _db.Campaigns\n                        .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n                    if (found != null && found.Status != \"Queued\")\n                    {\n                        found.Status = \"Queued\";\n                        found.UpdatedAt = DateTime.UtcNow;\n                        await _db.SaveChangesAsync();\n                    }\n\n                    _log.LogInformation(\"Campaign {CampaignId} already queued/running. Job={JobId}\", campaignId, existing.Id);\n                    return existing.Id;\n                }\n            }\n\n            var job = new OutboundCampaignJob\n            {\n                BusinessId = businessId,\n                CampaignId = campaignId,\n                Status = \"queued\",\n                Attempt = 0,\n                MaxAttempts = 5,\n                NextAttemptAt = DateTimeOffset.UtcNow\n            };\n\n            _db.OutboundCampaignJobs.Add(job);\n\n            var row = await _db.Campaigns\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (row != null)\n            {\n                row.Status = \"Queued\";\n                row.UpdatedAt = DateTime.UtcNow;\n            }\n\n            await _db.SaveChangesAsync();\n            return job.Id;\n        }\n\n        public async Task<bool> MarkSucceededAsync(Guid jobId)\n        {\n            var j = await _db.OutboundCampaignJobs.FindAsync(jobId);\n            if (j == null) return false;\n\n            j.Attempt += 1;\n            j.Status = \"succeeded\";\n            j.UpdatedAt = DateTime.UtcNow;\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> MarkFailedAsync(Guid jobId, string error, bool scheduleRetry = true)\n        {\n            var j = await _db.OutboundCampaignJobs.FindAsync(jobId);\n            if (j == null) return false;\n\n            j.Attempt += 1;\n            j.LastError = Truncate(error, 3900);\n            j.UpdatedAt = DateTime.UtcNow;\n\n            if (!scheduleRetry || j.Attempt >= j.MaxAttempts)\n            {\n                j.Status = \"failed\";\n            }\n            else\n            {\n                var backoff = j.Attempt switch\n                {\n                    1 => TimeSpan.FromMinutes(1),\n                    2 => TimeSpan.FromMinutes(5),\n                    3 => TimeSpan.FromMinutes(15),\n                    4 => TimeSpan.FromMinutes(60),\n                    _ => TimeSpan.FromMinutes(180)\n                };\n                j.Status = \"queued\";\n                j.NextAttemptAt = DateTimeOffset.UtcNow.Add(backoff);\n            }\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<List<OutboundCampaignJob>> GetJobsForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            return await _db.OutboundCampaignJobs\n                .Where(j => j.BusinessId == businessId && j.CampaignId == campaignId)\n                .OrderByDescending(j => j.CreatedAt)\n                .ToListAsync();\n        }\n\n        public async Task<OutboundCampaignJob?> GetActiveJobForCampaignAsync(Guid businessId, Guid campaignId)\n        {\n            return await _db.OutboundCampaignJobs\n                .Where(j => j.BusinessId == businessId && j.CampaignId == campaignId &&\n                            (j.Status == \"queued\" || j.Status == \"running\"))\n                .OrderBy(j => j.CreatedAt)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task<bool> CancelAsync(Guid businessId, Guid jobId)\n        {\n            var j = await _db.OutboundCampaignJobs.FirstOrDefaultAsync(x => x.Id == jobId && x.BusinessId == businessId);\n            if (j == null) return false;\n\n            if (j.Status == \"queued\" || j.Status == \"running\")\n            {\n                j.Status = \"canceled\";\n                j.UpdatedAt = DateTime.UtcNow;\n                await _db.SaveChangesAsync();\n\n                var campaign = await _db.Campaigns.FirstOrDefaultAsync(c => c.Id == j.CampaignId && c.BusinessId == businessId);\n                if (campaign != null)\n                {\n                    var hasActive = await _db.OutboundCampaignJobs.AnyAsync(x =>\n                        x.CampaignId == j.CampaignId &&\n                        x.BusinessId == businessId &&\n                        (x.Status == \"queued\" || x.Status == \"running\"));\n\n                    if (!hasActive && (campaign.Status == \"Queued\" || campaign.Status == \"Sending\"))\n                    {\n                        campaign.Status = \"Draft\";\n                        campaign.UpdatedAt = DateTime.UtcNow;\n                        await _db.SaveChangesAsync();\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        public async Task<bool> ForceRetryNowAsync(Guid businessId, Guid jobId)\n        {\n            var j = await _db.OutboundCampaignJobs.FirstOrDefaultAsync(x => x.Id == jobId && x.BusinessId == businessId);\n            if (j == null) return false;\n\n            j.Status = \"queued\";\n            j.NextAttemptAt = DateTimeOffset.UtcNow;\n            j.UpdatedAt = DateTime.UtcNow;\n\n            var campaign = await _db.Campaigns.FirstOrDefaultAsync(c => c.Id == j.CampaignId && c.BusinessId == businessId);\n            if (campaign != null && campaign.Status != \"Queued\")\n            {\n                campaign.Status = \"Queued\";\n                campaign.UpdatedAt = DateTime.UtcNow;\n            }\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        // NEW: bulk enqueue used by CampaignDispatcher\n        public Task<int> EnqueueBulkAsync(IEnumerable<OutboundCampaignJobCreateDto> jobs, CancellationToken ct = default)\n        {\n            // For now, just log & return a deduped count. Replace with real queue later.\n            var list = (jobs ?? Enumerable.Empty<OutboundCampaignJobCreateDto>()).ToList();\n\n            // Deduplicate by provided IdempotencyKey (or fallback to a stable composite)\n            var enqueuedCount = list\n                .GroupBy(j => string.IsNullOrWhiteSpace(j.IdempotencyKey)\n                                ? $\"{j.CampaignId}:{j.CampaignRecipientId}\"\n                                : j.IdempotencyKey)\n                .Count();\n\n            _log.LogInformation(\"Bulk enqueue requested: {Requested} jobs, deduped to {Enqueued}\",\n                list.Count, enqueuedCount);\n\n            // TODO: push to a real queue/bus and persist queue records as needed.\n            return Task.FromResult(enqueuedCount);\n        }\n\n        private static string Truncate(string s, int max) =>\n            string.IsNullOrEmpty(s) ? s : (s.Length <= max ? s : s.Substring(0, max));\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/OutboundCampaignSendWorker.cs",
      "sha256": "d43bb1f4903bda4bd3fdba0ecaca4610dcd6da68906ac1cfb90c57e3949cc5e6",
      "language": "csharp",
      "size": 5846,
      "content": "using System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    /// <summary>\n    /// Background worker that claims due jobs and invokes CampaignService to send.\n    /// Flips Campaign.Status for truthful UI: Queued -> Sending -> Sent / Queued / Failed\n    /// </summary>\n    public class OutboundCampaignSendWorker : BackgroundService\n    {\n        private readonly IServiceProvider _sp;\n        private readonly ILogger<OutboundCampaignSendWorker> _log;\n\n        // Simple global concurrency cap & polling cadence\n        private const int MaxParallel = 3;\n        private static readonly TimeSpan SweepEvery = TimeSpan.FromSeconds(10);\n\n        public OutboundCampaignSendWorker(IServiceProvider sp, ILogger<OutboundCampaignSendWorker> log)\n        {\n            _sp = sp; _log = log;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            await Task.Delay(TimeSpan.FromSeconds(5), stoppingToken);\n\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                try\n                {\n                    using var scope = _sp.CreateScope();\n                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    var now = DateTimeOffset.UtcNow;\n\n                    // Find up to MaxParallel due jobs\n                    var due = await db.OutboundCampaignJobs\n                        .Where(j => j.Status == \"queued\" && j.NextAttemptAt <= now)\n                        .OrderBy(j => j.NextAttemptAt)\n                        .ThenBy(j => j.CreatedAt)\n                        .Take(MaxParallel)\n                        .ToListAsync(stoppingToken);\n\n                    // Claim jobs (do NOT increment Attempt here)\n                    foreach (var job in due)\n                    {\n                        job.Status = \"running\";\n                        job.UpdatedAt = DateTime.UtcNow;\n                    }\n                    if (due.Count > 0)\n                        await db.SaveChangesAsync(stoppingToken);\n\n                    var tasks = due.Select(job => ProcessJobAsync(job.Id, stoppingToken)).ToArray();\n                    await Task.WhenAll(tasks);\n                }\n                catch (Exception ex)\n                {\n                    _log.LogWarning(ex, \"Send queue sweep failed\");\n                }\n\n                await Task.Delay(SweepEvery, stoppingToken);\n            }\n        }\n\n        private async Task ProcessJobAsync(Guid jobId, CancellationToken ct)\n        {\n            using var scope = _sp.CreateScope();\n            var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n            var queue = scope.ServiceProvider.GetRequiredService<IOutboundCampaignQueueService>();\n            var campaignService = scope.ServiceProvider.GetRequiredService<ICampaignService>();\n            var log = scope.ServiceProvider.GetRequiredService<ILogger<OutboundCampaignSendWorker>>();\n\n            var job = await db.OutboundCampaignJobs.FirstOrDefaultAsync(j => j.Id == jobId, ct);\n            if (job == null) return;\n\n            // Mark Campaign -> Sending\n            var campaign = await db.Campaigns\n                .FirstOrDefaultAsync(c => c.Id == job.CampaignId && c.BusinessId == job.BusinessId, ct);\n\n            if (campaign != null && campaign.Status != \"Sending\")\n            {\n                campaign.Status = \"Sending\";\n                campaign.UpdatedAt = DateTime.UtcNow;\n                await db.SaveChangesAsync(ct);\n            }\n\n            try\n            {\n                var result = await campaignService.SendTemplateCampaignWithTypeDetectionAsync(job.CampaignId);\n\n                if (result.Success)\n                {\n                    if (campaign != null)\n                    {\n                        campaign.Status = \"Sent\";\n                        campaign.UpdatedAt = DateTime.UtcNow;\n                        await db.SaveChangesAsync(ct);\n                    }\n\n                    await queue.MarkSucceededAsync(job.Id);\n                    log.LogInformation(\"Job {Job} succeeded for campaign {Campaign}\", jobId, job.CampaignId);\n                }\n                else\n                {\n                    // Compute whether we will retry BEFORE calling MarkFailed (Attempt not yet incremented)\n                    var willRetry = job.Attempt + 1 < job.MaxAttempts;\n\n                    if (campaign != null)\n                    {\n                        campaign.Status = willRetry ? \"Queued\" : \"Failed\";\n                        campaign.UpdatedAt = DateTime.UtcNow;\n                        await db.SaveChangesAsync(ct);\n                    }\n\n                    await queue.MarkFailedAsync(job.Id, result.Message ?? \"Unknown send error\", scheduleRetry: true);\n                    log.LogWarning(\"Job {Job} failed for campaign {Campaign}: {Msg}\", jobId, job.CampaignId, result.Message);\n                }\n            }\n            catch (Exception ex)\n            {\n                var willRetry = job.Attempt + 1 < job.MaxAttempts;\n\n                if (campaign != null)\n                {\n                    campaign.Status = willRetry ? \"Queued\" : \"Failed\";\n                    campaign.UpdatedAt = DateTime.UtcNow;\n                    await db.SaveChangesAsync(ct);\n                }\n\n                await queue.MarkFailedAsync(job.Id, ex.ToString(), scheduleRetry: true);\n                log.LogWarning(ex, \"Job {Job} exception for campaign {Campaign}\", jobId, job.CampaignId);\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Config/TrackingOptions.cs",
      "sha256": "76b42450eeb28f2d73ad6fc86ec956bc6e278f17ee17f5e517e0689e8a247483",
      "language": "csharp",
      "size": 337,
      "content": "// 📄 Features/CampaignTracking/Config/TrackingOptions.cs\nnamespace xbytechat.api.Features.CampaignTracking.Config\n{\n    public class TrackingOptions\n    {\n        public string BaseUrl { get; set; } = \"\";\n        public string Secret { get; set; } = \"\";\n        public TimeSpan TokenTtl { get; set; } = TimeSpan.FromDays(30);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignAnalyticsController.cs",
      "sha256": "7542c47e6bbe6d8117004542788bb0f078570eeae04c8045b385fc3b7eb5dde4",
      "language": "csharp",
      "size": 2494,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.CampaignTracking.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class CampaignAnalyticsController : BusinessControllerBase\n    {\n        private readonly ICampaignAnalyticsService _campaignAnalyticsService;\n        public CampaignAnalyticsController(ICampaignAnalyticsService svc) => _campaignAnalyticsService = svc;\n\n        [HttpGet(\"top-campaigns\")]\n        public async Task<IActionResult> GetTopCampaigns([FromQuery] int count = 5)\n            => Ok(await _campaignAnalyticsService.GetTopCampaignsAsync(BusinessId, count));\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using System.Security.Claims;\n//using xbytechat.api.Features.CampaignTracking.Services;\n\n//namespace xbytechat.api.Features.CampaignTracking.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    [Authorize]\n//    public class CampaignAnalyticsController : ControllerBase\n//    {\n//        private readonly ICampaignAnalyticsService _campaignAnalyticsService;\n\n//        public CampaignAnalyticsController(ICampaignAnalyticsService campaignAnalyticsService)\n//        {\n//            _campaignAnalyticsService = campaignAnalyticsService;\n//        }\n\n//        [HttpGet(\"status-dashboard\")]\n//        //public async Task<IActionResult> GetStatusDashboard()\n//        //{\n//        //    var businessIdString = User.FindFirstValue(\"BusinessId\");\n//        //    if (!Guid.TryParse(businessIdString, out var businessId))\n//        //    {\n//        //        return Unauthorized(\"Invalid business identifier.\");\n//        //    }\n//        //    var result = await _campaignAnalyticsService.GetStatusDashboardAsync(businessId);\n//        //    return Ok(result);\n//        //}\n\n//        [HttpGet(\"top-campaigns\")]\n//        public async Task<IActionResult> GetTopCampaigns([FromQuery] int count = 5)\n//        {\n//            var businessIdString = User.FindFirstValue(\"BusinessId\");\n//            if (!Guid.TryParse(businessIdString, out var businessId))\n//            {\n//                return Unauthorized(\"Invalid business identifier.\");\n//            }\n//            var result = await _campaignAnalyticsService.GetTopCampaignsAsync(businessId, count);\n//            return Ok(result);\n//        }\n//    }\n//}"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignRetryController.cs",
      "sha256": "7fb4bd32c18410353886a39bebaf5c0c6e24ea48ce01a75d6bb0c553613438f8",
      "language": "csharp",
      "size": 1241,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Authorize] // ✅ add this\n    [Route(\"api/campaign-retry\")]\n    public class CampaignRetryController : ControllerBase\n    {\n        private readonly ICampaignTrackingRetryService _retryService;\n\n        public CampaignRetryController(ICampaignTrackingRetryService retryService)\n        {\n            _retryService = retryService;\n        }\n\n        [HttpPost(\"{logId}/retry\")]\n        public async Task<IActionResult> RetrySingle(Guid logId)\n        {\n            var success = await _retryService.RetrySingleAsync(logId);\n            if (!success) return BadRequest(new { message = \"Retry failed or not allowed for this log.\" });\n            return Ok(new { success = true, message = \"Retry completed.\" });\n        }\n\n        [HttpPost(\"campaign/{campaignId}/retry-all\")]\n        public async Task<IActionResult> RetryAllInCampaign(Guid campaignId)\n            => Ok(new { success = true, retriedCount = await _retryService.RetryFailedInCampaignAsync(campaignId) });\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignSendLogController.cs",
      "sha256": "95a189e3fdcff8f648aef7e688a3e3ee83fb7147e59f77d78259862f9b99d84b",
      "language": "csharp",
      "size": 4499,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaign-logs\")]\n    public class CampaignSendLogController : ControllerBase\n    {\n        private readonly ICampaignSendLogService _logService;\n        private readonly ICampaignTrackingRetryService _retryService;\n\n        public CampaignSendLogController(\n            ICampaignSendLogService logService,\n            ICampaignTrackingRetryService retryService\n        )\n        {\n            _logService = logService;\n            _retryService = retryService;\n        }\n\n        //[HttpGet(\"campaign/{campaignId}\")]\n        //public async Task<IActionResult> GetLogsByCampaign(Guid campaignId)\n        //{\n        //    var logs = await _logService.GetLogsByCampaignIdAsync(campaignId);\n        //    return Ok(logs);\n        //}\n        [HttpGet(\"campaign/{campaignId}\")]\n        public async Task<IActionResult> GetLogsByCampaign(\n         Guid campaignId,\n         [FromQuery] string? status,\n         [FromQuery] string? search,\n         [FromQuery] int page = 1,\n         [FromQuery] int pageSize = 10)\n        {\n            var result = await _logService.GetLogsByCampaignIdAsync(campaignId, status, search, page, pageSize);\n            return Ok(result);\n        }\n        [HttpGet(\"campaign/{campaignId}/contact/{contactId}\")]\n        public async Task<IActionResult> GetLogsForContact(Guid campaignId, Guid contactId)\n        {\n            var logs = await _logService.GetLogsForContactAsync(campaignId, contactId);\n            return Ok(logs);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddSendLog([FromBody] CampaignSendLogDto dto)\n        {\n            var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n            var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n            var result = await _logService.AddSendLogAsync(dto, ipAddress, userAgent);\n            if (!result)\n                return BadRequest(new { message = \"Failed to add send log\" });\n\n            return Ok(new { success = true });\n        }\n\n        [HttpPut(\"{logId}/status\")]\n        public async Task<IActionResult> UpdateDeliveryStatus(Guid logId, [FromBody] DeliveryStatusUpdateDto dto)\n        {\n            var result = await _logService.UpdateDeliveryStatusAsync(logId, dto.Status, dto.DeliveredAt, dto.ReadAt);\n            if (!result)\n                return NotFound(new { message = \"Log not found\" });\n\n            return Ok(new { success = true });\n        }\n\n        [HttpPut(\"{logId}/track-click\")]\n        public async Task<IActionResult> TrackClick(Guid logId, [FromBody] ClickTrackDto dto)\n        {\n            var result = await _logService.TrackClickAsync(logId, dto.ClickType);\n            if (!result)\n                return NotFound(new { message = \"Log not found\" });\n\n            return Ok(new { success = true });\n        }\n\n        // ✅ FIXED: Retry a single log using correct interface method\n        [HttpPost(\"{logId}/retry\")]\n        public async Task<IActionResult> RetrySingle(Guid logId)\n        {\n            var result = await _retryService.RetrySingleAsync(logId);\n            if (!result)\n                return BadRequest(new { message = \"Retry failed\" });\n\n            return Ok(new { success = true });\n        }\n\n        // ✅ FIXED: Retry all failed logs using correct interface method\n        [HttpPost(\"campaign/{campaignId}/retry-all\")]\n        public async Task<IActionResult> RetryAll(Guid campaignId)\n        {\n            var result = await _retryService.RetryFailedInCampaignAsync(campaignId);\n            return Ok(new { success = true, retried = result });\n        }\n        // ✅ FIXED: Get summary of campaign logs as per Campaign ID\n        [HttpGet(\"campaign/{campaignId}/summary\")]\n        public async Task<IActionResult> GetCampaignSummary(Guid campaignId)\n        {\n            var summary = await _logService.GetCampaignSummaryAsync(campaignId);\n            return Ok(summary);\n        }\n\n    }\n\n    public class DeliveryStatusUpdateDto\n    {\n        public string Status { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n    }\n\n    public class ClickTrackDto\n    {\n        public string ClickType { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignTrackingController.cs",
      "sha256": "1e3e2b1e60144ec933cafdb53414ae6fad20463810533d32b90327dba457fde6",
      "language": "csharp",
      "size": 25258,
      "content": "// 📄 Features/CampaignTracking/Controllers/CampaignTrackingController.cs\nusing System.Text.Encodings.Web;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignTracking.Services;\nusing xbytechat.api.Features.CampaignTracking.Worker;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"r\")] // /r/{token}\n    public class CampaignTrackingController : ControllerBase\n    {\n        private static readonly HtmlEncoder HtmlEnc = HtmlEncoder.Default;\n\n        private readonly ILogger<CampaignTrackingController> _log;\n        private readonly IClickTokenService _token;\n        private readonly IClickEventQueue _queue;\n        private readonly AppDbContext _db;\n\n        public CampaignTrackingController(\n            ILogger<CampaignTrackingController> log,\n            IClickTokenService token,\n            IClickEventQueue queue,\n            AppDbContext db)\n        {\n            _log = log;\n            _token = token;\n            _queue = queue;\n            _db = db;\n        }\n\n        //[HttpGet(\"{token}\")]\n        //[AllowAnonymous]\n        //public async Task<IActionResult> RedirectByToken([FromRoute] string token, CancellationToken ct)\n        //{\n        //    // 1) Validate token\n        //    if (!_token.TryValidate(token, out var p, out var reason))\n        //    {\n        //        _log.LogWarning(\"Tracking token rejected. reason={Reason}\", reason);\n        //        return BadRequest(\"Invalid token.\");\n        //    }\n\n        //    // 2) Normalize + classify destination\n        //    if (!TryNormalizeAllowedDestination(p!.to, out var safeDest, out var scheme))\n        //    {\n        //        _log.LogWarning(\"Rejected destination for cid {Cid}: {Dest}\", p.cid, p.to);\n        //        return BadRequest(\"Invalid destination.\");\n        //    }\n\n        //    // 3) Capture client info\n        //    var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"0.0.0.0\";\n        //    var ua = Request.Headers.UserAgent.ToString();\n        //    var now = DateTime.UtcNow;\n\n        //    // 4) Determine click type (web | call | whatsapp)\n        //    var clickType = ClassifyClickType(safeDest, scheme);\n\n        //    // 4.1) Fetch related ids from the send log (for ContactId & CampaignId)\n        //    Guid? contactId = null;\n        //    Guid campaignId = Guid.Empty;\n        //    try\n        //    {\n        //        var sendLog = await _db.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(x => x.Id == p.cid)\n        //            .Select(x => new { x.ContactId, x.CampaignId })\n        //            .FirstOrDefaultAsync(ct);\n\n        //        if (sendLog is not null)\n        //        {\n        //            contactId = sendLog.ContactId;\n        //            campaignId = sendLog.CampaignId;\n        //        }\n        //        else\n        //        {\n        //            _log.LogWarning(\"SendLog not found for click cid={Cid}\", p.cid);\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Failed to fetch ContactId/CampaignId for cid={Cid}\", p.cid);\n        //    }\n\n        //    // 5) Write-through (guaranteed persistence)\n        //    try\n        //    {\n        //        await _db.CampaignClickLogs.AddAsync(new CampaignClickLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            CampaignSendLogId = p.cid,\n        //            CampaignId = campaignId,        // <-- populated if available (else Guid.Empty)\n        //            ContactId = contactId,          // <-- populated if available (nullable)\n        //            ButtonIndex = p.bi,\n        //            ButtonTitle = p.bt,\n        //            Destination = safeDest,\n        //            ClickedAt = now,\n        //            Ip = ip,\n        //            UserAgent = ua,\n        //            ClickType = clickType,\n        //            RunId = csl?.RunId\n        //        }, ct);\n\n        //        await _db.SaveChangesAsync(ct);\n\n        //        _log.LogInformation(\n        //            \"CLICK WRITE-THROUGH cid={Cid} idx={Idx} type={Type} dest={Dest}\",\n        //            p.cid, p.bi, clickType, safeDest);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Write-through insert failed. cid={Cid}\", p.cid);\n        //    }\n\n        //    // 6) Enqueue for async worker (best effort) — keeps existing ClickEvent signature\n        //    try\n        //    {\n        //        var enq = _queue.TryWrite(new ClickEvent(\n        //            CampaignSendLogId: p.cid,\n        //            ButtonIndex: p.bi,\n        //            ButtonTitle: p.bt,\n        //            Destination: safeDest,\n        //            ClickedAtUtc: now,\n        //            Ip: ip,\n        //            UserAgent: ua,\n        //            ClickType: clickType\n        //        ));\n        //        _log.LogInformation(\"CLICK ENQUEUE cid={Cid} idx={Idx} enqueued={Enqueued}\", p.cid, p.bi, enq);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Queue write threw. cid={Cid}\", p.cid);\n        //    }\n\n        //    // 7) First-click fast path\n        //    try\n        //    {\n        //        await _db.Database.ExecuteSqlRawAsync(\n        //            @\"update \"\"CampaignSendLogs\"\"\n        //                set \"\"IsClicked\"\"=TRUE, \"\"ClickedAt\"\"=NOW() at time zone 'utc'\n        //              where \"\"Id\"\"={0} and \"\"IsClicked\"\"=FALSE;\",\n        //            p.cid);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogDebug(ex, \"First-click update skipped.\");\n        //    }\n\n        //    // 8) Redirect handling\n        //    if (clickType is \"call\" or \"whatsapp\")\n        //    {\n        //        // Deep link → return an HTML/JS shim to trigger immediately, with a safe fallback link.\n        //        var destHtml = HtmlEnc.Encode(safeDest);\n        //        var destJs = JsEscape(safeDest);\n\n        //        var html = $@\"<!doctype html>\n        //        <html lang=\"\"en\"\">\n        //        <head>\n        //          <meta charset=\"\"utf-8\"\">\n        //          <meta http-equiv=\"\"x-ua-compatible\"\" content=\"\"ie=edge\"\">\n        //          <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n        //          <meta http-equiv=\"\"refresh\"\" content=\"\"0;url={destHtml}\"\">\n        //          <title>Redirecting…</title>\n        //          <style>\n        //            body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;padding:24px;}}\n        //            a{{color:#2563eb;text-decoration:underline;}}\n        //          </style>\n        //          <script>\n        //            // Trigger deep link immediately; reveal fallback if blocked by the browser.\n        //            window.addEventListener('load', function() {{\n        //              try {{ window.location.replace('{destJs}'); }} catch (e) {{}}\n        //              setTimeout(function() {{\n        //                var f = document.getElementById('fallback');\n        //                if (f) f.style.display = 'inline';\n        //              }}, 1200);\n        //            }});\n        //          </script>\n        //        </head>\n        //        <body>\n        //          <p>Redirecting… If you are not redirected automatically, <a id=\"\"fallback\"\" style=\"\"display:none\"\" href=\"\"{destHtml}\"\">tap here</a>.</p>\n        //        </body>\n        //        </html>\";\n\n        //        Response.Headers[\"Cache-Control\"] = \"no-store, max-age=0\";\n        //        Response.Headers[\"Pragma\"] = \"no-cache\";\n        //        Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n        //        Response.Headers[\"Referrer-Policy\"] = \"no-referrer\";\n        //        Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n        //        Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n        //        Response.Headers[\"Content-Security-Policy\"] =\n        //            \"default-src 'none'; script-src 'unsafe-inline'; style-src 'unsafe-inline'; base-uri 'none'; frame-ancestors 'none'\";\n\n        //        return new ContentResult\n        //        {\n        //            Content = html,\n        //            ContentType = \"text/html; charset=utf-8\",\n        //            StatusCode = 200\n        //        };\n        //    }\n\n        //    // Regular web links → normal 302\n        //    return Redirect(safeDest);\n        //}\n\n        // --- helpers ---\n\n\n        //[HttpGet(\"{token}\")]\n        //[AllowAnonymous]\n\n\n        //[HttpGet(\"{token}\")]\n        //[AllowAnonymous]\n\n        [HttpGet(\"{token}\")]\n        [AllowAnonymous]\n        public async Task<IActionResult> RedirectByToken([FromRoute] string token, CancellationToken ct)\n        {\n            // 1) Validate token\n            if (!_token.TryValidate(token, out var p, out var reason))\n            {\n                _log.LogWarning(\"Tracking token rejected. reason={Reason}\", reason);\n                return BadRequest(\"Invalid token.\");\n            }\n\n            // 2) Normalize + classify destination\n            if (!TryNormalizeAllowedDestination(p!.to, out var safeDest, out var scheme))\n            {\n                _log.LogWarning(\"Rejected destination for cid {Cid}: {Dest}\", p.cid, p.to);\n                return BadRequest(\"Invalid destination.\");\n            }\n\n            // 3) Capture client info\n            var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"0.0.0.0\";\n            var ua = Request.Headers.UserAgent.ToString();\n            var now = DateTime.UtcNow;\n\n            // 4) Determine click type (web | call | whatsapp)\n            var clickType = ClassifyClickType(safeDest, scheme);\n\n            // 4.1) Fetch related ids from the send log (ContactId, CampaignId, RunId)\n            Guid? contactId = null;\n            Guid? campaignId = null;   // <- make this nullable\n            Guid? runId = null;\n\n            try\n            {\n                var sendLog = await _db.CampaignSendLogs\n                    .AsNoTracking()\n                    .Where(x => x.Id == p.cid)\n                    .Select(x => new { x.ContactId, x.CampaignId, x.RunId })\n                    .FirstOrDefaultAsync(ct);\n\n                if (sendLog is not null)\n                {\n                    contactId = sendLog.ContactId;   // Guid?\n                    campaignId = sendLog.CampaignId;  // Guid?\n                    runId = sendLog.RunId;       // Guid?\n                }\n                else\n                {\n                    _log.LogWarning(\"SendLog not found for click cid={Cid}\", p.cid);\n                }\n            }\n            catch (Exception ex)\n            {\n                _log.LogError(ex, \"Failed to fetch ContactId/CampaignId/RunId for cid={Cid}\", p.cid);\n            }\n\n            // 5) Write-through (guaranteed persistence)\n            try\n            {\n                await _db.CampaignClickLogs.AddAsync(new CampaignClickLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignSendLogId = p.cid,\n                    // If the column is NON-nullable, coalesce to Guid.Empty; if you've made it nullable, assign campaignId directly.\n                    CampaignId = campaignId ?? Guid.Empty,\n                    ContactId = contactId,    // nullable OK\n                    ButtonIndex = p.bi,\n                    ButtonTitle = p.bt,\n                    Destination = safeDest,\n                    ClickedAt = now,\n                    Ip = ip,\n                    UserAgent = ua,\n                    ClickType = clickType,\n                    RunId = runId\n                }, ct);\n\n                await _db.SaveChangesAsync(ct);\n\n                _log.LogInformation(\"CLICK WRITE-THROUGH cid={Cid} idx={Idx} type={Type} dest={Dest}\",\n                    p.cid, p.bi, clickType, safeDest);\n            }\n            catch (Exception ex)\n            {\n                _log.LogError(ex, \"Write-through insert failed. cid={Cid}\", p.cid);\n            }\n\n            // 6) Enqueue for async worker (best effort)\n            try\n            {\n                var enq = _queue.TryWrite(new ClickEvent(\n                    CampaignSendLogId: p.cid,\n                    ButtonIndex: p.bi,\n                    ButtonTitle: p.bt,\n                    Destination: safeDest,\n                    ClickedAtUtc: now,\n                    Ip: ip,\n                    UserAgent: ua,\n                    ClickType: clickType\n                ));\n                _log.LogInformation(\"CLICK ENQUEUE cid={Cid} idx={Idx} enqueued={Enqueued}\", p.cid, p.bi, enq);\n            }\n            catch (Exception ex)\n            {\n                _log.LogError(ex, \"Queue write threw. cid={Cid}\", p.cid);\n            }\n\n            // 7) First-click fast path\n            try\n            {\n                await _db.Database.ExecuteSqlRawAsync(\n                    @\"update \"\"CampaignSendLogs\"\"\n              set \"\"IsClicked\"\"=TRUE,\n                  \"\"ClickedAt\"\"=NOW() at time zone 'utc',\n                  \"\"ClickType\"\"={1}\n              where \"\"Id\"\"={0} and \"\"IsClicked\"\"=FALSE;\",\n                    p.cid, clickType);\n            }\n            catch (Exception ex)\n            {\n                _log.LogDebug(ex, \"First-click update skipped.\");\n            }\n\n            // 8) Redirect handling\n            if (clickType is \"call\" or \"whatsapp\")\n            {\n                // ... (unchanged deep-link HTML)\n            }\n\n            return Redirect(safeDest);\n        }\n\n        //public async Task<IActionResult> RedirectByToken([FromRoute] string token, CancellationToken ct)\n        //{\n        //    // 1) Validate token\n        //    if (!_token.TryValidate(token, out var p, out var reason))\n        //    {\n        //        _log.LogWarning(\"Tracking token rejected. reason={Reason}\", reason);\n        //        return BadRequest(\"Invalid token.\");\n        //    }\n\n        //    // 2) Normalize + classify destination\n        //    if (!TryNormalizeAllowedDestination(p!.to, out var safeDest, out var scheme))\n        //    {\n        //        _log.LogWarning(\"Rejected destination for cid {Cid}: {Dest}\", p.cid, p.to);\n        //        return BadRequest(\"Invalid destination.\");\n        //    }\n\n        //    // 3) Capture client info\n        //    var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"0.0.0.0\";\n        //    var ua = Request.Headers.UserAgent.ToString();\n        //    var now = DateTime.UtcNow;\n\n        //    // 4) Determine click type (web | call | whatsapp)\n        //    var clickType = ClassifyClickType(safeDest, scheme);\n\n        //    // 4.1) Fetch related ids from the send log (ContactId, CampaignId, **RunId**)\n        //    Guid? contactId = null;\n        //    Guid campaignId = Guid.Empty;\n        //    Guid? runId = null; // 👈 NEW\n\n        //    try\n        //    {\n        //        var sendLog = await _db.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(x => x.Id == p.cid)\n        //            .Select(x => new { x.ContactId, x.CampaignId, x.RunId })\n        //            .FirstOrDefaultAsync(ct);\n\n        //        if (sendLog is not null)\n        //        {\n        //            contactId = sendLog.ContactId;\n        //            campaignId = sendLog.CampaignId;\n        //            runId = sendLog.RunId; // 👈 carry through to click log\n        //        }\n        //        else\n        //        {\n        //            _log.LogWarning(\"SendLog not found for click cid={Cid}\", p.cid);\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Failed to fetch ContactId/CampaignId/RunId for cid={Cid}\", p.cid);\n        //    }\n\n        //    // 5) Write-through (guaranteed persistence)\n        //    try\n        //    {\n        //        await _db.CampaignClickLogs.AddAsync(new CampaignClickLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            CampaignSendLogId = p.cid,\n        //            CampaignId = campaignId,   // populated if available (else Guid.Empty)\n        //            ContactId = contactId,     // nullable\n        //            ButtonIndex = p.bi,\n        //            ButtonTitle = p.bt,\n        //            Destination = safeDest,\n        //            ClickedAt = now,\n        //            Ip = ip,\n        //            UserAgent = ua,\n        //            ClickType = clickType,\n        //            RunId = runId              // 👈 bind click to the same run/session\n        //        }, ct);\n\n        //        await _db.SaveChangesAsync(ct);\n\n        //        _log.LogInformation(\n        //            \"CLICK WRITE-THROUGH cid={Cid} idx={Idx} type={Type} dest={Dest}\",\n        //            p.cid, p.bi, clickType, safeDest);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Write-through insert failed. cid={Cid}\", p.cid);\n        //    }\n\n        //    // 6) Enqueue for async worker (best effort) — keeps existing ClickEvent signature\n        //    try\n        //    {\n        //        var enq = _queue.TryWrite(new ClickEvent(\n        //            CampaignSendLogId: p.cid,\n        //            ButtonIndex: p.bi,\n        //            ButtonTitle: p.bt,\n        //            Destination: safeDest,\n        //            ClickedAtUtc: now,\n        //            Ip: ip,\n        //            UserAgent: ua,\n        //            ClickType: clickType\n        //        ));\n        //        _log.LogInformation(\"CLICK ENQUEUE cid={Cid} idx={Idx} enqueued={Enqueued}\", p.cid, p.bi, enq);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Queue write threw. cid={Cid}\", p.cid);\n        //    }\n\n        //    // 7) First-click fast path (also writes ClickType)\n        //    try\n        //    {\n        //        await _db.Database.ExecuteSqlRawAsync(\n        //            @\"update \"\"CampaignSendLogs\"\"\n        //        set \"\"IsClicked\"\"=TRUE,\n        //            \"\"ClickedAt\"\"=NOW() at time zone 'utc',\n        //            \"\"ClickType\"\"={1}\n        //      where \"\"Id\"\"={0} and \"\"IsClicked\"\"=FALSE;\",\n        //            p.cid, clickType);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogDebug(ex, \"First-click update skipped.\");\n        //    }\n\n        //    // 8) Redirect handling\n        //    if (clickType is \"call\" or \"whatsapp\")\n        //    {\n        //        // Deep link → return an HTML/JS shim to trigger immediately, with a safe fallback link.\n        //        var destHtml = HtmlEnc.Encode(safeDest);\n        //        var destJs = JsEscape(safeDest);\n\n        //        var html = $@\"<!doctype html>\n        //                <html lang=\"\"en\"\">\n        //                <head>\n        //                  <meta charset=\"\"utf-8\"\">\n        //                  <meta http-equiv=\"\"x-ua-compatible\"\" content=\"\"ie=edge\"\">\n        //                  <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n        //                  <meta http-equiv=\"\"refresh\"\" content=\"\"0;url={destHtml}\"\">\n        //                  <title>Redirecting…</title>\n        //                  <style>\n        //                    body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;padding:24px;}}\n        //                    a{{color:#2563eb;text-decoration:underline;}}\n        //                  </style>\n        //                  <script>\n        //                    // Trigger deep link immediately; reveal fallback if blocked by the browser.\n        //                    window.addEventListener('load', function() {{\n        //                      try {{ window.location.replace('{destJs}'); }} catch (e) {{}}\n        //                      setTimeout(function() {{\n        //                        var f = document.getElementById('fallback');\n        //                        if (f) f.style.display = 'inline';\n        //                      }}, 1200);\n        //                    }});\n        //                  </script>\n        //                </head>\n        //                <body>\n        //                  <p>Redirecting… If you are not redirected automatically, <a id=\"\"fallback\"\" style=\"\"display:none\"\" href=\"\"{destHtml}\"\">tap here</a>.</p>\n        //                </body>\n        //                </html>\";\n\n        //        Response.Headers[\"Cache-Control\"] = \"no-store, max-age=0\";\n        //        Response.Headers[\"Pragma\"] = \"no-cache\";\n        //        Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n        //        Response.Headers[\"Referrer-Policy\"] = \"no-referrer\";\n        //        Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n        //        Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n        //        Response.Headers[\"Content-Security-Policy\"] =\n        //            \"default-src 'none'; script-src 'unsafe-inline'; style-src 'unsafe-inline'; base-uri 'none'; frame-ancestors 'none'\";\n\n        //        return new ContentResult\n        //        {\n        //            Content = html,\n        //            ContentType = \"text/html; charset=utf-8\",\n        //            StatusCode = 200\n        //        };\n        //    }\n\n        //    // Regular web links → normal 302\n        //    return Redirect(safeDest);\n        //}\n\n\n        private static string ClassifyClickType(string normalizedDest, string scheme)\n        {\n            // scheme is pre-normalized by TryNormalizeAllowedDestination\n            if (string.Equals(scheme, \"tel\", StringComparison.OrdinalIgnoreCase)) return \"call\";\n            if (string.Equals(scheme, \"wa\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n            if (string.Equals(scheme, \"whatsapp\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n\n            // http/https → still treat WhatsApp hosts as whatsapp\n            if (normalizedDest.StartsWith(\"https://wa.me/\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n            if (normalizedDest.StartsWith(\"https://api.whatsapp.com/\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n\n            return \"web\";\n        }\n\n        private static string JsEscape(string s) =>\n            s.Replace(\"\\\\\", \"\\\\\\\\\").Replace(\"'\", \"\\\\'\").Replace(\"\\r\", \"\").Replace(\"\\n\", \"\");\n\n        /// <summary>\n        /// Accepts: http/https/tel/wa/whatsapp, plus shorthand wa.me/... and api.whatsapp.com/...\n        /// Returns normalized absolute string and a normalized scheme hint (\"http\",\"https\",\"tel\",\"wa\",\"whatsapp\").\n        /// </summary>\n        private static bool TryNormalizeAllowedDestination(string? input, out string normalized, out string scheme)\n        {\n            normalized = string.Empty;\n            scheme = string.Empty;\n            if (string.IsNullOrWhiteSpace(input)) return false;\n\n            var cleaned = new string(input.Trim().Where(c => !char.IsControl(c)).ToArray());\n\n            // Shorthand WhatsApp hosts without scheme → prefix https://\n            if (!cleaned.Contains(\"://\", StringComparison.Ordinal))\n            {\n                if (cleaned.StartsWith(\"wa.me/\", StringComparison.OrdinalIgnoreCase) ||\n                    cleaned.StartsWith(\"api.whatsapp.com/\", StringComparison.OrdinalIgnoreCase))\n                {\n                    var guess = \"https://\" + cleaned;\n                    if (Uri.TryCreate(guess, UriKind.Absolute, out var waAbs))\n                    {\n                        normalized = waAbs.AbsoluteUri;\n                        scheme = \"https\";\n                        return true;\n                    }\n                }\n            }\n\n            // WhatsApp custom schemes (wa:, whatsapp:)\n            if (cleaned.StartsWith(\"wa:\", StringComparison.OrdinalIgnoreCase))\n            {\n                normalized = cleaned; scheme = \"wa\"; return true;\n            }\n            if (cleaned.StartsWith(\"whatsapp:\", StringComparison.OrdinalIgnoreCase))\n            {\n                normalized = cleaned; scheme = \"whatsapp\"; return true;\n            }\n\n            // Absolute URIs\n            if (Uri.TryCreate(cleaned, UriKind.Absolute, out var uri))\n            {\n                // tel:\n                if (uri.Scheme.Equals(\"tel\", StringComparison.OrdinalIgnoreCase))\n                {\n                    normalized = uri.ToString(); scheme = \"tel\"; return true;\n                }\n\n                // http/https (including WhatsApp hosts)\n                if (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase))\n                {\n                    normalized = uri.AbsoluteUri;\n                    scheme = uri.Scheme; // \"http\" or \"https\"\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignLogSummaryDto.cs",
      "sha256": "57aa29e375f6dda32b73602de1a84e9d5e89e3f8bf103914b21bfa14f0b786a9",
      "language": "csharp",
      "size": 415,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignLogSummaryDto\n    {\n        public int TotalSent { get; set; }\n        public int FailedCount { get; set; }\n        public int ClickedCount { get; set; }\n        public DateTime? LastSentAt { get; set; }\n\n        public int Delivered { get; set; }\n        public int Read { get; set; }\n        public int Sent { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignSendLogDto.cs",
      "sha256": "e4401d635c37b8b9990e5b0b8137ffe065550330c45ccf4638e336b803e6c5cf",
      "language": "csharp",
      "size": 1730,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignSendLogDto\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Relationships\n        public Guid CampaignId { get; set; }\n        public Guid? ContactId { get; set; }\n        public string ContactName { get; set; }\n        public string ContactPhone { get; set; }\n\n        public string? RecipientNumber { get; set; }\n        // 📤 Message Info\n        public Guid RecipientId { get; set; }\n        public string MessageBody { get; set; }\n        public string? TemplateId { get; set; }\n        public string? SendStatus { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        // 🕒 Timestamps\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // 🌐 Metadata\n        public string? SourceChannel { get; set; }\n        public string? IpAddress { get; set; }\n        public string? DeviceInfo { get; set; }\n        public string? MacAddress { get; set; }\n\n        // ✅ Enriched metadata\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 📈 Click Tracking\n        public bool IsClicked { get; set; }\n        public DateTime? ClickedAt { get; set; }\n        public string? ClickType { get; set; }\n\n        // 🔁 Retry Info\n        public string? RetryStatus { get; set; }     // Pending, Retried, Skipped\n        public int RetryCount { get; set; }\n        public DateTime? LastRetryAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignStatusDashboardDto.cs",
      "sha256": "21979b3b1de98ab2567e6485c9c0e4684b848735d36743226caaca66504e9b7b",
      "language": "csharp",
      "size": 1038,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignStatusDashboardDto\n    {\n        public Guid CampaignId { get; set; }\n\n        // 📊 Overall Stats\n        public int TotalRecipients { get; set; }\n        public int SentCount { get; set; }\n        public int DeliveredCount { get; set; }\n        public int ReadCount { get; set; }\n        public int FailedCount { get; set; }\n\n        // 🕒 Delivery Timing (optional but insightful)\n        public DateTime? FirstSentAt { get; set; }\n        public DateTime? LastSentAt { get; set; }\n        public DateTime? FirstReadAt { get; set; }\n        public DateTime? LastReadAt { get; set; }\n\n        // 📉 Delivery Rates\n        public double DeliveryRate => TotalRecipients == 0 ? 0 : (double)DeliveredCount / TotalRecipients * 100;\n        public double ReadRate => TotalRecipients == 0 ? 0 : (double)ReadCount / TotalRecipients * 100;\n        public double FailureRate => TotalRecipients == 0 ? 0 : (double)FailedCount / TotalRecipients * 100;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/TopCampaignDto.cs",
      "sha256": "deebf224725de4a79f8363405623b0761fed9b776ec86cc8d6a9b05c5f79940e",
      "language": "csharp",
      "size": 295,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class TopCampaignDto\n    {\n        public Guid CampaignId { get; set; }\n        public string CampaignName { get; set; }\n        public double ReadRate { get; set; }\n        public double ClickThroughRate { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Models/CampaignClickDailyAgg.cs",
      "sha256": "f73f8e07824860d62b98ba1112933870fd6c223a3a75ca759bccf5899d9e9ffd",
      "language": "csharp",
      "size": 571,
      "content": "// 📄 Features/CampaignTracking/Models/CampaignClickDailyAgg.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    [Table(\"CampaignClickDailyAgg\")]\n    public class CampaignClickDailyAgg\n    {\n        [Key] public Guid Id { get; set; }\n        public Guid CampaignId { get; set; }\n        public DateTime Day { get; set; } // date-only (store as date in migration)\n        public int ButtonIndex { get; set; }\n        public long Clicks { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Models/CampaignClickLog.cs",
      "sha256": "c955c29fed1ef4d960a247c80426a21493ab53a3b657a4a21083d2f617d309cb",
      "language": "csharp",
      "size": 1205,
      "content": "// 📄 Features/CampaignTracking/Models/CampaignClickLog.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    [Table(\"CampaignClickLogs\")]\n    public class CampaignClickLog\n    {\n        [Key] public Guid Id { get; set; }\n\n        public Guid? RunId { get; set; }\n        // FK through CampaignSendLog to CampaignId & ContactId\n        public Guid CampaignSendLogId { get; set; }\n\n        public Guid CampaignId { get; set; }      // denormalized for fast filtering\n        public Guid? ContactId { get; set; }      // denormalized if available\n\n        public int ButtonIndex { get; set; }\n\n        [MaxLength(120)]\n        public string ButtonTitle { get; set; } = \"\";\n\n        // NEW: \"web\" | \"call\" | \"whatsapp\" (lowercase)\n        [MaxLength(16)]\n        public string ClickType { get; set; } = \"web\";\n\n        [MaxLength(2048)]\n        public string Destination { get; set; } = \"\";\n\n        [MaxLength(64)]\n        public string Ip { get; set; } = \"\";\n\n        [MaxLength(512)]\n        public string UserAgent { get; set; } = \"\";\n\n        public DateTime ClickedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Models/CampaignSendLog.cs",
      "sha256": "d1dc583710399b0e139ef78cf3b66f89c6c74820adb4d380a8bb19af1fee9944",
      "language": "csharp",
      "size": 2927,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Models\n{\n    public class CampaignSendLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid? RunId { get; set; }\n        public string? MessageId { get; set; } // Unique WAMID from WhatsApp\n        // 🔗 Foreign Keys\n    \n        public Guid CampaignId { get; set; }\n        public Campaign? Campaign { get; set; }\n\n \n        public Guid? ContactId { get; set; }\n\n        [Required]\n        public Guid RecipientId { get; set; }\n\n        // 📩 Message Info\n        [Required]\n        public string MessageBody { get; set; } = \"\";\n\n        public string? TemplateId { get; set; }\n        public string? SendStatus { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public string? CreatedBy { get; set; }\n\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // 🌐 Metadata\n        public string? IpAddress { get; set; }\n        public string? DeviceInfo { get; set; }\n        public string? MacAddress { get; set; }\n        public string? SourceChannel { get; set; }\n\n        // ✅ UX-Derived\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 📊 Click Tracking\n        public bool IsClicked { get; set; } = false;\n        public DateTime? ClickedAt { get; set; }\n        public string? ClickType { get; set; }\n\n        // 🔁 Retry Tracking (💡 New)\n        public int RetryCount { get; set; } = 0;                 // Number of retry attempts\n        public DateTime? LastRetryAt { get; set; }               // When retry last happened\n        public string? LastRetryStatus { get; set; }             // Success / Failed\n        public bool AllowRetry { get; set; } = true;             // Flag to enable/disable retry\n\n        // 👁 Navigation\n      \n        public Contact? Contact { get; set; }\n        public CampaignRecipient? Recipient { get; set; }\n\n\n        // 🔗 MessageLog reference (optional)\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        // 🆕 Flow context snapshot for deterministic click resolution\n        public Guid? CTAFlowConfigId { get; set; }   // which flow this send belongs to (optional)\n        public Guid? CTAFlowStepId { get; set; }     // the entry step id (optional)\n\n        [Column(TypeName = \"text\")]\n        public string? ButtonBundleJson { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignAnalyticsService.cs",
      "sha256": "ee9163439146987bfeebca642b380b914f7a0d5dae6fc4b2468b798b06840b3e",
      "language": "csharp",
      "size": 5226,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n\n\n    public class CampaignAnalyticsService : ICampaignAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n            //_context = context;\n        }\n\n        public async Task<CampaignStatusDashboardDto?> GetCampaignStatsAsync(Guid campaignId)\n        {\n            var logs = await _context.CampaignSendLogs\n                .Where(l => l.CampaignId == campaignId)\n                .ToListAsync();\n\n            if (!logs.Any()) return null;\n\n            return new CampaignStatusDashboardDto\n            {\n                CampaignId = campaignId,\n                TotalRecipients = logs.Count,\n                SentCount = logs.Count(l => l.SendStatus == \"Sent\"),\n                DeliveredCount = logs.Count(l => l.SendStatus == \"Delivered\"),\n                ReadCount = logs.Count(l => l.SendStatus == \"Read\"),\n                FailedCount = logs.Count(l => l.SendStatus == \"Failed\"),\n                FirstSentAt = logs.Min(l => l.SentAt),\n                LastSentAt = logs.Max(l => l.SentAt),\n                FirstReadAt = logs.Min(l => l.ReadAt),\n                LastReadAt = logs.Max(l => l.ReadAt)\n            };\n        }\n\n        //public async Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5)\n        //{\n        //    var campaignStats = await _context.CampaignSendLogs\n        //        .Where(log => log.BusinessId == businessId)\n        //        .GroupBy(log => log.CampaignId)\n        //        .Select(group => new\n        //        {\n        //            CampaignId = group.Key,\n        //            TotalSent = group.Count(),\n        //            TotalRead = group.Count(l => l.ReadAt != null),\n        //            TotalClicked = group.Count(l => l.ClickedAt != null)\n        //        })\n        //        .Where(s => s.TotalSent > 0)\n        //        .OrderByDescending(s => (double)s.TotalClicked / s.TotalSent)\n        //        .Take(count)\n        //        .ToListAsync();\n\n        //    if (!campaignStats.Any())\n        //    {\n        //        return new List<TopCampaignDto>();\n        //    }\n\n        //    var campaignIds = campaignStats.Select(s => s.CampaignId).ToList();\n        //    var campaigns = await _context.Campaigns\n        //        .Where(c => campaignIds.Contains(c.Id))\n        //        .ToDictionaryAsync(c => c.Id, c => c.Name);\n\n        //    return campaignStats.Select(s => new TopCampaignDto\n        //    {\n        //        CampaignId = s.CampaignId,\n        //        CampaignName = campaigns.GetValueOrDefault(s.CampaignId, \"Unnamed Campaign\"),\n        //        ReadRate = s.TotalSent > 0 ? Math.Round(((double)s.TotalRead / s.TotalSent) * 100, 2) : 0,\n        //        ClickThroughRate = s.TotalSent > 0 ? Math.Round(((double)s.TotalClicked / s.TotalSent) * 100, 2) : 0\n        //    });\n        //}\n\n\n\n        public async Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5)\n        {\n            if (count <= 0) count = 5;\n\n            // If you suspect legacy rows with Guid.Empty, keep the extra filter; otherwise you can drop it.\n            var campaignStats = await _context.CampaignSendLogs\n                .AsNoTracking()\n                .Where(log => log.BusinessId == businessId /* && log.CampaignId != Guid.Empty */)\n                .GroupBy(log => log.CampaignId) // CampaignId is non-nullable Guid\n                .Select(group => new\n                {\n                    CampaignId = group.Key,\n                    TotalSent = group.Count(),\n                    TotalRead = group.Count(l => l.ReadAt != null),\n                    TotalClicked = group.Count(l => l.ClickedAt != null)\n                })\n                .Where(s => s.TotalSent > 0)\n                .OrderByDescending(s => (double)s.TotalClicked / s.TotalSent) // CTR first\n                .ThenByDescending(s => s.TotalSent)                           // tie-breaker: volume\n                .Take(count)\n                .ToListAsync();\n\n            if (campaignStats.Count == 0)\n                return Array.Empty<TopCampaignDto>();\n\n            var ids = campaignStats.Select(s => s.CampaignId).ToList();\n\n            var names = await _context.Campaigns\n                .AsNoTracking()\n                .Where(c => ids.Contains(c.Id))\n                .ToDictionaryAsync(c => c.Id, c => c.Name);\n\n            var result = campaignStats.Select(s => new TopCampaignDto\n            {\n                CampaignId = s.CampaignId,\n                CampaignName = names.TryGetValue(s.CampaignId, out var n) && !string.IsNullOrWhiteSpace(n)\n                                        ? n\n                                        : \"Unnamed Campaign\",\n                ReadRate = Math.Round((double)s.TotalRead / s.TotalSent * 100, 2),\n                ClickThroughRate = Math.Round((double)s.TotalClicked / s.TotalSent * 100, 2)\n            });\n\n            return result;\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignSendLogEnricher.cs",
      "sha256": "6d1155127869663e221b9c1a80e5dce49dd32c3d57d218d8157691ed3bc8edeb",
      "language": "csharp",
      "size": 872,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignSendLogEnricher : ICampaignSendLogEnricher\n    {\n        public async Task EnrichAsync(CampaignSendLog log, string userAgent, string ipAddress)\n        {\n            // 🧠 Device Detection (simplified for now)\n            log.DeviceInfo = userAgent;\n\n            // 🌍 IP Lookup - Mocked for now\n            if (!string.IsNullOrWhiteSpace(ipAddress))\n            {\n                log.IpAddress = ipAddress;\n                log.SourceChannel = \"API\"; // Example: mark origin\n                // Future: Use IPinfo or GeoLite2 for full location enrichment\n            }\n\n            // ⌛ Simulate async task for compatibility\n            await Task.CompletedTask;\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignSendLogService.cs",
      "sha256": "9de069f56cbc64b2382ea96d512bb623e31b62943ab4c1338af068644fb2e087",
      "language": "csharp",
      "size": 13342,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignSendLogService : ICampaignSendLogService\n    {\n        private readonly AppDbContext _context;\n        private readonly ICampaignSendLogEnricher _enricher;\n\n\n        public CampaignSendLogService(AppDbContext context, ICampaignSendLogEnricher enricher)\n        {\n            _context = context;\n            _enricher = enricher;\n        }\n\n        //public async Task<PagedResult<CampaignSendLogDto>> GetLogsByCampaignIdAsync(\n        //Guid campaignId, string? status, string? search, int page, int pageSize)\n        //{\n        //    // Base query as IQueryable (not IIncludableQueryable)\n        //    IQueryable<CampaignSendLog> query = _context.CampaignSendLogs\n        //        .AsNoTracking()\n        //        .Where(log => log.CampaignId.HasValue && log.CampaignId.Value == campaignId);\n\n        //    if (!string.IsNullOrEmpty(status))\n        //        query = query.Where(log => log.SendStatus == status);\n\n        //    if (!string.IsNullOrEmpty(search))\n        //    {\n        //        var keyword = search.ToLower();\n\n        //        // Safe null checks + server-side case-insensitive matching\n        //        // If you're on PostgreSQL, EF.Functions.ILike is nicer; otherwise use ToLower().\n        //        query = query.Where(log =>\n        //            log.Contact != null &&\n        //           (log.Contact.Name.ToLower().Contains(keyword)\n        //         || log.Contact.PhoneNumber.Contains(keyword)));\n        //    }\n\n        //    // Add Include after filters to keep it IQueryable\n        //    query = query.Include(log => log.Contact);\n\n        //    var totalCount = await query.CountAsync();\n\n        //    var logs = await query\n        //        .OrderByDescending(log => log.CreatedAt)\n        //        .Skip((page - 1) * pageSize)\n        //        .Take(pageSize)\n        //        .Select(log => new CampaignSendLogDto\n        //        {\n        //            Id = log.Id,\n        //            CampaignId = log.CampaignId!.Value,       // unwrap once for DTO Guid\n        //            ContactId = log.ContactId,               // keep Guid? in DTO if CSV-only is allowed\n        //            ContactName = log.Contact != null ? log.Contact.Name : \"N/A\",\n        //            ContactPhone = log.Contact != null ? log.Contact.PhoneNumber : \"-\",\n        //            MessageBody = log.MessageBody,\n        //            TemplateId = log.TemplateId,\n        //            SendStatus = log.SendStatus,\n        //            ErrorMessage = log.ErrorMessage,\n        //            CreatedAt = log.CreatedAt,\n        //            SentAt = log.SentAt,\n        //            DeliveredAt = log.DeliveredAt,\n        //            ReadAt = log.ReadAt,\n        //            SourceChannel = log.SourceChannel,\n        //            IsClicked = log.IsClicked,\n        //            ClickedAt = log.ClickedAt,\n        //            ClickType = log.ClickType\n        //        })\n        //        .ToListAsync();\n\n        //    return new PagedResult<CampaignSendLogDto>\n        //    {\n        //        Items = logs,\n        //        TotalCount = totalCount,\n        //        Page = page,\n        //        PageSize = pageSize\n        //    };\n        //}\n\n\n        //public async Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId)\n        //{\n        //    return await _context.CampaignSendLogs\n        //        .Where(log => log.CampaignId == campaignId && log.ContactId == contactId)\n        //        .Select(log => new CampaignSendLogDto\n        //        {\n        //            Id = log.Id,\n        //            CampaignId = log.CampaignId,\n        //            ContactId = log.ContactId,\n        //            MessageBody = log.MessageBody,\n        //            TemplateId = log.TemplateId,\n        //            SendStatus = log.SendStatus,\n        //            ErrorMessage = log.ErrorMessage,\n        //            CreatedAt = log.CreatedAt,\n        //            SentAt = log.SentAt,\n        //            DeliveredAt = log.DeliveredAt,\n        //            ReadAt = log.ReadAt,\n        //            IpAddress = log.IpAddress,\n        //            DeviceInfo = log.DeviceInfo,\n        //            MacAddress = log.MacAddress,\n        //            SourceChannel = log.SourceChannel,\n        //            IsClicked = log.IsClicked,\n        //            ClickedAt = log.ClickedAt,\n        //            ClickType = log.ClickType\n        //        })\n        //        .ToListAsync();\n        //}\n\n        // 🆕 Create a new send log (with enrichment)\n\n        public async Task<PagedResult<CampaignSendLogDto>> GetLogsByCampaignIdAsync(\n       Guid campaignId, string? status, string? search, int page, int pageSize)\n        {\n            if (page <= 0) page = 1;\n            if (pageSize <= 0) pageSize = 10;\n\n            // Base (scoped to the campaign)\n            var q =\n                from log in _context.CampaignSendLogs.AsNoTracking()\n                where log.CampaignId == campaignId\n                join ml in _context.MessageLogs.AsNoTracking()\n                     on log.MessageLogId equals ml.Id into g\n                from ml in g.DefaultIfEmpty() // LEFT JOIN\n                select new { log, ml };\n\n            if (!string.IsNullOrWhiteSpace(status))\n                q = q.Where(x => x.log.SendStatus == status);\n\n            if (!string.IsNullOrWhiteSpace(search))\n            {\n                var kw = search.Trim();\n                var kwLike = $\"%{kw}%\";\n\n                q = q.Where(x =>\n                    // match CRM contact name/phone if present\n                    (x.log.Contact != null &&\n                        (EF.Functions.ILike(x.log.Contact.Name!, kwLike) ||\n                         x.log.Contact.PhoneNumber!.Contains(kw)))\n                    ||\n                    // match raw recipient number from message log (CSV-only etc.)\n                    (x.ml.RecipientNumber != null && x.ml.RecipientNumber.Contains(kw))\n                );\n            }\n\n            var total = await q.CountAsync();\n\n            var items = await q\n                .OrderByDescending(x => x.log.CreatedAt)\n                .Skip((page - 1) * pageSize)\n                .Take(pageSize)\n                .Select(x => new CampaignSendLogDto\n                {\n                    Id = x.log.Id,\n                    // CampaignId = x.log.CampaignId ?? campaignId,\n                    CampaignId = x.log.CampaignId,// ✅ fix\n                    ContactId = x.log.ContactId,\n                    ContactName = x.log.Contact != null ? x.log.Contact.Name : \"N/A\",\n                    ContactPhone = x.log.Contact != null ? x.log.Contact.PhoneNumber : \"-\",\n                    RecipientNumber = x.ml.RecipientNumber,\n                    RecipientId = x.log.RecipientId,\n                    MessageBody = x.log.MessageBody,\n                    TemplateId = x.log.TemplateId,\n                    SendStatus = x.log.SendStatus,\n                    ErrorMessage = x.log.ErrorMessage,\n                    CreatedAt = x.log.CreatedAt,\n                    SentAt = x.log.SentAt,\n                    DeliveredAt = x.log.DeliveredAt,\n                    ReadAt = x.log.ReadAt,\n                    SourceChannel = x.log.SourceChannel,\n                    IsClicked = x.log.IsClicked,\n                    ClickedAt = x.log.ClickedAt,\n                    ClickType = x.log.ClickType\n                })\n                .ToListAsync();\n\n            return new PagedResult<CampaignSendLogDto>\n            {\n                Items = items,\n                TotalCount = total,\n                Page = page,\n                PageSize = pageSize\n            };\n        }\n\n        public async Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId)\n        {\n            return await _context.CampaignSendLogs\n                .AsNoTracking()\n               .Where(log =>\n    log.CampaignId == campaignId &&\n    log.ContactId == contactId)\n                .Select(log => new CampaignSendLogDto\n                {\n                    Id = log.Id,\n                    CampaignId = log.CampaignId,\n                    ContactId = log.ContactId,  // unwrap after HasValue guard\n                    MessageBody = log.MessageBody,\n                    TemplateId = log.TemplateId,\n                    SendStatus = log.SendStatus,\n                    ErrorMessage = log.ErrorMessage,\n                    CreatedAt = log.CreatedAt,\n                    SentAt = log.SentAt,\n                    DeliveredAt = log.DeliveredAt,\n                    ReadAt = log.ReadAt,\n                    IpAddress = log.IpAddress,\n                    DeviceInfo = log.DeviceInfo,\n                    MacAddress = log.MacAddress,\n                    SourceChannel = log.SourceChannel,\n                    IsClicked = log.IsClicked,\n                    ClickedAt = log.ClickedAt,\n                    ClickType = log.ClickType\n                })\n                .ToListAsync();\n        }\n\n\n        public async Task<bool> AddSendLogAsync(CampaignSendLogDto dto, string ipAddress, string userAgent)\n        {\n            var log = new CampaignSendLog\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = dto.CampaignId,\n                ContactId = dto.ContactId,\n                MessageBody = dto.MessageBody,\n                TemplateId = dto.TemplateId,\n                SendStatus = dto.SendStatus,\n                ErrorMessage = dto.ErrorMessage,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = dto.SentAt,\n                DeliveredAt = dto.DeliveredAt,\n                ReadAt = dto.ReadAt,\n                SourceChannel = dto.SourceChannel,\n                IsClicked = dto.IsClicked,\n                ClickedAt = dto.ClickedAt,\n                ClickType = dto.ClickType,\n                RecipientId = dto.RecipientId\n            };\n\n            // ✅ Use enrichment service\n            await _enricher.EnrichAsync(log, userAgent, ipAddress);\n\n            _context.CampaignSendLogs.Add(log);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // 📨 Update delivery or read status\n        public async Task<bool> UpdateDeliveryStatusAsync(Guid logId, string status, DateTime? deliveredAt, DateTime? readAt)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId);\n            if (log == null) return false;\n\n            log.SendStatus = status;\n            log.DeliveredAt = deliveredAt ?? log.DeliveredAt;\n            log.ReadAt = readAt ?? log.ReadAt;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // 📈 Track click (CTA)\n        public async Task<bool> TrackClickAsync(Guid logId, string clickType)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId);\n            if (log == null) return false;\n\n            log.IsClicked = true;\n            log.ClickedAt = DateTime.UtcNow;\n            log.ClickType = clickType;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n        public async Task<CampaignLogSummaryDto> GetCampaignSummaryAsync(Guid campaignId)\n        {\n            // This single, efficient query calculates all stats directly in the database.\n            var summary = await _context.CampaignSendLogs\n                .Where(l => l.CampaignId == campaignId)\n                .GroupBy(l => 1) // Group by a constant to aggregate all results\n                .Select(g => new\n                {\n                    TotalRecipients = g.Count(),\n\n                    // CORRECTED LOGIC: A message is \"Sent\" if its status is NOT \"Failed\".\n                    // This correctly includes messages that are \"Sent\", \"Delivered\", or \"Read\".\n                    SentCount = g.Count(l => l.SendStatus != \"Failed\"),\n\n                    FailedCount = g.Count(l => l.SendStatus == \"Failed\"),\n                    ClickedCount = g.Count(l => l.IsClicked),\n                    DeliveredCount = g.Count(l => l.DeliveredAt != null),\n                    ReadCount = g.Count(l => l.ReadAt != null),\n                    LastSentAt = g.Max(l => l.SentAt)\n                })\n                .FirstOrDefaultAsync();\n\n            if (summary == null)\n            {\n                // Return an empty DTO if no logs are found for the campaign\n                return new CampaignLogSummaryDto();\n            }\n\n            return new CampaignLogSummaryDto\n            {\n                TotalSent = summary.TotalRecipients,\n                Sent = summary.SentCount,\n                FailedCount = summary.FailedCount,\n                ClickedCount = summary.ClickedCount,\n                Delivered = summary.DeliveredCount,\n                Read = summary.ReadCount,\n                LastSentAt = summary.LastSentAt\n            };\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignTrackingRetryService.cs",
      "sha256": "7b60dddd6aceae08b86da9813190186180881e6fc9efd8dc1190e497b51f9af1",
      "language": "csharp",
      "size": 2935,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignTrackingRetryService : ICampaignTrackingRetryService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignTrackingRetryService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // ✅ Public method: Retry a single failed log\n        public async Task<bool> RetrySingleAsync(Guid logId)\n        {\n            return await RetrySendLogAsync(logId);\n        }\n\n        // ✅ Public method: Retry all failed logs in a campaign\n        public async Task<int> RetryFailedInCampaignAsync(Guid campaignId)\n        {\n            return await RetryAllFailedInCampaignAsync(campaignId);\n        }\n\n        // 🔁 Private: Retry a specific log\n        private async Task<bool> RetrySendLogAsync(Guid logId)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(x => x.Id == logId);\n\n            if (log == null || log.SendStatus != \"Failed\" || !log.AllowRetry)\n                return false;\n\n            // 🔄 Simulate re-send (replace with actual IMessageService.SendAsync later)\n            bool sent = SimulateSendMessage(log);\n\n            log.RetryCount += 1;\n            log.LastRetryAt = DateTime.UtcNow;\n            log.LastRetryStatus = sent ? \"Sent\" : \"Failed\";\n            log.SendStatus = sent ? \"Sent\" : \"Failed\";\n            log.ErrorMessage = sent ? null : \"Mock failure on retry\";\n\n            await _context.SaveChangesAsync();\n            return sent;\n        }\n\n        // 🔁 Private: Retry all failed logs in a given campaign\n        private async Task<int> RetryAllFailedInCampaignAsync(Guid campaignId)\n        {\n            var failedLogs = await _context.CampaignSendLogs\n                .Where(log => log.CampaignId == campaignId && log.SendStatus == \"Failed\" && log.AllowRetry)\n                .ToListAsync();\n\n            int successCount = 0;\n\n            foreach (var log in failedLogs)\n            {\n                bool sent = SimulateSendMessage(log);\n\n                log.RetryCount += 1;\n                log.LastRetryAt = DateTime.UtcNow;\n                log.LastRetryStatus = sent ? \"Sent\" : \"Failed\";\n                log.SendStatus = sent ? \"Sent\" : \"Failed\";\n                log.ErrorMessage = sent ? null : \"Mock failure on retry\";\n\n                if (sent) successCount++;\n            }\n\n            await _context.SaveChangesAsync();\n            return successCount;\n        }\n\n        // 🔧 Simulated send (replace with actual WhatsApp message logic)\n        private bool SimulateSendMessage(CampaignSendLog log)\n        {\n            return new Random().NextDouble() < 0.9; // 90% success rate\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ClickTokenService.cs",
      "sha256": "b80c48d547509139d45775d1f8447eceeec7d399e27cd9a55c20dc1aecb854fb",
      "language": "csharp",
      "size": 3152,
      "content": "// 📄 Features/CampaignTracking/Services/ClickTokenService.cs\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing Microsoft.AspNetCore.WebUtilities;\nusing Microsoft.Extensions.Options;\nusing xbytechat.api.Features.CampaignTracking.Config;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public record ClickTokenPayload(\n        Guid cid,            // CampaignSendLogId\n        int bi,              // button index\n        string bt,           // button title (optional)\n        string to,           // destination absolute URL\n        long iat,            // issued at (unix seconds)\n        long exp             // expiry (unix seconds)\n    );\n\n    public interface IClickTokenService\n    {\n        string Create(ClickTokenPayload payload);\n        bool TryValidate(string token, out ClickTokenPayload? payload, out string? error);\n    }\n\n    public class ClickTokenService : IClickTokenService\n    {\n        private readonly byte[] _key;\n\n        public ClickTokenService(IOptions<TrackingOptions> opt)\n        {\n            _key = Encoding.UTF8.GetBytes(opt.Value.Secret ?? throw new ArgumentNullException(nameof(opt.Value.Secret)));\n        }\n\n        public string Create(ClickTokenPayload payload)\n        {\n            var json = JsonSerializer.Serialize(payload);\n            var data = Encoding.UTF8.GetBytes(json);\n            var body = WebEncoders.Base64UrlEncode(data);\n\n            var sig = ComputeHmac(body);\n            return $\"{body}.{sig}\";\n        }\n\n        public bool TryValidate(string token, out ClickTokenPayload? payload, out string? error)\n        {\n            payload = null;\n            error = null;\n\n            var parts = token.Split('.');\n            if (parts.Length != 2) { error = \"format\"; return false; }\n\n            var body = parts[0];\n            var sig = parts[1];\n\n            var expected = ComputeHmac(body);\n            // timing-safe compare\n            if (!CryptographicOperations.FixedTimeEquals(Encoding.UTF8.GetBytes(sig), Encoding.UTF8.GetBytes(expected)))\n            { error = \"bad-signature\"; return false; }\n\n            try\n            {\n                var bytes = WebEncoders.Base64UrlDecode(body);\n                var obj = JsonSerializer.Deserialize<ClickTokenPayload>(bytes);\n                if (obj is null) { error = \"decode\"; return false; }\n\n                var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n                if (now > obj.exp) { error = \"expired\"; return false; }\n\n                // minimal URL sanity check\n                if (!Uri.TryCreate(obj.to, UriKind.Absolute, out var _)) { error = \"bad-destination\"; return false; }\n\n                payload = obj;\n                return true;\n            }\n            catch (Exception ex)\n            {\n                error = \"exception:\" + ex.GetType().Name;\n                return false;\n            }\n        }\n\n        private string ComputeHmac(string body)\n        {\n            using var h = new HMACSHA256(_key);\n            var sig = h.ComputeHash(Encoding.UTF8.GetBytes(body));\n            return WebEncoders.Base64UrlEncode(sig);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignAnalyticsService.cs",
      "sha256": "c4c188f0eba3b537c076a7fc42ef62094de1ced491abcaecb619097e40debb8b",
      "language": "csharp",
      "size": 437,
      "content": "using xbytechat.api.Features.CampaignTracking.DTOs;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignAnalyticsService\n    {\n       // Task<CampaignStatusDashboardDto> GetStatusDashboardAsync(Guid businessId);\n        Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5);\n        Task<CampaignStatusDashboardDto?> GetCampaignStatsAsync(Guid campaignId);\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignSendLogEnricher.cs",
      "sha256": "9204a2182522e06e53fe6beb21100820231943995d044f01feb200bdcaa521de",
      "language": "csharp",
      "size": 290,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignSendLogEnricher\n    {\n        Task EnrichAsync(CampaignSendLog log, string userAgent, string ipAddress);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignSendLogService.cs",
      "sha256": "092d86318ec5e38dcb7baef591d1796d1f6942335e39f850aec69e7a5e870407",
      "language": "csharp",
      "size": 1267,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignSendLogService\n    {\n        // This is the NEW signature that matches your updated service and controller\n        Task<PagedResult<CampaignSendLogDto>> GetLogsByCampaignIdAsync(\n            Guid campaignId, string? status, string? search, int page, int pageSize);\n        // 📍 Get logs for a specific contact in a campaign\n        Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId);\n\n        // 🆕 Add a new send log entry with enrichment (IP, User-Agent)\n        Task<bool> AddSendLogAsync(CampaignSendLogDto dto, string ipAddress, string userAgent);\n\n        // 📨 Update delivery or read status\n        Task<bool> UpdateDeliveryStatusAsync(Guid logId, string status, DateTime? deliveredAt, DateTime? readAt);\n\n        // 📈 Track CTA click (e.g., BuyNow, ViewDetails)\n        Task<bool> TrackClickAsync(Guid logId, string clickType);\n        // 📊 Get summary of campaign logs\n        Task<CampaignLogSummaryDto> GetCampaignSummaryAsync(Guid campaignId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignTrackingRetryService.cs",
      "sha256": "0ea3dd070b8b87ab800873972e6200421e942c4e4536a316a8623bd7108e72ec",
      "language": "csharp",
      "size": 554,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignTrackingRetryService\n    {\n\n        // Retry a single failed message log by its ID.\n        // will be used when user clicks \"Retry Now\" on a log row.\n        Task<bool> RetrySingleAsync(Guid logId);\n\n\n        // Retry all failed messages in a campaign where retry is allowed.\n        // will support \"Retry All Failed\" button from Campaign logs.\n        Task<int> RetryFailedInCampaignAsync(Guid campaignId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Worker/ClickEvent.cs",
      "sha256": "feba0a8efef3e111690aeca876198178018024d5c39d3415d1cb3db163a8e52e",
      "language": "csharp",
      "size": 380,
      "content": "// Features/CampaignTracking/Worker/ClickEvent.cs\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    public sealed record ClickEvent(\n        Guid CampaignSendLogId,\n        int ButtonIndex,\n        string ButtonTitle,\n        string Destination,\n        DateTime ClickedAtUtc,\n        string Ip,\n        string UserAgent,\n         string ClickType\n         \n    );\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Worker/ClickLogWorker.cs",
      "sha256": "6c5f66aa812a1532420b44d66e9a0d9b72234af71077dbb32151c78d78d30a97",
      "language": "csharp",
      "size": 8009,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    public sealed class ClickLogWorker : BackgroundService\n    {\n        private readonly ILogger<ClickLogWorker> _log;\n        private readonly IClickEventQueue _queue;\n        private readonly IServiceScopeFactory _scopeFactory;\n\n        public ClickLogWorker(\n            ILogger<ClickLogWorker> log,\n            IClickEventQueue queue,\n            IServiceScopeFactory scopeFactory)\n        {\n            _log = log;\n            _queue = queue;\n            _scopeFactory = scopeFactory;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            _log.LogInformation(\"ClickLogWorker started\");\n\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                List<ClickEvent> batch;\n                try\n                {\n                    batch = await _queue.ReadBatchAsync(200, TimeSpan.FromSeconds(1), stoppingToken);\n                    if (batch.Count == 0) continue;\n\n                    // quick visibility: confirm we are ingesting call/whatsapp/web events\n                    var byType = batch.GroupBy(e => e.ClickType ?? \"web\")\n                                      .Select(g => $\"{g.Key}:{g.Count()}\")\n                                      .ToArray();\n                    _log.LogInformation(\"WORKER processing {Count} events [{Kinds}]\",\n                        batch.Count, string.Join(\", \", byType));\n                }\n                catch (OperationCanceledException)\n                {\n                    break;\n                }\n                catch (Exception ex)\n                {\n                    _log.LogError(ex, \"Queue read failed; retrying\");\n                    try { await Task.Delay(500, stoppingToken); } catch { /* ignore */ }\n                    continue;\n                }\n\n                // nothing to do\n                if (batch.Count == 0) continue;\n\n                try\n                {\n                    using var scope = _scopeFactory.CreateScope();\n                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    // Prefetch CampaignId for this batch (we only need CampaignId for the aggregates)\n                    var sendIds = batch.Select(b => b.CampaignSendLogId).Distinct().ToList();\n                    if (sendIds.Count == 0) continue;\n\n                    var sendMap = await db.CampaignSendLogs\n                        .Where(s => sendIds.Contains(s.Id))\n                        .Select(s => new { s.Id, s.CampaignId })\n                        .ToDictionaryAsync(s => s.Id, s => s.CampaignId, stoppingToken);\n\n                    // Prepare aggregate groups: (CampaignId, Day, ButtonIndex) -> count\n                    var groups = batch\n                        .Select(e =>\n                        {\n                            sendMap.TryGetValue(e.CampaignSendLogId, out var campaignId);\n                            return new { CampaignId = campaignId, Day = e.ClickedAtUtc.Date, e.ButtonIndex };\n                        })\n                        .Where(x => x.CampaignId != Guid.Empty)\n                        .GroupBy(x => new { x.CampaignId, x.Day, x.ButtonIndex })\n                        .Select(g => new { g.Key.CampaignId, g.Key.Day, g.Key.ButtonIndex, Count = g.Count() })\n                        .ToList();\n\n                    if (groups.Count == 0) continue;\n\n                    foreach (var g in groups)\n                    {\n                        await db.Database.ExecuteSqlRawAsync(@\"\n                    insert into \"\"CampaignClickDailyAgg\"\" (\"\"CampaignId\"\", \"\"Day\"\", \"\"ButtonIndex\"\", \"\"Clicks\"\")\n                    values ({0}, {1}, {2}, {3})\n                    on conflict (\"\"CampaignId\"\", \"\"Day\"\", \"\"ButtonIndex\"\")\n                    do update set \"\"Clicks\"\" = \"\"CampaignClickDailyAgg\"\".\"\"Clicks\"\" + {3};\",\n                            g.CampaignId, g.Day, g.ButtonIndex, g.Count);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _log.LogError(ex, \"Aggregate update failed; skipped this batch.\");\n                }\n            }\n\n            _log.LogInformation(\"ClickLogWorker stopped\");\n        }\n    }\n}\n\n\n//using Microsoft.EntityFrameworkCore;\n//using xbytechat.api;\n\n//namespace xbytechat.api.Features.CampaignTracking.Worker\n//{\n//    public sealed class ClickLogWorker : BackgroundService\n//    {\n//        private readonly ILogger<ClickLogWorker> _log;\n//        private readonly IClickEventQueue _queue;\n//        private readonly IServiceScopeFactory _scopeFactory;\n\n//        public ClickLogWorker(\n//            ILogger<ClickLogWorker> log,\n//            IClickEventQueue queue,\n//            IServiceScopeFactory scopeFactory)\n//        {\n//            _log = log;\n//            _queue = queue;\n//            _scopeFactory = scopeFactory;\n//        }\n\n//        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n//        {\n//            _log.LogInformation(\"ClickLogWorker started\");\n\n//            while (!stoppingToken.IsCancellationRequested)\n//            {\n//                List<ClickEvent> batch;\n//                try\n//                {\n//                    batch = await _queue.ReadBatchAsync(200, TimeSpan.FromSeconds(1), stoppingToken);\n//                    if (batch.Count == 0) continue;\n//                    _log.LogInformation(\"WORKER processing {Count} events (aggregates only)\", batch.Count);\n//                }\n//                catch (OperationCanceledException) { break; }\n//                catch (Exception ex)\n//                {\n//                    _log.LogError(ex, \"Queue read failed; retrying\");\n//                    try { await Task.Delay(500, stoppingToken); } catch { }\n//                    continue;\n//                }\n\n//                try\n//                {\n//                    using var scope = _scopeFactory.CreateScope();\n//                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n//                    // Prefetch CampaignId for this batch\n//                    var sendIds = batch.Select(b => b.CampaignSendLogId).Distinct().ToList();\n//                    var sendMap = await db.CampaignSendLogs\n//                        .Where(s => sendIds.Contains(s.Id))\n//                        .Select(s => new { s.Id, s.CampaignId })\n//                        .ToDictionaryAsync(s => s.Id, s => s.CampaignId, stoppingToken);\n\n//                    // Build aggregate groups\n//                    var groups = batch\n//                        .Select(e =>\n//                        {\n//                            sendMap.TryGetValue(e.CampaignSendLogId, out var campaignId);\n//                            return new { CampaignId = campaignId, Day = e.ClickedAtUtc.Date, e.ButtonIndex };\n//                        })\n//                        .Where(x => x.CampaignId != Guid.Empty)\n//                        .GroupBy(x => new { x.CampaignId, x.Day, x.ButtonIndex })\n//                        .Select(g => new { g.Key.CampaignId, g.Key.Day, g.Key.ButtonIndex, Count = g.Count() })\n//                        .ToList();\n\n//                    foreach (var g in groups)\n//                    {\n//                        await db.Database.ExecuteSqlRawAsync(@\"\n//insert into \"\"CampaignClickDailyAgg\"\" (\"\"CampaignId\"\", \"\"Day\"\", \"\"ButtonIndex\"\", \"\"Clicks\"\")\n//values ({0}, {1}, {2}, {3})\n//on conflict (\"\"CampaignId\"\", \"\"Day\"\", \"\"ButtonIndex\"\")\n//do update set \"\"Clicks\"\" = \"\"CampaignClickDailyAgg\"\".\"\"Clicks\"\" + {3};\",\n//                            g.CampaignId, g.Day, g.ButtonIndex, g.Count);\n//                    }\n//                }\n//                catch (Exception ex)\n//                {\n//                    _log.LogError(ex, \"Aggregate update failed; skipped.\");\n//                }\n//            }\n\n//            _log.LogInformation(\"ClickLogWorker stopped\");\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Worker/IClickEventQueue.cs",
      "sha256": "a0e8a3bbb51c949024de93f0d4794c3ed494cc047e0b7dafdabe4cf696dad89c",
      "language": "csharp",
      "size": 304,
      "content": "// Features/CampaignTracking/Worker/IClickEventQueue.cs\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    public interface IClickEventQueue\n    {\n        bool TryWrite(ClickEvent evt);\n        Task<List<ClickEvent>> ReadBatchAsync(int maxItems, TimeSpan wait, CancellationToken ct);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Worker/InProcessClickEventQueue.cs",
      "sha256": "8344c869f22df147598c7b1db117ba72d4c518901138838f7fed724201392009",
      "language": "csharp",
      "size": 1254,
      "content": "using System.Threading.Channels;\n\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    public sealed class InProcessClickEventQueue : IClickEventQueue\n    {\n        private readonly Channel<ClickEvent> _ch;\n\n        public InProcessClickEventQueue(int capacity = 20_000)\n        {\n            _ch = Channel.CreateBounded<ClickEvent>(new BoundedChannelOptions(capacity)\n            {\n                // keep newest; never block redirect\n                FullMode = BoundedChannelFullMode.DropOldest,\n                SingleReader = true,\n                SingleWriter = false\n            });\n        }\n\n        public bool TryWrite(ClickEvent evt) => _ch.Writer.TryWrite(evt);\n\n        public async Task<List<ClickEvent>> ReadBatchAsync(int maxItems, TimeSpan wait, CancellationToken ct)\n        {\n            var list = new List<ClickEvent>(maxItems);\n            using var cts = CancellationTokenSource.CreateLinkedTokenSource(ct);\n            cts.CancelAfter(wait);\n\n            while (list.Count < maxItems && await _ch.Reader.WaitToReadAsync(cts.Token))\n            {\n                while (list.Count < maxItems && _ch.Reader.TryRead(out var item))\n                    list.Add(item);\n            }\n            return list;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Controllers/CatalogDashboardController.cs",
      "sha256": "f9186d5de3a12145a3d7a2411736c6510ca02a7b70409ebdcaaa0de5172c0370",
      "language": "csharp",
      "size": 1708,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Services;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Catalog.Controllers\n{\n    [ApiController]\n    [Route(\"api/catalog-dashboard\")]\n    public class CatalogDashboardController : ControllerBase\n    {\n        private readonly ICatalogDashboardService _dashboardService;\n\n        public CatalogDashboardController(ICatalogDashboardService dashboardService)\n        {\n            _dashboardService = dashboardService;\n        }\n\n        [HttpGet(\"summary\")]\n        public async Task<ActionResult<CatalogDashboardSummaryDto>> GetSummary([FromQuery] Guid businessId)\n        {\n            var summary = await _dashboardService.GetDashboardSummaryAsync(businessId);\n            return Ok(summary);\n        }\n\n        [HttpGet(\"top-products\")]\n        public async Task<IActionResult> GetTopClickedProducts([FromQuery] Guid businessId, [FromQuery] int topN = 5)\n        {\n            var topProducts = await _dashboardService.GetTopClickedProductsAsync(businessId, topN);\n            return Ok(topProducts);\n        }\n        [HttpGet(\"cta-summary\")]\n        public async Task<IActionResult> GetCtaJourneySummary([FromQuery] Guid businessId)\n        {\n            var stats = await _dashboardService.GetCtaJourneyStatsAsync(businessId);\n            return Ok(stats);\n        }\n        [HttpGet(\"product-cta-breakdown\")]\n        public async Task<IActionResult> GetProductCtaBreakdown([FromQuery] Guid businessId)\n        {\n            var breakdown = await _dashboardService.GetProductCtaBreakdownAsync(businessId);\n            return Ok(breakdown);\n        }\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Controllers/CatalogTrackingController.cs",
      "sha256": "85581ce69ed9dbbad069ca060c3e8a2c356ec348d74d860ed2ed1905c46f9514",
      "language": "csharp",
      "size": 1696,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Helpers;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Catalog.Controllers\n{\n    [ApiController]\n    [Route(\"api/catalog-tracking\")]\n    public class CatalogTrackingController : ControllerBase\n    {\n        private readonly ICatalogTrackingService _trackingService;\n        private readonly ILogger<CatalogTrackingController> _logger;\n\n        public CatalogTrackingController(\n            ICatalogTrackingService trackingService,\n            ILogger<CatalogTrackingController> logger)\n        {\n            _trackingService = trackingService;\n            _logger = logger;\n        }\n\n        [HttpPost(\"log-click\")]\n        public async Task<IActionResult> LogClick([FromBody] CatalogClickLogDto dto)\n        {\n            var result = await _trackingService.LogClickAsync(dto);\n\n            if (!result.Success)\n            {\n                _logger.LogWarning(\"❌ Catalog click log failed: {Msg}\", result.Message);\n                return BadRequest(result);\n            }\n\n            return StatusCode(201, result);\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 5)\n        {\n            var result = await _trackingService.GetRecentLogsAsync(limit);\n\n            if (!result.Success)\n            {\n                _logger.LogError(\"❌ Failed to fetch recent logs: {Error}\", result.ErrorMessage);\n                return StatusCode(500, result);\n            }\n\n            return Ok(result);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Controllers/ProductController.cs",
      "sha256": "96a44de270bbb3d5a3b88cc161908c14045b78ca5adab88fb776640f55de1a1b",
      "language": "csharp",
      "size": 3021,
      "content": "// 📄 File: Features/Catalog/Controllers/ProductController.cs\n\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Helpers;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Middleware.Attributes;\n\nnamespace xbytechat.api.Features.Catalog.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ProductController : ControllerBase\n    {\n        private readonly IProductService _productService;\n\n        public ProductController(IProductService productService)\n        {\n            _productService = productService;\n        }\n\n        // ✅ GET /api/product?businessId=...\n        [HttpGet]\n        [RequirePermission(\"ViewCatalog\")]\n        public async Task<IActionResult> GetAll([FromQuery] Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(ResponseResult.ErrorInfo(\"BusinessId is required.\"));\n\n            var result = await _productService.GetProductsByBusinessIdAsync(businessId);\n            return Ok(result);\n        }\n\n        // ✅ POST /api/product\n        [HttpPost]\n        [RequirePermission(\"ManageCatalog\")]\n        public async Task<IActionResult> Create([FromBody] CreateProductDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                var errors = ModelState.Values\n                    .SelectMany(v => v.Errors)\n                    .Select(e => e.ErrorMessage)\n                    .ToList();\n\n                var errorString = string.Join(\"; \", errors);\n                return BadRequest(ResponseResult.ErrorInfo(\"Invalid product data.\", errorString));\n            }\n\n            var result = await _productService.AddProductAsync(dto);\n            if (!result.Success)\n                return BadRequest(result);\n\n            return StatusCode(201, result);\n        }\n\n        // ✅ DELETE /api/product/{id}?businessId=...\n        [HttpDelete(\"{id}\")]\n        [RequirePermission(\"ManageCatalog\")]\n        public async Task<IActionResult> Delete(Guid id, [FromQuery] Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(ResponseResult.ErrorInfo(\"BusinessId is required.\"));\n\n            var result = await _productService.RemoveProductAsync(id, businessId);\n            if (!result.Success)\n                return BadRequest(result);\n\n            return Ok(result);\n        }\n\n        // ✅ PUT /api/product/{id}\n        [HttpPut(\"{id}\")]\n        [RequirePermission(\"ManageCatalog\")]\n        public async Task<IActionResult> Update(Guid id, [FromBody] UpdateProductDto dto)\n        {\n            if (id != dto.Id)\n                return BadRequest(ResponseResult.ErrorInfo(\"ID mismatch between route and body.\"));\n\n            var result = await _productService.UpdateProductAsync(dto);\n            if (!result.Success)\n                return BadRequest(result);\n\n            return Ok(result);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/CatalogClickLogDto.cs",
      "sha256": "901cea612e459695f97b806841df45393d04066624affedbfd85cc9d7d3899ce",
      "language": "csharp",
      "size": 979,
      "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CatalogClickLogDto\n    {\n        public Guid BusinessId { get; set; }\n        public Guid? ContactId { get; set; }  // ✅ Add this\n        public Guid? ProductId { get; set; }\n\n        public string? UserId { get; set; }\n        public string? UserName { get; set; }\n        public string? UserPhone { get; set; }\n\n        public string? BotId { get; set; }\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n        public string? CTAJourney { get; set; }\n        public Guid? MessageLogId { get; set; }      // ✅ ADD THIS FIELD\n        public string? RefMessageId { get; set; }\n\n        public string TemplateId { get; set; }\n        public string ButtonText { get; set; }\n\n        // 🧠 Optional: Used for A/B tracking and analytics\n        public string? PlanSnapshot { get; set; }\n\n        public string? Source { get; set; } // ✅ Add this\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/CatalogDashboardSummaryDto.cs",
      "sha256": "31e171cf2d8c5bc006b770f4be2a968db3300aaad51072555faecd119e0e0e07",
      "language": "csharp",
      "size": 698,
      "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CatalogDashboardSummaryDto\n    {\n        // Engagement Metrics\n        public int TotalMessagesSent { get; set; }\n        public int? UniqueCustomersMessaged { get; set; }\n        public int? ProductClicks { get; set; }\n\n        // Catalog Overview\n        public int? ActiveProducts { get; set; }\n        public int? ProductsSharedViaWhatsApp { get; set; }\n\n        // Lead Intelligence\n        public int? RepeatClickers { get; set; }\n        public int? NewClickersToday { get; set; }\n\n        // Timestamps\n        public DateTime? LastCatalogClickAt { get; set; }\n        public DateTime? LastMessageSentAt { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/CreateProductDto.cs",
      "sha256": "8605a9900a0537d7cec14264a91a4a4432debcdaafb06cff99b177460bd47233",
      "language": "csharp",
      "size": 472,
      "content": "// File: Features/Catalog/DTOs/CreateProductDto.cs\n\nnamespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CreateProductDto\n    {\n        public Guid BusinessId { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/CtaJourneyStatsDto.cs",
      "sha256": "ca4efb6e222da04add4d8f9892be95a16ae180b34e53eec32d300c471ea503bd",
      "language": "csharp",
      "size": 188,
      "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CtaJourneyStatsDto\n    {\n        public string CTAJourney { get; set; }\n        public int ClickCount { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/ProductCtaBreakdownDto.cs",
      "sha256": "a94adfe171430503ede80ebb733fc9983f3fe1eae04b4a5a4ed6eb14d354bc10",
      "language": "csharp",
      "size": 284,
      "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class ProductCtaBreakdownDto\n    {\n        public Guid ProductId { get; set; }\n        public string ProductName { get; set; }\n        public string CTAJourney { get; set; }\n        public int ClickCount { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/ProductDto.cs",
      "sha256": "9351e6b36ce1f707bd46bb92652331f1751b150a9d062ecfd31572a0998d59b7",
      "language": "csharp",
      "size": 549,
      "content": "// File: Features/Catalog/DTOs/ProductDto.cs\n\nnamespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class ProductDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/TopProductDto.cs",
      "sha256": "464918c2b2d66c5710042f7d26d7b64fc8f4fb0380f12e7c756a0d248e613684",
      "language": "csharp",
      "size": 228,
      "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class TopProductDto\n    {\n        public Guid ProductId { get; set; }\n        public string ProductName { get; set; }\n        public int ClickCount { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/UpdateProductDto.cs",
      "sha256": "3d2fa63b4ce50da54504b1efa60375305ee53bd12498eb5c359bec2f13aeb11c",
      "language": "csharp",
      "size": 511,
      "content": "// File: Features/Catalog/DTOs/UpdateProductDto.cs\n\nnamespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class UpdateProductDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Models/CatalogClickLog.cs",
      "sha256": "04b5faf86ec274241aa075f5ba6309899ae07f9c0074d1a34285b4f7c96b437d",
      "language": "csharp",
      "size": 1636,
      "content": "namespace xbytechat.api.Features.Catalog.Models\n{\n    public class CatalogClickLog\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Business & Product Info\n        public Guid BusinessId { get; set; }\n        public Guid? ProductId { get; set; }\n\n        // 👤 Customer Info\n        public string? UserId { get; set; }\n        public string? UserName { get; set; }\n        public string? UserPhone { get; set; }\n\n        // 🤖 Bot / Messaging Context\n        public string? BotId { get; set; }\n\n        // 🛍️ Browsing Context\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n\n        // 🔘 CTA Clicked\n        public string? CTAJourney { get; set; }\n        public string TemplateId { get; set; }\n        public string RefMessageId { get; set; }\n        public string ButtonText { get; set; }\n\n        // 🕒 Meta\n        public DateTime? ClickedAt { get; set; } = DateTime.UtcNow;\n\n        // ✅ CRM / Campaign / Analytics\n        public Guid? CampaignSendLogId { get; set; }\n        public Guid? ContactId { get; set; }\n        public bool FollowUpSent { get; set; } = false;\n        public string? LastInteractionType { get; set; }\n        public Guid? MessageLogId { get; set; }\n        public string? PlanSnapshot { get; set; }\n\n        // 🆕 [New Additions for CTA Campaign Tracking]\n        public Guid? CtaId { get; set; }             // Link to CTA definition\n        public Guid? CampaignId { get; set; }        // Link to campaign (if any)\n        public string Source { get; set; } = \"catalog\"; // \"catalog\", \"campaign\", \"auto-reply\"\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Models/Product.cs",
      "sha256": "428554206c02d4602a873704a1e49c995a274f4633e0f32d8c0991c4eea72a31",
      "language": "csharp",
      "size": 1062,
      "content": "// File: Features/Catalog/Models/Product.cs\n\nusing System;\n\nnamespace xbytechat.api.Features.Catalog.Models\n{\n    public class Product\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Foreign Key - Business/Owner\n        public Guid BusinessId { get; set; }\n\n        // 📦 Core Product Info\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n\n        // ✅ Visibility & State\n        public bool IsActive { get; set; } = true;\n\n        // 📅 Metadata\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public int TotalClicks { get; set; } = 0; // Total CTA clicks tracked\n        public DateTime? LastClickedAt { get; set; } // Last time a user clicked CTA for this product\n        public string? MostClickedCTA { get; set; } // Button text with highest click count (e.g., \"Buy Now\")\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/CatalogDashboardService.cs",
      "sha256": "3303616ebf70e99e2e646759834c707405060cc1b22ceb5f743dfa1d8af50198",
      "language": "csharp",
      "size": 6538,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Hosting.Server;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing static System.Runtime.InteropServices.JavaScript.JSType;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public class CatalogDashboardService : ICatalogDashboardService\n    {\n        private readonly AppDbContext _context;\n\n        public CatalogDashboardService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n       \n        public async Task<CatalogDashboardSummaryDto> GetDashboardSummaryAsync(Guid businessId)\n        {\n            var today = DateTime.UtcNow.Date;\n\n            var totalMessagesSent = await _context.MessageLogs\n                .CountAsync(m => m.BusinessId == businessId);\n\n            var uniqueCustomersMessaged = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .Select(m => m.RecipientNumber)\n                .Distinct()\n                .CountAsync();\n\n            var productClicks = await _context.CatalogClickLogs\n                .CountAsync(c => c.BusinessId == businessId && c.ProductId != null);\n\n            var activeProducts = await _context.Products\n                .CountAsync(p => p.BusinessId == businessId);\n\n            var productsSharedViaWhatsapp = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ProductId != null)\n                .Select(c => c.ProductId)\n                .Distinct()\n                .CountAsync();\n\n            var repeatClickers = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId)\n                .GroupBy(c => c.UserPhone)\n                .CountAsync(g => g.Count() > 1);\n\n            var newClickersToday = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ClickedAt.Value.Date == today)\n                .Select(c => c.UserPhone)\n                .Distinct()\n                .CountAsync();\n            //        var newClickersToday = _context.CatalogClickLogs\n            //.Where(c => c.BusinessId == businessId)\n            //.ToList() // now it's LINQ to Objects\n            //        .Where(c => c.ClickedAt?.Date == today)\n            //        .Select(c => c.UserPhone)\n            //        .Distinct()\n            //.Count();\n            //        But if your data is large, the first(server-side filtering) is the better choice.\n\n            var lastCatalogClickAt = await _context.CatalogClickLogs\n    .Where(c => c.BusinessId == businessId)\n    .MaxAsync(c => (DateTime?)c.ClickedAt);\n\n            var lastMessageSentAt = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .MaxAsync(m => (DateTime?)m.SentAt);\n\n            return new CatalogDashboardSummaryDto\n            {\n                TotalMessagesSent = totalMessagesSent,\n                UniqueCustomersMessaged = uniqueCustomersMessaged,\n                ProductClicks = productClicks,\n                ActiveProducts = activeProducts,\n                ProductsSharedViaWhatsApp = productsSharedViaWhatsapp,\n                RepeatClickers = repeatClickers,\n                NewClickersToday = newClickersToday,\n                LastCatalogClickAt = lastCatalogClickAt,\n                LastMessageSentAt = lastMessageSentAt\n            };\n        }\n\n        public async Task<List<TopProductDto>> GetTopClickedProductsAsync(Guid businessId, int topN = 5)\n        {\n            var topProducts = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ProductId != null)\n                .GroupBy(c => c.ProductId)\n                .Select(g => new\n                {\n                    ProductId = g.Key,\n                    ClickCount = g.Count()\n                })\n                .OrderByDescending(x => x.ClickCount)\n                .Take(topN)\n                .ToListAsync();\n\n            // Now fetch product names to join with clicks\n            var productIds = topProducts.Select(x => x.ProductId).ToList();\n\n            var products = await _context.Products\n                .Where(p => productIds.Contains(p.Id))\n                .ToDictionaryAsync(p => p.Id, p => p.Name);\n\n            return topProducts.Select(x => new TopProductDto\n            {\n                ProductId = x.ProductId.Value,\n                ProductName = products.ContainsKey(x.ProductId.Value) ? products[x.ProductId.Value] : \"Unknown\",\n                ClickCount = x.ClickCount\n            }).ToList();\n        }\n        public async Task<List<CtaJourneyStatsDto>> GetCtaJourneyStatsAsync(Guid businessId)\n        {\n            var stats = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && !string.IsNullOrEmpty(c.CTAJourney))\n                .GroupBy(c => c.CTAJourney)\n                .Select(g => new CtaJourneyStatsDto\n                {\n                    CTAJourney = g.Key,\n                    ClickCount = g.Count()\n                })\n                .OrderByDescending(x => x.ClickCount)\n                .ToListAsync();\n\n            return stats;\n        }\n        public async Task<List<ProductCtaBreakdownDto>> GetProductCtaBreakdownAsync(Guid businessId)\n        {\n            var groupedClicks = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ProductId != null && !string.IsNullOrEmpty(c.CTAJourney))\n                .GroupBy(c => new { c.ProductId, c.CTAJourney })\n                .Select(g => new\n                {\n                    ProductId = g.Key.ProductId.Value,\n                    CTAJourney = g.Key.CTAJourney,\n                    ClickCount = g.Count()\n                })\n                .ToListAsync();\n\n            // Fetch product names for all involved productIds\n            var productIds = groupedClicks.Select(g => g.ProductId).Distinct().ToList();\n\n            var productNames = await _context.Products\n                .Where(p => productIds.Contains(p.Id))\n                .ToDictionaryAsync(p => p.Id, p => p.Name);\n\n            var result = groupedClicks.Select(g => new ProductCtaBreakdownDto\n            {\n                ProductId = g.ProductId,\n                ProductName = productNames.ContainsKey(g.ProductId) ? productNames[g.ProductId] : \"Unknown\",\n                CTAJourney = g.CTAJourney,\n                ClickCount = g.ClickCount\n            }).ToList();\n\n            return result;\n        }\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/CatalogTrackingService.cs",
      "sha256": "79e5e44c45d327c3c4f281e9f60fe09baac547c05995c848a954edd66d3f349d",
      "language": "csharp",
      "size": 6359,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.PlanManagement.Models;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public class CatalogTrackingService : ICatalogTrackingService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageService _messageService;\n        private readonly ILeadTimelineService _leadTimelineService;\n\n        public CatalogTrackingService(\n            AppDbContext context,\n            IMessageService messageService,\n            ILeadTimelineService leadTimelineService)\n        {\n            _context = context;\n            _messageService = messageService;\n            _leadTimelineService = leadTimelineService;\n        }\n\n        public async Task<ResponseResult> LogClickAsync(CatalogClickLogDto dto)\n        {\n            if (dto == null || dto.BusinessId == Guid.Empty || string.IsNullOrWhiteSpace(dto.UserPhone))\n            {\n                Log.Warning(\"❌ Invalid catalog click log attempt: missing businessId or userPhone.\");\n                return ResponseResult.ErrorInfo(\"Required fields are missing (businessId, userPhone).\");\n            }\n\n            try\n            {\n                Guid? campaignSendLogId = null;\n                Guid? contactId = null;\n                bool followUpSent = false;\n\n                // STEP 1: Link campaign log via RefMessageId if available\n                if (!string.IsNullOrWhiteSpace(dto.RefMessageId))\n                {\n                    var sendLog = await _context.CampaignSendLogs\n                        .FirstOrDefaultAsync(x => x.MessageId == dto.RefMessageId);\n\n                    if (sendLog != null)\n                    {\n                        sendLog.IsClicked = true;\n                        sendLog.ClickedAt = DateTime.UtcNow;\n                        sendLog.ClickType = dto.CTAJourney ?? dto.ButtonText;\n                        campaignSendLogId = sendLog.Id;\n                    }\n                }\n\n                // STEP 2: Link or Create CRM Contact\n                if (!string.IsNullOrWhiteSpace(dto.UserPhone))\n                {\n                    var contact = await _context.Contacts\n                        .FirstOrDefaultAsync(c => c.PhoneNumber == dto.UserPhone && c.BusinessId == dto.BusinessId);\n\n                    if (contact == null)\n                    {\n                        contact = new Contact\n                        {\n                            Id = Guid.NewGuid(),\n                            Name = dto.UserName ?? \"Lead\",\n                            PhoneNumber = dto.UserPhone,\n                            BusinessId = dto.BusinessId,\n                            CreatedAt = DateTime.UtcNow\n                        };\n                        _context.Contacts.Add(contact);\n                        await _context.SaveChangesAsync();\n                    }\n\n                    contactId = contact.Id;\n\n                    // STEP 3: Auto follow-up if plan allows\n                    var business = await _context.Businesses\n                        .AsNoTracking()\n                        .FirstOrDefaultAsync(b => b.Id == dto.BusinessId);\n\n                    if (business?.BusinessPlanInfo?.Plan == PlanType.Advanced)\n                    {\n                        var message = $\"Hi {contact.Name ?? \"there\"}, how can I help you?\";\n                        await _messageService.SendFollowUpAsync(contact.PhoneNumber, message);\n                        followUpSent = true;\n                    }\n                }\n\n                // STEP 4: Save the click with all linked data\n                var log = new CatalogClickLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ProductId = dto.ProductId,\n                    UserId = dto.UserId,\n                    UserName = dto.UserName,\n                    UserPhone = dto.UserPhone,\n                    BotId = dto.BotId,\n                    CategoryBrowsed = dto.CategoryBrowsed,\n                    ProductBrowsed = dto.ProductBrowsed,\n                    CTAJourney = dto.CTAJourney,\n                    TemplateId = dto.TemplateId,\n                    ButtonText = dto.ButtonText,\n                    RefMessageId = dto.RefMessageId,\n                    ClickedAt = DateTime.UtcNow,\n                    CampaignSendLogId = campaignSendLogId,\n                    ContactId = contactId,\n                    FollowUpSent = followUpSent,\n                    LastInteractionType = \"Clicked\",\n                    PlanSnapshot = dto.PlanSnapshot\n                };\n\n                _context.CatalogClickLogs.Add(log);\n                await _context.SaveChangesAsync();\n\n                // STEP 5: Save into LeadTimeline (no await error)\n                await _leadTimelineService.AddFromCatalogClickAsync(log);\n\n                Log.Information(\"📊 Catalog click tracked: {BusinessId}, {UserPhone}, {CTA}\", dto.BusinessId, dto.UserPhone, dto.CTAJourney);\n                return ResponseResult.SuccessInfo(\"✅ Click tracked successfully.\", log.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to log catalog click\");\n                return ResponseResult.ErrorInfo(\"❌ Error while tracking catalog click.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> GetRecentLogsAsync(int limit)\n        {\n            try\n            {\n                var logs = await _context.CatalogClickLogs\n                    .OrderByDescending(x => x.ClickedAt)\n                    .Take(limit)\n                    .ToListAsync();\n\n                return ResponseResult.SuccessInfo(\"Recent logs fetched.\", logs);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to fetch recent catalog click logs\");\n                return ResponseResult.ErrorInfo(\"Failed to fetch logs.\", ex.Message);\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/ICatalogDashboardService.cs",
      "sha256": "9cac16574ec18c7343c13d49a28395b9ab04bf296e8d7b910b05d1cc88378a7d",
      "language": "csharp",
      "size": 546,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public interface ICatalogDashboardService\n    {\n        Task<CatalogDashboardSummaryDto> GetDashboardSummaryAsync(Guid businessId);\n        Task<List<TopProductDto>> GetTopClickedProductsAsync(Guid businessId, int topN = 5);\n        Task<List<CtaJourneyStatsDto>> GetCtaJourneyStatsAsync(Guid businessId);\n        Task<List<ProductCtaBreakdownDto>> GetProductCtaBreakdownAsync(Guid businessId);\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/ICatalogTrackingService.cs",
      "sha256": "b9ea119f807697f7e52cbea8b7c3aa4320c2ffe23326d076d1d1f0f9a2f12310",
      "language": "csharp",
      "size": 342,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public interface ICatalogTrackingService\n    {\n        Task<ResponseResult> LogClickAsync(CatalogClickLogDto dto);\n        Task<ResponseResult> GetRecentLogsAsync(int limit);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/IProductService.cs",
      "sha256": "23245f8c5da029c4146e515732f03b3e815636c1fddfec0f38a3a26355bdc1b1",
      "language": "csharp",
      "size": 510,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public interface IProductService\n    {\n        Task<ResponseResult> AddProductAsync(CreateProductDto dto);\n        Task<ResponseResult> RemoveProductAsync(Guid id, Guid businessId);\n        Task<ResponseResult> UpdateProductAsync(UpdateProductDto dto);\n        Task<ResponseResult> GetProductsByBusinessIdAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/ProductService.cs",
      "sha256": "b42253a9398257b4f84555e31c4423127d843bd60b73560f7730b71433d17fd0",
      "language": "csharp",
      "size": 5527,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public class ProductService : IProductService\n    {\n        private readonly AppDbContext _context;\n\n        public ProductService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<ResponseResult> AddProductAsync(CreateProductDto dto)\n        {\n            try\n            {\n                var exists = await _context.Products\n                    .AnyAsync(p => p.BusinessId == dto.BusinessId && p.Name == dto.Name);\n\n                if (exists)\n                {\n                    Log.Warning(\"❌ Duplicate product add attempt: {ProductName} for BusinessId: {BusinessId}\", dto.Name, dto.BusinessId);\n                    return ResponseResult.ErrorInfo(\"Product with this name already exists.\");\n                }\n\n                var newProduct = new Product\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    Name = dto.Name,\n                    Description = dto.Description,\n                    Price = dto.Price,\n                    Currency = dto.Currency,\n                    ImageUrl = dto.ImageUrl,\n                    IsActive = true,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _context.Products.AddAsync(newProduct);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Product created: {ProductName} ({ProductId})\", dto.Name, newProduct.Id);\n                return ResponseResult.SuccessInfo(\"✅ Product added successfully.\", newProduct.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to add product: {ProductName}\", dto.Name);\n                return ResponseResult.ErrorInfo(\"Failed to add product.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> RemoveProductAsync(Guid id, Guid businessId)\n        {\n            try\n            {\n                var product = await _context.Products\n                    .FirstOrDefaultAsync(p => p.Id == id && p.BusinessId == businessId);\n\n                if (product == null)\n                {\n                    Log.Warning(\"❌ Attempted to delete non-existent product: {ProductId}\", id);\n                    return ResponseResult.ErrorInfo(\"Product not found.\");\n                }\n\n                _context.Products.Remove(product);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"🗑️ Product deleted: {ProductId}\", id);\n                return ResponseResult.SuccessInfo(\"🗑️ Product deleted.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to delete product: {ProductId}\", id);\n                return ResponseResult.ErrorInfo(\"Failed to delete product.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> UpdateProductAsync(UpdateProductDto dto)\n        {\n            try\n            {\n                var product = await _context.Products\n                    .FirstOrDefaultAsync(p => p.Id == dto.Id && p.BusinessId == dto.BusinessId);\n\n                if (product == null)\n                {\n                    Log.Warning(\"❌ Attempted to update non-existent product: {ProductId}\", dto.Id);\n                    return ResponseResult.ErrorInfo(\"Product not found.\");\n                }\n\n                product.Name = dto.Name;\n                product.Description = dto.Description;\n                product.Price = dto.Price;\n                product.Currency = dto.Currency;\n                product.ImageUrl = dto.ImageUrl;\n\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Product updated: {ProductId}\", dto.Id);\n                return ResponseResult.SuccessInfo(\"✅ Product updated.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to update product: {ProductId}\", dto.Id);\n                return ResponseResult.ErrorInfo(\"Failed to update product.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> GetProductsByBusinessIdAsync(Guid businessId)\n        {\n            try\n            {\n                var products = await _context.Products\n                    .Where(p => p.BusinessId == businessId && p.IsActive)\n                    .Select(p => new ProductDto\n                    {\n                        Id = p.Id,\n                        BusinessId = p.BusinessId,\n                        Name = p.Name,\n                        Description = p.Description,\n                        Price = p.Price,\n                        Currency = p.Currency,\n                        ImageUrl = p.ImageUrl,\n                        IsActive = p.IsActive\n                    })\n                    .ToListAsync();\n\n                return ResponseResult.SuccessInfo(\"Products fetched.\", products);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to fetch products for BusinessId: {BusinessId}\", businessId);\n                return ResponseResult.ErrorInfo(\"Failed to fetch products.\", ex.Message);\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CrmAnalytics/Controllers/CrmAnalyticsController.cs",
      "sha256": "9148ea0201bfa24665b2fc92339cec7f58019baa66443aba80189bc1a4c9c833",
      "language": "csharp",
      "size": 1948,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CrmAnalytics.Services;\nusing xbytechat.api.Shared;\nusing System.Security.Claims;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.CrmAnalytics.Controllers\n{\n    /// <summary>\n    /// Handles CRM analytics summary and trends.\n    /// </summary>\n    [ApiController]\n    [Route(\"api/crm\")]\n    public class CrmAnalyticsController : ControllerBase\n    {\n        private readonly ICrmAnalyticsService _crmAnalyticsService;\n\n        public CrmAnalyticsController(ICrmAnalyticsService crmAnalyticsService)\n        {\n            _crmAnalyticsService = crmAnalyticsService;\n        }\n\n        /// <summary>\n        /// Returns dashboard summary stats for the CRM.\n        /// </summary>\n        [HttpGet(\"summary\")]\n        public async Task<IActionResult> GetSummary()\n        {\n            var businessId = GetBusinessIdFromContext();\n            var result = await _crmAnalyticsService.GetSummaryAsync(businessId);\n            return Ok(ResponseResult.SuccessInfo(\"📊 CRM analytics loaded successfully.\", result));\n        }\n\n        /// <summary>\n        /// Returns contacts-added-over-time trend for graph.\n        /// </summary>\n        [HttpGet(\"trends/contacts\")]\n        public async Task<IActionResult> GetContactTrends()\n        {\n            var businessId = GetBusinessIdFromContext();\n            var result = await _crmAnalyticsService.GetContactTrendsAsync(businessId);\n            return Ok(ResponseResult.SuccessInfo(\"📈 Contact trends loaded successfully.\", result));\n        }\n\n        /// <summary>\n        /// Extracts the businessId (Guid) from current user claims.\n        /// </summary>\n        private Guid GetBusinessIdFromContext()\n        {\n            return Guid.TryParse(HttpContext.User.FindFirst(\"BusinessId\")?.Value, out var id)\n                ? id\n                : Guid.Empty;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CrmAnalytics/DTOs/ContactTrendsDto.cs",
      "sha256": "132d9271e14f9c3f2a65c9241917f67bc8129c91c7050c86a67df545c68419bc",
      "language": "csharp",
      "size": 362,
      "content": "namespace xbytechat.api.Features.CrmAnalytics.DTOs\n{\n    /// <summary>\n    /// Represents the number of contacts added on a specific date.\n    /// Used for trend charting on the CRM dashboard.\n    /// </summary>\n    public class ContactTrendsDto\n    {\n        public string Date { get; set; } // Format: yyyy-MM-dd\n        public int Count { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CrmAnalytics/DTOs/CrmAnalyticsSummaryDto.cs",
      "sha256": "73027ff6ddc0b680b03714267bbf642053cdc28f2d97c16b593a3321186ab9d9",
      "language": "csharp",
      "size": 619,
      "content": "namespace xbytechat.api.Features.CrmAnalytics.DTOs\n{\n    public class CrmAnalyticsSummaryDto\n    {\n        public int TotalContacts { get; set; }\n        public int TaggedContacts { get; set; }\n        public int ActiveReminders { get; set; }\n        public int CompletedReminders { get; set; }\n        public int TotalNotes { get; set; }\n        public int LeadsWithTimeline { get; set; }\n        public int NewContactsToday { get; set; }\n        public int NotesAddedToday { get; set; }\n        public DateTime? LastContactAddedAt { get; set; }\n        public DateTime? LastReminderCompletedAt { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CrmAnalytics/Services/CrmAnalyticsService.cs",
      "sha256": "8fae1f725576dc5f6402559df557282ba8991f65bb324b614a65b4e9225167c5",
      "language": "csharp",
      "size": 4014,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CrmAnalytics.DTOs;\nusing xbytechat.api.Features.CrmAnalytics.Services;\n\nnamespace xbytechat.api.Features.CrmAnalytics.Services\n{\n    /// <summary>\n    /// Provides implementation for CRM analytics calculations.\n    /// Gathers contact, tag, note, and reminder metrics for the dashboard.\n    /// </summary>\n    public class CrmAnalyticsService : ICrmAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public CrmAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        /// <summary>\n        /// Generates a summarized snapshot of CRM data for the given business.\n        /// </summary>\n        /// <param name=\"businessId\">The unique ID of the business</param>\n        /// <returns>CrmAnalyticsSummaryDto containing insights</returns>\n        public async Task<CrmAnalyticsSummaryDto> GetSummaryAsync(Guid businessId)\n        {\n            var today = DateTime.UtcNow.Date;\n\n            var totalContacts = await _context.Contacts\n                .CountAsync(c => c.BusinessId == businessId);\n\n            var taggedContacts = await _context.Contacts\n                .Where(c => c.BusinessId == businessId && c.Tags.Any())\n                .CountAsync();\n\n            var activeReminders = await _context.Reminders\n                .CountAsync(r => r.BusinessId == businessId && r.Status == \"Pending\");\n\n            var completedReminders = await _context.Reminders\n                .CountAsync(r => r.BusinessId == businessId && r.Status == \"Completed\");\n\n            var totalNotes = await _context.Notes\n                .CountAsync(n => n.BusinessId == businessId);\n\n            var leadsWithTimeline = await _context.LeadTimelines\n                .Where(t => t.BusinessId == businessId)\n                .Select(t => t.ContactId)\n                .Distinct()\n                .CountAsync();\n\n            var newContactsToday = await _context.Contacts\n                .CountAsync(c => c.BusinessId == businessId && c.CreatedAt.Date == today);\n\n            var notesAddedToday = await _context.Notes\n                .CountAsync(n => n.BusinessId == businessId && n.CreatedAt.Date == today);\n\n            var lastContactAddedAt = await _context.Contacts\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => (DateTime?)c.CreatedAt)\n                .FirstOrDefaultAsync();\n\n            var lastReminderCompletedAt = await _context.Reminders\n                .Where(r => r.BusinessId == businessId && r.Status == \"Completed\")\n                .OrderByDescending(r => r.CompletedAt)\n                .Select(r => (DateTime?)r.CompletedAt)\n                .FirstOrDefaultAsync();\n\n            return new CrmAnalyticsSummaryDto\n            {\n                TotalContacts = totalContacts,\n                TaggedContacts = taggedContacts,\n                ActiveReminders = activeReminders,\n                CompletedReminders = completedReminders,\n                TotalNotes = totalNotes,\n                LeadsWithTimeline = leadsWithTimeline,\n                NewContactsToday = newContactsToday,\n                NotesAddedToday = notesAddedToday,\n                LastContactAddedAt = lastContactAddedAt,\n                LastReminderCompletedAt = lastReminderCompletedAt\n            };\n        }\n        public async Task<List<ContactTrendsDto>> GetContactTrendsAsync(Guid businessId)\n        {\n            var trends = await _context.Contacts\n                .Where(c => c.BusinessId == businessId)\n                .GroupBy(c => c.CreatedAt.Date)\n                .OrderBy(g => g.Key)\n                .Select(g => new ContactTrendsDto\n                {\n                    Date = g.Key.ToString(\"yyyy-MM-dd\"),\n                    Count = g.Count()\n                })\n                .ToListAsync();\n\n            return trends;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CrmAnalytics/Services/ICrmAnalyticsService.cs",
      "sha256": "24d70810ed26415792ab48592900090d8d1b7682d926e46f4bdc4595b24c5659",
      "language": "csharp",
      "size": 895,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CrmAnalytics.DTOs;\n\nnamespace xbytechat.api.Features.CrmAnalytics.Services\n{\n    /// <summary>\n    /// Defines the contract for CRM Analytics services.\n    /// Handles lead-level analytics, summary metrics, and dashboard insights.\n    /// </summary>\n    public interface ICrmAnalyticsService\n    {\n        /// <summary>\n        /// Returns a summarized view of CRM statistics for a specific business.\n        /// This is used to power the CRM analytics dashboard.\n        /// </summary>\n        /// <param name=\"businessId\">The unique identifier of the business (tenant).</param>\n        /// <returns>A summary DTO containing contact, tag, note, and reminder insights.</returns>\n        Task<CrmAnalyticsSummaryDto> GetSummaryAsync(Guid businessId);\n        Task<List<ContactTrendsDto>> GetContactTrendsAsync(Guid businessId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CsvModule/CsvBatchValidationController.cs",
      "sha256": "daf00037fbe7c0f74272fe6dd650de7918d6f2f9a1bf91e40b01039a0e04f9cc",
      "language": "csharp",
      "size": 7225,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Shared;\nusing xbytechat_api.WhatsAppSettings.Services; // User.GetBusinessId()\n\nnamespace xbytechat.api.Features.CsvModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/csv/batch/{batchId:guid}/validate\")]\n    [Authorize]\n    public sealed class CsvBatchValidationController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        public CsvBatchValidationController(AppDbContext db) => _db = db;\n\n        public sealed class ValidateRequest\n        {\n            public string? PhoneHeader { get; set; }              // e.g. \"phone\"\n            public List<string>? RequiredHeaders { get; set; }    // e.g. [\"parameter1\",\"headerpara1\",\"buttonpara1\"]\n            public bool NormalizePhone { get; set; } = true;\n            public bool CheckDuplicates { get; set; } = true;\n            public int? Limit { get; set; }                       // optional sample cap\n        }\n\n        public sealed class ValidateResponse\n        {\n            public bool Success { get; set; } = true;\n            public List<string> Problems { get; set; } = new();\n            public object Stats { get; set; } = new { rows = 0, missingPhone = 0, invalidPhones = 0, duplicatePhones = 0 };\n            public List<string> Headers { get; set; } = new();    // discovered headers in the batch\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Validate(Guid batchId, [FromBody] ValidateRequest req, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            // Load CSV rows for this batch (owned by business)\n            var rowsQ = _db.CsvRows\n                .AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.BatchId == batchId)\n                .OrderBy(r => r.RowIndex);\n\n            var total = await rowsQ.CountAsync(ct);\n            if (total == 0)\n                return Ok(new ValidateResponse\n                {\n                    Problems = new List<string> { \"CSV batch is empty.\" },\n                    Stats = new { rows = 0, missingPhone = 0, invalidPhones = 0, duplicatePhones = 0 },\n                    Headers = new List<string>()\n                });\n\n            var rows = req.Limit.HasValue && req.Limit.Value > 0\n                ? await rowsQ.Take(req.Limit.Value).ToListAsync(ct)\n                : await rowsQ.ToListAsync(ct);\n\n            // Discover header set by union of row keys (case-insensitive compare)\n            var headerSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n            foreach (var r in rows)\n                foreach (var k in KeysOfJson(r.DataJson))\n                    headerSet.Add(k);\n\n            var headers = headerSet.OrderBy(x => x, StringComparer.OrdinalIgnoreCase).ToList();\n\n            var problems = new List<string>();\n\n            // Validate phone header presence\n            var phoneHeader = (req.PhoneHeader ?? \"\").Trim();\n            if (string.IsNullOrWhiteSpace(phoneHeader))\n            {\n                // Try helpful guesses\n                var guesses = new[] { \"phone\", \"mobile\", \"whatsapp\", \"number\", \"phonee164\", \"msisdn\", \"whatsapp_number\" };\n                var guess = guesses.FirstOrDefault(h => headerSet.Contains(h));\n                if (!string.IsNullOrEmpty(guess))\n                    phoneHeader = guess;\n            }\n\n            if (string.IsNullOrWhiteSpace(phoneHeader))\n            {\n                problems.Add(\"Phone column not specified and could not be guessed.\");\n            }\n            else if (!headerSet.Contains(phoneHeader))\n            {\n                problems.Add($\"Phone column “{phoneHeader}” not found in CSV.\");\n            }\n\n            // Validate requiredHeaders presence (parameterN/headerparaN/buttonparaN)\n            var required = req.RequiredHeaders ?? new List<string>();\n            foreach (var h in required)\n            {\n                if (!headerSet.Contains(h))\n                    problems.Add($\"Required column “{h}” is missing.\");\n            }\n\n            // Row-level checks\n            int missingPhone = 0, invalidPhones = 0, duplicatePhones = 0;\n            var seen = new HashSet<string>(StringComparer.Ordinal);\n\n            foreach (var r in rows)\n            {\n                var dict = JsonToDict(r.DataJson);\n\n                // phone\n                string? rawPhone = null;\n                if (!string.IsNullOrWhiteSpace(phoneHeader))\n                    dict.TryGetValue(phoneHeader, out rawPhone);\n\n                var normPhone = NormalizePhoneMaybe(rawPhone, req.NormalizePhone);\n                if (string.IsNullOrWhiteSpace(normPhone))\n                {\n                    missingPhone++;\n                    continue;\n                }\n\n                // naive validity check\n                if (!Regex.IsMatch(normPhone, @\"^\\d{10,15}$\"))\n                {\n                    invalidPhones++;\n                }\n\n                if (req.CheckDuplicates && !seen.Add(normPhone))\n                {\n                    duplicatePhones++;\n                }\n            }\n\n            var resp = new ValidateResponse\n            {\n                Problems = problems,\n                Stats = new { rows = total, missingPhone, invalidPhones, duplicatePhones },\n                Headers = headers\n            };\n\n            return Ok(resp);\n        }\n\n        // ---------- helpers ----------\n        private static IEnumerable<string> KeysOfJson(string? json)\n        {\n            if (string.IsNullOrWhiteSpace(json)) yield break;\n            using var doc = JsonDocument.Parse(json);\n            if (doc.RootElement.ValueKind != JsonValueKind.Object) yield break;\n            foreach (var p in doc.RootElement.EnumerateObject())\n                yield return p.Name;\n        }\n\n        private static Dictionary<string, string> JsonToDict(string? json)\n        {\n            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            if (string.IsNullOrWhiteSpace(json)) return dict;\n            using var doc = JsonDocument.Parse(json);\n            if (doc.RootElement.ValueKind != JsonValueKind.Object) return dict;\n            foreach (var p in doc.RootElement.EnumerateObject())\n                dict[p.Name] = p.Value.ValueKind == JsonValueKind.Null ? \"\" : p.Value.ToString();\n            return dict;\n        }\n\n        private static string? NormalizePhoneMaybe(string? raw, bool normalize)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var trimmed = raw.Trim();\n            if (!normalize) return trimmed;\n\n            // simple E.164-ish cleanup\n            var digits = Regex.Replace(trimmed, \"[^0-9]\", \"\");\n            digits = digits.TrimStart('0');\n            if (digits.Length == 10) digits = \"91\" + digits; // heuristic India\n            return digits;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Controllers/CTAFlowController.cs",
      "sha256": "ae0976baa15c4292f6fdc76a5e1b8810652df67fc18524f60eaf58037c5e4038",
      "language": "csharp",
      "size": 34615,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/cta-flow\")]\n    public class CTAFlowController : ControllerBase\n    {\n        private readonly ICTAFlowService _flowService;\n\n        public CTAFlowController(ICTAFlowService flowService)\n        {\n            _flowService = flowService;\n        }\n\n        // CREATE (draft-only)\n        [HttpPost(\"save-visual\")]\n        public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(new { message = \"❌ Invalid business ID\" });\n\n            Log.Information(\"📦 Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n            var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n            if (!result.Success)\n            {\n                var m = (result.ErrorMessage ?? \"\").Trim();\n\n                // map common validation/conflict by message text (no result.Code available)\n                if (m.Contains(\"already exists\", StringComparison.OrdinalIgnoreCase))\n                    return Conflict(new { message = \"❌ Duplicate flow name\", error = m });\n\n                if (m.Contains(\"required\", StringComparison.OrdinalIgnoreCase) ||\n                    m.Contains(\"empty flow\", StringComparison.OrdinalIgnoreCase) ||\n                    m.Contains(\"invalid\", StringComparison.OrdinalIgnoreCase))\n                    return BadRequest(new { message = \"❌ Failed to save flow\", error = m });\n\n                return StatusCode(StatusCodes.Status500InternalServerError,\n                    new { message = \"❌ Failed to save flow\", error = string.IsNullOrWhiteSpace(m) ? \"Unknown error\" : m });\n            }\n\n            Guid? flowId = null;\n            if (result.Data is not null)\n            {\n                try { dynamic d = result.Data; flowId = (Guid?)d.flowId; } catch { }\n            }\n\n            return Ok(new { message = \"✅ Flow saved successfully\", flowId });\n        }\n\n        // PUBLISH (by id)\n        [HttpPost(\"{id:guid}/publish\")]\n        public async Task<IActionResult> Publish(Guid id)\n        {\n            var biz = User.FindFirst(\"businessId\")?.Value;\n            var user = User.FindFirst(\"name\")?.Value ?? \"system\";\n            if (!Guid.TryParse(biz, out var businessId))\n                return BadRequest(new { message = \"❌ Invalid business.\" });\n\n            var ok = await _flowService.PublishFlowAsync(id, businessId, user);\n            return ok ? Ok(new { message = \"✅ Flow published.\" }) : NotFound(new { message = \"❌ Flow not found.\" });\n        }\n\n        // DELETE (only if not attached)\n        [HttpDelete(\"{id:guid}\")]\n        public async Task<IActionResult> Delete(Guid id)\n        {\n            var biz = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(biz, out var businessId))\n                return BadRequest(new { message = \"❌ Invalid business.\" });\n\n            var deletedBy = User.FindFirst(\"name\")?.Value\n                          ?? User.FindFirst(\"email\")?.Value\n                          ?? User.FindFirst(\"sub\")?.Value\n                          ?? \"system\";\n\n            var result = await _flowService.DeleteFlowAsync(id, businessId, deletedBy);\n\n            if (!result.Success)\n            {\n                var msg = (result.ErrorMessage ?? result.Message ?? string.Empty).Trim();\n\n                // If message says it's attached, return 409 and include campaigns for the modal\n                if (msg.Contains(\"attached\", StringComparison.OrdinalIgnoreCase) ||\n                    msg.Contains(\"Cannot delete\", StringComparison.OrdinalIgnoreCase))\n                {\n                    var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);\n                    return Conflict(new { message = msg, campaigns });\n                }\n\n                if (msg.Contains(\"not found\", StringComparison.OrdinalIgnoreCase))\n                    return NotFound(new { message = msg });\n\n                return BadRequest(new { message = string.IsNullOrWhiteSpace(msg) ? \"Delete failed.\" : msg });\n            }\n\n            return Ok(new { message = result.Message ?? \"✅ Flow deleted.\" });\n        }\n\n        // LISTS\n        [HttpGet(\"all-published\")]\n        public async Task<IActionResult> GetPublishedFlows()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(new { message = \"❌ Invalid business ID\" });\n\n            var flows = await _flowService.GetAllPublishedFlowsAsync(businessId);\n            return Ok(flows);\n        }\n\n        [HttpGet(\"all-draft\")]\n        public async Task<IActionResult> GetAllDraftFlows()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(new { message = \"❌ Invalid business ID\" });\n\n            var flows = await _flowService.GetAllDraftFlowsAsync(businessId);\n            return Ok(flows);\n        }\n\n        // DETAIL\n        [HttpGet(\"by-id/{id:guid}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(new { message = \"❌ Invalid business ID\" });\n\n            var dto = await _flowService.GetVisualFlowByIdAsync(id, businessId);\n            if (dto is null) return NotFound(new { message = \"❌ Flow not found.\" });\n\n            return Ok(dto);\n        }\n\n        [HttpGet(\"visual/{id:guid}\")]\n        public async Task<IActionResult> GetVisualFlow(Guid id)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(new { message = \"❌ Invalid business ID\" });\n\n            var result = await _flowService.GetVisualFlowAsync(id, businessId);\n            if (!result.Success)\n            {\n                var m = (result.ErrorMessage ?? string.Empty).Trim();\n                if (m.Contains(\"not found\", StringComparison.OrdinalIgnoreCase))\n                    return NotFound(new { message = \"❌ Failed to load flow\", error = m });\n\n                return StatusCode(StatusCodes.Status500InternalServerError,\n                    new { message = \"❌ Failed to load flow\", error = string.IsNullOrWhiteSpace(m) ? \"Unknown error\" : m });\n            }\n\n            return Ok(result.Data);\n        }\n\n        // USAGE (for delete guard)\n        [HttpGet(\"{id:guid}/usage\")]\n        public async Task<IActionResult> GetUsage(Guid id)\n        {\n            var biz = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(biz, out var businessId))\n                return BadRequest(new { message = \"Invalid business.\" });\n\n            var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);\n            return Ok(new\n            {\n                canDelete = campaigns.Count == 0,\n                count = campaigns.Count,\n                campaigns\n            });\n        }\n    }\n}\n\n\n//// 📄 File: Features/CTAFlowBuilder/Controllers/CTAFlowController.cs\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using Microsoft.EntityFrameworkCore;\n//using Serilog;\n//using xbytechat.api.Features.CTAFlowBuilder.DTOs;\n//using xbytechat.api.Features.CTAFlowBuilder.Models;\n//using xbytechat.api.Features.CTAFlowBuilder.Services;\n//using xbytechat.api.Features.MessagesEngine.DTOs;\n//using xbytechat.api.Features.MessagesEngine.Services;\n//using xbytechat.api.Features.Tracking.Models;\n//using xbytechat.api.Features.Tracking.Services;\n//using xbytechat.api.Helpers;\n//using xbytechat.api.Shared;\n\n\n//namespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/cta-flow\")]\n//    public class CTAFlowController : ControllerBase\n//    {\n//        private readonly ICTAFlowService _flowService;\n//        private readonly IMessageEngineService _messageEngineService;\n//        private readonly ITrackingService _trackingService;\n//        public CTAFlowController(ICTAFlowService flowService, IMessageEngineService messageEngineService, ITrackingService trackingService)\n//        {\n//            _flowService = flowService;\n//            _messageEngineService = messageEngineService;\n//            _trackingService = trackingService;\n//        }\n\n//        [HttpPost(\"create\")]\n//        public async Task<IActionResult> CreateFlow([FromBody] CreateFlowDto dto)\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"❌ Invalid or missing businessId claim.\");\n\n//            var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);\n//            return Ok(new { flowId = id });\n//        }\n\n//        //[HttpPost(\"publish\")]\n//        //public async Task<IActionResult> PublishFlow([FromBody] List<FlowStepDto> steps)\n//        //{\n//        //    var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//        //    var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//        //    if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n//        //        return BadRequest(\"❌ Invalid or missing businessId claim.\");\n\n//        //    var result = await _flowService.PublishFlowAsync(businessId, steps, createdBy);\n//        //    if (!result.Success)\n//        //        return BadRequest(result.Message);\n\n//        //    return Ok(\"✅ Flow published successfully.\");\n//        //}\n\n//        [HttpGet(\"current\")]\n//        public async Task<IActionResult> GetFlow()\n//        {\n//            var businessIdHeader = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdHeader, out var businessId))\n//                return BadRequest(\"❌ Invalid or missing BusinessId header.\");\n\n//            var flow = await _flowService.GetFlowByBusinessAsync(businessId);\n\n//            // ✅ Always return 200 even if flow is null\n//            return Ok(flow);\n//        }\n\n//        [HttpGet(\"draft\")]\n//        public async Task<IActionResult> GetDraftFlow()\n//        {\n//            var businessIdHeader = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdHeader, out var businessId))\n//                return BadRequest(\"❌ Invalid or missing BusinessId header.\");\n\n//            var draft = await _flowService.GetDraftFlowByBusinessAsync(businessId);\n//            if (draft == null)\n//                return NotFound(\"❌ No draft flow found.\");\n\n//            return Ok(draft);\n//        }\n\n//        [HttpGet(\"match\")]\n//        public async Task<IActionResult> MatchButton(\n//            [FromQuery] string text,\n//            [FromQuery] string type,\n//            [FromQuery] string currentTemplateName,\n//            [FromQuery] Guid? campaignId) // Optional\n//        {\n//            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value!);\n\n//            var step = await _flowService.MatchStepByButtonAsync(\n//                businessId,\n//                text,\n//                type,\n//                currentTemplateName,\n//                campaignId\n//            );\n\n//            if (step == null)\n//                return NotFound(\"❌ No matching step found.\");\n\n//            return Ok(new\n//            {\n//                step.TemplateToSend,\n//                step.TriggerButtonText,\n//                step.TriggerButtonType\n//            });\n//        }\n\n//        //[HttpPost(\"save-visual\")]\n//        //public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n//        //{\n//        //    var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//        //    var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//        //    if (!Guid.TryParse(businessIdClaim, out var businessId))\n//        //        return BadRequest(\"❌ Invalid business ID\");\n\n//        //    Log.Information(\"📦 Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n//        //    var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n//        //    if (!result.Success)\n//        //    {\n//        //        Log.Error(\"❌ Failed to save flow. Error: {Error}. DTO: {@Dto}\", result.ErrorMessage, dto);\n//        //        return StatusCode(500, new\n//        //        {\n//        //            message = \"❌ Failed to save flow\",\n//        //            error = result.ErrorMessage,\n//        //            // skipped = result.SkippedNodes ?? 0\n//        //        });\n//        //    }\n\n//        //    return Ok(new\n//        //    {\n//        //        message = \"✅ Flow saved successfully\"\n//        //    });\n//        //}\n\n//        //[HttpPost(\"save-visual\")]\n//        //public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n//        //{\n//        //    var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//        //    var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//        //    if (!Guid.TryParse(businessIdClaim, out var businessId))\n//        //        return BadRequest(\"❌ Invalid business ID\");\n\n//        //    Log.Information(\"📦 Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n//        //    var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n//        //    if (!result.Success)\n//        //    {\n//        //        Log.Error(\"❌ Failed to save flow. Error: {Error}. DTO: {@Dto}\", result.ErrorMessage, dto);\n//        //        return StatusCode(500, new\n//        //        {\n//        //            message = \"❌ Failed to save flow\",\n//        //            error = result.ErrorMessage\n//        //        });\n//        //    }\n\n//        //    // Try to extract flowId from the service result (supports several shapes).\n//        //    Guid? flowId = null;\n//        //    try\n//        //    {\n//        //        switch (result.Data)\n//        //        {\n//        //            case Guid g:\n//        //                flowId = g;\n//        //                break;\n\n//        //            case string s when Guid.TryParse(s, out var gs):\n//        //                flowId = gs;\n//        //                break;\n\n//        //            case { } obj:\n//        //                // look for a property literally named \"flowId\"\n//        //                var prop = obj.GetType().GetProperty(\"flowId\")\n//        //                           ?? obj.GetType().GetProperty(\"FlowId\");\n//        //                if (prop?.GetValue(obj) is Guid pg)\n//        //                    flowId = pg;\n//        //                else if (prop?.GetValue(obj) is string ps && Guid.TryParse(ps, out var pgs))\n//        //                    flowId = pgs;\n//        //                break;\n//        //        }\n//        //    }\n//        //    catch\n//        //    {\n//        //        // non-fatal: just return without flowId if reflection fails\n//        //    }\n\n//        //    return Ok(new\n//        //    {\n//        //        message = \"✅ Flow saved successfully\",\n//        //        flowId\n//        //    });\n//        //}\n//        // POST /api/cta-flow/save-visual\n//        // xbytechat.api/Features/CTAFlowBuilder/Controllers/CTAFlowController.cs\n//        [HttpPost(\"save-visual\")]\n//        public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"❌ Invalid business ID\");\n\n//            Log.Information(\"📦 Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n//            var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n\n//            // Helper: classify error message to proper HTTP status\n//            IActionResult ErrorToHttp(string? msg)\n//            {\n//                var m = (msg ?? \"\").Trim();\n\n//                // Validation problems → 400\n//                if (m.Contains(\"Flow name is required\", StringComparison.OrdinalIgnoreCase) ||\n//                    m.Contains(\"Cannot save an empty flow\", StringComparison.OrdinalIgnoreCase) ||\n//                    m.Contains(\"invalid\", StringComparison.OrdinalIgnoreCase))\n//                {\n//                    Log.Warning(\"⚠️ Validation error while saving flow: {Error}\", m);\n//                    return BadRequest(new { message = \"❌ Failed to save flow\", error = m });\n//                }\n\n//                // Duplicate name on create → 409 (frontend will open rename modal)\n//                if (m.Contains(\"already exists\", StringComparison.OrdinalIgnoreCase))\n//                {\n//                    Log.Warning(\"⚠️ Duplicate flow name when creating: {Error}\", m);\n//                    return StatusCode(StatusCodes.Status409Conflict, new\n//                    {\n//                        message = \"❌ Duplicate flow name\",\n//                        error = m\n//                        // intentionally no 'campaigns' array here (FE uses presence of it to show fork modal)\n//                    });\n//                }\n\n//                // Unknown → 500\n//                Log.Error(\"❌ Failed to save flow. Error: {Error}. DTO: {@Dto}\", m, dto);\n//                return StatusCode(StatusCodes.Status500InternalServerError, new\n//                {\n//                    message = \"❌ Failed to save flow\",\n//                    error = string.IsNullOrWhiteSpace(m) ? \"Unknown error\" : m\n//                });\n//            }\n\n//            if (!result.Success)\n//                return ErrorToHttp(result.ErrorMessage);\n\n//            // Expect service to put { flowId = <Guid> } into result.Data\n//            Guid? flowId = null;\n//            if (result.Data is not null)\n//            {\n//                try\n//                {\n//                    if (result.Data is IDictionary<string, object> dict\n//                        && dict.TryGetValue(\"flowId\", out var obj) && obj is Guid g1)\n//                    {\n//                        flowId = g1;\n//                    }\n//                    else\n//                    {\n//                        // dynamic fallback\n//                        dynamic d = result.Data;\n//                        flowId = (Guid?)d.flowId;\n//                    }\n//                }\n//                catch\n//                {\n//                    // ignore shape issues; flowId stays null\n//                }\n//            }\n\n//            return Ok(new\n//            {\n//                message = \"✅ Flow saved successfully\",\n//                flowId\n//            });\n//        }\n\n\n//        //[HttpPost(\"save-visual\")]\n//        //public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n//        //{\n//        //    var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//        //    var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//        //    if (!Guid.TryParse(businessIdClaim, out var businessId))\n//        //        return BadRequest(\"❌ Invalid business ID\");\n\n//        //    Log.Information(\"📦 Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n//        //    var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n//        //    if (!result.Success)\n//        //    {\n//        //        Log.Error(\"❌ Failed to save flow. Error: {Error}. DTO: {@Dto}\", result.ErrorMessage, dto);\n//        //        return StatusCode(500, new\n//        //        {\n//        //            message = \"❌ Failed to save flow\",\n//        //            error = result.ErrorMessage\n//        //        });\n//        //    }\n\n//        //    // Expect service to put { flowId = <Guid> } into result.Data\n//        //    Guid? flowId = null;\n//        //    if (result.Data is not null)\n//        //    {\n//        //        try\n//        //        {\n//        //            // Support anonymous object or dictionary\n//        //            var dict = result.Data as IDictionary<string, object>;\n//        //            if (dict != null && dict.TryGetValue(\"flowId\", out var obj) && obj is Guid g1)\n//        //                flowId = g1;\n//        //            else\n//        //            {\n//        //                // dynamic fallback\n//        //                dynamic d = result.Data;\n//        //                flowId = (Guid?)d.flowId;\n//        //            }\n//        //        }\n//        //        catch { /* ignore shape issues; flowId stays null */ }\n//        //    }\n\n//        //    return Ok(new\n//        //    {\n//        //        message = \"✅ Flow saved successfully\",\n//        //        flowId\n//        //    });\n//        //}\n\n//        [HttpGet(\"{id:guid}/usage\")]\n//        public async Task<IActionResult> GetUsage(Guid id)\n//        {\n//            var biz = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(biz, out var businessId)) return BadRequest(new { message = \"Invalid business.\" });\n\n//            var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);\n//            return Ok(new\n//            {\n//                canDelete = campaigns.Count == 0,\n//                count = campaigns.Count,\n//                campaigns\n//            });\n//        }\n\n//        //[HttpDelete(\"{id:guid}\")]\n//        //public async Task<IActionResult> Delete(Guid id)\n//        //{\n//        //    var biz = User.FindFirst(\"businessId\")?.Value;\n//        //    if (!Guid.TryParse(biz, out var businessId)) return BadRequest(new { message = \"Invalid business.\" });\n\n//        //    // Try hard delete\n//        //    var deleted = await _flowService.HardDeleteFlowIfUnusedAsync(id, businessId);\n//        //    if (deleted) return NoContent();\n\n//        //    // If not deleted, return 409 with who’s attached\n//        //    var campaigns = await _flowService.GetAttachedCampaignsAsync(id, businessId);\n//        //    if (campaigns.Count > 0)\n//        //    {\n//        //        return Conflict(new\n//        //        {\n//        //            message = \"Flow is attached to the following campaign(s). Delete them first, then delete the flow.\",\n//        //            campaigns\n//        //        });\n//        //    }\n\n//        //    // Not found (wrong tenant or already deleted)\n//        //    return NotFound(new { message = \"Flow not found.\" });\n//        //}\n//        // KEEP ONLY THIS ONE DELETE ENDPOINT\n\n//        [HttpDelete(\"{id:guid}\")]\n//        public async Task<IActionResult> Delete(Guid id)\n//        {\n//            var biz = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(biz, out var businessId))\n//                return BadRequest(new { message = \"❌ Invalid business.\" });\n\n//            // who is deleting (audit)\n//            var deletedBy = User.FindFirst(\"name\")?.Value\n//                          ?? User.FindFirst(\"email\")?.Value\n//                          ?? User.FindFirst(\"sub\")?.Value\n//                          ?? \"system\";\n\n//            // Use your service that understands attachment rules and returns codes\n//            var result = await _flowService.DeleteFlowAsync(id, businessId, deletedBy);\n\n//            // Frontend expects 409 to show the modal with attached campaigns\n//            if (!result.Success && result.Code == 409)\n//                return Conflict(new { message = result.Message, campaigns = result.Payload });\n\n//            if (!result.Success && result.Code == 404)\n//                return NotFound(new { message = result.Message });\n\n//            if (!result.Success)\n//                return BadRequest(new { message = result.Message });\n\n//            // FE treats 200 or 204 as success — return 200 with a message\n//            return Ok(new { message = result.Message });\n//        }\n\n\n\n//        [HttpGet(\"all-published\")]\n//        public async Task<IActionResult> GetPublishedFlows()\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"❌ Invalid business ID\");\n\n//            var flows = await _flowService.GetAllPublishedFlowsAsync(businessId);\n//            return Ok(flows);\n//        }\n//        [HttpGet(\"all-draft\")]\n//        public async Task<IActionResult> GetAllDraftFlows()\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"❌ Invalid business ID\");\n\n//            var flows = await _flowService.GetAllDraftFlowsAsync(businessId);\n//            return Ok(flows);\n//        }\n\n\n//        [HttpPost(\"execute-visual\")]\n//        public async Task<IActionResult> ExecuteVisualFlowAsync(\n//            [FromQuery] Guid nextStepId,\n//            [FromQuery] Guid trackingLogId,\n//            // ✅ 1. ADD the new optional parameter to the endpoint\n//            [FromQuery] Guid? campaignSendLogId = null)\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"❌ Invalid business ID\");\n\n//            // ✅ 2. PASS the new parameter to the service call\n//            var result = await _flowService.ExecuteVisualFlowAsync(businessId, nextStepId, trackingLogId, campaignSendLogId);\n\n//            if (result.Success)\n//                return Ok(result);\n//            else\n//                return BadRequest(result);\n//        }\n\n//        [HttpPost(\"create-config\")]\n//        public async Task<IActionResult> CreateConfigFlow([FromBody] CreateFlowDto dto)\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n//            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"❌ Invalid or missing businessId claim.\");\n\n//            try\n//            {\n//                var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);\n\n//                return Ok(new\n//                {\n//                    flowId = id,\n//                    message = \"✅ Flow config created successfully.\"\n//                });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new\n//                {\n//                    error = \"❌ Failed to create flow config.\",\n//                    details = ex.Message\n//                });\n//            }\n//        }\n\n//        [HttpGet(\"by-id/{id:guid}\")]\n//        public async Task<IActionResult> GetById(Guid id)\n//        {\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(\"❌ Invalid business ID\");\n\n//            // Prefer a tenant-aware service method\n//            var dto = await _flowService.GetVisualFlowByIdAsync(id, businessId);\n//            if (dto is null) return NotFound(\"❌ Flow not found.\");\n\n//            return Ok(dto); // { flowName, isPublished, nodes, edges } (camelCase via default JSON options)\n//        }\n\n//        // 📍 Add this to your CTAFlowController\n//        // CTAFlowController.cs  — drop-in replacement for \"get visual flow\" endpoint\n//        [HttpGet(\"visual/{id:guid}\")]\n//        public async Task<IActionResult> GetVisualFlow(Guid id)\n//        {\n//            // business guard\n//            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n//            if (!Guid.TryParse(businessIdClaim, out var businessId))\n//                return BadRequest(new { message = \"❌ Failed to load flow\", error = \"Invalid business ID\" });\n\n//            // ask the service — this RETURNS YOUR ResponseResult, not a DTO\n//            var result = await _flowService.GetVisualFlowAsync(id, businessId);\n\n//            // Uniform error mapping (same style you use in SaveVisualFlow)\n//            if (!result.Success)\n//            {\n//                var m = (result.ErrorMessage ?? string.Empty).Trim();\n\n//                if (m.Contains(\"not found\", StringComparison.OrdinalIgnoreCase))\n//                {\n//                    // 404 when flow id doesn’t exist / not visible for biz\n//                    return NotFound(new { message = \"❌ Failed to load flow\", error = m });\n//                }\n\n//                if (m.Contains(\"forbidden\", StringComparison.OrdinalIgnoreCase) ||\n//                    m.Contains(\"unauthorized\", StringComparison.OrdinalIgnoreCase))\n//                {\n//                    // 403 when biz is not allowed to see this flow\n//                    return StatusCode(StatusCodes.Status403Forbidden,\n//                        new { message = \"❌ Failed to load flow\", error = m });\n//                }\n\n//                // default → 500\n//                return StatusCode(StatusCodes.Status500InternalServerError,\n//                    new { message = \"❌ Failed to load flow\", error = string.IsNullOrWhiteSpace(m) ? \"Unknown error\" : m });\n//            }\n\n//            // SUCCESS: your service already builds the payload (FlowName, IsPublished, Nodes, Edges, etc.)\n//            // Just return it as-is so the FE can consume it.\n//            // Example shape expected by FE:\n//            // { flowName, isPublished, nodes: [...], edges: [...] }\n//            return Ok(result.Data);\n//        }\n\n\n//        //[HttpPut(\"{id:guid}\")]\n//        //public async Task<IActionResult> Update(Guid id, [FromBody] SaveVisualFlowDto dto)\n//        //{\n//        //    var biz = User.FindFirst(\"businessId\")?.Value;\n//        //    var user = User.FindFirst(\"name\")?.Value ?? \"system\";\n//        //    if (!Guid.TryParse(biz, out var businessId)) return BadRequest(\"❌ Invalid business.\");\n\n//        //    var result = await _flowService.UpdateVisualFlowAsync(id, dto, businessId, user);\n//        //    return result.Status switch\n//        //    {\n//        //        \"ok\" => Ok(new { message = \"Flow updated.\", needsRepublish = result.NeedsRepublish }),\n//        //        \"requiresFork\" => Conflict(new { message = result.Message, campaigns = result.Campaigns, requiresFork = true }),\n//        //        \"notFound\" => NotFound(\"❌ Flow not found.\"),\n//        //        _ => BadRequest(new { message = result.Message ?? \"Unknown error\" })\n//        //    };\n//        //}\n\n\n//        [HttpPost(\"{id:guid}/publish\")]\n//        public async Task<IActionResult> Publish(Guid id)\n//        {\n//            var biz = User.FindFirst(\"businessId\")?.Value;\n//            var user = User.FindFirst(\"name\")?.Value ?? \"system\";\n//            if (!Guid.TryParse(biz, out var businessId)) return BadRequest(\"❌ Invalid business.\");\n\n//            var ok = await _flowService.PublishFlowAsync(id, businessId, user);\n//            return ok ? Ok(new { message = \"✅ Flow published.\" }) : NotFound(\"❌ Flow not found.\");\n//        }\n\n\n//        //// 👇 NEW: publish\n//        //[HttpPost(\"{id:guid}/publish\")]\n//        //public async Task<IActionResult> Publish(Guid id)\n//        //{\n//        //    var biz = User.FindFirst(\"businessId\")?.Value;\n//        //    var user = User.FindFirst(\"name\")?.Value ?? \"system\";\n//        //    if (!Guid.TryParse(biz, out var businessId)) return BadRequest(\"❌ Invalid business.\");\n\n//        //    var ok = await _flowService.PublishFlowAsync(id, businessId, user);\n//        //    return ok ? Ok(new { message = \"✅ Flow published.\" }) : NotFound(\"❌ Flow not found.\");\n//        //}\n\n\n\n//        // 👇 NEW: fork (create new draft from live-locked flow)\n//        [HttpPost(\"{id:guid}/fork\")]\n//        public async Task<IActionResult> Fork(Guid id)\n//        {\n//            var biz = User.FindFirst(\"businessId\")?.Value;\n//            var user = User.FindFirst(\"name\")?.Value ?? \"system\";\n//            if (!Guid.TryParse(biz, out var businessId)) return BadRequest(\"❌ Invalid business.\");\n\n//            var forkId = await _flowService.ForkFlowAsync(id, businessId, user);\n//            if (forkId == Guid.Empty) return NotFound(\"❌ Flow not found.\");\n//            return Ok(new { flowId = forkId });\n//        }\n\n//        // 👇 BACK-COMPAT: keep existing delete route AND add /{id}\n//       // [HttpDelete(\"{id:guid}\")]\n//        //public async Task<IActionResult> DeletePlain(Guid id)\n//        //{\n//        //    var biz = User.FindFirst(\"businessId\")?.Value;\n//        //    if (!Guid.TryParse(biz, out var businessId))\n//        //        return BadRequest(\"❌ Invalid business ID\");\n\n//        //    // Capture the user performing the delete\n//        //    var deletedBy = User.FindFirst(\"name\")?.Value\n//        //                 ?? User.FindFirst(\"email\")?.Value\n//        //                 ?? User.FindFirst(\"sub\")?.Value\n//        //                 ?? \"system\";\n\n//        //    var result = await _flowService.DeleteFlowAsync(id, businessId, deletedBy);\n\n//        //    if (!result.Success && result.Code == 409)\n//        //        return Conflict(new { message = result.Message, campaigns = result.Payload });\n\n//        //    if (!result.Success && result.Code == 404)\n//        //        return NotFound(new { message = result.Message });\n\n//        //    if (!result.Success)\n//        //        return BadRequest(new { message = result.Message });\n\n//        //    return Ok(new { message = result.Message });\n//        //}\n\n//    }\n\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Controllers/FlowRedirectController.cs",
      "sha256": "8d5442a0a0fdb92dc7d69837cd74af882b22c6cf35ce999a7b87bfde5b27e7ca",
      "language": "csharp",
      "size": 2686,
      "content": "// 📄 Features/CTAFlowBuilder/Controllers/FlowRedirectController.cs\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Infrastructure.Flows;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing Microsoft.AspNetCore.Authorization;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"r/flow\")]\n    public class FlowRedirectController : ControllerBase\n    {\n        private readonly IFlowClickTokenService _tokens;\n        private readonly ICTAFlowService _flows;           // service to read flow steps/links\n        private readonly IFlowRuntimeService _runtime;     // service to execute next step\n\n        public FlowRedirectController(\n            IFlowClickTokenService tokens,\n            ICTAFlowService flows,\n            IFlowRuntimeService runtime)\n        {\n            _tokens = tokens;\n            _flows = flows;\n            _runtime = runtime;\n        }\n\n        [HttpGet(\"{token}\")]\n        [AllowAnonymous] // secure by token, tenant checks inside\n        public async Task<IActionResult> RedirectByToken(string token)\n        {\n            FlowClickPayload p;\n            try\n            {\n                p = _tokens.Validate(token);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest($\"Invalid or expired token: {ex.Message}\");\n            }\n\n            // 🔒 Tenant isolation: make sure the business in the token matches the current request context\n            // (if you have multi-tenant enforcement middleware, call it here)\n\n            // 1) Resolve the button link\n            var link = await _flows.GetLinkAsync(p.fid, p.sid, p.bi);\n            if (link is null)\n                return NotFound(\"Link not found for this flow step\");\n\n            var requestId = Guid.NewGuid(); // for idempotency\n            var exec = await _runtime.ExecuteNextAsync(new NextStepContext\n            {\n                BusinessId = p.biz,\n                FlowId = p.fid,\n                Version = p.ver,\n                SourceStepId = p.sid,\n                TargetStepId = link.NextStepId, // may be null → terminal\n                ButtonIndex = p.bi,\n                MessageLogId = p.mlid,\n                ContactPhone = p.cp,\n                RequestId = requestId,\n\n                // 🆕 Pass the clicked button for runtime decision\n                ClickedButton = link\n            });\n\n\n            // 3) Redirect the user\n            // If button was a URL, use that; else go to a generic \"thank you\" page\n            var dest = exec.RedirectUrl ?? \"/thank-you\";\n            return Redirect(dest);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/AttachedCampaignDto.cs",
      "sha256": "0d3666aab91197bf746299620d01d22712744acbbcb28b0a787a8e399eaf123f",
      "language": "csharp",
      "size": 341,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public sealed record AttachedCampaignDto(\n        Guid Id,\n        string Name,\n        string Status,\n        DateTime? ScheduledAt,\n        DateTime CreatedAt,\n        string? CreatedBy,\n        DateTime? FirstSentAt   // earliest non-null SentAt from CampaignSendLogs\n    );\n\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs",
      "sha256": "c23400a06816a2adc8886fa8d20dd77f12b8b93f993b5a772d81cb12d6612a1f",
      "language": "csharp",
      "size": 897,
      "content": "// 📄 File: xbytechat.api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs\nnamespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CreateFlowDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public List<FlowStepDto> Steps { get; set; } = new();\n        public bool IsPublished { get; set; } = false; // ✅ NEW: Draft vs Published\n    }\n\n    public class FlowStepDto\n    {\n        public string TriggerButtonText { get; set; } = string.Empty;\n        public string TriggerButtonType { get; set; } = string.Empty;\n        public string TemplateToSend { get; set; } = string.Empty;\n        public int StepOrder { get; set; }\n        public List<ButtonLinkDto> ButtonLinks { get; set; } = new();\n    }\n\n    public class ButtonLinkDto\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid NextStepId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CTAButtonClickDto.cs",
      "sha256": "da355d853887193eb1d2b3e3fafcf076e6df764f0220cbf10f5c050d42b91df6",
      "language": "csharp",
      "size": 432,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CTAButtonClickDto\n    {\n        [Required]\n        public string ButtonText { get; set; } = string.Empty;\n\n        [Required]\n        public string ButtonType { get; set; } = \"cta\"; // e.g., \"quick_reply\", \"url\", etc.\n\n        [Required]\n        public string RecipientNumber { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CTAFlowExecutionRequest.cs",
      "sha256": "43fc0e1c1674d188b1a5385539f1314176ff81449d4547ea6665df9909a223bb",
      "language": "csharp",
      "size": 297,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CTAFlowExecutionRequest\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public string ButtonType { get; set; } = \"cta\";\n        public string RecipientNumber { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowEdgeDto.cs",
      "sha256": "27e76e22a8aba502d5727d9959bec58ea011d2a1f0d4388a141bfa8108043eea",
      "language": "csharp",
      "size": 272,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class FlowEdgeDto\n    {\n        public string FromNodeId { get; set; } = string.Empty;\n        public string ToNodeId { get; set; } = string.Empty;\n        public string? SourceHandle { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowNodeDto.cs",
      "sha256": "93c74e7a37bfe6a0a4538a39a3a942b2cf1c38fd11747714ba384590a18e2ec5",
      "language": "csharp",
      "size": 1221,
      "content": "    namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class FlowNodeDto\n    {\n        public string Id { get; set; } = string.Empty;\n\n        public string TemplateName { get; set; } = string.Empty;\n        public string? TemplateType { get; set; } // ✅ e.g., \"image_template\", \"text_template\"\n        public string MessageBody { get; set; } = string.Empty;\n        public string? TriggerButtonText { get; set; }\n        public string? TriggerButtonType { get; set; }\n        public float PositionX { get; set; }\n        public float PositionY { get; set; }\n\n        public string? RequiredTag { get; set; }         \n        public string? RequiredSource { get; set; }      \n        public List<LinkButtonDto> Buttons { get; set; } = new();\n        public bool UseProfileName { get; set; }\n        public int? ProfileNameSlot { get; set; }\n        //(for flow trigger mapping)\n        // ✅ NEW: ReactFlow expects this structure\n        public PositionDto Position => new PositionDto\n        {\n            x = PositionX,\n            y = PositionY\n        };\n        public class PositionDto\n        {\n            public float x { get; set; }\n            public float y { get; set; }\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowUpdateResult.cs",
      "sha256": "54f722166617e3353652e949aa4a89c87878d4a1d30d2e208a1fb816668d0dde",
      "language": "csharp",
      "size": 443,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public sealed class FlowUpdateResult\n    {\n        // ok | requiresFork | notFound | error\n        public string Status { get; set; } = \"ok\";\n        public string? Message { get; set; }\n        public bool NeedsRepublish { get; set; } // true when we flipped published->draft to allow editing\n        public object? Campaigns { get; set; }   // list for UI when requiresFork\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/LinkButtonDto.cs",
      "sha256": "e02e2c927a96e1e02c0537fb205fd7595289bdfaa9de15c0d7a55de64a90fbc5",
      "language": "csharp",
      "size": 522,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class LinkButtonDto\n    {\n        public string Text { get; set; } = string.Empty;\n        public int Index { get; set; } = -1;\n        public string? Type { get; set; } // 🔥 e.g., \"URL\", \"QUICK_REPLY\"\n        public string? SubType { get; set; } // 🔥 e.g., \"STATIC\", \"DYNAMIC\"\n        public string? Value { get; set; } // 🔥 the parameter or url or payload\n\n        public string? TargetNodeId { get; set; } // 🔄 used for flow linking\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/SaveVisualFlowDto.cs",
      "sha256": "7de59d222a97efeaf9dc23dea2ef351d852087539cec12e7c946b02e11f1bd21",
      "language": "csharp",
      "size": 403,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class SaveVisualFlowDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n\n        public List<FlowNodeDto> Nodes { get; set; } = new();\n        public List<FlowEdgeDto> Edges { get; set; } = new();\n        public Guid? CampaignId { get; set; } // ✅ Add this line\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/VisualFlowLoadDto.cs",
      "sha256": "10bfe378ffd4c8fb74a0746f2abafec88897072e7a974d680396bde281aaf4af",
      "language": "csharp",
      "size": 289,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class VisualFlowLoadDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public List<FlowNodeDto> Nodes { get; set; } = new();\n        public List<FlowEdgeDto> Edges { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/VisualFlowSummaryDto.cs",
      "sha256": "70dcedd3219a474a4b38927e0f0fd4ff3e21ba16632d409f146a9d0d60d685a5",
      "language": "csharp",
      "size": 300,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class VisualFlowSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowClickLog.cs",
      "sha256": "ecbd408e613e8ef88e2bb39fdf60bc188163e209d8242317203dfb2bff8cebb8",
      "language": "csharp",
      "size": 104,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    public class CTAFlowClickLog\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs",
      "sha256": "a36019c3ace9f06dcc785152a4ea8e2acc280b169f9e831a28fd6efd2f9d2551",
      "language": "csharp",
      "size": 3404,
      "content": "// 📄 File: xbytechat.api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Represents a complete flow configuration for a business, such as \"Interested Journey\".\n    /// </summary>\n    public class CTAFlowConfig\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string FlowName { get; set; } = string.Empty;\n\n        public bool IsActive { get; set; } = true;\n\n        public bool IsPublished { get; set; } = false; // ✅ NEW: Support draft/published\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public string? CreatedBy { get; set; }\n        public DateTime? UpdatedAt { get; set; }  // ✅ Add this line\n\n        // 🔁 Navigation to steps\n        public ICollection<CTAFlowStep> Steps { get; set; } = new List<CTAFlowStep>();\n    }\n}\n\n// 📄 File: xbytechat.api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs\n//using System.ComponentModel.DataAnnotations;\n//using System.Text.Json.Serialization;\n//using Microsoft.EntityFrameworkCore;\n\n//namespace xbytechat.api.Features.CTAFlowBuilder.Models\n//{\n//    /// <summary>\n//    /// Represents a complete flow configuration for a business, such as \"Interested Journey\".\n//    /// </summary>\n//    [Index(nameof(BusinessId), nameof(IsActive), nameof(FlowName), Name = \"ix_ctaflowconfigs_biz_active_name\")]\n//    [Index(nameof(BusinessId), nameof(IsPublished), Name = \"ix_ctaflowconfigs_biz_published\")]\n//    public class CTAFlowConfig\n//    {\n//        [Key]\n//        public Guid Id { get; set; }\n\n//        [Required]\n//        public Guid BusinessId { get; set; }\n\n//        [Required, MaxLength(100)]\n//        public string FlowName { get; set; } = string.Empty;\n\n//        /// <summary>\n//        /// Soft “enabled/disabled” flag for listing/selection. We still hard-delete unused flows on request.\n//        /// </summary>\n//        public bool IsActive { get; set; } = true;\n\n//        /// <summary>\n//        /// Draft vs published for the builder.\n//        /// </summary>\n//        public bool IsPublished { get; set; } = false;\n\n//        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n//        public string? CreatedBy { get; set; }\n\n//        /// <summary>\n//        /// Last modification timestamp (updated in service on edits).\n//        /// </summary>\n//        public DateTime? UpdatedAt { get; set; }\n\n//        /// <summary>\n//        /// Optimistic concurrency token to avoid race conditions (e.g., editing while someone tries to delete).\n//        /// </summary>\n//        [Timestamp]\n//        public byte[]? RowVersion { get; set; }\n\n//        // 🔁 Navigation to steps\n//        // Cascade delete is configured in OnModelCreating:\n//        // modelBuilder.Entity<CTAFlowConfig>()\n//        //   .HasMany(f => f.Steps).WithOne(s => s.Flow)\n//        //   .HasForeignKey(s => s.FlowId)\n//        //   .OnDelete(DeleteBehavior.Cascade);\n//        [JsonIgnore] // prevent huge payloads if you serialize configs somewhere else\n//        public ICollection<CTAFlowStep> Steps { get; set; } = new List<CTAFlowStep>();\n//    }\n//}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowStep.cs",
      "sha256": "a0c230aa38fa4980c6dff6a4bfc2466ae805f9179280d41cc7b1ca975054e03f",
      "language": "csharp",
      "size": 1608,
      "content": "// 📄 File: Features/CTAFlowBuilder/Models/CTAFlowStep.cs\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Represents a single step in a CTA flow, triggered by a button.\n    /// </summary>\n    public class CTAFlowStep\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid CTAFlowConfigId { get; set; }\n\n        [ForeignKey(nameof(CTAFlowConfigId))]\n        public CTAFlowConfig Flow { get; set; } = null!;\n\n        public string TriggerButtonText { get; set; } = string.Empty;\n\n        public string TriggerButtonType { get; set; } = \"cta\"; // e.g., \"quick_reply\"\n\n        public string TemplateToSend { get; set; } = string.Empty;\n\n        public int StepOrder { get; set; }\n\n        public string? RequiredTag { get; set; }        // e.g., \"interested\"\n        public string? RequiredSource { get; set; }     // e.g., \"ads\", \"qr\", \"manual\"\n\n        // 🔀 Multiple buttons linking to different steps\n        public List<FlowButtonLink> ButtonLinks { get; set; } = new();\n\n        public float? PositionX { get; set; }\n        public float? PositionY { get; set; }\n        public string? TemplateType { get; set; }\n\n        // ✅ Use WhatsApp Profile Name in this step's template?\n        public bool UseProfileName { get; set; } = false;\n\n        // ✅ 1-based placeholder index in the template body (e.g., {{1}})\n        public int? ProfileNameSlot { get; set; } = 1;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/FlowButtonLink.cs",
      "sha256": "6b265bc48b8286ca84e5937f9f8f6fe99b8b6580ca59a43aedda8290fc685aaa",
      "language": "csharp",
      "size": 807,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    public class FlowButtonLink\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid? NextStepId { get; set; }\n        // ✅ NEW FIELDS FOR FUTURE AUTOMATION\n        public string ButtonType { get; set; } = \"QUICK_REPLY\";    // e.g., URL, QUICK_REPLY, FLOW\n        public string ButtonSubType { get; set; } = \"\";            // Optional: e.g., \"Catalog\", \"PricingCTA\"\n        public string ButtonValue { get; set; } = \"\";              // e.g., URL or deep link\n\n        // Optional FK back to Step if needed\n        public Guid CTAFlowStepId { get; set; }\n        public CTAFlowStep? Step { get; set; }\n\n        public short ButtonIndex { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/FlowExecutionLog.cs",
      "sha256": "3288e0095ae888c5f42e669c9bd44c204cec5d167c37a928862137eaa5276988",
      "language": "csharp",
      "size": 1426,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Logs when a visual flow step is executed (useful for analytics, debugging, audit).\n    /// </summary>\n    public class FlowExecutionLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid? RunId { get; set; }\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        public Guid StepId { get; set; }\n        public string StepName { get; set; } = string.Empty;\n\n        public Guid? FlowId { get; set; }\n\n        public Guid? CampaignSendLogId { get; set; }\n        public Guid? TrackingLogId { get; set; }\n\n        public string? ContactPhone { get; set; }\n\n        public string? TriggeredByButton { get; set; }\n\n        public string? TemplateName { get; set; }\n\n        public string? TemplateType { get; set; }\n\n        public bool Success { get; set; }\n\n        public string? ErrorMessage { get; set; }\n\n        public string? RawResponse { get; set; }\n\n        public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;\n\n        public Guid? MessageLogId { get; set; }              // tie to originating message\n        public short? ButtonIndex { get; set; }              // which button was clicked (0..2)\n        public Guid? RequestId { get; set; }\n\n    }\n}\n"
    }
  ]
}
