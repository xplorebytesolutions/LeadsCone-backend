{
  "name": "xbytechat-api/Features",
  "part": 3,
  "of": 4,
  "generatedAt": "2025-10-02 10:25:32 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/CTAFlowService.cs",
      "sha256": "f97cee527b193bc04819ef71916cf3d9782f49641fe1da17cc4fcb9615917893",
      "language": "csharp",
      "size": 102740,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public class CTAFlowService : ICTAFlowService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public CTAFlowService(\n            AppDbContext context,\n            IMessageEngineService messageEngineService,\n            IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _context = context;\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n        }\n\n        // ---------------------------\n        // CREATE (draft-only, no edit)\n        // ---------------------------\n        public async Task<ResponseResult> SaveVisualFlowAsync(\n            SaveVisualFlowDto dto,\n            Guid businessId,\n            string createdBy)\n        {\n            try\n            {\n                Log.Information(\"üß† SaveVisualFlow (create-only) | FlowName: {FlowName} | Biz: {BusinessId}\",\n                    dto.FlowName, businessId);\n\n                // 0) Validate\n                if (dto.Nodes == null || !dto.Nodes.Any())\n                    return ResponseResult.ErrorInfo(\"‚ùå Cannot save an empty flow. Please add at least one step.\");\n\n                var trimmedName = (dto.FlowName ?? \"\").Trim();\n                if (trimmedName.Length == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå Flow name is required.\");\n\n                // 1) Enforce unique active name per business (create-only)\n                var nameExists = await _context.CTAFlowConfigs\n                    .AnyAsync(f => f.BusinessId == businessId && f.FlowName == trimmedName && f.IsActive);\n                if (nameExists)\n                {\n                    Log.Warning(\"‚ö†Ô∏è Duplicate flow name '{Name}' for business {Biz}.\", trimmedName, businessId);\n                    return ResponseResult.ErrorInfo(\"‚ùå A flow with this name already exists.\");\n                }\n\n                await using var tx = await _context.Database.BeginTransactionAsync();\n\n                // 2) Insert FlowConfig AS DRAFT (force IsPublished=false)\n                var flow = new CTAFlowConfig\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    FlowName = trimmedName,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    IsActive = true,\n                    IsPublished = false // << always draft on create\n                };\n                _context.CTAFlowConfigs.Add(flow);\n\n                // 3) Steps (map incoming node ids so we can wire links)\n                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);\n                var orderIndex = 0;\n\n                foreach (var node in dto.Nodes)\n                {\n                    if (string.IsNullOrWhiteSpace(node.Id)) continue;\n\n                    var step = new CTAFlowStep\n                    {\n                        Id = Guid.NewGuid(),\n                        CTAFlowConfigId = flow.Id,\n                        StepOrder = orderIndex++,\n                        TemplateToSend = node.TemplateName,\n                        TemplateType = node.TemplateType ?? \"UNKNOWN\",\n                        TriggerButtonText = node.TriggerButtonText ?? \"\",\n                        TriggerButtonType = node.TriggerButtonType ?? \"cta\",\n                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,\n                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,\n                        UseProfileName = node.UseProfileName,\n                        ProfileNameSlot = node.ProfileNameSlot,\n                        ButtonLinks = new List<FlowButtonLink>()\n                    };\n\n                    // Only text templates may use profile name slot\n                    var isTextTemplate = string.Equals(step.TemplateType, \"text_template\", StringComparison.OrdinalIgnoreCase);\n                    if (!isTextTemplate)\n                    {\n                        step.UseProfileName = false;\n                        step.ProfileNameSlot = null;\n                    }\n                    else if (!step.UseProfileName)\n                    {\n                        step.ProfileNameSlot = null;\n                    }\n                    else if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)\n                    {\n                        step.ProfileNameSlot = 1;\n                    }\n\n                    stepMap[node.Id] = step;\n                    _context.CTAFlowSteps.Add(step);\n                }\n\n                // 4) Wire links per node via edges (SourceHandle == button text)\n                var edges = dto.Edges ?? new List<FlowEdgeDto>();\n\n                foreach (var node in dto.Nodes)\n                {\n                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))\n                        continue;\n\n                    var outEdges = edges\n                        .Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase))\n                        .ToList();\n\n                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())\n                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)\n                        .ThenBy(b => b.Text ?? string.Empty)\n                        .ToList();\n\n                    short nextIdx = 0;\n\n                    foreach (var btn in orderedButtons)\n                    {\n                        var text = (btn.Text ?? string.Empty).Trim();\n                        if (string.IsNullOrEmpty(text)) continue;\n                        if (!seenTexts.Add(text)) continue; // dedupe\n\n                        var edge = outEdges.FirstOrDefault(e =>\n                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));\n                        if (edge == null) continue;\n\n                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep)) continue;\n\n                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;\n                        nextIdx = (short)(finalIndex + 1);\n\n                        var link = new FlowButtonLink\n                        {\n                            Id = Guid.NewGuid(),\n                            CTAFlowStepId = fromStep.Id,\n                            NextStepId = toStep.Id,\n                            ButtonText = text,\n                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? \"QUICK_REPLY\" : btn.Type,\n                            ButtonSubType = btn.SubType ?? string.Empty,\n                            ButtonValue = btn.Value ?? string.Empty,\n                            ButtonIndex = (short)finalIndex\n                        };\n\n                        _context.FlowButtonLinks.Add(link);\n                        fromStep.ButtonLinks.Add(link);\n\n                        // convenience: populate target's trigger info\n                        toStep.TriggerButtonText = text;\n                        toStep.TriggerButtonType = (btn.Type ?? \"QUICK_REPLY\").ToLowerInvariant();\n                    }\n                }\n\n                await _context.SaveChangesAsync();\n                await tx.CommitAsync();\n\n                Log.Information(\"‚úÖ Flow created '{Flow}' | Steps: {Steps} | Links: {Links}\",\n                    flow.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Flow created.\", new { flowId = flow.Id });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception while saving (create) flow\");\n                return ResponseResult.ErrorInfo(\"‚ùå Internal error while saving flow.\");\n            }\n        }\n\n        // ---------------------------\n        // LISTS\n        // ---------------------------\n        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Where(f => f.BusinessId == businessId && f.IsPublished)\n                .OrderByDescending(f => f.CreatedAt)\n                .Select(f => new VisualFlowSummaryDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    IsPublished = f.IsPublished,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)\n                .OrderByDescending(f => f.CreatedAt)\n                .Select(f => new VisualFlowSummaryDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    CreatedAt = f.CreatedAt,\n                    IsPublished = f.IsPublished\n                })\n                .ToListAsync();\n        }\n\n        // ---------------------------\n        // DETAIL LOADERS\n        // ---------------------------\n        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Include(c => c.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(c => c.Id == flowId && c.BusinessId == businessId && c.IsActive);\n\n            if (flow == null) return null;\n\n            // Prefetch template metadata\n            var templateMap = new Dictionary<string, TemplateMetadataDto>(StringComparer.OrdinalIgnoreCase);\n            var uniqueNames = flow.Steps\n                .Select(s => s.TemplateToSend)\n                .Where(n => !string.IsNullOrWhiteSpace(n))\n                .Distinct(StringComparer.OrdinalIgnoreCase)\n                .ToList();\n\n            foreach (var name in uniqueNames)\n            {\n                try\n                {\n                    var tpl = await _templateFetcherService.GetTemplateByNameAsync(\n                        businessId, name!, includeButtons: true);\n                    if (tpl != null) templateMap[name!] = tpl;\n                }\n                catch (Exception ex)\n                {\n                    Log.Warning(ex, \"‚ö†Ô∏è Failed to fetch template metadata for {Template}\", name);\n                }\n            }\n\n            var nodes = flow.Steps.Select(step =>\n            {\n                templateMap.TryGetValue(step.TemplateToSend ?? \"\", out var tpl);\n\n                var dbLinks = step.ButtonLinks ?? new List<FlowButtonLink>();\n                var dbButtons = dbLinks\n                    .OrderBy(b => b.ButtonIndex)\n                    .Select(link => new LinkButtonDto\n                    {\n                        Text = link.ButtonText,\n                        Type = link.ButtonType,\n                        SubType = link.ButtonSubType,\n                        Value = link.ButtonValue,\n                        Index = link.ButtonIndex,\n                        TargetNodeId = link.NextStepId?.ToString()\n                    });\n\n                var templateButtons = (tpl?.ButtonParams ?? new List<ButtonMetadataDto>())\n                    .Where(btn => !dbLinks.Any(bl => string.Equals(bl.ButtonText, btn.Text, StringComparison.OrdinalIgnoreCase)))\n                    .Select(btn => new LinkButtonDto { Text = btn.Text });\n\n                return new FlowNodeDto\n                {\n                    Id = step.Id.ToString(),\n                    TemplateName = step.TemplateToSend,\n                    TemplateType = step.TemplateType,\n                    MessageBody = string.IsNullOrWhiteSpace(tpl?.Body) ? \"‚Äî no body found ‚Äî\" : tpl!.Body,\n                    TriggerButtonText = step.TriggerButtonText,\n                    TriggerButtonType = step.TriggerButtonType,\n                    PositionX = step.PositionX ?? 100,\n                    PositionY = step.PositionY ?? 100,\n                    RequiredTag = step.RequiredTag,\n                    RequiredSource = step.RequiredSource,\n                    UseProfileName = step.UseProfileName,\n                    ProfileNameSlot = step.ProfileNameSlot,\n                    Buttons = dbButtons.Concat(templateButtons).ToList()\n                };\n            }).ToList();\n\n            var edges = flow.Steps\n                .SelectMany(step =>\n                    (step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>())\n                    .Where(l => l.NextStepId.HasValue)\n                    .Select(l => new FlowEdgeDto\n                    {\n                        FromNodeId = step.Id.ToString(),\n                        ToNodeId = l.NextStepId!.Value.ToString(),\n                        SourceHandle = l.ButtonText\n                    }))\n                .ToList();\n\n            return new SaveVisualFlowDto\n            {\n                FlowName = flow.FlowName,\n                IsPublished = flow.IsPublished,\n                Nodes = nodes,\n                Edges = edges\n            };\n        }\n\n        public async Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId)\n        {\n            try\n            {\n                var flow = await _context.CTAFlowConfigs\n                    .AsNoTracking()\n                    .Where(f => f.IsActive && f.BusinessId == businessId && f.Id == flowId)\n                    .Select(f => new\n                    {\n                        f.Id,\n                        f.FlowName,\n                        f.IsPublished,\n                        Steps = _context.CTAFlowSteps\n                            .Where(s => s.CTAFlowConfigId == f.Id)\n                            .OrderBy(s => s.StepOrder)\n                            .Select(s => new\n                            {\n                                s.Id,\n                                s.StepOrder,\n                                s.TemplateToSend,\n                                s.TemplateType,\n                                s.TriggerButtonText,\n                                s.TriggerButtonType,\n                                s.PositionX,\n                                s.PositionY,\n                                s.UseProfileName,\n                                s.ProfileNameSlot,\n                                Buttons = _context.FlowButtonLinks\n                                    .Where(b => b.CTAFlowStepId == s.Id)\n                                    .OrderBy(b => b.ButtonIndex)\n                                    .Select(b => new\n                                    {\n                                        b.ButtonText,\n                                        b.ButtonType,\n                                        b.ButtonSubType,\n                                        b.ButtonValue,\n                                        b.ButtonIndex,\n                                        b.NextStepId\n                                    })\n                                    .ToList()\n                            })\n                            .ToList()\n                    })\n                    .FirstOrDefaultAsync();\n\n                if (flow == null)\n                    return ResponseResult.ErrorInfo(\"Flow not found.\");\n\n                var nodes = flow.Steps.Select(s => new\n                {\n                    id = s.Id.ToString(),\n                    positionX = s.PositionX ?? 0,\n                    positionY = s.PositionY ?? 0,\n                    templateName = s.TemplateToSend,\n                    templateType = s.TemplateType,\n                    triggerButtonText = s.TriggerButtonText ?? string.Empty,\n                    triggerButtonType = s.TriggerButtonType ?? \"cta\",\n                    requiredTag = string.Empty,\n                    requiredSource = string.Empty,\n                    useProfileName = s.UseProfileName,\n                    profileNameSlot = (s.ProfileNameSlot.HasValue && s.ProfileNameSlot.Value > 0) ? s.ProfileNameSlot.Value : 1,\n                    buttons = s.Buttons.Select(b => new\n                    {\n                        text = b.ButtonText,\n                        type = b.ButtonType,\n                        subType = b.ButtonSubType,\n                        value = b.ButtonValue,\n                        targetNodeId = b.NextStepId == Guid.Empty ? null : b.NextStepId.ToString(),\n                        index = (int)(b.ButtonIndex)\n                    })\n                });\n\n                var edges = flow.Steps\n                    .SelectMany(s => s.Buttons\n                        .Where(b => b.NextStepId != Guid.Empty)\n                        .Select(b => new\n                        {\n                            fromNodeId = s.Id.ToString(),\n                            toNodeId = b.NextStepId.ToString(),\n                            sourceHandle = b.ButtonText\n                        }));\n\n                var payload = new\n                {\n                    flowName = flow.FlowName,\n                    isPublished = flow.IsPublished,\n                    nodes,\n                    edges\n                };\n\n                return ResponseResult.SuccessInfo(\"Flow loaded.\", payload);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception while loading visual flow {FlowId}\", flowId);\n                return ResponseResult.ErrorInfo(\"Internal error while loading flow.\");\n            }\n        }\n\n        // ---------------------------\n        // DELETE (only if not attached)\n        // ---------------------------\n        public async Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n            if (flow == null)\n                return ResponseResult.ErrorInfo(\"‚ùå Flow not found or does not belong to you.\");\n\n            var inUseQuery = _context.Campaigns\n                .Where(c => c.BusinessId == businessId &&\n                            !c.IsDeleted &&\n                            c.CTAFlowConfigId == flowId);\n\n            var inUseCount = await inUseQuery.CountAsync();\n            if (inUseCount > 0)\n            {\n                Log.Warning(\"‚ùå Delete flow blocked. Flow {FlowId} is used by {Count} campaigns.\", flowId, inUseCount);\n                // Keep message; controller will fetch campaigns for modal\n                return ResponseResult.ErrorInfo(\n                    $\"‚ùå Cannot delete. This flow is attached to {inUseCount} campaign(s). Delete those campaigns first.\");\n            }\n\n            foreach (var step in flow.Steps)\n                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n            _context.CTAFlowSteps.RemoveRange(flow.Steps);\n            _context.CTAFlowConfigs.Remove(flow);\n\n            await _context.SaveChangesAsync();\n            return ResponseResult.SuccessInfo(\"‚úÖ Flow deleted.\");\n        }\n\n        public async Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId)\n        {\n            var q = _context.Campaigns\n                .Where(c => c.BusinessId == businessId && !c.IsDeleted && c.CTAFlowConfigId == flowId);\n\n            var firstSends = await _context.CampaignSendLogs\n                .Where(s => s.BusinessId == businessId && s.CampaignId != Guid.Empty)\n                .GroupBy(s => s.CampaignId)\n                .Select(g => new { CampaignId = g.Key, FirstSentAt = (DateTime?)g.Min(s => s.CreatedAt) })\n                .ToListAsync();\n\n            var firstSendMap = firstSends.ToDictionary(x => x.CampaignId, x => x.FirstSentAt);\n\n            var list = await q\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new\n                {\n                    c.Id,\n                    c.Name,\n                    c.Status,\n                    c.ScheduledAt,\n                    c.CreatedAt,\n                    c.CreatedBy\n                })\n                .ToListAsync();\n\n            return list.Select(x => new AttachedCampaignDto(\n                x.Id,\n                x.Name,\n                x.Status,\n                x.ScheduledAt,\n                x.CreatedAt,\n                x.CreatedBy,\n                firstSendMap.TryGetValue(x.Id, out var ts) ? ts : null\n            )).ToList();\n        }\n\n        public async Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n            if (flow is null) return false;\n\n            var attached = await _context.Campaigns\n                .Where(c => c.BusinessId == businessId && !c.IsDeleted && c.CTAFlowConfigId == flowId)\n                .AnyAsync();\n            if (attached) return false;\n\n            foreach (var step in flow.Steps)\n                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n            _context.CTAFlowSteps.RemoveRange(flow.Steps);\n            _context.CTAFlowConfigs.Remove(flow);\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // ---------------------------\n        // PUBLISH (by id, flip flag)\n        // ---------------------------\n        public async Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n            if (flow is null) return false;\n\n            flow.IsPublished = true;\n            flow.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // ---------------------------\n        // RUNTIME / Matching / Execute\n        // ---------------------------\n        public async Task<CTAFlowStep?> MatchStepByButtonAsync(\n            Guid businessId,\n            string buttonText,\n            string buttonType,\n            string templateName,\n            Guid? campaignId = null)\n        {\n            var normalizedButtonText = buttonText?.Trim().ToLower() ?? \"\";\n            var normalizedButtonType = buttonType?.Trim().ToLower() ?? \"\";\n            var normalizedTemplateName = templateName?.Trim().ToLower() ?? \"\";\n\n            if (campaignId.HasValue)\n            {\n                var overrideStep = await _context.CampaignFlowOverrides\n                    .Where(o =>\n                        o.CampaignId == campaignId &&\n                        o.ButtonText.ToLower() == normalizedButtonText &&\n                        o.TemplateName.ToLower() == normalizedTemplateName)\n                    .FirstOrDefaultAsync();\n\n                if (overrideStep != null)\n                {\n                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();\n                    var matched = await _context.CTAFlowSteps\n                        .Include(s => s.Flow)\n                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);\n                    if (matched != null) return matched;\n                }\n            }\n\n            var fallbackStep = await _context.CTAFlowSteps\n                .Include(s => s.Flow)\n                .Where(s =>\n                    s.Flow.BusinessId == businessId &&\n                    s.Flow.IsActive &&\n                    s.Flow.IsPublished &&\n                    s.TriggerButtonText.ToLower() == normalizedButtonText &&\n                    s.TriggerButtonType.ToLower() == normalizedButtonType)\n                .FirstOrDefaultAsync();\n\n            return fallbackStep;\n        }\n\n        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)\n        {\n            try\n            {\n                var log = await _context.TrackingLogs\n                    .Include(l => l.Contact)\n                        .ThenInclude(c => c.ContactTags)\n                            .ThenInclude(ct => ct.Tag)\n                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n                if (log == null) return ResponseResult.ErrorInfo(\"Tracking log not found.\");\n\n                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);\n                if (step == null) return ResponseResult.ErrorInfo(\"Step conditions not satisfied.\");\n\n                var args = new List<string>();\n                if (step.UseProfileName && step.ProfileNameSlot is int slot && slot >= 1)\n                {\n                    var contact = log.Contact ?? await _context.Contacts\n                        .AsNoTracking()\n                        .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == (log.ContactPhone ?? \"\"));\n                    var greet = (contact?.ProfileName ?? contact?.Name)?.Trim();\n                    if (string.IsNullOrEmpty(greet)) greet = \"there\";\n                    while (args.Count < slot) args.Add(string.Empty);\n                    args[slot - 1] = greet;\n                }\n\n                ResponseResult sendResult;\n                switch (step.TemplateType?.ToLower())\n                {\n                    case \"image_template\":\n                        var imageDto = new ImageTemplateMessageDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = log.ContactPhone ?? \"\",\n                            TemplateName = step.TemplateToSend,\n                            LanguageCode = \"en_US\"\n                        };\n                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);\n                        break;\n                    case \"text_template\":\n                    default:\n                        var textDto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = log.ContactPhone ?? \"\",\n                            TemplateName = step.TemplateToSend,\n                            TemplateParameters = args\n                        };\n                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);\n                        break;\n                }\n\n                var executionLog = new FlowExecutionLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    StepId = step.Id,\n                    FlowId = step.CTAFlowConfigId,\n                    CampaignSendLogId = campaignSendLogId,\n                    TrackingLogId = trackingLogId,\n                    ContactPhone = log.ContactPhone,\n                    TriggeredByButton = step.TriggerButtonText,\n                    TemplateName = step.TemplateToSend,\n                    TemplateType = step.TemplateType,\n                    Success = sendResult.Success,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ExecutedAt = DateTime.UtcNow\n                };\n\n                _context.FlowExecutionLogs.Add(executionLog);\n                await _context.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo($\"Flow step executed. Sent: {sendResult.Success}\", null, sendResult.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception during ExecuteVisualFlowAsync()\");\n                return ResponseResult.ErrorInfo(\"Internal error during flow execution.\");\n            }\n        }\n\n        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)\n            => GetChainedStepAsync(businessId, nextStepId, null, null);\n\n        public async Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId, TrackingLog? trackingLog, Contact? contact)\n        {\n            if (nextStepId == null) return null;\n\n            var flow = await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                .FirstOrDefaultAsync(f =>\n                    f.BusinessId == businessId &&\n                    f.Steps.Any(s => s.Id == nextStepId));\n\n            var followUpStep = flow?.Steps.FirstOrDefault(s => s.Id == nextStepId);\n            if (followUpStep == null) return null;\n\n            if (trackingLog != null)\n            {\n                var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);\n                if (!isMatch) return null;\n            }\n\n            return followUpStep;\n        }\n\n        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId)\n        {\n            var log = await _context.TrackingLogs\n                .Include(l => l.Contact)\n                    .ThenInclude(c => c.ContactTags)\n                        .ThenInclude(ct => ct.Tag)\n                .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);\n        }\n\n        // ‚úÖ MISSING IMPLEMENTATION (to satisfy the interface)\n        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)\n        {\n            return await _context.FlowButtonLinks\n                .Where(l => l.CTAFlowStepId == sourceStepId\n                            && l.NextStepId != null\n                            && l.Step.CTAFlowConfigId == flowId\n                            && l.ButtonIndex == buttonIndex)\n                .SingleOrDefaultAsync();\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using Microsoft.EntityFrameworkCore;\n//using Serilog;\n//using xbytechat.api.AuthModule.Models;\n//using xbytechat.api.CRM.Models;\n//using xbytechat.api.Features.CTAFlowBuilder.DTOs;\n//using xbytechat.api.Features.CTAFlowBuilder.Models;\n//using xbytechat.api.Features.MessagesEngine.DTOs;\n//using xbytechat.api.Features.MessagesEngine.Services;\n//using xbytechat.api.Features.Tracking.Models;\n//using xbytechat.api.Helpers;\n//using xbytechat.api.WhatsAppSettings.DTOs;\n//using xbytechat_api.WhatsAppSettings.Services;\n\n//namespace xbytechat.api.Features.CTAFlowBuilder.Services\n//{\n//    public class CTAFlowService : ICTAFlowService\n//    {\n//        private readonly AppDbContext _context;\n//        private readonly IMessageEngineService _messageEngineService;\n//        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n//        public CTAFlowService(AppDbContext context, IMessageEngineService messageEngineService,\n//            IWhatsAppTemplateFetcherService templateFetcherService\n//            )\n//        {\n//            _context = context;\n//            _messageEngineService = messageEngineService;\n//            _templateFetcherService = templateFetcherService;\n//        }\n\n//        public async Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy)\n//        {\n//            var flow = new CTAFlowConfig\n//            {\n//                Id = Guid.NewGuid(),\n//                FlowName = dto.FlowName,\n//                BusinessId = businessId,\n//                CreatedAt = DateTime.UtcNow,\n//                CreatedBy = createdBy,\n//                IsPublished = dto.IsPublished\n//            };\n\n//            foreach (var stepDto in dto.Steps)\n//            {\n//                var step = new CTAFlowStep\n//                {\n//                    Id = Guid.NewGuid(),\n//                    CTAFlowConfigId = flow.Id,\n//                    TriggerButtonText = stepDto.TriggerButtonText,\n//                    TriggerButtonType = stepDto.TriggerButtonType,\n//                    TemplateToSend = stepDto.TemplateToSend,\n//                    StepOrder = stepDto.StepOrder,\n//                    ButtonLinks = stepDto.ButtonLinks?.Select(link => new FlowButtonLink\n//                    {\n//                        ButtonText = link.ButtonText,\n//                        NextStepId = link.NextStepId\n//                    }).ToList() ?? new List<FlowButtonLink>()\n//                };\n\n//                flow.Steps.Add(step);\n//            }\n\n//            _context.CTAFlowConfigs.Add(flow);\n//            await _context.SaveChangesAsync();\n\n//            return flow.Id;\n//        }\n\n//        public async Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId)\n//        {\n//            return await _context.CTAFlowConfigs\n//                .Include(f => f.Steps.OrderBy(s => s.StepOrder))\n//                .Where(f => f.BusinessId == businessId && f.IsActive && f.IsPublished)\n//                .FirstOrDefaultAsync();\n//        }\n\n//        public async Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId)\n//        {\n//            return await _context.CTAFlowConfigs\n//                .Include(f => f.Steps)\n//                    .ThenInclude(s => s.ButtonLinks)\n//                .Where(f => f.BusinessId == businessId && f.IsPublished == false)\n//                .OrderByDescending(f => f.CreatedAt)\n//                .FirstOrDefaultAsync();\n//        }\n\n\n\n//        public async Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId)\n//        {\n//            return await _context.CTAFlowSteps\n//                .Where(s => s.CTAFlowConfigId == flowId)\n//                .OrderBy(s => s.StepOrder)\n//                .ToListAsync();\n//        }\n\n//        public async Task<CTAFlowStep?> MatchStepByButtonAsync(\n//            Guid businessId,\n//            string buttonText,\n//            string buttonType,\n//            string TemplateName,\n//            Guid? campaignId = null)\n//        {\n//            var normalizedButtonText = buttonText?.Trim().ToLower() ?? \"\";\n//            var normalizedButtonType = buttonType?.Trim().ToLower() ?? \"\";\n//            var normalizedTemplateName = TemplateName?.Trim().ToLower() ?? \"\";\n\n//            // 1Ô∏è‚É£ Try campaign-specific override\n//            if (campaignId.HasValue)\n//            {\n//                var overrideStep = await _context.CampaignFlowOverrides\n//                    .Where(o =>\n//                        o.CampaignId == campaignId &&\n//                        o.ButtonText.ToLower() == normalizedButtonText &&\n//                        o.TemplateName.ToLower() == normalizedTemplateName)\n//                    .FirstOrDefaultAsync();\n\n//                if (overrideStep != null)\n//                {\n//                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();\n\n//                    var matched = await _context.CTAFlowSteps\n//                        .Include(s => s.Flow)\n//                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);\n\n//                    if (matched != null)\n//                    {\n//                        Log.Information(\"üîÅ Override matched: Template '{Template}' ‚Üí Step '{StepId}'\", overrideStep.OverrideNextTemplate, matched.Id);\n//                        return matched;\n//                    }\n\n//                    Log.Warning(\"‚ö†Ô∏è Override found for button '{Button}' but no matching step for template '{Template}'\", normalizedButtonText, overrideStep.OverrideNextTemplate);\n//                }\n\n//                else\n//                {\n//                    Log.Information(\"üü° No campaign override found for button '{Button}' on template '{Template}'\", normalizedButtonText, normalizedTemplateName);\n//                }\n//            }\n\n//            // 2Ô∏è‚É£ Fallback to standard flow logic\n//            var fallbackStep = await _context.CTAFlowSteps\n//                .Include(s => s.Flow)\n//                .Where(s =>\n//                    s.Flow.BusinessId == businessId &&\n//                    s.Flow.IsActive &&\n//                    s.Flow.IsPublished &&\n//                    s.TriggerButtonText.ToLower() == normalizedButtonText &&\n//                    s.TriggerButtonType.ToLower() == normalizedButtonType)\n//                .FirstOrDefaultAsync();\n\n//            if (fallbackStep != null)\n//            {\n//                Log.Information(\"‚úÖ Fallback flow step matched: StepId = {StepId}, Flow = {FlowName}\", fallbackStep.Id, fallbackStep.Flow?.FlowName);\n//            }\n//            else\n//            {\n//                Log.Warning(\"‚ùå No fallback step matched for button '{ButtonText}' of type '{ButtonType}' in BusinessId: {BusinessId}\", normalizedButtonText, normalizedButtonType, businessId);\n//            }\n\n//            return fallbackStep;\n//        }\n\n\n//        public async Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user)\n//        {\n//            var flow = await _context.CTAFlowConfigs\n//                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);\n\n//            if (flow is null) return false;\n\n//            // Optional validation: ensure it has at least 1 step, etc.\n//            flow.IsPublished = true;\n//            flow.UpdatedAt = DateTime.UtcNow;\n//            await _context.SaveChangesAsync();\n//            return true;\n//        }\n\n//        //public async Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy)\n//        //{\n//        //    try\n//        //    {\n//        //        // üî• 1. Remove existing published flow for this business\n//        //        var existingFlows = await _context.CTAFlowConfigs\n//        //            .Where(f => f.BusinessId == businessId && f.IsPublished)\n//        //            .ToListAsync();\n\n//        //        if (existingFlows.Any())\n//        //        {\n//        //            _context.CTAFlowConfigs.RemoveRange(existingFlows);\n//        //        }\n\n//        //        // üå± 2. Create new flow config\n//        //        var flowConfig = new CTAFlowConfig\n//        //        {\n//        //            Id = Guid.NewGuid(),\n//        //            BusinessId = businessId,\n//        //            FlowName = \"Published Flow - \" + DateTime.UtcNow.ToString(\"yyyyMMdd-HHmm\"),\n//        //            IsPublished = true,\n//        //            IsActive = true,\n//        //            CreatedBy = createdBy,\n//        //            CreatedAt = DateTime.UtcNow,\n//        //            Steps = new List<CTAFlowStep>()\n//        //        };\n\n//        //        // üîÅ 3. Convert each step DTO to model\n//        //        foreach (var stepDto in steps)\n//        //        {\n//        //            var step = new CTAFlowStep\n//        //            {\n//        //                Id = Guid.NewGuid(),\n//        //                CTAFlowConfigId = flowConfig.Id,\n//        //                TriggerButtonText = stepDto.TriggerButtonText,\n//        //                TriggerButtonType = stepDto.TriggerButtonType,\n//        //                TemplateToSend = stepDto.TemplateToSend,\n//        //                StepOrder = stepDto.StepOrder,\n//        //                ButtonLinks = stepDto.ButtonLinks.Select(bl => new FlowButtonLink\n//        //                {\n//        //                    Id = Guid.NewGuid(),\n//        //                    ButtonText = bl.ButtonText,\n//        //                    NextStepId = bl.NextStepId,\n//        //                }).ToList()\n//        //            };\n\n//        //            flowConfig.Steps.Add(step);\n//        //        }\n\n//        //        // üíæ 4. Save to DB\n//        //        await _context.CTAFlowConfigs.AddAsync(flowConfig);\n//        //        await _context.SaveChangesAsync();\n\n//        //        return ResponseResult.SuccessInfo(\"‚úÖ Flow published successfully.\");\n//        //    }\n//        //    catch (Exception ex)\n//        //    {\n//        //        Log.Error(ex, \"‚ùå Error while publishing CTA flow.\");\n//        //        return ResponseResult.ErrorInfo(\"‚ùå Could not publish flow.\");\n//        //    }\n//        //}\n\n\n//        private static int CountBodyPlaceholders(string? body)\n//        {\n//            if (string.IsNullOrWhiteSpace(body)) return 0;\n//            // counts {{1}}, {{2}}, ... ; ignores any non-numeric moustaches\n//            var m = System.Text.RegularExpressions.Regex.Matches(body, @\"\\{\\{\\s*\\d+\\s*\\}\\}\");\n//            return m.Count;\n//        }\n//        public async Task<ResponseResult> SaveVisualFlowAsync(\n//    SaveVisualFlowDto dto,\n//    Guid businessId,\n//    string createdBy)\n//        {\n//            try\n//            {\n//                Log.Information(\"üß† SaveVisualFlow (create-only) | FlowName: {FlowName} | Biz: {BusinessId}\",\n//                    dto.FlowName, businessId);\n\n//                // 0) Basic validation\n//                if (dto.Nodes == null || !dto.Nodes.Any())\n//                    return ResponseResult.ErrorInfo(\"‚ùå Cannot save an empty flow. Please add at least one step.\");\n\n//                var trimmedName = (dto.FlowName ?? \"\").Trim();\n//                if (trimmedName.Length == 0)\n//                    return ResponseResult.ErrorInfo(\"‚ùå Flow name is required.\");\n\n//                // 1) CREATE-ONLY: refuse duplicate name for this business\n//                var nameExists = await _context.CTAFlowConfigs\n//                    .AnyAsync(f => f.BusinessId == businessId && f.FlowName == trimmedName && f.IsActive);\n\n//                if (nameExists)\n//                {\n//                    // IMPORTANT: this method is only for *new* flows.\n//                    // If the user is editing an existing flow, the UI should call PUT /cta-flow/{id}.\n//                    Log.Warning(\"‚ö†Ô∏è Duplicate flow name '{Name}' for business {Biz}.\", trimmedName, businessId);\n//                    return ResponseResult.ErrorInfo(\n//                        \"‚ùå A flow with this name already exists. Open that flow and edit it, or choose a different name.\");\n//                }\n\n//                await using var tx = await _context.Database.BeginTransactionAsync();\n\n//                // 2) Insert FlowConfig\n//                var flow = new CTAFlowConfig\n//                {\n//                    Id = Guid.NewGuid(),\n//                    BusinessId = businessId,\n//                    FlowName = trimmedName,\n//                    CreatedBy = createdBy,\n//                    CreatedAt = DateTime.UtcNow,\n//                    UpdatedAt = DateTime.UtcNow,\n//                    IsActive = true,\n//                    // You *can* allow creating as published, but most teams prefer create-as-draft:\n//                    IsPublished = dto.IsPublished\n//                };\n//                _context.CTAFlowConfigs.Add(flow);\n\n//                // 3) Build Steps\n//                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);\n//                var orderIndex = 0;\n\n//                foreach (var node in dto.Nodes)\n//                {\n//                    if (string.IsNullOrWhiteSpace(node.Id)) continue;\n\n//                    var step = new CTAFlowStep\n//                    {\n//                        Id = Guid.NewGuid(),\n//                        CTAFlowConfigId = flow.Id,\n//                        StepOrder = orderIndex++,\n//                        TemplateToSend = node.TemplateName,\n//                        TemplateType = node.TemplateType ?? \"UNKNOWN\",\n//                        TriggerButtonText = node.TriggerButtonText ?? \"\",\n//                        TriggerButtonType = node.TriggerButtonType ?? \"cta\",\n//                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,\n//                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,\n//                        UseProfileName = node.UseProfileName,\n//                        ProfileNameSlot = node.ProfileNameSlot,\n//                        ButtonLinks = new List<FlowButtonLink>()\n//                    };\n\n//                    // Harden profile-name config per template type\n//                    var isTextTemplate = string.Equals(step.TemplateType, \"text_template\", StringComparison.OrdinalIgnoreCase);\n//                    if (!isTextTemplate)\n//                    {\n//                        step.UseProfileName = false;\n//                        step.ProfileNameSlot = null;\n//                    }\n//                    else\n//                    {\n//                        if (!step.UseProfileName)\n//                        {\n//                            step.ProfileNameSlot = null;\n//                        }\n//                        else\n//                        {\n//                            if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)\n//                                step.ProfileNameSlot = 1;\n//                        }\n//                    }\n\n//                    stepMap[node.Id] = step;\n//                    _context.CTAFlowSteps.Add(step);\n//                }\n\n//                // 4) Build Links (per-node buttons, matched by SourceHandle == button text)\n//                var edges = dto.Edges ?? new List<FlowEdgeDto>();\n\n//                foreach (var node in dto.Nodes)\n//                {\n//                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))\n//                        continue;\n\n//                    var outEdges = edges.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList();\n//                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n\n//                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())\n//                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)\n//                        .ThenBy(b => b.Text ?? string.Empty)\n//                        .ToList();\n\n//                    short nextIdx = 0;\n\n//                    foreach (var btn in orderedButtons)\n//                    {\n//                        var text = (btn.Text ?? string.Empty).Trim();\n//                        if (string.IsNullOrEmpty(text)) continue;\n\n//                        if (!seenTexts.Add(text))\n//                        {\n//                            Log.Warning(\"‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; first wins.\", text, node.Id);\n//                            continue;\n//                        }\n\n//                        var edge = outEdges.FirstOrDefault(e =>\n//                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));\n//                        if (edge == null) continue;\n\n//                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep)) continue;\n\n//                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;\n//                        nextIdx = (short)(finalIndex + 1);\n\n//                        var link = new FlowButtonLink\n//                        {\n//                            Id = Guid.NewGuid(),\n//                            CTAFlowStepId = fromStep.Id,\n//                            NextStepId = toStep.Id,\n//                            ButtonText = text,\n//                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? \"QUICK_REPLY\" : btn.Type,\n//                            ButtonSubType = btn.SubType ?? string.Empty,\n//                            ButtonValue = btn.Value ?? string.Empty,\n//                            ButtonIndex = (short)finalIndex\n//                        };\n\n//                        _context.FlowButtonLinks.Add(link);\n//                        fromStep.ButtonLinks.Add(link);\n\n//                        // convenience: target step \"entry trigger\"\n//                        toStep.TriggerButtonText = text;\n//                        toStep.TriggerButtonType = (btn.Type ?? \"QUICK_REPLY\").ToLowerInvariant();\n//                    }\n//                }\n\n//                await _context.SaveChangesAsync();\n//                await tx.CommitAsync();\n\n//                Log.Information(\"‚úÖ Flow created '{Flow}' | Steps: {Steps} | Links: {Links}\",\n//                    flow.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));\n\n//                // Return new flowId so the FE can redirect/open it if desired\n//                return ResponseResult.SuccessInfo(\"‚úÖ Flow created.\", new { flowId = flow.Id });\n//            }\n//            catch (Exception ex)\n//            {\n//                Log.Error(ex, \"‚ùå Exception while saving (create) flow\");\n//                return ResponseResult.ErrorInfo(\"‚ùå Internal error while saving flow.\");\n//            }\n//        }\n\n//        //public async Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy)\n//        //{\n//        //    try\n//        //    {\n//        //        Log.Information(\"üß† SaveVisualFlow started | FlowName: {FlowName} | BusinessId: {BusinessId}\", dto.FlowName, businessId);\n\n//        //        if (dto.Nodes == null || !dto.Nodes.Any())\n//        //        {\n//        //            Log.Warning(\"‚ùå No nodes found in flow. Aborting save.\");\n//        //            return ResponseResult.ErrorInfo(\"‚ùå Cannot save an empty flow. Please add at least one step.\");\n//        //        }\n\n//        //        // 1) Upsert FlowConfig\n//        //        var flow = await _context.CTAFlowConfigs\n//        //            .FirstOrDefaultAsync(f => f.FlowName == dto.FlowName && f.BusinessId == businessId);\n\n//        //        if (flow == null)\n//        //        {\n//        //            flow = new CTAFlowConfig\n//        //            {\n//        //                Id = Guid.NewGuid(),\n//        //                BusinessId = businessId,\n//        //                FlowName = dto.FlowName,\n//        //                CreatedBy = createdBy,\n//        //                CreatedAt = DateTime.UtcNow,\n//        //                UpdatedAt = DateTime.UtcNow,\n//        //                IsActive = true,\n//        //                IsPublished = dto.IsPublished\n//        //            };\n//        //            _context.CTAFlowConfigs.Add(flow);\n//        //            Log.Information(\"‚úÖ New FlowConfig created with ID: {Id}\", flow.Id);\n//        //        }\n//        //        else\n//        //        {\n//        //            // wipe old steps+links for a clean replace\n//        //            var oldSteps = await _context.CTAFlowSteps\n//        //                .Where(s => s.CTAFlowConfigId == flow.Id)\n//        //                .Include(s => s.ButtonLinks)\n//        //                .ToListAsync();\n\n//        //            foreach (var step in oldSteps)\n//        //                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n//        //            _context.CTAFlowSteps.RemoveRange(oldSteps);\n\n//        //            flow.IsPublished = dto.IsPublished;\n//        //            flow.UpdatedAt = DateTime.UtcNow;\n//        //        }\n\n//        //        // 2) Build Steps (map by incoming node.Id string)\n//        //        var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);\n\n//        //        foreach (var (node, index) in dto.Nodes.Select((n, i) => (n, i)))\n//        //        {\n//        //            if (string.IsNullOrWhiteSpace(node.Id))\n//        //                continue;\n\n//        //            var step = new CTAFlowStep\n//        //            {\n//        //                Id = Guid.NewGuid(),\n//        //                CTAFlowConfigId = flow.Id,\n//        //                StepOrder = index,\n//        //                TemplateToSend = node.TemplateName,\n//        //                TemplateType = node.TemplateType ?? \"UNKNOWN\",\n//        //                TriggerButtonText = node.TriggerButtonText ?? \"\",\n//        //                TriggerButtonType = node.TriggerButtonType ?? \"cta\",\n//        //                PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,\n//        //                PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,\n//        //                UseProfileName = node.UseProfileName,\n//        //                ProfileNameSlot = node.ProfileNameSlot,\n//        //                //ProfileNameSlot = node.ProfileNameSlot ?? 1,\n//        //                ButtonLinks = new List<FlowButtonLink>()\n//        //            };\n\n//        //            // ‚úÖ Harden profile-name config per step\n//        //            var isTextTemplate = string.Equals(step.TemplateType, \"text_template\", StringComparison.OrdinalIgnoreCase);\n//        //            if (!isTextTemplate)\n//        //            {\n//        //                // Only text templates support body placeholders; disable on others\n//        //                step.UseProfileName = false;\n//        //                step.ProfileNameSlot = null;\n//        //            }\n//        //            //else if (step.UseProfileName)\n//        //            //{\n//        //            //    // Clamp to minimum valid slot\n//        //            //    if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)\n//        //            //        step.ProfileNameSlot = 1;\n//        //            //}\n//        //            else\n//        //            {\n//        //                // Text template:\n//        //                if (!step.UseProfileName)\n//        //                {\n//        //                    // Toggle OFF ‚Üí always null the slot\n//        //                    step.ProfileNameSlot = null;\n//        //                }\n//        //                else\n//        //                {\n//        //                    // Toggle ON ‚Üí clamp to minimum valid\n//        //                    if (!step.ProfileNameSlot.HasValue || step.ProfileNameSlot.Value < 1)\n//        //                        step.ProfileNameSlot = 1;\n//        //                    // (Optional) upper clamp if you want: e.g., step.ProfileNameSlot = Math.Min(step.ProfileNameSlot.Value, 50);\n//        //                }\n//        //            }\n//        //            stepMap[node.Id] = step;\n//        //            _context.CTAFlowSteps.Add(step);\n//        //        }\n\n//        //        // 3) Build Links PER NODE using buttons order (with Index), not per-edge blindly\n//        //        foreach (var node in dto.Nodes)\n//        //        {\n//        //            if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))\n//        //                continue;\n\n//        //            // outgoing edges from this node\n//        //            var outEdges = dto.Edges?.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList()\n//        //                           ?? new List<FlowEdgeDto>();\n\n//        //            // dedupe by button text to avoid ambiguous routing\n//        //            var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n\n//        //            // stable ordering: by provided Index (0..N), then by Text\n//        //            var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())\n//        //                .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)\n//        //                .ThenBy(b => b.Text ?? string.Empty)\n//        //                .ToList();\n\n//        //            short nextIdx = 0;\n\n//        //            foreach (var btn in orderedButtons)\n//        //            {\n//        //                var text = (btn.Text ?? string.Empty).Trim();\n//        //                if (string.IsNullOrEmpty(text))\n//        //                    continue;\n\n//        //                if (!seenTexts.Add(text))\n//        //                {\n//        //                    Log.Warning(\"‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; keeping first, skipping duplicates.\", text, node.Id);\n//        //                    continue;\n//        //                }\n\n//        //                // match edge by SourceHandle == button text (how ReactFlow wires handles)\n//        //                var edge = outEdges.FirstOrDefault(e =>\n//        //                    string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));\n//        //                if (edge == null)\n//        //                {\n//        //                    // no wire from this button ‚Üí skip link creation but keep button metadata in UI on reload\n//        //                    continue;\n//        //                }\n\n//        //                if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep))\n//        //                    continue;\n\n//        //                // final index: prefer incoming payload Index; else fallback to a sequential counter\n//        //                var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;\n//        //                nextIdx = (short)(finalIndex + 1);\n\n//        //                var link = new FlowButtonLink\n//        //                {\n//        //                    Id = Guid.NewGuid(),\n//        //                    CTAFlowStepId = fromStep.Id,\n//        //                    NextStepId = toStep.Id,\n//        //                    ButtonText = text,\n//        //                    ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? \"QUICK_REPLY\" : btn.Type,\n//        //                    ButtonSubType = btn.SubType ?? string.Empty,\n//        //                    ButtonValue = btn.Value ?? string.Empty,\n//        //                    ButtonIndex = (short)finalIndex // üîë persist the index\n//        //                };\n\n//        //                _context.FlowButtonLinks.Add(link);\n//        //                fromStep.ButtonLinks.Add(link);\n\n//        //                // propagate trigger info on the target step for convenience\n//        //                toStep.TriggerButtonText = text;\n//        //                toStep.TriggerButtonType = (btn.Type ?? \"QUICK_REPLY\").ToLowerInvariant();\n//        //            }\n//        //        }\n\n//        //        await _context.SaveChangesAsync();\n\n//        //        Log.Information(\"‚úÖ Flow '{Flow}' saved | Steps: {StepCount} | Links: {LinkCount}\",\n//        //            dto.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));\n\n//        //        return ResponseResult.SuccessInfo(\"‚úÖ Flow saved successfully.\");\n//        //    }\n//        //    catch (Exception ex)\n//        //    {\n//        //        Log.Error(ex, \"‚ùå Exception while saving flow\");\n//        //        return ResponseResult.ErrorInfo(\"‚ùå Internal error while saving flow.\");\n//        //    }\n//        //}\n\n\n//        //public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId)\n//        //{\n//        //    var flow = await _context.CTAFlowConfigs\n//        //        .Include(c => c.Steps)\n//        //            .ThenInclude(s => s.ButtonLinks)\n//        //        .FirstOrDefaultAsync(c =>\n//        //            c.Id == flowId &&\n//        //            c.BusinessId == businessId &&   // üëà tenant scoping\n//        //            c.IsActive);\n\n//        //    if (flow == null) return null;\n\n//        //    // ---- Pre-fetch unique template names (defensive) ----\n//        //    var templateMap = new Dictionary<string, TemplateMetadataDto>(StringComparer.OrdinalIgnoreCase);\n//        //    foreach (var name in flow.Steps\n//        //                             .Select(s => s.TemplateToSend)\n//        //                             .Where(n => !string.IsNullOrWhiteSpace(n))\n//        //                             .Distinct(StringComparer.OrdinalIgnoreCase))\n//        //    {\n//        //        try\n//        //        {\n//        //            var tpl = await _templateFetcherService.GetTemplateByNameAsync(\n//        //                businessId, name!, includeButtons: true);\n//        //            if (tpl != null) templateMap[name!] = tpl;\n//        //        }\n//        //        catch (Exception ex)\n//        //        {\n//        //            Log.Warning(ex, \"‚ö†Ô∏è Failed to fetch template from Meta for {Template}\", name);\n//        //        }\n//        //    }\n\n//        //    // ---- Nodes ----\n//        //    var nodes = flow.Steps.Select(step =>\n//        //    {\n//        //        templateMap.TryGetValue(step.TemplateToSend ?? \"\", out var template);\n\n//        //        IEnumerable<FlowButtonLink> links =\n//        //            step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>();\n\n//        //        var dbButtons = links.Select(link => new LinkButtonDto\n//        //        {\n//        //            Text = link.ButtonText,\n//        //            Type = link.ButtonType,\n//        //            SubType = link.ButtonSubType,\n//        //            Value = link.ButtonValue,\n//        //            TargetNodeId = link.NextStepId?.ToString() // null-safe\n//        //        });\n\n//        //        var templateButtons = (template?.ButtonParams ?? new List<ButtonMetadataDto>())\n//        //            .Where(btn => !links.Any(bl =>\n//        //                        string.Equals(bl.ButtonText, btn.Text, StringComparison.OrdinalIgnoreCase)))\n//        //            .Select(btn => new LinkButtonDto\n//        //            {\n//        //                Text = btn.Text,\n//        //                TargetNodeId = null\n//        //            });\n\n//        //        return new FlowNodeDto\n//        //        {\n//        //            Id = step.Id.ToString(),\n//        //            TemplateName = step.TemplateToSend,\n//        //            TemplateType = step.TemplateType,\n//        //            MessageBody = template?.Body ?? \"Message body preview...\",\n//        //            TriggerButtonText = step.TriggerButtonText,\n//        //            TriggerButtonType = step.TriggerButtonType,\n//        //            PositionX = step.PositionX ?? 100,\n//        //            PositionY = step.PositionY ?? 100,\n\n//        //            // Conditional logic\n//        //            RequiredTag = step.RequiredTag,\n//        //            RequiredSource = step.RequiredSource,\n\n//        //            UseProfileName = step.UseProfileName,\n//        //            ProfileNameSlot = step.ProfileNameSlot,\n\n//        //            Buttons = dbButtons.Concat(templateButtons).ToList()\n//        //        };\n//        //    }).ToList();\n\n//        //    // ---- Edges (skip links without a target) ----\n//        //    var edges = flow.Steps\n//        //        .SelectMany(step =>\n//        //            (step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>())\n//        //            .Where(link => link.NextStepId.HasValue)\n//        //            .Select(link => new FlowEdgeDto\n//        //            {\n//        //                FromNodeId = step.Id.ToString(),\n//        //                ToNodeId = link.NextStepId!.Value.ToString(),\n//        //                SourceHandle = link.ButtonText\n//        //            }))\n//        //        .ToList();\n\n//        //    return new SaveVisualFlowDto\n//        //    {\n//        //        FlowName = flow.FlowName,\n//        //        IsPublished = flow.IsPublished,\n//        //        Nodes = nodes,\n//        //        Edges = edges\n//        //    };\n//        //}\n\n//        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId)\n//        {\n//            var flow = await _context.CTAFlowConfigs\n//                .Include(c => c.Steps)\n//                    .ThenInclude(s => s.ButtonLinks)\n//                .FirstOrDefaultAsync(c => c.Id == flowId && c.BusinessId == businessId && c.IsActive);\n\n//            if (flow == null) return null;\n\n//            // 1) Prefetch template metadata for all unique names (defensive, fast)\n//            var templateMap = new Dictionary<string, TemplateMetadataDto>(StringComparer.OrdinalIgnoreCase);\n//            var uniqueNames = flow.Steps\n//                .Select(s => s.TemplateToSend)\n//                .Where(n => !string.IsNullOrWhiteSpace(n))\n//                .Distinct(StringComparer.OrdinalIgnoreCase)\n//                .ToList();\n\n//            foreach (var name in uniqueNames)\n//            {\n//                try\n//                {\n//                    var tpl = await _templateFetcherService.GetTemplateByNameAsync(\n//                        businessId, name!, includeButtons: true);\n//                    if (tpl != null) templateMap[name!] = tpl;\n//                }\n//                catch (Exception ex)\n//                {\n//                    Log.Warning(ex, \"‚ö†Ô∏è Failed to fetch template from provider for {Template}\", name);\n//                }\n//            }\n\n//            // 2) Build nodes with real body + merged buttons (DB links first, then any unlinked template buttons)\n//            var nodes = flow.Steps.Select(step =>\n//            {\n//                templateMap.TryGetValue(step.TemplateToSend ?? \"\", out var tpl);\n\n//                var dbLinks = step.ButtonLinks ?? new List<FlowButtonLink>();\n\n//                var dbButtons = dbLinks\n//                    .OrderBy(b => b.ButtonIndex)\n//                    .Select(link => new LinkButtonDto\n//                    {\n//                        Text = link.ButtonText,\n//                        Type = link.ButtonType,\n//                        SubType = link.ButtonSubType,\n//                        Value = link.ButtonValue,\n//                        Index = link.ButtonIndex,\n//                        TargetNodeId = link.NextStepId?.ToString()\n//                    });\n\n//                var templateButtons = (tpl?.ButtonParams ?? new List<ButtonMetadataDto>())\n//                    .Where(btn => !dbLinks.Any(bl => string.Equals(bl.ButtonText, btn.Text, StringComparison.OrdinalIgnoreCase)))\n//                    .Select(btn => new LinkButtonDto\n//                    {\n//                        Text = btn.Text,\n//                        // no TargetNodeId: not wired\n//                    });\n\n//                return new FlowNodeDto\n//                {\n//                    Id = step.Id.ToString(),\n//                    TemplateName = step.TemplateToSend,\n//                    TemplateType = step.TemplateType,\n//                    MessageBody = string.IsNullOrWhiteSpace(tpl?.Body) ? \"‚Äî no body found ‚Äî\" : tpl!.Body, // ‚Üê REAL BODY\n//                    TriggerButtonText = step.TriggerButtonText,\n//                    TriggerButtonType = step.TriggerButtonType,\n//                    PositionX = step.PositionX ?? 100,\n//                    PositionY = step.PositionY ?? 100,\n//                    RequiredTag = step.RequiredTag,\n//                    RequiredSource = step.RequiredSource,\n//                    UseProfileName = step.UseProfileName,\n//                    ProfileNameSlot = step.ProfileNameSlot,\n//                    Buttons = dbButtons.Concat(templateButtons).ToList()\n//                };\n//            }).ToList();\n\n//            // 3) Build edges\n//            var edges = flow.Steps\n//                .SelectMany(step => (step.ButtonLinks ?? Enumerable.Empty<FlowButtonLink>())\n//                    .Where(l => l.NextStepId.HasValue)\n//                    .Select(l => new FlowEdgeDto\n//                    {\n//                        FromNodeId = step.Id.ToString(),\n//                        ToNodeId = l.NextStepId!.Value.ToString(),\n//                        SourceHandle = l.ButtonText\n//                    }))\n//                .ToList();\n\n//            return new SaveVisualFlowDto\n//            {\n//                FlowName = flow.FlowName,\n//                IsPublished = flow.IsPublished,\n//                Nodes = nodes,\n//                Edges = edges\n//            };\n//        }\n\n//        public async Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy)\n//        {\n//            // Load flow with children so we can remove in the right order\n//            var flow = await _context.CTAFlowConfigs\n//                .Include(f => f.Steps)\n//                    .ThenInclude(s => s.ButtonLinks)\n//                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n//            if (flow == null)\n//                return ResponseResult.ErrorInfo(\"‚ùå Flow not found or does not belong to you.\");\n\n//            // Is this flow used by any active campaign?\n//            var inUseQuery = _context.Campaigns\n//                .Where(c => c.BusinessId == businessId &&\n//                            !c.IsDeleted &&\n//                            c.CTAFlowConfigId == flowId);\n\n//            var inUseCount = await inUseQuery.CountAsync();\n//            if (inUseCount > 0)\n//            {\n//                // Optional: show a few campaign names in the error for the UI\n//                var sample = await inUseQuery\n//                    .OrderByDescending(c => c.CreatedAt)\n//                    .Select(c => new { c.Id, c.Name, c.Status })\n//                    .Take(5)\n//                    .ToListAsync();\n\n//                Log.Warning(\"‚ùå Delete flow blocked. Flow {FlowId} is used by {Count} campaigns: {@Sample}\",\n//                    flowId, inUseCount, sample);\n\n//                return ResponseResult.ErrorInfo(\n//                    $\"‚ùå Cannot delete. This flow is attached to {inUseCount} campaign(s). \" +\n//                    $\"Delete those campaigns first.\"\n//                );\n//            }\n\n//            // Safe to remove: delete children first, then the flow\n//            foreach (var step in flow.Steps)\n//                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n//            _context.CTAFlowSteps.RemoveRange(flow.Steps);\n//            _context.CTAFlowConfigs.Remove(flow);\n\n//            await _context.SaveChangesAsync();\n//            return ResponseResult.SuccessInfo(\"‚úÖ Flow deleted.\");\n//        }\n\n\n//        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)\n//        {\n//            return await _context.CTAFlowConfigs\n//                .Where(f => f.BusinessId == businessId && f.IsPublished)\n//                .OrderByDescending(f => f.CreatedAt)\n//                .Select(f => new VisualFlowSummaryDto\n//                {\n//                    Id = f.Id,\n//                    FlowName = f.FlowName,\n//                    IsPublished = f.IsPublished,\n//                    CreatedAt = f.CreatedAt\n//                })\n//                .ToListAsync();\n//        }\n\n//        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)\n//        {\n//            return await _context.CTAFlowConfigs\n//                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)\n//                .OrderByDescending(f => f.CreatedAt)\n//                .Select(f => new VisualFlowSummaryDto\n//                {\n//                    Id = f.Id,\n//                    FlowName = f.FlowName,\n//                    CreatedAt = f.CreatedAt,\n//                    IsPublished = f.IsPublished\n//                })\n//                .ToListAsync();\n//        }\n\n//        public async Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber)\n//        {\n//            // Log.Information(\"üöÄ Executing follow-up for BusinessId: {BusinessId}, CurrentStepId: {StepId}\", businessId);\n//            if (currentStep == null)\n//            {\n//                Log.Warning(\"‚ö†Ô∏è Cannot execute follow-up. Current step is null.\");\n//                return ResponseResult.ErrorInfo(\"Current step not found.\");\n//            }\n\n//            // üß† Step: Look through all button links for a valid NextStepId\n//            var nextLink = currentStep.ButtonLinks.FirstOrDefault(link => link.NextStepId != null);\n\n//            if (nextLink == null)\n//            {\n//                Log.Information(\"‚ÑπÔ∏è No NextStepId defined in any ButtonLinks for StepId: {StepId}\", currentStep.Id);\n//                return ResponseResult.SuccessInfo(\"No follow-up step to execute.\");\n//            }\n\n//            // üîç Fetch the next step using new logic (via CTAFlowConfig + Steps)\n//            // 1Ô∏è‚É£ Try to resolve with smart condition check\n//            var followUpStep = await GetChainedStepAsync(businessId, nextLink.NextStepId, null, null);\n\n//            if (followUpStep == null)\n//            {\n//                Log.Warning(\"‚ùå Follow-up step skipped due to condition mismatch ‚Üí StepId: {StepId}\", nextLink.NextStepId);\n\n//                // 2Ô∏è‚É£ Optional fallback: Try same flow ‚Üí Any step without conditions\n//                var flow = await _context.CTAFlowConfigs\n//                    .Include(f => f.Steps)\n//                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.IsPublished);\n\n//                followUpStep = flow?.Steps\n//                    .Where(s => string.IsNullOrEmpty(s.RequiredTag) && string.IsNullOrEmpty(s.RequiredSource))\n//                    .OrderBy(s => s.StepOrder)\n//                    .FirstOrDefault();\n\n//                if (followUpStep != null)\n//                {\n//                    Log.Information(\"üîÅ Fallback step selected ‚Üí StepId: {StepId}, Template: {Template}\",\n//                        followUpStep.Id, followUpStep.TemplateToSend);\n//                }\n//                else\n//                {\n//                    Log.Warning(\"üö´ No suitable fallback found in flow. Skipping follow-up.\");\n//                    return ResponseResult.SuccessInfo(\"No matching follow-up step based on user context.\");\n//                }\n//            }\n\n\n//            // üì® Send the follow-up message using the TemplateToSend field\n//            try\n//            {\n//                var template = followUpStep.TemplateToSend;\n\n//                Log.Information(\"üì§ Sending follow-up message ‚Üí Template: {Template}, To: {Recipient}\", template, recipientNumber);\n\n//                // üß™ Replace this with actual message engine call\n//                var sendDto = new SimpleTemplateMessageDto\n//                {\n//                    RecipientNumber = recipientNumber,\n//                    TemplateName = template,\n//                    TemplateParameters = new List<string>() // Add dynamic params later if needed\n//                };\n\n//                var sendResult = await _messageEngineService\n//     .SendTemplateMessageSimpleAsync(businessId, sendDto);\n\n//                if (!sendResult.Success)\n//                {\n//                    Log.Warning(\"‚ùå Follow-up message send failed ‚Üí {Template}\", template);\n//                    return ResponseResult.ErrorInfo(\"Follow-up send failed.\", sendResult.ErrorMessage);\n//                }\n\n\n//                return ResponseResult.SuccessInfo($\"Follow-up message sent using template: {template}\", null, sendResult.RawResponse);\n\n//            }\n//            catch (Exception ex)\n//            {\n//                Log.Error(ex, \"‚ùå Error sending follow-up message for StepId: {StepId}\", followUpStep.Id);\n//                return ResponseResult.ErrorInfo(\"Failed to send follow-up.\");\n//            }\n//        }\n//        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)\n//        {\n//            return GetChainedStepAsync(businessId, nextStepId, null, null); // Forward to full logic\n//        }\n\n//        // ‚úÖ Extended logic with condition check (Tag + Source)\n//        public async Task<CTAFlowStep?> GetChainedStepAsync(\n//            Guid businessId,\n//            Guid? nextStepId,\n//            TrackingLog? trackingLog = null,\n//            Contact? contact = null)\n//        {\n//            if (nextStepId == null)\n//            {\n//                Log.Information(\"‚ÑπÔ∏è No NextStepId provided ‚Äî skipping follow-up.\");\n//                return null;\n//            }\n\n//            try\n//            {\n//                var flow = await _context.CTAFlowConfigs\n//                    .Include(f => f.Steps)\n//                    .FirstOrDefaultAsync(f =>\n//                        f.BusinessId == businessId &&\n//                        f.Steps.Any(s => s.Id == nextStepId));\n\n//                if (flow == null)\n//                {\n//                    Log.Warning(\"‚ö†Ô∏è No flow found containing NextStepId: {NextStepId} for business: {BusinessId}\", nextStepId, businessId);\n//                    return null;\n//                }\n\n//                var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);\n\n//                if (followUpStep == null)\n//                {\n//                    Log.Warning(\"‚ùå Step matched in flow but not found in step list: {NextStepId}\", nextStepId);\n//                    return null;\n//                }\n\n//                // ‚úÖ Check RequiredTag / Source match\n//                if (trackingLog != null)\n//                {\n//                    var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);\n\n//                    if (!isMatch)\n//                    {\n//                        Log.Information(\"üö´ Step {StepId} skipped due to condition mismatch [Tag: {Tag}, Source: {Source}]\",\n//                            followUpStep.Id, followUpStep.RequiredTag, followUpStep.RequiredSource);\n//                        return null;\n//                    }\n//                }\n\n//                Log.Information(\"‚úÖ Follow-up step found and matched ‚Üí StepId: {StepId}, Template: {Template}\",\n//                    followUpStep.Id, followUpStep.TemplateToSend);\n\n//                return followUpStep;\n//            }\n//            catch (Exception ex)\n//            {\n//                Log.Error(ex, \"‚ùå Exception while fetching chained step for NextStepId: {NextStepId}\", nextStepId);\n//                throw;\n//            }\n//        }\n\n//        // ‚úÖ Optional helper for resolving from TrackingLogId\n//        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(\n//            Guid businessId,\n//            Guid? nextStepId,\n//            Guid? trackingLogId)\n//        {\n//            var log = await _context.TrackingLogs\n//                .Include(l => l.Contact)\n//                    .ThenInclude(c => c.ContactTags)\n//                        .ThenInclude(ct => ct.Tag)\n//                .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n//            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);\n//        }\n\n\n//        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)\n//        {\n//            try\n//            {\n//                Log.Information(\"üö¶ Executing Visual Flow ‚Üí StepId: {StepId} | TrackingLogId: {TrackingLogId}\", startStepId, trackingLogId);\n\n//                // ‚îÄ‚îÄ local helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n//                static string ResolveGreeting(string? profileName, string? contactName)\n//                {\n//                    var s = (profileName ?? contactName)?.Trim();\n//                    return string.IsNullOrEmpty(s) ? \"there\" : s;\n//                }\n//                static void EnsureArgsLength(List<string> args, int slot1Based)\n//                {\n//                    while (args.Count < slot1Based) args.Add(string.Empty);\n//                }\n//                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n//                var log = await _context.TrackingLogs\n//                    .Include(l => l.Contact)\n//                        .ThenInclude(c => c.ContactTags)\n//                            .ThenInclude(ct => ct.Tag)\n//                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n//                if (log == null)\n//                {\n//                    Log.Warning(\"‚ùå TrackingLog not found for ID: {TrackingLogId}\", trackingLogId);\n//                    return ResponseResult.ErrorInfo(\"Tracking log not found.\");\n//                }\n\n//                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);\n\n//                if (step == null)\n//                {\n//                    Log.Warning(\"‚ùå No flow step matched or conditions failed ‚Üí StepId: {StepId}\", startStepId);\n//                    return ResponseResult.ErrorInfo(\"Step conditions not satisfied.\");\n//                }\n\n//                // ‚úÖ Build profile-aware args for this step (used for text templates)\n//                var args = new List<string>();\n//                if (step.UseProfileName && step.ProfileNameSlot is int slot && slot >= 1)\n//                {\n//                    // Prefer the already-loaded contact on the tracking log; fallback to DB lookup\n//                    var contact = log.Contact ?? await _context.Contacts\n//                        .AsNoTracking()\n//                        .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == (log.ContactPhone ?? \"\"));\n\n//                    var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);\n//                    EnsureArgsLength(args, slot);\n//                    args[slot - 1] = greet; // 1-based slot -> 0-based index\n//                }\n\n//                ResponseResult sendResult;\n\n//                // This switch block remains unchanged, except we pass args for text templates\n//                switch (step.TemplateType?.ToLower())\n//                {\n//                    case \"image_template\":\n//                        var imageDto = new ImageTemplateMessageDto\n//                        {\n//                            BusinessId = businessId,\n//                            RecipientNumber = log.ContactPhone ?? \"\",\n//                            TemplateName = step.TemplateToSend,\n//                            LanguageCode = \"en_US\"\n//                            // If your image templates support body params, you can also pass args here.\n//                        };\n//                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);\n//                        break;\n\n//                    case \"text_template\":\n//                    default:\n//                        var textDto = new SimpleTemplateMessageDto\n//                        {\n//                            RecipientNumber = log.ContactPhone ?? \"\",\n//                            TemplateName = step.TemplateToSend,\n//                            TemplateParameters = args // ‚úÖ inject ProfileName here when configured\n//                        };\n//                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);\n//                        break;\n//                }\n\n//                // ‚úÖ 2. SAVE the new ID to the log\n//                var executionLog = new FlowExecutionLog\n//                {\n//                    Id = Guid.NewGuid(),\n//                    BusinessId = businessId,\n//                    StepId = step.Id,\n//                    FlowId = step.CTAFlowConfigId,\n//                    CampaignSendLogId = campaignSendLogId, // <-- THE NEW VALUE IS SAVED HERE\n//                    TrackingLogId = trackingLogId,\n//                    ContactPhone = log.ContactPhone,\n//                    TriggeredByButton = step.TriggerButtonText,\n//                    TemplateName = step.TemplateToSend,\n//                    TemplateType = step.TemplateType,\n//                    Success = sendResult.Success,\n//                    ErrorMessage = sendResult.ErrorMessage,\n//                    RawResponse = sendResult.RawResponse,\n//                    ExecutedAt = DateTime.UtcNow\n//                };\n\n//                _context.FlowExecutionLogs.Add(executionLog);\n//                await _context.SaveChangesAsync();\n\n//                if (sendResult.Success)\n//                {\n//                    Log.Information(\"‚úÖ Flow step executed ‚Üí Template: {Template} sent to {To}\", step.TemplateToSend, log.ContactPhone);\n//                }\n//                else\n//                {\n//                    Log.Warning(\"‚ùå Failed to send template from flow ‚Üí {Reason}\", sendResult.ErrorMessage);\n//                }\n\n//                return ResponseResult.SuccessInfo($\"Flow step executed. Sent: {sendResult.Success}\", null, sendResult.RawResponse);\n//            }\n//            catch (Exception ex)\n//            {\n//                Log.Error(ex, \"‚ùå Exception during ExecuteVisualFlowAsync()\");\n//                return ResponseResult.ErrorInfo(\"Internal error during flow execution.\");\n//            }\n//        }\n\n//        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)\n//        {\n//            return await _context.FlowButtonLinks\n//                 .Where(l => l.CTAFlowStepId == sourceStepId\n//              && l.NextStepId != null\n//              && l.Step.CTAFlowConfigId == flowId\n//              && l.ButtonIndex == buttonIndex)\n//                .SingleOrDefaultAsync();\n\n//        }\n//        //public async Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId)\n//        //{\n//        //    return await _context.Campaigns\n//        //        .Where(c => c.BusinessId == businessId\n//        //                    && !c.IsDeleted\n//        //                    && c.CTAFlowConfigId == flowId)\n//        //        .OrderByDescending(c => c.CreatedAt)\n//        //        .Select(c => new AttachedCampaignDto(c.Id, c.Name, c.Status, c.ScheduledAt))\n//        //        .ToListAsync();\n//        //}\n\n//        public async Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId)\n//        {\n//            try\n//            {\n//                // Load the flow + steps + button links (no tracking for view)\n//                var flow = await _context.CTAFlowConfigs\n//                    .AsNoTracking()\n//                    .Where(f => f.IsActive && f.BusinessId == businessId && f.Id == flowId)\n//                    .Select(f => new\n//                    {\n//                        f.Id,\n//                        f.FlowName,\n//                        f.IsPublished,\n//                        Steps = _context.CTAFlowSteps\n//                            .Where(s => s.CTAFlowConfigId == f.Id)\n//                            .OrderBy(s => s.StepOrder)\n//                            .Select(s => new\n//                            {\n//                                s.Id,\n//                                s.StepOrder,\n//                                s.TemplateToSend,\n//                                s.TemplateType,\n//                                s.TriggerButtonText,\n//                                s.TriggerButtonType,\n//                                s.PositionX,\n//                                s.PositionY,\n//                                s.UseProfileName,\n//                                s.ProfileNameSlot,\n//                                Buttons = _context.FlowButtonLinks\n//                                    .Where(b => b.CTAFlowStepId == s.Id)\n//                                    .OrderBy(b => b.ButtonIndex)\n//                                    .Select(b => new\n//                                    {\n//                                        b.ButtonText,\n//                                        b.ButtonType,\n//                                        b.ButtonSubType,\n//                                        b.ButtonValue,\n//                                        b.ButtonIndex,\n//                                        b.NextStepId\n//                                    })\n//                                    .ToList()\n//                            })\n//                            .ToList()\n//                    })\n//                    .FirstOrDefaultAsync();\n\n//                if (flow == null)\n//                {\n//                    return ResponseResult.ErrorInfo(\"Flow not found.\");\n//                }\n\n//                // Map to FE shape\n//                var nodes = flow.Steps.Select(s => new\n//                {\n//                    id = s.Id.ToString(), // node id = step id\n//                    positionX = s.PositionX ?? 0,\n//                    positionY = s.PositionY ?? 0,\n//                    templateName = s.TemplateToSend,\n//                    templateType = s.TemplateType,\n//                    triggerButtonText = s.TriggerButtonText ?? string.Empty,\n//                    triggerButtonType = s.TriggerButtonType ?? \"cta\",\n//                    requiredTag = string.Empty,       // not used in your model; keep empty\n//                    requiredSource = string.Empty,    // not used; keep empty\n//                    useProfileName = s.UseProfileName,\n//                    profileNameSlot = (s.ProfileNameSlot.HasValue && s.ProfileNameSlot.Value > 0) ? s.ProfileNameSlot.Value : 1,\n//                    buttons = s.Buttons.Select(b => new\n//                    {\n//                        text = b.ButtonText,\n//                        type = b.ButtonType,\n//                        subType = b.ButtonSubType,\n//                        value = b.ButtonValue,\n//                        targetNodeId = b.NextStepId == Guid.Empty ? null : b.NextStepId.ToString(),\n//                        index = (int)(b.ButtonIndex)\n//                    })\n//                });\n\n//                // Build edges from button links\n//                var edges = flow.Steps\n//                    .SelectMany(s => s.Buttons\n//                        .Where(b => b.NextStepId != Guid.Empty)\n//                        .Select(b => new\n//                        {\n//                            fromNodeId = s.Id.ToString(),\n//                            toNodeId = b.NextStepId.ToString(),\n//                            sourceHandle = b.ButtonText // label/handle = button text\n//                        }));\n\n//                var payload = new\n//                {\n//                    flowName = flow.FlowName,\n//                    isPublished = flow.IsPublished,\n//                    nodes,\n//                    edges\n//                };\n\n//                return ResponseResult.SuccessInfo(\"Flow loaded.\", payload);\n//            }\n//            catch (Exception ex)\n//            {\n//                Log.Error(ex, \"‚ùå Exception while loading visual flow {FlowId}\", flowId);\n//                return ResponseResult.ErrorInfo(\"Internal error while loading flow.\");\n//            }\n//        }\n//        public async Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId)\n//        {\n//            // base query: attached, non-deleted\n//            var q = _context.Campaigns\n//                .Where(c => c.BusinessId == businessId && !c.IsDeleted && c.CTAFlowConfigId == flowId);\n\n//            // earliest send per campaign\n//            var firstSends = await _context.CampaignSendLogs\n//                .Where(s => s.BusinessId == businessId && s.CampaignId != Guid.Empty)\n//                .GroupBy(s => s.CampaignId)\n//                .Select(g => new { CampaignId = g.Key, FirstSentAt = (DateTime?)g.Min(s => s.CreatedAt) })\n//                .ToListAsync();\n\n//            var firstSendMap = firstSends.ToDictionary(x => x.CampaignId, x => x.FirstSentAt);\n\n//            var list = await q\n//                .OrderByDescending(c => c.CreatedAt)\n//                .Select(c => new\n//                {\n//                    c.Id,\n//                    c.Name,\n//                    c.Status,\n//                    c.ScheduledAt,\n//                    c.CreatedAt,\n//                    c.CreatedBy\n//                })\n//                .ToListAsync();\n\n//            return list.Select(x => new AttachedCampaignDto(\n//                x.Id,\n//                x.Name,\n//                x.Status,\n//                x.ScheduledAt,\n//                x.CreatedAt,\n//                x.CreatedBy,\n//                firstSendMap.TryGetValue(x.Id, out var ts) ? ts : null\n//            )).ToList();\n//        }\n//        public async Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId)\n//        {\n//            // Load flow + children\n//            var flow = await _context.CTAFlowConfigs\n//                .Include(f => f.Steps)\n//                    .ThenInclude(s => s.ButtonLinks)\n//                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n//            if (flow is null) return false;\n\n//            // Guard: any active campaign still attached?\n//            var attached = await _context.Campaigns\n//                .Where(c => c.BusinessId == businessId\n//                            && !c.IsDeleted\n//                            && c.CTAFlowConfigId == flowId)\n//                .Select(c => c.Id)\n//                .Take(1)\n//                .AnyAsync();\n\n//            if (attached) return false;\n\n//            // Hard delete (children first; FK-safe)\n//            foreach (var step in flow.Steps)\n//                _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n//            _context.CTAFlowSteps.RemoveRange(flow.Steps);\n//            _context.CTAFlowConfigs.Remove(flow);\n\n//            await _context.SaveChangesAsync();\n//            return true;\n//        }\n\n//        //public async Task<FlowUpdateResult> UpdateVisualFlowAsync(Guid flowId, SaveVisualFlowDto dto, Guid businessId, string user)\n//        //{\n//        //    var flow = await _context.CTAFlowConfigs\n//        //        .Include(f => f.Steps)\n//        //            .ThenInclude(s => s.ButtonLinks)\n//        //        .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n//        //    if (flow is null)\n//        //        return new FlowUpdateResult { Status = \"notFound\", Message = \"Flow not found.\" };\n\n//        //    var attached = await _context.Campaigns\n//        //        .Where(c => !c.IsDeleted && c.BusinessId == businessId && c.CTAFlowConfigId == flowId)\n//        //        .Select(c => new { c.Id, c.Name, c.Status, c.ScheduledAt, c.CreatedAt, c.CreatedBy })\n//        //        .ToListAsync();\n\n//        //    if (flow.IsPublished && attached.Count > 0)\n//        //    {\n//        //        return new FlowUpdateResult\n//        //        {\n//        //            Status = \"requiresFork\",\n//        //            Message = \"This flow is published and attached to campaign(s). Create a new draft version.\",\n//        //            Campaigns = attached\n//        //        };\n//        //    }\n\n//        //    var needsRepublish = flow.IsPublished && attached.Count == 0;\n//        //    if (needsRepublish) flow.IsPublished = false; // flip to draft during edit\n\n//        //    // wipe & rebuild steps (simplest and consistent with your builder payload)\n//        //    _context.FlowButtonLinks.RemoveRange(flow.Steps.SelectMany(s => s.ButtonLinks));\n//        //    _context.CTAFlowSteps.RemoveRange(flow.Steps);\n//        //    await _context.SaveChangesAsync();\n\n//        //    flow.FlowName = string.IsNullOrWhiteSpace(dto.FlowName) ? flow.FlowName : dto.FlowName.Trim();\n//        //    flow.UpdatedAt = DateTime.UtcNow;\n\n//        //    var newSteps = new List<CTAFlowStep>();\n//        //    var nodeIdToNewGuid = new Dictionary<string, Guid>();\n\n//        //    // 1) create steps with new IDs but keep mapping from incoming node.Id\n//        //    foreach (var n in dto.Nodes)\n//        //    {\n//        //        var stepId = Guid.TryParse(n.Id, out var parsed) ? parsed : Guid.NewGuid();\n//        //        nodeIdToNewGuid[n.Id] = stepId;\n\n//        //        var s = new CTAFlowStep\n//        //        {\n//        //            Id = stepId,\n//        //            CTAFlowConfigId = flow.Id,\n//        //            TemplateToSend = n.TemplateName ?? string.Empty,\n//        //            TemplateType = n.TemplateType,\n//        //            TriggerButtonText = n.TriggerButtonText ?? \"\",\n//        //            TriggerButtonType = n.TriggerButtonType ?? \"\",\n//        //            StepOrder = 0,\n//        //            RequiredTag = n.RequiredTag,\n//        //            RequiredSource = n.RequiredSource,\n//        //            PositionX = n.PositionX,\n//        //            PositionY = n.PositionY,\n//        //            UseProfileName = n.UseProfileName,\n//        //            ProfileNameSlot = n.ProfileNameSlot\n//        //        };\n\n//        //        s.ButtonLinks = (n.Buttons ?? new List<LinkButtonDto>())\n//        //            .Select((b, idx) => new FlowButtonLink\n//        //            {\n//        //                Id = Guid.NewGuid(),\n//        //                CTAFlowStepId = s.Id,\n//        //                Step = s,\n//        //                ButtonText = b.Text ?? \"\",\n//        //                ButtonType = b.Type ?? \"QUICK_REPLY\",\n//        //                ButtonSubType = b.SubType ?? \"\",\n//        //                ButtonValue = b.Value ?? \"\",\n//        //                ButtonIndex = (short)(b.Index >= 0 ? b.Index : idx),\n//        //                NextStepId = string.IsNullOrWhiteSpace(b.TargetNodeId) ? null :\n//        //                             (Guid.TryParse(b.TargetNodeId, out var t) ? t : null)\n//        //            }).ToList();\n\n//        //        newSteps.Add(s);\n//        //    }\n\n//        //    flow.Steps = newSteps;\n//        //    await _context.SaveChangesAsync();\n\n//        //    return new FlowUpdateResult { Status = \"ok\", NeedsRepublish = needsRepublish };\n//        //}\n\n//        //public async Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user)\n//        //{\n//        //    var flow = await _context.CTAFlowConfigs\n//        //        .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n//        //    if (flow is null) return false;\n\n//        //    // sanity: basic validation can be added here (has steps, etc.)\n//        //    flow.IsPublished = true;\n//        //    flow.UpdatedAt = DateTime.UtcNow;\n//        //    await _context.SaveChangesAsync();\n//        //    return true;\n//        //}\n\n//        // ---------- FORK (create draft copy) ----------\n//        //public async Task<Guid> ForkFlowAsync(Guid flowId, Guid businessId, string user)\n//        //{\n//        //    var src = await _context.CTAFlowConfigs\n//        //        .Include(f => f.Steps)\n//        //            .ThenInclude(s => s.ButtonLinks)\n//        //        .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n\n//        //    if (src is null) return Guid.Empty;\n\n//        //    var dst = new CTAFlowConfig\n//        //    {\n//        //        Id = Guid.NewGuid(),\n//        //        BusinessId = src.BusinessId,\n//        //        FlowName = src.FlowName + \" (copy)\",\n//        //        IsActive = true,\n//        //        IsPublished = false, // new draft\n//        //        CreatedAt = DateTime.UtcNow,\n//        //        CreatedBy = user,\n//        //        UpdatedAt = DateTime.UtcNow\n//        //    };\n\n//        //    var oldToNew = new Dictionary<Guid, Guid>();\n\n//        //    // Clone steps first\n//        //    foreach (var s in src.Steps)\n//        //    {\n//        //        var nsId = Guid.NewGuid();\n//        //        oldToNew[s.Id] = nsId;\n\n//        //        var ns = new CTAFlowStep\n//        //        {\n//        //            Id = nsId,\n//        //            CTAFlowConfigId = dst.Id,\n//        //            TriggerButtonText = s.TriggerButtonText,\n//        //            TriggerButtonType = s.TriggerButtonType,\n//        //            TemplateToSend = s.TemplateToSend,\n//        //            TemplateType = s.TemplateType,\n//        //            StepOrder = s.StepOrder,\n//        //            RequiredTag = s.RequiredTag,\n//        //            RequiredSource = s.RequiredSource,\n//        //            PositionX = s.PositionX,\n//        //            PositionY = s.PositionY,\n//        //            UseProfileName = s.UseProfileName,\n//        //            ProfileNameSlot = s.ProfileNameSlot,\n//        //            ButtonLinks = new List<FlowButtonLink>()\n//        //        };\n\n//        //        dst.Steps.Add(ns);\n//        //    }\n\n//        //    // Clone links and rewire targets if possible\n//        //    foreach (var s in src.Steps)\n//        //    {\n//        //        var ns = dst.Steps.First(x => x.Id == oldToNew[s.Id]);\n//        //        foreach (var b in s.ButtonLinks.OrderBy(x => x.ButtonIndex))\n//        //        {\n//        //            ns.ButtonLinks.Add(new FlowButtonLink\n//        //            {\n//        //                Id = Guid.NewGuid(),\n//        //                CTAFlowStepId = ns.Id,\n//        //                Step = ns,\n//        //                ButtonText = b.ButtonText,\n//        //                ButtonType = b.ButtonType,\n//        //                ButtonSubType = b.ButtonSubType,\n//        //                ButtonValue = b.ButtonValue,\n//        //                ButtonIndex = b.ButtonIndex,\n//        //                NextStepId = b.NextStepId.HasValue && oldToNew.ContainsKey(b.NextStepId.Value)\n//        //                    ? oldToNew[b.NextStepId.Value]\n//        //                    : null\n//        //            });\n//        //        }\n//        //    }\n\n//        //    _context.CTAFlowConfigs.Add(dst);\n//        //    await _context.SaveChangesAsync();\n//        //    return dst.Id;\n//        //}\n\n\n//    }\n//}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/FlowRuntimeService.cs",
      "sha256": "16ff88c5165c847cb6b85760c6bb245fb4ca66de4c50f040267fc7cea37d6d9a",
      "language": "csharp",
      "size": 26420,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Text.Json;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Webhooks.Services.Processors;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Features.CustomeApi.Services;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public class FlowRuntimeService : IFlowRuntimeService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n        private readonly ILogger<FlowRuntimeService> _logger;\n        private readonly ICtaJourneyPublisher _ctaPublisher;\n        public FlowRuntimeService(\n            AppDbContext dbContext,\n            IMessageEngineService messageEngineService,\n            IWhatsAppTemplateFetcherService templateFetcherService,  ILogger<FlowRuntimeService> logger, ICtaJourneyPublisher ctaPublisher)\n        {\n            _dbContext = dbContext;\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n            _logger = logger;\n            _ctaPublisher = ctaPublisher;\n        }\n\n        private static string ResolveGreeting(string? profileName, string? contactName)\n        {\n            var s = (profileName ?? contactName)?.Trim();\n            return string.IsNullOrEmpty(s) ? \"there\" : s;\n        }\n        private static void EnsureArgsLength(List<string> args, int slot1Based)\n        {\n            while (args.Count < slot1Based) args.Add(string.Empty);\n        }\n\n\n        //public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)\n        //{\n        //    try\n        //    {\n        //        // ‚îÄ‚îÄ local helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n        //        string ResolveGreeting(string? profileName, string? contactName)\n        //        {\n        //            var s = (profileName ?? contactName)?.Trim();\n        //            return string.IsNullOrEmpty(s) ? \"there\" : s;\n        //        }\n        //        void EnsureArgsLength(List<string> args, int slot1Based)\n        //        {\n        //            while (args.Count < slot1Based) args.Add(string.Empty);\n        //        }\n        //        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n        //        // 1) URL-only buttons ‚Üí no WA send, just record and return redirect\n        //        if (context.ClickedButton != null &&\n        //            context.ClickedButton.ButtonType?.Equals(\"URL\", StringComparison.OrdinalIgnoreCase) == true)\n        //        {\n        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = context.BusinessId,\n        //                FlowId = context.FlowId,\n        //                StepId = context.SourceStepId,\n        //                StepName = \"URL_REDIRECT\",\n        //                MessageLogId = context.MessageLogId,\n        //                ButtonIndex = context.ButtonIndex,\n        //                ContactPhone = context.ContactPhone,\n        //                Success = true,\n        //                ExecutedAt = DateTime.UtcNow,\n        //                RequestId = context.RequestId\n        //            });\n        //            await _dbContext.SaveChangesAsync();\n\n        //            return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };\n        //        }\n\n        //        // 2) Load next step in the same flow\n        //        var targetStep = await _dbContext.CTAFlowSteps\n        //            .Include(s => s.ButtonLinks)\n        //            .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&\n        //                                      s.CTAFlowConfigId == context.FlowId);\n\n\n\n        //        if (targetStep == null)\n        //            return new NextStepResult { Success = false, Error = \"Target step not found.\" };\n\n        //        if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))\n        //            return new NextStepResult { Success = false, Error = \"Target step has no template assigned.\" };\n\n        //        var templateName = targetStep.TemplateToSend.Trim();\n\n        //        // 3) ‚úÖ Preflight the template (resolve language and catch 132001 early)\n        //        var meta = await _templateFetcherService.GetTemplateByNameAsync(\n        //            context.BusinessId, templateName, includeButtons: true);\n\n        //        if (meta == null)\n        //        {\n        //            _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = context.BusinessId,\n        //                FlowId = context.FlowId,\n        //                StepId = targetStep.Id,\n        //                StepName = templateName,\n        //                MessageLogId = null,\n        //                ButtonIndex = context.ButtonIndex,\n        //                ContactPhone = context.ContactPhone,\n        //                Success = false,\n        //                ErrorMessage = $\"Template '{templateName}' not found for this WABA.\",\n        //                RawResponse = null,\n        //                ExecutedAt = DateTime.UtcNow,\n        //                RequestId = context.RequestId\n        //            });\n        //            await _dbContext.SaveChangesAsync();\n\n        //            return new NextStepResult { Success = false, Error = $\"Template '{templateName}' not found or not approved.\" };\n        //        }\n\n        //        var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? \"en_US\" : meta.Language;\n\n        //        // 3.1) üß≠ Determine sender (provider + phoneNumberId) from context (source of truth)\n        //        var provider = (context.Provider ?? string.Empty).Trim().ToUpperInvariant();\n        //        if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n        //            return new NextStepResult { Success = false, Error = \"Provider is required for flow sends (PINNACLE or META_CLOUD).\" };\n\n        //        string? phoneNumberId = context.PhoneNumberId;\n\n        //        if (string.IsNullOrWhiteSpace(phoneNumberId))\n        //        {\n        //            // Fallback: pick the default/active number for this business + provider\n        //            phoneNumberId = await _dbContext.WhatsAppPhoneNumbers\n        //                .AsNoTracking()\n        //                .Where(n => n.BusinessId == context.BusinessId\n        //                            && n.IsActive\n        //                            && n.Provider.ToUpper() == provider)\n        //                .OrderByDescending(n => n.IsDefault)\n        //                .ThenBy(n => n.WhatsAppBusinessNumber)\n        //                .Select(n => n.PhoneNumberId)\n        //                .FirstOrDefaultAsync();\n\n        //            if (string.IsNullOrWhiteSpace(phoneNumberId))\n        //                return new NextStepResult { Success = false, Error = \"Missing PhoneNumberId (no default sender configured for this provider).\" };\n        //        }\n\n        //        // ‚îÄ‚îÄ ‚¨áÔ∏è PROFILE NAME INJECTION: build body args only if requested ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n        //        var args = new List<string>();\n        //        if (targetStep.UseProfileName && targetStep.ProfileNameSlot is int slot && slot >= 1)\n        //        {\n        //            // Load contact to get ProfileName/Name\n        //            var contact = await _dbContext.Contacts\n        //                .AsNoTracking()\n        //                .FirstOrDefaultAsync(c => c.BusinessId == context.BusinessId\n        //                                          && c.PhoneNumber == context.ContactPhone);\n\n        //            var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);\n        //            EnsureArgsLength(args, slot);\n        //            args[slot - 1] = greet; // 1-based slot -> 0-based index\n        //        }\n\n        //        // Build WA components only if we have body args\n        //        var components = new List<object>();\n        //        if (args.Count > 0)\n        //        {\n        //            components.Add(new\n        //            {\n        //                type = \"body\",\n        //                parameters = args.Select(a => new { type = \"text\", text = a ?? string.Empty }).ToList()\n        //            });\n        //        }\n        //        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n        //        var payload = new\n        //        {\n        //            messaging_product = \"whatsapp\",\n        //            to = context.ContactPhone,\n        //            type = \"template\",\n        //            template = new\n        //            {\n        //                name = templateName,\n        //                language = new { code = languageCode },\n        //                components\n        //            }\n        //        };\n\n        //        // 4) Send via explicit provider (deterministic signature)\n        //        var sendResult = await _messageEngineService.SendPayloadAsync(\n        //            context.BusinessId,\n        //            provider,               // explicit\n        //            payload,\n        //            phoneNumberId           // explicit\n        //        );\n\n        //        // 5) Snapshot buttons for robust click mapping later\n        //        string? buttonBundleJson = null;\n        //        if (targetStep.ButtonLinks?.Count > 0)\n        //        {\n        //            var bundle = targetStep.ButtonLinks\n        //                .OrderBy(b => b.ButtonIndex)\n        //                .Select(b => new\n        //                {\n        //                    i = b.ButtonIndex,\n        //                    t = b.ButtonText ?? \"\",\n        //                    ty = b.ButtonType ?? \"QUICK_REPLY\",\n        //                    v = b.ButtonValue ?? \"\",\n        //                    ns = b.NextStepId\n        //                })\n        //                .ToList();\n\n        //            buttonBundleJson = JsonSerializer.Serialize(bundle);\n        //        }\n\n        //        // 6) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps\n        //        var messageLog = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = context.BusinessId,\n        //            RecipientNumber = context.ContactPhone,\n        //            CTAFlowConfigId = context.FlowId,\n        //            CTAFlowStepId = targetStep.Id,\n        //            FlowVersion = context.Version,\n        //            Source = \"flow\",\n        //            RefMessageId = context.MessageLogId,\n        //            CreatedAt = DateTime.UtcNow,\n        //            Status = sendResult.Success ? \"Sent\" : \"Failed\",\n        //            MessageId = sendResult.MessageId,\n        //            ErrorMessage = sendResult.ErrorMessage,\n        //            RawResponse = sendResult.RawResponse,\n        //            ButtonBundleJson = buttonBundleJson,\n        //            MessageContent = templateName,                      // NOT NULL\n        //            SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null\n        //        };\n\n        //        _dbContext.MessageLogs.Add(messageLog);\n\n        //        // 7) Flow execution audit row\n        //        _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = context.BusinessId,\n        //            FlowId = context.FlowId,\n        //            StepId = targetStep.Id,\n        //            StepName = templateName,\n        //            MessageLogId = messageLog.Id,\n        //            ButtonIndex = context.ButtonIndex,\n        //            ContactPhone = context.ContactPhone,\n        //            Success = sendResult.Success,\n        //            ErrorMessage = sendResult.ErrorMessage,\n        //            RawResponse = sendResult.RawResponse,\n        //            ExecutedAt = DateTime.UtcNow,\n        //            RequestId = context.RequestId\n        //        });\n\n        //        await _dbContext.SaveChangesAsync();\n\n        //        return new NextStepResult\n        //        {\n        //            Success = sendResult.Success,\n        //            Error = sendResult.ErrorMessage,\n        //            RedirectUrl = null\n        //        };\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        return new NextStepResult { Success = false, Error = ex.Message };\n        //    }\n        //}\n\n        public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)\n        {\n            try\n            {\n                // ‚îÄ‚îÄ local helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n                string ResolveGreeting(string? profileName, string? contactName)\n                {\n                    var s = (profileName ?? contactName)?.Trim();\n                    return string.IsNullOrEmpty(s) ? \"there\" : s;\n                }\n                void EnsureArgsLength(List<string> args, int slot1Based)\n                {\n                    while (args.Count < slot1Based) args.Add(string.Empty);\n                }\n                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n                // 1) URL-only buttons ‚Üí no WA send, just record and return redirect\n                if (context.ClickedButton != null &&\n                    context.ClickedButton.ButtonType?.Equals(\"URL\", StringComparison.OrdinalIgnoreCase) == true)\n                {\n                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = context.BusinessId,\n                        FlowId = context.FlowId,\n                        StepId = context.SourceStepId,\n                        StepName = \"URL_REDIRECT\",\n                        MessageLogId = context.MessageLogId,\n                        ButtonIndex = context.ButtonIndex,\n                        ContactPhone = context.ContactPhone,\n                        Success = true,\n                        ExecutedAt = DateTime.UtcNow,\n                        RequestId = context.RequestId\n                    });\n                    await _dbContext.SaveChangesAsync();\n\n                    return new NextStepResult { Success = true, RedirectUrl = context.ClickedButton.ButtonValue };\n\n\n\n                }\n\n                // 2) Load next step in the same flow (no dedupe/loop guard ‚Äî always proceed)\n                var targetStep = await _dbContext.CTAFlowSteps\n                    .Include(s => s.ButtonLinks)\n                    .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&\n                                              s.CTAFlowConfigId == context.FlowId);\n\n                if (targetStep == null)\n                    return new NextStepResult { Success = false, Error = \"Target step not found.\" };\n\n                if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))\n                    return new NextStepResult { Success = false, Error = \"Target step has no template assigned.\" };\n\n                var templateName = targetStep.TemplateToSend.Trim();\n\n                // 3) Preflight the template (resolve language and catch 132001 early)\n                var meta = await _templateFetcherService.GetTemplateByNameAsync(\n                    context.BusinessId, templateName, includeButtons: true);\n\n                if (meta == null)\n                {\n                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = context.BusinessId,\n                        FlowId = context.FlowId,\n                        StepId = targetStep.Id,\n                        StepName = templateName,\n                        MessageLogId = null,\n                        ButtonIndex = context.ButtonIndex,\n                        ContactPhone = context.ContactPhone,\n                        Success = false,\n                        ErrorMessage = $\"Template '{templateName}' not found for this WABA.\",\n                        RawResponse = null,\n                        ExecutedAt = DateTime.UtcNow,\n                        RequestId = context.RequestId\n                    });\n                    await _dbContext.SaveChangesAsync();\n\n                    return new NextStepResult { Success = false, Error = $\"Template '{templateName}' not found or not approved.\" };\n                }\n\n                var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? \"en_US\" : meta.Language;\n\n                // 3.1) üî• Determine sender with failsafes (NO early return for missing context)\n                var provider = (context.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                var phoneNumberId = context.PhoneNumberId;\n\n                // If provider missing/invalid ‚Üí try active WhatsAppSettings (fast path)\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    var w = await _dbContext.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(x => x.BusinessId == context.BusinessId && x.IsActive)\n                        .OrderByDescending(x => x.UpdatedAt ?? x.CreatedAt)\n                        .FirstOrDefaultAsync();\n\n                    if (w != null)\n                    {\n                        provider = (w.Provider ?? \"\").Trim().ToUpperInvariant();\n                        if (string.IsNullOrWhiteSpace(phoneNumberId))\n                            phoneNumberId = w.PhoneNumberId;\n                    }\n                }\n\n                // If still missing provider ‚Üí hard resolve via numbers table\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    var pn = await _dbContext.WhatsAppPhoneNumbers\n                        .AsNoTracking()\n                        .Where(n => n.BusinessId == context.BusinessId && n.IsActive)\n                        .OrderByDescending(n => n.IsDefault)\n                        .ThenBy(n => n.WhatsAppBusinessNumber)\n                        .Select(n => new { n.Provider, n.PhoneNumberId })\n                        .FirstOrDefaultAsync();\n\n                    if (pn != null)\n                    {\n                        provider = (pn.Provider ?? \"\").Trim().ToUpperInvariant();\n                        if (string.IsNullOrWhiteSpace(phoneNumberId))\n                            phoneNumberId = pn.PhoneNumberId;\n                    }\n                }\n\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    return new NextStepResult { Success = false, Error = \"No active WhatsApp sender configured (provider could not be resolved).\" };\n\n                // Ensure we have a sender id\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                {\n                    phoneNumberId = await _dbContext.WhatsAppPhoneNumbers\n                        .AsNoTracking()\n                        .Where(n => n.BusinessId == context.BusinessId\n                                    && n.IsActive\n                                    && n.Provider.ToUpper() == provider)\n                        .OrderByDescending(n => n.IsDefault)\n                        .ThenBy(n => n.WhatsAppBusinessNumber)\n                        .Select(n => n.PhoneNumberId)\n                        .FirstOrDefaultAsync();\n\n                    if (string.IsNullOrWhiteSpace(phoneNumberId))\n                        return new NextStepResult { Success = false, Error = \"Missing PhoneNumberId (no default sender configured for this provider).\" };\n                }\n\n                // ‚îÄ‚îÄ Profile-name injection into body params (optional) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n                var args = new List<string>();\n                if (targetStep.UseProfileName && targetStep.ProfileNameSlot is int slot && slot >= 1)\n                {\n                    var contact = await _dbContext.Contacts\n                        .AsNoTracking()\n                        .FirstOrDefaultAsync(c => c.BusinessId == context.BusinessId\n                                                  && c.PhoneNumber == context.ContactPhone);\n\n                    var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);\n                    EnsureArgsLength(args, slot);\n                    args[slot - 1] = greet;\n                }\n\n                var components = new List<object>();\n                if (args.Count > 0)\n                {\n                    components.Add(new\n                    {\n                        type = \"body\",\n                        parameters = args.Select(a => new { type = \"text\", text = a ?? string.Empty }).ToList()\n                    });\n                }\n                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = context.ContactPhone,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = templateName,\n                        language = new { code = languageCode },\n                        components\n                    }\n                };\n\n                // 4) SEND (explicit provider + sender) ‚Äî always attempt the POST\n                _logger.LogInformation(\"‚û°Ô∏è SEND-INTENT flow={Flow} step={Step} tmpl={T} to={To} provider={Prov}/{Pnid}\",\n                    context.FlowId, targetStep.Id, templateName, context.ContactPhone, provider, phoneNumberId);\n\n                var sendResult = await _messageEngineService.SendPayloadAsync(\n                    context.BusinessId,\n                    provider,               // explicit\n                    payload,\n                    phoneNumberId           // explicit\n                );\n\n                // 5) Snapshot buttons for robust click mapping later\n                string? buttonBundleJson = null;\n                if (targetStep.ButtonLinks?.Count > 0)\n                {\n                    var bundle = targetStep.ButtonLinks\n                        .OrderBy(b => b.ButtonIndex)\n                        .Select(b => new\n                        {\n                            i = b.ButtonIndex,\n                            t = b.ButtonText ?? \"\",\n                            ty = b.ButtonType ?? \"QUICK_REPLY\",\n                            v = b.ButtonValue ?? \"\",\n                            ns = b.NextStepId\n                        })\n                        .ToList();\n\n                    buttonBundleJson = JsonSerializer.Serialize(bundle);\n                }\n\n                // 6) Write MessageLog\n                var messageLog = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = context.BusinessId,\n                    RecipientNumber = context.ContactPhone,\n                    CTAFlowConfigId = context.FlowId,\n                    CTAFlowStepId = targetStep.Id,\n                    FlowVersion = context.Version,\n                    Source = \"flow\",\n                    RefMessageId = context.MessageLogId,\n                    CreatedAt = DateTime.UtcNow,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    MessageId = sendResult.MessageId,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ButtonBundleJson = buttonBundleJson,\n                    MessageContent = templateName,\n                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null\n                };\n\n                _dbContext.MessageLogs.Add(messageLog);\n\n                // 7) Flow execution audit row\n                _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = context.BusinessId,\n                    FlowId = context.FlowId,\n                    StepId = targetStep.Id,\n                    StepName = templateName,\n                    MessageLogId = messageLog.Id,\n                    ButtonIndex = context.ButtonIndex,\n                    ContactPhone = context.ContactPhone,\n                    Success = sendResult.Success,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ExecutedAt = DateTime.UtcNow,\n                    RequestId = context.RequestId\n                });\n\n                await _dbContext.SaveChangesAsync();\n\n                return new NextStepResult\n                {\n                    Success = sendResult.Success,\n                    Error = sendResult.ErrorMessage,\n                    RedirectUrl = null\n                };\n            }\n            catch (Exception ex)\n            {\n                return new NextStepResult { Success = false, Error = ex.Message };\n            }\n        }\n\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/ICTAFlowService.cs",
      "sha256": "5ea1243676c853781cb165c52e3474658a6153a617ed9b22eabf5f961d40affe",
      "language": "csharp",
      "size": 4950,
      "content": "using xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public interface ICTAFlowService\n    {\n        // Create-only (draft)\n        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);\n\n        // Load flows (lists)\n        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);\n        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);\n\n        // Load flow (detail)\n        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId);  // for editor/view\n        Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId);          // alt payload\n\n        // Runtime\n        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText, string buttonType, string currentTemplateName, Guid? campaignId = null);\n        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);\n        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);\n        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);\n        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);\n\n        // Delete (only if not attached)\n        Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy);\n\n        // Publish\n        Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user);\n\n        // Attached campaigns (for usage checks / modal)\n        Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId);\n\n        // (Optional utility)\n        Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId);\n    }\n}\n\n\n//using xbytechat.api.Features.CTAFlowBuilder.DTOs;\n//using xbytechat.api.Features.CTAFlowBuilder.Models;\n//using xbytechat.api.Helpers;\n\n//namespace xbytechat.api.Features.CTAFlowBuilder.Services\n//{\n//    public interface ICTAFlowService\n//    {\n//        // ‚úÖ Used for flow creation and saving\n//        Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy);\n//        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);\n\n//        // ‚úÖ Load flows\n//        Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId);\n//        Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId);\n//        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);\n//        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);\n\n//        // ‚úÖ Load and manage flow steps\n//        Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId);\n\n\n//        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText,string buttonType,string currentTemplateName,Guid? campaignId = null);\n\n\n//        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);\n//        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);\n//        // ‚úÖ Runtime logic\n//        Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber);\n\n//        // ‚úÖ Flow management\n//        Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy);\n\n//        Task<ResponseResult> DeleteFlowAsync(Guid flowId, Guid businessId, string deletedBy);\n\n//        // ‚úÖ Editor loading (visual builder)\n//       // Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid id, Guid businessId);\n//        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId, Guid businessId);\n//        Task<ResponseResult> GetVisualFlowAsync(Guid flowId, Guid businessId);\n//        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);\n//        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);\n\n//        public interface IFlowRuntimeService\n//        {\n//            Task<NextStepResult> ExecuteNextAsync(NextStepContext context);\n//        }\n//        Task<IReadOnlyList<AttachedCampaignDto>> GetAttachedCampaignsAsync(Guid flowId, Guid businessId);\n//        Task<bool> HardDeleteFlowIfUnusedAsync(Guid flowId, Guid businessId);\n//        //Task<FlowUpdateResult> UpdateVisualFlowAsync(Guid flowId, SaveVisualFlowDto dto, Guid businessId, string user);\n\n//        // Explicit publish after edits\n//        Task<bool> PublishFlowAsync(Guid flowId, Guid businessId, string user);\n\n//        // Create a new draft copy when live flow is attached\n//        Task<Guid> ForkFlowAsync(Guid flowId, Guid businessId, string user);\n//    }\n//}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/IFlowRuntimeService.cs",
      "sha256": "8d2c05306af47b21e2651c822e6c24d58c7a7d650b2450c09ca229416bbce7c4",
      "language": "csharp",
      "size": 1142,
      "content": "using xbytechat.api.Features.CTAFlowBuilder.Models;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public interface IFlowRuntimeService\n    {\n        Task<NextStepResult> ExecuteNextAsync(NextStepContext context);\n\n    }\n    public record NextStepContext\n    {\n        public Guid BusinessId { get; set; }\n        public Guid FlowId { get; set; }\n        public int Version { get; set; }\n        public Guid SourceStepId { get; set; }\n        public Guid? TargetStepId { get; set; }\n        public short ButtonIndex { get; set; }\n        public Guid MessageLogId { get; set; }\n        public string ContactPhone { get; set; } = string.Empty;\n        public Guid RequestId { get; set; }\n        public FlowButtonLink? ClickedButton { get; set; }\n        public string? Provider { get; set; }          // \"META_CLOUD\" | \"PINNACLE\"\n        public string? PhoneNumberId { get; set; }\n            public bool AlwaysSend { get; set; } = true;\n    }\n\n    public record NextStepResult\n    {\n        public bool Success { get; set; }\n        public string? Error { get; set; }\n        public string? RedirectUrl { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/StepMatchingHelper.cs",
      "sha256": "3353c5195c81af5b7a26a5a7f648e6dc4504f54633d408220670d2dba65a5888",
      "language": "csharp",
      "size": 1818,
      "content": "using Serilog;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Tracking.Models;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public static class StepMatchingHelper\n    {\n        public static bool IsStepMatched(CTAFlowStep step, TrackingLog log, Contact? contact)\n        {\n            if (!string.IsNullOrWhiteSpace(step.RequiredSource) &&\n                !string.Equals(step.RequiredSource, log.SourceType, StringComparison.OrdinalIgnoreCase))\n            {\n                Log.Information(\"üö´ Step [{StepId}] skipped: RequiredSource '{Required}' ‚â† ClickedSource '{Actual}'\",\n                    step.Id, step.RequiredSource, log.SourceType);\n                return false;\n            }\n\n            if (!string.IsNullOrWhiteSpace(step.RequiredTag))\n            {\n                if (contact == null || contact.ContactTags == null || !contact.ContactTags.Any())\n                {\n                    Log.Information(\"üö´ Step [{StepId}] skipped: Contact or Tags missing (RequiredTag: {RequiredTag})\",\n                        step.Id, step.RequiredTag);\n                    return false;\n                }\n\n                var hasTag = contact.ContactTags.Any(ct =>\n                    string.Equals(ct.Tag.Name, step.RequiredTag, StringComparison.OrdinalIgnoreCase));\n\n                if (!hasTag)\n                {\n                    var contactTags = string.Join(\", \", contact.ContactTags.Select(ct => ct.Tag.Name));\n                    Log.Information(\"üö´ Step [{StepId}] skipped: Contact tags [{Tags}] do not include RequiredTag '{Required}'\",\n                        step.Id, contactTags, step.RequiredTag);\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Controllers/CTAManagementController.cs",
      "sha256": "3d06022ca06d6b4e214bf6e571b79d311da0902eeadebddc1f7d48c18a1ecb99",
      "language": "csharp",
      "size": 2535,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.CTAManagement.Services;\n\nnamespace xbytechat.api.Features.CTAManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/ctamanagement\")]\n    [Authorize] // ‚úÖ Ensures only authenticated users can access\n    public class CTAManagementController : ControllerBase\n    {\n        private readonly ICTAManagementService _ctaService;\n\n        public CTAManagementController(ICTAManagementService ctaService)\n        {\n            _ctaService = ctaService;\n        }\n\n        // ‚úÖ GET: api/ctamanagement/get-all\n        [HttpGet(\"get-all\")]\n        public async Task<IActionResult> GetAll()\n        {\n            var data = await _ctaService.GetAllAsync();\n            return Ok(data);\n        }\n\n        // üìå GET: api/ctamanagement/get/{id}\n        [HttpGet(\"get/{id}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var result = await _ctaService.GetByIdAsync(id);\n            return result == null ? NotFound(\"CTA not found\") : Ok(result);\n        }\n\n        // ‚úÖ POST: api/ctamanagement/create\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> Create([FromBody] CTADefinitionDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(\"‚ùå Invalid CTA payload.\");\n\n            var success = await _ctaService.AddAsync(dto);\n            return success\n                ? Ok(new { message = \"‚úÖ CTA created.\" })\n                : StatusCode(500, \"‚ùå Failed to create CTA.\");\n        }\n\n        // ‚úèÔ∏è PUT: api/ctamanagement/update/{id}\n        [HttpPut(\"update/{id}\")]\n        public async Task<IActionResult> Update(Guid id, [FromBody] CTADefinitionDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(\"‚ùå Invalid CTA payload.\");\n\n            var success = await _ctaService.UpdateAsync(id, dto);\n            return success\n                ? Ok(new { message = \"‚úÖ CTA updated.\" })\n                : NotFound(\"CTA not found or update failed.\");\n        }\n\n        // üóëÔ∏è DELETE: api/ctamanagement/delete/{id}\n        [HttpDelete(\"delete/{id}\")]\n        public async Task<IActionResult> Delete(Guid id)\n        {\n            var success = await _ctaService.DeleteAsync(id);\n            return success\n                ? Ok(new { message = \"‚úÖ CTA deleted (soft).\" })\n                : NotFound(\"CTA not found or delete failed.\");\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/DTOs/CTADefinitionDto.cs",
      "sha256": "1472d3694a4cebf363c3a632675fe61b8646f610f7a96a2687286bfb47d8eacf",
      "language": "csharp",
      "size": 707,
      "content": "namespace xbytechat.api.Features.CTAManagement.DTOs\n{\n    public class CTADefinitionDto\n    {\n        public Guid Id { get; set; }\n\n        public string Title { get; set; } = string.Empty; // üè∑Ô∏è CTA label (e.g., \"Buy Now\")\n\n        public string ButtonText { get; set; } = string.Empty; // üí¨ Visible button label (e.g., \"Buy Now\")\n\n        public string ButtonType { get; set; } = \"url\"; // üîò Expected values: \"url\", \"quick_reply\", etc.\n\n        public string TargetUrl { get; set; } = string.Empty; // üåê Redirect or action target\n\n        public string? Description { get; set; } // üìù Optional description (for context/tooltip)\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Models/CTADefinition.cs",
      "sha256": "96216798bd31e2098b9a2ba43dac62e067f7062f5e5c36bb318a8dab2f74da38",
      "language": "csharp",
      "size": 913,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CTAManagement.Models\n{\n    public class CTADefinition\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; } // üîó Business that owns this CTA\n\n        public string Title { get; set; } = string.Empty; // üè∑Ô∏è CTA label/title, e.g., \"Buy Now\"\n\n        public string ButtonText { get; set; } = string.Empty; // üí¨ Visible button label\n\n        public string ButtonType { get; set; } = \"url\"; // üîò Options: \"url\", \"quick_reply\", etc.\n\n        public string TargetUrl { get; set; } = string.Empty; // üåê Action URL or value (depending on type)\n\n        public string Description { get; set; } = string.Empty; // üìù Optional additional context\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Services/CTAManagementService.cs",
      "sha256": "a9388986726208c45f05afa2bd4ed3c74b33d7d79eb0e5863b7256e061ba4081",
      "language": "csharp",
      "size": 4621,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.CTAManagement.Models;\n\nnamespace xbytechat.api.Features.CTAManagement.Services\n{\n    public class CTAManagementService : ICTAManagementService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public CTAManagementService(AppDbContext dbContext, IHttpContextAccessor httpContextAccessor)\n        {\n            _dbContext = dbContext;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        // üîÑ Get all active CTAs for the current business\n        public async Task<List<CTADefinitionDto>> GetAllAsync()\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            return await _dbContext.CTADefinitions\n                .Where(c => c.IsActive && c.BusinessId == businessId)\n                .Select(c => new CTADefinitionDto\n                {\n                    Id = c.Id,\n                    Title = c.Title,\n                    ButtonText = c.ButtonText,\n                    ButtonType = c.ButtonType,\n                    TargetUrl = c.TargetUrl,\n                    Description = c.Description,\n                    IsActive = c.IsActive\n                }).ToListAsync();\n        }\n\n        // ‚úÖ Add new CTA\n        public async Task<bool> AddAsync(CTADefinitionDto dto)\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            var cta = new CTADefinition\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Title = dto.Title,\n                ButtonText = dto.ButtonText,\n                ButtonType = dto.ButtonType,\n                TargetUrl = dto.TargetUrl,\n                Description = dto.Description ?? \"\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            await _dbContext.CTADefinitions.AddAsync(cta);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // üìå Get CTA by ID\n        public async Task<CTADefinitionDto?> GetByIdAsync(Guid id)\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            var cta = await _dbContext.CTADefinitions\n                .FirstOrDefaultAsync(c => c.Id == id && c.IsActive && c.BusinessId == businessId);\n\n            if (cta == null) return null;\n\n            return new CTADefinitionDto\n            {\n                Id = cta.Id,\n                Title = cta.Title,\n                ButtonText = cta.ButtonText,\n                ButtonType = cta.ButtonType,\n                TargetUrl = cta.TargetUrl,\n                Description = cta.Description,\n                IsActive = cta.IsActive\n            };\n        }\n\n\n        // ‚úèÔ∏è Update CTA\n        public async Task<bool> UpdateAsync(Guid id, CTADefinitionDto dto)\n        {\n            var cta = await _dbContext.CTADefinitions.FindAsync(id);\n            if (cta == null) return false;\n\n            var businessId = GetBusinessIdFromClaims();\n            if (cta.BusinessId != businessId) throw new UnauthorizedAccessException(\"Unauthorized to modify this CTA.\");\n\n            cta.Title = dto.Title;\n            cta.ButtonText = dto.ButtonText;\n            cta.ButtonType = dto.ButtonType;\n            cta.TargetUrl = dto.TargetUrl;\n            cta.Description = dto.Description ?? \"\";\n            cta.IsActive = dto.IsActive;\n            cta.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // üóëÔ∏è Soft Delete CTA\n        public async Task<bool> DeleteAsync(Guid id)\n        {\n            var cta = await _dbContext.CTADefinitions.FindAsync(id);\n            if (cta == null) return false;\n\n            var businessId = GetBusinessIdFromClaims();\n            if (cta.BusinessId != businessId) throw new UnauthorizedAccessException(\"Unauthorized to delete this CTA.\");\n\n            cta.IsActive = false;\n            cta.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // üîê Reusable method to extract BusinessId\n        private Guid GetBusinessIdFromClaims()\n        {\n            var claim = _httpContextAccessor.HttpContext?.User?.FindFirst(\"businessId\");\n            if (claim == null || string.IsNullOrWhiteSpace(claim.Value) || !Guid.TryParse(claim.Value, out var businessId))\n                throw new UnauthorizedAccessException(\"‚ùå Invalid or missing BusinessId claim.\");\n\n            return businessId;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Services/ICTAManagementService.cs",
      "sha256": "f05abf40bdd4a593e8c8f8980c288884dc5701a5c9ba29261588816002758bcd",
      "language": "csharp",
      "size": 814,
      "content": "using xbytechat.api.Features.CTAManagement.DTOs;\n\nnamespace xbytechat.api.Features.CTAManagement.Services\n{\n    public interface ICTAManagementService\n    {\n        /// <summary>Returns all active CTAs for the current business.</summary>\n        Task<List<CTADefinitionDto>> GetAllAsync();\n\n        /// <summary>Returns a single CTA by ID (if exists).</summary>\n        Task<CTADefinitionDto?> GetByIdAsync(Guid id);\n\n        /// <summary>Adds a new CTA for the logged-in business.</summary>\n        Task<bool> AddAsync(CTADefinitionDto dto);\n\n        /// <summary>Updates an existing CTA if it belongs to the business.</summary>\n        Task<bool> UpdateAsync(Guid id, CTADefinitionDto dto);\n\n        /// <summary>Soft deletes (deactivates) a CTA entry.</summary>\n        Task<bool> DeleteAsync(Guid id);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Auth/StaticApiKeyOptions.cs",
      "sha256": "ecf8c607a6022271bcd7228448d61a6fc16c9422cd51362b665a875413409fb9",
      "language": "csharp",
      "size": 196,
      "content": "namespace xbytechat.api.Features.CustomeApi.Auth\n{\n    public sealed class StaticApiKeyOptions\n    {\n        public string? Key { get; set; }\n        public Guid? BusinessId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Controllers/CustomApiController.cs",
      "sha256": "bfd039e2c624dbefbd14dbaef2d68318799fee81a833094d7bd401b6b1c8a995",
      "language": "csharp",
      "size": 2694,
      "content": "using System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\nusing xbytechat.api.Features.CustomeApi.Auth;\nusing xbytechat.api.Features.CustomeApi.DTOs;\nusing xbytechat.api.Features.CustomeApi.Services;\n\nnamespace xbytechat.api.Features.CustomeApi.Controllers\n{\n    [ApiController]\n    [Route(\"api/custom\")]\n    public sealed class CustomApiController : ControllerBase\n    {\n        private readonly ICustomApiService _service;\n        private readonly StaticApiKeyOptions _api;\n        private readonly CtaJourneyPublisher _journeyPublisher;\n        public CustomApiController(ICustomApiService service, IOptions<StaticApiKeyOptions> api, CtaJourneyPublisher journeyPublisher)\n        {\n            _service = service;\n            _api = api.Value;\n            _journeyPublisher = journeyPublisher;\n        }\n\n        /// <summary>\n        /// Sends a WhatsApp template (optionally with VIDEO header) by phoneNumberId.\n        /// Body: { phoneNumberId, to, templateId, variables:{ \"1\":\"...\" }, videoUrl, flowConfigId }\n        /// </summary>\n        [HttpPost(\"sendflow\")]\n        [Consumes(\"application/json\")]\n        [Produces(\"application/json\")]\n        [ProducesResponseType(typeof(object), 200)]\n        [ProducesResponseType(typeof(object), 400)]\n        [ProducesResponseType(401)]\n        public async Task<IActionResult> SendTemplate([FromBody] DirectTemplateSendRequest req, CancellationToken ct = default)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(new { success = false, message = \"‚ùå Invalid request body.\", errors = ModelState });\n\n            // Minimal shared-secret auth\n            var provided = Request.Headers[\"X-Auth-Key\"].FirstOrDefault()\n                           ?? Request.Headers[\"Authorization\"].FirstOrDefault();\n\n            if (string.IsNullOrWhiteSpace(_api.Key) ||\n                string.IsNullOrWhiteSpace(provided) ||\n                !string.Equals(provided, _api.Key, System.StringComparison.Ordinal))\n            {\n                return Unauthorized(new { success = false, message = \"üîí Invalid or missing key.\" });\n            }\n\n            var result = await _service.SendTemplateAsync(req, ct);\n            return result.Success ? Ok(result) : BadRequest(result);\n        }\n        [HttpPost(\"test-webhook\")]\n        public async Task<IActionResult> TestWebhook([FromQuery] Guid businessId, CancellationToken ct)\n        {\n            var (ok, msg) = await _journeyPublisher.ValidateAndPingAsync(businessId, ct);\n            return ok ? Ok(new { ok, message = msg }) : BadRequest(new { ok, message = msg });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Controllers/DevCustomerWebhookConfigController.cs",
      "sha256": "91f4787045211df3c7a8dea1c7dce85901295b74050cad5ddf9c55c6b72f100e",
      "language": "csharp",
      "size": 674,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\n\n[ApiController]\n[Route(\"api/getflow\")]\npublic class DevCustomerWebhookConfigController : ControllerBase\n{\n    private readonly AppDbContext _db;\n    public DevCustomerWebhookConfigController(AppDbContext db) => _db = db;\n\n    [HttpGet(\"{businessId:guid}\")]\n    public async Task<IActionResult> Get(Guid businessId)\n    {\n        var cfg = await _db.CustomerWebhookConfigs\n            .AsNoTracking()\n            .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n        return Ok(cfg is null ? new { found = false } : new { found = true, url = cfg.Url });\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/DTOs/CtaJourneyEventDto.cs",
      "sha256": "460d6c60802762d203fe59b21a58b49a9cdc29cb9758edb878da461b5bf22f4c",
      "language": "csharp",
      "size": 964,
      "content": "using System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.CustomeApi.Models\n{\n    public sealed class CtaJourneyEventDto\n    {\n        // User‚Äôs expected fields (nulls allowed when we don‚Äôt have them)\n        public string? userId { get; set; }            // we don‚Äôt have this ‚Üí null\n        public string? userName { get; set; }          // our Contact.ProfileName or Contact.Name\n        public string? userPhone { get; set; }         // digits only\n        public string? botId { get; set; }             // your WA PhoneNumberId or BusinessNumber (see 2.4)\n        public string? categoryBrowsed { get; set; }   // optional, keep null\n        public string? productBrowsed { get; set; }    // optional, keep null\n\n        // REQUIRED by partner: this is the key we must match\n        //public string CTAJourney { get; set; } = string.Empty;\n        [JsonPropertyName(\"CTAJourney\")]\n        public string? CTAJourney { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/DTOs/DirectTemplateSendRequest.cs",
      "sha256": "d6d17b04a27f1798034ac60813911ab6b34f19e39a5ee69b272d8c88da4f85f1",
      "language": "csharp",
      "size": 2015,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CustomeApi.DTOs\n{\n    public sealed class DirectTemplateSendRequest\n    {\n        [Required] public string PhoneNumberId { get; set; } = string.Empty;\n        [Required] public string To { get; set; } = string.Empty;\n        [Required] public string TemplateId { get; set; } = string.Empty;\n\n        /// <summary>Body variable map for {{1}}, {{2}}, ...</summary>\n        public Dictionary<string, string>? Variables { get; set; }\n\n        /// <summary>Optional: provide a https .mp4 to attach a VIDEO header.</summary>\n        public string? VideoUrl { get; set; }\n\n        /// <summary>Optional CTA flow to link with this send (for click‚Üínext-step mapping and analytics).</summary>\n        public Guid? FlowConfigId { get; set; }\n    }\n}\n\n\n//using System; // <-- needed for Guid\n//using System.Collections.Generic;\n//using System.ComponentModel.DataAnnotations;\n\n//namespace xbytechat.api.Features.CustomeApi.DTOs\n//{\n//    public sealed class DirectTemplateSendRequest\n//    {\n//        [Required] public string PhoneNumberId { get; set; } = string.Empty;\n//        [Required] public string To { get; set; } = string.Empty;\n//        [Required] public string TemplateId { get; set; } = string.Empty;\n\n//        // Optional: start (link) a CTA flow on this send (we'll stamp CTAFlowConfigId/StepId on MessageLog)\n//        public Guid? FlowConfigId { get; set; }   // <---- add this\n\n//        // Body variables as WhatsApp {{1}}, {{2}}, ...\n//        public Dictionary<string, string>? Variables { get; set; }\n\n//        // Optional header media, validated based on template header type:\n//        public string? ImageUrl { get; set; } // IMAGE header\n//        public string? VideoUrl { get; set; } // VIDEO header\n//        public string? DocumentUrl { get; set; } // DOCUMENT/PDF header\n//        public string? DocumentFilename { get; set; } // optional nice filename\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/DTOs/DirectTemplateSendRequestValidator.cs",
      "sha256": "613a944117e95f84b8286c1d19d3945f5d54eb046324aba873d203a3893ec584",
      "language": "csharp",
      "size": 629,
      "content": "using FluentValidation;\n\nnamespace xbytechat.api.Features.CustomeApi.DTOs\n{\n    public sealed class DirectTemplateSendRequestValidator : AbstractValidator<DirectTemplateSendRequest>\n    {\n        public DirectTemplateSendRequestValidator()\n        {\n            RuleFor(x => x.PhoneNumberId).NotEmpty().WithMessage(\"phoneNumberId is required.\");\n            RuleFor(x => x.To).NotEmpty().WithMessage(\"'to' (recipient) is required.\");\n            RuleFor(x => x.TemplateId).NotEmpty().WithMessage(\"templateId is required.\");\n            // videoUrl required only if template header == VIDEO (checked in service)\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Models/ContactJourneyState.cs",
      "sha256": "133720f1453770ad09bd2c9bd2551f343f20df6ce27a0b88a2a7234a20e3157c",
      "language": "csharp",
      "size": 1101,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace xbytechat.api.Features.CustomeApi.Models\n{\n    // One row per (business, flow, contact). Enforce single row via unique index.\n    [Index(nameof(BusinessId), nameof(FlowId), nameof(ContactPhone), IsUnique = true)]\n    public class ContactJourneyState\n    {\n        [Key] public Guid Id { get; set; }\n\n        [Required] public Guid BusinessId { get; set; }\n\n        [Required] public Guid FlowId { get; set; }\n\n        // Store digits-only (same as your click processor does).\n        [Required, MaxLength(32)]\n        public string ContactPhone { get; set; } = default!;\n\n        // Running journey like: \"Yes/No/Bahut Achha\"\n        [Required] public string JourneyText { get; set; } = string.Empty;\n\n        public int ClickCount { get; set; } = 0;\n\n        [MaxLength(256)]\n        public string? LastButtonText { get; set; }\n\n        [Required] public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        [Required] public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Models/CustomerWebhookConfig.cs",
      "sha256": "c08fa705d23cd231999b48da0668ec8e9aef6db72aec24a10a7c583ee7db94e4",
      "language": "csharp",
      "size": 693,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CustomeApi.Models\n{\n    public class CustomerWebhookConfig\n    {\n        [Key] public Guid Id { get; set; }\n\n        [Required] public Guid BusinessId { get; set; }\n\n        [Required, MaxLength(1024)]\n        public string Url { get; set; } = default!;  // customer API endpoint to receive CTAJourney\n\n        [MaxLength(2048)]\n        public string? BearerToken { get; set; }     // optional \"Authorization: Bearer <token>\"\n\n        public bool IsActive { get; set; } = true;\n\n        [Required] public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Services/CtaJourneyMapper.cs",
      "sha256": "a81a252168491114749f202c01b5b72c31882906808ad46e93e346677cbbb7ad",
      "language": "csharp",
      "size": 1710,
      "content": "using System.Text.RegularExpressions;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.Features.CustomeApi.Services\n{\n    public static class CtaJourneyMapper\n    {\n        private static string Digits(string? s) =>\n            string.IsNullOrWhiteSpace(s) ? \"\" : Regex.Replace(s, \"[^0-9]\", \"\");\n\n    \n        public static Models.CtaJourneyEventDto Build(\n            string journeyKey,          // REQUIRED -> \"product_view_to_interest\" (your must-match)\n            Contact? contact = null,\n            string? profileName = null,\n            string? userId = null,      // we don‚Äôt have: pass null\n            string? phoneNumberId = null,   // Meta phone_number_id\n            string? businessDisplayPhone = null, // WhatsAppBusinessNumber\n            string? categoryBrowsed = null,\n            string? productBrowsed = null\n        )\n        {\n            // Choose botId priority: phoneNumberId (Meta) -> business WA number -> null\n            var botId = !string.IsNullOrWhiteSpace(phoneNumberId)\n                ? phoneNumberId!.Trim()\n                : (!string.IsNullOrWhiteSpace(businessDisplayPhone) ? Digits(businessDisplayPhone) : null);\n\n            return new Models.CtaJourneyEventDto\n            {\n                userId = userId, // normally null (we don‚Äôt store)\n                userName = profileName ?? contact?.ProfileName ?? contact?.Name,\n                userPhone = Digits(contact?.PhoneNumber),\n                botId = botId,\n                categoryBrowsed = categoryBrowsed,   // keep null \n                productBrowsed = productBrowsed,     // keep null \n                CTAJourney = journeyKey               // e.g. \"Button Name\"\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Services/CtaJourneyPublisher.cs",
      "sha256": "d6cc88d790dc147459324a25a78082d154f457abec1fd7011683edc9e77994b9",
      "language": "csharp",
      "size": 13867,
      "content": "using System;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.CustomeApi.Services\n{\n    public class CtaJourneyPublisher : ICtaJourneyPublisher\n    {\n        private readonly AppDbContext _db;\n        private readonly IHttpClientFactory _httpFactory;\n        private readonly ILogger<CtaJourneyPublisher> _log;\n\n        private static readonly JsonSerializerOptions _json = new(JsonSerializerDefaults.Web);\n\n        public CtaJourneyPublisher(\n            AppDbContext db,\n            IHttpClientFactory httpFactory,\n            ILogger<CtaJourneyPublisher> log)\n        {\n            _db = db;\n            _httpFactory = httpFactory;\n            _log = log;\n        }\n\n        public async Task PublishAsync(Guid businessId, Models.CtaJourneyEventDto dto, CancellationToken ct = default)\n        {\n            // Load all active endpoints (only for this one customer right now)\n            var endpoints = await _db.CustomerWebhookConfigs\n                .AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.IsActive)\n                .ToListAsync(ct);\n\n            if (endpoints.Count == 0)\n            {\n                _log.LogInformation(\"CTA Journey: no active endpoints for business {Biz}\", businessId);\n                return;\n            }\n\n            var client = _httpFactory.CreateClient(\"customapi-webhooks\"); // registered in DI\n\n            foreach (var ep in endpoints)\n            {\n                // Serialize once per endpoint\n                var body = JsonSerializer.Serialize(dto, _json);\n\n                const int maxAttempts = 3;\n                for (int attempt = 1; attempt <= maxAttempts; attempt++)\n                {\n                    try\n                    {\n                        using var req = new HttpRequestMessage(HttpMethod.Post, ep.Url)\n                        {\n                            Content = new StringContent(body, Encoding.UTF8, \"application/json\")\n                        };\n\n                        if (!string.IsNullOrWhiteSpace(ep.BearerToken))\n                            req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", ep.BearerToken);\n\n                        var resp = await client.SendAsync(req, ct);\n                        var code = (int)resp.StatusCode;\n\n                        if (code >= 200 && code < 300)\n                        {\n                            _log.LogInformation(\"CTA Journey posted to {Url} | {Status}\", ep.Url, code);\n                            break; // success; stop retrying this endpoint\n                        }\n\n                        var errText = await resp.Content.ReadAsStringAsync(ct);\n                        _log.LogWarning(\"CTA Journey post failed ({Code}) to {Url}: {Body}\", code, ep.Url, errText);\n\n                        if (attempt == maxAttempts) break;\n                        await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct); // 2s, 4s backoff\n                    }\n                    catch (Exception ex)\n                    {\n                        _log.LogWarning(ex, \"CTA Journey post exception to {Url} (attempt {Attempt})\", ep.Url, attempt);\n                        if (attempt == maxAttempts) break;\n                        await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct);\n                    }\n                }\n            }\n        }\n\n        public async Task<(bool ok, string message)> ValidateAndPingAsync(Guid businessId, CancellationToken ct = default)\n        {\n            var ep = await _db.CustomerWebhookConfigs\n                .AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.IsActive)\n                .OrderByDescending(x => x.UpdatedAt ?? x.CreatedAt)\n                .FirstOrDefaultAsync(ct);\n\n            if (ep == null) return (false, \"No active CustomerWebhookConfig found for this business.\");\n            if (string.IsNullOrWhiteSpace(ep.Url)) return (false, \"Endpoint URL is empty.\");\n            if (!Uri.TryCreate(ep.Url, UriKind.Absolute, out var uri) || uri.Scheme != Uri.UriSchemeHttps)\n                return (false, \"Endpoint URL must be an absolute https URL.\");\n\n            var probe = new Models.CtaJourneyEventDto\n            {\n                userId = null,\n                userName = \"probe\",\n                userPhone = \"0000000000\",\n                botId = \"0000000000\",\n                categoryBrowsed = null,\n                productBrowsed = null,\n                CTAJourney = \"probe_to_probe\"\n            };\n\n            var client = _httpFactory.CreateClient(\"customapi-webhooks\");\n            var body = JsonSerializer.Serialize(probe, _json);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, ep.Url)\n            {\n                Content = new StringContent(body, Encoding.UTF8, \"application/json\")\n            };\n\n            req.Headers.TryAddWithoutValidation(\"X-XBS-Test\", \"1\");\n\n            if (!string.IsNullOrWhiteSpace(ep.BearerToken))\n                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", ep.BearerToken);\n\n            try\n            {\n                var resp = await client.SendAsync(req, ct);\n                var code = (int)resp.StatusCode;\n\n                if (code >= 200 && code < 300) return (true, $\"OK ({code})\");\n\n                var text = await resp.Content.ReadAsStringAsync(ct);\n                return (false, $\"HTTP {code}: {text}\");\n            }\n            catch (Exception ex)\n            {\n                return (false, $\"Exception: {ex.Message}\");\n            }\n        }\n    }\n}\n\n\n//using System;\n//using System.Linq;\n//using System.Net.Http;\n//using System.Net.Http.Headers;\n//using System.Text;\n//using System.Text.Json;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.Logging;\n\n//namespace xbytechat.api.Features.CustomeApi.Services\n//{\n//    public class CtaJourneyPublisher : ICtaJourneyPublisher\n//    {\n//        private readonly AppDbContext _db;\n//        private readonly IHttpClientFactory _httpFactory;\n//        private readonly ILogger<CtaJourneyPublisher> _log;\n\n//        private static readonly JsonSerializerOptions _json =\n//            new(JsonSerializerDefaults.Web);\n\n//        public CtaJourneyPublisher(AppDbContext db, IHttpClientFactory httpFactory, ILogger<CtaJourneyPublisher> log)\n//        {\n//            _db = db;\n//            _httpFactory = httpFactory;\n//            _log = log;\n//        }\n\n\n//        public async Task PublishAsync(Guid businessId, Models.CtaJourneyEventDto dto, CancellationToken ct = default)\n//        {\n//            // load all active endpoints (only for this one customer right now)\n//            var endpoints = await _db.CustomerWebhookConfigs\n//                .AsNoTracking()\n//                .Where(x => x.BusinessId == businessId && x.IsActive)\n//                .ToListAsync(ct);\n\n//            if (endpoints.Count == 0)\n//            {\n//                _log.LogInformation(\"CTA Journey: no active endpoints for business {Biz}\", businessId);\n//                return;\n//            }\n\n//            var client = _httpFactory.CreateClient(\"customapi-webhooks\"); // registered in DI\n//            var body = JsonSerializer.Serialize(dto, _json);\n//            using var content = new StringContent(body, Encoding.UTF8, \"application/json\");\n//            foreach (var ep in endpoints)\n//            {\n//                // simple retry (3 attempts, 2s/4s backoff)\n//                const int maxAttempts = 3;\n//                for (int attempt = 1; attempt <= maxAttempts; attempt++)\n//                {\n//                    try\n//                    {\n//                        using var req = new HttpRequestMessage(HttpMethod.Post, ep.Url)\n//                        {\n//                            Content = new StringContent(\n//                                JsonSerializer.Serialize(dto, _json),   // fresh content every send\n//                                Encoding.UTF8,\n//                                \"application/json\")\n//                        };\n\n//                        if (!string.IsNullOrWhiteSpace(ep.BearerToken))\n//                            req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", ep.BearerToken);\n\n//                        var resp = await client.SendAsync(req, ct);\n//                        if ((int)resp.StatusCode >= 200 && (int)resp.StatusCode < 300)\n//                        {\n//                            _log.LogInformation(\"CTA Journey posted to {Url} | {Status}\", ep.Url, (int)resp.StatusCode);\n//                            break;\n//                        }\n\n//                        var bodyText = await resp.Content.ReadAsStringAsync(ct);\n//                        _log.LogWarning(\"CTA Journey post failed ({Code}) to {Url}: {Body}\",\n//                            (int)resp.StatusCode, ep.Url, bodyText);\n\n//                        if (attempt == maxAttempts) break;\n//                        await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct);\n//                    }\n//                    catch (Exception ex)\n//                    {\n//                        _log.LogWarning(ex, \"CTA Journey post exception to {Url} (attempt {Attempt})\", ep.Url, attempt);\n//                        if (attempt == maxAttempts) break;\n//                        await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct);\n//                    }\n//                }\n//            }\n\n//            //foreach (var ep in endpoints)\n//            //{\n//            //    using var req = new HttpRequestMessage(HttpMethod.Post, ep.Url) { Content = content };\n\n//            //    // optional Bearer only (we're keeping it simple)\n//            //    if (!string.IsNullOrWhiteSpace(ep.BearerToken))\n//            //        req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", ep.BearerToken);\n\n//            //    // simple retry (3 attempts, 2s/4s backoff)\n//            //    const int maxAttempts = 3;\n//            //    for (int attempt = 1; attempt <= maxAttempts; attempt++)\n//            //    {\n//            //        try\n//            //        {\n//            //            var resp = await client.SendAsync(req, ct);\n//            //            if ((int)resp.StatusCode >= 200 && (int)resp.StatusCode < 300)\n//            //            {\n//            //                _log.LogInformation(\"CTA Journey posted to {Url} | {Status}\", ep.Url, (int)resp.StatusCode);\n//            //                break;\n//            //            }\n\n//            //            var bodyText = await resp.Content.ReadAsStringAsync(ct);\n//            //            _log.LogWarning(\"CTA Journey post failed ({Code}) to {Url}: {Body}\",\n//            //                (int)resp.StatusCode, ep.Url, bodyText);\n\n//            //            if (attempt == maxAttempts) break;\n//            //            await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct);\n//            //        }\n//            //        catch (Exception ex)\n//            //        {\n//            //            _log.LogWarning(ex, \"CTA Journey post exception to {Url} (attempt {Attempt})\", ep.Url, attempt);\n//            //            if (attempt == maxAttempts) break;\n//            //            await Task.Delay(TimeSpan.FromSeconds(2 * attempt), ct);\n//            //        }\n//            //    }\n//            //}\n//        }\n//        public async Task<(bool ok, string message)> ValidateAndPingAsync(Guid businessId, CancellationToken ct = default)\n//        {\n//            var ep = await _db.CustomerWebhookConfigs\n//                .AsNoTracking()\n//                .Where(x => x.BusinessId == businessId && x.IsActive)\n//                .OrderByDescending(x => x.UpdatedAt ?? x.CreatedAt)\n//                .FirstOrDefaultAsync(ct);\n\n//            if (ep == null) return (false, \"No active CustomerWebhookConfig found for this business.\");\n//            if (string.IsNullOrWhiteSpace(ep.Url)) return (false, \"Endpoint URL is empty.\");\n//            if (!Uri.TryCreate(ep.Url, UriKind.Absolute, out var uri) || uri.Scheme != Uri.UriSchemeHttps)\n//                return (false, \"Endpoint URL must be an absolute https URL.\");\n\n//            var probe = new Models.CtaJourneyEventDto\n//            {\n//                userId = null,\n//                userName = \"probe\",\n//                userPhone = \"0000000000\",\n//                botId = \"0000000000\",\n//                categoryBrowsed = null,\n//                productBrowsed = null,\n//                CTAJourney = \"probe_to_probe\"\n//            };\n\n//            var client = _httpFactory.CreateClient(\"customapi-webhooks\");\n//            var body = JsonSerializer.Serialize(probe, _json);\n\n//            using var req = new HttpRequestMessage(HttpMethod.Post, ep.Url)\n//            {\n//                Content = new StringContent(body, Encoding.UTF8, \"application/json\")\n//            };\n//            req.Headers.TryAddWithoutValidation(\"X-XBS-Test\", \"1\");\n\n//            if (!string.IsNullOrWhiteSpace(ep.BearerToken))\n//                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", ep.BearerToken);\n\n//            try\n//            {\n//                var resp = await client.SendAsync(req, ct);\n//                var code = (int)resp.StatusCode;\n//                if (code >= 200 && code < 300) return (true, $\"OK ({code})\");\n//                var text = await resp.Content.ReadAsStringAsync(ct);\n//                return (false, $\"HTTP {code}: {text}\");\n//            }\n//            catch (Exception ex)\n//            {\n//                return (false, $\"Exception: {ex.Message}\");\n//            }\n//        }\n\n//    }\n//}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Services/CustomApiService.cs",
      "sha256": "78a7353f5a8e6c720e2640c507df52730cd9b75e8803abe3590bf51c67a63259",
      "language": "csharp",
      "size": 27860,
      "content": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json; \nusing xbytechat.api.Features.CustomeApi.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;                       \nusing xbytechat_api.Features.Billing.Services;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Helpers;\nusing System.Text.RegularExpressions;      \n\nnamespace xbytechat.api.Features.CustomeApi.Services\n{\n    public sealed class CustomApiService : ICustomApiService\n    {\n        private readonly AppDbContext _context;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcher;\n        private readonly IMessageEngineService _messageEngine;\n        private readonly IBillingIngestService _billingIngest;\n        private readonly ILogger<CustomApiService> _logger;\n\n        public CustomApiService(\n            AppDbContext context,\n            IWhatsAppTemplateFetcherService templateFetcher,\n            IMessageEngineService messageEngine,\n            IBillingIngestService billingIngest,\n            ILogger<CustomApiService> logger)\n        {\n            _context = context;\n            _templateFetcher = templateFetcher;\n            _messageEngine = messageEngine;\n            _billingIngest = billingIngest;\n            _logger = logger;\n        }\n\n        public async Task<ResponseResult> SendTemplateAsync(DirectTemplateSendRequest req, CancellationToken ct = default)\n        {\n            try\n            {\n                var toNormalized = NormalizePhone(req.To);\n                var reqId = Guid.NewGuid();\n\n                // 1) Resolve WhatsApp sender by phoneNumberId (across all businesses)\n                //var ws = await _context.WhatsAppPhoneNumbers.AsNoTracking()\n                //    .Where(s => s.IsActive && s.PhoneNumberId == req.PhoneNumberId)\n                //    .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                //    .FirstOrDefaultAsync(ct);\n\n                var ws = await _context.WhatsAppPhoneNumbers.AsNoTracking()\n                    .Where(s =>  s.IsActive && s.PhoneNumberId == req.PhoneNumberId)\n                    .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                   .FirstOrDefaultAsync(ct);\n\n\n\n                if (ws == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Active WhatsApp sender (phoneNumberId) not found.\");\n\n                var businessId = ws.BusinessId;\n                var provider = (ws.Provider ?? \"\").Trim().ToUpperInvariant(); // \"META_CLOUD\" | \"PINNACLE\"\n                if (provider != \"META_CLOUD\" && provider != \"PINNACLE\")\n                    return ResponseResult.ErrorInfo($\"‚ùå Unsupported provider: {provider}\");\n\n                _logger.LogInformation(\n                    \"[CustomAPI:{ReqId}] Begin send. biz={BusinessId} pnid={PhoneNumberId} to={MaskedTo} template={TemplateId}\",\n                    reqId, businessId, req.PhoneNumberId, Mask(toNormalized), req.TemplateId);\n\n                // 2) Fetch template meta (for language + buttons)\n                var meta = await _templateFetcher.GetTemplateByNameAsync(businessId, req.TemplateId, includeButtons: true);\n                if (meta == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Template metadata not found for the given templateId.\");\n\n                var languageCode = (meta.Language ?? \"\").Trim();\n                if (string.IsNullOrWhiteSpace(languageCode))\n                    return ResponseResult.ErrorInfo(\"‚ùå Template language not resolved from provider metadata.\");\n\n                // 3) Header decision\n                var isVideoHeader = !string.IsNullOrWhiteSpace(req.VideoUrl);\n                if (isVideoHeader && !IsHttpsMp4Url(req.VideoUrl, out var vErr))\n                    return ResponseResult.ErrorInfo(\"üö´ Invalid VideoUrl.\", vErr);\n\n                // 4) Build components\n                var (components, whyBuildFail) = BuildComponents(isVideoHeader, req.Variables, req.VideoUrl);\n                if (components == null)\n                {\n                    _logger.LogWarning(\"[CustomAPI:{ReqId}] Component build failed: {Err}\", reqId, whyBuildFail);\n                    return ResponseResult.ErrorInfo($\"üö´ Component build failed: {whyBuildFail}\");\n                }\n\n                // 5) Snapshot first 3 buttons (optional analytics)\n                string? buttonBundleJson = null;\n                try\n                {\n                    if (meta.ButtonParams is { Count: > 0 })\n                    {\n                        var bundle = meta.ButtonParams.Take(3)\n                            .Select((b, i) => new\n                            {\n                                i,\n                                position = i + 1,\n                                text = (b.Text ?? \"\").Trim(),\n                                type = b.Type,\n                                subType = b.SubType\n                            }).ToList();\n                        buttonBundleJson = JsonConvert.SerializeObject(bundle);\n                    }\n                }\n                catch { /* best-effort snapshot */ }\n\n                // 6) Entry step for linked flow (optional)\n                Guid? entryStepId = null;\n                if (req.FlowConfigId.HasValue)\n                {\n                    entryStepId = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == req.FlowConfigId.Value)\n                        .OrderBy(s => s.StepOrder)\n                        .Select(s => (Guid?)s.Id)\n                        .FirstOrDefaultAsync(ct);\n                }\n\n                // 7) Build provider payload\n                var languageField = new { policy = \"deterministic\", code = string.IsNullOrWhiteSpace(languageCode) ? \"en_US\" : languageCode };\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = toNormalized,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = req.TemplateId,\n                        language = languageField,\n                        components\n                    }\n                };\n\n                _logger.LogInformation(\"[CustomAPI:{ReqId}] Sending {Template} to {To} via {Provider} (PNID={PNID}) video={Video}\",\n                    reqId, req.TemplateId, Mask(toNormalized), provider, req.PhoneNumberId, isVideoHeader);\n\n                // 8) Send\n                var result = await _messageEngine.SendPayloadAsync(\n                    businessId: businessId,\n                    provider: provider,\n                    payload: payload,\n                    phoneNumberId: req.PhoneNumberId\n                );\n\n                // 9) Log + billing\n                var now = DateTime.UtcNow;\n                var logId = Guid.NewGuid();\n\n                _context.MessageLogs.Add(new MessageLog\n                {\n                    Id = logId,\n                    BusinessId = businessId,\n                    CampaignId = null,\n                    RecipientNumber = toNormalized,\n                    MessageContent = req.TemplateId,\n                    MediaUrl = isVideoHeader ? req.VideoUrl : null,\n                    Status = result.Success ? \"Sent\" : \"Failed\",\n                    MessageId = result.MessageId,          // or just ProviderMessageId; keep one if you want to de-dup\n                    ProviderMessageId = result.MessageId,\n                    ErrorMessage = result.ErrorMessage,\n                    RawResponse = result.RawResponse,\n                    CreatedAt = now,\n                    SentAt = result.Success ? now : (DateTime?)null,\n                    Source = \"custom_api\",\n                    Provider = provider,\n                    CTAFlowConfigId = req.FlowConfigId,\n                    CTAFlowStepId = entryStepId,\n                    ButtonBundleJson = buttonBundleJson\n                });\n\n                await _context.SaveChangesAsync(ct);\n\n                await _billingIngest.IngestFromSendResponseAsync(\n                    businessId: businessId,\n                    messageLogId: logId,\n                    provider: provider,\n                    rawResponseJson: result.RawResponse ?? \"{}\"\n                );\n\n                _logger.LogInformation(\"[CustomAPI:{ReqId}] Done. success={Success} msgId={MessageId} flow={Flow} step={Step}\",\n                    reqId, result.Success, result.MessageId, req.FlowConfigId, entryStepId);\n\n                return result.Success\n                    ? ResponseResult.SuccessInfo(\"üöÄ Template sent.\",\n                        new\n                        {\n                            messageId = result.MessageId,\n                            to = toNormalized,\n                            templateId = req.TemplateId,\n                            flowConfigId = req.FlowConfigId,\n                            flowEntryStepId = entryStepId\n                        })\n                    : ResponseResult.ErrorInfo(\"‚ùå Send failed.\", result.ErrorMessage);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Exception in CustomApiService.SendTemplateAsync\");\n                return ResponseResult.ErrorInfo(\"üö® Server error while sending template.\", ex.ToString());\n            }\n        }\n\n        // ===== helpers (unchanged) =====\n        private static string NormalizePhone(string raw) => raw.StartsWith(\"+\") ? raw[1..] : raw;\n        private static string Mask(string phone) => phone.Length <= 6 ? phone : $\"{new string('*', phone.Length - 4)}{phone[^4..]}\";\n        private static bool IsHttpsMp4Url(string? url, out string? err)\n        {\n            err = null;\n            if (string.IsNullOrWhiteSpace(url)) { err = \"VideoUrl is required when sending a VIDEO header.\"; return false; }\n            if (!Uri.TryCreate(url, UriKind.Absolute, out var u)) { err = \"VideoUrl must be an absolute URL.\"; return false; }\n            if (u.Scheme != Uri.UriSchemeHttps) { err = \"VideoUrl must be HTTPS.\"; return false; }\n            if (!u.AbsolutePath.EndsWith(\".mp4\", StringComparison.OrdinalIgnoreCase)) { err = \"VideoUrl must point to an .mp4 file.\"; return false; }\n            return true;\n        }\n        //private static (List<object>? components, string? whyFail) BuildComponents(bool addVideoHeader, Dictionary<string, string>? variables, string? videoUrl)\n        //{\n        //    try\n        //    {\n        //        var components = new List<object>();\n        //        if (addVideoHeader)\n        //        {\n        //            components.Add(new\n        //            {\n        //                type = \"header\",\n        //                parameters = new object[] { new { type = \"video\", video = new { link = videoUrl } } }\n        //            });\n        //        }\n        //        if (variables is { Count: > 0 })\n        //        {\n        //            var bodyParams = variables\n        //                .Select(kv => (Index: int.TryParse(kv.Key, out var n) ? n : int.MaxValue, Text: kv.Value ?? string.Empty))\n        //                .OrderBy(x => x.Index)\n        //                .Select(x => new { type = \"text\", text = x.Text })\n        //                .ToArray();\n\n        //            if (bodyParams.Length > 0)\n        //                components.Add(new { type = \"body\", parameters = bodyParams });\n        //        }\n        //        return (components, null);\n        //    }\n        //    catch (Exception ex) { return (null, ex.Message); }\n        //}\n        private static (List<object>? components, string? whyFail) BuildComponents(\n         bool addVideoHeader,\n         Dictionary<string, string>? variables,\n         string? videoUrl)\n        {\n            try\n            {\n                var components = new List<object>();\n\n                // Header (optional video)\n                if (addVideoHeader)\n                {\n                    components.Add(new\n                    {\n                        type = \"header\",\n                        parameters = new object[]\n                        {\n                    new { type = \"video\", video = new { link = videoUrl } }\n                        }\n                    });\n                }\n\n                // Body params ({{1}}, {{2}}, ...) ‚Äî tolerate keys like \"1\", \"2\", \"para1\", \"foo2\"\n                if (variables is { Count: > 0 })\n                {\n                    var list = variables.ToList(); // preserves insertion order for non-numbered keys\n\n                    var bodyParams = list\n                        .Select((kv, idx) =>\n                        {\n                            var m = Regex.Match(kv.Key ?? string.Empty, @\"\\d+\");\n\n                            int n = 0; // declare first so it's always definitely assigned\n                            bool hasNum = m.Success && int.TryParse(m.Value, out n) && n > 0;\n\n                            // Numbered keys come first ordered by n; others follow in insertion order\n                            int orderKey = hasNum ? n : int.MaxValue - (list.Count - idx);\n\n                            return new { Order = orderKey, Text = kv.Value ?? string.Empty };\n                        })\n                        .OrderBy(x => x.Order)\n                        .Select(x => new { type = \"text\", text = x.Text })\n                        .ToArray();\n\n                    if (bodyParams.Length > 0)\n                        components.Add(new { type = \"body\", parameters = bodyParams });\n                }\n\n\n                return (components, null);\n            }\n            catch (Exception ex)\n            {\n                return (null, ex.Message);\n            }\n        }\n\n\n    }\n}\n\n//using System;\n//using System.Linq;\n//using System.Collections.Generic;\n//using System.Security.Claims;\n//using System.Threading;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.Logging;\n//using Microsoft.AspNetCore.Http;\n//using Newtonsoft.Json;\n//using xbytechat.api.Features.CustomeApi.DTOs;\n//using xbytechat.api.Features.MessagesEngine.Services; // IMessageEngineService\n//using xbytechat.api.Features.TemplateModule.Services; // IWhatsAppTemplateFetcherService\n//using xbytechat.api.Models;                         // MessageLog\n//using xbytechat.api.Shared;                         // ResponseResult\n//using xbytechat_api.Features.Billing.Services;\n//using xbytechat.api.Helpers;      // IBillingIngestService\n//using xbytechat.api.WhatsAppSettings;\n//using xbytechat_api.WhatsAppSettings.Services;\n//namespace xbytechat.api.Features.CustomeApi.Services\n//{\n//    public sealed class CustomApiService : ICustomApiService\n//    {\n//        private readonly AppDbContext _context;\n//        private readonly IHttpContextAccessor _http;\n//        private readonly IWhatsAppTemplateFetcherService _templateFetcher;\n//        private readonly IMessageEngineService _messageEngine;\n//        private readonly IBillingIngestService _billingIngest;\n//        private readonly ILogger<CustomApiService> _logger;\n\n//        public CustomApiService(\n//            AppDbContext context,\n//            IHttpContextAccessor http,\n//            IWhatsAppTemplateFetcherService templateFetcher,\n//            IMessageEngineService messageEngine,\n//            IBillingIngestService billingIngest,\n//            ILogger<CustomApiService> logger)\n//        {\n//            _context = context;\n//            _http = http;\n//            _templateFetcher = templateFetcher;\n//            _messageEngine = messageEngine;\n//            _billingIngest = billingIngest;\n//            _logger = logger;\n//        }\n\n//        public async Task<ResponseResult> SendTemplateAsync(DirectTemplateSendRequest req, CancellationToken ct = default)\n//        {\n//            try\n//            {\n//                // --- 0) Basic validation\n//                if (string.IsNullOrWhiteSpace(req.PhoneNumberId))\n//                    return ResponseResult.ErrorInfo(\"‚ùå phoneNumberId is required.\");\n//                if (string.IsNullOrWhiteSpace(req.To))\n//                    return ResponseResult.ErrorInfo(\"‚ùå 'to' (recipient) is required.\");\n//                if (string.IsNullOrWhiteSpace(req.TemplateId))\n//                    return ResponseResult.ErrorInfo(\"‚ùå templateId is required.\");\n\n//                var businessId = GetBusinessIdOrThrow();\n//                var toNormalized = NormalizePhone(req.To);\n\n//                var reqId = Guid.NewGuid();\n//                _logger.LogInformation(\n//                    \"[CustomAPI:{ReqId}] Begin send. biz={BusinessId} pnid={PhoneNumberId} to={MaskedTo} template={TemplateId}\",\n//                    reqId, businessId, req.PhoneNumberId, Mask(toNormalized), req.TemplateId);\n\n//                // --- 1) Resolve provider by phoneNumberId for this Business\n//                var ws = await _context.WhatsAppSettings.AsNoTracking()\n//                    .Where(s => s.BusinessId == businessId && s.IsActive && s.PhoneNumberId == req.PhoneNumberId)\n//                    .OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n//                    .FirstOrDefaultAsync(ct);\n\n//                if (ws == null)\n//                    return ResponseResult.ErrorInfo(\"‚ùå Active WhatsApp sender (phoneNumberId) not found for this Business.\");\n\n//                var provider = (ws.Provider ?? \"\").Trim().ToUpperInvariant(); // \"META_CLOUD\" | \"PINNACLE\"\n//                if (provider != \"META_CLOUD\" && provider != \"PINNACLE\")\n//                    return ResponseResult.ErrorInfo($\"‚ùå Unsupported provider configured for this sender: {provider}\");\n\n//                // --- 2) Fetch template meta\n//                // NOTE: your metadata doesn't expose HeaderType; we just read language & buttons. \n//                var meta = await _templateFetcher.GetTemplateByNameAsync(businessId, req.TemplateId, includeButtons: true);\n//                if (meta == null)\n//                    return ResponseResult.ErrorInfo(\"‚ùå Template metadata not found for the given templateId.\");\n\n//                var languageCode = (meta.Language ?? \"\").Trim();\n//                if (string.IsNullOrWhiteSpace(languageCode))\n//                    return ResponseResult.ErrorInfo(\"‚ùå Template language not resolved from provider metadata.\");\n\n//                // Decide header by request: if VideoUrl present -> add VIDEO header; otherwise TEXT-only\n//                var isVideoHeader = !string.IsNullOrWhiteSpace(req.VideoUrl);\n//                if (isVideoHeader && !IsHttpsMp4Url(req.VideoUrl, out var vErr))\n//                    return ResponseResult.ErrorInfo(\"üö´ Invalid VideoUrl.\", vErr);\n\n//                // --- 3) Build components (TEXT or VIDEO)\n//                var (components, whyBuildFail) = BuildComponents(isVideoHeader, req.Variables, req.VideoUrl);\n//                if (components == null)\n//                {\n//                    _logger.LogWarning(\"[CustomAPI:{ReqId}] Component build failed: {Err}\", reqId, whyBuildFail);\n//                    return ResponseResult.ErrorInfo($\"üö´ Component build failed: {whyBuildFail}\");\n//                }\n\n//                // Snapshot first 3 buttons (if any) for analytics/click mapping (same as campaigns)\n//                string? buttonBundleJson = null;\n//                try\n//                {\n//                    if (meta.ButtonParams is { Count: > 0 })\n//                    {\n//                        var bundle = meta.ButtonParams.Take(3)\n//                            .Select((b, i) => new\n//                            {\n//                                i,\n//                                position = i + 1,\n//                                text = (b.Text ?? \"\").Trim(),\n//                                type = b.Type,\n//                                subType = b.SubType\n//                            }).ToList();\n//                        buttonBundleJson = JsonConvert.SerializeObject(bundle);\n//                    }\n//                }\n//                catch { /* best-effort snapshot */ }\n\n//                // Find entry step of the linked flow (if provided)\n//                Guid? entryStepId = null;\n//                if (req.FlowConfigId.HasValue)\n//                {\n//                    entryStepId = await _context.CTAFlowSteps\n//                        .Where(s => s.CTAFlowConfigId == req.FlowConfigId.Value)\n//                        .OrderBy(s => s.StepOrder)\n//                        .Select(s => (Guid?)s.Id)\n//                        .FirstOrDefaultAsync(ct);\n//                }\n\n\n//                // Always object. Meta accepts { code: \"en_US\" } and ignores policy if present.\n//                // Pinnacle REQUIRES an object.\n//                var languageField = new\n//                {\n//                    policy = \"deterministic\",\n//                    code = string.IsNullOrWhiteSpace(languageCode) ? \"en_US\" : languageCode\n//                };\n\n//                var payload = new\n//                {\n//                    messaging_product = \"whatsapp\",\n//                    to = toNormalized,\n//                    type = \"template\",\n//                    template = new\n//                    {\n//                        name = req.TemplateId,\n//                        language = languageField,\n//                        components\n//                    }\n//                };\n\n\n//                _logger.LogInformation(\"[CustomAPI:{ReqId}] Sending {Template} to {To} via {Provider} (PNID={PNID}) video={Video}\",\n//                    reqId, req.TemplateId, Mask(toNormalized), provider, req.PhoneNumberId, isVideoHeader);\n\n//                var result = await _messageEngine.SendPayloadAsync(\n//                    businessId: businessId,\n//                    provider: provider,\n//                    payload: payload,\n//                    phoneNumberId: req.PhoneNumberId   // ‚úÖ correct parameter\n//                );\n\n//                // --- 5) Persist MessageLog (and flow linkage), then billing\n//                var now = DateTime.UtcNow;\n//                var logId = Guid.NewGuid();\n\n//                _context.MessageLogs.Add(new MessageLog\n//                {\n//                    Id = logId,\n//                    BusinessId = businessId,\n//                    CampaignId = null,                         // direct API path\n//                    RecipientNumber = toNormalized,\n//                    MessageContent = req.TemplateId,\n//                    MediaUrl = isVideoHeader ? req.VideoUrl : null,\n//                    Status = result.Success ? \"Sent\" : \"Failed\",\n//                    MessageId = result.MessageId,\n//                    ErrorMessage = result.ErrorMessage,\n//                    RawResponse = result.RawResponse,\n//                    CreatedAt = now,\n//                    SentAt = result.Success ? now : (DateTime?)null,\n//                    Source = \"custom_api\",\n//                    Provider = provider,\n//                    ProviderMessageId = result.MessageId,\n\n//                    // üîó Store flow linkage like campaigns do\n//                    CTAFlowConfigId = req.FlowConfigId,\n//                    CTAFlowStepId = entryStepId,\n//                    ButtonBundleJson = buttonBundleJson\n//                });\n\n//                await _context.SaveChangesAsync(ct);\n\n//                await _billingIngest.IngestFromSendResponseAsync(\n//                    businessId: businessId,\n//                    messageLogId: logId,\n//                    provider: provider,\n//                    rawResponseJson: result.RawResponse ?? \"{}\"\n//                );\n\n//                _logger.LogInformation(\"[CustomAPI:{ReqId}] Done. success={Success} msgId={MessageId} flow={Flow} step={Step}\",\n//                    reqId, result.Success, result.MessageId, req.FlowConfigId, entryStepId);\n\n//                return result.Success\n//                    ? ResponseResult.SuccessInfo(\"üöÄ Template sent.\",\n//                        new\n//                        {\n//                            messageId = result.MessageId,\n//                            to = toNormalized,\n//                            templateId = req.TemplateId,\n//                            flowConfigId = req.FlowConfigId,\n//                            flowEntryStepId = entryStepId\n//                        })\n//                    : ResponseResult.ErrorInfo(\"‚ùå Send failed.\", result.ErrorMessage);\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"‚ùå Exception in CustomApiService.SendTemplateAsync\");\n//                return ResponseResult.ErrorInfo(\"üö® Server error while sending template.\", ex.ToString());\n//            }\n//        }\n\n//        // ===== helpers =====\n\n//        private Guid GetBusinessIdOrThrow()\n//        {\n//            var user = _http.HttpContext?.User;\n//            if (user == null) throw new InvalidOperationException(\"Missing HttpContext/User.\");\n\n//            var bid = user.FindFirstValue(\"BusinessId\") ?? user.FindFirstValue(\"bid\") ?? user.FindFirstValue(\"business_id\");\n//            if (string.IsNullOrWhiteSpace(bid)) throw new InvalidOperationException(\"BusinessId claim is missing.\");\n//            return Guid.Parse(bid);\n//        }\n\n//        private static string NormalizePhone(string raw) => raw.StartsWith(\"+\") ? raw[1..] : raw;\n\n//        private static string Mask(string phone)\n//            => phone.Length <= 6 ? phone : $\"{new string('*', phone.Length - 4)}{phone[^4..]}\";\n\n//        private static bool IsHttpsMp4Url(string? url, out string? err)\n//        {\n//            err = null;\n//            if (string.IsNullOrWhiteSpace(url)) { err = \"VideoUrl is required when sending a VIDEO header.\"; return false; }\n//            if (!Uri.TryCreate(url, UriKind.Absolute, out var u)) { err = \"VideoUrl must be an absolute URL.\"; return false; }\n//            if (u.Scheme != Uri.UriSchemeHttps) { err = \"VideoUrl must be HTTPS.\"; return false; }\n//            if (!u.AbsolutePath.EndsWith(\".mp4\", StringComparison.OrdinalIgnoreCase)) { err = \"VideoUrl must point to an .mp4 file.\"; return false; }\n//            return true;\n//        }\n\n//        private static (List<object>? components, string? whyFail) BuildComponents(\n//            bool addVideoHeader,\n//            Dictionary<string, string>? variables,\n//            string? videoUrl)\n//        {\n//            try\n//            {\n//                var components = new List<object>();\n\n//                // Header (optional video)\n//                if (addVideoHeader)\n//                {\n//                    components.Add(new\n//                    {\n//                        type = \"header\",\n//                        parameters = new object[]\n//                        {\n//                            new { type = \"video\", video = new { link = videoUrl } }\n//                        }\n//                    });\n//                }\n\n//                // Body params ({{1}}, {{2}}, ...)\n//                if (variables is { Count: > 0 })\n//                {\n//                    var bodyParams = variables\n//                        .Select(kv => (Index: int.TryParse(kv.Key, out var n) ? n : int.MaxValue, Text: kv.Value ?? string.Empty))\n//                        .OrderBy(x => x.Index)\n//                        .Select(x => new { type = \"text\", text = x.Text })\n//                        .ToArray();\n\n//                    if (bodyParams.Length > 0)\n//                        components.Add(new { type = \"body\", parameters = bodyParams });\n//                }\n\n//                return (components, null);\n//            }\n//            catch (Exception ex)\n//            {\n//                return (null, ex.Message);\n//            }\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Services/ICtaJourneyPublisher.cs",
      "sha256": "179ba5f2372125cfe3c2aed455b5c8efa5b8f6de13ef2478d2e7e6df7890cd8e",
      "language": "csharp",
      "size": 443,
      "content": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CustomeApi.Services\n{\n    public interface ICtaJourneyPublisher\n    {\n        /// <summary>\n        /// Posts a CTAJourney event for the given business to all active endpoints in CustomerWebhookConfigs.\n        /// </summary>\n        Task PublishAsync(Guid businessId, Models.CtaJourneyEventDto dto, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CustomeApi/Services/ICustomApiService.cs",
      "sha256": "76cd53ece80c088bec742c33974d8a8be781cd297d3d68e474150b19707e1f1e",
      "language": "csharp",
      "size": 377,
      "content": "using System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CustomeApi.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.CustomeApi.Services\n{\n    public interface ICustomApiService\n    {\n        Task<ResponseResult> SendTemplateAsync(DirectTemplateSendRequest req, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Controllers/FeatureAccessController.cs",
      "sha256": "a22d132286854a629e58eaa52e3ceebc77dcbe65ccb89d849b5c61fbe23f9904",
      "language": "csharp",
      "size": 5482,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing System.Security.Claims;\nusing xbytechat.api;\nusing FeatureAccessEntity = xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess;\n\nusing xbytechat.api.Features.FeatureAccessModule.Models;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/feature-access\")]\n    [Authorize]\n    public class FeatureAccessController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n\n        public FeatureAccessController(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // DTOs to match your frontend shape\n        public class FeatureMeDto\n        {\n            public string featureCode { get; set; } = \"\";\n            public bool isAvailableInPlan { get; set; }\n            public bool? isOverridden { get; set; } // null = not overridden\n        }\n\n        public class BusinessFeatureDto\n        {\n            public string featureName { get; set; } = \"\";\n            public bool isEnabled { get; set; }\n        }\n\n        /// <summary>\n        /// Returns features for the current user, merged from plan + per-business overrides\n        /// Shape: [{ featureCode, isAvailableInPlan, isOverridden }]\n        /// </summary>\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMyFeatureAccess()\n        {\n            var user = HttpContext.User;\n            if (user?.Identity is not { IsAuthenticated: true })\n                return Unauthorized();\n\n            var role = (user.FindFirst(\"role\")?.Value ?? user.FindFirst(ClaimTypes.Role)?.Value ?? \"business\").ToLower();\n            var plan = (user.FindFirst(\"plan\")?.Value ?? \"basic\").ToLower();\n\n            Guid businessId = Guid.Empty;\n            _ = Guid.TryParse(user.FindFirst(\"businessId\")?.Value, out businessId);\n\n            // Superadmin: grant all known features\n            if (role == \"superadmin\")\n            {\n                var allNames = await _db.FeatureAccess\n                    .AsNoTracking()\n                    .Select(f => f.FeatureName)\n                    .Distinct()\n                    .ToListAsync();\n\n                var super = allNames.Select(name => new FeatureMeDto\n                {\n                    featureCode = name,\n                    isAvailableInPlan = true,\n                    isOverridden = true\n                });\n\n                return Ok(super);\n            }\n\n            // Load plan-level features (same entity type as DbSet)\n            var planRows = await _db.FeatureAccess\n                .AsNoTracking()\n                .Where(f => f.Plan.ToLower() == plan)\n                .ToListAsync();\n\n            // Load business overrides using SAME type; avoid ternary type-mismatch\n            List<FeatureAccessEntity> overrideRows;\n            if (businessId == Guid.Empty)\n            {\n                overrideRows = new();\n            }\n            else\n            {\n                overrideRows = await _db.FeatureAccess\n                    .AsNoTracking()\n                    .Where(f => f.BusinessId == businessId)\n                    .ToListAsync();\n            }\n\n            // Build base from plan, then apply overrides\n            var map = new Dictionary<string, FeatureMeDto>(StringComparer.OrdinalIgnoreCase);\n\n            foreach (var p in planRows)\n            {\n                if (!map.ContainsKey(p.FeatureName))\n                {\n                    map[p.FeatureName] = new FeatureMeDto\n                    {\n                        featureCode = p.FeatureName,\n                        isAvailableInPlan = p.IsEnabled,\n                        isOverridden = null\n                    };\n                }\n                else\n                {\n                    map[p.FeatureName].isAvailableInPlan = p.IsEnabled;\n                }\n            }\n\n            foreach (var o in overrideRows)\n            {\n                if (!map.ContainsKey(o.FeatureName))\n                {\n                    map[o.FeatureName] = new FeatureMeDto\n                    {\n                        featureCode = o.FeatureName,\n                        isAvailableInPlan = false,\n                        isOverridden = o.IsEnabled\n                    };\n                }\n                else\n                {\n                    map[o.FeatureName].isOverridden = o.IsEnabled;\n                }\n            }\n\n            return Ok(map.Values.ToArray());\n        }\n\n        /// <summary>\n        /// Returns all features for a business (used by useAllFeatureAccess/useFeatureAccess hooks)\n        /// Shape: [{ featureName, isEnabled }]\n        /// </summary>\n        [HttpGet(\"business/{businessId:guid}\")]\n        public async Task<IActionResult> GetBusinessFeatureAccess([FromRoute] Guid businessId)\n        {\n            // (Optional) enforce tenant isolation:\n            // var currentBiz = HttpContext.User.FindFirst(\"businessId\")?.Value;\n            // if (!Guid.TryParse(currentBiz, out var bizFromToken) || bizFromToken != businessId)\n            //     return Forbid();\n\n            var rows = await _db.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .Select(f => new BusinessFeatureDto\n                {\n                    featureName = f.FeatureName,\n                    isEnabled = f.IsEnabled\n                })\n                .ToListAsync();\n\n            return Ok(rows);\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureAccessDto.cs",
      "sha256": "c418561ae9075f32902a032190e2252c7eab385bbdf1028ddd5748f0190df6de",
      "language": "csharp",
      "size": 409,
      "content": "using System;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureAccessDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string FeatureName { get; set; } = string.Empty;\n\n        public bool IsEnabled { get; set; }\n\n        public string? Notes { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureMetadataDto.cs",
      "sha256": "958bb8308ae62a666fd659a66327d6b5cb0a7a66659e4048df206994ea3e9aec",
      "language": "csharp",
      "size": 360,
      "content": "// üìÑ Features/FeatureAccessModule/DTOs/FeatureMetadataDto.cs\nnamespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureMetadataDto\n    {\n        public string FeatureCode { get; set; } = string.Empty;\n        public string Group { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureStatusDto.cs",
      "sha256": "36dfe2add0ad58f4e5f9e0d572e43bf68a42cc95b17f5654cacb1e7596e9715a",
      "language": "csharp",
      "size": 240,
      "content": "namespace xbytechat.api.Features.FeatureAccess.DTOs;\n\npublic class FeatureStatusDto\n{\n    public string FeatureCode { get; set; } = string.Empty;\n    public bool IsAvailableInPlan { get; set; }\n    public bool? IsOverridden { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureTogglePatchDto.cs",
      "sha256": "4663d2df320001525fb2b9ff9847b149f77677557a22efbaa7c455ed8ac3c483",
      "language": "csharp",
      "size": 157,
      "content": "namespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureTogglePatchDto\n    {\n        public bool IsEnabled { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureToggleViewDto.cs",
      "sha256": "cc966666d4e050d9d16f7bab7d10f8c059305fc24a84ea7bd2642eb9a4375e8b",
      "language": "csharp",
      "size": 423,
      "content": "public class FeatureToggleViewDto\n{\n    public string FeatureCode { get; set; } = string.Empty;\n    public string Group { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n\n    public bool IsAvailableInPlan { get; set; }     // From PlanManager\n    public bool? IsOverridden { get; set; }         // null if no override\n    public bool IsActive => IsOverridden ?? IsAvailableInPlan;\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/UserFeatureAccessDto.cs",
      "sha256": "24a59738ee2f1924903a6e14ecf5ed5a1ce6cbb0269b34013438b37502c2efa9",
      "language": "csharp",
      "size": 520,
      "content": "namespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class UserFeatureAccessDto\n    {\n        public Guid Id { get; set; }\n        public string FullName { get; set; } = \"\";\n        public string Email { get; set; } = \"\";\n        public string Role { get; set; } = \"\";\n        public List<FeaturePermissionDto> Permissions { get; set; } = new();\n    }\n\n    public class FeaturePermissionDto\n    {\n        public string FeatureName { get; set; } = \"\";\n        public bool IsEnabled { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/FeatureAccess.cs",
      "sha256": "53331121064e4c1559420eb6de1770eb6788b85b404505420f11d5c0bb6b8fe6",
      "language": "csharp",
      "size": 975,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"FeatureAccess\")]\n    public class FeatureAccess\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } // e.g. \"CRM\", \"Campaigns\", \"Catalog\"\n        [MaxLength(200)]\n        public string Description { get; set; } = string.Empty;\n        [Required]\n        public bool IsEnabled { get; set; } // ‚úÖ true = allow, false = restrict\n\n        public string? Notes { get; set; } // Optional: reason or context\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        [MaxLength(50)]\n        public string Group { get; set; } = string.Empty;\n        public string? Plan { get; set; } // e.g. \"basic\", \"smart\", \"advanced\"\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/FeatureMaster.cs",
      "sha256": "dcf5048b433abe18e2d52542d30fd81664a62f97176fe4ae583ce8218dfb002c",
      "language": "csharp",
      "size": 853,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"FeatureMaster\")]\n    public class FeatureMaster\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string FeatureCode { get; set; } = string.Empty; // e.g. \"crm\", \"catalog\"\n\n        [Required]\n        [MaxLength(100)]\n        public string DisplayName { get; set; } = string.Empty; // e.g. \"CRM\", \"Catalog\"\n\n        [MaxLength(250)]\n        public string Description { get; set; } = string.Empty;\n\n        [MaxLength(50)]\n        public string Group { get; set; } = string.Empty; // Optional grouping like \"CRM\", \"Messaging\"\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/UserFeatureAccess.cs",
      "sha256": "894b0a6020dffcbe46247fd5412ef98ab890a641144d089aa7c9c7aa351d0f9b",
      "language": "csharp",
      "size": 778,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"UserFeatureAccess\")]\n    public class UserFeatureAccess\n    {\n        [Key]\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        [Required]\n        public Guid UserId { get; set; }\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } = string.Empty;\n\n        [Required]\n        public bool IsEnabled { get; set; }\n\n        public string? Notes { get; set; }\n\n        public Guid? ModifiedByUserId { get; set; }  // Who applied this override\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/FeatureAccessEvaluator.cs",
      "sha256": "b7ad7ecdc58db9f75f5793f8fb207db8b7127f878b4d51a7144c6a71e1c2dd48",
      "language": "csharp",
      "size": 1566,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public class FeatureAccessEvaluator : IFeatureAccessEvaluator\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<FeatureAccessEvaluator> _logger;\n\n        public FeatureAccessEvaluator(AppDbContext db, ILogger<FeatureAccessEvaluator> logger)\n        {\n            _db = db;\n            _logger = logger;\n        }\n\n        public async Task<bool> CanUseAsync(Guid businessId, string featureCode, Guid? userId)\n        {\n            var business = await _db.Businesses\n                .Include(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null || business.BusinessPlanInfo == null)\n                return false;\n\n            var planEnum = business.BusinessPlanInfo.Plan;\n            var planName = Enum.GetName(typeof(PlanType), planEnum)?.ToLower();\n\n            var planFeatures = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase)\n            {\n                [\"crm\"] = planName == \"smart\" || planName == \"advanced\",\n                [\"campaigns\"] = planName == \"advanced\",\n                [\"catalog\"] = true,\n                [\"automation\"] = planName == \"smart\" || planName == \"advanced\"\n            };\n\n            return planFeatures.TryGetValue(featureCode.ToLower(), out var allowed) && allowed;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/FeatureAccessService.cs",
      "sha256": "7968f3a0ef26fa05305fef477338950b8cb824aea9785d56b5d500ef3c376921",
      "language": "csharp",
      "size": 9158,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.FeatureAccess.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Services;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public class FeatureAccessService : IFeatureAccessService\n    {\n        private readonly AppDbContext _context;\n        private readonly IPlanManager _planManager;\n        private readonly ILogger<FeatureAccessService> _logger;\n\n        public FeatureAccessService(AppDbContext context, IPlanManager planManager, ILogger<FeatureAccessService> logger)\n        {\n            _context = context;\n            _planManager = planManager;\n            _logger = logger;\n        }\n\n        public async Task<IEnumerable<FeatureAccessDto>> GetAllAsync()\n        {\n            return await _context.FeatureAccess\n                .Select(f => new FeatureAccessDto\n                {\n                    Id = f.Id,\n                    BusinessId = f.BusinessId,\n                    FeatureName = f.FeatureName,\n                    IsEnabled = f.IsEnabled,\n                    Notes = f.Notes,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<IEnumerable<FeatureAccessDto>> GetByBusinessIdAsync(Guid businessId)\n        {\n            return await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .Select(f => new FeatureAccessDto\n                {\n                    Id = f.Id,\n                    BusinessId = f.BusinessId,\n                    FeatureName = f.FeatureName,\n                    IsEnabled = f.IsEnabled,\n                    Notes = f.Notes,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<FeatureAccessDto?> GetAsync(Guid id)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null) return null;\n\n            return new FeatureAccessDto\n            {\n                Id = entity.Id,\n                BusinessId = entity.BusinessId,\n                FeatureName = entity.FeatureName,\n                IsEnabled = entity.IsEnabled,\n                Notes = entity.Notes,\n                CreatedAt = entity.CreatedAt\n            };\n        }\n\n        public async Task<FeatureAccessDto> CreateAsync(FeatureAccessDto dto)\n        {\n            var entity = new  xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                FeatureName = dto.FeatureName,\n                IsEnabled = dto.IsEnabled,\n                Notes = dto.Notes,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _context.FeatureAccess.Add(entity);\n            await _context.SaveChangesAsync();\n\n            dto.Id = entity.Id;\n            dto.CreatedAt = entity.CreatedAt;\n            return dto;\n        }\n\n        public async Task<FeatureAccessDto> UpdateAsync(Guid id, FeatureAccessDto dto)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null)\n                throw new Exception(\"FeatureAccess not found\");\n\n            entity.FeatureName = dto.FeatureName;\n            entity.IsEnabled = dto.IsEnabled;\n            entity.Notes = dto.Notes;\n\n            await _context.SaveChangesAsync();\n\n            return dto;\n        }\n\n        public async Task<bool> DeleteAsync(Guid id)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null) return false;\n\n            _context.FeatureAccess.Remove(entity);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<List<FeatureToggleViewDto>> GetToggleViewAsync(Guid businessId, string plan)\n        {\n            var allFeatures = await _context.FeatureAccess.ToListAsync();\n\n            var planAccessMap = _planManager.GetPlanFeatureMap(plan); // e.g., Dictionary<string, bool>\n\n            var userOverrides = await _context.UserFeatureAccess\n                .Where(x => x.BusinessId == businessId)\n                .ToDictionaryAsync(x => x.FeatureName, x => x.IsEnabled);\n\n            var result = allFeatures.Select(f => new FeatureToggleViewDto\n            {\n                FeatureCode = f.FeatureName,\n                Group = f.Group,\n                Description = f.Description,\n                IsAvailableInPlan = planAccessMap.ContainsKey(f.FeatureName),\n                IsOverridden = userOverrides.TryGetValue(f.FeatureName, out var val) ? val : null\n            }).ToList();\n\n            return result;\n        }\n\n        public async Task ToggleFeatureAsync(Guid businessId, string featureCode, bool isEnabled)\n        {\n            try\n            {\n                var existing = await _context.UserFeatureAccess\n                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.FeatureName == featureCode);\n\n                if (existing != null)\n                {\n                    existing.IsEnabled = isEnabled;\n                    _context.UserFeatureAccess.Update(existing);\n                }\n                else\n                {\n                    var newAccess = new UserFeatureAccess\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        FeatureName = featureCode,\n                        IsEnabled = isEnabled,\n                        CreatedAt = DateTime.UtcNow\n                    };\n                    await _context.UserFeatureAccess.AddAsync(newAccess);\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to toggle feature {FeatureCode} for business {BusinessId}\", featureCode, businessId);\n                throw;\n            }\n        }\n\n        public async Task<List<FeatureStatusDto>> GetFeaturesForCurrentUserAsync(Guid businessId)\n        {\n            var business = await _context.Businesses\n                .Include(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n            {\n                _logger.LogError(\"‚ùå Business not found for feature access: {BusinessId}\", businessId);\n                return new List<FeatureStatusDto>();\n            }\n\n            var planName = business.BusinessPlanInfo?.Plan.ToString() ?? \"basic\"; // Fallback to basic\n            _logger.LogInformation(\"üì¶ Resolved plan for Business {BusinessId}: {Plan}\", businessId, planName);\n\n            var planFeatureMap = _planManager.GetPlanFeatureMap(planName);\n\n            var overrides = await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .ToDictionaryAsync(f => f.FeatureName, f => (bool?)f.IsEnabled);\n            foreach (var kv in overrides)\n                _logger.LogInformation($\"üîß Feature override: {kv.Key} = {kv.Value}\");\n            var allFeatures = planFeatureMap.Keys\n                .Union(overrides.Keys)\n                .Distinct();\n\n            return allFeatures.Select(f => new FeatureStatusDto\n            {\n                FeatureCode = f,\n                IsAvailableInPlan = planFeatureMap.ContainsKey(f),\n                IsOverridden = overrides.ContainsKey(f) ? overrides[f] : null\n            }).ToList();\n        }\n\n        public async Task<List<UserFeatureAccessDto>> GetAllUserPermissionsAsync(Guid businessId)\n        {\n            var users = await _context.Users\n             .Where(u => u.BusinessId == businessId)\n             .Select(u => new UserFeatureAccessDto\n             {\n                 Id = u.Id,\n                 FullName = u.Name, // ‚úÖ Fixed\n                 Email = u.Email,\n                 Role = u.Role.Name, // ‚úÖ Assuming you want role name string\n                 Permissions = _context.UserFeatureAccess\n                     .Where(p => p.BusinessId == businessId && p.UserId == u.Id)\n                     .Select(p => new FeaturePermissionDto\n                     {\n                         FeatureName = p.FeatureName,\n                         IsEnabled = p.IsEnabled\n                     })\n                     .ToList()\n             }).ToListAsync();\n\n\n            return users;\n        }\n        public async Task<Dictionary<string, bool>> GetFeatureMapByBusinessIdAsync(Guid businessId)\n        {\n            return await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .ToDictionaryAsync(f => f.FeatureName.ToLower(), f => f.IsEnabled);\n        }\n        public async Task<Dictionary<string, bool>> GetAllFeatureCodesAsync()\n        {\n            return await _context.FeatureMasters\n                .Select(f => f.FeatureCode.ToLower())\n                .Distinct()\n                .ToDictionaryAsync(k => k, v => true);\n        }\n\n\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/IFeatureAccessEvaluator.cs",
      "sha256": "c469910530df845be90a6d4135c2d39d19993f8abff4b3eefc6e8c05effe373d",
      "language": "csharp",
      "size": 259,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public interface IFeatureAccessEvaluator\n    {\n        Task<bool> CanUseAsync(Guid businessId, string featureName, Guid? userId = null);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/IFeatureAccessService.cs",
      "sha256": "6b328b62d7d5356015dc30688fa072e890cac87e55a5c8a12b1e605b05a744f3",
      "language": "csharp",
      "size": 1183,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.FeatureAccess.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.DTOs;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public interface IFeatureAccessService\n    {\n        Task<IEnumerable<FeatureAccessDto>> GetAllAsync();\n        Task<IEnumerable<FeatureAccessDto>> GetByBusinessIdAsync(Guid businessId);\n        Task<FeatureAccessDto?> GetAsync(Guid id);\n        Task<FeatureAccessDto> CreateAsync(FeatureAccessDto dto);\n        Task<FeatureAccessDto> UpdateAsync(Guid id, FeatureAccessDto dto);\n        Task<bool> DeleteAsync(Guid id);\n\n        Task<List<FeatureToggleViewDto>> GetToggleViewAsync(Guid businessId, string plan);\n        Task ToggleFeatureAsync(Guid businessId, string featureCode, bool isEnabled);\n        Task<List<FeatureStatusDto>> GetFeaturesForCurrentUserAsync(Guid businessId);\n        Task<List<UserFeatureAccessDto>> GetAllUserPermissionsAsync(Guid businessId);\n        Task<Dictionary<string, bool>> GetFeatureMapByBusinessIdAsync(Guid businessId);\n        Task<Dictionary<string, bool>> GetAllFeatureCodesAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Controllers/FlowAnalyticsController.cs",
      "sha256": "18a260235767524c70c33a6a49f8929060e94415ee98ff743590d207242020e3",
      "language": "csharp",
      "size": 2196,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.FlowAnalytics.Services;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Controllers\n{\n    [ApiController]\n    [Route(\"api/flow-analytics\")]\n    public class FlowAnalyticsController : ControllerBase\n    {\n        private readonly IFlowAnalyticsService _analyticsService;\n\n        public FlowAnalyticsController(IFlowAnalyticsService analyticsService)\n        {\n            _analyticsService = analyticsService;\n        }\n\n        // ‚úÖ GET /api/flow-analytics/summary\n        [HttpGet(\"summary\")]\n        [Authorize]\n        public async Task<IActionResult> GetSummary()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var result = await _analyticsService.GetAnalyticsSummaryAsync(businessId);\n            return Ok(result);\n        }\n\n        // ‚úÖ GET /api/flow-analytics/most-triggered-steps\n        [HttpGet(\"most-triggered-steps\")]\n        [Authorize]\n        public async Task<IActionResult> GetMostTriggeredSteps()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var data = await _analyticsService.GetMostTriggeredStepsAsync(businessId);\n            return Ok(data);\n        }\n\n        // ‚úÖ GET /api/flow-analytics/step-journey-breakdown?startDate=...&endDate=...\n        [HttpGet(\"step-journey-breakdown\")]\n        [Authorize]\n        public async Task<IActionResult> GetStepJourneyBreakdown([FromQuery] DateTime? startDate, [FromQuery] DateTime? endDate)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var data = await _analyticsService.GetStepJourneyBreakdownAsync(businessId, startDate, endDate);\n            return Ok(data);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowAnalyticsStepJourneyDto.cs",
      "sha256": "25c17b6d295eb4faf667e982e2878b32a18af8a759791962286f17eec9163f6f",
      "language": "csharp",
      "size": 889,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowAnalyticsStepJourneyDto\n    {\n        public Guid StepId { get; set; }\n\n        public string TemplateName { get; set; } = string.Empty;\n\n        public int TotalReached { get; set; }\n\n        public int ClickedNext { get; set; }\n\n        public Guid? NextStepId { get; set; }\n\n        // ‚úÖ Auto-calculated: number of users who dropped off at this step\n        public int DropOff => TotalReached - ClickedNext;\n\n        // ‚úÖ Auto-calculated: percentage of users who clicked \"next\"\n        public double ConversionRate =>\n            TotalReached == 0 ? 0 : Math.Round((double)ClickedNext / TotalReached * 100, 2);\n\n        // ‚úÖ Optional: percentage of users who dropped off\n        public double DropOffRate =>\n            TotalReached == 0 ? 0 : Math.Round((double)DropOff / TotalReached * 100, 2);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowAnalyticsSummaryDto.cs",
      "sha256": "5298f0c920ce53f68b8113de057d804750e1a3afd39d3a24e965ae120275118a",
      "language": "csharp",
      "size": 369,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowAnalyticsSummaryDto\n    {\n        public int TotalExecutions { get; set; }\n        public int UniqueContacts { get; set; }\n        public string TopStepTriggered { get; set; } = \"N/A\";\n        public int TopStepCount { get; set; }\n        public DateTime? LastExecutedAt { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowStepAnalyticsDto.cs",
      "sha256": "538b4b71cb5a0a82ee36ec0147c0014d4f6570b635eb2ce711cb7e8de3119a09",
      "language": "csharp",
      "size": 478,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowStepAnalyticsDto\n    {\n        public Guid StepId { get; set; }\n        public string TemplateName { get; set; } = string.Empty;\n        public int TotalReached { get; set; }\n        public int ClickedNext { get; set; }\n        public int DropOff => TotalReached - ClickedNext;\n        public Guid? NextStepId { get; set; }\n        public DateTime ExecutedAtUtc { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/MostTriggeredStepDto.cs",
      "sha256": "18dc2f8497fae7508358e8556503db073d057061d1892fed2882208fa6653588",
      "language": "csharp",
      "size": 310,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class MostTriggeredStepDto\n    {\n        public Guid StepId { get; set; }\n        public string StepName { get; set; } = string.Empty;\n        public int TriggerCount { get; set; }\n        public DateTime? LastTriggeredAt { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Services/FlowAnalyticsService.cs",
      "sha256": "b832767451b9f0161f931082a45a698407bf4cfaa6c5077edef8a2f6d30385cb",
      "language": "csharp",
      "size": 5128,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.FlowAnalytics.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Services\n{\n    public class FlowAnalyticsService : IFlowAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public FlowAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // ‚úÖ Summary cards (executions, unique contacts, top step)\n        public async Task<FlowAnalyticsSummaryDto> GetAnalyticsSummaryAsync(Guid businessId)\n        {\n            try\n            {\n                Log.Information(\"üìä Generating Flow Analytics Summary for BusinessId: {BusinessId}\", businessId);\n\n                var recentExecutions = await _context.FlowExecutionLogs\n                    .Where(e => e.BusinessId == businessId)\n                    .ToListAsync();\n\n                var totalExecutions = recentExecutions.Count;\n                var uniqueContacts = recentExecutions.Select(e => e.ContactPhone).Distinct().Count();\n                var mostTriggeredStep = recentExecutions\n                    .GroupBy(e => e.StepName)\n                    .OrderByDescending(g => g.Count())\n                    .Select(g => new { Step = g.Key, Count = g.Count() })\n                    .FirstOrDefault();\n\n                return new FlowAnalyticsSummaryDto\n                {\n                    TotalExecutions = totalExecutions,\n                    UniqueContacts = uniqueContacts,\n                    TopStepTriggered = mostTriggeredStep?.Step ?? \"N/A\",\n                    TopStepCount = mostTriggeredStep?.Count ?? 0,\n                    LastExecutedAt = recentExecutions\n                        .OrderByDescending(e => e.ExecutedAt)\n                        .FirstOrDefault()?.ExecutedAt\n                };\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to generate flow analytics summary\");\n                return new FlowAnalyticsSummaryDto();\n            }\n        }\n\n        // ‚úÖ Top triggered steps leaderboard\n        public async Task<List<MostTriggeredStepDto>> GetMostTriggeredStepsAsync(Guid businessId)\n        {\n            return await _context.FlowExecutionLogs\n                .Where(e => e.BusinessId == businessId)\n                .GroupBy(e => new { e.StepId, e.StepName })\n                .Select(g => new MostTriggeredStepDto\n                {\n                    StepId = g.Key.StepId,\n                    StepName = g.Key.StepName,\n                    TriggerCount = g.Count(),\n                    LastTriggeredAt = g.Max(e => e.ExecutedAt)\n                })\n                .OrderByDescending(x => x.TriggerCount)\n                .Take(5)\n                .ToListAsync();\n        }\n\n        // ‚úÖ Step-by-step journey breakdown (with date filter)\n        public async Task<List<FlowAnalyticsStepJourneyDto>> GetStepJourneyBreakdownAsync(Guid businessId, DateTime? startDate, DateTime? endDate)\n        {\n            var query = _context.FlowExecutionLogs\n                .Where(e => e.BusinessId == businessId);\n\n            if (startDate.HasValue)\n                query = query.Where(e => e.ExecutedAt >= startDate.Value.Date);\n\n            if (endDate.HasValue)\n                query = query.Where(e => e.ExecutedAt <= endDate.Value.Date.AddDays(1).AddTicks(-1));\n\n            var logs = await query.ToListAsync();\n\n            // Group by StepId\n            var grouped = logs\n                .GroupBy(e => new { e.StepId, e.TemplateName, e.TriggeredByButton, e.FlowId })\n                .Select(g => new\n                {\n                    StepId = g.Key.StepId,\n                    TemplateName = g.Key.TemplateName,\n                    TotalReached = g.Count(),\n                    ClickedNext = logs.Count(x =>\n                        x.TriggeredByButton != null &&\n                        x.FlowId == g.Key.FlowId &&\n                        x.StepId != g.Key.StepId &&\n                        x.TriggeredByButton == g.Key.TriggeredByButton\n                    ),\n                    FlowId = g.Key.FlowId,\n                    TriggeredByButton = g.Key.TriggeredByButton\n                })\n                .ToList();\n\n            // Build final breakdown\n            var breakdown = grouped.Select(g => new FlowAnalyticsStepJourneyDto\n            {\n                StepId = g.StepId,\n                TemplateName = g.TemplateName,\n                TotalReached = g.TotalReached,\n                ClickedNext = g.ClickedNext,\n              //  DropOff = g.TotalReached - g.ClickedNext,\n                NextStepId = _context.FlowButtonLinks\n                    .Where(bl =>\n                        bl.CTAFlowStepId == g.StepId &&\n                        bl.ButtonText == g.TriggeredByButton)\n                    .Select(bl => bl.NextStepId)\n                    .FirstOrDefault()\n            }).ToList();\n\n            return breakdown;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Services/IFlowAnalyticsService.cs",
      "sha256": "65a623c78188e9581eee608e1e5e53404f8431fb317139d50a4caadd86b074ae",
      "language": "csharp",
      "size": 512,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.FlowAnalytics.DTOs;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Services\n{\n    public interface IFlowAnalyticsService\n    {\n        Task<FlowAnalyticsSummaryDto> GetAnalyticsSummaryAsync(Guid businessId);\n        Task<List<MostTriggeredStepDto>> GetMostTriggeredStepsAsync(Guid businessId);\n        Task<List<FlowAnalyticsStepJourneyDto>> GetStepJourneyBreakdownAsync(Guid businessId, DateTime? startDate, DateTime? endDate);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Controllers/InboxController.cs",
      "sha256": "3d0e927289537b66319358696495d025ff3f9a5f6c17877f661a19cd1dec1f3e",
      "language": "csharp",
      "size": 9876,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Helpers;\nusing Microsoft.AspNetCore.Authorization;\nusing xbytechat.api.Shared;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox.Hubs;\n\nnamespace xbytechat.api.Features.Inbox.Controllers\n{\n    [ApiController]\n    [Route(\"api/inbox\")]\n    public class InboxController : ControllerBase\n    {\n        private readonly IInboxService _inboxService;\n        private readonly IHubContext<InboxHub> _hubContext; // ‚úÖ for SignalR push\n        private readonly IUnreadCountService _unreadCountService;\n\n        public InboxController(\n            IInboxService inboxService,\n            IHubContext<InboxHub> hubContext,\n            IUnreadCountService unreadCountService)\n        {\n            _inboxService = inboxService;\n            _hubContext = hubContext;\n            _unreadCountService = unreadCountService;\n        }\n\n        /// <summary>\n        /// Send a new message from UI or system.\n        /// </summary>\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendMessage([FromBody] InboxMessageDto dto)\n        {\n            if (dto == null || string.IsNullOrWhiteSpace(dto.MessageBody))\n                return BadRequest(\"Message content is required.\");\n\n            var result = await _inboxService.SaveOutgoingMessageAsync(dto);\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Receive a message from external source (e.g., WhatsApp webhook).\n        /// </summary>\n        [HttpPost(\"receive\")]\n        public async Task<IActionResult> ReceiveMessage([FromBody] InboxMessageDto dto)\n        {\n            if (dto == null || string.IsNullOrWhiteSpace(dto.MessageBody))\n                return BadRequest(\"Incoming message content is required.\");\n\n            // ‚úÖ Ensure IDs are present\n            if (dto.BusinessId == Guid.Empty || dto.ContactId == Guid.Empty)\n                return BadRequest(\"BusinessId and ContactId are required.\");\n\n            // 1) Persist the inbound message\n            var result = await _inboxService.SaveIncomingMessageAsync(dto);\n\n            // 2) Push the real-time message to everyone in this business\n            var groupName = $\"business_{dto.BusinessId}\";\n            await _hubContext.Clients.Group(groupName).SendAsync(\"ReceiveInboxMessage\", new\n            {\n                contactId = dto.ContactId,\n                messageContent = dto.MessageBody,  // ‚úÖ aligned with frontend\n                from = dto.RecipientPhone,\n                status = \"Delivered\",\n                sentAt = DateTime.UtcNow,\n                isIncoming = true\n            });\n\n            // 3) Tell clients to refresh their own unread snapshot (per-user)\n            //    We cannot compute per-user unread here (no userId in webhook context),\n            //    so we emit a refresh signal that clients handle by calling GET /inbox/unread-counts.\n            await _hubContext.Clients.Group(groupName)\n                .SendAsync(\"UnreadCountChanged\", new { refresh = true });\n\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Fetch message history between agent and customer using business token + contactId.\n        /// </summary>\n        [HttpGet(\"messages\")]\n        public async Task<IActionResult> GetMessagesByContact([FromQuery] Guid contactId)\n        {\n            if (contactId == Guid.Empty)\n                return BadRequest(\"ContactId is required.\");\n\n            var businessId = User.GetBusinessId();\n            var messages = await _inboxService.GetMessagesByContactAsync(businessId, contactId);\n            return Ok(messages);\n        }\n\n        [HttpGet(\"conversation\")]\n        public async Task<IActionResult> GetConversation(\n            [FromQuery] Guid businessId,\n            [FromQuery] string userPhone,\n            [FromQuery] string contactPhone)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(userPhone) || string.IsNullOrWhiteSpace(contactPhone))\n                return BadRequest(\"Invalid input.\");\n\n            var messages = await _inboxService.GetConversationAsync(businessId, userPhone, contactPhone);\n            return Ok(messages);\n        }\n\n        [HttpPost(\"mark-read\")]\n        public async Task<IActionResult> MarkMessagesAsRead([FromQuery] Guid contactId)\n        {\n            if (contactId == Guid.Empty)\n                return BadRequest(\"ContactId is required.\");\n\n            var businessId = User.GetBusinessId();\n            await _inboxService.MarkMessagesAsReadAsync(businessId, contactId);\n            return Ok();\n        }\n\n        [HttpGet(\"unread-counts\")]\n        public async Task<IActionResult> GetUnreadCounts()\n        {\n            var businessId = User.GetBusinessId();\n            var userId = User.GetUserId();\n\n            if (businessId == null || userId == null)\n                return Unauthorized();\n\n            var counts = await _unreadCountService.GetUnreadCountsAsync(businessId, userId);\n            return Ok(counts);\n        }\n    }\n}\n\n//using Microsoft.AspNetCore.Mvc;\n//using System;\n//using System.Threading.Tasks;\n//using xbytechat.api.Features.Inbox.DTOs;\n//using xbytechat.api.Features.Inbox.Services;\n//using xbytechat.api.Helpers;\n//using Microsoft.AspNetCore.Authorization;\n//using xbytechat.api.Shared;\n//using Microsoft.AspNetCore.SignalR;\n//using xbytechat.api.Features.Inbox.Hubs;\n//namespace xbytechat.api.Features.Inbox.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/inbox\")]\n//    public class InboxController : ControllerBase\n//    {\n//        private readonly IInboxService _inboxService;\n//        private readonly IHubContext<InboxHub> _hubContext; // ‚úÖ for SignalR push\n//        private readonly IUnreadCountService _unreadCountService;\n//        public InboxController(IInboxService inboxService, IHubContext<InboxHub> hubContext, IUnreadCountService unreadCountService)\n//        {\n//            _inboxService = inboxService;\n//            _hubContext = hubContext;\n//            _unreadCountService = unreadCountService;   \n//        }\n\n//        /// <summary>\n//        /// Send a new message from UI or system.\n//        /// </summary>\n//        [HttpPost(\"send\")]\n//        public async Task<IActionResult> SendMessage([FromBody] InboxMessageDto dto)\n//        {\n//            if (dto == null || string.IsNullOrWhiteSpace(dto.MessageBody))\n//                return BadRequest(\"Message content is required.\");\n\n//            var result = await _inboxService.SaveOutgoingMessageAsync(dto);\n//            return Ok(result);\n//        }\n\n//        /// <summary>\n//        /// Receive a message from external source (e.g., WhatsApp webhook).\n//        /// </summary>\n//        [HttpPost(\"receive\")]\n//        public async Task<IActionResult> ReceiveMessage([FromBody] InboxMessageDto dto)\n//        {\n//            if (dto == null || string.IsNullOrWhiteSpace(dto.MessageBody))\n//                return BadRequest(\"Incoming message content is required.\");\n\n//            var result = await _inboxService.SaveIncomingMessageAsync(dto);\n\n//            // ‚úÖ Also broadcast in real-time to clients in this business group\n//            var groupName = $\"business_{dto.BusinessId}\";\n//            await _hubContext.Clients.Group(groupName).SendAsync(\"ReceiveInboxMessage\", new\n//            {\n//                contactId = dto.ContactId,\n//                messageContent = dto.MessageBody,  // ‚úÖ aligned with frontend\n//                from = dto.RecipientPhone,\n//                status = \"Delivered\",\n//                sentAt = DateTime.UtcNow,\n//                isIncoming = true\n//            });\n\n//            return Ok(result);\n//        }\n\n//        /// <summary>\n//        /// Fetch message history between agent and customer using business token + contactId.\n//        /// </summary>\n//        [HttpGet(\"messages\")]\n//        public async Task<IActionResult> GetMessagesByContact([FromQuery] Guid contactId)\n//        {\n//            if (contactId == Guid.Empty)\n//                return BadRequest(\"ContactId is required.\");\n\n//            var businessId = User.GetBusinessId();\n//            var messages = await _inboxService.GetMessagesByContactAsync(businessId, contactId);\n//            return Ok(messages);\n//        }\n\n//        [HttpGet(\"conversation\")]\n//        public async Task<IActionResult> GetConversation(\n//            [FromQuery] Guid businessId,\n//            [FromQuery] string userPhone,\n//            [FromQuery] string contactPhone)\n//        {\n//            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(userPhone) || string.IsNullOrWhiteSpace(contactPhone))\n//                return BadRequest(\"Invalid input.\");\n\n//            var messages = await _inboxService.GetConversationAsync(businessId, userPhone, contactPhone);\n//            return Ok(messages);\n//        }\n\n//        [HttpPost(\"mark-read\")]\n//        public async Task<IActionResult> MarkMessagesAsRead([FromQuery] Guid contactId)\n//        {\n//            if (contactId == Guid.Empty)\n//                return BadRequest(\"ContactId is required.\");\n\n//            var businessId = User.GetBusinessId();\n//            await _inboxService.MarkMessagesAsReadAsync(businessId, contactId);\n//            return Ok();\n//        }\n\n\n//        [HttpGet(\"unread-counts\")]\n//        public async Task<IActionResult> GetUnreadCounts()\n//        {\n//            var businessId = User.GetBusinessId();\n//            var userId = User.GetUserId();\n\n//            if (businessId == null || userId == null)\n//                return Unauthorized();\n\n//            var counts = await _unreadCountService.GetUnreadCountsAsync(\n//                businessId, userId);\n\n//            return Ok(counts);\n//        }\n//    }\n//}\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Controllers/QuickRepliesController.cs",
      "sha256": "af36e1fce52678fc893c61ffb94a31ad834c0b827a9d210433a6836fbad241fe",
      "language": "csharp",
      "size": 3632,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Helpers; // for User.GetBusinessId(), GetUserId()\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Inbox.Controllers\n{\n    [Authorize]\n    [ApiController]\n    [Route(\"api/quick-replies\")]\n    public class QuickRepliesController : ControllerBase\n    {\n        private readonly IQuickReplyService _service;\n\n        public QuickRepliesController(IQuickReplyService service) => _service = service;\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll([FromQuery] string? q = null,\n            [FromQuery] string scope = \"all\")\n        {\n            var businessId = User.GetBusinessId();\n            var userId = User.GetUserId();\n\n            if (businessId == null || userId == null) return Unauthorized();\n\n            bool includeBusiness = scope is \"all\" or \"business\";\n            bool includePersonal = scope is \"all\" or \"personal\";\n\n            var list = await _service.GetAllAsync(businessId, userId, q, includeBusiness, includePersonal);\n            return Ok(list);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Create([FromBody] QuickReplyCreateDto dto)\n        {\n            var businessId = User.GetBusinessId();\n            var userId = User.GetUserId();\n            var actor = User.Identity?.Name ?? userId.ToString() ?? \"system\";\n\n            if (businessId == null || userId == null) return Unauthorized();\n\n            Log.Information(\"Create QuickReply requested by {@Actor}\", actor);\n            var result = await _service.CreateAsync(businessId, userId, actor, dto);\n            return Ok(result);\n        }\n\n        [HttpPut(\"{id:guid}\")]\n        public async Task<IActionResult> Update([FromRoute] Guid id, [FromBody] QuickReplyUpdateDto dto)\n        {\n            var businessId = User.GetBusinessId();\n            var userId = User.GetUserId();\n            var actor = User.Identity?.Name ?? userId.ToString() ?? \"system\";\n\n            if (businessId == null || userId == null) return Unauthorized();\n\n            Log.Information(\"Update QuickReply {@QuickReplyId} by {@Actor}\", id, actor);\n            var result = await _service.UpdateAsync(businessId, userId, actor, id, dto);\n            return Ok(result);\n        }\n\n        [HttpPatch(\"{id:guid}/toggle\")]\n        public async Task<IActionResult> Toggle([FromRoute] Guid id, [FromQuery] bool active = true)\n        {\n            var businessId = User.GetBusinessId();\n            var userId = User.GetUserId();\n            var actor = User.Identity?.Name ?? userId.ToString() ?? \"system\";\n\n            if (businessId == null || userId == null) return Unauthorized();\n\n            Log.Information(\"Toggle QuickReply {@QuickReplyId} -> {Active} by {@Actor}\", id, active, actor);\n            var result = await _service.ToggleActiveAsync(businessId, userId, actor, id, active);\n            return Ok(result);\n        }\n\n        [HttpDelete(\"{id:guid}\")]\n        public async Task<IActionResult> Delete([FromRoute] Guid id)\n        {\n            var businessId = User.GetBusinessId();\n            var userId = User.GetUserId();\n            var actor = User.Identity?.Name ?? userId.ToString() ?? \"system\";\n\n            if (businessId == null || userId == null) return Unauthorized();\n\n            Log.Information(\"Delete QuickReply {@QuickReplyId} by {@Actor}\", id, actor);\n            var result = await _service.DeleteAsync(businessId, userId, actor, id);\n            return Ok(result);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/InboxMessageDto.cs",
      "sha256": "aef9beda43a0dc4f1c619514c3289f6c68a6daf10fe5cdd46ad13c474be29c0b",
      "language": "csharp",
      "size": 881,
      "content": "// üìÑ File: Features/Inbox/DTOs/InboxMessageDto.cs\nusing System;\n\nnamespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class InboxMessageDto\n    {\n        public Guid BusinessId { get; set; }\n        public string RecipientPhone { get; set; }\n        public string MessageBody { get; set; }\n        public Guid? ContactId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }       // üÜï To show in chat bubble\n        public string? RenderedBody { get; set; }\n\n        public bool IsIncoming { get; set; }            // üÜï Needed for bubble side\n        public string Status { get; set; }              // üÜï For message ticks\n        public DateTime SentAt { get; set; }            // üÜï For timestamp\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/QuickReplyDtos.cs",
      "sha256": "90ec17a9a8c369db09ac8c28b8296c766c31ea78badd34e53397522a8bc08e00",
      "language": "csharp",
      "size": 1460,
      "content": "using System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.Inbox.Models;\n\nnamespace xbytechat.api.Features.Inbox.DTOs\n{\n    public sealed class QuickReplyDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid? OwnerUserId { get; set; }\n        public QuickReplyScope Scope { get; set; }\n        public string Title { get; set; } = string.Empty;\n        public string Body { get; set; } = string.Empty;\n        public string? TagsCsv { get; set; }\n        public string? Language { get; set; }\n        public bool IsActive { get; set; }\n        public DateTime UpdatedAt { get; set; }\n    }\n\n    public sealed class QuickReplyCreateDto\n    {\n        [Required, MaxLength(120)] public string Title { get; set; } = string.Empty;\n        [Required] public string Body { get; set; } = string.Empty;\n        [MaxLength(240)] public string? TagsCsv { get; set; }\n        [MaxLength(8)] public string? Language { get; set; }\n        public QuickReplyScope Scope { get; set; } = QuickReplyScope.Personal;\n    }\n\n    public sealed class QuickReplyUpdateDto\n    {\n        [Required, MaxLength(120)] public string Title { get; set; } = string.Empty;\n        [Required] public string Body { get; set; } = string.Empty;\n        [MaxLength(240)] public string? TagsCsv { get; set; }\n        [MaxLength(8)] public string? Language { get; set; }\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/SendInboxMessageDto.cs",
      "sha256": "1ad0e0e61748e9f9e1fab32e1fe533c57a6c8d586694e55aa5b531359804de90",
      "language": "csharp",
      "size": 462,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.Inbox.DTOs\n{\n    /// <summary>\n    /// DTO sent from frontend when a user sends a new message.\n    /// </summary>\n    public class SendInboxMessageDto\n    {\n        [Required]\n        public Guid ContactId { get; set; }\n\n        [Required]\n        public string MessageBody { get; set; }\n\n        public string? MediaUrl { get; set; } // Optional image or file\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/SendMessageInputDto.cs",
      "sha256": "3c76bd2b5ce839064134b72aa2114c14c73a98109c680671f5e7c463867f221a",
      "language": "csharp",
      "size": 249,
      "content": "namespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class SendMessageInputDto\n    {\n        public Guid ContactId { get; set; } // üîÅ REMOVE the \"?\" (nullable) unless needed\n        public string Message { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/TextOnlyMessageSendDto.cs",
      "sha256": "2d322145a5e6410decb150b108c7d74a656201d9be027b99b02d1c261b4ed4fc",
      "language": "csharp",
      "size": 247,
      "content": "namespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class TextOnlyMessageSendDto\n    {\n        public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TextContent { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Hubs/InboxHub.cs",
      "sha256": "aa347668506aecb58c141c9f226e810bc449891a2ea9fbd75d7611279ac3e716",
      "language": "csharp",
      "size": 12833,
      "content": "// üìÑ xbytechat.api/Features/Inbox/InboxHub.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Models;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Inbox.Models;\nusing xbytechat.api.Features.Inbox.Services;\nusing System;\nusing System.Linq;\n\nnamespace xbytechat.api.Features.Inbox.Hubs\n{\n    [Authorize]\n    public class InboxHub : Hub\n    {\n        private readonly AppDbContext _db;\n        private readonly IMessageEngineService _messageService;\n        private readonly IUnreadCountService _unreadCountService;\n\n        public InboxHub(AppDbContext db, IMessageEngineService messageService, IUnreadCountService unreadCountService)\n        {\n            _db = db;\n            _messageService = messageService;\n            _unreadCountService = unreadCountService;\n        }\n\n        public override async Task OnConnectedAsync()\n        {\n            var businessId = Context.User.GetBusinessId(); // non-nullable Guid in your codebase\n\n            if (businessId == Guid.Empty)\n            {\n                Console.WriteLine(\"‚ùå InboxHub connect: missing BusinessId claim, skipping group join.\");\n                await base.OnConnectedAsync();\n                return;\n            }\n\n            var groupName = $\"business_{businessId}\";\n            await Groups.AddToGroupAsync(Context.ConnectionId, groupName);\n            Console.WriteLine($\"‚úÖ Connected to group: {groupName}\");\n\n            await base.OnConnectedAsync();\n        }\n\n        public override async Task OnDisconnectedAsync(Exception? exception)\n        {\n            var businessId = Context.User.GetBusinessId();\n            if (businessId != Guid.Empty)\n            {\n                var groupName = $\"business_{businessId}\";\n                try { await Groups.RemoveFromGroupAsync(Context.ConnectionId, groupName); } catch { /* no-op */ }\n                Console.WriteLine($\"‚ö™ Disconnected from group: {groupName} (conn: {Context.ConnectionId})\");\n            }\n\n            await base.OnDisconnectedAsync(exception);\n        }\n\n        public async Task SendMessageToContact(SendMessageInputDto dto)\n        {\n            Console.WriteLine(\"üì© Raw DTO payload:\");\n            Console.WriteLine($\"ContactId: {dto.ContactId}, Message: {dto.Message}\");\n\n            // Guid is non-nullable ‚Üí compare to Guid.Empty\n            if (dto.ContactId == Guid.Empty || string.IsNullOrWhiteSpace(dto.Message))\n            {\n                Console.WriteLine(\"‚ùå Invalid contact or empty message.\");\n                return;\n            }\n\n            var businessId = Context.User.GetBusinessId();\n            var userId = Context.User.GetUserId();\n\n            if (businessId == Guid.Empty || userId == Guid.Empty)\n            {\n                Console.WriteLine(\"‚ùå Missing BusinessId/UserId in hub context.\");\n                return;\n            }\n\n            // ‚úÖ Lookup recipient phone number from Contact table\n            var contact = await _db.Contacts\n                .Where(c => c.BusinessId == businessId && c.Id == dto.ContactId)\n                .FirstOrDefaultAsync();\n\n            if (contact == null || string.IsNullOrWhiteSpace(contact.PhoneNumber))\n            {\n                Console.WriteLine($\"‚ùå Contact not found or missing phone number. ContactId: {dto.ContactId}\");\n                await Clients.Caller.SendAsync(\"ReceiveInboxMessage\", new\n                {\n                    contactId = dto.ContactId,\n                    messageContent = dto.Message,   // aligned with frontend\n                    from = userId,\n                    status = \"Failed\",\n                    error = \"Invalid contact\"\n                });\n                return;\n            }\n\n            // ‚úÖ Prepare DTO for WhatsApp sending\n            var sendDto = new TextMessageSendDto\n            {\n                BusinessId = businessId,\n                ContactId = dto.ContactId,\n                RecipientNumber = contact.PhoneNumber,\n                TextContent = dto.Message\n            };\n\n            // üöÄ Send via WhatsApp API and save to MessageLogs\n            var result = await _messageService.SendTextDirectAsync(sendDto);\n\n            // ‚úÖ Unified payload (outbound)\n            var inboxMessage = new\n            {\n                contactId = dto.ContactId,\n                messageContent = dto.Message,\n                from = userId,\n                status = result.Success ? \"Sent\" : \"Failed\",\n                sentAt = DateTime.UtcNow,\n                logId = result.LogId,\n                senderId = userId,\n                isIncoming = false\n            };\n\n            // Sender\n            await Clients.Caller.SendAsync(\"ReceiveInboxMessage\", inboxMessage);\n\n            // Others in business\n            var groupName = $\"business_{businessId}\";\n            await Clients.GroupExcept(groupName, Context.ConnectionId)\n                .SendAsync(\"ReceiveInboxMessage\", inboxMessage);\n        }\n\n        public async Task MarkAsRead(Guid contactId)\n        {\n            Console.WriteLine($\"üü¢ MarkAsRead triggered for ContactId: {contactId}\");\n            var userId = Context.User.GetUserId();\n            var businessId = Context.User.GetBusinessId();\n\n            if (userId == Guid.Empty || businessId == Guid.Empty) return;\n\n            var now = DateTime.UtcNow;\n\n            // Upsert ContactRead\n            var readEntry = await _db.ContactReads\n                .FirstOrDefaultAsync(r => r.ContactId == contactId && r.UserId == userId);\n\n            if (readEntry == null)\n            {\n                _db.ContactReads.Add(new ContactRead\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = contactId,\n                    UserId = userId,\n                    LastReadAt = now\n                });\n            }\n            else\n            {\n                readEntry.LastReadAt = now;\n            }\n\n            await _db.SaveChangesAsync();\n\n            // Per-agent unread snapshot\n            var unreadCounts = await _unreadCountService.GetUnreadCountsAsync(businessId, userId);\n\n            var groupName = $\"business_{businessId}\";\n\n            // Send the caller their map‚Ä¶\n            await Clients.User(userId.ToString())\n                .SendAsync(\"UnreadCountChanged\", unreadCounts);\n\n            // ‚Ä¶and signal others to refresh their own\n            await Clients.GroupExcept(groupName, Context.ConnectionId)\n                .SendAsync(\"UnreadCountChanged\", new { refresh = true });\n        }\n    }\n}\n\n\n//// üìÑ xbytechat.api/Features/Inbox/InboxHub.cs\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.SignalR;\n//using xbytechat.api.Features.Inbox.DTOs;\n//using xbytechat.api.Features.MessagesEngine.DTOs;\n//using xbytechat.api.Features.MessagesEngine.Services;\n//using xbytechat.api.Shared;\n//using xbytechat.api.Models;\n//using Microsoft.EntityFrameworkCore;\n//using xbytechat.api.Features.Inbox.Models;\n//using xbytechat.api.Features.Inbox.Services;\n\n//namespace xbytechat.api.Features.Inbox.Hubs\n//{\n//    [Authorize]\n//    public class InboxHub : Hub\n//    {\n//        private readonly AppDbContext _db;\n//        private readonly IMessageEngineService _messageService;\n//        private readonly IUnreadCountService _unreadCountService;\n//        public InboxHub(AppDbContext db, IMessageEngineService messageService, IUnreadCountService unreadCountService)\n//        {\n//            _db = db;\n//            _messageService = messageService;\n//            _unreadCountService = unreadCountService;\n//        }\n\n//        public override async Task OnConnectedAsync()\n//        {\n//            var businessId = Context.User.GetBusinessId();\n//            var groupName = $\"business_{businessId}\";\n\n//            await Groups.AddToGroupAsync(Context.ConnectionId, groupName);\n//            Console.WriteLine($\"‚úÖ Connected to group: {groupName}\");\n\n//            await base.OnConnectedAsync();\n//        }\n\n//        public async Task SendMessageToContact(SendMessageInputDto dto)\n//        {\n//            Console.WriteLine(\"üì© Raw DTO payload:\");\n//            Console.WriteLine($\"ContactId: {dto.ContactId}, Message: {dto.Message}\");\n\n//            if (dto.ContactId == null || string.IsNullOrWhiteSpace(dto.Message))\n//            {\n//                Console.WriteLine(\"‚ùå Invalid contact or empty message.\");\n//                return;\n//            }\n\n//            var businessId = Context.User.GetBusinessId();\n//            var userId = Context.User.GetUserId();\n\n//            // ‚úÖ Lookup recipient phone number from Contact table\n//            var contact = await _db.Contacts\n//                .Where(c => c.BusinessId == businessId && c.Id == dto.ContactId)\n//                .FirstOrDefaultAsync();\n\n//            if (contact == null || string.IsNullOrWhiteSpace(contact.PhoneNumber))\n//            {\n//                Console.WriteLine($\"‚ùå Contact not found or missing phone number. ContactId: {dto.ContactId}\");\n//                await Clients.Caller.SendAsync(\"ReceiveInboxMessage\", new\n//                {\n//                    contactId = dto.ContactId,\n//                    messageContent = dto.Message,   // ‚úÖ aligned with frontend\n//                    from = userId,\n//                    status = \"Failed\",\n//                    error = \"Invalid contact\"\n//                });\n//                return;\n//            }\n\n//            // ‚úÖ Prepare DTO for WhatsApp sending\n//            var sendDto = new TextMessageSendDto\n//            {\n//                BusinessId = businessId,\n//                ContactId = dto.ContactId,\n//                RecipientNumber = contact.PhoneNumber,\n//                TextContent = dto.Message\n//            };\n\n//            // üöÄ Send via WhatsApp API and save to MessageLogs\n//            var result = await _messageService.SendTextDirectAsync(sendDto);\n\n//            // ‚úÖ Construct unified message payload\n//            var inboxMessage = new\n//            {\n//                contactId = dto.ContactId,\n//                messageContent = dto.Message,     // ‚úÖ aligned with frontend\n//                from = userId,\n//                status = result.Success ? \"Sent\" : \"Failed\",\n//                sentAt = DateTime.UtcNow,\n//                logId = result.LogId,\n//                senderId = userId,\n//                isIncoming = false\n//            };\n\n//            // ‚úÖ Notify sender only\n//            await Clients.Caller.SendAsync(\"ReceiveInboxMessage\", inboxMessage);\n\n//            // ‚úÖ Notify others in group (for unread update)\n//            var groupName = $\"business_{businessId}\";\n//            await Clients.GroupExcept(groupName, Context.ConnectionId)\n//                .SendAsync(\"ReceiveInboxMessage\", inboxMessage);\n//        }\n\n\n//        public async Task MarkAsRead(Guid contactId)\n//        {\n//            Console.WriteLine($\"üü¢ MarkAsRead triggered for ContactId: {contactId}\");\n//            var userId = Context.User?.GetUserId();\n//            var businessId = Context.User?.GetBusinessId();\n\n//            if (userId == null || businessId == null || businessId == Guid.Empty)\n//                return;\n\n//            var userGuid = userId.Value;\n//            var businessGuid = businessId.Value;\n//            var now = DateTime.UtcNow;\n\n//            // ‚úÖ Insert or Update ContactRead\n//            var readEntry = await _db.ContactReads\n//                .FirstOrDefaultAsync(r => r.ContactId == contactId && r.UserId == userGuid);\n\n//            if (readEntry == null)\n//            {\n//                _db.ContactReads.Add(new ContactRead\n//                {\n//                    Id = Guid.NewGuid(),\n//                    BusinessId = businessGuid,\n//                    ContactId = contactId,\n//                    UserId = userGuid,\n//                    LastReadAt = now\n//                });\n//            }\n//            else\n//            {\n//                readEntry.LastReadAt = now;\n//            }\n\n//            await _db.SaveChangesAsync();\n\n//            // ‚úÖ Use service for unread calculation\n//            var unreadCounts = await _unreadCountService.GetUnreadCountsAsync(businessGuid, userGuid);\n\n//            // ‚úÖ Broadcast to user and group\n//            var groupName = $\"business_{businessGuid}\";\n//            await Clients.User(userGuid.ToString())\n//                .SendAsync(\"UnreadCountChanged\", unreadCounts);\n\n//            await Clients.GroupExcept(groupName, Context.ConnectionId)\n//                .SendAsync(\"UnreadCountChanged\", unreadCounts);\n//        }\n//    }\n//}\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Models/ChatSessionState.cs",
      "sha256": "fa6184f30e1715455ee5b84ae75264c5cc2d46ed4f1721014141ed9036dfda64",
      "language": "csharp",
      "size": 500,
      "content": "namespace xbytechat.api.Features.Inbox.Models\n{\n    public class ChatSessionState\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string Mode { get; set; } = \"automation\"; // values: \"automation\" | \"agent\"\n        public DateTime LastUpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // Optional: track who switched the mode\n        public string? UpdatedBy { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Models/ContactRead.cs",
      "sha256": "aa4dd9980bc6485cf1c4981bf7dfff84f32dcfbacc6c9dbc3be4ba0429c065c6",
      "language": "csharp",
      "size": 474,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Inbox.Models\n{\n    public class ContactRead\n    {\n        public Guid Id { get; set; }\n\n        // üîó FK to Contact\n        public Guid ContactId { get; set; }\n\n        // üîó FK to User (Agent)\n        public Guid UserId { get; set; }\n\n        // üìÖ Last time this agent opened this contact's chat\n        public DateTime LastReadAt { get; set; } = DateTime.UtcNow;\n\n        public Guid BusinessId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Models/QuickReply.cs",
      "sha256": "8b5cba0c3d3af40a8abf6fd445648c0671b6fb294489fcae8c2d8b438291e285",
      "language": "csharp",
      "size": 1180,
      "content": "using System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.Inbox.Models\n{\n    public enum QuickReplyScope { Personal = 0, Business = 2 }\n\n    [Table(\"QuickReplies\")]\n    public class QuickReply\n    {\n        [Key] public Guid Id { get; set; }\n        [Required] public Guid BusinessId { get; set; }\n        public Guid? OwnerUserId { get; set; }                // null for Business scope\n\n        [Required, MaxLength(120)] public string Title { get; set; } = string.Empty;\n        [Required] public string Body { get; set; } = string.Empty;\n\n        [MaxLength(240)] public string? TagsCsv { get; set; }\n        [MaxLength(8)] public string? Language { get; set; }   // e.g. \"en\", \"hi\"\n\n        public QuickReplyScope Scope { get; set; } = QuickReplyScope.Personal;\n        public bool IsActive { get; set; } = true;\n        public bool IsDeleted { get; set; } = false;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n        public string? CreatedBy { get; set; }\n        public string? UpdatedBy { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Repositories/IInboxRepository.cs",
      "sha256": "d057575abdee0fe95972b5dcfafa6e7637884f526bb108c43b06bbb1b2d2a5bd",
      "language": "csharp",
      "size": 839,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Repositories\n{\n    public interface IInboxRepository\n    {\n        Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50);\n        Task<MessageLog?> GetLastMessageAsync(Guid businessId, string userPhone, string contactPhone);\n        Task AddMessageAsync(MessageLog message);\n        Task SaveChangesAsync();\n        Task<List<MessageLog>> GetMessagesByContactIdAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId);\n        Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Repositories/InboxRepository.cs",
      "sha256": "06153117fc580e3c5239560868ec16dd5f41d963a159eec8ad96f569afa9bb29",
      "language": "csharp",
      "size": 4226,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Repositories\n{\n    public class InboxRepository : IInboxRepository\n    {\n        private readonly AppDbContext _context;\n\n        public InboxRepository(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            ((m.RecipientNumber == contactPhone && m.IsIncoming == false) ||\n                             (m.RecipientNumber == userPhone && m.IsIncoming == true)))\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(limit)\n                .ToListAsync();\n        }\n\n        public async Task<MessageLog?> GetLastMessageAsync(Guid businessId, string userPhone, string contactPhone)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            ((m.RecipientNumber == contactPhone && m.IsIncoming == false) ||\n                             (m.RecipientNumber == userPhone && m.IsIncoming == true)))\n                .OrderByDescending(m => m.CreatedAt)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task AddMessageAsync(MessageLog message)\n        {\n            await _context.MessageLogs.AddAsync(message);\n        }\n\n        public async Task SaveChangesAsync()\n        {\n            await _context.SaveChangesAsync();\n        }\n        public async Task<List<MessageLog>> GetMessagesByContactIdAsync(Guid businessId, Guid contactId)\n        {\n            return await _context.MessageLogs\n                 .Include(m => m.SourceCampaign)\n                .Where(m => m.BusinessId == businessId && m.ContactId == contactId)\n                .OrderBy(m => m.CreatedAt)\n                .ToListAsync();\n        }\n\n        public async Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            m.IsIncoming &&\n                            m.Status != \"Read\" &&\n                            m.ContactId != null) // ‚úÖ ensure not null\n                .GroupBy(m => m.ContactId!.Value) // ‚úÖ safe cast to Guid\n                .Select(g => new { ContactId = g.Key, Count = g.Count() })\n                .ToDictionaryAsync(x => x.ContactId, x => x.Count);\n        }\n        public async Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId)\n        {\n            var unreadMessages = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            m.ContactId == contactId &&\n                            m.IsIncoming &&\n                            m.Status != \"Read\")\n                .ToListAsync(); \n            foreach (var msg in unreadMessages)\n                msg.Status = \"Read\";\n\n            await _context.SaveChangesAsync();\n        }\n        public async Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId)\n        {\n                    var contactReads = await _context.ContactReads\n             .Where(r => r.UserId == userId)\n             .ToDictionaryAsync(r => r.ContactId, r => r.LastReadAt);\n\n            // üü¢ Fetch from DB first (no logic yet)\n            var allMessages = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId && m.IsIncoming && m.ContactId != null)\n                .ToListAsync();\n\n            // üß† Now calculate in memory\n            var unreadCounts = allMessages\n                .GroupBy(m => m.ContactId!.Value)\n                .ToDictionary(\n                    g => g.Key,\n                    g => g.Count(m =>\n                        !contactReads.ContainsKey(g.Key) ||\n                        (m.SentAt ?? m.CreatedAt) > contactReads[g.Key])\n                );\n\n\n            return unreadCounts;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/AgentAssignmentService.cs",
      "sha256": "de9062b213ba63cb8695f407ede5c9e8d52a589e0dc1c7a4c5c79fd243389e4e",
      "language": "csharp",
      "size": 1104,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class AgentAssignmentService : IAgentAssignmentService\n    {\n        private readonly ILogger<AgentAssignmentService> _logger;\n\n        public AgentAssignmentService(ILogger<AgentAssignmentService> logger)\n        {\n            _logger = logger;\n        }\n\n        public Task<bool> IsAgentAvailableAsync(Guid businessId)\n        {\n            // üîß TODO: Replace with real logic based on your agent pool\n            _logger.LogInformation(\"Checking if agent is available for business {BusinessId}\", businessId);\n            return Task.FromResult(true); // Assume always available for MVP\n        }\n\n        public Task AssignAgentToContactAsync(Guid businessId, Guid contactId)\n        {\n            // üîß TODO: Save agent-contact assignment to DB or notify a human agent\n            _logger.LogInformation(\"Assigning agent to contact {ContactId} for business {BusinessId}\", contactId, businessId);\n            return Task.CompletedTask;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/ChatSessionStateService.cs",
      "sha256": "5c6672bd07d87501ca9d46e38085cbec03455bae6cc943c8b8df505a7c73808e",
      "language": "csharp",
      "size": 2964,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.Inbox.Models;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class ChatSessionStateService : IChatSessionStateService\n    {\n        private readonly AppDbContext _db;\n\n        public ChatSessionStateService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // ‚úÖ Returns current chat mode: \"agent\" or \"auto\"\n        public async Task<string> GetChatModeAsync(Guid businessId, Guid contactId)\n        {\n            var session = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            return session?.Mode ?? \"auto\"; // Default to auto\n        }\n\n        // ‚úÖ Switches to agent mode\n        public async Task SwitchToAgentModeAsync(Guid businessId, Guid contactId)\n        {\n            await UpsertChatModeAsync(businessId, contactId, \"agent\");\n        }\n\n        // ‚úÖ Switches to automation mode\n        public async Task SwitchToAutomationModeAsync(Guid businessId, Guid contactId)\n        {\n            await UpsertChatModeAsync(businessId, contactId, \"auto\");\n        }\n\n        // ‚úÖ Shared logic to insert or update session state\n        private async Task UpsertChatModeAsync(Guid businessId, Guid contactId, string mode)\n        {\n            var existing = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            if (existing != null)\n            {\n                existing.Mode = mode;\n                existing.LastUpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                _db.ChatSessionStates.Add(new ChatSessionState\n                {\n                    BusinessId = businessId,\n                    ContactId = contactId,\n                    Mode = mode,\n                    LastUpdatedAt = DateTime.UtcNow\n                });\n            }\n\n            await _db.SaveChangesAsync();\n        }\n\n        public async Task SetChatModeAsync(Guid businessId, Guid contactId, string mode)\n        {\n            var state = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.ContactId == contactId);\n\n            if (state == null)\n            {\n                // Insert new if not exists\n                state = new ChatSessionState\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = contactId,\n                    Mode = mode,\n                    LastUpdatedAt = DateTime.UtcNow\n                };\n                _db.ChatSessionStates.Add(state);\n            }\n            else\n            {\n                state.Mode = mode;\n                state.LastUpdatedAt = DateTime.UtcNow;\n            }\n\n            await _db.SaveChangesAsync();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IAgentAssignmentService.cs",
      "sha256": "1eae6f670d61efc4cd6f430a93cf7188c26a6d521ae49cd50ab926aa5bc027ee",
      "language": "csharp",
      "size": 286,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IAgentAssignmentService\n    {\n        Task<bool> IsAgentAvailableAsync(Guid businessId);\n        Task AssignAgentToContactAsync(Guid businessId, Guid contactId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IChatSessionStateService.cs",
      "sha256": "3ade6df9341ebca2e5a478331e57315273317bc803a529a4e068cccc323f1693",
      "language": "csharp",
      "size": 404,
      "content": "namespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IChatSessionStateService\n    {\n        Task<string> GetChatModeAsync(Guid businessId, Guid contactId);\n        Task SwitchToAgentModeAsync(Guid businessId, Guid contactId);\n        Task SwitchToAutomationModeAsync(Guid businessId, Guid contactId);\n        Task SetChatModeAsync(Guid businessId, Guid contactId, string mode);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IInboxService.cs",
      "sha256": "58b2b14fb055263d0f08348900a55c5cbd62c16609e1b4ba082beb34a84efc49",
      "language": "csharp",
      "size": 885,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IInboxService\n    {\n        Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50);\n        Task<MessageLog> SaveIncomingMessageAsync(InboxMessageDto dto);\n        Task<MessageLog> SaveOutgoingMessageAsync(InboxMessageDto dto);\n        Task<List<MessageLogDto>> GetMessagesByContactAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId);\n        Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId);\n\n        Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/InboxService.cs",
      "sha256": "8bbfdb66619466ec1c134351db9fc8b8fd32a8d30a45da7c3d142e41f17ae8f7",
      "language": "csharp",
      "size": 3941,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.Inbox.Repositories;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class InboxService : IInboxService\n    {\n        private readonly IInboxRepository _repository;\n\n        public InboxService(IInboxRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50)\n        {\n            return await _repository.GetConversationAsync(businessId, userPhone, contactPhone, limit);\n        }\n\n        public async Task<MessageLog> SaveIncomingMessageAsync(InboxMessageDto dto)\n        {\n            var message = new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                RecipientNumber = dto.RecipientPhone,\n                MessageContent = dto.MessageBody,\n                IsIncoming = true,\n                CreatedAt = DateTime.UtcNow,\n                ContactId = dto.ContactId,\n                CTAFlowStepId = dto.CTAFlowStepId,\n                CTAFlowConfigId = dto.CTAFlowConfigId,\n                CampaignId = dto.CampaignId,\n                RenderedBody = dto.RenderedBody\n            };\n\n            await _repository.AddMessageAsync(message);\n            await _repository.SaveChangesAsync();\n\n            return message;\n        }\n\n        public async Task<MessageLog> SaveOutgoingMessageAsync(InboxMessageDto dto)\n        {\n            var message = new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                RecipientNumber = dto.RecipientPhone,\n                MessageContent = dto.MessageBody,\n                IsIncoming = false,\n                CreatedAt = DateTime.UtcNow,\n                ContactId = dto.ContactId,\n                CTAFlowStepId = dto.CTAFlowStepId,\n                CTAFlowConfigId = dto.CTAFlowConfigId,\n                CampaignId = dto.CampaignId,\n                RenderedBody = dto.RenderedBody\n            };\n\n            await _repository.AddMessageAsync(message);\n            await _repository.SaveChangesAsync();\n\n            return message;\n        }\n   \n        public async Task<List<MessageLogDto>> GetMessagesByContactAsync(Guid businessId, Guid contactId)\n        {\n            var messages = await _repository.GetMessagesByContactIdAsync(businessId, contactId);\n\n            return messages.Select(m => new MessageLogDto\n            {\n                Id = m.Id,\n                ContactId = m.ContactId,\n                RecipientNumber = m.RecipientNumber, // ‚úÖ optional but helpful\n                MessageContent = m.MessageContent,\n                CreatedAt = m.CreatedAt,\n                IsIncoming = m.IsIncoming,\n                RenderedBody = m.RenderedBody,\n                CampaignId = m.CampaignId,\n                CampaignName = m.SourceCampaign?.Name, // ‚úÖ ‚úÖ This is crucial\n                CTAFlowConfigId = m.CTAFlowConfigId,\n                CTAFlowStepId = m.CTAFlowStepId\n            }).ToList();\n        }\n\n\n        public async Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId)\n        {\n            return await _repository.GetUnreadMessageCountsAsync(businessId);\n        }\n        public async Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId)\n        {\n            await _repository.MarkMessagesAsReadAsync(businessId, contactId);\n        }\n        public async Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId)\n        {\n            return await _repository.GetUnreadCountsForUserAsync(businessId, userId);\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IQuickReplyService.cs",
      "sha256": "531cc91cab752357d88cfa2483ab059e7a9ffdcfe4507a3105595cc17e33c1c0",
      "language": "csharp",
      "size": 816,
      "content": "using xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IQuickReplyService\n    {\n        Task<List<QuickReplyDto>> GetAllAsync(Guid businessId, Guid userId,\n            string? search = null, bool includeBusiness = true, bool includePersonal = true);\n\n        Task<ResponseResult> CreateAsync(Guid businessId, Guid userId, string actor, QuickReplyCreateDto dto);\n        Task<ResponseResult> UpdateAsync(Guid businessId, Guid userId, string actor, Guid id, QuickReplyUpdateDto dto);\n        Task<ResponseResult> ToggleActiveAsync(Guid businessId, Guid userId, string actor, Guid id, bool isActive);\n        Task<ResponseResult> DeleteAsync(Guid businessId, Guid userId, string actor, Guid id);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IUnreadCountService.cs",
      "sha256": "a7e51e22be544e5387038cd46027d2a58f968fbe1db1a3d792cde75ac9bfd4de",
      "language": "csharp",
      "size": 272,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IUnreadCountService\n    {\n        Task<Dictionary<Guid, int>> GetUnreadCountsAsync(Guid businessId, Guid userId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/QuickReplyService.cs",
      "sha256": "594274585168680028dd399dbf8b94c4efa5438224541ec8ee1140c4a2482253",
      "language": "csharp",
      "size": 8104,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.Inbox.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class QuickReplyService : IQuickReplyService\n    {\n        private readonly AppDbContext _db;\n\n        public QuickReplyService(AppDbContext db) => _db = db;\n\n        public async Task<List<QuickReplyDto>> GetAllAsync(Guid businessId, Guid userId,\n            string? search = null, bool includeBusiness = true, bool includePersonal = true)\n        {\n            var q = _db.Set<QuickReply>()\n                .AsNoTracking()\n                .Where(qr => qr.BusinessId == businessId && !qr.IsDeleted && qr.IsActive);\n\n            if (!includeBusiness) q = q.Where(x => x.Scope == QuickReplyScope.Personal);\n            if (!includePersonal) q = q.Where(x => x.Scope == QuickReplyScope.Business);\n            if (includePersonal && includeBusiness == false)\n                q = q.Where(x => x.OwnerUserId == userId || x.Scope == QuickReplyScope.Business);\n            else if (includePersonal)\n                q = q.Where(x => x.Scope == QuickReplyScope.Business || x.OwnerUserId == userId);\n\n            if (!string.IsNullOrWhiteSpace(search))\n            {\n                var s = search.Trim().ToLower();\n                q = q.Where(x =>\n                    x.Title.ToLower().Contains(s) ||\n                    x.Body.ToLower().Contains(s) ||\n                    (x.TagsCsv != null && x.TagsCsv.ToLower().Contains(s)));\n            }\n\n            return await q\n                .OrderByDescending(x => x.Scope)\n                .ThenBy(x => x.Title)\n                .Select(x => new QuickReplyDto\n                {\n                    Id = x.Id,\n                    BusinessId = x.BusinessId,\n                    OwnerUserId = x.OwnerUserId,\n                    Scope = x.Scope,\n                    Title = x.Title,\n                    Body = x.Body,\n                    TagsCsv = x.TagsCsv,\n                    Language = x.Language,\n                    IsActive = x.IsActive,\n                    UpdatedAt = x.UpdatedAt\n                }).ToListAsync();\n        }\n\n        public async Task<ResponseResult> CreateAsync(Guid businessId, Guid userId, string actor, QuickReplyCreateDto dto)\n        {\n            try\n            {\n                var entity = new QuickReply\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    OwnerUserId = dto.Scope == QuickReplyScope.Personal ? userId : null,\n                    Scope = dto.Scope,\n                    Title = dto.Title.Trim(),\n                    Body = dto.Body,\n                    TagsCsv = dto.TagsCsv,\n                    Language = dto.Language,\n                    IsActive = true,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    CreatedBy = actor,\n                    UpdatedBy = actor\n                };\n\n                _db.Add(entity);\n                await _db.SaveChangesAsync();\n\n                Log.Information(\"QuickReply created {@QuickReplyId} for business {@BusinessId} by {@Actor}\",\n                    entity.Id, businessId, actor);\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Quick reply created.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error creating quick reply for business {BusinessId}\", businessId);\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to create quick reply.\", ex.ToString()); // pattern like Campaign. :contentReference[oaicite:3]{index=3}\n            }\n        }\n\n        public async Task<ResponseResult> UpdateAsync(Guid businessId, Guid userId, string actor, Guid id, QuickReplyUpdateDto dto)\n        {\n            try\n            {\n                var entity = await _db.Set<QuickReply>()\n                    .FirstOrDefaultAsync(x => x.Id == id && x.BusinessId == businessId && !x.IsDeleted);\n\n                if (entity == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Quick reply not found.\");\n\n                // Only owner can edit personal; business-scope allowed for now\n                if (entity.Scope == QuickReplyScope.Personal && entity.OwnerUserId != userId)\n                    return ResponseResult.ErrorInfo(\"‚õî You cannot edit another user's personal quick reply.\");\n\n                entity.Title = dto.Title.Trim();\n                entity.Body = dto.Body;\n                entity.TagsCsv = dto.TagsCsv;\n                entity.Language = dto.Language;\n                entity.IsActive = dto.IsActive;\n                entity.UpdatedAt = DateTime.UtcNow;\n                entity.UpdatedBy = actor;\n\n                await _db.SaveChangesAsync();\n\n                Log.Information(\"QuickReply updated {@QuickReplyId} for business {@BusinessId} by {@Actor}\",\n                    id, businessId, actor);\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Quick reply updated.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error updating quick reply {@QuickReplyId} for business {BusinessId}\", id, businessId);\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to update quick reply.\", ex.ToString()); // campaign-style. :contentReference[oaicite:4]{index=4}\n            }\n        }\n\n        public async Task<ResponseResult> ToggleActiveAsync(Guid businessId, Guid userId, string actor, Guid id, bool isActive)\n        {\n            try\n            {\n                var entity = await _db.Set<QuickReply>()\n                    .FirstOrDefaultAsync(x => x.Id == id && x.BusinessId == businessId && !x.IsDeleted);\n\n                if (entity == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Quick reply not found.\");\n\n                if (entity.Scope == QuickReplyScope.Personal && entity.OwnerUserId != userId)\n                    return ResponseResult.ErrorInfo(\"‚õî You cannot modify another user's personal quick reply.\");\n\n                entity.IsActive = isActive;\n                entity.UpdatedAt = DateTime.UtcNow;\n                entity.UpdatedBy = actor;\n                await _db.SaveChangesAsync();\n\n                Log.Information(\"QuickReply toggled {@QuickReplyId} -> {IsActive} by {@Actor}\",\n                    id, isActive, actor);\n\n                return ResponseResult.SuccessInfo(isActive ? \"‚úÖ Enabled.\" : \"‚úÖ Disabled.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error toggling quick reply {@QuickReplyId}\", id);\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to toggle quick reply.\", ex.ToString());\n            }\n        }\n\n        public async Task<ResponseResult> DeleteAsync(Guid businessId, Guid userId, string actor, Guid id)\n        {\n            try\n            {\n                var entity = await _db.Set<QuickReply>()\n                    .FirstOrDefaultAsync(x => x.Id == id && x.BusinessId == businessId && !x.IsDeleted);\n\n                if (entity == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Quick reply not found.\");\n\n                if (entity.Scope == QuickReplyScope.Personal && entity.OwnerUserId != userId)\n                    return ResponseResult.ErrorInfo(\"‚õî You cannot delete another user's personal quick reply.\");\n\n                entity.IsDeleted = true;\n                entity.IsActive = false;\n                entity.UpdatedAt = DateTime.UtcNow;\n                entity.UpdatedBy = actor;\n\n                await _db.SaveChangesAsync();\n\n                Log.Information(\"QuickReply soft-deleted {@QuickReplyId} by {@Actor}\", id, actor);\n                return ResponseResult.SuccessInfo(\"üóëÔ∏è Deleted.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error deleting quick reply {@QuickReplyId}\", id);\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to delete quick reply.\", ex.ToString());\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/UnreadCountService.cs",
      "sha256": "61cccb822d2bb8ea2545681af2caec74ed43ae1710eb3125f22dddf56ce4d7e9",
      "language": "csharp",
      "size": 3014,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class UnreadCountService : IUnreadCountService\n    {\n        private readonly AppDbContext _db;\n\n        public UnreadCountService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<Dictionary<Guid, int>> GetUnreadCountsAsync(Guid businessId, Guid userId)\n        {\n            if (businessId == Guid.Empty || userId == Guid.Empty)\n                return new Dictionary<Guid, int>();\n\n            var userReads = _db.ContactReads.AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.UserId == userId);\n\n            var query = _db.MessageLogs.AsNoTracking()\n                .Where(m => m.BusinessId == businessId && m.IsIncoming && m.ContactId != null)\n                .GroupJoin(\n                    userReads,\n                    m => m.ContactId,\n                    r => r.ContactId,\n                    (m, rj) => new { m, rj }\n                )\n                .SelectMany(x => x.rj.DefaultIfEmpty(), (x, r) => new { x.m, r })\n                .Where(x => x.r == null || (x.m.SentAt ?? x.m.CreatedAt) > x.r.LastReadAt)\n                .GroupBy(x => x.m.ContactId!.Value)\n                .Select(g => new { ContactId = g.Key, Count = g.Count() });\n\n            return await query.ToDictionaryAsync(x => x.ContactId, x => x.Count);\n        }\n    }\n}\n\n\n//using Microsoft.EntityFrameworkCore;\n//using xbytechat.api.Shared;\n//using xbytechat.api.Models;\n\n//namespace xbytechat.api.Features.Inbox.Services\n//{\n//    public class UnreadCountService : IUnreadCountService\n//    {\n//        private readonly AppDbContext _db;\n\n//        public UnreadCountService(AppDbContext db)\n//        {\n//            _db = db;\n//        }\n\n//        public async Task<Dictionary<Guid, int>> GetUnreadCountsAsync(Guid businessId, Guid userId)\n//        {\n//            // ‚úÖ Load all incoming messages for the business\n//            var allMessages = await _db.MessageLogs\n//                .Where(m => m.BusinessId == businessId && m.IsIncoming && m.ContactId != null)\n//                .ToListAsync();\n\n//            // ‚úÖ Load last read times for this user\n//            var contactReads = await _db.ContactReads\n//                .Where(r => r.UserId == userId && r.BusinessId == businessId)\n//                .ToDictionaryAsync(r => r.ContactId, r => r.LastReadAt);\n\n//            // ‚úÖ Compute unread counts in-memory\n//            var unreadCounts = allMessages\n//                .GroupBy(m => m.ContactId!.Value)\n//                .ToDictionary(\n//                    g => g.Key,\n//                    g => g.Count(m =>\n//                        !contactReads.ContainsKey(g.Key) ||\n//                        (m.SentAt ?? m.CreatedAt) > contactReads[g.Key])\n//                );\n\n//            return unreadCounts;\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/SignalR/NameUserIdProvider.cs",
      "sha256": "177581fc6482f75de65f8a7db7a93d17a7d887e148d35eb77ca640d9df0e311f",
      "language": "csharp",
      "size": 336,
      "content": "using Microsoft.AspNetCore.SignalR;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.SignalR\n{\n    public class NameUserIdProvider : IUserIdProvider\n    {\n        public string? GetUserId(HubConnectionContext connection)\n        {\n            return connection.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Controllers/MessageStatusController.cs",
      "sha256": "b0d7d3e99be2a95698a0e358da794c0d0f53a81c7f38846322df111c19fd0fbb",
      "language": "csharp",
      "size": 3213,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessageManagement.Services;\n\nnamespace xbytechat.api.Features.MessageManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/message-status\")]\n    public class MessageStatusController : ControllerBase\n    {\n        private readonly IMessageStatusService _service;\n        private readonly ILogger<MessageStatusController> _logger;\n        private readonly AppDbContext _context;\n        private readonly IConfiguration _config;\n        public MessageStatusController(\n    IMessageStatusService service,\n    ILogger<MessageStatusController> logger,\n    AppDbContext context,\n    IConfiguration config)\n        {\n            _service = service;\n            _logger = logger;\n            _context = context;\n            _config = config;\n        }\n\n        // ‚úÖ STEP 1: Webhook Verification (GET)\n        [HttpGet(\"webhook\")]\n        public IActionResult VerifyWebhook([FromQuery(Name = \"hub.mode\")] string mode,\n                                    [FromQuery(Name = \"hub.verify_token\")] string token,\n                                    [FromQuery(Name = \"hub.challenge\")] string challenge)\n        {\n            //var VERIFY_TOKEN = _config[\"WhatsApp:MetaToken\"]; // ‚úÖ pulled from config\n\n            if (mode == \"subscribe\" && token == \"xbytechat-secret-token\")\n            {\n                _logger.LogInformation(\"‚úÖ Webhook verified.\");\n                return Ok(challenge);\n            }\n\n            _logger.LogWarning(\"‚ùå Webhook verification failed.\");\n            return Forbid();\n        }\n\n\n        // ‚úÖ STEP 2: Webhook Payload (POST)\n        [HttpPost(\"webhook\")]\n        public async Task<IActionResult> ReceiveStatus([FromBody] WebhookStatusDto dto)\n        {\n            if (dto == null || dto.statuses == null || dto.statuses.Count == 0)\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è Invalid webhook payload received.\");\n                return BadRequest(\"Invalid payload\");\n            }\n\n            await _service.LogWebhookStatusAsync(dto);\n            _logger.LogInformation(\"‚úÖ Webhook status processed successfully.\");\n\n            return Ok(new { success = true });\n        }\n\n        // ‚úÖ STEP 3: Frontend UI (GET Logs)\n        [HttpGet]\n        public async Task<IActionResult> GetStatusLogs([FromQuery] Guid businessId)\n        {\n            var logs = await _context.MessageStatusLogs\n                .Where(x => x.BusinessId == businessId)\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(100)\n                .Select(x => new\n                {\n                    x.MessageId,\n                    x.RecipientNumber,\n                    x.Status,\n                    x.SentAt,\n                    x.DeliveredAt,\n                    x.ReadAt,\n                    x.ErrorMessage,\n                    x.TemplateCategory,\n                    x.MessageType\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = logs });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/DTOs/MessageLogDto.cs",
      "sha256": "c0f207826b70160db8814aaf2e5fcf92174c9b5b7d0904bf27f60163fb2ca516",
      "language": "csharp",
      "size": 643,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class MessageLogDto\n    {\n        public Guid Id { get; set; }\n        public Guid? ContactId { get; set; }\n        public string RecipientNumber { get; set; }\n        public string MessageContent { get; set; }\n        public bool IsIncoming { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public string? RenderedBody { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/DTOs/WebhookStatusDto.cs",
      "sha256": "aeb1bd281f5cc025fcc6c5a2a924daf3078c9e774d3fad3860626f871caad053",
      "language": "csharp",
      "size": 1324,
      "content": "namespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class WebhookStatusDto\n    {\n        public List<StatusObject> statuses { get; set; }\n    }\n\n    public class StatusObject\n    {\n        public string id { get; set; }                     // Message ID (WAMID)\n        public string status { get; set; }                 // sent, delivered, read, failed\n        public long timestamp { get; set; }                // UNIX timestamp\n        public string recipient_id { get; set; }           // Phone number\n        public ConversationInfo conversation { get; set; }\n        public PricingInfo pricing { get; set; }\n        public List<ErrorInfo>? errors { get; set; }\n    }\n\n    public class ConversationInfo\n    {\n        public string id { get; set; }\n        public Origin origin { get; set; }\n    }\n\n    public class Origin\n    {\n        public string type { get; set; }                   // marketing, utility, etc.\n    }\n\n    public class PricingInfo\n    {\n        public bool billable { get; set; }\n        public string pricing_model { get; set; }\n        public string category { get; set; }               // Template category\n    }\n\n    public class ErrorInfo\n    {\n        public int code { get; set; }\n        public string title { get; set; }\n        public string details { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Models/MessageStatusLog.cs",
      "sha256": "3e0a8a53cdfb329873018f1c8d6d53c03ef5c6be3e10247853ed67761cafbb4f",
      "language": "csharp",
      "size": 1958,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\n\n\nnamespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class MessageStatusLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        // üîó Who is it for\n        public string RecipientNumber { get; set; }\n        public string? CustomerProfileName { get; set; }\n\n        // üì© WhatsApp Message Info\n       // [ForeignKey(nameof(Message))]\n        public string? MessageId { get; set; } // WAMID\n\n       // public MessageLog? Message { get; set; }\n        public string Status { get; set; }\n        public string MessageType { get; set; }\n\n        // üßæ Template Info\n        public string? TemplateName { get; set; }\n        public string? TemplateCategory { get; set; }\n\n        // üß† Analytics/Reporting\n        public string Channel { get; set; } = \"whatsapp\";\n        public bool IsSessionOpen { get; set; }\n        public long? MetaTimestamp { get; set; }\n\n        // üïí Timestamps\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // ‚ùå Error Tracking\n        public string? ErrorMessage { get; set; }\n        public int? ErrorCode { get; set; }\n\n        // üîç Raw Log (for audit/debug)\n        public string? RawPayload { get; set; }\n\n        // üîó Foreign Keys\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; }\n\n        public Guid? BusinessId { get; set; }\n        public Business? Business { get; set; }\n\n        public Guid? UserId { get; set; }\n        public User? User { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // ‚úÖ Navigation using alternate key (WAMID)\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Services/IMessageStatusService.cs",
      "sha256": "cca96e16b96ab978d9e4c344d9a12a8377da0c701b18ea3e5e1bb981d1d6578a",
      "language": "csharp",
      "size": 262,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.MessageManagement.Services\n{\n    public interface IMessageStatusService\n    {\n        Task LogWebhookStatusAsync(WebhookStatusDto dto);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Services/MessageStatusService.cs",
      "sha256": "f68c41d4a80e28d1b1de9da188c8b43c756b495494588de6fd11c8275d59a544",
      "language": "csharp",
      "size": 2755,
      "content": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessageManagement.Services;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.AuthModule.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace xbytechat.api.Features.MessageManagement.Services\n{\n    public class MessageStatusService : IMessageStatusService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<MessageStatusService> _logger;\n\n        public MessageStatusService(AppDbContext context, ILogger<MessageStatusService> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task LogWebhookStatusAsync(WebhookStatusDto dto)\n        {\n            foreach (var status in dto.statuses)\n            {\n                var log = new MessageStatusLog\n                {\n                    Id = Guid.NewGuid(),\n                    MessageId = status.id,\n                    Status = status.status.ToLower(),\n                    RecipientNumber = status.recipient_id,\n                    MetaTimestamp = status.timestamp,\n                    TemplateCategory = status?.pricing?.category,\n                    MessageType = status?.conversation?.origin?.type ?? \"session\",\n                    Channel = \"whatsapp\",\n                    CreatedAt = DateTime.UtcNow,\n                    RawPayload = System.Text.Json.JsonSerializer.Serialize(status)\n                };\n\n                var statusTime = DateTimeOffset.FromUnixTimeSeconds(status.timestamp).UtcDateTime;\n\n                switch (status.status.ToLower())\n                {\n                    case \"sent\": log.SentAt = statusTime; break;\n                    case \"delivered\": log.DeliveredAt = statusTime; break;\n                    case \"read\": log.ReadAt = statusTime; break;\n                }\n\n                if (status.errors != null && status.errors.Count > 0)\n                {\n                    log.ErrorMessage = status.errors[0].details;\n                    log.ErrorCode = status.errors[0].code;\n                }\n\n                await _context.MessageStatusLogs.AddAsync(log);\n            }\n\n            // ‚õëÔ∏è Wrap in try-catch and log full inner exception\n            try\n            {\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"‚ùå SaveChangesAsync failed: \" + ex.Message);\n                _logger.LogError(\"‚ùå Inner exception: \" + ex.InnerException?.Message);\n                throw;\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/IWhatsAppProvider.cs",
      "sha256": "25a1b1105d245abb3cf620574e2cca3c0da007884f8ba8a062c2cd4724b88022",
      "language": "csharp",
      "size": 1124,
      "content": "// üìÑ File: Features/MessagesEngine/Abstractions/IWhatsAppProvider.cs\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n   \n    public interface IWhatsAppProvider\n    {\n        Task<WaSendResult> SendTextAsync(string to, string body);\n        Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components);\n        Task<WaSendResult> SendInteractiveAsync(object fullPayload); // prebuilt object (e.g., image + CTA)\n    }\n}\n\n\n\n//namespace xbytechat.api.Features.MessagesEngine.Abstractions\n//{\n//    public interface IWhatsAppProvider\n//    {\n//        string Provider { get; }\n\n//        Task<WaSendResult> SendTextAsync(string to, string body, CancellationToken ct = default);\n\n//        Task<WaSendResult> SendTemplateAsync(string to, string templateName, string language, object? components, CancellationToken ct = default);\n\n//        // Optional: interactive/image+CTA\n//        Task<WaSendResult> SendInteractiveAsync(object payload, CancellationToken ct = default);\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/WaSendResult.cs",
      "sha256": "cbdf2f4ea14dafdbfd281c92d4701d11b385c52c89785faa04d1848b6af5bd8f",
      "language": "csharp",
      "size": 320,
      "content": "using System.Net;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n    public record WaSendResult(\n        bool Success,\n        string Provider,\n        string? ProviderMessageId = null,\n        HttpStatusCode? StatusCode = null,\n        string? RawResponse = null,\n        string? Error = null\n    );\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/WaSendTemplate.cs",
      "sha256": "ce04cfc0e5abaca6ef42cf5593159791a9ae093be9b7399eae4442252b2362bd",
      "language": "csharp",
      "size": 378,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n    public class WaSendTemplate\n    {\n        public Guid BusinessId { get; init; }\n        public string To { get; init; } = \"\";\n        public string TemplateName { get; init; } = \"\";\n        public string Language { get; init; } = \"en_US\";\n        public object? Components { get; init; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/WaSendText.cs",
      "sha256": "192ded7365dc037581055e12a8e00816487953e786e107447465183e8e0f83a7",
      "language": "csharp",
      "size": 260,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n    public class WaSendText\n    {\n        public Guid BusinessId { get; init; }\n        public string To { get; init; } = \"\";\n        public string Body { get; init; } = \"\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Contracts/MessageEnvelope.cs",
      "sha256": "7d9a3c2180154a34b5c48dbcc92d2b9ce3affbcadaacba097bba0eae1af2925e",
      "language": "csharp",
      "size": 648,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.MessagesEngine.Contracts\n{\n    /// <summary>\n    /// Provider-agnostic message envelope. Maps to Meta/Pinbot under the hood.\n    /// </summary>\n    public sealed record MessageEnvelope(\n        string To,\n        string Kind,                       // \"text\" | \"template\" | \"interactive\"\n        string? TemplateName = null,\n        string LanguageCode = \"en_US\",\n        List<object>? Components = null,    // template components\n        object? Interactive = null,         // interactive payload (if any)\n        string? TextBody = null,\n        string? ImageUrl = null\n    );\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Controllers/MessageEngineController.cs",
      "sha256": "dccc3a3007e5829ebb5161cc80da73208b3eec3a715695a0e4c467584bb87735",
      "language": "csharp",
      "size": 8267,
      "content": "\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing System.Text.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.MessagesEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class MessageEngineController : ControllerBase\n    {\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IMessageAnalyticsService _messageAnalyticsServiceervice;\n\n\n        public MessageEngineController(IMessageEngineService messageService, IMessageAnalyticsService messageAnalyticsService)\n        {\n            _messageEngineService = messageService;\n            _messageAnalyticsServiceervice = messageAnalyticsService;\n        }\n        //[HttpPost(\"send-contentfree-text\")]\n        //public async Task<IActionResult> SendTextMessage([FromBody] TextMessageSendDto dto)\n        //{\n        //    if (!ModelState.IsValid)\n        //        return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid text message payload.\"));\n\n        //    try\n        //    {\n        //        var result = await _messageEngineService.SendTextDirectAsync(dto); // üëà New direct method\n\n        //        return result.Success\n        //            ? Ok(result)\n        //            : BadRequest(ResponseResult.ErrorInfo(result.Message, result.RawResponse));\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        Console.WriteLine($\"‚ùå Exception while sending text message: {ex.Message}\");\n        //        return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending text message.\", ex.ToString()));\n        //    }\n        //}\n        [HttpPost(\"send-contentfree-text\")]\n        public async Task<IActionResult> SendTextMessage([FromBody] TextMessageSendDto dto)\n        {\n            // 0) Null/body guard\n            if (dto is null)\n                return BadRequest(ResponseResult.ErrorInfo(\n                    \"‚ùå Invalid request body.\",\n                    \"Request JSON was null or malformed.\"));\n\n            // 1) Minimal required-field validation (provider is optional here)\n            var missing = new List<string>();\n            if (string.IsNullOrWhiteSpace(dto.RecipientNumber)) missing.Add(\"recipientNumber\");\n            if (string.IsNullOrWhiteSpace(dto.TextContent)) missing.Add(\"textContent\");\n\n            if (missing.Count > 0)\n            {\n                return BadRequest(ResponseResult.ErrorInfo(\n                    \"‚ùå Invalid text message payload.\",\n                    $\"Missing/empty: {string.Join(\", \", missing)}\"\n                ));\n            }\n\n            // 2) Diagnostics while debugging\n            Console.WriteLine($\"[SendTextMessage] Incoming: {JsonSerializer.Serialize(dto)}\");\n            Console.WriteLine($\"[SendTextMessage] provider(raw)='{dto.Provider}' phoneNumberId(raw)='{dto.PhoneNumberId}'\");\n\n            try\n            {\n                // 3) Delegate to service (service will resolve provider if missing)\n                var result = await _messageEngineService.SendTextDirectAsync(dto);\n\n                // 4) Return exactly what service produced\n                return result.Success ? Ok(result) : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception while sending text message: {ex}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\n                    \"üö® Server error while sending text message.\", ex.ToString()));\n            }\n        }\n        [HttpPost(\"send-template-simple\")]\n        public async Task<IActionResult> SendTemplateMessageSimple([FromBody] SimpleTemplateMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid template message request.\"));\n\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out Guid businessId))\n                    return Unauthorized(ResponseResult.ErrorInfo(\"‚ùå Business ID not found in token.\"));\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, dto);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(ResponseResult.ErrorInfo(result.Message ?? \"‚ùå Failed to send template.\", result.RawResponse));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception while sending template: {ex.Message}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending template.\", ex.ToString()));\n            }\n        }\n\n\n        [HttpPost(\"send-image-campaign/{campaignId}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid campaignId)\n        {\n            try\n            {\n                var businessId = UserClaimHelper.GetBusinessId(User); // ‚úÖ from\n                                                                      // claims\n                var userName = UserClaimHelper.GetUserName(User);     // for logging (if needed)\n\n                var result = await _messageEngineService.SendImageCampaignAsync(campaignId, businessId, userName);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error while sending image campaign: \" + ex.Message);\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Server error while sending campaign.\", ex.ToString()));\n            }\n        }\n        public static class UserClaimHelper\n        {\n            public static Guid GetBusinessId(ClaimsPrincipal user)\n            {\n                var claim = user.Claims.FirstOrDefault(c => c.Type == \"businessId\");\n                return claim != null ? Guid.Parse(claim.Value) : Guid.Empty;\n            }\n\n            public static string GetUserName(ClaimsPrincipal user)\n            {\n                return user?.Identity?.Name ?? \"Unknown\";\n            }\n        }\n\n        [HttpPost(\"send-image-template\")]\n        public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        {\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // Uses your extension method!\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return Unauthorized(new { message = ex.Message });\n            }\n\n            var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n            if (result.Success)\n                return Ok(new { message = result.Message, raw = result.RawResponse });\n\n            return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        }\n\n\n        //[HttpPost(\"send-video-template\")]\n        //public async Task<IActionResult> SendVideoTemplateMessage([FromBody] VideoTemplateMessageDto dto)\n        //{\n        //    Guid businessId;\n        //    try { businessId = User.GetBusinessId(); }\n        //    catch (UnauthorizedAccessException ex) { return Unauthorized(new { message = ex.Message }); }\n\n        //    var result = await _messageEngineService.SendVideoTemplateMessageAsync(dto, businessId);\n        //    return result.Successin\n        //        ? Ok(new { message = result.Message, raw = result.RawResponse })\n        //        : BadRequest(new { message = result.Message, raw = result.RawResponse });\n        //}\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 20)\n        {\n            var businessId = User.GetBusinessId();\n            var logs = await _messageAnalyticsServiceervice.GetRecentLogsAsync(businessId, limit);\n            return Ok(new { success = true, data = logs });\n        }\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/AutoSendTemplateMessageDto.cs",
      "sha256": "99519bdaed8df38337d3485148cfc53b4972c2616ebb386417321455ad582576",
      "language": "csharp",
      "size": 422,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class AutoSendTemplateMessageDto\n    {\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string PhoneNumber { get; set; }\n        public Guid TemplateId { get; set; }\n        public string TemplateName { get; set; }\n        public Dictionary<string, string> Placeholders { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/CtaButtonDto.cs",
      "sha256": "60ecf5aa33d787f635ef05f11c48b8f9f6a11d48b2d7322f7f2ef575b91f9657",
      "language": "csharp",
      "size": 307,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class CtaButtonDto\n    {\n        public string Title { get; set; } = string.Empty; // e.g., \"Buy Now\", \"View Details\"\n        public string Type { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/DocumentTemplateDto.cs",
      "sha256": "bbda0a8069d8f5d2cd55009d1276b85f5ba6bd077a0c8c41cb055431dbed2507",
      "language": "csharp",
      "size": 161,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class DocumentTemplateDto\n    {\n        public string? HeaderDocumentUrl { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/DocumentTemplateMessageDto.cs",
      "sha256": "d1661773f6bc14badc4979362169c3170319abbebf19ca7b004eecab4a377a1f",
      "language": "csharp",
      "size": 1813,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs; // for CampaignButtonDto in this folder\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    /// <summary>\n    /// Payload for sending a template with a DOCUMENT header.\n    /// Aliases provided so code using Parameters/Buttons OR TemplateParameters/ButtonParameters compiles.\n    /// </summary>\n    public sealed class DocumentTemplateMessageDto\n    {\n        public Guid BusinessId { get; set; }\n\n        // Routing / provider\n        public string? Provider { get; set; }            // \"META\" | \"PINNACLE\"\n        public string? PhoneNumberId { get; set; }       // Meta WABA phone id (sender)\n\n        // Recipient & template identity\n        public string RecipientNumber { get; set; } = \"\"; // E.164\n        public string TemplateName { get; set; } = \"\";\n        public string LanguageCode { get; set; } = \"en_US\";\n\n        // Header\n        public string? HeaderDocumentUrl { get; set; }\n\n        // Body params (ordered {{1}}..)\n        public List<string> Parameters { get; set; } = new();\n        // Alias for older call sites\n        public List<string> TemplateParameters\n        {\n            get => Parameters;\n            set => Parameters = value ?? new List<string>();\n        }\n\n        // Buttons (we use your actual CampaignButtonDto: ButtonText, ButtonType, TargetUrl)\n        public List<CampaignButtonDto> Buttons { get; set; } = new();\n        // Alias for older call sites\n        public List<CampaignButtonDto> ButtonParameters\n        {\n            get => Buttons;\n            set => Buttons = value ?? new List<CampaignButtonDto>();\n        }\n\n        // Optional extras\n        public Guid? CTAFlowConfigId { get; set; }\n        public string? TemplateBody { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/ImageTemplateMessageDto.cs",
      "sha256": "471132fb66303d77584686def7af22e2365d5b68d32a950f9582f245c966452c",
      "language": "csharp",
      "size": 861,
      "content": "using System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\npublic class ImageTemplateMessageDto\n{\n    public Guid BusinessId { get; set; }\n    public string RecipientNumber { get; set; }\n    public string TemplateName { get; set; }\n    public string LanguageCode { get; set; } = \"en_US\";\n    public string HeaderImageUrl { get; set; }\n    public List<string> TemplateParameters { get; set; } = new();\n    public List<CampaignButtonDto> ButtonParameters { get; set; } = new();\n\n    // ‚úÖ Add these two for flow tracking\n    public Guid? CTAFlowConfigId { get; set; }\n    public Guid? CTAFlowStepId { get; set; }\n    public string? TemplateBody { get; set; }\n\n\n   // [RegularExpression(\"^(PINNACLE|META_CLOUD)$\")]\n    public string Provider { get; set; } = string.Empty;\n    public string? PhoneNumberId { get; set; }\n   \n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/MessageTypeEnum.cs",
      "sha256": "d3120f117dc16b8ab9901ba3726defab664b2a9b4a5414eff586e7e27f55062a",
      "language": "csharp",
      "size": 286,
      "content": "using System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [JsonConverter(typeof(JsonStringEnumConverter))] // Enables string parsing in JSON\n    public enum MessageTypeEnum\n    {\n        Text,\n        Image,\n        Template,\n        Cta\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendMessageDto.cs",
      "sha256": "5121018135042d9cdd9a4a404307559a8024ffa4bc1b851f346690fedb544886",
      "language": "csharp",
      "size": 2059,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs.Validation;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [ValidateMessageDto] // ‚úÖ Custom validator will enforce conditional field rules\n    public class SendMessageDto\n    {\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [Phone]\n        public string RecipientNumber { get; set; } = string.Empty;\n\n        [Required]\n        public MessageTypeEnum MessageType { get; set; }\n\n        // üìù Text Message\n        public string? TextContent { get; set; }\n\n        // üñºÔ∏è Image Message\n        public string? MediaUrl { get; set; }\n\n        // üìã Template Message\n        public string? TemplateName { get; set; }\n        public Dictionary<string, string>? TemplateParameters { get; set; }\n\n        // üõí CTA Message\n        public List<CtaButtonDto>? CtaButtons { get; set; }\n\n        // ‚úÖ Required: this was missing [Optional but needed for CTA/Template message sending]\n        public List<string>? ButtonParams { get; set; }\n\n        // üìä Optional Metadata\n        public Guid? CampaignId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n\n        public string? SourceModule { get; set; }\n        public string? CustomerId { get; set; }\n        public string? CustomerName { get; set; }\n        public string? CustomerPhone { get; set; }\n        public string? BotId { get; set; }\n        public string? RefMessageId { get; set; }\n        public string? CTATriggeredFrom { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n\n        // ‚úÖ Add these two for flow tracking\n        public string? TemplateBody { get; set; }  // üî• Used to render actual message body from placeholders\n\n      //  [RegularExpression(\"^(PINNACLE|META_CLOUD)$\")]\n        public string Provider { get; set; } = string.Empty;\n\n        public string? PhoneNumberId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendTemplateMessageSimpleDto.cs",
      "sha256": "00dc74bb6a1b396bab6fcd63f93454cfd59671260c4da8b0afd8754e83e10ce8",
      "language": "csharp",
      "size": 478,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SendTemplateMessageSimpleDto\n    {\n        public Guid BusinessId { get; set; }\n        public string RecipientNumber { get; set; }\n        public string TemplateName { get; set; }\n        public List<string> TemplateParameters { get; set; } = new();\n        // ‚úÖ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SimpleTemplateMessageDto.cs",
      "sha256": "4757d0e55a4b6f1f6b5ecf2c13e960647f3835a3c264892839d669c32fe37f8f",
      "language": "csharp",
      "size": 967,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SimpleTemplateMessageDto\n    {\n        //public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TemplateName { get; set; }\n\n        public List<string> TemplateParameters { get; set; } = new();\n        public bool HasStaticButtons { get; set; } = false;\n\n       // [RegularExpression(\"^(PINNACLE|META_CLOUD)$\")]\n        public string Provider { get; set; } = string.Empty;\n        public string? PhoneNumberId { get; set; }\n        // ‚úÖ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public string? TemplateBody { get; set; }  // üî• Used to render actual message body from placeholders\n\n        public string? LanguageCode { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/TemplateForUIResponseDto.cs",
      "sha256": "8598c768ad7f753c61a4a2c296a18db6285c872705ca0b16a479b5d5bdedde55",
      "language": "csharp",
      "size": 626,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\npublic class TemplateForUIResponseDto\n{\n    public string Name { get; set; }\n    public string Language { get; set; }\n    public string Body { get; set; }\n\n    // ‚úÖ Correct naming for frontend\n    public int ParametersCount { get; set; }\n\n    public List<ButtonMetadataDto> ButtonParams { get; set; }\n    public bool HasImageHeader { get; set; } // üÜï Used to detect image templates\n\n    public string? HeaderKind { get; set; }          // \"text\" | \"image\" | \"video\" | \"document\" | \"none\"\n    public bool RequiresHeaderMediaUrl { get; set; } // true for image/video/document\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/TextMessageSendDto.cs",
      "sha256": "ac840891c791dd1b7c45b920ce2db245ce63eb12364e3a606b492c053268da6c",
      "language": "csharp",
      "size": 847,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class TextMessageSendDto\n    {\n        public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TextContent { get; set; }\n\n        public Guid ContactId { get; set; }\n\n        public string? PhoneNumberId { get; set; }\n        // ‚úÖ NEW: Optional source indicator (e.g., \"campaign\", \"auto-reply\", etc.)\n\n        //[RegularExpression(\"^(PINNACLE|META_CLOUD)$\")]\n        //[Required]\n        public string Provider { get; set; } = string.Empty;\n        public string? Source { get; set; }\n\n        // ‚úÖ NEW: Optional message ID for campaign tracing\n        public string? MessageId { get; set; }\n\n        public bool IsSaveContact { get; set; } = false; // default true\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/VideoTemplateMessageDto.cs",
      "sha256": "57c4f2a9a6c884efb7c3ec74c8674e04482aaaa04428ab6232a7ea3db1adc043",
      "language": "csharp",
      "size": 941,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\npublic class VideoTemplateMessageDto\n{\n    public Guid BusinessId { get; set; }\n    public string RecipientNumber { get; set; } = string.Empty;\n\n    public string TemplateName { get; set; } = string.Empty;\n    public string LanguageCode { get; set; } = \"en_US\";\n\n    // mirrors HeaderImageUrl\n    public string? HeaderVideoUrl { get; set; }\n\n    public List<string> TemplateParameters { get; set; } = new();\n    public List<CampaignButtonDto> ButtonParameters { get; set; } = new();\n\n    // for flow tracking parity\n    public Guid? CTAFlowConfigId { get; set; }\n    public Guid? CTAFlowStepId { get; set; }\n    public string? TemplateBody { get; set; }\n\n    // same explicit provider knobs you already use\n    public string Provider { get; set; } = string.Empty; // \"PINNACLE\" | \"META_CLOUD\"\n    public string? PhoneNumberId { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Factory/IWhatsAppProviderFactory.cs",
      "sha256": "342d4ace84b80c735c364b8ff654502fff27f1bfeb70eb78d5469879ec57ce1f",
      "language": "csharp",
      "size": 578,
      "content": "using System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\n\nnamespace xbytechat.api.Features.MessagesEngine.Factory\n{\n    public interface IWhatsAppProviderFactory\n    {\n        //Task<IWhatsAppProvider> CreateAsync(Guid businessId, CancellationToken ct = default);\n        Task<IWhatsAppProvider> CreateAsync(Guid businessId);\n       //Task<IWhatsAppProvider> CreateAsync(Guid businessId, string? phoneNumberId);\n        Task<IWhatsAppProvider> CreateAsync(Guid businessId, string provider, string? phoneNumberId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Factory/WhatsAppProviderFactory.cs",
      "sha256": "11417f5a30ab884634369dd9281755cfa908fa987e687a53f323bf4644855b83",
      "language": "csharp",
      "size": 8611,
      "content": "using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat.api.Features.MessagesEngine.Providers;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing static System.Net.WebRequestMethods;\nusing static System.Runtime.InteropServices.JavaScript.JSType;\n\nnamespace xbytechat.api.Features.MessagesEngine.Factory\n{\n    public class WhatsAppProviderFactory : IWhatsAppProviderFactory\n    {\n        private readonly IServiceProvider _sp;\n        private readonly AppDbContext _db;\n        private readonly ILogger<WhatsAppProviderFactory> _logger;\n\n        public WhatsAppProviderFactory(IServiceProvider sp, AppDbContext db, ILogger<WhatsAppProviderFactory> logger)\n        {\n            _sp = sp;\n            _db = db;\n            _logger = logger;\n        }\n\n        public async Task<IWhatsAppProvider> CreateAsync(Guid businessId)\n        {\n            var setting = await _db.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive)\n                ?? throw new InvalidOperationException(\"WhatsApp settings not found for this business.\");\n\n            var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n\n            using var scope = _sp.CreateScope();\n\n            var httpClientFactory = scope.ServiceProvider.GetService<IHttpClientFactory>();\n            var http =\n                httpClientFactory != null\n                    ? httpClientFactory.CreateClient(providerKey == \"meta_cloud\" ? \"wa:meta_cloud\" : \"wa:pinnacle\")\n                    : scope.ServiceProvider.GetRequiredService<HttpClient>();\n\n            return providerKey switch\n            {\n                //\"pinnacle\" =>\n                //            new PinnacleProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinnacleProvider>>(), setting),\n                \"pinnacle\" => new PinnacleProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinnacleProvider>>(), setting),\n                \"meta_cloud\" =>\n                    new MetaCloudProvider(_db, http, scope.ServiceProvider.GetRequiredService<ILogger<MetaCloudProvider>>(), setting),\n\n                _ => throw new NotSupportedException($\"Unsupported WhatsApp provider: {providerKey}\")\n            };\n        }\n        //public async Task<IWhatsAppProvider> CreateAsync(Guid businessId, string? phoneNumberId)\n        //{\n        //    var setting = await _db.WhatsAppSettings\n        //        .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive)\n        //        ?? throw new InvalidOperationException(\"WhatsApp settings not found for this business.\");\n\n        //    // per-send override of the sender number (in-memory only)\n        //    if (!string.IsNullOrWhiteSpace(phoneNumberId))\n        //        setting.PhoneNumberId = phoneNumberId.Trim();\n\n        //    var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n\n        //    using var scope = _sp.CreateScope();\n\n        //    var httpClientFactory = scope.ServiceProvider.GetService<IHttpClientFactory>();\n        //    var http =\n        //        httpClientFactory != null\n        //            ? httpClientFactory.CreateClient(providerKey == \"meta_cloud\" ? \"wa:meta_cloud\" : \"wa:pinnacle\")\n        //            : scope.ServiceProvider.GetRequiredService<HttpClient>();\n\n        //    return providerKey switch\n        //    {\n        //        \"pinnacle\" => new PinnacleProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinnacleProvider>>(), setting),\n        //        \"meta_cloud\" => new MetaCloudProvider(_db, http, scope.ServiceProvider.GetRequiredService<ILogger<MetaCloudProvider>>(), setting),\n        //        _ => throw new NotSupportedException($\"Unsupported WhatsApp provider: {providerKey}\")\n        //    };\n        //}\n        public async Task<IWhatsAppProvider> CreateAsync(Guid businessId, string provider, string? phoneNumberId)\n        {\n            if (string.IsNullOrWhiteSpace(provider))\n                throw new ArgumentException(\"Provider is required.\", nameof(provider));\n            if (provider is not \"PINNACLE\" and not \"META_CLOUD\")\n                throw new NotSupportedException($\"Unsupported provider: {provider}\");\n\n            // If a sender was chosen, ensure it belongs to THIS business+provider\n            if (!string.IsNullOrWhiteSpace(phoneNumberId))\n            {\n                var exists = await _db.WhatsAppPhoneNumbers.AsNoTracking().AnyAsync(n =>\n                    n.BusinessId == businessId && n.Provider == provider && n.PhoneNumberId == phoneNumberId);\n                if (!exists)\n                    throw new InvalidOperationException(\"Selected PhoneNumberId does not belong to this provider/business.\");\n            }\n\n            // Load the settings row for the exact (BusinessId, Provider)\n            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(s =>\n                s.BusinessId == businessId && s.Provider == provider && s.IsActive)\n                ?? throw new InvalidOperationException($\"WhatsApp settings not found for provider {provider}.\");\n\n            // Per-send override ‚Äì transient only\n            if (!string.IsNullOrWhiteSpace(phoneNumberId))\n                setting.PhoneNumberId = phoneNumberId.Trim();\n\n            if (string.IsNullOrWhiteSpace(setting.ApiUrl))\n                throw new InvalidOperationException(\"API URL is empty. Save provider settings first.\");\n            if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                throw new InvalidOperationException(\"API Key/Token is empty. Save provider settings first.\");\n\n            using var scope = _sp.CreateScope();\n            var http = scope.ServiceProvider\n                .GetRequiredService<IHttpClientFactory>()\n                .CreateClient(provider == \"META_CLOUD\" ? \"wa:meta_cloud\" : \"wa:pinnacle\");\n\n            return provider switch\n            {\n                \"PINNACLE\" => new PinnacleProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinnacleProvider>>(), setting),\n                \"META_CLOUD\" => new MetaCloudProvider(_db, http, scope.ServiceProvider.GetRequiredService<ILogger<MetaCloudProvider>>(), setting),\n                _ => throw new NotSupportedException($\"Unsupported provider: {provider}\")\n            };\n        }\n\n    }\n}\n\n\n//// üìÑ File: Features/MessagesEngine/Factory/WhatsAppProviderFactory.cs\n//using System;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.DependencyInjection;\n//using Microsoft.Extensions.Logging;\n//using xbytechat.api;\n//using xbytechat.api.Features.MessagesEngine.Abstractions;\n//using xbytechat.api.Features.MessagesEngine.Providers;\n\n//namespace xbytechat.api.Features.MessagesEngine.Factory\n//{\n\n//    public class WhatsAppProviderFactory : IWhatsAppProviderFactory\n//    {\n//        private readonly IServiceProvider _sp;\n//        private readonly AppDbContext _db;\n//        private readonly ILogger<WhatsAppProviderFactory> _logger;\n\n//        public WhatsAppProviderFactory(IServiceProvider sp, AppDbContext db, ILogger<WhatsAppProviderFactory> logger)\n//        {\n//            _sp = sp;\n//            _db = db;\n//            _logger = logger;\n//        }\n\n//        public async Task<IWhatsAppProvider> CreateAsync(Guid businessId)\n//        {\n//            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive)\n//                          ?? throw new InvalidOperationException(\"WhatsApp settings not found for this business.\");\n\n//            var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n\n//            // Create a new scope to inject the per-tenant setting into provider constructor\n//            var scope = _sp.CreateScope();\n//            var http = scope.ServiceProvider.GetRequiredService<HttpClient>();\n\n//            return providerKey switch\n//            {\n//                \"pinnacle\" => new PinbotProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinbotProvider>>(), setting),\n//                \"meta_cloud\" => new MetaCloudProvider(_db, http, scope.ServiceProvider.GetRequiredService<ILogger<MetaCloudProvider>>(), setting),\n//                _ => throw new NotSupportedException($\"Unsupported WhatsApp provider: {providerKey}\")\n//            };\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Outbox/OutboxMessage.cs",
      "sha256": "caa5c09bc7c28e6aaa5bb1aa93cd76f38c41f5c2754790d9c45f6af037ed1a25",
      "language": "csharp",
      "size": 1109,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessagesEngine.Outbox\n{\n    public enum OutboxStatus\n    {\n        Queued = 0,\n        Sending = 1,\n        Sent = 2,\n        Failed = 3\n    }\n\n    public class OutboxMessage\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public Guid? ContactId { get; set; }\n\n        public string RecipientNumber { get; set; } = \"\";\n        public string ProviderKey { get; set; } = \"\"; // \"meta_cloud\" | \"pinnacle\" (optional hint)\n        public string PayloadJson { get; set; } = \"\"; // serialized MessageEnvelope\n        public string CorrelationId { get; set; } = \"\"; // for idempotency & tracing\n\n        public OutboxStatus Status { get; set; } = OutboxStatus.Queued;\n        public int AttemptCount { get; set; }\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? NextAttemptAt { get; set; } = DateTime.UtcNow;\n        public string? LastError { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/CtaMessagePayloadBuilder.cs",
      "sha256": "f23794fdb8775eff63c5d249f23e74b7ff5e4497daa7b255ce94693b3ba9a6f7",
      "language": "csharp",
      "size": 1063,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class CtaMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = dto.TextContent },\n                    action = new\n                    {\n                        buttons = dto.CtaButtons?.Select(b => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = b.Value,\n                                title = b.Title\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/ImageMessagePayloadBuilder.cs",
      "sha256": "1400148a9ed0b32af7ece6c87b111a1407feda0f5b651819257c5b740bb01106",
      "language": "csharp",
      "size": 554,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class ImageMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"image\",\n                image = new\n                {\n                    link = dto.MediaUrl\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/IWhatsAppPayloadBuilder.cs",
      "sha256": "89d6b688ba597eb931cd71401717698a692f3e3b645a02d60c1d73dae24731d3",
      "language": "csharp",
      "size": 225,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public interface IWhatsAppPayloadBuilder\n    {\n        object BuildPayload(SendMessageDto dto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/MessagePayloadBuilder.cs",
      "sha256": "ec8606e744a878efdd7f12dadcc799b2aaf290e66c9e419f639672d0003b4bd0",
      "language": "csharp",
      "size": 7842,
      "content": "// Features/MessagesEngine/PayloadBuilders/MessagePayloadBuilder.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public static class MessagePayloadBuilder\n    {\n        // New: a single canonical builder that understands our CSV-materialized shapes.\n        public static object BuildTemplatePayload(\n            string toPhoneE164,\n            string templateName,\n            string languageCode,\n            string headerType,                 // \"none\"|\"text\"|\"image\"|\"video\"|\"document\"\n            string? headerMediaUrl,            // for image/video/document\n            IReadOnlyList<string> bodyParams,  // {{1}}..{{N}}\n            IReadOnlyList<string>? headerTextParams, // header text {{n}} if headerType==\"text\"\n            IReadOnlyDictionary<string, string>? buttonUrlParams // keys: \"button1.url_param\"..\"button3.url_param\"\n        )\n        {\n            var components = new List<object>();\n\n            // 1) HEADER\n            switch ((headerType ?? \"none\").ToLowerInvariant())\n            {\n                case \"text\":\n                    if (headerTextParams != null && headerTextParams.Count > 0)\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = headerTextParams.Select(v => new { type = \"text\", text = v ?? string.Empty }).ToArray()\n                        });\n                    }\n                    break;\n\n                case \"image\":\n                    if (!string.IsNullOrWhiteSpace(headerMediaUrl))\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = new object[]\n                            {\n                                new { type = \"image\", image = new { link = headerMediaUrl } }\n                            }\n                        });\n                    }\n                    break;\n\n                case \"video\":\n                    if (!string.IsNullOrWhiteSpace(headerMediaUrl))\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = new object[]\n                            {\n                                new { type = \"video\", video = new { link = headerMediaUrl } }\n                            }\n                        });\n                    }\n                    break;\n\n                case \"document\":\n                    if (!string.IsNullOrWhiteSpace(headerMediaUrl))\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = new object[]\n                            {\n                                new { type = \"document\", document = new { link = headerMediaUrl } }\n                            }\n                        });\n                    }\n                    break;\n            }\n\n            // 2) BODY\n            if (bodyParams != null && bodyParams.Count > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = bodyParams.Select(v => new { type = \"text\", text = v ?? string.Empty }).ToArray()\n                });\n            }\n\n            // 3) BUTTONS (URL dynamic only)\n            // Expect buttonUrlParams: button{1..3}.url_param -> string\n            if (buttonUrlParams != null && buttonUrlParams.Count > 0)\n            {\n                var buttons = new List<object>();\n\n                for (var pos = 1; pos <= 3; pos++)\n                {\n                    var key = $\"button{pos}.url_param\";\n                    if (buttonUrlParams.TryGetValue(key, out var val) && !string.IsNullOrWhiteSpace(val))\n                    {\n                        buttons.Add(new\n                        {\n                            type = \"button\",\n                            sub_type = \"url\",\n                            index = pos - 1, // Meta expects 0-based index\n                            parameters = new object[]\n                            {\n                                new { type = \"text\", text = val }\n                            }\n                        });\n                    }\n                }\n\n                if (buttons.Count > 0)\n                {\n                    components.AddRange(buttons);\n                }\n            }\n\n            // Meta/Pinnacle style template envelope\n            var payload = new\n            {\n                messaging_product = \"whatsapp\",\n                to = toPhoneE164,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode }, // << not hardcoded\n                    components = components.ToArray()\n                }\n            };\n\n            return payload;\n        }\n    }\n}\n\n\n//using xbytechat.api.Features.CampaignModule.Models;\n//using xbytechat.api.Shared.utility;\n\n//namespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n//{\n//    public static class MessagePayloadBuilder\n//    {\n//        /// <summary>\n//        /// Builds a WhatsApp template message payload for image header + buttons.\n//        /// </summary>\n//        public static object BuildImageTemplatePayload(\n//            string templateName,\n//            string languageCode,\n//            string recipientNumber,\n//            List<string> templateParams,\n//            string? imageUrl,\n//            List<CampaignButton>? buttons\n//        )\n//        {\n//            var components = new List<object>();\n\n//            // ‚úÖ Body with template params\n//            if (templateParams != null && templateParams.Any())\n//            {\n//                components.Add(new\n//                {\n//                    type = \"body\",\n//                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n//                });\n//            }\n\n//            // ‚úÖ Header image if present\n//            if (!string.IsNullOrWhiteSpace(imageUrl))\n//            {\n//                components.Add(new\n//                {\n//                    type = \"header\",\n//                    parameters = new[]\n//                    {\n//                    new { type = \"image\", image = new { link = imageUrl } }\n//                }\n//                });\n//            }\n\n//            // ‚úÖ CTA buttons\n//            if (buttons != null && buttons.Any())\n//            {\n//                var buttonComponents = buttons\n//                    .OrderBy(b => b.Position)\n//                    .Take(3)\n//                    .Select((btn, index) => new\n//                    {\n//                        type = \"button\",\n//                        sub_type = btn.Type, // \"url\" or \"phone_number\"\n//                        index = index.ToString(),\n//                        parameters = new[]\n//                        {\n//                        new { type = \"text\", text = btn.Value }\n//                        }\n//                    });\n\n//                components.AddRange(buttonComponents);\n//            }\n\n//            // ‚úÖ Final WhatsApp Template Payload\n//            return new\n//            {\n//                messaging_product = \"whatsapp\",\n//                to = recipientNumber,\n//                type = \"template\",\n//                template = new\n//                {\n//                    name = templateName,\n//                    language = new { code = languageCode },\n//                    components = components\n//                }\n//            };\n//        }\n//    }\n\n//}"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateMessagePayloadBuilder.cs",
      "sha256": "1beb36776f57bf30bf67df07af07052f4d5fe2609dfe6a4015bf512dff64aee8",
      "language": "csharp",
      "size": 5342,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            if (dto == null) throw new ArgumentNullException(nameof(dto));\n            if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                throw new ArgumentException(\"TemplateName is required.\");\n            if (dto.TemplateParameters == null || dto.TemplateParameters.Count == 0)\n                throw new ArgumentException(\"TemplateParameters are required for template messages.\");\n\n            // Sort by placeholder index like {{1}}, {{2}}, guarding against bad keys\n            var bodyParams = dto.TemplateParameters\n                .Select(kvp =>\n                {\n                    var key = kvp.Key?.Trim('{', '}');\n                    _ = int.TryParse(key, out var idx);\n                    return (idx, kvp.Value);\n                })\n                .OrderBy(t => t.idx)\n                .Select(t => new { type = \"text\", text = t.Value })\n                .ToArray();\n\n            var components = new List<object>\n            {\n                new { type = \"body\", parameters = bodyParams }\n            };\n\n            if (dto.ButtonParams != null && dto.ButtonParams.Any())\n            {\n                for (int i = 0; i < dto.ButtonParams.Count; i++)\n                {\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i.ToString(),\n                        parameters = new[]\n                        {\n                            new { type = \"text\", text = dto.ButtonParams[i] }\n                        }\n                    });\n                }\n            }\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components\n                }\n            };\n        }\n    }\n}\n\n\n//using xbytechat.api.Features.MessagesEngine.DTOs;\n//using xbytechat.api.Helpers;\n\n//namespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n//{\n//    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n//    {\n//        public object BuildPayload(SendMessageDto dto)\n//        {\n//            var components = new List<object>();\n\n//            // ‚úÖ BODY PARAMETERS: Insert dynamic values into the template body\n//            // WhatsApp expects these to be in order ({{1}}, {{2}}, etc.)\n//            if (dto.TemplateParameters == null || dto.TemplateParameters.Count == 0)\n//                return ResponseResult.ErrorInfo(\"‚ùå Missing template parameters.\");\n//            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n//                {\n//                var bodyParams = dto.TemplateParameters\n//                    .OrderBy(kvp => int.Parse(kvp.Key.Trim('{', '}'))) // üî¢ Extract and sort by index\n//                    .Select(kvp => new\n//                    {\n//                        type = \"text\",\n//                        text = kvp.Value\n//                    }).ToArray();\n\n//                components.Add(new\n//                {\n//                    type = \"body\",\n//                    parameters = bodyParams\n//                });\n//            }\n\n//            // ‚úÖ BUTTON PARAMETERS: For templates with dynamic URL buttons (index-based)\n//            if (dto.ButtonParams != null && dto.ButtonParams.Any())\n//            {\n//                for (int i = 0; i < dto.ButtonParams.Count; i++)\n//                {\n//                    components.Add(new\n//                    {\n//                        type = \"button\",\n//                        sub_type = \"url\",\n//                        index = i.ToString(), // WhatsApp requires index as a string\n//                        parameters = new[]\n//                        {\n//                            new\n//                            {\n//                                type = \"text\",\n//                                text = dto.ButtonParams[i]\n//                            }\n//                        }\n//                    });\n//                }\n//            }\n\n//            // ‚úÖ FINAL WHATSAPP TEMPLATE PAYLOAD\n//            var payload = new\n//            {\n//                messaging_product = \"whatsapp\",\n//                to = dto.RecipientNumber,\n//                type = \"template\",\n//                template = new\n//                {\n//                    name = dto.TemplateName,\n//                    language = new { code = \"en_US\" },\n//                    components = components\n//                }\n//            };\n\n//            // ü™µ Debug log for developer console (optional)\n//            Console.WriteLine(\"üì¶ Built WhatsApp Template Payload:\");\n//            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(payload, new System.Text.Json.JsonSerializerOptions\n//            {\n//                WriteIndented = true\n//            }));\n\n//            return payload;\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateStaticButtonPayloadBuilder.cs",
      "sha256": "68979e5fa2d53ce3fa319c20377ca2022bf9e46b7244c817fb53f84594392f72",
      "language": "csharp",
      "size": 1397,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateStaticButtonPayloadBuilder\n    {\n        public static object Build(SendTemplateMessageSimpleDto dto)\n        {\n            var components = new List<object>();\n\n            // ‚úÖ Add Body Params\n            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = dto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n            }\n\n            // ‚ö†Ô∏è DO NOT add button components for static buttons\n            // Meta will render them automatically if template has static buttons defined\n            // You can later add logic here for dynamic buttons if needed\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components = components\n                }\n            };\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TextMessagePayloadBuilder.cs",
      "sha256": "abc17e5a60e2f58ba07c610db126262040f598a15aca27d2f85d52afc2fb4766",
      "language": "csharp",
      "size": 554,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TextMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"text\",\n                text = new\n                {\n                    body = dto.TextContent\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Providers/MetaCloudProvider.cs",
      "sha256": "1594542e4fc17e4e2448a9f3a8ef59befef06db560ec99f2c73805a6f1464335",
      "language": "csharp",
      "size": 4893,
      "content": "// üìÑ File: Features/MessagesEngine/Providers/MetaCloudProvider.cs\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Nodes;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.MessagesEngine.Providers\n{\n    public class MetaCloudProvider : IWhatsAppProvider\n    {\n        private readonly AppDbContext _db; // kept for future auditing/log enrichment\n        private readonly HttpClient _http;\n        private readonly ILogger<MetaCloudProvider> _logger;\n        private readonly WhatsAppSettingEntity _setting;\n\n        // ‚úÖ Ignore nulls to avoid sending \"components\": null etc.\n        private static readonly JsonSerializerOptions _jsonOpts = new()\n        {\n            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull\n        };\n\n        public MetaCloudProvider(\n            AppDbContext db,\n            HttpClient http,\n            ILogger<MetaCloudProvider> logger,\n            WhatsAppSettingEntity setting)\n        {\n            _db = db;\n            _http = http;\n            _logger = logger;\n            _setting = setting;\n        }\n\n        private string BuildUrl()\n        {\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://graph.facebook.com/v18.0\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            if (string.IsNullOrWhiteSpace(_setting.PhoneNumberId))\n            {\n                _logger.LogError(\"MetaCloudProvider: PhoneNumberId is missing for BusinessId {BusinessId}\", _setting.BusinessId);\n                return $\"{baseUrl}/-/messages\"; // inert path; will fail fast with clear logs\n            }\n\n            return $\"{baseUrl}/{_setting.PhoneNumberId}/messages\";\n        }\n\n        private async Task<WaSendResult> PostAsync(object payload)\n        {\n            var url = BuildUrl();\n            var json = JsonSerializer.Serialize(payload, _jsonOpts);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, url);\n            req.Content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            if (!string.IsNullOrWhiteSpace(_setting.ApiKey))\n            {\n                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", _setting.ApiKey);\n            }\n            else\n            {\n                _logger.LogWarning(\"MetaCloudProvider: ApiToken is empty for BusinessId {BusinessId}\", _setting.BusinessId);\n            }\n\n            var res = await _http.SendAsync(req);\n            var body = await res.Content.ReadAsStringAsync();\n\n            if (!res.IsSuccessStatusCode)\n            {\n                _logger.LogWarning(\"MetaCloud send failed (HTTP {Status}): {Body}\", (int)res.StatusCode, body);\n                return new WaSendResult(\n                    Success: false,\n                    Provider: \"MetaCloud\",\n                    ProviderMessageId: null,\n                    StatusCode: res.StatusCode,\n                    RawResponse: body,\n                    Error: res.ReasonPhrase\n                );\n            }\n\n            string? id = null;\n            try\n            {\n                var root = JsonNode.Parse(body);\n                id = root?[\"messages\"]?[0]?[\"id\"]?.GetValue<string>();\n            }\n            catch\n            {\n                // Keep raw; ID stays null\n            }\n\n            return new WaSendResult(\n                Success: true,\n                Provider: \"MetaCloud\",\n                ProviderMessageId: id,\n                StatusCode: res.StatusCode,\n                RawResponse: body,\n                Error: null\n            );\n        }\n\n        public Task<WaSendResult> SendTextAsync(string to, string body)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"text\",\n                text = new { preview_url = false, body }\n            });\n\n        public Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode },      // ‚úÖ Meta needs { code: \"en_US\" }\n                    components = components ?? System.Linq.Enumerable.Empty<object>() // ‚úÖ never null\n                }\n            });\n\n        public Task<WaSendResult> SendInteractiveAsync(object fullPayload)\n            => PostAsync(fullPayload);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Providers/PinbotProvider.cs",
      "sha256": "b42150f90c8705aa4742bab8ec5351c66edd98d9a0572bc128ae03635d3eed0c",
      "language": "csharp",
      "size": 5193,
      "content": "// üìÑ File: Features/MessagesEngine/Providers/PinbotProvider.cs\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Nodes;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.MessagesEngine.Providers\n{\n    public class PinbotProvider : IWhatsAppProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<PinbotProvider> _logger;\n        private readonly WhatsAppSettingEntity _setting;\n\n        public PinbotProvider(\n            HttpClient http,\n            ILogger<PinbotProvider> logger,\n            WhatsAppSettingEntity setting)\n        {\n            _http = http;\n            _logger = logger;\n            _setting = setting;\n        }\n\n        // Pinbot path segment can be WABA ID *or* PhoneNumberId depending on their account setup.\n        // Prefer PhoneNumberId, fall back to WabaId.\n        private string? ResolvePathIdOrNull()\n        {\n            if (!string.IsNullOrWhiteSpace(_setting.PhoneNumberId)) return _setting.PhoneNumberId!;\n            if (!string.IsNullOrWhiteSpace(_setting.WabaId)) return _setting.WabaId!;\n            return null;\n        }\n\n        private string BuildUrl(string pathId)\n        {\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://partnersv1.pinbot.ai\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            // Pinbot uses /v3/{id}/messages (id can be WABA ID or PhoneNumberId)\n            return $\"{baseUrl}/{pathId}/messages\";\n        }\n\n        private async Task<WaSendResult> PostAsync(object payload)\n        {\n            var pathId = ResolvePathIdOrNull();\n            if (string.IsNullOrWhiteSpace(pathId))\n            {\n                const string err = \"Pinnacle: PhoneNumberId or WabaId is required.\";\n                _logger.LogError(err);\n                return new WaSendResult(\n                    Success: false,\n                    Provider: \"Pinnacle\",\n                    ProviderMessageId: null,\n                    StatusCode: null,\n                    RawResponse: null,\n                    Error: err\n                );\n            }\n\n            var url = BuildUrl(pathId);\n            var json = JsonSerializer.Serialize(payload);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, url);\n            req.Content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            // Pinbot requires apikey header (no Bearer token)\n            if (!string.IsNullOrWhiteSpace(_setting.ApiKey))\n            {\n                req.Headers.TryAddWithoutValidation(\"apikey\", _setting.ApiKey);\n            }\n            else\n            {\n                _logger.LogWarning(\"PinbotProvider: ApiKey is empty for BusinessId {BusinessId}\", _setting.BusinessId);\n            }\n\n            var res = await _http.SendAsync(req);\n            var body = await res.Content.ReadAsStringAsync();\n\n            if (!res.IsSuccessStatusCode)\n            {\n                _logger.LogWarning(\"Pinbot send failed (HTTP {Status}): {Body}\", (int)res.StatusCode, body);\n                return new WaSendResult(\n                    Success: false,\n                    Provider: \"Pinbot\",\n                    ProviderMessageId: null,\n                    StatusCode: res.StatusCode,\n                    RawResponse: body,\n                    Error: res.ReasonPhrase\n                );\n            }\n\n            string? id = null;\n            try\n            {\n                // Pinbot often mirrors Meta's envelope, but be defensive.\n                var root = JsonNode.Parse(body);\n                id = root?[\"messages\"]?[0]?[\"id\"]?.GetValue<string>()\n                     ?? root?[\"message\"]?[\"id\"]?.GetValue<string>();\n            }\n            catch\n            {\n                // keep raw; ID remains null\n            }\n\n            return new WaSendResult(\n                Success: true,\n                Provider: \"Pinbot\",\n                ProviderMessageId: id,\n                StatusCode: res.StatusCode,\n                RawResponse: body,\n                Error: null\n            );\n        }\n\n        public Task<WaSendResult> SendTextAsync(string to, string body)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"text\",\n                text = new { body }\n            });\n\n        public Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode },\n                    components\n                }\n            });\n\n        public Task<WaSendResult> SendInteractiveAsync(object fullPayload)\n            => PostAsync(fullPayload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Providers/PinnacleProvider.cs",
      "sha256": "a4576631b49966f9cb8cdfc6c03c8b309c3a3ebe8b099ed04b7e9a45106c3577",
      "language": "csharp",
      "size": 7508,
      "content": "// üìÑ File: Features/MessagesEngine/Providers/PinnacleProvider.cs\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Nodes;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.MessagesEngine.Providers\n{\n    public class PinnacleProvider : IWhatsAppProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<PinnacleProvider> _logger;\n        private readonly WhatsAppSettingEntity _setting;\n\n        private static readonly JsonSerializerOptions _jsonOpts = new()\n        {\n            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull\n        };\n\n        public PinnacleProvider(HttpClient http, ILogger<PinnacleProvider> logger, WhatsAppSettingEntity setting)\n        {\n            _http = http;\n            _logger = logger;\n            _setting = setting;\n        }\n\n        private string? ResolvePathIdOrNull()\n        {\n            if (!string.IsNullOrWhiteSpace(_setting.PhoneNumberId)) return _setting.PhoneNumberId!;\n            if (!string.IsNullOrWhiteSpace(_setting.WabaId)) return _setting.WabaId!;\n            return null;\n        }\n\n        private string BuildBaseUrl()\n        {\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://partnersv1.pinbot.ai\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            if (!baseUrl.EndsWith(\"/v3\"))\n                baseUrl += \"/v3\";\n\n            return baseUrl;\n        }\n\n        // üîí Hard-append apikey ALWAYS (no conditions)\n        private string BuildSendUrlWithApiKey(string pathId)\n        {\n            // NEW LOGIC: Check if the 'pathId' is already a full URL.\n            // This is how we detect our tracking links.\n            if (Uri.IsWellFormedUriString(pathId, UriKind.Absolute))\n            {\n                // If it's a full URL, use it directly without modification.\n                return pathId;\n            }\n\n            // OLD LOGIC: If it's just a path ID, build the full Pinnacle API URL.\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://partnersv1.pinbot.ai\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            if (!baseUrl.EndsWith(\"/v3\"))\n                baseUrl += \"/v3\";\n\n            return $\"{baseUrl}/{pathId}/messages?apikey={System.Uri.EscapeDataString(_setting.ApiKey)}\";\n        }\n\n        private async Task<WaSendResult> PostAsync(object payload)\n        {\n            var pathId = ResolvePathIdOrNull();\n            if (string.IsNullOrWhiteSpace(pathId))\n            {\n                const string err = \"Pinnacle: PhoneNumberId or WabaId is required.\";\n                _logger.LogError(err);\n                return new WaSendResult(false, \"Pinnacle\", null, null, null, err);\n            }\n\n            if (string.IsNullOrWhiteSpace(_setting.ApiKey))\n            {\n                const string err = \"Pinnacle: ApiKey is missing in WhatsApp settings.\";\n                _logger.LogError(err);\n                return new WaSendResult(false, \"Pinnacle\", null, null, null, err);\n            }\n\n            var url = BuildSendUrlWithApiKey(pathId);\n            var json = JsonSerializer.Serialize(payload, _jsonOpts);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, url);\n            req.Content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            // ‚úÖ Put key in ALL the places some tenants require\n            req.Headers.Remove(\"apikey\");\n            req.Headers.Remove(\"x-api-key\");\n            req.Headers.TryAddWithoutValidation(\"apikey\", _setting.ApiKey);\n            req.Headers.TryAddWithoutValidation(\"x-api-key\", _setting.ApiKey);\n            req.Headers.Authorization = new AuthenticationHeaderValue(\"Apikey\", _setting.ApiKey);\n            req.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n            // üîç PROVE the headers exist BEFORE sending\n            var headerNames = req.Headers.Select(h => $\"{h.Key}:{string.Join(\",\", h.Value.Select(v => v.Length > 4 ? v[..4] + \"...\" : v))}\").ToArray();\n            _logger.LogInformation(\"Pinnacle POST {Url} | Headers => {Headers}\", url, string.Join(\" | \", headerNames));\n            var querycode=req.Content.ReadAsStringAsync().Result;\n            var res = await _http.SendAsync(req);\n            var body = await res.Content.ReadAsStringAsync();\n\n            if (!res.IsSuccessStatusCode)\n            {\n                _logger.LogWarning(\"Pinnacle send failed (HTTP {Status}): {Body}\", (int)res.StatusCode, body);\n                return new WaSendResult(false, \"Pinnacle\", null, res.StatusCode, body, res.ReasonPhrase);\n            }\n\n            string? id = TryGetPinnMessageId(body);\n            return new WaSendResult(true, \"Pinnacle\", id, res.StatusCode, body, null);\n        }\n\n        public Task<WaSendResult> SendTextAsync(string to, string body)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"text\",\n                text = new { preview_url = false, body }\n            });\n\n        public Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components)\n        {\n            components ??= Enumerable.Empty<object>();\n            var langValue = languageCode; // use exact string from template metadata\n            return PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = langValue,\n                    components\n                }\n            });\n        }\n\n        private static string? TryGetPinnMessageId(string json)\n        {\n            try\n            {\n                using var doc = JsonDocument.Parse(json);\n                var root = doc.RootElement;\n                if (root.TryGetProperty(\"messages\", out var msgs) &&\n                    msgs.ValueKind == JsonValueKind.Array &&\n                    msgs.GetArrayLength() > 0 &&\n                    msgs[0].TryGetProperty(\"id\", out var id0)) return id0.GetString();\n\n                if (root.TryGetProperty(\"message\", out var msg) &&\n                    msg.ValueKind == JsonValueKind.Object)\n                {\n                    if (msg.TryGetProperty(\"id\", out var id1)) return id1.GetString();\n                    if (msg.TryGetProperty(\"messageId\", out var id2)) return id2.GetString();\n                }\n                if (root.TryGetProperty(\"message_id\", out var id3)) return id3.GetString();\n                if (root.TryGetProperty(\"messageId\", out var id4)) return id4.GetString();\n                if (root.TryGetProperty(\"data\", out var data) &&\n                    data.ValueKind == JsonValueKind.Object &&\n                    data.TryGetProperty(\"messageId\", out var id5)) return id5.GetString();\n                if (root.TryGetProperty(\"id\", out var idTop)) return idTop.GetString();\n            }\n            catch { }\n            return null;\n        }\n\n        public Task<WaSendResult> SendInteractiveAsync(object fullPayload) => PostAsync(fullPayload);\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/IMessageEngineService.cs",
      "sha256": "09adfb41d2d2758ea33984a41ead43a6fcd3ad3385c6b288cc0db00e5fbef831",
      "language": "csharp",
      "size": 1461,
      "content": "// ‚úÖ Step 1: Final interface\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Helpers;\nusing System.Threading.Tasks;\nusing System.IO.Pipelines;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface IMessageEngineService\n    {\n\n        Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto); //\n        Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto);\n        Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto);\n        Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto);\n        Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string triggeredBy);\n        Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId);\n       // Task<ResponseResult> SendPayloadAsync(Guid businessId, object payload);\n        Task<ResponseResult> SendPayloadAsync(\n         Guid businessId,\n         string provider,          // \"PINNACLE\" or \"META_CLOUD\"\n         object payload,\n         string? phoneNumberId = null);\n        Task<ResponseResult> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId);\n        Task<ResponseResult> SendDocumentTemplateMessageAsync(\n           DocumentTemplateMessageDto dto,\n           Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/ITemplateMessageSender.cs",
      "sha256": "4b54a967e87c74ed41ae2cca4f1ebffc6068cfaa25f10dc6b01021b056886266",
      "language": "csharp",
      "size": 822,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface ITemplateMessageSender\n    {\n        Task<ResponseResult> SendTemplateMessageToContactAsync(\n           Guid businessId,\n           Contact contact,\n           string templateName,\n           List<string> templateParams,\n           string? imageUrl = null,\n           List<CampaignButton>? buttons = null,\n           string? source = null,\n           Guid? refMessageId = null\n       );\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/MessageEngineService.cs",
      "sha256": "b4f78dc3f517b921c29931ef1d985e92b9c2117c23fd0073c623b531fbad696f",
      "language": "csharp",
      "size": 88090,
      "content": "// üìÑ File: Features/MessagesEngine/Services/MessageEngineService.cs\nusing Newtonsoft.Json;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System.Net.Http;\nusing xbytechat.api.Shared.utility;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\n\n// ‚úÖ provider abstraction + factory\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat.api.Features.MessagesEngine.Factory;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing xbytechat.api.CRM.Models;\nusing System.Collections.Concurrent;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class MessageEngineService : IMessageEngineService\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _http; // kept for other internal calls if any\n        private readonly TextMessagePayloadBuilder _textBuilder;\n        private readonly ImageMessagePayloadBuilder _imageBuilder;\n        private readonly TemplateMessagePayloadBuilder _templateBuilder;\n        private readonly CtaMessagePayloadBuilder _ctaBuilder;\n        private readonly IPlanManager _planManager;\n        private readonly IHubContext<InboxHub> _hubContext;\n        private readonly IMessageIdResolver _messageIdResolver;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IContactService _contactService;\n        private readonly ConcurrentDictionary<Guid, (IReadOnlyList<WhatsAppSettingEntity> setting, DateTime expiresAt)>\n _settingsCache = new();\n        // üîÑ Basic cache for WhatsApp settings to reduce DB load (kept for other paths)\n        //private static readonly Dictionary<Guid, (WhatsAppSettingEntity setting, DateTime expiresAt)> _settingsCache = new();\n\n        private readonly IWhatsAppProviderFactory _providerFactory;\n        private readonly ILogger<MessageEngineService> _logger;\n        public MessageEngineService(\n            AppDbContext db,\n            HttpClient http,\n            TextMessagePayloadBuilder textBuilder,\n            ImageMessagePayloadBuilder imageBuilder,\n            TemplateMessagePayloadBuilder templateBuilder,\n            CtaMessagePayloadBuilder ctaBuilder,\n            IPlanManager planManager,\n            IHubContext<InboxHub> hubContext,\n            IMessageIdResolver messageIdResolver,\n            IHttpContextAccessor httpContextAccessor,\n            IContactService contactService,\n            IWhatsAppProviderFactory providerFactory,\n            ILogger<MessageEngineService> logger\n        )\n        {\n            _db = db;\n            _http = http;\n            _textBuilder = textBuilder;\n            _imageBuilder = imageBuilder;\n            _templateBuilder = templateBuilder;\n            _ctaBuilder = ctaBuilder;\n            _planManager = planManager;\n            _hubContext = hubContext;\n            _messageIdResolver = messageIdResolver;\n            _httpContextAccessor = httpContextAccessor;\n            _contactService = contactService;\n            _providerFactory = providerFactory;\n            _logger = logger;\n        }\n\n        // INSERT: near other helpers / utilities\n        private static string ResolveGreeting(string? profileName, string? contactName)\n        {\n            var s = (profileName ?? contactName)?.Trim();\n            return string.IsNullOrEmpty(s) ? \"there\" : s;\n        }\n\n        private static void EnsureArgsLength(List<string> args, int slot1Based)\n        {\n            while (args.Count < slot1Based) args.Add(string.Empty);\n        }\n\n        // ‚úÖ Public helper so both Flow + Campaign send paths can use it\n        public async Task<List<string>> ApplyProfileNameAsync(\n            Guid businessId,\n            Guid contactId,\n            bool useProfileName,\n            int? profileNameSlot,\n            List<string> args,\n            CancellationToken ct = default)\n        {\n            if (!useProfileName || !(profileNameSlot is int slot) || slot < 1)\n                return args;\n\n            // pull once from DB (cheap; uses your existing index on BusinessId/Id)\n            var contact = await _db.Contacts\n                .AsNoTracking()\n                .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId, ct);\n\n            var greet = ResolveGreeting(contact?.ProfileName, contact?.Name);\n\n            EnsureArgsLength(args, slot);\n            args[slot - 1] = greet;\n\n            return args;\n        }\n\n\n        public async Task<ResponseResult> SendPayloadAsync(Guid businessId, string provider, object payload,         // \"PINNACLE\" or \"META_CLOUD\"object payload,\n        string? phoneNumberId = null)\n        {\n            // Validate provider (no server-side normalization)\n            if (string.IsNullOrWhiteSpace(provider) ||\n                (provider != \"PINNACLE\" && provider != \"META_CLOUD\"))\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n                    \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n            }\n\n            // Route to the correct provider + optional sender override\n            return await SendViaProviderAsync(\n                businessId,\n                provider,\n                p => p.SendInteractiveAsync(payload),\n                phoneNumberId\n            );\n        }\n\n\n\n\n\n        // MessageEngineService.cs\n       \n        private static string NormalizeProviderOrThrow(string? p)\n        {\n            if (string.IsNullOrWhiteSpace(p))\n                throw new ArgumentException(\"Provider is required.\");\n\n            var u = p.Trim().ToUpperInvariant();\n            // Map common aliases -> canonical constants\n            return u switch\n            {\n                \"META\" => \"META_CLOUD\",\n                \"META_CLOUD\" => \"META_CLOUD\",\n                \"PINNACLE\" => \"PINNACLE\",\n                _ => throw new ArgumentException($\"Invalid provider: {p}\")\n            };\n        }\n\n        private async Task<ResponseResult> SendViaProviderAsync(\n        Guid businessId,\n        string provider,                                // explicit\n        Func<IWhatsAppProvider, Task<WaSendResult>> action,\n        string? phoneNumberId = null)\n        {\n            try\n            {\n                // normalize + validate provider once\n                var normalizedProvider = NormalizeProviderOrThrow(provider);   // üëà\n\n                // For both META_CLOUD and PINNACLE we require a sender id\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                    return ResponseResult.ErrorInfo(\n                        \"‚ùå Campaign has no sender number.\",\n                        \"Missing PhoneNumberId\");\n\n                // Build the right provider instance bound to this business + number\n                var wa = await _providerFactory.CreateAsync(\n                    businessId,\n                    normalizedProvider,\n                    phoneNumberId);\n\n                var res = await action(wa);\n\n                if (!res.Success)\n                    return ResponseResult.ErrorInfo(\"‚ùå WhatsApp API returned an error.\", res.Error, res.RawResponse);\n\n                var rr = ResponseResult.SuccessInfo(\"‚úÖ Message sent successfully\", data: null, raw: res.RawResponse);\n                rr.MessageId = string.IsNullOrWhiteSpace(res.ProviderMessageId)\n                    ? TryExtractMetaWamid(res.RawResponse)\n                    : res.ProviderMessageId;\n                return rr;\n            }\n            catch (ArgumentException ex) // from NormalizeProviderOrThrow\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\", ex.Message);\n            }\n            catch (InvalidOperationException ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Provider configuration error.\", ex.Message);\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Provider call failed.\", ex.Message);\n            }\n        }\n\n        private static string? TryExtractMetaWamid(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return null;\n            var s = raw.TrimStart();\n            if (!s.StartsWith(\"{\")) return null;\n            try\n            {\n                using var doc = System.Text.Json.JsonDocument.Parse(s);\n                if (doc.RootElement.TryGetProperty(\"messages\", out var msgs) &&\n                    msgs.ValueKind == System.Text.Json.JsonValueKind.Array &&\n                    msgs.GetArrayLength() > 0 &&\n                    msgs[0].TryGetProperty(\"id\", out var idProp))\n                {\n                    return idProp.GetString();\n                }\n            }\n            catch { }\n            return null;\n        }\n        // ---------- CSV-materialized variables helpers (for campaign recipients) ----------\n        private static string[] ReadBodyParams(string? json)\n        {\n            if (string.IsNullOrWhiteSpace(json)) return Array.Empty<string>();\n            try\n            {\n                return System.Text.Json.JsonSerializer.Deserialize<string[]>(json) ?? Array.Empty<string>();\n            }\n            catch { return Array.Empty<string>(); }\n        }\n\n        private static Dictionary<string, string> ReadVarDict(string? json)\n        {\n            if (string.IsNullOrWhiteSpace(json))\n                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            try\n            {\n                return System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(json)\n                       ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n            catch\n            {\n                return new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            }\n        }\n\n        private static List<string> BuildHeaderTextParams(IDictionary<string, string> kv)\n        {\n            // Accept either \"header.text.{n}\" or \"headerpara{n}\"\n            var matches = kv.Keys\n                .Select(k => new\n                {\n                    k,\n                    m = System.Text.RegularExpressions.Regex.Match(\n                        k, @\"^(?:header(?:\\.text)?\\.)?(\\d+)$|^header(?:\\.text)?\\.(\\d+)$|^headerpara(\\d+)$\",\n                        System.Text.RegularExpressions.RegexOptions.IgnoreCase)\n                })\n                .Where(x => x.m.Success)\n                .Select(x =>\n                {\n                    // pull the first captured number\n                    for (int g = 1; g < x.m.Groups.Count; g++)\n                        if (x.m.Groups[g].Success) return int.Parse(x.m.Groups[g].Value);\n                    return 0;\n                })\n                .Where(n => n > 0)\n                .Distinct()\n                .OrderBy(n => n)\n                .ToList();\n\n            if (matches.Count == 0) return new List<string>();\n\n            var list = new List<string>(new string[matches.Last()]);\n            for (int i = 1; i <= list.Count; i++)\n            {\n                var k1 = $\"header.text.{i}\";\n                var k2 = $\"headerpara{i}\";\n                if (!kv.TryGetValue(k1, out var v))\n                    kv.TryGetValue(k2, out v);\n                list[i - 1] = v ?? string.Empty;\n            }\n\n            return list;\n        }\n\n        private static IReadOnlyDictionary<string, string> BuildButtonUrlParams(IDictionary<string, string> kv)\n        {\n            // Normalize to \"button{pos}.url_param\"\n            var map = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n            for (int pos = 1; pos <= 3; pos++)\n            {\n                var k1 = $\"button{pos}.url_param\"; // canonical\n                var k2 = $\"buttonpara{pos}\";       // alias fallback\n                if (kv.TryGetValue(k1, out var v1) && !string.IsNullOrWhiteSpace(v1))\n                    map[k1] = v1;\n                else if (kv.TryGetValue(k2, out var v2) && !string.IsNullOrWhiteSpace(v2))\n                    map[k1] = v2;\n            }\n            return map;\n        }\n\n\n        public async Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"üì® Sending template message to {dto.RecipientNumber} via BusinessId {dto.BusinessId}\");\n\n                if (dto.MessageType != MessageTypeEnum.Template)\n                    return ResponseResult.ErrorInfo(\"Only template messages are supported in this method.\");\n\n                // ‚úÖ Validate provider (UPPERCASE only, no normalization)\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                // ‚úÖ Quota\n                var quotaCheck = await _planManager.CheckQuotaBeforeSendingAsync(dto.BusinessId);\n                if (!quotaCheck.Success)\n                {\n                    Console.WriteLine($\"‚ùå Quota check failed: {quotaCheck.Message}\");\n                    return quotaCheck;\n                }\n\n                // ‚úÖ Build template components from dto.TemplateParameters\n                var bodyParams = (dto.TemplateParameters?.Values?.ToList() ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                var components = new List<object>();\n                if (bodyParams.Length > 0)\n                {\n                    components.Add(new { type = \"body\", parameters = bodyParams });\n                }\n\n                // üöÄ Send to provider ‚Äî explicit provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    dto.BusinessId,\n                    dto.Provider, // <-- REQUIRED now\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName!, \"en_US\", components),\n                    dto.PhoneNumberId // <-- optional; relies on default if null\n                );\n\n                // ‚úÖ Build rendered body\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters?.Values.ToList() ?? new List<string>());\n\n                // üìù Log result (store provider raw payload)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = resolvedBody,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse, // <-- not JsonConvert of wrapper\n                    MessageId = sendResult.MessageId,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n\n                // üìâ Decrement remaining quota\n                var planInfo = await _db.BusinessPlanInfos\n                    .FirstOrDefaultAsync(p => p.BusinessId == dto.BusinessId);\n\n                if (planInfo != null && planInfo.RemainingMessages > 0)\n                {\n                    planInfo.RemainingMessages -= 1;\n                    planInfo.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _db.SaveChangesAsync();\n\n                // üì° SignalR push\n                await _hubContext.Clients\n                    .Group($\"business_{dto.BusinessId}\")\n                    .SendAsync(\"ReceiveMessage\", new\n                    {\n                        Id = log.Id,\n                        RecipientNumber = log.RecipientNumber,\n                        MessageContent = log.RenderedBody,\n                        MediaUrl = log.MediaUrl,\n                        Status = log.Status,\n                        CreatedAt = log.CreatedAt,\n                        SentAt = log.SentAt\n                    });\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Template message sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                var errorId = Guid.NewGuid();\n                Console.WriteLine($\"üß® Error ID: {errorId}\\n{ex}\");\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                        dto.TemplateBody ?? \"\",\n                        dto.TemplateParameters?.Values.ToList() ?? new List<string>()),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\n                    $\"‚ùå Exception occurred while sending template message. [Ref: {errorId}]\",\n                    ex.ToString());\n            }\n        }\n\n        //public async Task<ResponseResult> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId)\n        //{\n        //    try\n        //    {\n        //        if (string.IsNullOrWhiteSpace(dto.Provider) || (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n        //            return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\", \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n\n        //        var components = new List<object>();\n\n        //        if (!string.IsNullOrWhiteSpace(dto.HeaderVideoUrl))\n        //        {\n        //            components.Add(new\n        //            {\n        //                type = \"header\",\n        //                parameters = new[] { new { type = \"video\", video = new { link = dto.HeaderVideoUrl! } } }\n        //            });\n        //        }\n\n        //        components.Add(new\n        //        {\n        //            type = \"body\",\n        //            parameters = (dto.TemplateParameters ?? new List<string>())\n        //                .Select(p => new { type = \"text\", text = p })\n        //                .ToArray()\n        //        });\n\n        //        var btns = dto.ButtonParameters ?? new List<CampaignButtonDto>();\n        //        for (int i = 0; i < btns.Count && i < 3; i++)\n        //        {\n        //            var btn = btns[i];\n        //            var subType = btn.ButtonType?.ToLowerInvariant();\n        //            if (string.IsNullOrWhiteSpace(subType)) continue;\n\n        //            var button = new Dictionary<string, object>\n        //            {\n        //                [\"type\"] = \"button\",\n        //                [\"sub_type\"] = subType,\n        //                [\"index\"] = i.ToString()\n        //            };\n\n        //            if (subType == \"quick_reply\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n        //                button[\"parameters\"] = new[] { new { type = \"payload\", payload = btn.TargetUrl! } };\n        //            else if (subType == \"url\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n        //                button[\"parameters\"] = new[] { new { type = \"text\", text = btn.TargetUrl! } };\n\n        //            components.Add(button);\n        //        }\n\n        //        var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n        //        //var sendResult = await SendViaProviderAsync(\n        //        //    businessId,\n        //        //    dto.Provider,\n        //        //    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n        //        //    dto.PhoneNumberId\n        //        //);\n        //        // ‚úÖ build proper WhatsApp payload (language must be an object)\n        //        var payload = new\n        //        {\n        //            messaging_product = \"whatsapp\",\n        //            to = dto.RecipientNumber,\n        //            type = \"template\",\n        //            template = new\n        //            {\n        //                name = dto.TemplateName,\n        //                language = new { code = lang },   // <-- key fix\n        //                components = components\n        //            }\n        //        };\n\n        //        var sendResult = await SendPayloadAsync(\n        //            businessId,\n        //            dto.Provider,\n        //            payload,\n        //            dto.PhoneNumberId\n        //        );\n\n        //        var renderedBody = TemplateParameterHelper.FillPlaceholders(\n        //            dto.TemplateBody ?? \"\",\n        //            dto.TemplateParameters ?? new List<string>());\n\n        //        var log = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = businessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n        //            MediaUrl = dto.HeaderVideoUrl,\n        //            RenderedBody = renderedBody,\n        //            Status = sendResult.Success ? \"Sent\" : \"Failed\",\n        //            ErrorMessage = sendResult.Success ? null : sendResult.Message,\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,\n        //            SentAt = DateTime.UtcNow,\n        //            CreatedAt = DateTime.UtcNow,\n        //            CTAFlowConfigId = dto.CTAFlowConfigId,\n        //            CTAFlowStepId = dto.CTAFlowStepId\n        //        };\n\n        //        await _db.MessageLogs.AddAsync(log);\n        //        await _db.SaveChangesAsync();\n\n        //        return new ResponseResult\n        //        {\n        //            Success = sendResult.Success,\n        //            Message = sendResult.Success ? \"‚úÖ Template sent successfully.\" : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n        //            Data = new { Success = sendResult.Success, MessageId = sendResult.MessageId, LogId = log.Id },\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,\n        //            LogId = log.Id\n        //        };\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        try\n        //        {\n        //            await _db.MessageLogs.AddAsync(new MessageLog\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                RecipientNumber = dto.RecipientNumber,\n        //                MessageContent = dto.TemplateName,\n        //                RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n        //                MediaUrl = dto.HeaderVideoUrl,\n        //                Status = \"Failed\",\n        //                ErrorMessage = ex.Message,\n        //                CreatedAt = DateTime.UtcNow,\n        //                CTAFlowConfigId = dto.CTAFlowConfigId,\n        //                CTAFlowStepId = dto.CTAFlowStepId\n        //            });\n        //            await _db.SaveChangesAsync();\n        //        }\n        //        catch { /* ignore */ }\n\n        //        return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n        //    }\n        //}\n        public async Task<ResponseResult> SendVideoTemplateMessageAsync(VideoTemplateMessageDto dto, Guid businessId)\n        {\n            try\n            {\n                // ‚îÄ‚îÄ 0) Basic validation + normalization\n                var provider = (dto.Provider ?? \"META_CLOUD\").Trim().ToUpperInvariant();\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\", \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n\n                if (string.IsNullOrWhiteSpace(dto.RecipientNumber))\n                    return ResponseResult.ErrorInfo(\"‚ùå Missing recipient number.\");\n\n                if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                    return ResponseResult.ErrorInfo(\"‚ùå Missing template name.\");\n\n                if (string.IsNullOrWhiteSpace(dto.HeaderVideoUrl))\n                    return ResponseResult.ErrorInfo(\"üö´ Missing HeaderVideoUrl (must be a direct HTTPS link to a video file).\");\n\n                var langCode = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!.Trim();\n\n                // ‚îÄ‚îÄ 1) Build WhatsApp components\n                var components = new List<object>();\n\n                // header ‚Üí video\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                new { type = \"video\", video = new { link = dto.HeaderVideoUrl! } }\n                    }\n                });\n\n                // body ‚Üí text params\n                var bodyParams = (dto.TemplateParameters ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                components.Add(new { type = \"body\", parameters = bodyParams });\n\n                // buttons (max 3)\n                var btns = (dto.ButtonParameters ?? new List<CampaignButtonDto>()).Take(3).ToList();\n                for (int i = 0; i < btns.Count; i++)\n                {\n                    var b = btns[i];\n                    var sub = (b.ButtonType ?? \"\").Trim().ToLowerInvariant();\n                    if (string.IsNullOrEmpty(sub)) continue;\n\n                    var button = new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = sub,\n                        [\"index\"] = i.ToString()\n                    };\n\n                    if (sub == \"url\" && !string.IsNullOrWhiteSpace(b.TargetUrl))\n                    {\n                        button[\"parameters\"] = new object[] { new { type = \"text\", text = b.TargetUrl! } };\n                    }\n                    else if (sub == \"quick_reply\" && !string.IsNullOrWhiteSpace(b.TargetUrl))\n                    {\n                        // For quick replies, providers expect a payload string\n                        button[\"parameters\"] = new object[] { new { type = \"payload\", payload = b.TargetUrl! } };\n                    }\n\n                    components.Add(button);\n                }\n\n                // ‚îÄ‚îÄ 2) Full WhatsApp template payload (language is an OBJECT)\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber!,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = dto.TemplateName!,\n                        language = new { code = langCode },  // ‚úÖ required object shape\n                        components = components\n                    }\n                };\n\n                // ‚îÄ‚îÄ 3) Send via provider (pass through PhoneNumberId when supplied)\n                //var sendResult = await _messageEngineService.SendPayloadAsync(\n                //    businessId,\n                //    provider,\n                //    payload,\n                //    dto.PhoneNumberId\n                //);\n                var sendResult = await SendPayloadAsync(businessId, provider, payload, dto.PhoneNumberId);\n                // ‚îÄ‚îÄ 4) Persist message log (best-effort)\n                var renderedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters ?? new List<string>());\n\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber!,\n                    MessageContent = dto.TemplateName!,\n                    MediaUrl = dto.HeaderVideoUrl,        // mirrors header media\n                    RenderedBody = renderedBody,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.ErrorMessage ?? (sendResult.Success ? null : \"WhatsApp API returned an error.\"),\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success ? \"‚úÖ Template sent successfully.\" : (sendResult.ErrorMessage ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new { Success = sendResult.Success, MessageId = sendResult.MessageId, LogId = log.Id },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                // failure log (best effort)\n                try\n                {\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber ?? \"\",\n                        MessageContent = dto.TemplateName ?? \"\",\n                        RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n                        MediaUrl = dto.HeaderVideoUrl,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow,\n                        CTAFlowConfigId = dto.CTAFlowConfigId,\n                        CTAFlowStepId = dto.CTAFlowStepId\n                    });\n                    await _db.SaveChangesAsync();\n                }\n                catch { /* ignore */ }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n            }\n        }\n\n        private async Task<IReadOnlyList<WhatsAppSettingEntity>> GetBusinessWhatsAppSettingsAsync(Guid businessId)\n        {\n            if (_settingsCache.TryGetValue(businessId, out var cached) && cached.expiresAt > DateTime.UtcNow)\n                return cached.setting;\n\n            // Load all settings rows for this business (supports multiple providers)\n            var items = await _db.WhatsAppSettings\n                .Where(s => s.BusinessId == businessId)\n                .ToListAsync();\n\n            if (items == null || items.Count == 0)\n                throw new Exception(\"WhatsApp settings not found.\");\n\n            var ro = items.AsReadOnly();\n            _settingsCache[businessId] = (ro, DateTime.UtcNow.AddMinutes(5));\n            return ro;\n        }\n\n\n        public async Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto)\n        {\n            try\n            {\n                var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                    ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId from context.\");\n\n                // --- Resolve/validate provider & sender -------------------------------\n                // Normalize inbound (trim+upper) but DO NOT silently map unknown values\n                string? provider = dto.Provider?.Trim().ToUpperInvariant();\n                string? phoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId)\n                    ? null\n                    : dto.PhoneNumberId!.Trim();\n\n                // If provider not supplied, try to resolve from active settings:\n                // - Prefer a row that already has a default sender (PhoneNumberId not null)\n                // - If multiple rows and none has default, ask the caller to specify\n                xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity? chosenSetting = null;\n\n                if (string.IsNullOrWhiteSpace(provider))\n                {\n                    var candidates = await _db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(s => s.BusinessId == businessId && s.IsActive)\n                        .OrderByDescending(s => s.PhoneNumberId != null)          // prefer defaulted\n                        //.ThenByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n                        .ThenByDescending(s => (s.UpdatedAt > s.CreatedAt ? s.UpdatedAt : s.CreatedAt))\n\n                        .ToListAsync();\n\n                    if (candidates.Count == 0)\n                        return ResponseResult.ErrorInfo(\"‚ùå WhatsApp settings not found for this business.\");\n\n                    if (candidates.Count > 1 && candidates.All(s => s.PhoneNumberId == null))\n                        return ResponseResult.ErrorInfo(\"‚ùå Multiple providers are active but no default sender is set. Please pass Provider (PINNACLE/META_CLOUD) or set a Default number.\");\n\n                    chosenSetting = candidates[0];\n                    provider = (chosenSetting.Provider ?? \"\").Trim().ToUpperInvariant();\n                    if (string.IsNullOrWhiteSpace(phoneNumberId) && !string.IsNullOrWhiteSpace(chosenSetting.PhoneNumberId))\n                        phoneNumberId = chosenSetting.PhoneNumberId!.Trim();\n                }\n\n                // Final provider check (must be one of the two)\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    return ResponseResult.ErrorInfo(\n                        \"‚ùå Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\"\n                    );\n                }\n\n                // If provider was supplied but no sender, we can still inherit the default\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                {\n                    // Try to find a default sender for the chosen provider\n                    var defaultRow = await _db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(s => s.BusinessId == businessId &&\n                                    s.IsActive &&\n                                    s.Provider == provider &&\n                                    s.PhoneNumberId != null)\n                        .OrderByDescending(s => (s.UpdatedAt > s.CreatedAt ? s.UpdatedAt : s.CreatedAt))\n\n                        //.OrderByDescending(s => s.UpdatedAt ?? s.CreatedAt)\n\n                        .FirstOrDefaultAsync();\n\n                    if (defaultRow != null)\n                        phoneNumberId = defaultRow.PhoneNumberId!.Trim();\n                }\n                // ----------------------------------------------------------------------\n\n                Guid? contactId = null;\n\n                // 1) Try to find contact by business + phone (indexed)\n                var contact = await _db.Contacts.FirstOrDefaultAsync(c =>\n                    c.BusinessId == businessId && c.PhoneNumber == dto.RecipientNumber);\n\n                if (contact != null)\n                {\n                    // 2) Touch last-contacted when reusing an existing contact\n                    contactId = contact.Id;\n                    contact.LastContactedAt = DateTime.UtcNow;\n                }\n                else if (dto.IsSaveContact)\n                {\n                    // 3) Create a new contact if requested\n                    contact = new Contact\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        Name = \"WhatsApp User\",\n                        PhoneNumber = dto.RecipientNumber,\n                        CreatedAt = DateTime.UtcNow,\n                        LastContactedAt = DateTime.UtcNow\n                    };\n                    _db.Contacts.Add(contact);\n                    contactId = contact.Id;\n                }\n\n                // 4) Persist contact changes (create or timestamp update)\n                await _db.SaveChangesAsync();\n\n                // üöÄ Send via provider ‚Äî explicit provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    provider!,                                                     // validated value\n                    p => p.SendTextAsync(dto.RecipientNumber, dto.TextContent),\n                    phoneNumberId                                                  // optional\n                );\n\n                // üîé Extract provider message id (fallback to Meta messages[0].id if needed)\n                string? messageId = sendResult.MessageId;\n                if (string.IsNullOrWhiteSpace(messageId) && !string.IsNullOrWhiteSpace(sendResult.RawResponse))\n                {\n                    try\n                    {\n                        var raw = sendResult.RawResponse!.TrimStart();\n                        if (raw.StartsWith(\"{\"))\n                        {\n                            using var parsed = System.Text.Json.JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var msgs)\n                                && msgs.ValueKind == System.Text.Json.JsonValueKind.Array\n                                && msgs.GetArrayLength() > 0\n                                && msgs[0].TryGetProperty(\"id\", out var idProp))\n                            {\n                                messageId = idProp.GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è JSON parsing failed: {ex.Message} | Raw: {sendResult.RawResponse}\");\n                    }\n                }\n\n                // üìù Log the message\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                // üîó Optional campaign mapping\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"üì¶ CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                                ? \"‚úÖ Text message sent successfully.\"\n                                : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception in SendTextDirectAsync: {ex.Message}\");\n\n                try\n                {\n                    var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                        ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"‚ùå Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send text message.\", ex.ToString());\n            }\n        }\n\n        public async Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto)\n        {\n            try\n            {\n                var businessId =\n                    dto.BusinessId != Guid.Empty\n                        ? dto.BusinessId\n                        : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                          ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId from context or DTO.\");\n\n                // ‚úÖ Validate provider (no server-side normalization)\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                Guid? contactId = null;\n                try\n                {\n                    var contact = await _contactService.FindOrCreateAsync(businessId, dto.RecipientNumber);\n                    contactId = contact.Id;\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"‚ö†Ô∏è Failed to resolve or create contact: {ex.Message}\");\n                }\n\n                // üöÄ Send via provider ‚Äî explicit provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    dto.Provider,\n                    p => p.SendTextAsync(dto.RecipientNumber, dto.TextContent),\n                    dto.PhoneNumberId\n                );\n\n                // üîé Try to get a provider message id (use provider-provided id first, then Meta fallback)\n                string? messageId = sendResult.MessageId;\n                var raw = sendResult.RawResponse;\n                if (string.IsNullOrWhiteSpace(messageId) && !string.IsNullOrWhiteSpace(raw))\n                {\n                    try\n                    {\n                        var s = raw.TrimStart();\n                        if (s.StartsWith(\"{\"))\n                        {\n                            using var parsed = JsonDocument.Parse(s);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var messages) &&\n                                messages.ValueKind == JsonValueKind.Array &&\n                                messages.GetArrayLength() > 0 &&\n                                messages[0].TryGetProperty(\"id\", out var idProp))\n                            {\n                                messageId = idProp.GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è JSON parsing failed: {ex.Message} | Raw: {raw}\");\n                    }\n                }\n\n                // üìù Log result (store raw provider payload; don‚Äôt serialize the wrapper)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"üì¶ CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"‚úÖ Text message sent successfully.\"\n                        : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception in SendAutomationReply: {ex.Message}\");\n\n                try\n                {\n                    var businessId =\n                        dto.BusinessId != Guid.Empty\n                            ? dto.BusinessId\n                            : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                              ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"‚ùå Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send text message.\", ex.ToString());\n            }\n        }\n        public async Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto)\n        {\n            try\n            {\n                // 0) Soft-resolve provider & sender (no hard early return)\n                var provider = (dto.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                var phoneNumberId = dto.PhoneNumberId;\n\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    // Try active WhatsAppSettings first (usually the ‚Äúcurrent‚Äù sender)\n                    var ws = await _db.WhatsAppSettings\n                        .AsNoTracking()\n                        .Where(x => x.BusinessId == businessId && x.IsActive)\n                        .OrderByDescending(x => x.UpdatedAt ?? x.CreatedAt)\n                        .FirstOrDefaultAsync();\n\n                    if (ws != null)\n                    {\n                        provider = (ws.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                        if (string.IsNullOrWhiteSpace(phoneNumberId))\n                            phoneNumberId = ws.PhoneNumberId;\n                    }\n\n                    // Fallback to WhatsAppPhoneNumbers (prefer default, then stable order)\n                    if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    {\n                        var pn = await _db.WhatsAppPhoneNumbers\n                            .AsNoTracking()\n                            .Where(n => n.BusinessId == businessId && n.IsActive)\n                            .OrderByDescending(n => n.IsDefault)\n                            .ThenBy(n => n.WhatsAppBusinessNumber)\n                            .Select(n => new { n.Provider, n.PhoneNumberId })\n                            .FirstOrDefaultAsync();\n\n                        if (pn != null)\n                        {\n                            provider = (pn.Provider ?? string.Empty).Trim().ToUpperInvariant();\n                            if (string.IsNullOrWhiteSpace(phoneNumberId))\n                                phoneNumberId = pn.PhoneNumberId;\n                        }\n                    }\n                }\n\n                // If still unknown, fail clearly (we tried our best)\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Missing provider.\",\n                        \"No active WhatsApp sender found. Configure a PINNACLE or META_CLOUD sender for this business.\");\n                }\n\n                // 1) Build minimal components (body only)\n                var components = new List<object>();\n                var parameters = (dto.TemplateParameters ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                if (parameters.Length > 0)\n                {\n                    components.Add(new { type = \"body\", parameters });\n                }\n\n                // 2) Always send via provider ‚Äî explicit provider + sender override (if given/resolved)\n                var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n                _logger?.LogInformation(\"‚û°Ô∏è SEND-INTENT tmpl={Template} to={To} provider={Provider} pnid={PhoneNumberId}\",\n                    dto.TemplateName, dto.RecipientNumber, provider, phoneNumberId ?? \"(default)\");\n\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    provider, // explicit, resolved above\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n                    phoneNumberId // explicit; lets the adapter pick the correct sender\n                );\n\n                // 3) Log message (store provider raw response, not the whole wrapper)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                        dto.TemplateBody ?? string.Empty,\n                        dto.TemplateParameters ?? new List<string>()),\n\n                    // Optional flow context from DTO (if this simple send was triggered by a flow)\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n\n                    // Helpful for downstream analysis\n                    Provider = provider,\n                    ProviderMessageId = sendResult.MessageId,\n\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null,\n                    CreatedAt = DateTime.UtcNow,\n                    Source = \"api\" // or \"simple_send\"\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"‚úÖ Template sent successfully.\"\n                        : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = sendResult.MessageId,\n                        LogId = log.Id\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                // Best-effort failure log\n                try\n                {\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TemplateName,\n                        RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                            dto.TemplateBody ?? string.Empty,\n                            dto.TemplateParameters ?? new List<string>()),\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow,\n                        Source = \"api\"\n                    });\n                    await _db.SaveChangesAsync();\n                }\n                catch { /* ignore log errors */ }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n            }\n        }\n\n\n        //public async Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto)\n        //{\n        //    try\n        //    {\n        //        // 0) Validate provider (no server-side normalization)\n        //        if (string.IsNullOrWhiteSpace(dto.Provider) ||\n        //            (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n        //        {\n        //            return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n        //                \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n        //        }\n\n        //        // 1) Build minimal components (body only)\n        //        var components = new List<object>();\n        //        var parameters = (dto.TemplateParameters ?? new List<string>())\n        //            .Select(p => new { type = \"text\", text = p })\n        //            .ToArray();\n\n        //        if (parameters.Length > 0)\n        //        {\n        //            components.Add(new { type = \"body\", parameters });\n        //        }\n\n        //        // 2) Send via provider ‚Äî explicit provider + optional sender override\n        //        var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n        //        var sendResult = await SendViaProviderAsync(\n        //            businessId,\n        //            dto.Provider, // <-- explicit provider\n        //            p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n        //            dto.PhoneNumberId // <-- optional sender override\n        //        );\n\n        //        // 3) Log message (store provider raw response, not the whole wrapper)\n        //        var log = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = businessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n        //            RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n        //            Status = sendResult.Success ? \"Sent\" : \"Failed\",\n        //            ErrorMessage = sendResult.Success ? null : sendResult.Message,\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,     // capture if available\n        //            SentAt = DateTime.UtcNow,\n        //            CreatedAt = DateTime.UtcNow\n        //        };\n\n        //        await _db.MessageLogs.AddAsync(log);\n        //        await _db.SaveChangesAsync();\n\n        //        return new ResponseResult\n        //        {\n        //            Success = sendResult.Success,\n        //            Message = sendResult.Success\n        //                ? \"‚úÖ Template sent successfully.\"\n        //                : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n        //            Data = new\n        //            {\n        //                Success = sendResult.Success,\n        //                MessageId = sendResult.MessageId,\n        //                LogId = log.Id\n        //            },\n        //            RawResponse = sendResult.RawResponse,\n        //            MessageId = sendResult.MessageId,\n        //            LogId = log.Id\n        //        };\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        // Best-effort failure log\n        //        try\n        //        {\n        //            await _db.MessageLogs.AddAsync(new MessageLog\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                RecipientNumber = dto.RecipientNumber,\n        //                MessageContent = dto.TemplateName,\n        //                RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n        //                Status = \"Failed\",\n        //                ErrorMessage = ex.Message,\n        //                CreatedAt = DateTime.UtcNow\n        //            });\n        //            await _db.SaveChangesAsync();\n        //        }\n        //        catch { /* ignore log errors */ }\n\n        //        return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n        //    }\n        //}\n\n        public async Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string sentBy)\n        {\n            try\n            {\n                var campaign = await _db.Campaigns\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign not found or unauthorized.\");\n\n                var recipients = await _db.CampaignRecipients\n                    .Include(r => r.Contact)\n                    .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                    .ToListAsync();\n\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ö†Ô∏è No recipients assigned to this campaign.\");\n\n                if (string.IsNullOrWhiteSpace(campaign.ImageCaption))\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign caption (ImageCaption) is required.\");\n\n                var validButtons = campaign.MultiButtons\n                    ?.Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Select(b => new CtaButtonDto { Title = b.Title, Value = b.Value })\n                    .ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå At least one CTA button with a valid title is required.\");\n\n                int successCount = 0, failCount = 0;\n\n                foreach (var recipient in recipients)\n                {\n                    if (recipient.Contact == null || string.IsNullOrWhiteSpace(recipient.Contact.PhoneNumber))\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Skipping invalid contact: {recipient.Id}\");\n                        failCount++;\n                        continue;\n                    }\n\n                    var dto = new SendMessageDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageType = MessageTypeEnum.Image,\n                        MediaUrl = campaign.ImageUrl,\n                        TextContent = campaign.MessageTemplate,\n                        CtaButtons = validButtons,\n\n                        CampaignId = campaign.Id,\n                        SourceModule = \"image-campaign\",\n                        CustomerId = recipient.Contact.Id.ToString(),\n                        CustomerName = recipient.Contact.Name,\n                        CustomerPhone = recipient.Contact.PhoneNumber,\n                        CTATriggeredFrom = \"campaign\"\n                    };\n\n                    var result = await SendImageWithCtaAsync(dto);\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.Contact.Id,\n                        RecipientId = recipient.Id,\n                        MessageLogId = result?.LogId,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = sentBy,\n                        BusinessId = businessId,\n                    };\n\n                    await _db.CampaignSendLogs.AddAsync(sendLog);\n\n                    if (result.Success) successCount++;\n                    else failCount++;\n                }\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo($\"‚úÖ Campaign sent.\\nüì§ Success: {successCount}, ‚ùå Failed: {failCount}\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Error sending image campaign: {ex.Message}\");\n                return ResponseResult.ErrorInfo(\"‚ùå Unexpected error while sending image campaign.\", ex.ToString());\n            }\n        }\n        // Features/MessageManagement/Services/MessageEngineService.cs\n        /// <summary>\n        /// Sends a TEMPLATE campaign using CSV-materialized variables stored on CampaignRecipients:\n        /// - ResolvedParametersJson (string[] for body {{n}})\n        /// - ResolvedButtonUrlsJson (dict for header.text.{n} and button{pos}.url_param)\n        /// Uses campaign-level HeaderKind + HeaderMediaUrl for media headers.\n        /// </summary>\n        // Sends a TEMPLATE campaign using materialized per-recipient values from CSV.\n        // - Reads CampaignRecipients.ResolvedParametersJson (string[] for body {{n}})\n        // - Reads CampaignRecipients.ResolvedButtonUrlsJson (dict: \"button{1..3}.url_param\", optional \"header.image_url\")\n        // - Uses Campaign.ImageUrl as header media if present; otherwise uses header.image_url from the dict if provided.\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId, Guid businessId, string sentBy)\n        {\n            try\n            {\n                // 1) Load campaign (minimal fields we need)\n                var campaign = await _db.Campaigns\n                    .AsNoTracking()\n                    .Where(c => c.Id == campaignId && c.BusinessId == businessId)\n                    .Select(c => new\n                    {\n                        c.Id,\n                        c.BusinessId,\n                        c.MessageTemplate,\n                        c.TemplateId,\n                        c.Provider,\n                        c.PhoneNumberId,\n                        c.ImageUrl // used as header media if template expects image\n                    })\n                    .FirstOrDefaultAsync();\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign not found or unauthorized.\");\n\n                // Template name\n                var templateName = !string.IsNullOrWhiteSpace(campaign.TemplateId)\n                    ? campaign.TemplateId!\n                    : (campaign.MessageTemplate ?? \"\").Trim();\n\n                if (string.IsNullOrWhiteSpace(templateName))\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign has no template selected.\");\n\n                // 2) Determine language (fallback en_US)\n                var lang = await _db.WhatsAppTemplates\n                    .AsNoTracking()\n                    .Where(w => w.BusinessId == businessId && w.Name == templateName)\n                    .OrderByDescending(w => (w.UpdatedAt > w.CreatedAt ? w.UpdatedAt : w.CreatedAt))\n                    .Select(w => w.Language)\n                    .FirstOrDefaultAsync();\n\n                if (string.IsNullOrWhiteSpace(lang)) lang = \"en_US\";\n\n                // 3) Load recipients with materialized vars + phone\n                var recipients = await _db.CampaignRecipients\n                    .AsNoTracking()\n                    .Include(r => r.AudienceMember)\n                    .Include(r => r.Contact) // optional fallback for phone\n                    .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                    .Select(r => new\n                    {\n                        r.Id,\n                        r.ResolvedParametersJson,   // string[]\n                        r.ResolvedButtonUrlsJson,   // dict\n                        Phone = r.AudienceMember != null && !string.IsNullOrEmpty(r.AudienceMember.PhoneE164)\n                                ? r.AudienceMember.PhoneE164\n                                : (r.Contact != null ? r.Contact.PhoneNumber : null)\n                    })\n                    .ToListAsync();\n\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ö†Ô∏è No recipients materialized for this campaign.\");\n\n                // 4) Provider and sender validation (no normalization here)\n                var provider = (campaign.Provider ?? \"\").Trim().ToUpperInvariant();\n                if (provider != \"PINNACLE\" && provider != \"META_CLOUD\")\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider on campaign. Must be 'PINNACLE' or 'META_CLOUD'.\");\n\n                var phoneNumberId = string.IsNullOrWhiteSpace(campaign.PhoneNumberId)\n                    ? null\n                    : campaign.PhoneNumberId!.Trim();\n\n                if (string.IsNullOrWhiteSpace(phoneNumberId))\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign has no sender number (PhoneNumberId).\");\n\n                int success = 0, fail = 0;\n\n                foreach (var r in recipients)\n                {\n                    if (string.IsNullOrWhiteSpace(r.Phone))\n                    {\n                        fail++;\n                        continue;\n                    }\n\n                    // Deserialize materialized values\n                    string[] bodyParams;\n                    try\n                    {\n                        bodyParams = string.IsNullOrWhiteSpace(r.ResolvedParametersJson)\n                            ? Array.Empty<string>()\n                            : System.Text.Json.JsonSerializer.Deserialize<string[]>(r.ResolvedParametersJson!) ?? Array.Empty<string>();\n                    }\n                    catch { bodyParams = Array.Empty<string>(); }\n\n                    Dictionary<string, string> buttonVars;\n                    try\n                    {\n                        buttonVars = string.IsNullOrWhiteSpace(r.ResolvedButtonUrlsJson)\n                            ? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)\n                            : System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(r.ResolvedButtonUrlsJson!)\n                              ?? new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n                    }\n                    catch\n                    {\n                        buttonVars = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n                    }\n\n                    // 5) Build WhatsApp components\n                    var components = new List<object>();\n\n                    // Header (image) ‚Äî priority: Campaign.ImageUrl -> header.image_url in dict\n                    var headerImage = !string.IsNullOrWhiteSpace(campaign.ImageUrl) ? campaign.ImageUrl\n                                   : (buttonVars.TryGetValue(\"header.image_url\", out var hv) && !string.IsNullOrWhiteSpace(hv) ? hv : null);\n\n                    if (!string.IsNullOrWhiteSpace(headerImage))\n                    {\n                        components.Add(new\n                        {\n                            type = \"header\",\n                            parameters = new object[]\n                            {\n                        new { type = \"image\", image = new { link = headerImage! } }\n                            }\n                        });\n                    }\n\n                    // Body params\n                    if (bodyParams.Length > 0)\n                    {\n                        var bp = bodyParams.Select(p => new { type = \"text\", text = p ?? \"\" }).ToArray();\n                        components.Add(new { type = \"body\", parameters = bp });\n                    }\n\n                    // Dynamic URL buttons (button{1..3}.url_param)\n                    for (int pos = 1; pos <= 3; pos++)\n                    {\n                        var key = $\"button{pos}.url_param\";\n                        if (buttonVars.TryGetValue(key, out var urlParam) && !string.IsNullOrWhiteSpace(urlParam))\n                        {\n                            components.Add(new\n                            {\n                                type = \"button\",\n                                sub_type = \"url\",\n                                index = (pos - 1).ToString(), // Meta expects 0-based string index\n                                parameters = new object[] { new { type = \"text\", text = urlParam } }\n                            });\n                        }\n                    }\n\n                    // 6) Full payload\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = r.Phone!,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = lang },\n                            components = components\n                        }\n                    };\n\n                    // 7) Send via provider\n                    var result = await SendPayloadAsync(businessId, provider, payload, phoneNumberId);\n                    if (result.Success) success++; else fail++;\n\n                    // OPTIONAL: you can write a CampaignSendLog here, mirroring your image path.\n                    // (Omitted to keep this tight; add if you want parity with image campaigns)\n                }\n\n                return ResponseResult.SuccessInfo($\"‚úÖ Template campaign sent. üì§ Success: {success}, ‚ùå Failed: {fail}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Error sending template campaign.\", ex.ToString());\n            }\n        }\n\n\n\n\n\n        public async Task<ResponseResult> SendImageWithCtaAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"üì§ Sending image+CTA to {dto.RecipientNumber}\");\n\n                // ‚úÖ Validate inputs\n                if (string.IsNullOrWhiteSpace(dto.TextContent))\n                    return ResponseResult.ErrorInfo(\"‚ùå Image message caption (TextContent) cannot be empty.\");\n\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                // ‚úÖ CTA buttons (1‚Äì3)\n                var validButtons = dto.CtaButtons?\n                    .Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"reply\",\n                        reply = new\n                        {\n                            id = $\"btn_{index + 1}_{Guid.NewGuid():N}\".Substring(0, 16),\n                            title = btn.Title\n                        }\n                    })\n                    .ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå At least one CTA button with a valid title is required.\");\n\n                // üì¶ Interactive payload (Meta-friendly; other providers can proxy)\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"interactive\",\n                    interactive = new\n                    {\n                        type = \"button\",\n                        body = new { text = dto.TextContent },\n                        action = new { buttons = validButtons }\n                    },\n                    image = string.IsNullOrWhiteSpace(dto.MediaUrl) ? null : new { link = dto.MediaUrl }\n                };\n\n                // üöÄ Send via provider ‚Äî EXPLICIT provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    dto.BusinessId,\n                    dto.Provider,\n                    p => p.SendInteractiveAsync(payload),\n                    dto.PhoneNumberId  // null ‚Üí use provider‚Äôs default sender\n                );\n\n                // üîé MessageId: provider id first, then Meta fallback\n                string? messageId = sendResult.MessageId;\n                if (string.IsNullOrWhiteSpace(messageId) && !string.IsNullOrWhiteSpace(sendResult.RawResponse))\n                {\n                    try\n                    {\n                        var raw = sendResult.RawResponse.TrimStart();\n                        if (raw.StartsWith(\"{\"))\n                        {\n                            using var doc = System.Text.Json.JsonDocument.Parse(raw);\n                            if (doc.RootElement.TryGetProperty(\"messages\", out var msgs) &&\n                                msgs.ValueKind == System.Text.Json.JsonValueKind.Array &&\n                                msgs.GetArrayLength() > 0 &&\n                                msgs[0].TryGetProperty(\"id\", out var idProp))\n                            {\n                                messageId = idProp.GetString();\n                            }\n                        }\n                    }\n                    catch { /* best-effort */ }\n                }\n\n                // üìù Log (store RAW provider payload)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image with CTA]\",\n                    RenderedBody = dto.TextContent ?? \"\",\n                    MediaUrl = dto.MediaUrl,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"‚úÖ Image+CTA message sent.\"\n                        : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new\n                    {\n                        Success = sendResult.Success,\n                        MessageId = messageId,\n                        LogId = log.Id\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Exception in SendImageWithCtaAsync: \" + ex.Message);\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image CTA Failed]\",\n                    RenderedBody = dto.TextContent ?? \"[Failed image CTA]\",\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send image+CTA.\", ex.ToString());\n            }\n        }\n\n\n        public async Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId)\n        {\n            try\n            {\n                // ‚úÖ Validate provider (no normalization here)\n                if (string.IsNullOrWhiteSpace(dto.Provider) ||\n                    (dto.Provider != \"PINNACLE\" && dto.Provider != \"META_CLOUD\"))\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid provider.\",\n                        \"Provider must be exactly 'PINNACLE' or 'META_CLOUD'.\");\n                }\n\n                // 1) Build components\n                var components = new List<object>();\n\n                if (!string.IsNullOrWhiteSpace(dto.HeaderImageUrl))\n                {\n                    components.Add(new\n                    {\n                        type = \"header\",\n                        parameters = new[]\n                        {\n                    new { type = \"image\", image = new { link = dto.HeaderImageUrl! } }\n                }\n                    });\n                }\n\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = (dto.TemplateParameters ?? new List<string>())\n                        .Select(p => new { type = \"text\", text = p })\n                        .ToArray()\n                });\n\n                // Buttons (dynamic up to 3; null-safe)\n                var btns = dto.ButtonParameters ?? new List<CampaignButtonDto>();\n                for (int i = 0; i < btns.Count && i < 3; i++)\n                {\n                    var btn = btns[i];\n                    var subType = btn.ButtonType?.ToLowerInvariant();\n                    if (string.IsNullOrWhiteSpace(subType)) continue;\n\n                    var button = new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subType,\n                        [\"index\"] = i.ToString()\n                    };\n\n                    if (subType == \"quick_reply\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    {\n                        button[\"parameters\"] = new[] { new { type = \"payload\", payload = btn.TargetUrl! } };\n                    }\n                    else if (subType == \"url\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    {\n                        button[\"parameters\"] = new[] { new { type = \"text\", text = btn.TargetUrl! } };\n                    }\n\n                    components.Add(button);\n                }\n\n                var lang = string.IsNullOrWhiteSpace(dto.LanguageCode) ? \"en_US\" : dto.LanguageCode!;\n\n                // 2) Send via provider ‚Äî EXPLICIT provider + optional sender override\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    dto.Provider,\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, lang, components),\n                    dto.PhoneNumberId // null => provider default sender\n                );\n\n                // 3) Build rendered body\n                var renderedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters ?? new List<string>());\n\n                // 4) Log raw provider payload and message id (if any)\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    MediaUrl = dto.HeaderImageUrl,\n                    RenderedBody = renderedBody,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,     // store raw provider payload, not wrapper\n                    MessageId = sendResult.MessageId,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return new ResponseResult\n                {\n                    Success = sendResult.Success,\n                    Message = sendResult.Success\n                        ? \"‚úÖ Image template sent successfully.\"\n                        : (sendResult.Message ?? \"‚ùå WhatsApp API returned an error.\"),\n                    Data = new { Success = sendResult.Success, MessageId = sendResult.MessageId, LogId = log.Id },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = sendResult.MessageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n                    MediaUrl = dto.HeaderImageUrl,\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n                return ResponseResult.ErrorInfo(\"‚ùå Error sending image template.\", ex.ToString());\n            }\n        }\n\n        public async Task<IEnumerable<RecentMessageLogDto>> GetLogsByBusinessIdAsync(Guid businessId)\n        {\n            var logs = await _db.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(1000)\n                .Select(m => new RecentMessageLogDto\n                {\n                    Id = m.Id,\n                    RecipientNumber = m.RecipientNumber,\n                    MessageContent = m.MessageContent,\n                    Status = m.Status,\n                    CreatedAt = m.CreatedAt,\n                    SentAt = m.SentAt,\n                    ErrorMessage = m.ErrorMessage\n                })\n                .ToListAsync();\n\n            return logs;\n        }\n\n        public Task<ResponseResult> SendDocumentTemplateMessageAsync(DocumentTemplateMessageDto dto, Guid businessId)\n        {\n            throw new NotImplementedException();\n        }\n    \n    }\n}\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/TemplateMessageSender.cs",
      "sha256": "aace58451c410bc1a2b7a362097cf9f2f61e343e8bb4abdfb53b2f0479cbd4a0",
      "language": "csharp",
      "size": 8300,
      "content": "// üìÑ File: Features/MessagesEngine/Services/TemplateMessageSender.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\n\n//using xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class TemplateMessageSender : ITemplateMessageSender\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<TemplateMessageSender> _logger;\n        private readonly IWhatsAppTemplateFetcherService _templateService;\n\n        public TemplateMessageSender(\n            AppDbContext db,\n            HttpClient httpClient,\n            ILogger<TemplateMessageSender> logger,\n            IWhatsAppTemplateFetcherService templateService)\n        {\n            _db = db;\n            _httpClient = httpClient;\n            _logger = logger;\n            _templateService = templateService;\n        }\n\n        public async Task<ResponseResult> SendTemplateMessageToContactAsync(\n            Guid businessId,\n            Contact contact,\n            string templateName,\n            List<string> templateParams,\n            string? imageUrl = null,\n            List<CampaignButton>? buttons = null,\n            string? source = null,\n            Guid? refMessageId = null)\n        {\n            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(s => s.BusinessId == businessId && s.IsActive);\n            if (setting == null)\n                return ResponseResult.ErrorInfo(\"WhatsApp settings not found for this business.\");\n\n            var template = await _templateService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n            if (template == null)\n                return ResponseResult.ErrorInfo(\"Template not found or invalid.\");\n\n            var payload = new Dictionary<string, object>\n            {\n                [\"messaging_product\"] = \"whatsapp\",\n                [\"to\"] = contact.PhoneNumber,\n                [\"type\"] = \"template\",\n                [\"template\"] = new\n                {\n                    name = template.Name,\n                    language = new { code = template.Language },\n                    components = BuildTemplateComponents(template, templateParams, imageUrl, buttons)\n                }\n            };\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiKey);\n            var json = JsonSerializer.Serialize(payload);\n            var response = await _httpClient.PostAsync(\n                $\"{setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\"}/{setting.PhoneNumberId}/messages\",\n                new StringContent(json, Encoding.UTF8, \"application/json\"));\n\n            var responseBody = await response.Content.ReadAsStringAsync();\n            var status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\";\n\n            await _db.MessageLogs.AddAsync(new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contact.Id,\n                MessageContent = template.Name,\n                MediaUrl = imageUrl,\n                Status = status,\n                RawResponse = responseBody,\n                ErrorMessage = response.IsSuccessStatusCode ? null : responseBody,\n                Source = source,\n                RefMessageId = refMessageId,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = DateTime.UtcNow\n            });\n\n            await _db.SaveChangesAsync();\n            return response.IsSuccessStatusCode\n                ? ResponseResult.SuccessInfo(\"‚úÖ Message sent successfully\", null, responseBody)\n                : ResponseResult.ErrorInfo(\"‚ùå Message failed\", null, responseBody);\n\n        }\n\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign)\n        {\n            if (campaign == null || campaign.IsDeleted)\n                return ResponseResult.ErrorInfo(\"Invalid or deleted campaign.\");\n\n            var contacts = await _db.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaign.Id && r.Contact != null)\n                .ToListAsync();\n\n            if (!contacts.Any())\n                return ResponseResult.ErrorInfo(\"No contacts found for this campaign.\");\n\n            var templateName = campaign.TemplateId;\n            var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n            var templateMeta = await _templateService.GetTemplateByNameAsync(campaign.BusinessId, templateName, includeButtons: true);\n\n            if (templateMeta == null)\n                return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n\n            int success = 0, failed = 0;\n\n            foreach (var r in contacts)\n            {\n                var result = await SendTemplateMessageToContactAsync(\n                    campaign.BusinessId,\n                    r.Contact,\n                    templateName,\n                    templateParams,\n                    campaign.ImageUrl,\n                    campaign.MultiButtons?.ToList(),\n                    source: \"campaign\",\n                    refMessageId: campaign.Id);\n\n                await _db.CampaignSendLogs.AddAsync(new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = r.ContactId,\n                    RecipientId = r.Id,\n                    MessageBody = campaign.MessageBody ?? templateName,\n                    TemplateId = templateName,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CreatedBy = campaign.CreatedBy\n                });\n\n                if (result.Success) success++;\n                else failed++;\n            }\n\n            await _db.SaveChangesAsync();\n            return ResponseResult.SuccessInfo($\"üì§ Sent to {success}, ‚ùå Failed for {failed}.\");\n        }\n\n        private List<object> BuildTemplateComponents(\n            TemplateMetadataDto template,\n            List<string> paramsList,\n            string? imageUrl,\n            List<CampaignButton>? buttons)\n        {\n            var components = new List<object>();\n\n            if (template.HasImageHeader && !string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[] { new { type = \"image\", image = new { link = imageUrl } } }\n                });\n            }\n\n            if (paramsList.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = paramsList.Select(p => new { type = \"text\", text = p }).ToList()\n                });\n            }\n\n            if (buttons != null && buttons.Any())\n            {\n                for (int i = 0; i < buttons.Count; i++)\n                {\n                    var btn = buttons[i];\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type?.ToLower() == \"url\" ? \"url\" : \"quick_reply\",\n                        index = i.ToString(),\n                        parameters = new[] {\n                            new {\n                                type = \"text\",\n                                text = btn.Value ?? btn.Title\n                            }\n                        }\n                    });\n                }\n            }\n\n            return components;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Validators/ValidateMessageDtoAttribute.cs",
      "sha256": "9b7355295c8cecdf6c4416a324d05f0910b3ff67e99fd35e04e397f715096a9b",
      "language": "csharp",
      "size": 1760,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs.Validation\n{\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\n    public class ValidateMessageDtoAttribute : ValidationAttribute\n    {\n        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)\n        {\n            if (value is not SendMessageDto dto)\n                return ValidationResult.Success;\n\n            switch (dto.MessageType)\n            {\n                case MessageTypeEnum.Text:\n                    if (string.IsNullOrWhiteSpace(dto.TextContent))\n                        return new ValidationResult(\"TextContent is required for text messages.\", new[] { nameof(dto.TextContent) });\n                    break;\n\n                case MessageTypeEnum.Image:\n                    if (string.IsNullOrWhiteSpace(dto.MediaUrl))\n                        return new ValidationResult(\"MediaUrl is required for image messages.\", new[] { nameof(dto.MediaUrl) });\n                    break;\n\n                case MessageTypeEnum.Template:\n                    if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                        return new ValidationResult(\"TemplateName is required for template messages.\", new[] { nameof(dto.TemplateName) });\n                    break;\n\n                case MessageTypeEnum.Cta:\n                    if (dto.CtaButtons == null || dto.CtaButtons.Count == 0)\n                        return new ValidationResult(\"CtaButtons is required for CTA messages.\", new[] { nameof(dto.CtaButtons) });\n                    break;\n            }\n\n            return ValidationResult.Success;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Models/BusinessPlanInfo.cs",
      "sha256": "4a8d4603750b0630eec386cbb831948aaa2cc2f5872d4e1b178da2b9a6952bc7",
      "language": "csharp",
      "size": 1240,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\n\nnamespace xbytechat.api.Models.BusinessModel\n{\n    public class BusinessPlanInfo\n    {\n        [Key]\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // üîó Foreign key to Business\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [ForeignKey(nameof(BusinessId))]\n        public Business Business { get; set; }\n\n        // üì¶ Plan Management\n        [Required]\n        public PlanType Plan { get; set; } = PlanType.Trial; // Default Trial\n\n        [Required]\n        public int TotalMonthlyQuota { get; set; } = 100; // Default Trial Messages\n\n        [Required]\n        public int RemainingMessages { get; set; } = 100;\n\n        public DateTime QuotaResetDate { get; set; } = DateTime.UtcNow.AddMonths(1);\n\n        // üí∞ Wallet Management (optional)\n        public decimal WalletBalance { get; set; } = 0.00m;\n\n        // üìÖ Timestamps\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Models/PlanFeature.cs",
      "sha256": "af8483d1a28e7555f8111b552d2730fd4ef167d9ba562bebb508328248b01a12",
      "language": "csharp",
      "size": 687,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.PlanManagement.Models\n{\n    [Table(\"PlanFeatureMatrix\")]\n    public class PlanFeatureMatrix\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        [MaxLength(20)]\n        public string PlanName { get; set; } = string.Empty;  // \"Basic\", \"Smart\", \"Advance\"\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } = string.Empty; // \"Contacts\", \"Catalog\", etc.\n\n        [Required]\n        public bool IsEnabled { get; set; }  // Default state for this plan-feature pair\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Models/PlanType.cs",
      "sha256": "52170542c11ff0a0e52b9f16289446106038cd266cd602169980aa1d684672ea",
      "language": "csharp",
      "size": 187,
      "content": "namespace xbytechat.api.Features.PlanManagement.Models\n{\n    public enum PlanType\n    {\n       \n        Basic = 0,\n        Smart = 1,\n        Advanced = 2,\n            Trial = 3,\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Services/IPlanManager.cs",
      "sha256": "69cb77d9f587d971ee0cc96bf3fa399d9982294045981db84e714050dc242d85",
      "language": "csharp",
      "size": 418,
      "content": "using xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.PlanManagement.Services\n{\n    public interface IPlanManager\n    {\n        /// <summary>\n        /// Checks if business has enough quota to send a message.\n        /// </summary>\n        Task<ResponseResult> CheckQuotaBeforeSendingAsync(Guid businessId);\n        Dictionary<string, bool> GetPlanFeatureMap(string plan);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Services/PlanManager.cs",
      "sha256": "0d93116ee8bd77194569c6739adad49911359cad9bd6f1919bae85f130027871",
      "language": "csharp",
      "size": 1992,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.PlanManagement.Services\n{\n    public class PlanManager : IPlanManager\n    {\n        private readonly AppDbContext _db;\n\n        public PlanManager(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<ResponseResult> CheckQuotaBeforeSendingAsync(Guid businessId)\n        {\n            var business = await _db.Businesses.FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n                return ResponseResult.ErrorInfo(\"Business not found.\", \"Invalid business ID\");\n            if (business?.BusinessPlanInfo?.RemainingMessages <= 0)\n            {\n                var msg = business?.BusinessPlanInfo?.Plan == PlanType.Trial\n                    ? \"Trial limit reached. Please upgrade your plan.\"\n                    : \"Monthly quota exhausted. Please upgrade or wait for reset.\";\n\n                return ResponseResult.ErrorInfo(msg, \"Quota limit exceeded\");\n            }\n\n            return ResponseResult.SuccessInfo(\"Quota check passed.\");\n        }\n\n        public Dictionary<string, bool> GetPlanFeatureMap(string plan)\n        {\n            // Example map ‚Äî replace with real logic if needed\n            if (plan == \"Basic\")\n                return new Dictionary<string, bool>\n            {\n                { \"CATALOG\", true },\n                { \"MESSAGE_SEND\", false },\n                { \"CRM_NOTES\", false }\n            };\n\n            if (plan == \"Advanced\")\n                return new Dictionary<string, bool>\n            {\n                { \"CATALOG\", true },\n                { \"MESSAGE_SEND\", true },\n                { \"CRM_NOTES\", true },\n                { \"CRM_TAGS\", true }\n            };\n\n            // Fallback plan\n            return new Dictionary<string, bool>();\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/Controllers/MessageAnalyticsController.cs",
      "sha256": "99dc4aa00c1bae7339a4b7cf1c00c7946b5aebeb41f493a46adb22e6d15af298",
      "language": "csharp",
      "size": 1238,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.ReportingModule.Controllers\n{\n    [ApiController]\n    [Authorize] // ‚úÖ add this\n    [Route(\"api/reporting/messages\")]\n    public class MessageAnalyticsController : ControllerBase\n    {\n        private readonly IMessageAnalyticsService _service;\n\n        public MessageAnalyticsController(IMessageAnalyticsService service)\n        {\n            _service = service;\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 20)\n        {\n            var businessId = User.GetBusinessId();\n            var logs = await _service.GetRecentLogsAsync(businessId, limit);\n            return Ok(new { success = true, data = logs });\n        }\n\n        [HttpGet(\"history\")]\n        public async Task<IActionResult> GetPaginatedLogs([FromQuery] PaginatedRequest request)\n        {\n            var businessId = User.GetBusinessId();\n            var result = await _service.GetPaginatedLogsAsync(businessId, request);\n            return Ok(new { success = true, data = result });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/DTOs/DirectMessageLogFilterDto.cs",
      "sha256": "e8f948d0367820dd6dce43d8c057e8bfe7a65889ab2eb6361f062de66d36922b",
      "language": "csharp",
      "size": 293,
      "content": "namespace xbytechat.api.Features.ReportingModule.DTOs\n{\n    public class DirectMessageLogFilterDto\n\n    {\n        public int Page { get; set; } = 1;\n        public int PageSize { get; set; } = 10;\n        public string? Status { get; set; }\n        public string? Search { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/DTOs/RecentMessageLogDto.cs",
      "sha256": "f86a239c42fefe2d63c5087c403a7c2cc1e2eea942cc1443bd03495783bbb2f4",
      "language": "csharp",
      "size": 586,
      "content": "// üìÑ File: Features/ReportingModule/DTOs/RecentMessageLogDto.cs\nusing System;\n\nnamespace xbytechat.api.Features.ReportingModule.DTOs\n{\n    public class RecentMessageLogDto\n    {\n        public Guid Id { get; set; }\n        public string RecipientNumber { get; set; }\n        public string MessageContent { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }             \n        public Guid? CampaignId { get; set; }\n        public string? Status { get; set; }\n        public string? ErrorMessage { get; set; }         \n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/Services/IMessageAnalyticsService.cs",
      "sha256": "08c8fb19a092bb252492d04c2114547e4ca4a5725875accb403182551c8229f4",
      "language": "csharp",
      "size": 536,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.ReportingModule.Services\n{\n    public interface IMessageAnalyticsService\n    {\n        Task<List<RecentMessageLogDto>> GetRecentLogsAsync(Guid businessId, int limit);\n        Task<PaginatedResponse<RecentMessageLogDto>> GetPaginatedLogsAsync(Guid businessId, PaginatedRequest request);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/Services/MessageAnalyticsService.cs",
      "sha256": "3a87316fa63b4890a5bc35b2d867a96a2a7d73e8aea0e52ff6854e89c4245b7a",
      "language": "csharp",
      "size": 2844,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.ReportingModule.Services\n{\n    public class MessageAnalyticsService : IMessageAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public MessageAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<List<RecentMessageLogDto>> GetRecentLogsAsync(Guid businessId, int limit)\n        {\n            return await _context.MessageLogs\n                .Where(x => x.BusinessId == businessId)\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(limit)\n                .Select(x => new RecentMessageLogDto\n                {\n                    Id = x.Id,\n                    RecipientNumber = x.RecipientNumber,\n                    MessageContent = x.MessageContent,\n                    CreatedAt = x.CreatedAt,\n                    CampaignId = x.CampaignId,\n                    Status = x.Status,\n                    SentAt = x.SentAt,\n                })\n                .ToListAsync();\n        }\n\n        public async Task<PaginatedResponse<RecentMessageLogDto>> GetPaginatedLogsAsync(Guid businessId, PaginatedRequest request)\n        {\n            var query = _context.MessageLogs\n                .Where(x => x.BusinessId == businessId);\n\n            if (!string.IsNullOrEmpty(request.Status))\n                query = query.Where(x => x.Status == request.Status);\n\n            if (!string.IsNullOrEmpty(request.Search))\n                query = query.Where(x =>\n                    x.RecipientNumber.Contains(request.Search) ||\n                    x.MessageContent.Contains(request.Search));\n\n            var totalCount = await query.CountAsync();\n\n            var items = await query\n                .OrderByDescending(x => x.CreatedAt)\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .Select(x => new RecentMessageLogDto\n                {\n                    Id = x.Id,\n                    RecipientNumber = x.RecipientNumber,\n                    MessageContent = x.MessageContent,\n                    CreatedAt = x.CreatedAt,\n                    CampaignId = x.CampaignId,\n                    Status = x.Status,\n                    SentAt = x.SentAt,\n                })\n                .ToListAsync();\n\n            return new PaginatedResponse<RecentMessageLogDto>\n            {\n                Items = items,\n                TotalCount = totalCount,\n                Page = request.Page,\n                PageSize = request.PageSize\n            };\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Controllers/TemplatesController.cs",
      "sha256": "b7014e9c08b5d3cf85e8dbd5edf632bc51e34a2acac661dbb3109dcd259edf4c",
      "language": "csharp",
      "size": 1479,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.TemplateModule.Services;\n\nnamespace xbytechat.api.Features.TemplateModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates\")]\n    public class TemplatesController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateService _templateService;\n        private readonly ILogger<TemplatesController> _logger;\n\n        public TemplatesController(IWhatsAppTemplateService templateService, ILogger<TemplatesController> logger)\n        {\n            _templateService = templateService;\n            _logger = logger;\n        }\n\n        /// <summary>\n        /// Fetches WhatsApp template metadata (name, language, body, placeholders)\n        /// </summary>\n        [HttpGet(\"metadata\")]\n        public async Task<IActionResult> GetTemplates()\n        {\n            try\n            {\n                var templates = await _templateService.FetchTemplatesAsync();\n                return Ok(new\n                {\n                    success = true,\n                    templates\n                });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error fetching template metadata: \" + ex.Message);\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"‚ùå Failed to retrieve template metadata\",\n                    error = ex.Message\n                });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Services/IWhatsAppTemplateService.cs",
      "sha256": "2ed5f5891246b4fec02e29892760c3d033e76572488701c525fd801763f742a9",
      "language": "csharp",
      "size": 226,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.TemplateModule.Services\n{\n    public interface IWhatsAppTemplateService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Services/WhatsAppTemplateService.cs",
      "sha256": "ee70376834e701f63425a69d50a4ea5d02170321edf828fe7fd2bd5d100bf3a1",
      "language": "csharp",
      "size": 2815,
      "content": "using Microsoft.Extensions.Configuration;\nusing Newtonsoft.Json;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.TemplateModule.Services\n{\n    public class WhatsAppTemplateService : IWhatsAppTemplateService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _config;\n        private readonly ILogger<WhatsAppTemplateService> _logger;\n\n        public WhatsAppTemplateService(HttpClient httpClient, IConfiguration config, ILogger<WhatsAppTemplateService> logger)\n        {\n            _httpClient = httpClient;\n            _config = config;\n            _logger = logger;\n        }\n\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync()\n        {\n            var wabaId = _config[\"WhatsApp:WABA_ID\"];\n            var token = _config[\"WhatsApp:apiToken\"];\n            var url = $\"https://graph.facebook.com/v18.0/{wabaId}/message_templates\";\n\n            var templates = new List<TemplateMetadataDto>();\n\n            try\n            {\n                _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", token);\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"Failed to fetch WhatsApp templates: \" + json);\n                    return templates;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n\n                    foreach (var component in tpl.components)\n                    {\n                        if (component.type == \"BODY\")\n                        {\n                            body = component.text;\n                            break;\n                        }\n                    }\n\n                    // Count {{placeholders}}\n                    var placeholderCount = System.Text.RegularExpressions.Regex.Matches(body, \"{{(.*?)}}\").Count;\n\n                    templates.Add(new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = placeholderCount\n                    });\n                }\n\n                return templates;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error while fetching templates from Meta: \" + ex.Message);\n                return templates;\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/MessageLogsReportController.cs",
      "sha256": "57679ca179ec26b011a115fa136660702c25971ea0beb441c8805d2bdc911b49",
      "language": "csharp",
      "size": 10297,
      "content": "using System.Text;\nusing ClosedXML.Excel;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Shared; // for User.GetBusinessId()\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/report/message-logs\")]\n    [Authorize]\n    public sealed class MessageLogsReportController : ControllerBase\n    {\n        private readonly IMessageLogsReportService _service;\n\n        public MessageLogsReportController(IMessageLogsReportService service)\n            => _service = service;\n\n        [HttpPost(\"search\")]\n        [ProducesResponseType(typeof(PaginatedResponse<MessageLogListItemDto>), StatusCodes.Status200OK)]\n        [ProducesResponseType(StatusCodes.Status401Unauthorized)]\n        public async Task<IActionResult> Search([FromBody] MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var result = await _service.SearchAsync(businessId, q, ct);\n            return Ok(result);\n        }\n\n        [HttpPost(\"export/csv\")]\n        [Produces(\"text/csv\")]\n        public async Task<IActionResult> ExportCsv([FromBody] MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            // We‚Äôll walk pages to get the full dataset (service clamps PageSize to <= 200).\n            var sb = new StringBuilder();\n\n            // Header\n            sb.AppendLine(string.Join(\",\", new[]\n            {\n                \"Time\",\"Recipient\",\"SenderId\",\"Channel\",\"Status\",\"Type\",\"Campaign\",\n                \"Body\",\"ProviderId\",\"DeliveredAt\",\"ReadAt\",\"Error\"\n            }.Select(EscapeCsv)));\n\n            var page = 1;\n            const int maxLoops = 10000; // safety\n            var totalWritten = 0;\n\n            while (page <= maxLoops)\n            {\n                var pageQuery = new MessageLogReportQueryDto\n                {\n                    FromUtc = q.FromUtc,\n                    ToUtc = q.ToUtc,\n                    Search = q.Search,\n                    Statuses = q.Statuses,\n                    Channels = q.Channels,\n                    SenderIds = q.SenderIds,\n                    MessageTypes = q.MessageTypes,\n                    CampaignId = q.CampaignId,\n                    SortBy = q.SortBy,\n                    SortDir = q.SortDir,\n                    Page = page,\n                    PageSize = 200 // max page supported by service\n                };\n\n                var res = await _service.SearchAsync(businessId, pageQuery, ct);\n                if (res.Items.Count == 0) break;\n\n                foreach (var r in res.Items)\n                {\n                    var time = r.SentAt ?? r.CreatedAt;\n                    var row = new[]\n                    {\n                        EscapeCsv(time.ToLocalTime().ToString(\"yyyy-MM-dd HH:mm:ss\")),\n                        EscapeCsv(r.RecipientNumber ?? \"\"),\n                        EscapeCsv(r.SenderId ?? \"\"),\n                        EscapeCsv(r.SourceChannel ?? \"\"),\n                        EscapeCsv(r.Status ?? \"\"),\n                        EscapeCsv(r.MessageType ?? \"\"),\n                        EscapeCsv(r.CampaignName ?? r.CampaignId?.ToString() ?? \"\"),\n                        EscapeCsv((r.MessageContent ?? \"\").ReplaceLineEndings(\" \")),\n                        EscapeCsv(r.ProviderMessageId ?? \"\"),\n                        EscapeCsv(r.DeliveredAt?.ToLocalTime().ToString(\"yyyy-MM-dd HH:mm:ss\") ?? \"\"),\n                        EscapeCsv(r.ReadAt?.ToLocalTime().ToString(\"yyyy-MM-dd HH:mm:ss\") ?? \"\"),\n                        EscapeCsv((r.ErrorMessage ?? \"\").ReplaceLineEndings(\" \"))\n                    };\n                    sb.AppendLine(string.Join(\",\", row));\n                }\n\n                totalWritten += res.Items.Count;\n\n                // stop when we‚Äôve written everything\n                var total = res.TotalCount;\n                if (totalWritten >= total) break;\n\n                page++;\n            }\n\n            var bytes = Encoding.UTF8.GetBytes(sb.ToString());\n            var fileName =\n                $\"MessageLogs{(q.CampaignId.HasValue ? \"-\" + q.CampaignId.Value : \"\")}-{DateTime.UtcNow:yyyyMMddHHmmss}.csv\";\n\n            return File(bytes, \"text/csv\", fileName);\n\n            static string EscapeCsv(string s)\n            {\n                // Quote if contains comma, quote, or newline\n                if (s.Contains(',') || s.Contains('\"') || s.Contains('\\n') || s.Contains('\\r'))\n                {\n                    return $\"\\\"{s.Replace(\"\\\"\", \"\\\"\\\"\")}\\\"\";\n                }\n                return s;\n            }\n        }\n\n     \n        [HttpPost(\"export/pdf\")]\n        public IActionResult ExportPdfStub()\n        {\n            return StatusCode(StatusCodes.Status501NotImplemented, new ProblemDetails\n            {\n                Title = \"PDF export is not enabled\",\n                Detail = \"Implement in MessageLogsReportController.ExportPdf using a PDF library.\"\n            });\n        }\n\n        [HttpPost(\"export/xlsx\")]\n        [Produces(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")]\n        public async Task<IActionResult> ExportXlsx([FromBody] MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            // Page through all results using the same service used by the grid.\n            const int pageSize = 200; // service already clamps; keep explicit for clarity\n            var all = new List<MessageLogListItemDto>(capacity: pageSize * 5); // small pre-alloc\n\n            var page = 1;\n            while (true)\n            {\n                var pageQuery = new MessageLogReportQueryDto\n                {\n                    FromUtc = q.FromUtc,\n                    ToUtc = q.ToUtc,\n                    Search = q.Search,\n                    Statuses = q.Statuses,\n                    Channels = q.Channels,\n                    SenderIds = q.SenderIds,\n                    MessageTypes = q.MessageTypes,\n                    CampaignId = q.CampaignId,\n                    SortBy = q.SortBy,\n                    SortDir = q.SortDir,\n                    Page = page,\n                    PageSize = pageSize\n                };\n\n                var res = await _service.SearchAsync(businessId, pageQuery, ct);\n                if (res.Items.Count == 0) break;\n\n                all.AddRange(res.Items);\n\n                if (all.Count >= res.TotalCount) break; // done\n                page++;\n            }\n\n            // Build the workbook in memory\n            using var wb = new XLWorkbook();\n            var ws = wb.Worksheets.Add(\"MessageLogs\");\n\n            // Header\n            var headers = new[]\n            {\n        \"Time\",\"Recipient\",\"SenderId\",\"Channel\",\"Status\",\"Type\",\"Campaign\",\n        \"Body\",\"ProviderId\",\"DeliveredAt\",\"ReadAt\",\"Error\"\n    };\n            for (int c = 0; c < headers.Length; c++)\n                ws.Cell(1, c + 1).Value = headers[c];\n\n            // Simple header style\n            var headerRange = ws.Range(1, 1, 1, headers.Length);\n            headerRange.Style.Font.Bold = true;\n            headerRange.Style.Fill.BackgroundColor = XLColor.FromHtml(\"#F3F4F6\"); // light gray\n            headerRange.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n\n            // Rows\n            int r = 2;\n            foreach (var it in all)\n            {\n                var time = (it.SentAt ?? it.CreatedAt).ToLocalTime();\n\n                ws.Cell(r, 1).Value = time;\n                ws.Cell(r, 1).Style.DateFormat.Format = \"yyyy-mm-dd hh:mm:ss\";\n\n                ws.Cell(r, 2).Value = it.RecipientNumber ?? \"\";\n                ws.Cell(r, 3).Value = it.SenderId ?? \"\";\n                ws.Cell(r, 4).Value = it.SourceChannel ?? \"\";\n                ws.Cell(r, 5).Value = it.Status ?? \"\";\n                ws.Cell(r, 6).Value = it.MessageType ?? \"\";\n                ws.Cell(r, 7).Value = it.CampaignName ?? (it.CampaignId?.ToString() ?? \"\");\n\n                // Body/Errors as plain text to avoid newlines breaking rows\n                ws.Cell(r, 8).Value = (it.MessageContent ?? \"\").ReplaceLineEndings(\" \");\n                ws.Cell(r, 9).Value = it.ProviderMessageId ?? \"\";\n\n                if (it.DeliveredAt.HasValue)\n                {\n                    ws.Cell(r, 10).Value = it.DeliveredAt.Value.ToLocalTime();\n                    ws.Cell(r, 10).Style.DateFormat.Format = \"yyyy-mm-dd hh:mm:ss\";\n                }\n                else ws.Cell(r, 10).Value = \"\";\n\n                if (it.ReadAt.HasValue)\n                {\n                    ws.Cell(r, 11).Value = it.ReadAt.Value.ToLocalTime();\n                    ws.Cell(r, 11).Style.DateFormat.Format = \"yyyy-mm-dd hh:mm:ss\";\n                }\n                else ws.Cell(r, 11).Value = \"\";\n\n                ws.Cell(r, 12).Value = (it.ErrorMessage ?? \"\").ReplaceLineEndings(\" \");\n                r++;\n            }\n\n            // Fit columns\n            ws.Columns().AdjustToContents();\n\n            // Stream to client\n            using var ms = new MemoryStream();\n            wb.SaveAs(ms);\n            ms.Position = 0;\n\n            var fileName = $\"MessageLogs-{DateTime.UtcNow:yyyyMMddHHmmss}.xlsx\";\n            const string contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n            return File(ms.ToArray(), contentType, fileName);\n        }\n        [HttpGet(\"facets\")]\n        [ProducesResponseType(typeof(MessageLogFacetsDto), StatusCodes.Status200OK)]\n        [ProducesResponseType(StatusCodes.Status401Unauthorized)]\n        public async Task<IActionResult> Facets([FromQuery] int fromDays = 90, CancellationToken ct = default)\n        {\n            var businessId = User.GetBusinessId();\n            if (businessId == Guid.Empty) return Unauthorized();\n\n            var fromUtc = DateTime.UtcNow.AddDays(-Math.Abs(fromDays));\n            var facets = await _service.GetFacetsAsync(businessId, fromUtc, ct);\n            return Ok(facets);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingController.cs",
      "sha256": "e99ad95860e4414c4d2691b0ff365fd6ecd20d10848e5715bdac1cc9d0295521",
      "language": "csharp",
      "size": 6267,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api; // Your using for AppDbContext\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Worker; // Your using for DTOs\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking\")]\n    public class TrackingController : ControllerBase\n    {\n        private readonly ITrackingService _tracker;\n        private readonly AppDbContext _context;\n        private readonly IContactJourneyService _journeyService;\n        public TrackingController(ITrackingService tracker, AppDbContext context, IContactJourneyService journeyService)\n        {\n            _tracker = tracker;\n            _context = context;\n            _journeyService = journeyService;\n        }\n\n        [HttpGet(\"journeys/{campaignSendLogId}\")]\n        public async Task<IActionResult> GetJourney(Guid campaignSendLogId)\n        {\n            var journeyEvents = await _journeyService.GetJourneyEventsAsync(campaignSendLogId);\n            return Ok(journeyEvents);\n        }\n\n\n        //[HttpGet(\"redirect/{campaignSendLogId}\")]\n        //public async Task<IActionResult> TrackCampaignClick(\n        //    Guid campaignSendLogId,\n        //    [FromQuery] string type,\n        //    [FromQuery] string to)\n        //{\n        //    if (string.IsNullOrWhiteSpace(to))\n        //    {\n        //        return BadRequest(\"Missing redirect target URL.\");\n        //    }\n\n        //    var log = await _context.CampaignSendLogs.FindAsync(campaignSendLogId);\n        //    if (log != null)\n        //    {\n        //        log.IsClicked = true;\n        //        log.ClickedAt = DateTime.UtcNow;\n        //        log.ClickType = type;\n        //        log.IpAddress = HttpContext.Connection.RemoteIpAddress?.ToString();\n        //        await _context.SaveChangesAsync();\n        //    }\n\n        //    return Redirect(to);\n        //}\n\n        [HttpGet(\"redirect/{campaignSendLogId}\")]\n        public async Task<IActionResult> TrackCampaignClick(\n    Guid campaignSendLogId,\n    [FromQuery] string type,\n    [FromQuery] string to,\n    [FromQuery] int? idx = null,\n    CancellationToken ct = default)\n        {\n            if (string.IsNullOrWhiteSpace(to))\n                return BadRequest(\"Missing redirect target URL.\");\n\n            if (!Uri.TryCreate(to, UriKind.Absolute, out var destUri))\n                return BadRequest(\"Destination URL is invalid.\");\n\n            var clickType = string.IsNullOrWhiteSpace(type)\n                ? ClassifyClickType(destUri)\n                : type.Trim().ToLowerInvariant();\n\n            // Load parent CSL (tracked so we can update it)\n            var log = await _context.CampaignSendLogs.FindAsync(new object[] { campaignSendLogId }, ct);\n            if (log is not null)\n            {\n                var now = DateTime.UtcNow;\n                var ip = HttpContext.Connection.RemoteIpAddress?.ToString();\n                var ua = Request.Headers.UserAgent.ToString();\n\n                // First-click update on the send (idempotent enough for now)\n                log.IsClicked = true;\n                log.ClickedAt = now;\n                log.ClickType = clickType;\n                log.IpAddress = ip;\n\n                // Persist the click (ties to same run/session)\n                await _context.CampaignClickLogs.AddAsync(new CampaignClickLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignSendLogId = log.Id,\n                    CampaignId = log.CampaignId,// ?? Guid.Empty, // ‚úÖ coalesce; make column Guid? to avoid this\n                    ContactId = log.ContactId,                // Guid? OK\n                    ButtonIndex = (short)(idx ?? 0),\n                    ButtonTitle = string.IsNullOrWhiteSpace(type) ? \"link\" : type,\n                    Destination = destUri.ToString(),\n                    ClickedAt = now,\n                    Ip = ip ?? \"\",\n                    UserAgent = ua ?? \"\",\n                    ClickType = clickType,\n                    RunId = log.RunId                      // remove if your schema doesn‚Äôt have RunId\n                }, ct);\n\n                await _context.SaveChangesAsync(ct);\n            }\n\n            return Redirect(destUri.ToString());\n        }\n\n        // Simple classifier used above\n        private static string ClassifyClickType(Uri u)\n        {\n            if (u == null) return \"web\";\n            var scheme = u.Scheme?.ToLowerInvariant() ?? \"\";\n            if (scheme == \"tel\") return \"call\";\n            if (scheme == \"whatsapp\") return \"whatsapp\";\n            if (scheme is \"http\" or \"https\")\n            {\n                var host = u.Host?.ToLowerInvariant() ?? \"\";\n                if (host.Contains(\"wa.me\") || host.Contains(\"api.whatsapp.com\"))\n                    return \"whatsapp\";\n            }\n            return \"web\";\n        }\n\n        /// <summary>\n        /// Gets detailed information for a specific tracking log entry.\n        /// </summary>\n        [HttpGet(\"logs/{id}/details\")]\n        public async Task<IActionResult> GetLogDetails(Guid id)\n        {\n            var result = await _tracker.GetLogDetailsAsync(id);\n            if (result == null)\n                return NotFound(\"Tracking log not found\");\n\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Retrieves click logs specifically related to automation flows.\n        /// </summary>\n        [HttpGet(\"flow-clicks\")]\n        public async Task<IActionResult> GetFlowClickLogs()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid or missing business ID\");\n\n            var logs = await _tracker.GetFlowClickLogsAsync(businessId);\n\n            var dtoList = logs.Select(x => new\n            {\n                x.Id,\n                x.StepId,\n                x.ContactPhone,\n                x.ButtonText,\n                x.TemplateId,\n                x.FollowUpSent,\n                x.ClickedAt\n            });\n\n            return Ok(dtoList);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingViewerController.cs",
      "sha256": "6dfeff85fe69af455c90c7ae2ad1fd0614866359c0eaee39cf101ca67b819507",
      "language": "csharp",
      "size": 1584,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking/logs\")]\n    public class TrackingViewerController : ControllerBase\n    {\n        private readonly AppDbContext _context;\n\n        public TrackingViewerController(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll([FromQuery] Guid? campaignId = null)\n        {\n            var query = _context.TrackingLogs\n                .Include(t => t.Campaign) // Optional\n                .Include(t => t.Contact)  // Optional\n                .OrderByDescending(t => t.ClickedAt)\n                .AsQueryable();\n\n            if (campaignId.HasValue)\n                query = query.Where(t => t.CampaignId == campaignId);\n\n            var results = await query\n                .Select(t => new\n                {\n                    t.Id,\n                    t.ContactPhone,\n                    ContactName = t.Contact != null ? t.Contact.Name : \"(N/A)\",\n                    t.ButtonText,\n                    t.CTAType,\n                    t.SourceType,\n                    t.ClickedAt,\n                    t.DeviceType,\n                    t.Country,\n                    CampaignName = t.Campaign != null ? t.Campaign.Name : \"(Unknown)\"\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = results });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/JourneyEventDto.cs",
      "sha256": "34abc81cfaea73e66ebb64431d3723ede8e2ac5cab0fcd6e8f4a1b2bbfe20320",
      "language": "csharp",
      "size": 727,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class JourneyEventDto\n    {\n        public DateTime Timestamp { get; set; }\n        public string Source { get; set; } = \"System\"; // System/User/Provider\n        public string EventType { get; set; } = \"\";    // MessageSent/Delivered/Read/ButtonClicked/FlowStep/FlowSend/Redirect/Error\n        public string Title { get; set; } = \"\";\n        public string Details { get; set; } = \"\";\n        public Guid? StepId { get; set; }\n        public string? StepName { get; set; }\n        public int? ButtonIndex { get; set; }\n        public string? ButtonTitle { get; set; }\n        public string? Url { get; set; }\n        public string? TemplateName { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/JourneyResponseDto.cs",
      "sha256": "0dd5d4a7faf319e281c5c96d6a7164a6e763aba0de03a617e58165196f48dffa",
      "language": "csharp",
      "size": 549,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class JourneyResponseDto\n    {\n        public string CampaignType { get; set; } = \"dynamic_url\"; // or \"flow\"\n        public string? FlowName { get; set; }\n        public Guid? FlowId { get; set; }\n        public Guid CampaignId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactPhone { get; set; } = \"\";\n        public List<JourneyEventDto> Events { get; set; } = new();\n        public string? LeftOffAt { get; set; }  // step title or reason\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/MessageLogFacetsDto.cs",
      "sha256": "78f9fb1561eb81fa5af81dd2df22164d18841f71475f5d10400f18a702c8fa0f",
      "language": "csharp",
      "size": 516,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public sealed class MessageLogFacetsDto\n    {\n        public string[] WabaIds { get; init; } = Array.Empty<string>();     // WhatsAppBusinessNumber\n        public string[] SenderIds { get; init; } = Array.Empty<string>();   // Campaign.PhoneNumberId\n        public string[] Channels { get; init; } = Array.Empty<string>();    // provider (e.g., META, PINNACLE)\n        public string[] Statuses { get; init; } = Array.Empty<string>();    // message status\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/MessageLogReportQueryDto.cs",
      "sha256": "d92aa8928329edd484bc7c51d8c0be8b7adad6acf6e1996007b37f993214c4aa",
      "language": "csharp",
      "size": 1843,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public sealed class MessageLogReportQueryDto\n    {\n        public DateTime? FromUtc { get; set; }\n        public DateTime? ToUtc { get; set; }\n        public string? Search { get; set; }                 // phone or text contains\n        public string[]? Statuses { get; set; }             // Sent/Delivered/Read/Failed etc.\n        public string[]? Channels { get; set; }             // meta_cloud/sms/email‚Ä¶\n        public string[]? SenderIds { get; set; }            // phone_number_id\n        public string[]? MessageTypes { get; set; }         // text/image/template‚Ä¶\n        public Guid? CampaignId { get; set; }               // optional scope\n\n        public string? SortBy { get; set; } = \"SentAt\";     // server-whitelisted\n        public string? SortDir { get; set; } = \"desc\";      // asc|desc\n\n        public int Page { get; set; } = 1;\n        public int PageSize { get; set; } = 25;\n    }\n\n    public sealed class MessageLogListItemDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }\n\n        public string? RecipientNumber { get; set; }\n        public string? SenderId { get; set; }\n        public string? SourceChannel { get; set; }\n        public string? Status { get; set; }\n        public string? MessageType { get; set; }\n\n        public string? MessageContent { get; set; }\n        public string? TemplateName { get; set; }\n        public string? ProviderMessageId { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDetailsDto.cs",
      "sha256": "e27d7a86aea38ec1fef0aaf6d4d6c208e2481cfaf7033c57fa8da1c81d2c693c",
      "language": "csharp",
      "size": 453,
      "content": "using xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDetailsDto\n    {\n        public TrackingLogDto Tracking { get; set; } = new();\n        public ContactDto? Contact { get; set; }\n        public CampaignDto? Campaign { get; set; }\n        public MessageLogDto? MessageLog { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDto.cs",
      "sha256": "bae94801851bba1bbeb94d60e81f2d20efd13b86be1391265098462d82a3c762",
      "language": "csharp",
      "size": 1798,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDto\n    {\n        // üß© Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // üë§ CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n\n        // üîó Source Info\n        public string SourceType { get; set; } = string.Empty; // e.g. \"campaign\", \"reminder\", \"bot\"\n        public Guid? SourceId { get; set; }\n\n        // üîò CTA Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // üì® Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n\n        // üß† Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n        public DateTime? ClickedAt { get; set; } = DateTime.UtcNow;\n        // üì° Tracking\n        public string? IPAddress { get; set; }\n        public string? Browser { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // üîñ Session context\n        public string? SessionId { get; set; }\n        public string? ThreadId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Guid? CampaignSendLogId { get; set; }\n\n        public string RawJson { get; set; } = string.Empty; // used in queue method\n        public DateTime EnqueuedAt { get; set; } // used in queue method\n        public string? NextStepMatched { get; set; } // ‚úÖ Add this if not already there\n\n        public string? TemplateName { get; set; } // ‚úÖ Needed for follow-up matcher\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/ExtrackAllFiles.bat",
      "sha256": "3d14ccc013b9fd82ff0759820acc71da52821878e664cb4daa9418062278e799",
      "language": "bat",
      "size": 922,
      "content": "@echo off\nREM This script will find all files and output their name and content into one file.\nREM The output file will be named [FolderName]_AllFileDump.txt.\n\nREM Get the current folder's name and set it as the output file name with the custom suffix\nfor %%I in (\"%cd%\") do set \"outputFile=%%~nI_AllFileDump.txt\"\n\nREM Clear the output file to start fresh\n> \"%outputFile%\" (echo Folder and File Content Report)\necho. >> \"%outputFile%\"\n\nREM Loop through all files in the current directory and subdirectories\nfor /R . %%F in (*.*) do (\n    echo ====================================================== >> \"%outputFile%\"\n    echo FILE: %%F >> \"%outputFile%\"\n    echo ====================================================== >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n    type \"%%F\" >> \"%outputFile%\" 2>nul\n    echo. >> \"%outputFile%\"\n    echo. >> \"%outputFile%\"\n)\n\necho Finished! All content has been extracted to %outputFile%"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Models/TrackingLog.cs",
      "sha256": "ce8da394901366ef9d5d9b32a338d7a49d6b8d06eb1f911e89e02296506b4281",
      "language": "csharp",
      "size": 2252,
      "content": "using xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.Tracking.Models;\nnamespace xbytechat.api.Features.Tracking.Models\n{\n    public class TrackingLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // üß© Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // üë§ CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n        public Contact? Contact { get; set; } // ‚úÖ NEW\n\n        // üîó Source Info\n        public string SourceType { get; set; } = string.Empty;\n        public Guid? SourceId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; } // ‚úÖ NEW\n\n        public Guid? CampaignSendLogId { get; set; }\n        public CampaignSendLog? CampaignSendLog { get; set; } // ‚úÖ Optional\n\n        // üîò Button Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // üì® Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; } // ‚úÖ Optional\n\n        // üß† Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n\n        // üïí Audit Trail\n        public DateTime ClickedAt { get; set; } = DateTime.UtcNow;\n        public string? IPAddress { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // üîñ Follow-up & Analytics\n        public bool FollowUpSent { get; set; } = false;\n        public string? LastInteractionType { get; set; }\n\n        // üßµ Journey Tracking\n        public Guid? SessionId { get; set; }\n        public Guid? ThreadId { get; set; }\n        public Guid? StepId { get; set; } // ‚úÖ Link to CTAFlowStep for CTA Flow tracking\n\n       //  public string? NextStepMatched { get; set; } // Logs which template system resolved\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/ContactJourneyService.cs",
      "sha256": "616caf304202b708ece31d18cf8416d3eff2b423d80b8e3edad172ccaaf292e1",
      "language": "csharp",
      "size": 33572,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Tracking.DTOs; // Updated namespace\n// Add other necessary using statements for your project\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class ContactJourneyService : IContactJourneyService\n    {\n        private readonly AppDbContext _context;\n\n        public ContactJourneyService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n\n        //public async Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId)\n        //{\n        //    var resp = new JourneyResponseDto();\n        //    var events = new List<JourneyEventDto>();\n\n        //    // 0) Load the selected send\n        //    var sentLog = await _context.CampaignSendLogs\n        //        .AsNoTracking()\n        //        .Include(x => x.Campaign)\n        //        .Include(x => x.Contact)\n        //        .FirstOrDefaultAsync(x => x.Id == initialCampaignSendLogId);\n\n        //    // Require a fully-linked send (campaign + contact) for Journey\n        //    // CampaignId is non-nullable now; only check navs + ContactId\n        //    if (sentLog is null || sentLog.Campaign is null || sentLog.Contact is null || sentLog.ContactId == null)\n        //    {\n        //        resp.Events = events;\n        //        return resp;\n        //    }\n\n        //    // Unwrap once into non-nullable locals\n        //    var campaignId = sentLog.CampaignId;          // Guid (non-nullable)\n        //    var contactId = sentLog.ContactId.Value;     // Guid (we ensured not null above)\n\n        //    resp.CampaignId = campaignId;\n        //    resp.ContactId = contactId;\n        //    resp.ContactPhone = sentLog.Contact.PhoneNumber ?? \"\";\n        //    resp.CampaignType = sentLog.CTAFlowConfigId.HasValue ? \"flow\" : \"dynamic_url\";\n        //    resp.FlowId = sentLog.CTAFlowConfigId;\n\n        //    // 1) Session window for THIS run of the campaign to THIS contact\n        //    var sessionStart = sentLog.SentAt ?? sentLog.CreatedAt;\n\n        //    // next send to same contact for same campaign\n        //    var nextSameCampaignAt = await _context.CampaignSendLogs\n        //        .AsNoTracking()\n        //        .Where(x => x.ContactId == contactId &&\n        //                    x.CampaignId == campaignId &&\n        //                    x.CreatedAt > sessionStart)\n        //        .OrderBy(x => x.CreatedAt)\n        //        .Select(x => (DateTime?)x.CreatedAt)\n        //        .FirstOrDefaultAsync();\n\n        //    // next send to same contact for same flow (if this is a flow)\n        //    DateTime? nextSameFlowAt = null;\n        //    if (sentLog.CTAFlowConfigId.HasValue)\n        //    {\n        //        var flowId = sentLog.CTAFlowConfigId.Value;\n        //        nextSameFlowAt = await _context.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(x => x.ContactId == contactId &&\n        //                        x.CTAFlowConfigId == flowId &&\n        //                        x.CreatedAt > sessionStart)\n        //            .OrderBy(x => x.CreatedAt)\n        //            .Select(x => (DateTime?)x.CreatedAt)\n        //            .FirstOrDefaultAsync();\n        //    }\n\n        //    // session end = earliest ‚Äúnext run‚Äù OR +24h cap\n        //    var sessionEnd = new[] { nextSameCampaignAt, nextSameFlowAt }\n        //        .Where(dt => dt.HasValue)\n        //        .Select(dt => dt!.Value)\n        //        .DefaultIfEmpty(sessionStart.AddHours(24))\n        //        .Min();\n\n        //    // 2) Initial \"sent\" + statuses from CSL\n        //    events.Add(new JourneyEventDto\n        //    {\n        //        Timestamp = sessionStart,\n        //        Source = \"System\",\n        //        EventType = \"MessageSent\",\n        //        Title = $\"Campaign '{sentLog.Campaign?.Name ?? \"Campaign\"}' sent\",\n        //        Details = $\"Template '{sentLog.TemplateId}' to {resp.ContactPhone}\",\n        //        TemplateName = sentLog.TemplateId\n        //    });\n\n        //    if (sentLog.DeliveredAt is { } d1 && d1 >= sessionStart && d1 < sessionEnd)\n        //        events.Add(new JourneyEventDto\n        //        {\n        //            Timestamp = d1,\n        //            Source = \"Provider\",\n        //            EventType = \"Delivered\",\n        //            Title = \"Message delivered\",\n        //            Details = $\"Delivered to {resp.ContactPhone}\",\n        //            TemplateName = sentLog.TemplateId\n        //        });\n\n        //    if (sentLog.ReadAt is { } r1 && r1 >= sessionStart && r1 < sessionEnd)\n        //        events.Add(new JourneyEventDto\n        //        {\n        //            Timestamp = r1,\n        //            Source = \"Provider\",\n        //            EventType = \"Read\",\n        //            Title = \"Message read\",\n        //            Details = $\"Read by {resp.ContactPhone}\",\n        //            TemplateName = sentLog.TemplateId\n        //        });\n\n        //    // 3) URL clicks for THIS send within the window\n        //    var urlClicksInitial = await _context.CampaignClickLogs\n        //        .AsNoTracking()\n        //        .Where(c => c.CampaignSendLogId == sentLog.Id &&\n        //                    c.ClickedAt >= sessionStart &&\n        //                    c.ClickedAt < sessionEnd)\n        //        .OrderBy(c => c.ClickedAt)\n        //        .ToListAsync();\n\n        //    foreach (var c in urlClicksInitial)\n        //    {\n        //        events.Add(new JourneyEventDto\n        //        {\n        //            Timestamp = c.ClickedAt,\n        //            Source = \"User\",\n        //            EventType = \"ButtonClicked\",\n        //            Title = $\"Clicked URL Button: '{c.ButtonTitle}'\",\n        //            Details = $\"Redirected to {c.Destination}\",\n        //            ButtonIndex = c.ButtonIndex,\n        //            ButtonTitle = c.ButtonTitle,\n        //            Url = c.Destination\n        //        });\n        //    }\n\n        //    // 4) FLOW chain (if any) scoped to THIS session window\n        //    if (sentLog.CTAFlowConfigId.HasValue)\n        //    {\n        //        var flowId = sentLog.CTAFlowConfigId.Value;\n\n        //        // Flow label\n        //        resp.FlowName = await _context.CTAFlowConfigs\n        //            .AsNoTracking()\n        //            .Where(f => f.Id == flowId)\n        //            .Select(f => f.FlowName)\n        //            .FirstOrDefaultAsync();\n\n        //        // All flow sends (CSLs) for same contact+flow within the window\n        //        var flowCslChain = await _context.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(csl => csl.BusinessId == sentLog.BusinessId &&\n        //                          csl.ContactId == contactId &&\n        //                          csl.CTAFlowConfigId == flowId &&\n        //                          csl.CreatedAt >= sessionStart &&\n        //                          csl.CreatedAt < sessionEnd)\n        //            .OrderBy(csl => csl.CreatedAt)\n        //            .Select(csl => new\n        //            {\n        //                csl.Id,\n        //                csl.MessageLogId,\n        //                csl.SentAt,\n        //                csl.CreatedAt,\n        //                csl.TemplateId,\n        //                csl.CTAFlowStepId,\n        //                csl.DeliveredAt,\n        //                csl.ReadAt\n        //            })\n        //            .ToListAsync();\n\n        //        var chainCslIds = flowCslChain.Select(x => x.Id).ToList();\n        //        var chainMsgLogIds = flowCslChain\n        //            .Where(x => x.MessageLogId.HasValue)\n        //            .Select(x => x.MessageLogId!.Value)\n        //            .ToList();\n\n        //        var execByCsl = await _context.FlowExecutionLogs\n        //            .AsNoTracking()\n        //            .Where(f => f.CampaignSendLogId.HasValue &&\n        //                        chainCslIds.Contains(f.CampaignSendLogId.Value) &&\n        //                        f.ExecutedAt >= sessionStart &&\n        //                        f.ExecutedAt < sessionEnd)\n        //            .OrderBy(f => f.ExecutedAt)\n        //            .ToListAsync();\n\n        //        var execByMsg = chainMsgLogIds.Count == 0\n        //            ? new List<FlowExecutionLog>()\n        //            : await _context.FlowExecutionLogs\n        //                .AsNoTracking()\n        //                .Where(f => f.MessageLogId.HasValue &&\n        //                            chainMsgLogIds.Contains(f.MessageLogId.Value) &&\n        //                            f.ExecutedAt >= sessionStart &&\n        //                            f.ExecutedAt < sessionEnd)\n        //                .OrderBy(f => f.ExecutedAt)\n        //                .ToListAsync();\n\n        //        // Phone fallback (strictly within the session window; accept + or digits-only)\n        //        var phoneA = resp.ContactPhone ?? \"\";\n        //        var phoneB = phoneA.StartsWith(\"+\") ? phoneA[1..] : \"+\" + phoneA;\n\n        //        var execByPhone = await _context.FlowExecutionLogs\n        //            .AsNoTracking()\n        //            .Where(f => f.BusinessId == sentLog.BusinessId &&\n        //                        f.FlowId == flowId &&\n        //                        (f.ContactPhone == phoneA || f.ContactPhone == phoneB) &&\n        //                        f.ExecutedAt >= sessionStart &&\n        //                        f.ExecutedAt < sessionEnd)\n        //            .OrderBy(f => f.ExecutedAt)\n        //            .ToListAsync();\n\n        //        var flowExec = execByCsl.Concat(execByMsg).Concat(execByPhone)\n        //            .GroupBy(x => x.Id)\n        //            .Select(g => g.First())\n        //            .OrderBy(x => x.ExecutedAt)\n        //            .ToList();\n\n        //        foreach (var fe in flowExec)\n        //        {\n        //            if (!string.IsNullOrWhiteSpace(fe.TriggeredByButton))\n        //            {\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = fe.ExecutedAt,\n        //                    Source = \"User\",\n        //                    EventType = \"ButtonClicked\",\n        //                    Title = $\"Clicked Quick Reply: '{fe.TriggeredByButton}'\",\n        //                    Details = string.IsNullOrWhiteSpace(fe.TemplateName)\n        //                        ? $\"Advanced in flow at step '{fe.StepName}'\"\n        //                        : $\"Triggered next template: '{fe.TemplateName}'\",\n        //                    StepId = fe.StepId,\n        //                    StepName = fe.StepName,\n        //                    ButtonIndex = fe.ButtonIndex,\n        //                    ButtonTitle = fe.TriggeredByButton,\n        //                    TemplateName = fe.TemplateName\n        //                });\n        //            }\n\n        //            if (!string.IsNullOrWhiteSpace(fe.TemplateName))\n        //            {\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = fe.ExecutedAt,\n        //                    Source = \"System\",\n        //                    EventType = \"FlowSend\",\n        //                    Title = $\"Flow sent template '{fe.TemplateName}'\",\n        //                    Details = $\"Step '{fe.StepName}'\",\n        //                    StepId = fe.StepId,\n        //                    StepName = fe.StepName,\n        //                    TemplateName = fe.TemplateName\n        //                });\n        //            }\n        //        }\n\n        //        // Include the flow CSLs themselves + statuses (within window)\n        //        foreach (var csl in flowCslChain.Where(x => x.Id != sentLog.Id))\n        //        {\n        //            var ts = csl.SentAt ?? csl.CreatedAt;\n\n        //            events.Add(new JourneyEventDto\n        //            {\n        //                Timestamp = ts,\n        //                Source = \"System\",\n        //                EventType = \"FlowSend\",\n        //                Title = $\"Flow sent template '{csl.TemplateId}'\",\n        //                Details = csl.CTAFlowStepId.HasValue ? $\"Step: {csl.CTAFlowStepId}\" : null,\n        //                StepId = csl.CTAFlowStepId,\n        //                TemplateName = csl.TemplateId\n        //            });\n\n        //            if (csl.DeliveredAt is { } d2 && d2 >= sessionStart && d2 < sessionEnd)\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = d2,\n        //                    Source = \"Provider\",\n        //                    EventType = \"Delivered\",\n        //                    Title = \"Message delivered\",\n        //                    Details = \"\",\n        //                    TemplateName = csl.TemplateId,\n        //                    StepId = csl.CTAFlowStepId\n        //                });\n\n        //            if (csl.ReadAt is { } r2 && r2 >= sessionStart && r2 < sessionEnd)\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = r2,\n        //                    Source = \"Provider\",\n        //                    EventType = \"Read\",\n        //                    Title = \"Message read\",\n        //                    Details = \"\",\n        //                    TemplateName = csl.TemplateId,\n        //                    StepId = csl.CTAFlowStepId\n        //                });\n        //        }\n\n        //        // URL clicks during the flow (within window)\n        //        if (chainCslIds.Count > 0)\n        //        {\n        //            var flowClicks = await _context.CampaignClickLogs\n        //                .AsNoTracking()\n        //                .Where(c => chainCslIds.Contains(c.CampaignSendLogId) &&\n        //                            c.ClickedAt >= sessionStart &&\n        //                            c.ClickedAt < sessionEnd)\n        //                .OrderBy(c => c.ClickedAt)\n        //                .ToListAsync();\n\n        //            foreach (var c in flowClicks)\n        //            {\n        //                events.Add(new JourneyEventDto\n        //                {\n        //                    Timestamp = c.ClickedAt,\n        //                    Source = \"User\",\n        //                    EventType = \"ButtonClicked\",\n        //                    Title = $\"Clicked URL: '{c.ButtonTitle}'\",\n        //                    Details = $\"Redirected to {c.Destination}\",\n        //                    ButtonIndex = c.ButtonIndex,\n        //                    ButtonTitle = c.ButtonTitle,\n        //                    Url = c.Destination\n        //                });\n        //            }\n        //        }\n\n        //        // Where the user left off in this session\n        //        var lastFlowEvent = events\n        //            .Where(e => e.EventType == \"FlowSend\" || e.EventType == \"ButtonClicked\")\n        //            .OrderBy(e => e.Timestamp)\n        //            .LastOrDefault();\n\n        //        resp.LeftOffAt = lastFlowEvent?.StepName ?? lastFlowEvent?.Title;\n        //    }\n\n        //    resp.Events = events.OrderBy(e => e.Timestamp).ToList();\n        //    return resp;\n        //}\n        public async Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId)\n        {\n            var resp = new JourneyResponseDto { Events = new List<JourneyEventDto>() };\n            var events = resp.Events;\n\n            // 0) Load the selected send (campaign required; contact optional)\n            var sentLog = await _context.CampaignSendLogs\n                .AsNoTracking()\n                .Include(x => x.Campaign)\n                .Include(x => x.Contact)\n                .FirstOrDefaultAsync(x => x.Id == initialCampaignSendLogId);\n\n            if (sentLog is null || sentLog.Campaign is null)\n                return resp;\n\n            // Envelope (CampaignId is non-nullable now)\n            var campaignId = sentLog.CampaignId;\n            resp.CampaignId = campaignId;\n            resp.CampaignType = sentLog.CTAFlowConfigId.HasValue ? \"flow\" : \"dynamic_url\";\n            resp.FlowId = sentLog.CTAFlowConfigId;\n\n            if (sentLog.ContactId.HasValue)\n                resp.ContactId = sentLog.ContactId.Value;\n\n            // ---- Resolve a phone for display/flow fallback --------------------------------------------\n            string? phone = sentLog.Contact?.PhoneNumber;\n\n            // via MessageLog\n            if (string.IsNullOrWhiteSpace(phone) && sentLog.MessageLogId.HasValue)\n            {\n                phone = await _context.MessageLogs.AsNoTracking()\n                    .Where(m => m.Id == sentLog.MessageLogId.Value && m.BusinessId == sentLog.BusinessId)\n                    .Select(m => m.RecipientNumber)\n                    .FirstOrDefaultAsync();\n            }\n\n            // via Recipient ‚Üí Contact or AudienceMember\n            if (string.IsNullOrWhiteSpace(phone) && sentLog.RecipientId != Guid.Empty)\n            {\n                var rec = await _context.CampaignRecipients.AsNoTracking()\n                    .Where(r => r.Id == sentLog.RecipientId)\n                    .Select(r => new { r.ContactId, r.AudienceMemberId })\n                    .FirstOrDefaultAsync();\n\n                if (rec is not null)\n                {\n                    if (rec.ContactId.HasValue)\n                        phone = await _context.Contacts.AsNoTracking()\n                            .Where(c => c.Id == rec.ContactId.Value)\n                            .Select(c => c.PhoneNumber)\n                            .FirstOrDefaultAsync();\n                    else if (rec.AudienceMemberId.HasValue)\n                        phone = await _context.AudiencesMembers.AsNoTracking()\n                            .Where(a => a.Id == rec.AudienceMemberId.Value)\n                            .Select(a => a.PhoneE164)\n                            .FirstOrDefaultAsync();\n                }\n            }\n\n            resp.ContactPhone = phone ?? \"\";\n\n            // ---- 1) Session window ---------------------------------------------------------------------\n            var sessionStart = sentLog.SentAt ?? sentLog.CreatedAt;\n\n            DateTime sessionEnd;\n\n            if (sentLog.ContactId.HasValue)\n            {\n                var contactId = sentLog.ContactId.Value;\n\n                var nextSameCampaignAt = await _context.CampaignSendLogs.AsNoTracking()\n                    .Where(x => x.ContactId == contactId &&\n                                x.CampaignId == campaignId &&\n                                x.CreatedAt > sessionStart)\n                    .OrderBy(x => x.CreatedAt)\n                    .Select(x => (DateTime?)x.CreatedAt)\n                    .FirstOrDefaultAsync();\n\n                DateTime? nextSameFlowAt = null;\n                if (sentLog.CTAFlowConfigId.HasValue)\n                {\n                    var flowId = sentLog.CTAFlowConfigId.Value;\n                    nextSameFlowAt = await _context.CampaignSendLogs.AsNoTracking()\n                        .Where(x => x.ContactId == contactId &&\n                                    x.CTAFlowConfigId == flowId &&\n                                    x.CreatedAt > sessionStart)\n                        .OrderBy(x => x.CreatedAt)\n                        .Select(x => (DateTime?)x.CreatedAt)\n                        .FirstOrDefaultAsync();\n                }\n\n                sessionEnd = new[] { nextSameCampaignAt, nextSameFlowAt }\n                    .Where(dt => dt.HasValue)\n                    .Select(dt => dt!.Value)\n                    .DefaultIfEmpty(sessionStart.AddHours(24))\n                    .Min();\n            }\n            else\n            {\n                // No ContactId: keep it simple and robust\n                sessionEnd = sessionStart.AddHours(24);\n            }\n\n            // ---- 2) Initial \"sent\" + statuses from CSL -------------------------------------------------\n            events.Add(new JourneyEventDto\n            {\n                Timestamp = sessionStart,\n                Source = \"System\",\n                EventType = \"MessageSent\",\n                Title = $\"Campaign '{sentLog.Campaign?.Name ?? \"Campaign\"}' sent\",\n                Details = string.IsNullOrWhiteSpace(resp.ContactPhone) ? null :\n                               $\"Template '{sentLog.TemplateId}' to {resp.ContactPhone}\",\n                TemplateName = sentLog.TemplateId\n            });\n\n            if (sentLog.DeliveredAt is { } d1 && d1 >= sessionStart && d1 < sessionEnd)\n                events.Add(new JourneyEventDto\n                {\n                    Timestamp = d1,\n                    Source = \"Provider\",\n                    EventType = \"Delivered\",\n                    Title = \"Message delivered\",\n                    Details = string.IsNullOrWhiteSpace(resp.ContactPhone) ? null : $\"Delivered to {resp.ContactPhone}\",\n                    TemplateName = sentLog.TemplateId\n                });\n\n            if (sentLog.ReadAt is { } r1 && r1 >= sessionStart && r1 < sessionEnd)\n                events.Add(new JourneyEventDto\n                {\n                    Timestamp = r1,\n                    Source = \"Provider\",\n                    EventType = \"Read\",\n                    Title = \"Message read\",\n                    Details = string.IsNullOrWhiteSpace(resp.ContactPhone) ? null : $\"Read by {resp.ContactPhone}\",\n                    TemplateName = sentLog.TemplateId\n                });\n\n            // ---- 3) URL clicks for THIS send within the window ----------------------------------------\n            var urlClicksInitial = await _context.CampaignClickLogs\n                .AsNoTracking()\n                .Where(c => c.CampaignSendLogId == sentLog.Id &&\n                            c.ClickedAt >= sessionStart && c.ClickedAt < sessionEnd)\n                .OrderBy(c => c.ClickedAt)\n                .ToListAsync();\n\n            foreach (var c in urlClicksInitial)\n            {\n                events.Add(new JourneyEventDto\n                {\n                    Timestamp = c.ClickedAt,\n                    Source = \"User\",\n                    EventType = \"ButtonClicked\",\n                    Title = $\"Clicked URL Button: '{c.ButtonTitle}'\",\n                    Details = $\"Redirected to {c.Destination}\",\n                    ButtonIndex = c.ButtonIndex,\n                    ButtonTitle = c.ButtonTitle,\n                    Url = c.Destination\n                });\n            }\n\n            // ---- 4) FLOW chain (if any) ---------------------------------------------------------------\n            if (sentLog.CTAFlowConfigId.HasValue)\n            {\n                var flowId = sentLog.CTAFlowConfigId.Value;\n\n                resp.FlowName = await _context.CTAFlowConfigs.AsNoTracking()\n                    .Where(f => f.Id == flowId)\n                    .Select(f => f.FlowName)\n                    .FirstOrDefaultAsync();\n\n                // Build base query for CSLs in this business/flow within the window\n                var flowCslQuery = _context.CampaignSendLogs.AsNoTracking()\n                    .Where(csl => csl.BusinessId == sentLog.BusinessId &&\n                                  csl.CTAFlowConfigId == flowId &&\n                                  csl.CreatedAt >= sessionStart &&\n                                  csl.CreatedAt < sessionEnd);\n\n                // If we have ContactId, match on it; otherwise match by phone via MessageLogs\n                List<Guid> chainCslIds;\n                if (sentLog.ContactId.HasValue)\n                {\n                    var contactId = sentLog.ContactId.Value;\n                    chainCslIds = await flowCslQuery.Where(csl => csl.ContactId == contactId)\n                        .OrderBy(csl => csl.CreatedAt)\n                        .Select(csl => csl.Id)\n                        .ToListAsync();\n                }\n                else if (!string.IsNullOrWhiteSpace(phone))\n                {\n                    var msgIdsForPhone = await _context.MessageLogs.AsNoTracking()\n                        .Where(m => m.BusinessId == sentLog.BusinessId &&\n                                    m.RecipientNumber == phone &&\n                                    m.CreatedAt >= sessionStart && m.CreatedAt < sessionEnd)\n                        .Select(m => m.Id)\n                        .ToListAsync();\n\n                    chainCslIds = await flowCslQuery\n                        .Where(csl => csl.MessageLogId.HasValue &&\n                                      msgIdsForPhone.Contains(csl.MessageLogId.Value))\n                        .OrderBy(csl => csl.CreatedAt)\n                        .Select(csl => csl.Id)\n                        .ToListAsync();\n\n                    if (!chainCslIds.Contains(sentLog.Id))\n                        chainCslIds.Add(sentLog.Id);\n                }\n                else\n                {\n                    chainCslIds = new List<Guid> { sentLog.Id };\n                }\n\n                // Pull minimal data for those CSLs (for statuses)\n                var flowCslChain = await _context.CampaignSendLogs.AsNoTracking()\n                    .Where(csl => chainCslIds.Contains(csl.Id))\n                    .OrderBy(csl => csl.CreatedAt)\n                    .Select(csl => new\n                    {\n                        csl.Id,\n                        csl.MessageLogId,\n                        csl.SentAt,\n                        csl.CreatedAt,\n                        csl.TemplateId,\n                        csl.CTAFlowStepId,\n                        csl.DeliveredAt,\n                        csl.ReadAt\n                    })\n                    .ToListAsync();\n\n                var chainMsgLogIds = flowCslChain\n                    .Where(x => x.MessageLogId.HasValue)\n                    .Select(x => x.MessageLogId!.Value)\n                    .ToList();\n\n                // Flow exec logs by CSL\n                var execByCsl = await _context.FlowExecutionLogs.AsNoTracking()\n                    .Where(f => f.CampaignSendLogId.HasValue &&\n                                chainCslIds.Contains(f.CampaignSendLogId.Value) &&\n                                f.ExecutedAt >= sessionStart && f.ExecutedAt < sessionEnd)\n                    .OrderBy(f => f.ExecutedAt)\n                    .ToListAsync();\n\n                // ... by MessageLog\n                var execByMsg = chainMsgLogIds.Count == 0\n                    ? new List<FlowExecutionLog>()\n                    : await _context.FlowExecutionLogs.AsNoTracking()\n                        .Where(f => f.MessageLogId.HasValue &&\n                                    chainMsgLogIds.Contains(f.MessageLogId.Value) &&\n                                    f.ExecutedAt >= sessionStart && f.ExecutedAt < sessionEnd)\n                        .OrderBy(f => f.ExecutedAt)\n                        .ToListAsync();\n\n                // ... by Phone fallback (accept + or digits-only)\n                var phoneA = phone ?? \"\";\n                var phoneB = string.IsNullOrWhiteSpace(phoneA)\n                    ? \"\"\n                    : (phoneA.StartsWith(\"+\") ? phoneA[1..] : \"+\" + phoneA);\n\n                var execByPhone = string.IsNullOrWhiteSpace(phoneA)\n                    ? new List<FlowExecutionLog>()\n                    : await _context.FlowExecutionLogs.AsNoTracking()\n                        .Where(f => f.BusinessId == sentLog.BusinessId &&\n                                    f.FlowId == flowId &&\n                                    (f.ContactPhone == phoneA || f.ContactPhone == phoneB) &&\n                                    f.ExecutedAt >= sessionStart && f.ExecutedAt < sessionEnd)\n                        .OrderBy(f => f.ExecutedAt)\n                        .ToListAsync();\n\n                var flowExec = execByCsl.Concat(execByMsg).Concat(execByPhone)\n                    .GroupBy(x => x.Id)\n                    .Select(g => g.First())\n                    .OrderBy(x => x.ExecutedAt)\n                    .ToList();\n\n                foreach (var fe in flowExec)\n                {\n                    if (!string.IsNullOrWhiteSpace(fe.TriggeredByButton))\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = fe.ExecutedAt,\n                            Source = \"User\",\n                            EventType = \"ButtonClicked\",\n                            Title = $\"Clicked Quick Reply: '{fe.TriggeredByButton}'\",\n                            Details = string.IsNullOrWhiteSpace(fe.TemplateName)\n                                          ? $\"Advanced in flow at step '{fe.StepName}'\"\n                                          : $\"Triggered next template: '{fe.TemplateName}'\",\n                            StepId = fe.StepId,\n                            StepName = fe.StepName,\n                            ButtonIndex = fe.ButtonIndex,\n                            ButtonTitle = fe.TriggeredByButton,\n                            TemplateName = fe.TemplateName\n                        });\n                    }\n\n                    if (!string.IsNullOrWhiteSpace(fe.TemplateName))\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = fe.ExecutedAt,\n                            Source = \"System\",\n                            EventType = \"FlowSend\",\n                            Title = $\"Flow sent template '{fe.TemplateName}'\",\n                            Details = $\"Step '{fe.StepName}'\",\n                            StepId = fe.StepId,\n                            StepName = fe.StepName,\n                            TemplateName = fe.TemplateName\n                        });\n                    }\n                }\n\n                // Include the flow CSLs themselves + statuses (within window)\n                foreach (var csl in flowCslChain.Where(x => x.Id != sentLog.Id))\n                {\n                    var ts = csl.SentAt ?? csl.CreatedAt;\n\n                    events.Add(new JourneyEventDto\n                    {\n                        Timestamp = ts,\n                        Source = \"System\",\n                        EventType = \"FlowSend\",\n                        Title = $\"Flow sent template '{csl.TemplateId}'\",\n                        Details = csl.CTAFlowStepId.HasValue ? $\"Step: {csl.CTAFlowStepId}\" : null,\n                        StepId = csl.CTAFlowStepId,\n                        TemplateName = csl.TemplateId\n                    });\n\n                    if (csl.DeliveredAt is { } d2 && d2 >= sessionStart && d2 < sessionEnd)\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = d2,\n                            Source = \"Provider\",\n                            EventType = \"Delivered\",\n                            Title = \"Message delivered\",\n                            Details = \"\",\n                            TemplateName = csl.TemplateId,\n                            StepId = csl.CTAFlowStepId\n                        });\n\n                    if (csl.ReadAt is { } r2 && r2 >= sessionStart && r2 < sessionEnd)\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = r2,\n                            Source = \"Provider\",\n                            EventType = \"Read\",\n                            Title = \"Message read\",\n                            Details = \"\",\n                            TemplateName = csl.TemplateId,\n                            StepId = csl.CTAFlowStepId\n                        });\n                }\n\n                // URL clicks during the flow (within window)\n                if (chainCslIds.Count > 0)\n                {\n                    var flowClicks = await _context.CampaignClickLogs.AsNoTracking()\n                        .Where(c => chainCslIds.Contains(c.CampaignSendLogId) &&\n                                    c.ClickedAt >= sessionStart && c.ClickedAt < sessionEnd)\n                        .OrderBy(c => c.ClickedAt)\n                        .ToListAsync();\n\n                    foreach (var c in flowClicks)\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = c.ClickedAt,\n                            Source = \"User\",\n                            EventType = \"ButtonClicked\",\n                            Title = $\"Clicked URL: '{c.ButtonTitle}'\",\n                            Details = $\"Redirected to {c.Destination}\",\n                            ButtonIndex = c.ButtonIndex,\n                            ButtonTitle = c.ButtonTitle,\n                            Url = c.Destination\n                        });\n                    }\n                }\n\n                // Left-off marker\n                var lastFlowEvent = events\n                    .Where(e => e.EventType == \"FlowSend\" || e.EventType == \"ButtonClicked\")\n                    .OrderBy(e => e.Timestamp)\n                    .LastOrDefault();\n\n                resp.LeftOffAt = lastFlowEvent?.StepName ?? lastFlowEvent?.Title;\n            }\n\n            resp.Events = events.OrderBy(e => e.Timestamp).ToList();\n            return resp;\n        }\n\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IContactJourneyService.cs",
      "sha256": "e073e1050a64e2ac4cd335378ce53f0ed653944621efaefbd090223ab818c8fe",
      "language": "csharp",
      "size": 341,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs; // Updated namespace\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IContactJourneyService\n    {\n        Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId);\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IMessageLogsReportService.cs",
      "sha256": "c9879941a987b70fa6796fad4ee97fce33c7dddc65835b8a5ec3d5115d9598c0",
      "language": "csharp",
      "size": 595,
      "content": "// üìÑ Features/Tracking/Services/IMessageLogsReportService.cs\nusing xbytechat.api.Shared; // PaginatedResponse<T>\nusing xbytechat.api.Features.Tracking.DTOs;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IMessageLogsReportService\n    {\n\n        Task<PaginatedResponse<MessageLogListItemDto>> SearchAsync(\n            Guid businessId,\n            MessageLogReportQueryDto q,\n            CancellationToken ct);\n\n        Task<MessageLogFacetsDto> GetFacetsAsync(\n            Guid businessId,\n            DateTime? fromUtc,\n            CancellationToken ct);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/ITrackingService.cs",
      "sha256": "7331e4a2b1fb44932573c4ed055613cc4ae21dcd9ec54bc25210c57cd340737c",
      "language": "csharp",
      "size": 528,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface ITrackingService\n    {\n        Task LogCTAClickAsync(TrackingLogDto dto);\n        Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId);\n        Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto);\n        Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IUrlBuilderService.cs",
      "sha256": "2415363e2bcc41b916d5b2836a0c28ac68dabd407d67b63661da9feb8372bd56",
      "language": "csharp",
      "size": 273,
      "content": "namespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IUrlBuilderService\n    {\n\n         string BuildTrackedButtonUrl(\n        Guid campaignSendLogId,\n        int buttonIndex,\n        string? buttonTitle,\n        string destinationUrlAbsolute);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/MessageLogsReportService.cs",
      "sha256": "8a67844db3c5b576d25730b2bd7d379ab878463d5615bd2ed0513a63e327b6ec",
      "language": "csharp",
      "size": 10193,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Linq.Expressions;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    \n\n    // Strongly-typed intermediate row for EF translation (avoid 'dynamic')\n    internal sealed class MessageLogRow\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }\n\n        public string? RecipientNumber { get; set; }\n        public string? SenderId { get; set; }           // Campaign.PhoneNumberId\n        public string? SourceChannel { get; set; }      // Campaign.Provider OR MessageLog.Provider\n        public string? Status { get; set; }\n\n        public string? MessageContent { get; set; }\n        public string? ProviderMessageId { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n    }\n\n    public sealed class MessageLogsReportService : IMessageLogsReportService\n    {\n        private readonly AppDbContext _db;\n        public MessageLogsReportService(AppDbContext db) => _db = db;\n\n        public async Task<PaginatedResponse<MessageLogListItemDto>> SearchAsync(\n            Guid businessId, MessageLogReportQueryDto q, CancellationToken ct)\n        {\n            // normalize paging\n            q.Page = Math.Max(1, q.Page);\n            q.PageSize = Math.Clamp(q.PageSize, 1, 200);\n\n            // Base + left join to Campaign to enrich\n            var baseQuery =\n                from m in _db.MessageLogs.AsNoTracking()\n                where m.BusinessId == businessId\n                join c0 in _db.Campaigns.AsNoTracking() on m.CampaignId equals c0.Id into cj\n                from c in cj.DefaultIfEmpty()\n                select new MessageLogRow\n                {\n                    Id = m.Id,\n                    BusinessId = m.BusinessId,\n                    CampaignId = m.CampaignId,\n                    CampaignName = c != null ? c.Name : null,\n                    RecipientNumber = m.RecipientNumber,\n                    SenderId = c != null ? c.PhoneNumberId : null,\n                    SourceChannel = (c != null && c.Provider != null) ? c.Provider : m.Provider,\n                    Status = m.Status,\n                    MessageContent = m.MessageContent,\n                    ProviderMessageId = m.ProviderMessageId ?? m.MessageId,\n                    ErrorMessage = m.ErrorMessage,\n                    CreatedAt = m.CreatedAt,\n                    SentAt = m.SentAt\n                };\n\n            // Time window (prefer SentAt over CreatedAt)\n            if (q.FromUtc.HasValue)\n                baseQuery = baseQuery.Where(x => (x.SentAt ?? x.CreatedAt) >= q.FromUtc.Value);\n            if (q.ToUtc.HasValue)\n                baseQuery = baseQuery.Where(x => (x.SentAt ?? x.CreatedAt) <= q.ToUtc.Value);\n\n            // Optional scope\n            if (q.CampaignId.HasValue)\n                baseQuery = baseQuery.Where(x => x.CampaignId == q.CampaignId.Value);\n\n            // Status filter\n            if (q.Statuses is { Length: > 0 })\n            {\n                var statuses = q.Statuses.Where(s => !string.IsNullOrWhiteSpace(s)).ToArray();\n                if (statuses.Length > 0) baseQuery = baseQuery.Where(x => statuses.Contains(x.Status!));\n            }\n\n            // Channel filter (campaign.Provider preferred, else message.Provider)\n            if (q.Channels is { Length: > 0 })\n            {\n                var chans = q.Channels.Select(s => s.Trim().ToUpperInvariant())\n                                      .Where(s => s.Length > 0).ToArray();\n                if (chans.Length > 0)\n                    baseQuery = baseQuery.Where(x => x.SourceChannel != null &&\n                                                     chans.Contains(x.SourceChannel.ToUpper()));\n            }\n\n            // SenderIds ‚Üí Campaign.PhoneNumberId\n            if (q.SenderIds is { Length: > 0 })\n            {\n                var senders = q.SenderIds.Select(s => s.Trim())\n                                         .Where(s => s.Length > 0).ToArray();\n                if (senders.Length > 0)\n                    baseQuery = baseQuery.Where(x => x.SenderId != null && senders.Contains(x.SenderId));\n            }\n\n            // Free-text search\n            if (!string.IsNullOrWhiteSpace(q.Search))\n            {\n                var s = q.Search.Trim().ToLower();\n                baseQuery = baseQuery.Where(x =>\n                    (x.RecipientNumber ?? \"\").ToLower().Contains(s) ||\n                    (x.MessageContent ?? \"\").ToLower().Contains(s) ||\n                    (x.ErrorMessage ?? \"\").ToLower().Contains(s) ||\n                    (x.ProviderMessageId ?? \"\").ToLower().Contains(s) ||\n                    (x.CampaignName ?? \"\").ToLower().Contains(s));\n            }\n\n            // ----- Strongly-typed sorting -----\n            var sortBy = (q.SortBy ?? \"SentAt\").Trim();\n            var sortDir = (q.SortDir ?? \"desc\").Trim().ToLower() == \"asc\" ? \"asc\" : \"desc\";\n\n            var sortMap = new Dictionary<string, Expression<Func<MessageLogRow, object>>>(\n                StringComparer.OrdinalIgnoreCase)\n            {\n                [\"Recipient\"] = x => x.RecipientNumber ?? \"\",\n                [\"SenderId\"] = x => x.SenderId ?? \"\",\n                [\"Channel\"] = x => x.SourceChannel ?? \"\",\n                [\"Status\"] = x => x.Status ?? \"\",\n                [\"CampaignName\"] = x => x.CampaignName ?? \"\",\n                [\"CreatedAt\"] = x => x.CreatedAt,\n                [\"SentAt\"] = x => x.SentAt ?? x.CreatedAt\n            };\n\n            if (!sortMap.ContainsKey(sortBy)) sortBy = \"SentAt\";\n            var keySelector = sortMap[sortBy];\n\n            IOrderedQueryable<MessageLogRow> ordered =\n                sortDir == \"asc\" ? baseQuery.OrderBy(keySelector)\n                                 : baseQuery.OrderByDescending(keySelector);\n\n            var total = await ordered.CountAsync(ct);\n\n            var items = await ordered\n                .Skip((q.Page - 1) * q.PageSize)\n                .Take(q.PageSize)\n                .Select(x => new MessageLogListItemDto\n                {\n                    Id = x.Id,\n                    BusinessId = x.BusinessId,\n                    CampaignId = x.CampaignId,\n                    CampaignName = x.CampaignName,\n                    RecipientNumber = x.RecipientNumber,\n                    SenderId = x.SenderId,\n                    SourceChannel = x.SourceChannel,\n                    Status = x.Status,\n                    MessageType = null,             // not on MessageLog (can be enriched later)\n                    MessageContent = x.MessageContent,\n                    TemplateName = null,             // not on MessageLog\n                    ProviderMessageId = x.ProviderMessageId,\n                    ErrorMessage = x.ErrorMessage,\n                    CreatedAt = x.CreatedAt,\n                    SentAt = x.SentAt,\n                    DeliveredAt = null,             // not on MessageLog\n                    ReadAt = null              // not on MessageLog\n                })\n                .ToListAsync(ct);\n\n            return new PaginatedResponse<MessageLogListItemDto>\n            {\n                Items = items,\n                TotalCount = total,\n                Page = q.Page,\n                PageSize = q.PageSize\n            };\n        }\n        public async Task<MessageLogFacetsDto> GetFacetsAsync(Guid businessId, DateTime? fromUtc, CancellationToken ct)\n        {\n            // scope last 90 days by default to keep it fast\n            var from = fromUtc ?? DateTime.UtcNow.AddDays(-90);\n\n            // base query limited by business & time\n            var baseQ = _db.MessageLogs\n                .AsNoTracking()\n                .Where(m => m.BusinessId == businessId &&\n                            (m.SentAt ?? m.CreatedAt) >= from);\n\n            // SenderIds come from Campaign.PhoneNumberId (if available)\n\n            var senderIds = await _db.WhatsAppPhoneNumbers\n            .AsNoTracking()\n            .Where(w => w.BusinessId == businessId && w.WhatsAppBusinessNumber != null)\n            .Select(w => w.PhoneNumberId!)\n            .Distinct()\n            .OrderBy(x => x)\n            .ToArrayAsync(ct);\n\n            //var senderIds = await (\n            //    from m in baseQ\n            //    join c0 in _db.Campaigns.AsNoTracking() on m.CampaignId equals c0.Id into cj\n            //    from c in cj.DefaultIfEmpty()\n            //    where c != null && c.PhoneNumberId != null\n            //    select c.PhoneNumberId!\n            //)\n            //.Distinct()\n            //.OrderBy(x => x)\n            //.ToArrayAsync(ct);\n\n            // Channels = provider (prefer campaign.provider, else message.provider)\n            var channels = await (\n                from m in baseQ\n                join c0 in _db.Campaigns.AsNoTracking() on m.CampaignId equals c0.Id into cj\n                from c in cj.DefaultIfEmpty()\n                let prov = (c != null && c.Provider != null) ? c.Provider : m.Provider\n                where prov != null\n                select prov!\n            )\n            .Distinct()\n            .OrderBy(x => x)\n            .ToArrayAsync(ct);\n\n            // Statuses\n            var statuses = await baseQ\n                .Where(m => m.Status != null)\n                .Select(m => m.Status!)\n                .Distinct()\n                .OrderBy(x => x)\n                .ToArrayAsync(ct);\n\n            // WABA Ids = WhatsAppBusinessNumber for this business\n            var wabaIds = await _db.WhatsAppSettings\n                .AsNoTracking()\n                .Where(w => w.BusinessId == businessId && w.WabaId != null)\n                .Select(w => w.WabaId!)\n                .Distinct()\n                .OrderBy(x => x)\n                .ToArrayAsync(ct);\n\n            return new MessageLogFacetsDto\n            {\n                WabaIds = wabaIds,\n                SenderIds = senderIds,\n                Channels = channels,\n                Statuses = statuses\n            };\n        }\n    }\n}\n\n\n"
    }
  ]
}
